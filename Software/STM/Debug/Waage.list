
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d650  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d7dc  0800d7dc  0001d7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8a4  0800d8a4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8a4  0800d8a4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8a4  0800d8a4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800d8a4  0800d8a4  0001d8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8b4  0800d8b4  0001d8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dcc  200001f4  0800daac  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fc0  0800daac  00020fc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003542c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b59  00000000  00000000  00055650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c40  00000000  00000000  0005c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001948  00000000  00000000  0005ddf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024197  00000000  00000000  0005f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002025a  00000000  00000000  000838cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0e28  00000000  00000000  000a3b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007524  00000000  00000000  001549cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d7c4 	.word	0x0800d7c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	0800d7c4 	.word	0x0800d7c4

080001cc <_ZN7AppMainC1Ev>:

Time time = Time(&model, &hi2c1);
bool init = false;
uint8_t initCounter = 0;

AppMain::AppMain() {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001de:	601a      	str	r2, [r3, #0]
	lcSettings1.clkPin = CLK_L1_Pin;
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e2:	2220      	movs	r2, #32
 80001e4:	809a      	strh	r2, [r3, #4]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e8:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001ea:	609a      	str	r2, [r3, #8]
	lcSettings1.dataPin = DATA_L1_Pin;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	819a      	strh	r2, [r3, #12]
	lcSettings1.loadCellNr = 1;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	739a      	strb	r2, [r3, #14]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001fc:	601a      	str	r2, [r3, #0]
	lcSettings2.clkPin = CLK_L2_Pin;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000200:	2280      	movs	r2, #128	; 0x80
 8000202:	809a      	strh	r2, [r3, #4]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 8000208:	609a      	str	r2, [r3, #8]
	lcSettings2.dataPin = DATA_L2_Pin;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 800020c:	2240      	movs	r2, #64	; 0x40
 800020e:	819a      	strh	r2, [r3, #12]
	lcSettings2.loadCellNr = 2;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000212:	2202      	movs	r2, #2
 8000214:	739a      	strb	r2, [r3, #14]

}
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	20000210 	.word	0x20000210
 8000228:	48000400 	.word	0x48000400
 800022c:	20000220 	.word	0x20000220

08000230 <_ZN7AppMain4InitEv>:

void AppMain::Init() {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b085      	sub	sp, #20
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
	loadCell1.InitLoadCell(&model, lcSettings1);
 8000238:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <_ZN7AppMain4InitEv+0x98>)
 800023a:	466c      	mov	r4, sp
 800023c:	f103 0208 	add.w	r2, r3, #8
 8000240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000244:	e884 0003 	stmia.w	r4, {r0, r1}
 8000248:	cb0c      	ldmia	r3, {r2, r3}
 800024a:	4920      	ldr	r1, [pc, #128]	; (80002cc <_ZN7AppMain4InitEv+0x9c>)
 800024c:	4820      	ldr	r0, [pc, #128]	; (80002d0 <_ZN7AppMain4InitEv+0xa0>)
 800024e:	f001 fbd4 	bl	80019fa <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 8000252:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <_ZN7AppMain4InitEv+0xa4>)
 8000254:	466c      	mov	r4, sp
 8000256:	f103 0208 	add.w	r2, r3, #8
 800025a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000262:	cb0c      	ldmia	r3, {r2, r3}
 8000264:	4919      	ldr	r1, [pc, #100]	; (80002cc <_ZN7AppMain4InitEv+0x9c>)
 8000266:	481c      	ldr	r0, [pc, #112]	; (80002d8 <_ZN7AppMain4InitEv+0xa8>)
 8000268:	f001 fbc7 	bl	80019fa <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	screenControl.InitScreen();
 800026c:	481b      	ldr	r0, [pc, #108]	; (80002dc <_ZN7AppMain4InitEv+0xac>)
 800026e:	f003 fb01 	bl	8003874 <_ZN13ScreenControl10InitScreenEv>
	contrast.setContrast(0x09);
 8000272:	2109      	movs	r1, #9
 8000274:	481a      	ldr	r0, [pc, #104]	; (80002e0 <_ZN7AppMain4InitEv+0xb0>)
 8000276:	f001 f883 	bl	8001380 <_ZN8Kontrast11setContrastEh>
	logBook.init();
 800027a:	481a      	ldr	r0, [pc, #104]	; (80002e4 <_ZN7AppMain4InitEv+0xb4>)
 800027c:	f001 fc54 	bl	8001b28 <_ZN3Log4initEv>


	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2140      	movs	r1, #64	; 0x40
 8000284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000288:	f005 f99c 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000294:	f005 f996 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8000298:	2201      	movs	r2, #1
 800029a:	2101      	movs	r1, #1
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 800029e:	f005 f991 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	4810      	ldr	r0, [pc, #64]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 80002a8:	f005 f98c 	bl	80055c4 <HAL_GPIO_WritePin>

	time.UpdateTime();
 80002ac:	480f      	ldr	r0, [pc, #60]	; (80002ec <_ZN7AppMain4InitEv+0xbc>)
 80002ae:	f004 fdb0 	bl	8004e12 <_ZN4Time10UpdateTimeEv>
	timeSynchroCounter = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	605a      	str	r2, [r3, #4]
	model.setWachstyp(Model::E_PARAFINWACHS);
 80002b8:	2102      	movs	r1, #2
 80002ba:	4804      	ldr	r0, [pc, #16]	; (80002cc <_ZN7AppMain4InitEv+0x9c>)
 80002bc:	f002 f90b 	bl	80024d6 <_ZN5Model11setWachstypENS_6EWACHSE>

}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd90      	pop	{r4, r7, pc}
 80002c8:	20000210 	.word	0x20000210
 80002cc:	20000230 	.word	0x20000230
 80002d0:	20000270 	.word	0x20000270
 80002d4:	20000220 	.word	0x20000220
 80002d8:	20000284 	.word	0x20000284
 80002dc:	2000029c 	.word	0x2000029c
 80002e0:	20000298 	.word	0x20000298
 80002e4:	200002b8 	.word	0x200002b8
 80002e8:	48000400 	.word	0x48000400
 80002ec:	200002c4 	.word	0x200002c4

080002f0 <_ZN7AppMain5mainFEv>:

void AppMain::mainF() {
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	ed2d 8b02 	vpush	{d8}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	while (true) {
		if (updateEnable)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d002      	beq.n	800030a <_ZN7AppMain5mainFEv+0x1a>
			updateEnable = false;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
		loadCell2.Update();
 800030a:	4842      	ldr	r0, [pc, #264]	; (8000414 <_ZN7AppMain5mainFEv+0x124>)
 800030c:	f001 fb8f 	bl	8001a2e <_ZN8LoadCell6UpdateEv>
		loadCell1.Update(); //ToDo
 8000310:	4841      	ldr	r0, [pc, #260]	; (8000418 <_ZN7AppMain5mainFEv+0x128>)
 8000312:	f001 fb8c 	bl	8001a2e <_ZN8LoadCell6UpdateEv>
		int32_t weight1 = (model.getLoadCell1() - model.getLoadCellOffset1())
 8000316:	4841      	ldr	r0, [pc, #260]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000318:	f001 fe46 	bl	8001fa8 <_ZNK5Model12getLoadCell1Ev>
 800031c:	4604      	mov	r4, r0
 800031e:	483f      	ldr	r0, [pc, #252]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000320:	f002 f85c 	bl	80023dc <_ZNK5Model18getLoadCellOffset1Ev>
 8000324:	4603      	mov	r3, r0
 8000326:	1ae3      	subs	r3, r4, r3
				/ model.getLoadCellGradient1();
 8000328:	ee07 3a90 	vmov	s15, r3
 800032c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000330:	483a      	ldr	r0, [pc, #232]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000332:	f002 f81f 	bl	8002374 <_ZNK5Model20getLoadCellGradient1Ev>
 8000336:	eeb0 7a40 	vmov.f32	s14, s0
 800033a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800033e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000342:	ee17 3a90 	vmov	r3, s15
 8000346:	60fb      	str	r3, [r7, #12]
		int32_t weight2 = (model.getLoadCell2() - model.getLoadCellOffset2())
 8000348:	4834      	ldr	r0, [pc, #208]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 800034a:	f001 fe47 	bl	8001fdc <_ZNK5Model12getLoadCell2Ev>
 800034e:	4604      	mov	r4, r0
 8000350:	4832      	ldr	r0, [pc, #200]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000352:	f002 f85d 	bl	8002410 <_ZNK5Model18getLoadCellOffset2Ev>
 8000356:	4603      	mov	r3, r0
 8000358:	1ae3      	subs	r3, r4, r3
				/ model.getLoadCellGradient2();
 800035a:	ee07 3a90 	vmov	s15, r3
 800035e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000362:	482e      	ldr	r0, [pc, #184]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000364:	f002 f820 	bl	80023a8 <_ZNK5Model20getLoadCellGradient2Ev>
 8000368:	eeb0 7a40 	vmov.f32	s14, s0
 800036c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000374:	ee17 3a90 	vmov	r3, s15
 8000378:	60bb      	str	r3, [r7, #8]
		model.setWeight(weight1 + weight2);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	b29a      	uxth	r2, r3
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	b29b      	uxth	r3, r3
 8000382:	4413      	add	r3, r2
 8000384:	b29b      	uxth	r3, r3
 8000386:	b21b      	sxth	r3, r3
 8000388:	4619      	mov	r1, r3
 800038a:	4824      	ldr	r0, [pc, #144]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 800038c:	f001 fea4 	bl	80020d8 <_ZN5Model9setWeightEs>
		screenControl.Update();
 8000390:	4823      	ldr	r0, [pc, #140]	; (8000420 <_ZN7AppMain5mainFEv+0x130>)
 8000392:	f003 fa83 	bl	800389c <_ZN13ScreenControl6UpdateEv>

		if (model.isOverrideClock()) {
 8000396:	4821      	ldr	r0, [pc, #132]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 8000398:	f002 f907 	bl	80025aa <_ZNK5Model15isOverrideClockEv>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d006      	beq.n	80003b0 <_ZN7AppMain5mainFEv+0xc0>
			time.SetTime();
 80003a2:	4820      	ldr	r0, [pc, #128]	; (8000424 <_ZN7AppMain5mainFEv+0x134>)
 80003a4:	f004 fcb5 	bl	8004d12 <_ZN4Time7SetTimeEv>
			model.setOverrideClock(false);
 80003a8:	2100      	movs	r1, #0
 80003aa:	481c      	ldr	r0, [pc, #112]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003ac:	f002 f95c 	bl	8002668 <_ZN5Model16setOverrideClockEb>
		}

		if(model.isAddEntry()){
 80003b0:	481a      	ldr	r0, [pc, #104]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003b2:	f002 f91f 	bl	80025f4 <_ZNK5Model10isAddEntryEv>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d006      	beq.n	80003ca <_ZN7AppMain5mainFEv+0xda>
			logBook.addEntriy();
 80003bc:	481a      	ldr	r0, [pc, #104]	; (8000428 <_ZN7AppMain5mainFEv+0x138>)
 80003be:	f001 fc49 	bl	8001c54 <_ZN3Log9addEntriyEv>
			model.setAddEntry(false);
 80003c2:	2100      	movs	r1, #0
 80003c4:	4815      	ldr	r0, [pc, #84]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003c6:	f002 f922 	bl	800260e <_ZN5Model11setAddEntryEb>
		}

		//Waage nullen
		if(!init && initCounter == 100){
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <_ZN7AppMain5mainFEv+0x13c>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	f083 0301 	eor.w	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d016      	beq.n	8000406 <_ZN7AppMain5mainFEv+0x116>
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <_ZN7AppMain5mainFEv+0x140>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b64      	cmp	r3, #100	; 0x64
 80003de:	d112      	bne.n	8000406 <_ZN7AppMain5mainFEv+0x116>
			model.setLoadCellOffset1(model.getLoadCell1());
 80003e0:	480e      	ldr	r0, [pc, #56]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003e2:	f001 fde1 	bl	8001fa8 <_ZNK5Model12getLoadCell1Ev>
 80003e6:	4603      	mov	r3, r0
 80003e8:	4619      	mov	r1, r3
 80003ea:	480c      	ldr	r0, [pc, #48]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003ec:	f002 f802 	bl	80023f4 <_ZN5Model18setLoadCellOffset1El>
			model.setLoadCellOffset2(model.getLoadCell2());
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003f2:	f001 fdf3 	bl	8001fdc <_ZNK5Model12getLoadCell2Ev>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4619      	mov	r1, r3
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <_ZN7AppMain5mainFEv+0x12c>)
 80003fc:	f002 f8aa 	bl	8002554 <_ZN5Model18setLoadCellOffset2El>
			init = true;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <_ZN7AppMain5mainFEv+0x13c>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
		}
		initCounter++;
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <_ZN7AppMain5mainFEv+0x140>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	3301      	adds	r3, #1
 800040c:	b2da      	uxtb	r2, r3
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <_ZN7AppMain5mainFEv+0x140>)
 8000410:	701a      	strb	r2, [r3, #0]
	}
 8000412:	e773      	b.n	80002fc <_ZN7AppMain5mainFEv+0xc>
 8000414:	20000284 	.word	0x20000284
 8000418:	20000270 	.word	0x20000270
 800041c:	20000230 	.word	0x20000230
 8000420:	2000029c 	.word	0x2000029c
 8000424:	200002c4 	.word	0x200002c4
 8000428:	200002b8 	.word	0x200002b8
 800042c:	200002cc 	.word	0x200002cc
 8000430:	200002cd 	.word	0x200002cd

08000434 <_ZN7AppMain11usbTransmitEPhh>:

}



bool AppMain::usbTransmit(uint8_t *data, uint8_t size){
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	4613      	mov	r3, r2
 8000440:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 8000442:	2300      	movs	r3, #0
 8000444:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	b29b      	uxth	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	68b8      	ldr	r0, [r7, #8]
 800044e:	f00c fb5b 	bl	800cb08 <CDC_Transmit_FS>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	bf14      	ite	ne
 8000458:	2301      	movne	r3, #1
 800045a:	2300      	moveq	r3, #0
 800045c:	b2db      	uxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	d00a      	beq.n	8000478 <_ZN7AppMain11usbTransmitEPhh+0x44>
		counter++;
 8000462:	8afb      	ldrh	r3, [r7, #22]
 8000464:	3301      	adds	r3, #1
 8000466:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(1);
 8000468:	2001      	movs	r0, #1
 800046a:	f004 fded 	bl	8005048 <HAL_Delay>
		if(counter >= 200){
 800046e:	8afb      	ldrh	r3, [r7, #22]
 8000470:	2bc7      	cmp	r3, #199	; 0xc7
 8000472:	d9e8      	bls.n	8000446 <_ZN7AppMain11usbTransmitEPhh+0x12>
			return false;	//Trasmit faild
 8000474:	2300      	movs	r3, #0
 8000476:	e000      	b.n	800047a <_ZN7AppMain11usbTransmitEPhh+0x46>
		}
	}
	return true;	//Transmit successful
 8000478:	2301      	movs	r3, #1
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <_ZN7AppMain12ButtonUpdateEv>:




void AppMain::ButtonUpdate() {
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	buttonControl.UpdateButton();
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <_ZN7AppMain12ButtonUpdateEv+0x18>)
 800048e:	f000 fda9 	bl	8000fe4 <_ZN13ButtonControl12UpdateButtonEv>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	200002a8 	.word	0x200002a8

080004a0 <_ZN7AppMain3ClkEv>:

void AppMain::Clk() {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]

	uint8_t seconds = model.getSeconds();
 80004a8:	4874      	ldr	r0, [pc, #464]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004aa:	f001 fdeb 	bl	8002084 <_ZNK5Model10getSecondsEv>
 80004ae:	4603      	mov	r3, r0
 80004b0:	73fb      	strb	r3, [r7, #15]
	uint8_t minute = model.getMinute();
 80004b2:	4872      	ldr	r0, [pc, #456]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004b4:	f001 fdac 	bl	8002010 <_ZNK5Model9getMinuteEv>
 80004b8:	4603      	mov	r3, r0
 80004ba:	73bb      	strb	r3, [r7, #14]
	uint8_t hours = model.getHour();
 80004bc:	486f      	ldr	r0, [pc, #444]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004be:	f001 fd56 	bl	8001f6e <_ZNK5Model7getHourEv>
 80004c2:	4603      	mov	r3, r0
 80004c4:	737b      	strb	r3, [r7, #13]
	uint8_t day = model.getDay();
 80004c6:	486d      	ldr	r0, [pc, #436]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004c8:	f001 fd24 	bl	8001f14 <_ZNK5Model6getDayEv>
 80004cc:	4603      	mov	r3, r0
 80004ce:	733b      	strb	r3, [r7, #12]
	uint8_t month = model.getMonth();
 80004d0:	486a      	ldr	r0, [pc, #424]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004d2:	f001 fdba 	bl	800204a <_ZNK5Model8getMonthEv>
 80004d6:	4603      	mov	r3, r0
 80004d8:	72fb      	strb	r3, [r7, #11]
	uint8_t year = model.getYear();
 80004da:	4868      	ldr	r0, [pc, #416]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004dc:	f001 fe0b 	bl	80020f6 <_ZNK5Model7getYearEv>
 80004e0:	4603      	mov	r3, r0
 80004e2:	72bb      	strb	r3, [r7, #10]
	if (model.getSeconds() < 59) {
 80004e4:	4865      	ldr	r0, [pc, #404]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80004e6:	f001 fdcd 	bl	8002084 <_ZNK5Model10getSecondsEv>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b3a      	cmp	r3, #58	; 0x3a
 80004ee:	bf94      	ite	ls
 80004f0:	2301      	movls	r3, #1
 80004f2:	2300      	movhi	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d003      	beq.n	8000502 <_ZN7AppMain3ClkEv+0x62>
		seconds++;
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	3301      	adds	r3, #1
 80004fe:	73fb      	strb	r3, [r7, #15]
 8000500:	e068      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
	} else {
		seconds = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	73fb      	strb	r3, [r7, #15]
		if (minute == 59) {
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	2b3b      	cmp	r3, #59	; 0x3b
 800050a:	d160      	bne.n	80005ce <_ZN7AppMain3ClkEv+0x12e>
			minute = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	73bb      	strb	r3, [r7, #14]
			if (hours == 23) {
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	2b17      	cmp	r3, #23
 8000514:	d157      	bne.n	80005c6 <_ZN7AppMain3ClkEv+0x126>
				hours = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	737b      	strb	r3, [r7, #13]
				switch (month) {
 800051a:	7afb      	ldrb	r3, [r7, #11]
 800051c:	3b01      	subs	r3, #1
 800051e:	2b0b      	cmp	r3, #11
 8000520:	d858      	bhi.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <_ZN7AppMain3ClkEv+0x88>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	08000559 	.word	0x08000559
 800052c:	080005ab 	.word	0x080005ab
 8000530:	08000559 	.word	0x08000559
 8000534:	08000591 	.word	0x08000591
 8000538:	08000559 	.word	0x08000559
 800053c:	08000591 	.word	0x08000591
 8000540:	08000559 	.word	0x08000559
 8000544:	08000559 	.word	0x08000559
 8000548:	08000591 	.word	0x08000591
 800054c:	08000559 	.word	0x08000559
 8000550:	08000591 	.word	0x08000591
 8000554:	08000573 	.word	0x08000573
				case 3:
				case 5:
				case 7:
				case 8:
				case 10:
					if (day == 31) {
 8000558:	7b3b      	ldrb	r3, [r7, #12]
 800055a:	2b1f      	cmp	r3, #31
 800055c:	d105      	bne.n	800056a <_ZN7AppMain3ClkEv+0xca>
						day = 1;
 800055e:	2301      	movs	r3, #1
 8000560:	733b      	strb	r3, [r7, #12]
						month++;
 8000562:	7afb      	ldrb	r3, [r7, #11]
 8000564:	3301      	adds	r3, #1
 8000566:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 8000568:	e034      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
						day++;
 800056a:	7b3b      	ldrb	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	733b      	strb	r3, [r7, #12]
					break;
 8000570:	e030      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
				case 12:
					if (day == 31) {
 8000572:	7b3b      	ldrb	r3, [r7, #12]
 8000574:	2b1f      	cmp	r3, #31
 8000576:	d107      	bne.n	8000588 <_ZN7AppMain3ClkEv+0xe8>
						day = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	733b      	strb	r3, [r7, #12]
						month = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	72fb      	strb	r3, [r7, #11]
						year++;
 8000580:	7abb      	ldrb	r3, [r7, #10]
 8000582:	3301      	adds	r3, #1
 8000584:	72bb      	strb	r3, [r7, #10]
					} else {
						day++;
					}
					break;
 8000586:	e025      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
						day++;
 8000588:	7b3b      	ldrb	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	733b      	strb	r3, [r7, #12]
					break;
 800058e:	e021      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
				case 4:
				case 6:
				case 9:
				case 11:
					if (day == 30) {
 8000590:	7b3b      	ldrb	r3, [r7, #12]
 8000592:	2b1e      	cmp	r3, #30
 8000594:	d105      	bne.n	80005a2 <_ZN7AppMain3ClkEv+0x102>
						day = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	733b      	strb	r3, [r7, #12]
						month++;
 800059a:	7afb      	ldrb	r3, [r7, #11]
 800059c:	3301      	adds	r3, #1
 800059e:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 80005a0:	e018      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
						day++;
 80005a2:	7b3b      	ldrb	r3, [r7, #12]
 80005a4:	3301      	adds	r3, #1
 80005a6:	733b      	strb	r3, [r7, #12]
					break;
 80005a8:	e014      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
				case 2:
					if (day == 28) {
 80005aa:	7b3b      	ldrb	r3, [r7, #12]
 80005ac:	2b1c      	cmp	r3, #28
 80005ae:	d105      	bne.n	80005bc <_ZN7AppMain3ClkEv+0x11c>
						day = 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	733b      	strb	r3, [r7, #12]
						month++;
 80005b4:	7afb      	ldrb	r3, [r7, #11]
 80005b6:	3301      	adds	r3, #1
 80005b8:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 80005ba:	e00b      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
						day++;
 80005bc:	7b3b      	ldrb	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	733b      	strb	r3, [r7, #12]
					break;
 80005c2:	bf00      	nop
 80005c4:	e006      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
				}
			} else {
				hours++;
 80005c6:	7b7b      	ldrb	r3, [r7, #13]
 80005c8:	3301      	adds	r3, #1
 80005ca:	737b      	strb	r3, [r7, #13]
 80005cc:	e002      	b.n	80005d4 <_ZN7AppMain3ClkEv+0x134>
			}
		} else {
			minute++;
 80005ce:	7bbb      	ldrb	r3, [r7, #14]
 80005d0:	3301      	adds	r3, #1
 80005d2:	73bb      	strb	r3, [r7, #14]
		}
	}

	if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 80005d4:	482a      	ldr	r0, [pc, #168]	; (8000680 <_ZN7AppMain3ClkEv+0x1e0>)
 80005d6:	f003 f9db 	bl	8003990 <_ZN13ScreenControl16getCurrentScreenEv>
 80005da:	4603      	mov	r3, r0
			&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d007      	beq.n	80005f0 <_ZN7AppMain3ClkEv+0x150>
 80005e0:	4827      	ldr	r0, [pc, #156]	; (8000680 <_ZN7AppMain3ClkEv+0x1e0>)
 80005e2:	f003 f9d5 	bl	8003990 <_ZN13ScreenControl16getCurrentScreenEv>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b06      	cmp	r3, #6
 80005ea:	d001      	beq.n	80005f0 <_ZN7AppMain3ClkEv+0x150>
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <_ZN7AppMain3ClkEv+0x152>
 80005f0:	2300      	movs	r3, #0
	if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d01d      	beq.n	8000632 <_ZN7AppMain3ClkEv+0x192>
		model.setSeconds(seconds);
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4619      	mov	r1, r3
 80005fa:	4820      	ldr	r0, [pc, #128]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 80005fc:	f001 fd4f 	bl	800209e <_ZN5Model10setSecondsEh>
		model.setMinute(minute);
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	4619      	mov	r1, r3
 8000604:	481d      	ldr	r0, [pc, #116]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 8000606:	f001 fd10 	bl	800202a <_ZN5Model9setMinuteEh>
		model.setHour(hours);
 800060a:	7b7b      	ldrb	r3, [r7, #13]
 800060c:	4619      	mov	r1, r3
 800060e:	481b      	ldr	r0, [pc, #108]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 8000610:	f001 fcba 	bl	8001f88 <_ZN5Model7setHourEh>
		model.setDay(day);
 8000614:	7b3b      	ldrb	r3, [r7, #12]
 8000616:	4619      	mov	r1, r3
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 800061a:	f001 fc88 	bl	8001f2e <_ZN5Model6setDayEh>
		model.setMonth(month);
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	4619      	mov	r1, r3
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 8000624:	f001 fd1e 	bl	8002064 <_ZN5Model8setMonthEh>
		model.setYear(year);
 8000628:	7abb      	ldrb	r3, [r7, #10]
 800062a:	4619      	mov	r1, r3
 800062c:	4813      	ldr	r0, [pc, #76]	; (800067c <_ZN7AppMain3ClkEv+0x1dc>)
 800062e:	f001 fd6f 	bl	8002110 <_ZN5Model7setYearEh>
	}

	if (timeSynchroCounter < 60) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	2b3b      	cmp	r3, #59	; 0x3b
 8000638:	d805      	bhi.n	8000646 <_ZN7AppMain3ClkEv+0x1a6>
		timeSynchroCounter++;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	605a      	str	r2, [r3, #4]
				&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
			time.UpdateTime();
		}
	}

}
 8000644:	e016      	b.n	8000674 <_ZN7AppMain3ClkEv+0x1d4>
		timeSynchroCounter = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <_ZN7AppMain3ClkEv+0x1e0>)
 800064e:	f003 f99f 	bl	8003990 <_ZN13ScreenControl16getCurrentScreenEv>
 8000652:	4603      	mov	r3, r0
				&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
 8000654:	2b05      	cmp	r3, #5
 8000656:	d007      	beq.n	8000668 <_ZN7AppMain3ClkEv+0x1c8>
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <_ZN7AppMain3ClkEv+0x1e0>)
 800065a:	f003 f999 	bl	8003990 <_ZN13ScreenControl16getCurrentScreenEv>
 800065e:	4603      	mov	r3, r0
 8000660:	2b06      	cmp	r3, #6
 8000662:	d001      	beq.n	8000668 <_ZN7AppMain3ClkEv+0x1c8>
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <_ZN7AppMain3ClkEv+0x1ca>
 8000668:	2300      	movs	r3, #0
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 800066a:	2b00      	cmp	r3, #0
 800066c:	d002      	beq.n	8000674 <_ZN7AppMain3ClkEv+0x1d4>
			time.UpdateTime();
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <_ZN7AppMain3ClkEv+0x1e4>)
 8000670:	f004 fbcf 	bl	8004e12 <_ZN4Time10UpdateTimeEv>
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000230 	.word	0x20000230
 8000680:	2000029c 	.word	0x2000029c
 8000684:	200002c4 	.word	0x200002c4

08000688 <_ZN7AppMain11ReadLogbookEm>:

void AppMain::ReadLogbook(uint32_t addr) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	if(addr == 0){
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d11b      	bne.n	80006d0 <_ZN7AppMain11ReadLogbookEm+0x48>
		uint8_t txBuffer[3];
		txBuffer[0] = (model.getAddrPointer()>>16)&0xFF;
 8000698:	4814      	ldr	r0, [pc, #80]	; (80006ec <_ZN7AppMain11ReadLogbookEm+0x64>)
 800069a:	f001 ff93 	bl	80025c4 <_ZNK5Model14getAddrPointerEv>
 800069e:	4603      	mov	r3, r0
 80006a0:	141b      	asrs	r3, r3, #16
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	723b      	strb	r3, [r7, #8]
		txBuffer[1] = (model.getAddrPointer()>>8)&0xFF;
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <_ZN7AppMain11ReadLogbookEm+0x64>)
 80006a8:	f001 ff8c 	bl	80025c4 <_ZNK5Model14getAddrPointerEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	121b      	asrs	r3, r3, #8
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	727b      	strb	r3, [r7, #9]
		txBuffer[2] = model.getAddrPointer()&0xFF;
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <_ZN7AppMain11ReadLogbookEm+0x64>)
 80006b6:	f001 ff85 	bl	80025c4 <_ZNK5Model14getAddrPointerEv>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	72bb      	strb	r3, [r7, #10]
		usbTransmit(txBuffer, 3);
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2203      	movs	r2, #3
 80006c6:	4619      	mov	r1, r3
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff feb3 	bl	8000434 <_ZN7AppMain11usbTransmitEPhh>
	}else{
		uint8_t *txBuffer = logBook.getLogBookEntry(addr);
		usbTransmit(txBuffer, 16);
	}
}
 80006ce:	e009      	b.n	80006e4 <_ZN7AppMain11ReadLogbookEm+0x5c>
		uint8_t *txBuffer = logBook.getLogBookEntry(addr);
 80006d0:	6839      	ldr	r1, [r7, #0]
 80006d2:	4807      	ldr	r0, [pc, #28]	; (80006f0 <_ZN7AppMain11ReadLogbookEm+0x68>)
 80006d4:	f001 fa6e 	bl	8001bb4 <_ZN3Log15getLogBookEntryEm>
 80006d8:	60f8      	str	r0, [r7, #12]
		usbTransmit(txBuffer, 16);
 80006da:	2210      	movs	r2, #16
 80006dc:	68f9      	ldr	r1, [r7, #12]
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fea8 	bl	8000434 <_ZN7AppMain11usbTransmitEPhh>
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000230 	.word	0x20000230
 80006f0:	200002b8 	.word	0x200002b8

080006f4 <_ZN7AppMain12ResetLogBookEv>:

void AppMain::ResetLogBook(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	logBook.resetAddrPointer();
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <_ZN7AppMain12ResetLogBookEv+0x18>)
 80006fe:	f001 fb67 	bl	8001dd0 <_ZN3Log16resetAddrPointerEv>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200002b8 	.word	0x200002b8

08000710 <_Z41__static_initialization_and_destruction_0ii>:
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d122      	bne.n	8000766 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000726:	4293      	cmp	r3, r2
 8000728:	d11d      	bne.n	8000766 <_Z41__static_initialization_and_destruction_0ii+0x56>
Model model;
 800072a:	4811      	ldr	r0, [pc, #68]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800072c:	f001 fb7a 	bl	8001e24 <_ZN5ModelC1Ev>
LoadCell loadCell1; // = LoadCell(&model, 1);
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000732:	f001 f953 	bl	80019dc <_ZN8LoadCellC1Ev>
LoadCell loadCell2; // = LoadCell(&model, 2);
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000738:	f001 f950 	bl	80019dc <_ZN8LoadCellC1Ev>
Kontrast contrast = Kontrast();
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800073e:	f000 fe13 	bl	8001368 <_ZN8KontrastC1Ev>
ScreenControl screenControl = ScreenControl(&model, &contrast);
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000744:	490a      	ldr	r1, [pc, #40]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000746:	480e      	ldr	r0, [pc, #56]	; (8000780 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000748:	f003 f81e 	bl	8003788 <_ZN13ScreenControlC1EP5ModelP8Kontrast>
ButtonControl buttonControl = ButtonControl(&model);
 800074c:	4908      	ldr	r1, [pc, #32]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000750:	f000 fc2a 	bl	8000fa8 <_ZN13ButtonControlC1EP5Model>
Log logBook = Log(&model);
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000758:	f001 f9d4 	bl	8001b04 <_ZN3LogC1EP5Model>
Time time = Time(&model, &hi2c1);
 800075c:	4a0b      	ldr	r2, [pc, #44]	; (800078c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800075e:	4904      	ldr	r1, [pc, #16]	; (8000770 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000762:	f004 fac3 	bl	8004cec <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000230 	.word	0x20000230
 8000774:	20000270 	.word	0x20000270
 8000778:	20000284 	.word	0x20000284
 800077c:	20000298 	.word	0x20000298
 8000780:	2000029c 	.word	0x2000029c
 8000784:	200002a8 	.word	0x200002a8
 8000788:	200002b8 	.word	0x200002b8
 800078c:	20000374 	.word	0x20000374
 8000790:	200002c4 	.word	0x200002c4

08000794 <_GLOBAL__sub_I_lcSettings1>:
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
 8000798:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ffb7 	bl	8000710 <_Z41__static_initialization_and_destruction_0ii>
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <MX_GPIO_Init+0x170>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	4a55      	ldr	r2, [pc, #340]	; (8000914 <MX_GPIO_Init+0x170>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c6:	4b53      	ldr	r3, [pc, #332]	; (8000914 <MX_GPIO_Init+0x170>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	613b      	str	r3, [r7, #16]
 80007d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	4b50      	ldr	r3, [pc, #320]	; (8000914 <MX_GPIO_Init+0x170>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a4f      	ldr	r2, [pc, #316]	; (8000914 <MX_GPIO_Init+0x170>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b4d      	ldr	r3, [pc, #308]	; (8000914 <MX_GPIO_Init+0x170>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <MX_GPIO_Init+0x170>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a49      	ldr	r2, [pc, #292]	; (8000914 <MX_GPIO_Init+0x170>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <MX_GPIO_Init+0x170>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	4b44      	ldr	r3, [pc, #272]	; (8000914 <MX_GPIO_Init+0x170>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a43      	ldr	r2, [pc, #268]	; (8000914 <MX_GPIO_Init+0x170>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <MX_GPIO_Init+0x170>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000820:	483d      	ldr	r0, [pc, #244]	; (8000918 <MX_GPIO_Init+0x174>)
 8000822:	f004 fecf 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000826:	2200      	movs	r2, #0
 8000828:	f248 0157 	movw	r1, #32855	; 0x8057
 800082c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000830:	f004 fec8 	bl	80055c4 <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	21a9      	movs	r1, #169	; 0xa9
 8000838:	4838      	ldr	r0, [pc, #224]	; (800091c <MX_GPIO_Init+0x178>)
 800083a:	f004 fec3 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4837      	ldr	r0, [pc, #220]	; (8000920 <MX_GPIO_Init+0x17c>)
 8000844:	f004 febe 	bl	80055c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000848:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <MX_GPIO_Init+0x174>)
 8000862:	f004 fd25 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000866:	f248 0357 	movw	r3, #32855	; 0x8057
 800086a:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000882:	f004 fd15 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 8000886:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089e:	f004 fd07 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 80008a2:	23a9      	movs	r3, #169	; 0xa9
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_GPIO_Init+0x178>)
 80008ba:	f004 fcf9 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008c6:	2302      	movs	r3, #2
 80008c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0x178>)
 80008d2:	f004 fced 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 80008d6:	2350      	movs	r3, #80	; 0x50
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0x178>)
 80008ea:	f004 fce1 	bl	80052b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 80008ee:	2308      	movs	r3, #8
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_GPIO_Init+0x17c>)
 8000906:	f004 fcd3 	bl	80052b0 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800
 800091c:	48000400 	.word	0x48000400
 8000920:	48001c00 	.word	0x48001c00

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909EEE;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_I2C1_Init+0x74>)
 8000960:	f004 fe48 	bl	80055f4 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 f991 	bl	8000c90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000974:	f005 fa98 	bl	8005ea8 <HAL_I2CEx_ConfigAnalogFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800097e:	f000 f987 	bl	8000c90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_I2C1_Init+0x74>)
 8000986:	f005 fada 	bl	8005f3e <HAL_I2CEx_ConfigDigitalFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 f97e 	bl	8000c90 <Error_Handler>
  }

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000374 	.word	0x20000374
 800099c:	40005400 	.word	0x40005400
 80009a0:	10909eee 	.word	0x10909eee

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <HAL_I2C_MspInit+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d129      	bne.n	8000a1a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	2312      	movs	r3, #18
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f0:	2304      	movs	r3, #4
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f004 fc57 	bl	80052b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_I2C_MspInit+0x84>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40005400 	.word	0x40005400
 8000a28:	40021000 	.word	0x40021000

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a30:	f004 fa95 	bl	8004f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f81e 	bl	8000a74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f7ff feb4 	bl	80007a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3c:	f7ff ff72 	bl	8000924 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000a40:	f000 fa40 	bl	8000ec4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000a44:	f00b ffa0 	bl	800c988 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <main+0x3c>)
 8000a4a:	f7ff ffab 	bl	80009a4 <HAL_I2C_MspInit>
  HAL_TIM_Base_MspInit(&htim2);
 8000a4e:	4807      	ldr	r0, [pc, #28]	; (8000a6c <main+0x40>)
 8000a50:	f000 fa86 	bl	8000f60 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <main+0x40>)
 8000a56:	f007 fee3 	bl	8008820 <HAL_TIM_Base_Start_IT>

  appMain.Init();
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <main+0x44>)
 8000a5c:	f7ff fbe8 	bl	8000230 <_ZN7AppMain4InitEv>
  appMain.mainF();
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <main+0x44>)
 8000a62:	f7ff fc45 	bl	80002f0 <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <main+0x3a>
 8000a68:	20000374 	.word	0x20000374
 8000a6c:	200003c0 	.word	0x200003c0
 8000a70:	200002d0 	.word	0x200002d0

08000a74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0a4      	sub	sp, #144	; 0x90
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a7e:	2244      	movs	r2, #68	; 0x44
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f00c fd82 	bl	800d58c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2234      	movs	r2, #52	; 0x34
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f00c fd74 	bl	800d58c <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aa4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aa8:	f006 fe38 	bl	800771c <HAL_PWREx_ControlVoltageScaling>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000abc:	f000 f8e8 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000ac0:	2312      	movs	r3, #18
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aca:	2340      	movs	r3, #64	; 0x40
 8000acc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000ad6:	23b0      	movs	r3, #176	; 0xb0
 8000ad8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ada:	2302      	movs	r3, #2
 8000adc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae8:	230a      	movs	r3, #10
 8000aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000afe:	4618      	mov	r0, r3
 8000b00:	f006 fe72 	bl	80077e8 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	bf14      	ite	ne
 8000b0a:	2301      	movne	r3, #1
 8000b0c:	2300      	moveq	r3, #0
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000b14:	f000 f8bc 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b30:	2104      	movs	r1, #4
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 fabe 	bl	80080b4 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bf14      	ite	ne
 8000b3e:	2301      	movne	r3, #1
 8000b40:	2300      	moveq	r3, #0
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000b48:	f000 f8a2 	bl	8000c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000b4c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000b50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000b56:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 fc80 	bl	8008464 <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bf14      	ite	ne
 8000b6a:	2301      	movne	r3, #1
 8000b6c:	2300      	moveq	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000b74:	f000 f88c 	bl	8000c90 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3790      	adds	r7, #144	; 0x90
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

uint8_t timeCounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	/*IO_COM Synchronisationstimer*/
	if(htim->Instance == TIM2){
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d116      	bne.n	8000bc0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timeCounter == 50){
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b32      	cmp	r3, #50	; 0x32
 8000b98:	d106      	bne.n	8000ba8 <HAL_TIM_PeriodElapsedCallback+0x28>
			appMain.Clk();
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b9c:	f7ff fc80 	bl	80004a0 <_ZN7AppMain3ClkEv>
			timeCounter = 0;
 8000ba0:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e005      	b.n	8000bb4 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			timeCounter++;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	3301      	adds	r3, #1
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000bb2:	701a      	strb	r2, [r3, #0]
		}
		appMain.ButtonUpdate();
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bb6:	f7ff fc65 	bl	8000484 <_ZN7AppMain12ButtonUpdateEv>
		appMain.updateEnable = true;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200002d8 	.word	0x200002d8
 8000bcc:	200002d0 	.word	0x200002d0

08000bd0 <USBReceive>:



void USBReceive(uint8_t *buf){
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

	if(buf[0] == (1+48)){
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b31      	cmp	r3, #49	; 0x31
 8000bde:	d140      	bne.n	8000c62 <USBReceive+0x92>
		uint8_t addr[5];
		addr[4] = buf[1]-48;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	3b30      	subs	r3, #48	; 0x30
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	743b      	strb	r3, [r7, #16]
		addr[3] = buf[2]-48;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3302      	adds	r3, #2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3b30      	subs	r3, #48	; 0x30
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	73fb      	strb	r3, [r7, #15]
		addr[2] = buf[3]-48;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3b30      	subs	r3, #48	; 0x30
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	73bb      	strb	r3, [r7, #14]
		addr[1] = buf[4]-48;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3304      	adds	r3, #4
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3b30      	subs	r3, #48	; 0x30
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	737b      	strb	r3, [r7, #13]
		addr[0] = buf[5]-48;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3305      	adds	r3, #5
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3b30      	subs	r3, #48	; 0x30
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	733b      	strb	r3, [r7, #12]

		uint32_t addresse = addr[0]+addr[1]*10+addr[2]*100 + addr[3]*1000+addr[4]*10000;
 8000c1c:	7b3b      	ldrb	r3, [r7, #12]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	7b7b      	ldrb	r3, [r7, #13]
 8000c22:	461a      	mov	r2, r3
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	18ca      	adds	r2, r1, r3
 8000c2e:	7bbb      	ldrb	r3, [r7, #14]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	fb03 f301 	mul.w	r3, r3, r1
 8000c38:	441a      	add	r2, r3
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fb03 f301 	mul.w	r3, r3, r1
 8000c46:	441a      	add	r2, r3
 8000c48:	7c3b      	ldrb	r3, [r7, #16]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c50:	fb03 f301 	mul.w	r3, r3, r1
 8000c54:	4413      	add	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
		appMain.ReadLogbook(addresse);
 8000c58:	6979      	ldr	r1, [r7, #20]
 8000c5a:	480c      	ldr	r0, [pc, #48]	; (8000c8c <USBReceive+0xbc>)
 8000c5c:	f7ff fd14 	bl	8000688 <_ZN7AppMain11ReadLogbookEm>
		appMain.ResetLogBook();
	}else{
		CDC_Transmit_FS(buf, 5);
	}

}
 8000c60:	e00f      	b.n	8000c82 <USBReceive+0xb2>
	}else if(buf[0]==(1+48)){
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b31      	cmp	r3, #49	; 0x31
 8000c68:	d00b      	beq.n	8000c82 <USBReceive+0xb2>
	}else if(buf[0] == (22+48)){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b46      	cmp	r3, #70	; 0x46
 8000c70:	d103      	bne.n	8000c7a <USBReceive+0xaa>
		appMain.ResetLogBook();
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <USBReceive+0xbc>)
 8000c74:	f7ff fd3e 	bl	80006f4 <_ZN7AppMain12ResetLogBookEv>
}
 8000c78:	e003      	b.n	8000c82 <USBReceive+0xb2>
		CDC_Transmit_FS(buf, 5);
 8000c7a:	2105      	movs	r1, #5
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f00b ff43 	bl	800cb08 <CDC_Transmit_FS>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200002d0 	.word	0x200002d0

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <_Z41__static_initialization_and_destruction_0ii>:
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d107      	bne.n	8000cc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d102      	bne.n	8000cc0 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000cba:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000cbc:	f7ff fa86 	bl	80001cc <_ZN7AppMainC1Ev>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200002d0 	.word	0x200002d0

08000ccc <_GLOBAL__sub_I_appMain>:
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff ffe3 	bl	8000ca0 <_Z41__static_initialization_and_destruction_0ii>
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f004 f946 	bl	8005008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <TIM2_IRQHandler+0x10>)
 8000d86:	f007 fd9f 	bl	80088c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200003c0 	.word	0x200003c0

08000d94 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <USB_IRQHandler+0x10>)
 8000d9a:	f005 fa50 	bl	800623e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000cc8 	.word	0x20000cc8

08000da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	return 1;
 8000dac:	2301      	movs	r3, #1
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_kill>:

int _kill(int pid, int sig)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000dc2:	f00c fba9 	bl	800d518 <__errno>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	2316      	movs	r3, #22
 8000dca:	6013      	str	r3, [r2, #0]
	return -1;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_exit>:

void _exit (int status)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000de0:	f04f 31ff 	mov.w	r1, #4294967295
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ffe7 	bl	8000db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000dea:	e7fe      	b.n	8000dea <_exit+0x12>

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f00c fb7c 	bl	800d518 <__errno>
 8000e20:	4602      	mov	r2, r0
 8000e22:	230c      	movs	r3, #12
 8000e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2000a000 	.word	0x2000a000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200002dc 	.word	0x200002dc
 8000e54:	20000fc0 	.word	0x20000fc0

08000e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <SystemInit+0x64>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <SystemInit+0x64>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <SystemInit+0x68>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <SystemInit+0x68>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <SystemInit+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <SystemInit+0x68>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a0f      	ldr	r2, [pc, #60]	; (8000ec0 <SystemInit+0x68>)
 8000e84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <SystemInit+0x68>)
 8000e90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <SystemInit+0x68>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <SystemInit+0x68>)
 8000e9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <SystemInit+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SystemInit+0x64>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eca:	f107 0310 	add.w	r3, r7, #16
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ee8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000eec:	2220      	movs	r2, #32
 8000eee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000ef8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000efc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f0a:	4814      	ldr	r0, [pc, #80]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000f0c:	f007 fc30 	bl	8008770 <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f16:	f7ff febb 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000f28:	f007 fded 	bl	8008b06 <HAL_TIM_ConfigClockSource>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f32:	f7ff fead 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f36:	2320      	movs	r3, #32
 8000f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_TIM2_Init+0x98>)
 8000f44:	f007 ffbe 	bl	8008ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f4e:	f7ff fe9f 	bl	8000c90 <Error_Handler>
  }

}
 8000f52:	bf00      	nop
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200003c0 	.word	0x200003c0

08000f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f70:	d113      	bne.n	8000f9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	201c      	movs	r0, #28
 8000f90:	f004 f957 	bl	8005242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f94:	201c      	movs	r0, #28
 8000f96:	f004 f970 	bl	800527a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	60da      	str	r2, [r3, #12]
}
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000fec:	2108      	movs	r1, #8
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff2:	f004 facf 	bl	8005594 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	bf14      	ite	ne
 8000ffc:	2301      	movne	r3, #1
 8000ffe:	2300      	moveq	r3, #0
 8001000:	b2db      	uxtb	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	795b      	ldrb	r3, [r3, #5]
 800100a:	3301      	adds	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8001016:	2b02      	cmp	r3, #2
 8001018:	d90d      	bls.n	8001036 <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	795b      	ldrb	r3, [r3, #5]
 800101e:	2b63      	cmp	r3, #99	; 0x63
 8001020:	d809      	bhi.n	8001036 <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8001022:	2108      	movs	r1, #8
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f004 fab4 	bl	8005594 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8001036:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8001038:	2b00      	cmp	r3, #0
 800103a:	d008      	beq.n	800104e <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f89e 	bl	8002184 <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d90f      	bls.n	8001076 <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	f083 0301 	eor.w	r3, r3, #1
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d008      	beq.n	8001076 <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	2101      	movs	r1, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f86d 	bl	800214a <_ZN5Model9setT1LongEb>
		T1last = true;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8001076:	2108      	movs	r1, #8
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f004 fa8a 	bl	8005594 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 800109c:	2120      	movs	r1, #32
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f004 fa77 	bl	8005594 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	bf14      	ite	ne
 80010ac:	2301      	movne	r3, #1
 80010ae:	2300      	moveq	r3, #0
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d005      	beq.n	80010c2 <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	799b      	ldrb	r3, [r3, #6]
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d90d      	bls.n	80010e6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	799b      	ldrb	r3, [r3, #6]
 80010ce:	2b63      	cmp	r3, #99	; 0x63
 80010d0:	d809      	bhi.n	80010e6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 80010d2:	2120      	movs	r1, #32
 80010d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d8:	f004 fa5c 	bl	8005594 <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 80010e6:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	2101      	movs	r1, #1
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f880 	bl	80021f8 <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	799b      	ldrb	r3, [r3, #6]
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d90f      	bls.n	8001126 <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	785b      	ldrb	r3, [r3, #1]
 800110a:	f083 0301 	eor.w	r3, r3, #1
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f001 f84f 	bl	80021be <_ZN5Model9setT2LongEb>
		T2last = true;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8001126:	2120      	movs	r1, #32
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f004 fa32 	bl	8005594 <HAL_GPIO_ReadPin>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf0c      	ite	eq
 8001136:	2301      	moveq	r3, #1
 8001138:	2300      	movne	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f004 fa1f 	bl	8005594 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	79db      	ldrb	r3, [r3, #7]
 800116a:	3301      	adds	r3, #1
 800116c:	b2da      	uxtb	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8001176:	2b02      	cmp	r3, #2
 8001178:	d90d      	bls.n	8001196 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	79db      	ldrb	r3, [r3, #7]
 800117e:	2b63      	cmp	r3, #99	; 0x63
 8001180:	d809      	bhi.n	8001196 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f004 fa04 	bl	8005594 <HAL_GPIO_ReadPin>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8001196:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8001198:	2b00      	cmp	r3, #0
 800119a:	d008      	beq.n	80011ae <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 f862 	bl	800226c <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	79db      	ldrb	r3, [r3, #7]
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d90f      	bls.n	80011d6 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	f083 0301 	eor.w	r3, r3, #1
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2101      	movs	r1, #1
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 f831 	bl	8002232 <_ZN5Model9setT3LongEb>
		T3last = true;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011dc:	f004 f9da 	bl	8005594 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf0c      	ite	eq
 80011e6:	2301      	moveq	r3, #1
 80011e8:	2300      	movne	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d005      	beq.n	80011fc <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 80011fc:	2102      	movs	r1, #2
 80011fe:	4859      	ldr	r0, [pc, #356]	; (8001364 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001200:	f004 f9c8 	bl	8005594 <HAL_GPIO_ReadPin>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7a1b      	ldrb	r3, [r3, #8]
 8001218:	3301      	adds	r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 8001224:	2b02      	cmp	r3, #2
 8001226:	d90c      	bls.n	8001242 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7a1b      	ldrb	r3, [r3, #8]
 800122c:	2b63      	cmp	r3, #99	; 0x63
 800122e:	d808      	bhi.n	8001242 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 8001230:	2102      	movs	r1, #2
 8001232:	484c      	ldr	r0, [pc, #304]	; (8001364 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001234:	f004 f9ae 	bl	8005594 <HAL_GPIO_ReadPin>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <_ZN13ButtonControl12UpdateButtonEv+0x260>
 8001242:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f001 f846 	bl	80022e0 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7a1b      	ldrb	r3, [r3, #8]
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d90f      	bls.n	8001282 <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	f083 0301 	eor.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f001 f815 	bl	80022a6 <_ZN5Model9setT4LongEb>
		T4last = true;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 8001282:	2102      	movs	r1, #2
 8001284:	4837      	ldr	r0, [pc, #220]	; (8001364 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001286:	f004 f985 	bl	8005594 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf0c      	ite	eq
 8001290:	2301      	moveq	r3, #1
 8001292:	2300      	movne	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d005      	beq.n	80012a6 <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 80012a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f004 f971 	bl	8005594 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf14      	ite	ne
 80012b8:	2301      	movne	r3, #1
 80012ba:	2300      	moveq	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7a5b      	ldrb	r3, [r3, #9]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d90e      	bls.n	80012f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7a5b      	ldrb	r3, [r3, #9]
 80012da:	2b63      	cmp	r3, #99	; 0x63
 80012dc:	d80a      	bhi.n	80012f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 80012de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f004 f955 	bl	8005594 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <_ZN13ButtonControl12UpdateButtonEv+0x312>
 80012f4:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2101      	movs	r1, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f001 f827 	bl	8002354 <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a5b      	ldrb	r3, [r3, #9]
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d90f      	bls.n	8001334 <_ZN13ButtonControl12UpdateButtonEv+0x350>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	791b      	ldrb	r3, [r3, #4]
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d008      	beq.n	8001334 <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fff6 	bl	800231a <_ZN5Model9setT5LongEb>
		T5last = true;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 8001334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001338:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133c:	f004 f92a 	bl	8005594 <HAL_GPIO_ReadPin>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	725a      	strb	r2, [r3, #9]
	}



}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	48000400 	.word	0x48000400

08001368 <_ZN8KontrastC1Ev>:
#include "Kontrast.h"
#include "i2c.h"



Kontrast::Kontrast() {
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <_ZN8Kontrast11setContrastEh>:

void Kontrast::setContrast(uint8_t data) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af02      	add	r7, sp, #8
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
	uint8_t txData[2];
	txData[0] = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 8001390:	78fb      	ldrb	r3, [r7, #3]
 8001392:	737b      	strb	r3, [r7, #13]

 HAL_I2C_Master_Transmit(&hi2c1,0x2E<<1, (uint8_t*)txData,2,1000);
 8001394:	f107 020c 	add.w	r2, r7, #12
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2302      	movs	r3, #2
 80013a0:	215c      	movs	r1, #92	; 0x5c
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <_ZN8Kontrast11setContrastEh+0x30>)
 80013a4:	f004 f9b6 	bl	8005714 <HAL_I2C_Master_Transmit>

}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000374 	.word	0x20000374

080013b4 <_ZN3LCDC1Ev>:
#include "main.h"




LCD::LCD() {
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

}
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2102      	movs	r1, #2
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f004 f8f2 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2104      	movs	r1, #4
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f004 f8ec 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2108      	movs	r1, #8
 80013f0:	482d      	ldr	r0, [pc, #180]	; (80014a8 <_ZN3LCD7InitLCDEv+0xdc>)
 80013f2:	f004 f8e7 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f004 f8e0 	bl	80055c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	4828      	ldr	r0, [pc, #160]	; (80014ac <_ZN3LCD7InitLCDEv+0xe0>)
 800140c:	f004 f8da 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	4825      	ldr	r0, [pc, #148]	; (80014ac <_ZN3LCD7InitLCDEv+0xe0>)
 8001418:	f004 f8d4 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f004 f8ce 	bl	80055c4 <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 8001428:	2130      	movs	r1, #48	; 0x30
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f970 	bl	8001710 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 8001430:	2001      	movs	r0, #1
 8001432:	f003 fe09 	bl	8005048 <HAL_Delay>
	WriteCommaandWwakeUp(0x30);
 8001436:	2130      	movs	r1, #48	; 0x30
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f969 	bl	8001710 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 800143e:	2001      	movs	r0, #1
 8001440:	f003 fe02 	bl	8005048 <HAL_Delay>
	WriteCommaandWwakeUp(0x30);
 8001444:	2130      	movs	r1, #48	; 0x30
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f962 	bl	8001710 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f003 fdfb 	bl	8005048 <HAL_Delay>
	WriteCommaandWwakeUp(0x20);
 8001452:	2120      	movs	r1, #32
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f95b 	bl	8001710 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f003 fdf4 	bl	8005048 <HAL_Delay>
	WriteCommand(0x28);
 8001460:	2128      	movs	r1, #40	; 0x28
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f99e 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f003 fded 	bl	8005048 <HAL_Delay>
	WriteCommand(0x10); //Set cursor
 800146e:	2110      	movs	r1, #16
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f997 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 8001476:	2001      	movs	r0, #1
 8001478:	f003 fde6 	bl	8005048 <HAL_Delay>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 800147c:	210f      	movs	r1, #15
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f990 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f003 fddf 	bl	8005048 <HAL_Delay>
	WriteCommand(0x06);
 800148a:	2106      	movs	r1, #6
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f989 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f003 fdd8 	bl	8005048 <HAL_Delay>
	WriteCommand(0x01);
 8001498:	2101      	movs	r1, #1
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f982 	bl	80017a4 <_ZN3LCD12WriteCommandEh>

}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	48001c00 	.word	0x48001c00
 80014ac:	48000800 	.word	0x48000800

080014b0 <_ZN3LCD5WriteEPchhS0_hh>:


void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	460b      	mov	r3, r1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	4613      	mov	r3, r2
 80014c4:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 80014c6:	2180      	movs	r1, #128	; 0x80
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f000 f96b 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
 80014d2:	7dfa      	ldrb	r2, [r7, #23]
 80014d4:	79bb      	ldrb	r3, [r7, #6]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d207      	bcs.n	80014ea <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 80014da:	2110      	movs	r1, #16
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f9ef 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	3301      	adds	r3, #1
 80014e6:	75fb      	strb	r3, [r7, #23]
 80014e8:	e7f3      	b.n	80014d2 <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	75bb      	strb	r3, [r7, #22]
 80014ee:	7dbb      	ldrb	r3, [r7, #22]
 80014f0:	2b0b      	cmp	r3, #11
 80014f2:	d814      	bhi.n	800151e <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 80014f4:	79fa      	ldrb	r2, [r7, #7]
 80014f6:	7dbb      	ldrb	r3, [r7, #22]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d908      	bls.n	800150e <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 80014fc:	7dbb      	ldrb	r3, [r7, #22]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 f9da 	bl	80018c0 <_ZN3LCD9WriteDataEh>
 800150c:	e003      	b.n	8001516 <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 800150e:	2110      	movs	r1, #16
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 f9d5 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 8001516:	7dbb      	ldrb	r3, [r7, #22]
 8001518:	3301      	adds	r3, #1
 800151a:	75bb      	strb	r3, [r7, #22]
 800151c:	e7e7      	b.n	80014ee <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 800151e:	21c0      	movs	r1, #192	; 0xc0
 8001520:	68f8      	ldr	r0, [r7, #12]
 8001522:	f000 f93f 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001526:	2300      	movs	r3, #0
 8001528:	757b      	strb	r3, [r7, #21]
 800152a:	7d7a      	ldrb	r2, [r7, #21]
 800152c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001530:	429a      	cmp	r2, r3
 8001532:	d207      	bcs.n	8001544 <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 8001534:	2110      	movs	r1, #16
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f9c2 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 800153c:	7d7b      	ldrb	r3, [r7, #21]
 800153e:	3301      	adds	r3, #1
 8001540:	757b      	strb	r3, [r7, #21]
 8001542:	e7f2      	b.n	800152a <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 8001544:	2300      	movs	r3, #0
 8001546:	753b      	strb	r3, [r7, #20]
 8001548:	7d3a      	ldrb	r2, [r7, #20]
 800154a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800154e:	f1c3 030c 	rsb	r3, r3, #12
 8001552:	429a      	cmp	r2, r3
 8001554:	da15      	bge.n	8001582 <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 8001556:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800155a:	7d3b      	ldrb	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	d908      	bls.n	8001572 <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 8001560:	7d3b      	ldrb	r3, [r7, #20]
 8001562:	6a3a      	ldr	r2, [r7, #32]
 8001564:	4413      	add	r3, r2
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f9a8 	bl	80018c0 <_ZN3LCD9WriteDataEh>
 8001570:	e003      	b.n	800157a <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 8001572:	2110      	movs	r1, #16
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f9a3 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 800157a:	7d3b      	ldrb	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	753b      	strb	r3, [r7, #20]
 8001580:	e7e2      	b.n	8001548 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_ZN3LCD5ClearEv>:

void LCD::Clear(){
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	WriteCommand(0x80);
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f905 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	uint8_t counter = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
	for(counter= 0; counter<12; counter++){
 800159e:	2300      	movs	r3, #0
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2b0b      	cmp	r3, #11
 80015a6:	d807      	bhi.n	80015b8 <_ZN3LCD5ClearEv+0x2e>
		WriteData(0x10);
 80015a8:	2110      	movs	r1, #16
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f988 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(counter= 0; counter<12; counter++){
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	e7f4      	b.n	80015a2 <_ZN3LCD5ClearEv+0x18>
	}

	WriteCommand(0xC0);
 80015b8:	21c0      	movs	r1, #192	; 0xc0
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8f2 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	for(counter= 0; counter<12; counter++){
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2b0b      	cmp	r3, #11
 80015c8:	d807      	bhi.n	80015da <_ZN3LCD5ClearEv+0x50>
		WriteData(0x10);
 80015ca:	2110      	movs	r1, #16
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f977 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(counter= 0; counter<12; counter++){
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	3301      	adds	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e7f4      	b.n	80015c4 <_ZN3LCD5ClearEv+0x3a>
	}
}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN3LCD5WriteEPKchhPchh>:


void LCD::Write(const char* line1, uint8_t lenght1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	4611      	mov	r1, r2
 80015ee:	461a      	mov	r2, r3
 80015f0:	460b      	mov	r3, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
	WriteCommand(0x80+startl1);
 80015f8:	79bb      	ldrb	r3, [r7, #6]
 80015fa:	3b80      	subs	r3, #128	; 0x80
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f8cf 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
 800160a:	7dfa      	ldrb	r2, [r7, #23]
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	f1c3 030c 	rsb	r3, r3, #12
 8001612:	429a      	cmp	r2, r3
 8001614:	da14      	bge.n	8001640 <_ZN3LCD5WriteEPKchhPchh+0x5e>
		if(lenght1 > i){
 8001616:	79fa      	ldrb	r2, [r7, #7]
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	429a      	cmp	r2, r3
 800161c:	d908      	bls.n	8001630 <_ZN3LCD5WriteEPKchhPchh+0x4e>
			WriteData(line1[i]);
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f000 f949 	bl	80018c0 <_ZN3LCD9WriteDataEh>
 800162e:	e003      	b.n	8001638 <_ZN3LCD5WriteEPKchhPchh+0x56>
		}else{
			WriteData(0x10);
 8001630:	2110      	movs	r1, #16
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 f944 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	3301      	adds	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
 800163e:	e7e4      	b.n	800160a <_ZN3LCD5WriteEPKchhPchh+0x28>
		}
	}


	WriteCommand(0x80+0x40);
 8001640:	21c0      	movs	r1, #192	; 0xc0
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f8ae 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001648:	2300      	movs	r3, #0
 800164a:	75bb      	strb	r3, [r7, #22]
 800164c:	7dba      	ldrb	r2, [r7, #22]
 800164e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001652:	429a      	cmp	r2, r3
 8001654:	d207      	bcs.n	8001666 <_ZN3LCD5WriteEPKchhPchh+0x84>
		WriteData(0x10);
 8001656:	2110      	movs	r1, #16
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f000 f931 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 800165e:	7dbb      	ldrb	r3, [r7, #22]
 8001660:	3301      	adds	r3, #1
 8001662:	75bb      	strb	r3, [r7, #22]
 8001664:	e7f2      	b.n	800164c <_ZN3LCD5WriteEPKchhPchh+0x6a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 8001666:	2300      	movs	r3, #0
 8001668:	757b      	strb	r3, [r7, #21]
 800166a:	7d7a      	ldrb	r2, [r7, #21]
 800166c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001670:	f1c3 030c 	rsb	r3, r3, #12
 8001674:	429a      	cmp	r2, r3
 8001676:	da15      	bge.n	80016a4 <_ZN3LCD5WriteEPKchhPchh+0xc2>
		if(lengthL2 > i){
 8001678:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800167c:	7d7b      	ldrb	r3, [r7, #21]
 800167e:	429a      	cmp	r2, r3
 8001680:	d908      	bls.n	8001694 <_ZN3LCD5WriteEPKchhPchh+0xb2>
			WriteData(line2[i]);
 8001682:	7d7b      	ldrb	r3, [r7, #21]
 8001684:	6a3a      	ldr	r2, [r7, #32]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4619      	mov	r1, r3
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f917 	bl	80018c0 <_ZN3LCD9WriteDataEh>
 8001692:	e003      	b.n	800169c <_ZN3LCD5WriteEPKchhPchh+0xba>
		}else{
			WriteData(0x10);
 8001694:	2110      	movs	r1, #16
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f912 	bl	80018c0 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 800169c:	7d7b      	ldrb	r3, [r7, #21]
 800169e:	3301      	adds	r3, #1
 80016a0:	757b      	strb	r3, [r7, #21]
 80016a2:	e7e2      	b.n	800166a <_ZN3LCD5WriteEPKchhPchh+0x88>
		}
	}


}
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	70fb      	strb	r3, [r7, #3]
 80016be:	460b      	mov	r3, r1
 80016c0:	70bb      	strb	r3, [r7, #2]
 80016c2:	4613      	mov	r3, r2
 80016c4:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 80016c6:	78bb      	ldrb	r3, [r7, #2]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d107      	bne.n	80016dc <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	3b80      	subs	r3, #128	; 0x80
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f865 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
 80016da:	e009      	b.n	80016f0 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d106      	bne.n	80016f0 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	3b40      	subs	r3, #64	; 0x40
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f85a 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d004      	beq.n	8001700 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 80016f6:	210f      	movs	r1, #15
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 f853 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
	}




}
 80016fe:	e003      	b.n	8001708 <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001700:	210f      	movs	r1, #15
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f84e 	bl	80017a4 <_ZN3LCD12WriteCommandEh>
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	111b      	asrs	r3, r3, #4
 8001720:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	461a      	mov	r2, r3
 800172c:	2102      	movs	r1, #2
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f003 ff47 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	2104      	movs	r1, #4
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f003 ff3d 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	b2db      	uxtb	r3, r3
 8001752:	461a      	mov	r2, r3
 8001754:	2108      	movs	r1, #8
 8001756:	4812      	ldr	r0, [pc, #72]	; (80017a0 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 8001758:	f003 ff34 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f003 ff29 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 8001772:	2064      	movs	r0, #100	; 0x64
 8001774:	f001 f918 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2101      	movs	r1, #1
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f003 ff20 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f001 f90f 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2101      	movs	r1, #1
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f003 ff17 	bl	80055c4 <HAL_GPIO_WritePin>
}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	48001c00 	.word	0x48001c00

080017a4 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b6:	4840      	ldr	r0, [pc, #256]	; (80018b8 <_ZN3LCD12WriteCommandEh+0x114>)
 80017b8:	f003 ff04 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	483d      	ldr	r0, [pc, #244]	; (80018b8 <_ZN3LCD12WriteCommandEh+0x114>)
 80017c4:	f003 fefe 	bl	80055c4 <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	111b      	asrs	r3, r3, #4
 80017cc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2102      	movs	r1, #2
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f003 fef1 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	2104      	movs	r1, #4
 80017ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f2:	f003 fee7 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	2108      	movs	r1, #8
 8001802:	482e      	ldr	r0, [pc, #184]	; (80018bc <_ZN3LCD12WriteCommandEh+0x118>)
 8001804:	f003 fede 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f003 fed3 	bl	80055c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800181e:	2201      	movs	r2, #1
 8001820:	2101      	movs	r1, #1
 8001822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001826:	f003 fecd 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 800182a:	2064      	movs	r0, #100	; 0x64
 800182c:	f001 f8bc 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2101      	movs	r1, #1
 8001834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001838:	f003 fec4 	bl	80055c4 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	2102      	movs	r1, #2
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f003 feba 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	2104      	movs	r1, #4
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f003 feb0 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	2108      	movs	r1, #8
 8001870:	4812      	ldr	r0, [pc, #72]	; (80018bc <_ZN3LCD12WriteCommandEh+0x118>)
 8001872:	f003 fea7 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f003 fe9c 	bl	80055c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	2101      	movs	r1, #1
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f003 fe96 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f001 f885 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	2101      	movs	r1, #1
 80018a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a6:	f003 fe8d 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80018aa:	2064      	movs	r0, #100	; 0x64
 80018ac:	f001 f87c 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48001c00 	.word	0x48001c00

080018c0 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d2:	4840      	ldr	r0, [pc, #256]	; (80019d4 <_ZN3LCD9WriteDataEh+0x114>)
 80018d4:	f003 fe76 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018de:	483d      	ldr	r0, [pc, #244]	; (80019d4 <_ZN3LCD9WriteDataEh+0x114>)
 80018e0:	f003 fe70 	bl	80055c4 <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	111b      	asrs	r3, r3, #4
 80018e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	461a      	mov	r2, r3
 80018f4:	2102      	movs	r1, #2
 80018f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fa:	f003 fe63 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	2104      	movs	r1, #4
 800190a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800190e:	f003 fe59 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	b2db      	uxtb	r3, r3
 800191a:	461a      	mov	r2, r3
 800191c:	2108      	movs	r1, #8
 800191e:	482e      	ldr	r0, [pc, #184]	; (80019d8 <_ZN3LCD9WriteDataEh+0x118>)
 8001920:	f003 fe50 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001936:	f003 fe45 	bl	80055c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2101      	movs	r1, #1
 800193e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001942:	f003 fe3f 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 8001946:	2064      	movs	r0, #100	; 0x64
 8001948:	f001 f82e 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	2101      	movs	r1, #1
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f003 fe36 	bl	80055c4 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001958:	78fb      	ldrb	r3, [r7, #3]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	2102      	movs	r1, #2
 8001964:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001968:	f003 fe2c 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	2104      	movs	r1, #4
 8001978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197c:	f003 fe22 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	2108      	movs	r1, #8
 800198c:	4812      	ldr	r0, [pc, #72]	; (80019d8 <_ZN3LCD9WriteDataEh+0x118>)
 800198e:	f003 fe19 	bl	80055c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f003 fe0e 	bl	80055c4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	2101      	movs	r1, #1
 80019ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b0:	f003 fe08 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80019b4:	2064      	movs	r0, #100	; 0x64
 80019b6:	f000 fff7 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2101      	movs	r1, #1
 80019be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c2:	f003 fdff 	bl	80055c4 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80019c6:	2064      	movs	r0, #100	; 0x64
 80019c8:	f000 ffee 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48001c00 	.word	0x48001c00

080019dc <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	this->model = model;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 80019fa:	b082      	sub	sp, #8
 80019fc:	b490      	push	{r4, r7}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	f107 0110 	add.w	r1, r7, #16
 8001a0a:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	1d1c      	adds	r4, r3, #4
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc90      	pop	{r4, r7}
 8001a2a:	b002      	add	sp, #8
 8001a2c:	4770      	bx	lr

08001a2e <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6858      	ldr	r0, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	891b      	ldrh	r3, [r3, #8]
 8001a42:	2200      	movs	r2, #0
 8001a44:	4619      	mov	r1, r3
 8001a46:	f003 fdbd 	bl	80055c4 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68da      	ldr	r2, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8a1b      	ldrh	r3, [r3, #16]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f003 fd9d 	bl	8005594 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d048      	beq.n	8001afc <_ZN8LoadCell6UpdateEv+0xce>
		for(int i = 0; i<25; i++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2b18      	cmp	r3, #24
 8001a72:	dc29      	bgt.n	8001ac8 <_ZN8LoadCell6UpdateEv+0x9a>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6858      	ldr	r0, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	891b      	ldrh	r3, [r3, #8]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f003 fda0 	bl	80055c4 <HAL_GPIO_WritePin>
			Tools::DWT_Delay_us(10);
 8001a84:	200a      	movs	r0, #10
 8001a86:	f000 ff8f 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	4619      	mov	r1, r3
 8001a96:	f003 fd95 	bl	80055c4 <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8a1b      	ldrh	r3, [r3, #16]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f003 fd75 	bl	8005594 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461a      	mov	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
			Tools::DWT_Delay_us(10);
 8001aba:	200a      	movs	r0, #10
 8001abc:	f000 ff74 	bl	80029a8 <_ZN5Tools12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	e7d2      	b.n	8001a6e <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7c9b      	ldrb	r3, [r3, #18]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d002      	beq.n	8001adc <_ZN8LoadCell6UpdateEv+0xae>
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d008      	beq.n	8001aec <_ZN8LoadCell6UpdateEv+0xbe>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 8001ada:	e00f      	b.n	8001afc <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell1(data);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	4611      	mov	r1, r2
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fa6b 	bl	8001fc0 <_ZN5Model12setLoadCell1El>
			break;
 8001aea:	e007      	b.n	8001afc <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell2(data);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fa7d 	bl	8001ff4 <_ZN5Model12setLoadCell2El>
			break;
 8001afa:	bf00      	nop
		}
	}

}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_ZN3LogC1EP5Model>:
 *      Author: marcel
 */

#include "Log.h"

Log::Log(Model *model) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	609a      	str	r2, [r3, #8]
	addrPointer = 1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	605a      	str	r2, [r3, #4]
}
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <_ZN3Log4initEv>:

void Log::init() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	6078      	str	r0, [r7, #4]

	uint8_t txBuffer[] = { 0x00, 0x00 };
 8001b30:	2300      	movs	r3, #0
 8001b32:	733b      	strb	r3, [r7, #12]
 8001b34:	2300      	movs	r3, #0
 8001b36:	737b      	strb	r3, [r7, #13]
	uint8_t rxBuffer[] = { 0, 0,0 };
 8001b38:	2300      	movs	r3, #0
 8001b3a:	723b      	strb	r3, [r7, #8]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	727b      	strb	r3, [r7, #9]
 8001b40:	2300      	movs	r3, #0
 8001b42:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR << 1, txBuffer, 2, 100);
 8001b44:	f107 020c 	add.w	r2, r7, #12
 8001b48:	2364      	movs	r3, #100	; 0x64
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	21a8      	movs	r1, #168	; 0xa8
 8001b50:	4817      	ldr	r0, [pc, #92]	; (8001bb0 <_ZN3Log4initEv+0x88>)
 8001b52:	f003 fddf 	bl	8005714 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 3, 100);
 8001b56:	f107 0208 	add.w	r2, r7, #8
 8001b5a:	2364      	movs	r3, #100	; 0x64
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2303      	movs	r3, #3
 8001b60:	21a8      	movs	r1, #168	; 0xa8
 8001b62:	4813      	ldr	r0, [pc, #76]	; (8001bb0 <_ZN3Log4initEv+0x88>)
 8001b64:	f003 feca 	bl	80058fc <HAL_I2C_Master_Receive>

	if((addrPointer = ((rxBuffer[0]<<16) + (rxBuffer[1]<<8) + (rxBuffer[2]))) == 0){
 8001b68:	7a3b      	ldrb	r3, [r7, #8]
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	7a7b      	ldrb	r3, [r7, #9]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	4413      	add	r3, r2
 8001b72:	7aba      	ldrb	r2, [r7, #10]
 8001b74:	4413      	add	r3, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <_ZN3Log4initEv+0x6c>
		addrPointer = 1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	605a      	str	r2, [r3, #4]
	}

	model->setAddrPointer(addrPointer);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	f000 fd52 	bl	800264a <_ZN5Model14setAddrPointerEt>

}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000374 	.word	0x20000374

08001bb4 <_ZN3Log15getLogBookEntryEm>:

uint8_t* Log::getLogBookEntry(uint32_t addr) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]

	if(addr == 0){
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d116      	bne.n	8001bf2 <_ZN3Log15getLogBookEntryEm+0x3e>
		uint8_t txBuffer[] = {0,0};
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	753b      	strb	r3, [r7, #20]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	757b      	strb	r3, [r7, #21]
		static uint8_t rxBuffer[3];
		HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 2, 100);
 8001bcc:	f107 0214 	add.w	r2, r7, #20
 8001bd0:	2364      	movs	r3, #100	; 0x64
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	21a8      	movs	r1, #168	; 0xa8
 8001bd8:	481b      	ldr	r0, [pc, #108]	; (8001c48 <_ZN3Log15getLogBookEntryEm+0x94>)
 8001bda:	f003 fd9b 	bl	8005714 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 3, 100);
 8001bde:	2364      	movs	r3, #100	; 0x64
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2303      	movs	r3, #3
 8001be4:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <_ZN3Log15getLogBookEntryEm+0x98>)
 8001be6:	21a8      	movs	r1, #168	; 0xa8
 8001be8:	4817      	ldr	r0, [pc, #92]	; (8001c48 <_ZN3Log15getLogBookEntryEm+0x94>)
 8001bea:	f003 fe87 	bl	80058fc <HAL_I2C_Master_Receive>
		return rxBuffer;
 8001bee:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <_ZN3Log15getLogBookEntryEm+0x98>)
 8001bf0:	e026      	b.n	8001c40 <_ZN3Log15getLogBookEntryEm+0x8c>
	}else{
		uint32_t addrCounter = (addr*16-13);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	011b      	lsls	r3, r3, #4
 8001bf6:	3b0d      	subs	r3, #13
 8001bf8:	613b      	str	r3, [r7, #16]
		uint8_t txBuffer[2];


		addr = ((addrCounter)>>16)&0xFF;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	603b      	str	r3, [r7, #0]
		txBuffer[0] = ((addrCounter)>>8)&0xFF;
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	733b      	strb	r3, [r7, #12]
		txBuffer[1] = (addrCounter)&0xFF;
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	737b      	strb	r3, [r7, #13]

		static uint8_t rxBuffer[16];

		HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR | addr) << 1, txBuffer, 2, 100);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f043 03a8 	orr.w	r3, r3, #168	; 0xa8
 8001c1c:	b299      	uxth	r1, r3
 8001c1e:	f107 020c 	add.w	r2, r7, #12
 8001c22:	2364      	movs	r3, #100	; 0x64
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	2302      	movs	r3, #2
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <_ZN3Log15getLogBookEntryEm+0x94>)
 8001c2a:	f003 fd73 	bl	8005714 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 16, 100);
 8001c2e:	2364      	movs	r3, #100	; 0x64
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2310      	movs	r3, #16
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <_ZN3Log15getLogBookEntryEm+0x9c>)
 8001c36:	21a8      	movs	r1, #168	; 0xa8
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <_ZN3Log15getLogBookEntryEm+0x94>)
 8001c3a:	f003 fe5f 	bl	80058fc <HAL_I2C_Master_Receive>
		return rxBuffer;
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <_ZN3Log15getLogBookEntryEm+0x9c>)
	}


}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000374 	.word	0x20000374
 8001c4c:	200002e0 	.word	0x200002e0
 8001c50:	200002e4 	.word	0x200002e4

08001c54 <_ZN3Log9addEntriyEv>:

void Log::addEntriy() {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08a      	sub	sp, #40	; 0x28
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	6078      	str	r0, [r7, #4]

	uint8_t txBuffer[18];

	uint32_t addrCounter = (addrPointer*16-13);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	3b0d      	subs	r3, #13
 8001c64:	60bb      	str	r3, [r7, #8]

	uint8_t addr = ((addrCounter)>>16)&0xFF;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	77fb      	strb	r3, [r7, #31]

	txBuffer[0] = ((addrCounter)>>8)&0xFF;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (addrCounter)&0xFF;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = model->getYear();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa39 	bl	80020f6 <_ZNK5Model7getYearEv>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73bb      	strb	r3, [r7, #14]
	txBuffer[3] = model->getMonth();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f9dc 	bl	800204a <_ZNK5Model8getMonthEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
	txBuffer[4] = model->getDay();
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f93a 	bl	8001f14 <_ZNK5Model6getDayEv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	743b      	strb	r3, [r7, #16]
	txBuffer[5] = model->getHour();
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 f960 	bl	8001f6e <_ZNK5Model7getHourEv>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	747b      	strb	r3, [r7, #17]
	txBuffer[6] = model->getMinute();
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f9aa 	bl	8002010 <_ZNK5Model9getMinuteEv>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	74bb      	strb	r3, [r7, #18]
	txBuffer[7] = model->getSeconds();
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 f9dd 	bl	8002084 <_ZNK5Model10getSecondsEv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	74fb      	strb	r3, [r7, #19]
	txBuffer[8] = ';';
 8001cce:	233b      	movs	r3, #59	; 0x3b
 8001cd0:	753b      	strb	r3, [r7, #20]
	txBuffer[9] = (model->getWeight() >> 8) & 0xFF;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f9f1 	bl	80020be <_ZNK5Model9getWeightEv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	121b      	asrs	r3, r3, #8
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	757b      	strb	r3, [r7, #21]
	txBuffer[10] = (model->getWeight()) & 0xFF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f9e8 	bl	80020be <_ZNK5Model9getWeightEv>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	75bb      	strb	r3, [r7, #22]
	txBuffer[11] = ';';
 8001cf4:	233b      	movs	r3, #59	; 0x3b
 8001cf6:	75fb      	strb	r3, [r7, #23]
	txBuffer[12] = (model->getPrize() >> 16) & 0xFF;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fc6d 	bl	80025dc <_ZNK5Model8getPrizeEv>
 8001d02:	4603      	mov	r3, r0
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	763b      	strb	r3, [r7, #24]
	txBuffer[13] = (model->getPrize() >> 8) & 0xFF;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fc64 	bl	80025dc <_ZNK5Model8getPrizeEv>
 8001d14:	4603      	mov	r3, r0
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	767b      	strb	r3, [r7, #25]
	txBuffer[14] = (model->getPrize()) & 0xFF;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f000 fc5b 	bl	80025dc <_ZNK5Model8getPrizeEv>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	76bb      	strb	r3, [r7, #26]
	txBuffer[15] = ';';
 8001d2c:	233b      	movs	r3, #59	; 0x3b
 8001d2e:	76fb      	strb	r3, [r7, #27]
	txBuffer[16] = (uint8_t) model->getWachstyp();
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f000 fbc1 	bl	80024bc <_ZNK5Model11getWachstypEv>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	773b      	strb	r3, [r7, #28]
	txBuffer[17] = '*';
 8001d3e:	232a      	movs	r3, #42	; 0x2a
 8001d40:	777b      	strb	r3, [r7, #29]

	HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR | addr) << 1, txBuffer, 18, 100);
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	f107 020c 	add.w	r2, r7, #12
 8001d54:	2364      	movs	r3, #100	; 0x64
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2312      	movs	r3, #18
 8001d5a:	481c      	ldr	r0, [pc, #112]	; (8001dcc <_ZN3Log9addEntriyEv+0x178>)
 8001d5c:	f003 fcda 	bl	8005714 <HAL_I2C_Master_Transmit>
	addrPointer++;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	605a      	str	r2, [r3, #4]
	model->setAddrPointer(addrPointer);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689a      	ldr	r2, [r3, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f000 fc67 	bl	800264a <_ZN5Model14setAddrPointerEt>

	//Update Addresspointer
	txBuffer[0] = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = (addrPointer >> 16) & 0x0000FF;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	73bb      	strb	r3, [r7, #14]
	txBuffer[3] = (addrPointer>>8)&0x0000FF;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	73fb      	strb	r3, [r7, #15]
	txBuffer[4] = (addrPointer & 0x0000FF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	743b      	strb	r3, [r7, #16]

	while(HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 5, 100) != HAL_OK);
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	2364      	movs	r3, #100	; 0x64
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2305      	movs	r3, #5
 8001daa:	21a8      	movs	r1, #168	; 0xa8
 8001dac:	4807      	ldr	r0, [pc, #28]	; (8001dcc <_ZN3Log9addEntriyEv+0x178>)
 8001dae:	f003 fcb1 	bl	8005714 <HAL_I2C_Master_Transmit>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d000      	beq.n	8001dc4 <_ZN3Log9addEntriyEv+0x170>
 8001dc2:	e7ed      	b.n	8001da0 <_ZN3Log9addEntriyEv+0x14c>

//	HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 5, 100);
}
 8001dc4:	bf00      	nop
 8001dc6:	3720      	adds	r7, #32
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000374 	.word	0x20000374

08001dd0 <_ZN3Log16resetAddrPointerEv>:


void Log::resetAddrPointer() {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
	addrPointer = 1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	605a      	str	r2, [r3, #4]
	model->setAddrPointer(addrPointer);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 fc2d 	bl	800264a <_ZN5Model14setAddrPointerEt>
	uint8_t txBuffer[5];
	//Update Addresspointer

	txBuffer[0] = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	723b      	strb	r3, [r7, #8]
	txBuffer[1] = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	727b      	strb	r3, [r7, #9]

	txBuffer[2] = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	72bb      	strb	r3, [r7, #10]
	txBuffer[3] = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	72fb      	strb	r3, [r7, #11]
	txBuffer[4] = 1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 5, 100);
 8001e04:	f107 0208 	add.w	r2, r7, #8
 8001e08:	2364      	movs	r3, #100	; 0x64
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	2305      	movs	r3, #5
 8001e0e:	21a8      	movs	r1, #168	; 0xa8
 8001e10:	4803      	ldr	r0, [pc, #12]	; (8001e20 <_ZN3Log16resetAddrPointerEv+0x50>)
 8001e12:	f003 fc7f 	bl	8005714 <HAL_I2C_Master_Transmit>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000374 	.word	0x20000374

08001e24 <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001e3e:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001e46:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a31      	ldr	r2, [pc, #196]	; (8001f10 <_ZN5ModelC1Ev+0xec>)
 8001e4c:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <_ZN5ModelC1Ev+0xec>)
 8001e52:	615a      	str	r2, [r3, #20]

	 weight = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	831a      	strh	r2, [r3, #24]
	 kontrast = 100;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2264      	movs	r2, #100	; 0x64
 8001e5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 400; //Preis in Rr/100g
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001e68:	625a      	str	r2, [r3, #36]	; 0x24
	 Parafinwachs_Preis = 350;	//Preis in Rr/100g
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001e70:	629a      	str	r2, [r3, #40]	; 0x28


	 wachstyp = E_UNDEF;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 00;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 month = 01;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	 day = 01;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 dayOfWeek = 0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	 hour = 0;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 minute = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	 seconds = 0;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//---------------Taster Status---------------
	 T1Short = false;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 T1Long = false;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 T2Short = false;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 T2Long = false;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	 T3Short = false;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	 T3Long = false;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	 T4Short = false;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 T4Long = false;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	 T5Short = false;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 T5Long = false;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	40566666 	.word	0x40566666

08001f14 <_ZNK5Model6getDayEv>:

uint8_t Model::getDay() const {
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	return day;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_ZN5Model6setDayEh>:

void Model::setDay(uint8_t day) {
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	70fb      	strb	r3, [r7, #3]
	this->day = day;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_ZN5Model12setDayOfWeekEh>:

uint8_t Model::getDayOfWeek() const {
	return dayOfWeek;
}

void Model::setDayOfWeek(uint8_t dayOfWeek) {
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
	this->dayOfWeek = dayOfWeek;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_ZNK5Model7getHourEv>:

uint8_t Model::getHour() const {
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return hour;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_ZN5Model7setHourEh>:

void Model::setHour(uint8_t hour) {
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
	this->hour = hour;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <_ZNK5Model12getLoadCell1Ev>:

int32_t Model::getLoadCell1() const {
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	return loadCell1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	return loadCell2;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	605a      	str	r2, [r3, #4]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_ZNK5Model9getMinuteEv>:

uint8_t Model::getMinute() const {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	return minute;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <_ZN5Model9setMinuteEh>:

void Model::setMinute(uint8_t minute) {
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
	this->minute = minute;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	78fa      	ldrb	r2, [r7, #3]
 800203a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <_ZNK5Model8getMonthEv>:

uint8_t Model::getMonth() const {
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
	return month;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_ZN5Model8setMonthEh>:

void Model::setMonth(uint8_t month) {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
	this->month = month;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_ZNK5Model10getSecondsEv>:

uint8_t Model::getSeconds() const {
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
	return seconds;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_ZN5Model10setSecondsEh>:

void Model::setSeconds(uint8_t seconds) {
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	460b      	mov	r3, r1
 80020a8:	70fb      	strb	r3, [r7, #3]
	this->seconds = seconds;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_ZNK5Model9getWeightEv>:

int16_t Model::getWeight() const {
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
	return weight;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	887a      	ldrh	r2, [r7, #2]
 80020e8:	831a      	strh	r2, [r3, #24]
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_ZNK5Model7getYearEv>:

uint8_t Model::getYear() const {
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	return year;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN5Model7setYearEh>:

void Model::setYear(uint8_t year) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
	this->year = year;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZNK5Model8isT1LongEv>:

bool Model::isT1Long() const {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	return T1Long;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	return T1Short;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	return T2Long;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return T2Short;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	return T3Long;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return T3Short;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	return T4Long;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
	return T4Short;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	460b      	mov	r3, r1
 80022ea:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	return T5Long;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
	return T5Short;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d802      	bhi.n	8002392 <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 800238c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002390:	e001      	b.n	8002396 <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	ee07 3a90 	vmov	s15, r3
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80023b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023be:	d802      	bhi.n	80023c6 <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 80023c0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023c4:	e001      	b.n	80023ca <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	ee07 3a90 	vmov	s15, r3
}
 80023ce:	eeb0 0a67 	vmov.f32	s0, s15
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800243c:	eeb0 0a67 	vmov.f32	s0, s15
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 8002456:	edd7 7a00 	vldr	s15, [r7]
 800245a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245e:	ee17 2a90 	vmov	r2, s15
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002486:	eeb0 0a67 	vmov.f32	s0, s15
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_ZN5Model20setParafinwachsPreisEf>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	ed87 0a00 	vstr	s0, [r7]
	Parafinwachs_Preis = parafinwachsPreis;
 80024a0:	edd7 7a00 	vldr	s15, [r7]
 80024a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a8:	ee17 2a90 	vmov	r2, s15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_ZNK5Model11getWachstypEv>:

Model::EWACHS Model::getWachstyp() const {
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	return wachstyp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	switch(this->wachstyp){
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d011      	beq.n	8002518 <_ZN5Model11setWachstypENS_6EWACHSE+0x42>
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d01c      	beq.n	8002532 <_ZN5Model11setWachstypENS_6EWACHSE+0x5c>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d000      	beq.n	80024fe <_ZN5Model11setWachstypENS_6EWACHSE+0x28>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 80024fc:	e026      	b.n	800254c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80024fe:	2201      	movs	r2, #1
 8002500:	2110      	movs	r1, #16
 8002502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002506:	f003 f85d 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 800250a:	2201      	movs	r2, #1
 800250c:	2140      	movs	r1, #64	; 0x40
 800250e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002512:	f003 f857 	bl	80055c4 <HAL_GPIO_WritePin>
		break;
 8002516:	e019      	b.n	800254c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 8002518:	2200      	movs	r2, #0
 800251a:	2110      	movs	r1, #16
 800251c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002520:	f003 f850 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800252c:	f003 f84a 	bl	80055c4 <HAL_GPIO_WritePin>
		break;
 8002530:	e00c      	b.n	800254c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	2110      	movs	r1, #16
 8002536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800253a:	f003 f843 	bl	80055c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 800253e:	2200      	movs	r2, #0
 8002540:	2140      	movs	r1, #64	; 0x40
 8002542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002546:	f003 f83d 	bl	80055c4 <HAL_GPIO_WritePin>
		break;
 800254a:	bf00      	nop
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	60da      	str	r2, [r3, #12]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_ZNK5Model11getKontrastEv>:

uint8_t Model::getKontrast() const {
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	return kontrast;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <_ZN5Model11setKontrastEh>:

void Model::setKontrast(uint8_t kontrast) {
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
	this->kontrast = kontrast;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <_ZNK5Model15isOverrideClockEv>:

bool Model::isOverrideClock() const {
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
	return overrideClock;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <_ZNK5Model14getAddrPointerEv>:

uint16_t Model::getAddrPointer() const {
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	return addrPointer;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	8c1b      	ldrh	r3, [r3, #32]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <_ZNK5Model8getPrizeEv>:

uint32_t Model::getPrize() const {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	return prize;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <_ZNK5Model10isAddEntryEv>:

bool Model::isAddEntry() const {
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
	return addEntry;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_ZN5Model11setAddEntryEb>:

void Model::setAddEntry(bool addEntry) {
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	460b      	mov	r3, r1
 8002618:	70fb      	strb	r3, [r7, #3]
	this->addEntry = addEntry;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_ZN5Model8setPrizeEm>:

void Model::setPrize(uint32_t prize) {
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
	this->prize = prize;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	683a      	ldr	r2, [r7, #0]
 800263c:	61da      	str	r2, [r3, #28]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_ZN5Model14setAddrPointerEt>:

void Model::setAddrPointer(uint16_t addrPointer) {
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]
	this->addrPointer = addrPointer;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	887a      	ldrh	r2, [r7, #2]
 800265a:	841a      	strh	r2, [r3, #32]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <_ZN5Model16setOverrideClockEb>:

void Model::setOverrideClock(bool overrideClock) {
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	this->overrideClock = overrideClock;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "stdlib.h"


char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ffe9 	bl	8002688 <_ZSt3absl>
 80026b6:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <_ZN5Tools14intToAsciiCharElh+0x140>)
 80026bc:	fb82 1203 	smull	r1, r2, r2, r3
 80026c0:	1312      	asrs	r2, r2, #12
 80026c2:	17db      	asrs	r3, r3, #31
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 80026ce:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a46      	ldr	r2, [pc, #280]	; (80027ec <_ZN5Tools14intToAsciiCharElh+0x148>)
 80026d4:	fb82 1203 	smull	r1, r2, r2, r3
 80026d8:	1192      	asrs	r2, r2, #6
 80026da:	17db      	asrs	r3, r3, #31
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	b2da      	uxtb	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4940      	ldr	r1, [pc, #256]	; (80027e4 <_ZN5Tools14intToAsciiCharElh+0x140>)
 80026e4:	fb81 0103 	smull	r0, r1, r1, r3
 80026e8:	1309      	asrs	r1, r1, #12
 80026ea:	17db      	asrs	r3, r3, #31
 80026ec:	1a5b      	subs	r3, r3, r1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	4619      	mov	r1, r3
 80026f2:	0089      	lsls	r1, r1, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3330      	adds	r3, #48	; 0x30
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002704:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 800270a:	fb82 1203 	smull	r1, r2, r2, r3
 800270e:	1152      	asrs	r2, r2, #5
 8002710:	17db      	asrs	r3, r3, #31
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4934      	ldr	r1, [pc, #208]	; (80027ec <_ZN5Tools14intToAsciiCharElh+0x148>)
 800271a:	fb81 0103 	smull	r0, r1, r1, r3
 800271e:	1189      	asrs	r1, r1, #6
 8002720:	17db      	asrs	r3, r3, #31
 8002722:	1a5b      	subs	r3, r3, r1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	0089      	lsls	r1, r1, #2
 800272a:	440b      	add	r3, r1
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	4413      	add	r3, r2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3330      	adds	r3, #48	; 0x30
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800273a:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a2d      	ldr	r2, [pc, #180]	; (80027f4 <_ZN5Tools14intToAsciiCharElh+0x150>)
 8002740:	fb82 1203 	smull	r1, r2, r2, r3
 8002744:	1092      	asrs	r2, r2, #2
 8002746:	17db      	asrs	r3, r3, #31
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	b2da      	uxtb	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4928      	ldr	r1, [pc, #160]	; (80027f0 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 8002750:	fb81 0103 	smull	r0, r1, r1, r3
 8002754:	1149      	asrs	r1, r1, #5
 8002756:	17db      	asrs	r3, r3, #31
 8002758:	1a5b      	subs	r3, r3, r1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	4619      	mov	r1, r3
 800275e:	0089      	lsls	r1, r1, #2
 8002760:	440b      	add	r3, r1
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	4413      	add	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3330      	adds	r3, #48	; 0x30
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002770:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <_ZN5Tools14intToAsciiCharElh+0x150>)
 8002776:	fb83 1302 	smull	r1, r3, r3, r2
 800277a:	1099      	asrs	r1, r3, #2
 800277c:	17d3      	asrs	r3, r2, #31
 800277e:	1ac9      	subs	r1, r1, r3
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	1ad1      	subs	r1, r2, r3
 800278a:	b2cb      	uxtb	r3, r1
 800278c:	3330      	adds	r3, #48	; 0x30
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002792:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
 8002798:	2300      	movs	r3, #0
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d81a      	bhi.n	80027d8 <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	f1c3 0205 	rsb	r2, r3, #5
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d107      	bne.n	80027be <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <_ZN5Tools14intToAsciiCharElh+0x154>)
 80027b2:	212e      	movs	r1, #46	; 0x2e
 80027b4:	54d1      	strb	r1, [r2, r3]
        		j--;
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	73bb      	strb	r3, [r7, #14]
 80027bc:	e005      	b.n	80027ca <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 80027be:	7bba      	ldrb	r2, [r7, #14]
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	4909      	ldr	r1, [pc, #36]	; (80027e8 <_ZN5Tools14intToAsciiCharElh+0x144>)
 80027c4:	5c89      	ldrb	r1, [r1, r2]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <_ZN5Tools14intToAsciiCharElh+0x154>)
 80027c8:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	3301      	adds	r3, #1
 80027d4:	73bb      	strb	r3, [r7, #14]
 80027d6:	e7e1      	b.n	800279c <_ZN5Tools14intToAsciiCharElh+0xf8>
        	}
        }
	return result;
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	68db8bad 	.word	0x68db8bad
 80027e8:	200002f4 	.word	0x200002f4
 80027ec:	10624dd3 	.word	0x10624dd3
 80027f0:	51eb851f 	.word	0x51eb851f
 80027f4:	66666667 	.word	0x66666667
 80027f8:	200002fc 	.word	0x200002fc

080027fc <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	int result = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <_ZN5Tools8Round5RpEl+0x60>)
 800280c:	fb83 1302 	smull	r1, r3, r3, r2
 8002810:	1099      	asrs	r1, r3, #2
 8002812:	17d3      	asrs	r3, r2, #31
 8002814:	1ac9      	subs	r1, r1, r3
 8002816:	460b      	mov	r3, r1
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4a0d      	ldr	r2, [pc, #52]	; (800285c <_ZN5Tools8Round5RpEl+0x60>)
 8002826:	fb82 1203 	smull	r1, r2, r2, r3
 800282a:	1052      	asrs	r2, r2, #1
 800282c:	17db      	asrs	r3, r3, #31
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1d5a      	adds	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	e003      	b.n	800284c <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
    }
    return result;
 800284c:	697b      	ldr	r3, [r7, #20]
}
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	66666667 	.word	0x66666667

08002860 <_ZN5Tools11byteToAsciiEh>:

char* Tools::byteToAscii(uint8_t data) {;
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
	static char result[3];
	result[0] = data/100 + 0x30;
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	4a1e      	ldr	r2, [pc, #120]	; (80028e8 <_ZN5Tools11byteToAsciiEh+0x88>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3330      	adds	r3, #48	; 0x30
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <_ZN5Tools11byteToAsciiEh+0x8c>)
 800287c:	701a      	strb	r2, [r3, #0]
	result[1] = data/10 - (data/100)*10 + 0x30;
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <_ZN5Tools11byteToAsciiEh+0x90>)
 8002882:	fba2 2303 	umull	r2, r3, r2, r3
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	b2da      	uxtb	r2, r3
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4916      	ldr	r1, [pc, #88]	; (80028e8 <_ZN5Tools11byteToAsciiEh+0x88>)
 800288e:	fba1 1303 	umull	r1, r3, r1, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	0149      	lsls	r1, r1, #5
 800289a:	1ac9      	subs	r1, r1, r3
 800289c:	0089      	lsls	r1, r1, #2
 800289e:	1acb      	subs	r3, r1, r3
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	3330      	adds	r3, #48	; 0x30
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <_ZN5Tools11byteToAsciiEh+0x8c>)
 80028ae:	705a      	strb	r2, [r3, #1]
	result[2] = data - (data/10)*10 + 0x30;
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4a0f      	ldr	r2, [pc, #60]	; (80028f0 <_ZN5Tools11byteToAsciiEh+0x90>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	0152      	lsls	r2, r2, #5
 80028c0:	1ad2      	subs	r2, r2, r3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	4413      	add	r3, r2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3330      	adds	r3, #48	; 0x30
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <_ZN5Tools11byteToAsciiEh+0x8c>)
 80028d6:	709a      	strb	r2, [r3, #2]
    return result;
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <_ZN5Tools11byteToAsciiEh+0x8c>)
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	51eb851f 	.word	0x51eb851f
 80028ec:	20000304 	.word	0x20000304
 80028f0:	cccccccd 	.word	0xcccccccd

080028f4 <_ZN5Tools10BCDDecoderEh>:



uint8_t Tools::BCDDecoder(uint8_t data) {
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = (data & 0xF0)>>4;
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data & 0x0F;
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	73bb      	strb	r3, [r7, #14]

	return TP*10+UP;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	461a      	mov	r2, r3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4413      	add	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	b2da      	uxtb	r2, r3
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	4413      	add	r3, r2
 800291c:	b2db      	uxtb	r3, r3
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <_ZN5Tools10BCDEncoderEh>:

uint8_t Tools::BCDEncoder(uint8_t data) {
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = data/10;
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <_ZN5Tools10BCDEncoderEh+0x44>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	08db      	lsrs	r3, r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data-(TP*10);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	461a      	mov	r2, r3
 8002946:	0152      	lsls	r2, r2, #5
 8002948:	1ad2      	subs	r2, r2, r3
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	4413      	add	r3, r2
 8002956:	73bb      	strb	r3, [r7, #14]
	return (TP<<4) + UP;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	b2da      	uxtb	r2, r3
 800295e:	7bbb      	ldrb	r3, [r7, #14]
 8002960:	4413      	add	r3, r2
 8002962:	b2db      	uxtb	r3, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	cccccccd 	.word	0xcccccccd

08002974 <_ZN5Tools8DWT_InitEv>:
static bool init = false;

/*
 * Mikrosenkunden delay Initialisieren
 */
void Tools::DWT_Init(void) {
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <_ZN5Tools8DWT_InitEv+0x2c>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4a08      	ldr	r2, [pc, #32]	; (80029a0 <_ZN5Tools8DWT_InitEv+0x2c>)
 800297e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002982:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002984:	4b07      	ldr	r3, [pc, #28]	; (80029a4 <_ZN5Tools8DWT_InitEv+0x30>)
 8002986:	2200      	movs	r2, #0
 8002988:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800298a:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <_ZN5Tools8DWT_InitEv+0x30>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <_ZN5Tools8DWT_InitEv+0x30>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6013      	str	r3, [r2, #0]
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000edf0 	.word	0xe000edf0
 80029a4:	e0001000 	.word	0xe0001000

080029a8 <_ZN5Tools12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Tools::DWT_Delay_us(volatile uint32_t microseconds) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	if(!init){
 80029b0:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <_ZN5Tools12DWT_Delay_usEm+0x60>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <_ZN5Tools12DWT_Delay_usEm+0x20>
		DWT_Init();
 80029be:	f7ff ffd9 	bl	8002974 <_ZN5Tools8DWT_InitEv>
		init = true;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <_ZN5Tools12DWT_Delay_usEm+0x60>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	701a      	strb	r2, [r3, #0]
	}
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_ZN5Tools12DWT_Delay_usEm+0x64>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80029ce:	f005 fcdd 	bl	800838c <HAL_RCC_GetHCLKFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <_ZN5Tools12DWT_Delay_usEm+0x68>)
 80029d6:	fba3 2302 	umull	r2, r3, r3, r2
 80029da:	0c9b      	lsrs	r3, r3, #18
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <_ZN5Tools12DWT_Delay_usEm+0x64>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad2      	subs	r2, r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	bf34      	ite	cc
 80029f2:	2301      	movcc	r3, #1
 80029f4:	2300      	movcs	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d000      	beq.n	80029fe <_ZN5Tools12DWT_Delay_usEm+0x56>
 80029fc:	e7f2      	b.n	80029e4 <_ZN5Tools12DWT_Delay_usEm+0x3c>
		;
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000307 	.word	0x20000307
 8002a0c:	e0001000 	.word	0xe0001000
 8002a10:	431bde83 	.word	0x431bde83

08002a14 <_ZN10BWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd) {
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <_ZN10BWSettingsC1EP5ModelP3LCD+0x34>)
 8002a24:	60da      	str	r2, [r3, #12]
	this->model = model;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	601a      	str	r2, [r3, #0]
	position = 0;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	725a      	strb	r2, [r3, #9]
	init = false;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	729a      	strb	r2, [r3, #10]
}
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	0800d7dc 	.word	0x0800d7dc

08002a4c <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 8002a4c:	b5b0      	push	{r4, r5, r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af04      	add	r7, sp, #16
 8002a52:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	721a      	strb	r2, [r3, #8]

	int preis = model->getBienenwachsPreis();
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fce2 	bl	8002428 <_ZNK5Model19getBienenwachsPreisEv>
 8002a64:	eef0 7a40 	vmov.f32	s15, s0
 8002a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6c:	ee17 3a90 	vmov	r3, s15
 8002a70:	60fb      	str	r3, [r7, #12]

	if(!init){
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	7a9b      	ldrb	r3, [r3, #10]
 8002a76:	f083 0301 	eor.w	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d022      	beq.n	8002ac6 <_ZN10BWSettings6UpdateEv+0x7a>
		position = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685c      	ldr	r4, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68dd      	ldr	r5, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4619      	mov	r1, r3
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f96e 	bl	8002d74 <_ZN10BWSettings16prizeToCharArrayEm>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9302      	str	r3, [sp, #8]
 8002a9e:	230c      	movs	r3, #12
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	9200      	str	r2, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	220b      	movs	r2, #11
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe fd99 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6858      	ldr	r0, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7a59      	ldrb	r1, [r3, #9]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2202      	movs	r2, #2
 8002abc:	f7fe fdf6 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	729a      	strb	r2, [r3, #10]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff fb4d 	bl	800216a <_ZNK5Model9isT1ShortEv>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d025      	beq.n	8002b22 <_ZN10BWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	7a5b      	ldrb	r3, [r3, #9]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d903      	bls.n	8002ae6 <_ZN10BWSettings6UpdateEv+0x9a>
			position = 0;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	725a      	strb	r2, [r3, #9]
 8002ae4:	e00f      	b.n	8002b06 <_ZN10BWSettings6UpdateEv+0xba>
		}else{
			position++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7a5b      	ldrb	r3, [r3, #9]
 8002aea:	3301      	adds	r3, #1
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	725a      	strb	r2, [r3, #9]
			if(position == 2){
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	7a5b      	ldrb	r3, [r3, #9]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d105      	bne.n	8002b06 <_ZN10BWSettings6UpdateEv+0xba>
				position++;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7a5b      	ldrb	r3, [r3, #9]
 8002afe:	3301      	adds	r3, #1
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	725a      	strb	r2, [r3, #9]
			}
		}

		lcd->SetCursorPosition(position, 2,true);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6858      	ldr	r0, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7a59      	ldrb	r1, [r3, #9]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2202      	movs	r2, #2
 8002b12:	f7fe fdcb 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fb31 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fb02 	bl	8002130 <_ZNK5Model8isT1LongEv>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <_ZN10BWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2100      	movs	r1, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fb06 	bl	800214a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fb4b 	bl	80021de <_ZNK5Model9isT2ShortEv>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 809e 	beq.w	8002c8c <_ZN10BWSettings6UpdateEv+0x240>

		if(position == 0){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7a5b      	ldrb	r3, [r3, #9]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d110      	bne.n	8002b7a <_ZN10BWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002b5e:	3b28      	subs	r3, #40	; 0x28
 8002b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b64:	d205      	bcs.n	8002b72 <_ZN10BWSettings6UpdateEv+0x126>
				preis -= 9000;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002b6c:	3b28      	subs	r3, #40	; 0x28
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e003      	b.n	8002b7a <_ZN10BWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002b78:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7a5b      	ldrb	r3, [r3, #9]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d11c      	bne.n	8002bbc <_ZN10BWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4a78      	ldr	r2, [pc, #480]	; (8002d68 <_ZN10BWSettings6UpdateEv+0x31c>)
 8002b86:	fb82 1203 	smull	r1, r2, r2, r3
 8002b8a:	1152      	asrs	r2, r2, #5
 8002b8c:	17db      	asrs	r3, r3, #31
 8002b8e:	1ad1      	subs	r1, r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a76      	ldr	r2, [pc, #472]	; (8002d6c <_ZN10BWSettings6UpdateEv+0x320>)
 8002b94:	fb82 0203 	smull	r0, r2, r2, r3
 8002b98:	1192      	asrs	r2, r2, #6
 8002b9a:	17db      	asrs	r3, r3, #31
 8002b9c:	1a9a      	subs	r2, r3, r2
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	440b      	add	r3, r1
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d104      	bne.n	8002bb6 <_ZN10BWSettings6UpdateEv+0x16a>
				preis -= 900;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e002      	b.n	8002bbc <_ZN10BWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3364      	adds	r3, #100	; 0x64
 8002bba:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7a5b      	ldrb	r3, [r3, #9]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d11b      	bne.n	8002bfc <_ZN10BWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <_ZN10BWSettings6UpdateEv+0x324>)
 8002bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8002bcc:	1092      	asrs	r2, r2, #2
 8002bce:	17db      	asrs	r3, r3, #31
 8002bd0:	1ad1      	subs	r1, r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4a64      	ldr	r2, [pc, #400]	; (8002d68 <_ZN10BWSettings6UpdateEv+0x31c>)
 8002bd6:	fb82 0203 	smull	r0, r2, r2, r3
 8002bda:	1152      	asrs	r2, r2, #5
 8002bdc:	17db      	asrs	r3, r3, #31
 8002bde:	1a9a      	subs	r2, r3, r2
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	440b      	add	r3, r1
 8002bea:	2b09      	cmp	r3, #9
 8002bec:	d103      	bne.n	8002bf6 <_ZN10BWSettings6UpdateEv+0x1aa>
				preis -= 90;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b5a      	subs	r3, #90	; 0x5a
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e002      	b.n	8002bfc <_ZN10BWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	330a      	adds	r3, #10
 8002bfa:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	7a5b      	ldrb	r3, [r3, #9]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d114      	bne.n	8002c2e <_ZN10BWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 8002c04:	68f9      	ldr	r1, [r7, #12]
 8002c06:	4b5a      	ldr	r3, [pc, #360]	; (8002d70 <_ZN10BWSettings6UpdateEv+0x324>)
 8002c08:	fb83 2301 	smull	r2, r3, r3, r1
 8002c0c:	109a      	asrs	r2, r3, #2
 8002c0e:	17cb      	asrs	r3, r1, #31
 8002c10:	1ad2      	subs	r2, r2, r3
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	1aca      	subs	r2, r1, r3
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d103      	bne.n	8002c28 <_ZN10BWSettings6UpdateEv+0x1dc>
				preis += 5;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3305      	adds	r3, #5
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e002      	b.n	8002c2e <_ZN10BWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b05      	subs	r3, #5
 8002c2c:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setBienenwachsPreis(preis);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	ee07 2a90 	vmov	s15, r2
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc02 	bl	800244a <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685c      	ldr	r4, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68dd      	ldr	r5, [r3, #12]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f88e 	bl	8002d74 <_ZN10BWSettings16prizeToCharArrayEm>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9302      	str	r3, [sp, #8]
 8002c5e:	230c      	movs	r3, #12
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	2300      	movs	r3, #0
 8002c66:	220b      	movs	r2, #11
 8002c68:	4629      	mov	r1, r5
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7fe fcb9 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6858      	ldr	r0, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7a59      	ldrb	r1, [r3, #9]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f7fe fd16 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fab6 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fa87 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <_ZN10BWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa8b 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fad0 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <_ZN10BWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fad4 	bl	800226c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff faa5 	bl	8002218 <_ZNK5Model8isT3LongEv>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <_ZN10BWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff faa9 	bl	8002232 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fad1 	bl	800228c <_ZNK5Model8isT4LongEv>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <_ZN10BWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fad5 	bl	80022a6 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fae0 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <_ZN10BWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fae4 	bl	80022e0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff faef 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <_ZN10BWSettings6UpdateEv+0x2f4>
		//Neuer Wert speichern
		init = false;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	729a      	strb	r2, [r3, #10]
		screen = Model::E_MAIN_SCRREN;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2203      	movs	r2, #3
 8002d32:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff faed 	bl	800231a <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff faf8 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d005      	beq.n	8002d5c <_ZN10BWSettings6UpdateEv+0x310>
		model->setT5Short(false);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fafc 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7a1b      	ldrb	r3, [r3, #8]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdb0      	pop	{r4, r5, r7, pc}
 8002d68:	51eb851f 	.word	0x51eb851f
 8002d6c:	10624dd3 	.word	0x10624dd3
 8002d70:	66666667 	.word	0x66666667

08002d74 <_ZN10BWSettings16prizeToCharArrayEm>:


char* BWSettings::prizeToCharArray(uint32_t prize){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fc8e 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8002d88:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d80b      	bhi.n	8002dac <_ZN10BWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	3301      	adds	r3, #1
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	441a      	add	r2, r3
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	7811      	ldrb	r1, [r2, #0]
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002da2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e7f0      	b.n	8002d8e <_ZN10BWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8002dac:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dae:	2220      	movs	r2, #32
 8002db0:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002db4:	2246      	movs	r2, #70	; 0x46
 8002db6:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8002db8:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dba:	2272      	movs	r2, #114	; 0x72
 8002dbc:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dc0:	222f      	movs	r2, #47	; 0x2f
 8002dc2:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dc6:	2231      	movs	r2, #49	; 0x31
 8002dc8:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8002dca:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dcc:	2230      	movs	r2, #48	; 0x30
 8002dce:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dd2:	2230      	movs	r2, #48	; 0x30
 8002dd4:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002dd8:	2267      	movs	r2, #103	; 0x67
 8002dda:	731a      	strb	r2, [r3, #12]
	return result;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000308 	.word	0x20000308

08002dec <_ZN10MainScreenC1EP5ModelP3LCD>:
uint8_t weightStableCounter = 0;
bool entryAdded = false;
int32_t weight_1 = 0;;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	this->model = model;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]
	this->screen = Model::E_MAIN_SCRREN;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2203      	movs	r2, #3
 8002e08:	721a      	strb	r2, [r3, #8]
	summeActive = SUMDEACTIVATED;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	729a      	strb	r2, [r3, #10]
	weightSum = 0;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	60da      	str	r2, [r3, #12]
	prizeSum = 0;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	611a      	str	r2, [r3, #16]
}
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <_ZN10MainScreen6UpdateEv>:
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());

}

Model::ESCREEN MainScreen::Update(){
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	ed2d 8b02 	vpush	{d8}
 8002e32:	b091      	sub	sp, #68	; 0x44
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	721a      	strb	r2, [r3, #8]

	//------------------Screen Update------------------
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fb3a 	bl	80024bc <_ZNK5Model11getWachstypEv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d020      	beq.n	8002e9a <_ZN10MainScreen6UpdateEv+0x6e>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis()/100);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f92e 	bl	80020be <_ZNK5Model9getWeightEv>
 8002e62:	4603      	mov	r3, r0
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff fad9 	bl	8002428 <_ZNK5Model19getBienenwachsPreisEv>
 8002e76:	eef0 7a40 	vmov.f32	s15, s0
 8002e7a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002e7e:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8003118 <_ZN10MainScreen6UpdateEv+0x2ec>
 8002e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e8a:	ee17 0a90 	vmov	r0, s15
 8002e8e:	f7ff fcb5 	bl	80027fc <_ZN5Tools8Round5RpEl>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	e030      	b.n	8002efc <_ZN10MainScreen6UpdateEv+0xd0>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fb0c 	bl	80024bc <_ZNK5Model11getWachstypEv>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	bf0c      	ite	eq
 8002eaa:	2301      	moveq	r3, #1
 8002eac:	2300      	movne	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <_ZN10MainScreen6UpdateEv+0xca>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis()/100);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff f900 	bl	80020be <_ZNK5Model9getWeightEv>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	ee07 3a90 	vmov	s15, r3
 8002ec4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fad0 	bl	8002472 <_ZNK5Model20getParafinwachsPreisEv>
 8002ed2:	eef0 7a40 	vmov.f32	s15, s0
 8002ed6:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002eda:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8003118 <_ZN10MainScreen6UpdateEv+0x2ec>
 8002ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee6:	ee17 0a90 	vmov	r0, s15
 8002eea:	f7ff fc87 	bl	80027fc <_ZN5Tools8Round5RpEl>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]
 8002ef4:	e002      	b.n	8002efc <_ZN10MainScreen6UpdateEv+0xd0>
	}else{
		prize = 0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	615a      	str	r2, [r3, #20]
	}
	model->setPrize(prize);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7ff fb91 	bl	800262e <_ZN5Model8setPrizeEm>

	char asciiWeight[6];
	char asciiPrize[6];


	switch(summeActive){
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7a9b      	ldrb	r3, [r3, #10]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	f200 80f2 	bhi.w	80030fa <_ZN10MainScreen6UpdateEv+0x2ce>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <_ZN10MainScreen6UpdateEv+0xf0>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f77 	.word	0x08002f77
 8002f24:	0800304f 	.word	0x0800304f
 8002f28:	080030d3 	.word	0x080030d3
	case SUMACTIVATED:
		strncpy(asciiWeight,Tools::intToAsciiChar(model->getWeight(),3),6);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff f8c4 	bl	80020be <_ZNK5Model9getWeightEv>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2103      	movs	r1, #3
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fbb2 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8002f40:	4601      	mov	r1, r0
 8002f42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f46:	2206      	movs	r2, #6
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f00a fc23 	bl	800d794 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(0,2),6);
 8002f4e:	2102      	movs	r1, #2
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7ff fba7 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8002f56:	4601      	mov	r1, r0
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	2206      	movs	r2, #6
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00a fc18 	bl	800d794 <strncpy>
		entryAdded = false;
 8002f64:	4b6d      	ldr	r3, [pc, #436]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	486c      	ldr	r0, [pc, #432]	; (8003120 <_ZN10MainScreen6UpdateEv+0x2f4>)
 8002f70:	f002 fb28 	bl	80055c4 <HAL_GPIO_WritePin>
		break;
 8002f74:	e0c1      	b.n	80030fa <_ZN10MainScreen6UpdateEv+0x2ce>
	case SUMDEACTIVATED:
		strncpy(asciiWeight,Tools::intToAsciiChar(model->getWeight(),3),6);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f89f 	bl	80020be <_ZNK5Model9getWeightEv>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2103      	movs	r1, #3
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff fb8d 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f90:	2206      	movs	r2, #6
 8002f92:	4618      	mov	r0, r3
 8002f94:	f00a fbfe 	bl	800d794 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(prize,2),6);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	2102      	movs	r1, #2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fb80 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8002fa4:	4601      	mov	r1, r0
 8002fa6:	f107 0320 	add.w	r3, r7, #32
 8002faa:	2206      	movs	r2, #6
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00a fbf1 	bl	800d794 <strncpy>
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	485a      	ldr	r0, [pc, #360]	; (8003120 <_ZN10MainScreen6UpdateEv+0x2f4>)
 8002fb8:	f002 fb04 	bl	80055c4 <HAL_GPIO_WritePin>
		if(weightStableCounter < 150){
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b95      	cmp	r3, #149	; 0x95
 8002fc2:	d806      	bhi.n	8002fd2 <_ZN10MainScreen6UpdateEv+0x1a6>
			weightStableCounter++;
 8002fc4:	4b57      	ldr	r3, [pc, #348]	; (8003124 <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	4b55      	ldr	r3, [pc, #340]	; (8003124 <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002fce:	701a      	strb	r2, [r3, #0]
			weightStableCounter = 0;
		}



		break;
 8002fd0:	e093      	b.n	80030fa <_ZN10MainScreen6UpdateEv+0x2ce>
			int16_t actualWeight = model->getWeight();
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff f871 	bl	80020be <_ZNK5Model9getWeightEv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
			if(actualWeight < weight_1+5 && actualWeight > weight_1-5 && !entryAdded && actualWeight > 10){
 8002fe0:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002fe4:	4b50      	ldr	r3, [pc, #320]	; (8003128 <_ZN10MainScreen6UpdateEv+0x2fc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3305      	adds	r3, #5
 8002fea:	429a      	cmp	r2, r3
 8002fec:	da1b      	bge.n	8003026 <_ZN10MainScreen6UpdateEv+0x1fa>
 8002fee:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002ff2:	4b4d      	ldr	r3, [pc, #308]	; (8003128 <_ZN10MainScreen6UpdateEv+0x2fc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3b05      	subs	r3, #5
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	dd14      	ble.n	8003026 <_ZN10MainScreen6UpdateEv+0x1fa>
 8002ffc:	4b47      	ldr	r3, [pc, #284]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <_ZN10MainScreen6UpdateEv+0x1fa>
 800300a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800300e:	2b0a      	cmp	r3, #10
 8003010:	dd09      	ble.n	8003026 <_ZN10MainScreen6UpdateEv+0x1fa>
				model->setAddEntry(true);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff faf8 	bl	800260e <_ZN5Model11setAddEntryEb>
				entryAdded = true;
 800301e:	4b3f      	ldr	r3, [pc, #252]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e003      	b.n	800302e <_ZN10MainScreen6UpdateEv+0x202>
				weight_1 = actualWeight;
 8003026:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800302a:	4a3f      	ldr	r2, [pc, #252]	; (8003128 <_ZN10MainScreen6UpdateEv+0x2fc>)
 800302c:	6013      	str	r3, [r2, #0]
			if(actualWeight < 5 && actualWeight > -5){
 800302e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8003032:	2b04      	cmp	r3, #4
 8003034:	dc07      	bgt.n	8003046 <_ZN10MainScreen6UpdateEv+0x21a>
 8003036:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800303a:	f113 0f04 	cmn.w	r3, #4
 800303e:	db02      	blt.n	8003046 <_ZN10MainScreen6UpdateEv+0x21a>
				entryAdded = false;
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 8003042:	2200      	movs	r2, #0
 8003044:	701a      	strb	r2, [r3, #0]
			weightStableCounter = 0;
 8003046:	4b37      	ldr	r3, [pc, #220]	; (8003124 <_ZN10MainScreen6UpdateEv+0x2f8>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
		break;
 800304c:	e055      	b.n	80030fa <_ZN10MainScreen6UpdateEv+0x2ce>
	case TOTAL:
		strncpy(asciiWeight,Tools::intToAsciiChar(weightSum,3),6);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2103      	movs	r1, #3
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fb25 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 800305a:	4601      	mov	r1, r0
 800305c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003060:	2206      	movs	r2, #6
 8003062:	4618      	mov	r0, r3
 8003064:	f00a fb96 	bl	800d794 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(prizeSum,2),6);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fb18 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8003074:	4601      	mov	r1, r0
 8003076:	f107 0320 	add.w	r3, r7, #32
 800307a:	2206      	movs	r2, #6
 800307c:	4618      	mov	r0, r3
 800307e:	f00a fb89 	bl	800d794 <strncpy>
		model->setWeight(weightSum);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	b21b      	sxth	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7ff f822 	bl	80020d8 <_ZN5Model9setWeightEs>
		model->setPrize(prizeSum);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7ff fac5 	bl	800262e <_ZN5Model8setPrizeEm>
		model->setWachstyp(Model::E_SUMME);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2103      	movs	r1, #3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff fa13 	bl	80024d6 <_ZN5Model11setWachstypENS_6EWACHSE>
		if(!entryAdded){
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	f083 0301 	eor.w	r3, r3, #1
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01c      	beq.n	80030f8 <_ZN10MainScreen6UpdateEv+0x2cc>
			model->setAddEntry(true);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff faa2 	bl	800260e <_ZN5Model11setAddEntryEb>
			entryAdded = true;
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <_ZN10MainScreen6UpdateEv+0x2f0>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		}

		break;
 80030d0:	e012      	b.n	80030f8 <_ZN10MainScreen6UpdateEv+0x2cc>
	case TOTALEND:
		summeActive = SUMDEACTIVATED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	729a      	strb	r2, [r3, #10]
		summeCounter = 0;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	725a      	strb	r2, [r3, #9]
		prizeSum = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
		weightSum = 0;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
		model->setWachstyp(Model::E_PARAFINWACHS);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff f9f0 	bl	80024d6 <_ZN5Model11setWachstypENS_6EWACHSE>
		break;
 80030f6:	e000      	b.n	80030fa <_ZN10MainScreen6UpdateEv+0x2ce>
		break;
 80030f8:	bf00      	nop



	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe ffdd 	bl	80020be <_ZNK5Model9getWeightEv>
 8003104:	4603      	mov	r3, r0
 8003106:	b29b      	uxth	r3, r3
 8003108:	0bdb      	lsrs	r3, r3, #15
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00d      	beq.n	800312c <_ZN10MainScreen6UpdateEv+0x300>
		w[0] = '-';
 8003110:	232d      	movs	r3, #45	; 0x2d
 8003112:	753b      	strb	r3, [r7, #20]
 8003114:	e00c      	b.n	8003130 <_ZN10MainScreen6UpdateEv+0x304>
 8003116:	bf00      	nop
 8003118:	42c80000 	.word	0x42c80000
 800311c:	20000315 	.word	0x20000315
 8003120:	48000400 	.word	0x48000400
 8003124:	20000314 	.word	0x20000314
 8003128:	20000318 	.word	0x20000318
	}else{
		w[0] = ' ';
 800312c:	2320      	movs	r3, #32
 800312e:	753b      	strb	r3, [r7, #20]
	}

	w[1] = asciiWeight[0];
 8003130:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003134:	757b      	strb	r3, [r7, #21]
	w[2] = asciiWeight[1];
 8003136:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800313a:	75bb      	strb	r3, [r7, #22]
	w[3] = asciiWeight[2];
 800313c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003140:	75fb      	strb	r3, [r7, #23]
	w[4] = asciiWeight[3];
 8003142:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003146:	763b      	strb	r3, [r7, #24]
	w[5] = asciiWeight[4];
 8003148:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800314c:	767b      	strb	r3, [r7, #25]
	w[6] = asciiWeight[5];
 800314e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003152:	76bb      	strb	r3, [r7, #26]
	w[7] = ' ';
 8003154:	2320      	movs	r3, #32
 8003156:	76fb      	strb	r3, [r7, #27]
	w[8] = 'k';
 8003158:	236b      	movs	r3, #107	; 0x6b
 800315a:	773b      	strb	r3, [r7, #28]
	w[9] = 'g';
 800315c:	2367      	movs	r3, #103	; 0x67
 800315e:	777b      	strb	r3, [r7, #29]

	p[0] = asciiPrize[0];
 8003160:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003164:	723b      	strb	r3, [r7, #8]
	p[1] = asciiPrize[1];
 8003166:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800316a:	727b      	strb	r3, [r7, #9]
	p[2] = asciiPrize[2];
 800316c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003170:	72bb      	strb	r3, [r7, #10]
	p[3] = asciiPrize[3];
 8003172:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003176:	72fb      	strb	r3, [r7, #11]
	p[4] = asciiPrize[4];
 8003178:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800317c:	733b      	strb	r3, [r7, #12]
	p[5] = asciiPrize[5];
 800317e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003182:	737b      	strb	r3, [r7, #13]
	p[6] = ' ';
 8003184:	2320      	movs	r3, #32
 8003186:	73bb      	strb	r3, [r7, #14]
	p[7] = 'F';
 8003188:	2346      	movs	r3, #70	; 0x46
 800318a:	73fb      	strb	r3, [r7, #15]
	p[8] = 'r';
 800318c:	2372      	movs	r3, #114	; 0x72
 800318e:	743b      	strb	r3, [r7, #16]


	lcd->Write(w,10,2,p,9,3);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6858      	ldr	r0, [r3, #4]
 8003194:	f107 0114 	add.w	r1, r7, #20
 8003198:	2303      	movs	r3, #3
 800319a:	9302      	str	r3, [sp, #8]
 800319c:	2309      	movs	r3, #9
 800319e:	9301      	str	r3, [sp, #4]
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2302      	movs	r3, #2
 80031a8:	220a      	movs	r2, #10
 80031aa:	f7fe f981 	bl	80014b0 <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe ffd9 	bl	800216a <_ZNK5Model9isT1ShortEv>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <_ZN10MainScreen6UpdateEv+0x3aa>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff f986 	bl	80024d6 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe ffd7 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe ffa8 	bl	8002130 <_ZNK5Model8isT1LongEv>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <_ZN10MainScreen6UpdateEv+0x3cc>
		screen = Model::E_BW_SETTINGS;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	721a      	strb	r2, [r3, #8]
		model->setT1Long(false);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2100      	movs	r1, #0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fe ffa9 	bl	800214a <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe ffee 	bl	80021de <_ZNK5Model9isT2ShortEv>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <_ZN10MainScreen6UpdateEv+0x3f4>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f961 	bl	80024d6 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe ffec 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe ffbd 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <_ZN10MainScreen6UpdateEv+0x416>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	721a      	strb	r2, [r3, #8]
		model->setT2Long(false);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f7fe ffbe 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe ffe6 	bl	8002218 <_ZNK5Model8isT3LongEv>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <_ZN10MainScreen6UpdateEv+0x432>

		model->setT3Long(false);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe ffea 	bl	8002232 <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fff5 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02e      	beq.n	80032cc <_ZN10MainScreen6UpdateEv+0x4a0>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fff9 	bl	800226c <_ZN5Model10setT3ShortEb>
			summeCounter++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7a5b      	ldrb	r3, [r3, #9]
 800327e:	3301      	adds	r3, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	725a      	strb	r2, [r3, #9]
			weightSum = weightSum + model->getWeight();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68dc      	ldr	r4, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ff15 	bl	80020be <_ZNK5Model9getWeightEv>
 8003294:	4603      	mov	r3, r0
 8003296:	18e2      	adds	r2, r4, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
			prizeSum = prizeSum + model->getPrize();
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	461c      	mov	r4, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f998 	bl	80025dc <_ZNK5Model8getPrizeEv>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4423      	add	r3, r4
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	611a      	str	r2, [r3, #16]
			lcd->Clear();
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe f965 	bl	800158a <_ZN3LCD5ClearEv>
			HAL_Delay(100);
 80032c0:	2064      	movs	r0, #100	; 0x64
 80032c2:	f001 fec1 	bl	8005048 <HAL_Delay>

			summeActive = SUMACTIVATED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	729a      	strb	r2, [r3, #10]
	}

	//------------------Total------------------
	if(model->isT4Long()){
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe ffdb 	bl	800228c <_ZNK5Model8isT4LongEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d014      	beq.n	8003306 <_ZN10MainScreen6UpdateEv+0x4da>
		model->setT4Long(false);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe ffdf 	bl	80022a6 <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2204      	movs	r2, #4
 80032ec:	721a      	strb	r2, [r3, #8]

		summeActive = SUMDEACTIVATED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	729a      	strb	r2, [r3, #10]
		summeCounter = 0;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	725a      	strb	r2, [r3, #9]
		weightSum = 0;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	60da      	str	r2, [r3, #12]
		prizeSum = 0;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	611a      	str	r2, [r3, #16]
	}
	if(model->isT4Short()){
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe ffdb 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d010      	beq.n	8003338 <_ZN10MainScreen6UpdateEv+0x50c>
		model->setT4Short(false);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe ffdf 	bl	80022e0 <_ZN5Model10setT4ShortEb>
		if(summeActive == SUMACTIVATED){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	7a9b      	ldrb	r3, [r3, #10]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d103      	bne.n	8003332 <_ZN10MainScreen6UpdateEv+0x506>
			summeActive = TOTAL;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2202      	movs	r2, #2
 800332e:	729a      	strb	r2, [r3, #10]
 8003330:	e002      	b.n	8003338 <_ZN10MainScreen6UpdateEv+0x50c>
		}else{
			summeActive = TOTALEND;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2203      	movs	r2, #3
 8003336:	729a      	strb	r2, [r3, #10]
		}
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe ffdf 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <_ZN10MainScreen6UpdateEv+0x52e>
		screen = Model::E_TIME_SETTINGS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2205      	movs	r2, #5
 800334c:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2100      	movs	r1, #0
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe ffe0 	bl	800231a <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe ffeb 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01d      	beq.n	80033a6 <_ZN10MainScreen6UpdateEv+0x57a>
		model->setLoadCellOffset1(model->getLoadCell1());
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fe18 	bl	8001fa8 <_ZNK5Model12getLoadCell1Ev>
 8003378:	4603      	mov	r3, r0
 800337a:	4619      	mov	r1, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff f839 	bl	80023f4 <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681c      	ldr	r4, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fe26 	bl	8001fdc <_ZNK5Model12getLoadCell2Ev>
 8003390:	4603      	mov	r3, r0
 8003392:	4619      	mov	r1, r3
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff f8dd 	bl	8002554 <_ZN5Model18setLoadCellOffset2El>
		model->setT5Short(false);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe ffd7 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	7a1b      	ldrb	r3, [r3, #8]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3734      	adds	r7, #52	; 0x34
 80033ae:	46bd      	mov	sp, r7
 80033b0:	ecbd 8b02 	vpop	{d8}
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop

080033b8 <_ZN10PWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd) {
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <_ZN10PWSettingsC1EP5ModelP3LCD+0x2c>)
 80033c8:	60da      	str	r2, [r3, #12]
	this->model = model;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	605a      	str	r2, [r3, #4]
}
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	0800d7e8 	.word	0x0800d7e8

080033e8 <_ZN10PWSettings6UpdateEv>:



Model::ESCREEN PWSettings::Update(){
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af04      	add	r7, sp, #16
 80033ee:	6078      	str	r0, [r7, #4]

	screen = Model::E_PW_SETTINGS;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	721a      	strb	r2, [r3, #8]

	int preis = model->getParafinwachsPreis();
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff f839 	bl	8002472 <_ZNK5Model20getParafinwachsPreisEv>
 8003400:	eef0 7a40 	vmov.f32	s15, s0
 8003404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	60fb      	str	r3, [r7, #12]

	if(!init){
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7a9b      	ldrb	r3, [r3, #10]
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d022      	beq.n	8003462 <_ZN10PWSettings6UpdateEv+0x7a>
		position = 0;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685c      	ldr	r4, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68dd      	ldr	r5, [r3, #12]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4619      	mov	r1, r3
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f96e 	bl	8003710 <_ZN10PWSettings16prizeToCharArrayEm>
 8003434:	4602      	mov	r2, r0
 8003436:	2300      	movs	r3, #0
 8003438:	9302      	str	r3, [sp, #8]
 800343a:	230c      	movs	r3, #12
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	9200      	str	r2, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	220c      	movs	r2, #12
 8003444:	4629      	mov	r1, r5
 8003446:	4620      	mov	r0, r4
 8003448:	f7fe f8cb 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6858      	ldr	r0, [r3, #4]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7a59      	ldrb	r1, [r3, #9]
 8003454:	2301      	movs	r3, #1
 8003456:	2202      	movs	r2, #2
 8003458:	f7fe f928 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	729a      	strb	r2, [r3, #10]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fe7f 	bl	800216a <_ZNK5Model9isT1ShortEv>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d025      	beq.n	80034be <_ZN10PWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	7a5b      	ldrb	r3, [r3, #9]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d903      	bls.n	8003482 <_ZN10PWSettings6UpdateEv+0x9a>
			position = 0;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	725a      	strb	r2, [r3, #9]
 8003480:	e00f      	b.n	80034a2 <_ZN10PWSettings6UpdateEv+0xba>
		}else{
			position++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	7a5b      	ldrb	r3, [r3, #9]
 8003486:	3301      	adds	r3, #1
 8003488:	b2da      	uxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	725a      	strb	r2, [r3, #9]
			if(position == 2){
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7a5b      	ldrb	r3, [r3, #9]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d105      	bne.n	80034a2 <_ZN10PWSettings6UpdateEv+0xba>
				position++;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a5b      	ldrb	r3, [r3, #9]
 800349a:	3301      	adds	r3, #1
 800349c:	b2da      	uxtb	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	725a      	strb	r2, [r3, #9]
			}
		}


		lcd->SetCursorPosition(position, 2,true);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6858      	ldr	r0, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	7a59      	ldrb	r1, [r3, #9]
 80034aa:	2301      	movs	r3, #1
 80034ac:	2202      	movs	r2, #2
 80034ae:	f7fe f8fd 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2100      	movs	r1, #0
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fe63 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fe34 	bl	8002130 <_ZNK5Model8isT1LongEv>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <_ZN10PWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7fe fe38 	bl	800214a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe fe7d 	bl	80021de <_ZNK5Model9isT2ShortEv>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 809e 	beq.w	8003628 <_ZN10PWSettings6UpdateEv+0x240>

		if(position == 0){
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7a5b      	ldrb	r3, [r3, #9]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d110      	bne.n	8003516 <_ZN10PWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80034fa:	3b28      	subs	r3, #40	; 0x28
 80034fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003500:	d205      	bcs.n	800350e <_ZN10PWSettings6UpdateEv+0x126>
				preis -= 9000;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8003508:	3b28      	subs	r3, #40	; 0x28
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e003      	b.n	8003516 <_ZN10PWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003514:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	7a5b      	ldrb	r3, [r3, #9]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11c      	bne.n	8003558 <_ZN10PWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a78      	ldr	r2, [pc, #480]	; (8003704 <_ZN10PWSettings6UpdateEv+0x31c>)
 8003522:	fb82 1203 	smull	r1, r2, r2, r3
 8003526:	1152      	asrs	r2, r2, #5
 8003528:	17db      	asrs	r3, r3, #31
 800352a:	1ad1      	subs	r1, r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a76      	ldr	r2, [pc, #472]	; (8003708 <_ZN10PWSettings6UpdateEv+0x320>)
 8003530:	fb82 0203 	smull	r0, r2, r2, r3
 8003534:	1192      	asrs	r2, r2, #6
 8003536:	17db      	asrs	r3, r3, #31
 8003538:	1a9a      	subs	r2, r3, r2
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	2b09      	cmp	r3, #9
 8003546:	d104      	bne.n	8003552 <_ZN10PWSettings6UpdateEv+0x16a>
				preis -= 900;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e002      	b.n	8003558 <_ZN10PWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3364      	adds	r3, #100	; 0x64
 8003556:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	7a5b      	ldrb	r3, [r3, #9]
 800355c:	2b03      	cmp	r3, #3
 800355e:	d11b      	bne.n	8003598 <_ZN10PWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a6a      	ldr	r2, [pc, #424]	; (800370c <_ZN10PWSettings6UpdateEv+0x324>)
 8003564:	fb82 1203 	smull	r1, r2, r2, r3
 8003568:	1092      	asrs	r2, r2, #2
 800356a:	17db      	asrs	r3, r3, #31
 800356c:	1ad1      	subs	r1, r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4a64      	ldr	r2, [pc, #400]	; (8003704 <_ZN10PWSettings6UpdateEv+0x31c>)
 8003572:	fb82 0203 	smull	r0, r2, r2, r3
 8003576:	1152      	asrs	r2, r2, #5
 8003578:	17db      	asrs	r3, r3, #31
 800357a:	1a9a      	subs	r2, r3, r2
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	440b      	add	r3, r1
 8003586:	2b09      	cmp	r3, #9
 8003588:	d103      	bne.n	8003592 <_ZN10PWSettings6UpdateEv+0x1aa>
				preis -= 90;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	3b5a      	subs	r3, #90	; 0x5a
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e002      	b.n	8003598 <_ZN10PWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	330a      	adds	r3, #10
 8003596:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	7a5b      	ldrb	r3, [r3, #9]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d114      	bne.n	80035ca <_ZN10PWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 80035a0:	68f9      	ldr	r1, [r7, #12]
 80035a2:	4b5a      	ldr	r3, [pc, #360]	; (800370c <_ZN10PWSettings6UpdateEv+0x324>)
 80035a4:	fb83 2301 	smull	r2, r3, r3, r1
 80035a8:	109a      	asrs	r2, r3, #2
 80035aa:	17cb      	asrs	r3, r1, #31
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	1aca      	subs	r2, r1, r3
 80035b8:	2a00      	cmp	r2, #0
 80035ba:	d103      	bne.n	80035c4 <_ZN10PWSettings6UpdateEv+0x1dc>
				preis += 5;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3305      	adds	r3, #5
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e002      	b.n	80035ca <_ZN10PWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	3b05      	subs	r3, #5
 80035c8:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setParafinwachsPreis(preis);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	ee07 2a90 	vmov	s15, r2
 80035d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035d8:	eeb0 0a67 	vmov.f32	s0, s15
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe ff59 	bl	8002494 <_ZN5Model20setParafinwachsPreisEf>
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685c      	ldr	r4, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68dd      	ldr	r5, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f88e 	bl	8003710 <_ZN10PWSettings16prizeToCharArrayEm>
 80035f4:	4602      	mov	r2, r0
 80035f6:	2300      	movs	r3, #0
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	230c      	movs	r3, #12
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	220c      	movs	r2, #12
 8003604:	4629      	mov	r1, r5
 8003606:	4620      	mov	r0, r4
 8003608:	f7fd ffeb 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6858      	ldr	r0, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7a59      	ldrb	r1, [r3, #9]
 8003614:	2301      	movs	r3, #1
 8003616:	2202      	movs	r2, #2
 8003618:	f7fe f848 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fde8 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fe fdb9 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <_ZN10PWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe fdbd 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fe02 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d005      	beq.n	8003660 <_ZN10PWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fe06 	bl	800226c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fdd7 	bl	8002218 <_ZNK5Model8isT3LongEv>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <_ZN10PWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fddb 	bl	8002232 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe fe03 	bl	800228c <_ZNK5Model8isT4LongEv>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <_ZN10PWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fe07 	bl	80022a6 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fe12 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <_ZN10PWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fe16 	bl	80022e0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fe fe21 	bl	8002300 <_ZNK5Model8isT5LongEv>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <_ZN10PWSettings6UpdateEv+0x2f4>
		//Neuer Wert speichern
		init = false;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	729a      	strb	r2, [r3, #10]
		screen = Model::E_MAIN_SCRREN;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe fe1f 	bl	800231a <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fe fe2a 	bl	800233a <_ZNK5Model9isT5ShortEv>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <_ZN10PWSettings6UpdateEv+0x310>
		model->setT5Short(false);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe fe2e 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7a1b      	ldrb	r3, [r3, #8]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bdb0      	pop	{r4, r5, r7, pc}
 8003704:	51eb851f 	.word	0x51eb851f
 8003708:	10624dd3 	.word	0x10624dd3
 800370c:	66666667 	.word	0x66666667

08003710 <_ZN10PWSettings16prizeToCharArrayEm>:


char* PWSettings::prizeToCharArray(uint32_t prize){
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe ffc0 	bl	80026a4 <_ZN5Tools14intToAsciiCharElh>
 8003724:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 8003726:	2300      	movs	r3, #0
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d80b      	bhi.n	8003748 <_ZN10PWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	3301      	adds	r3, #1
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	441a      	add	r2, r3
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	7811      	ldrb	r1, [r2, #0]
 800373c:	4a11      	ldr	r2, [pc, #68]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800373e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e7f0      	b.n	800372a <_ZN10PWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800374a:	2220      	movs	r2, #32
 800374c:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 800374e:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003750:	2246      	movs	r2, #70	; 0x46
 8003752:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003756:	2272      	movs	r2, #114	; 0x72
 8003758:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 800375a:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800375c:	222f      	movs	r2, #47	; 0x2f
 800375e:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003762:	2231      	movs	r2, #49	; 0x31
 8003764:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003768:	2230      	movs	r2, #48	; 0x30
 800376a:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800376e:	2230      	movs	r2, #48	; 0x30
 8003770:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 8003772:	4b04      	ldr	r3, [pc, #16]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003774:	2267      	movs	r2, #103	; 0x67
 8003776:	731a      	strb	r2, [r3, #12]
	return result;
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000031c 	.word	0x2000031c

08003788 <_ZN13ScreenControlC1EP5ModelP8Kontrast>:
static TimeScreen *timeScreen;
static Contrast *kontrastSettings;



ScreenControl::ScreenControl(Model *model, Kontrast *contrast) {
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
	model = model;
	contrast = contrast;
	lcd  = LCD();
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	4618      	mov	r0, r3
 800379a:	f7fd fe0b 	bl	80013b4 <_ZN3LCDC1Ev>
	mainScreen = new MainScreen(model, &lcd);
 800379e:	2018      	movs	r0, #24
 80037a0:	f009 fe99 	bl	800d4d6 <_Znwj>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461c      	mov	r4, r3
 80037a8:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 80037aa:	68b9      	ldr	r1, [r7, #8]
 80037ac:	4620      	mov	r0, r4
 80037ae:	f7ff fb1d 	bl	8002dec <_ZN10MainScreenC1EP5ModelP3LCD>
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd0>)
 80037b4:	601c      	str	r4, [r3, #0]
	pwSettings = new PWSettings(model, &lcd);
 80037b6:	2010      	movs	r0, #16
 80037b8:	f009 fe8d 	bl	800d4d6 <_Znwj>
 80037bc:	4603      	mov	r3, r0
 80037be:	461c      	mov	r4, r3
 80037c0:	4a24      	ldr	r2, [pc, #144]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fdf7 	bl	80033b8 <_ZN10PWSettingsC1EP5ModelP3LCD>
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd4>)
 80037cc:	601c      	str	r4, [r3, #0]
	bwSettings = new BWSettings(model, &lcd);
 80037ce:	2010      	movs	r0, #16
 80037d0:	f009 fe81 	bl	800d4d6 <_Znwj>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461c      	mov	r4, r3
 80037d8:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff f919 	bl	8002a14 <_ZN10BWSettingsC1EP5ModelP3LCD>
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd8>)
 80037e4:	601c      	str	r4, [r3, #0]
	timeSettings = new TimeSettings(model, &lcd);
 80037e6:	2010      	movs	r0, #16
 80037e8:	f009 fe75 	bl	800d4d6 <_Znwj>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461c      	mov	r4, r3
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	4620      	mov	r0, r4
 80037f6:	f000 ffd7 	bl	80047a8 <_ZN12TimeSettingsC1EP5ModelP3LCD>
 80037fa:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xdc>)
 80037fc:	601c      	str	r4, [r3, #0]
	dateSettings = new DateSettings(model, &lcd);
 80037fe:	2014      	movs	r0, #20
 8003800:	f009 fe69 	bl	800d4d6 <_Znwj>
 8003804:	4603      	mov	r3, r0
 8003806:	461c      	mov	r4, r3
 8003808:	4a12      	ldr	r2, [pc, #72]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	4620      	mov	r0, r4
 800380e:	f000 fc31 	bl	8004074 <_ZN12DateSettingsC1EP5ModelP3LCD>
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe0>)
 8003814:	601c      	str	r4, [r3, #0]
	timeScreen = new TimeScreen(model, &lcd);
 8003816:	200c      	movs	r0, #12
 8003818:	f009 fe5d 	bl	800d4d6 <_Znwj>
 800381c:	4603      	mov	r3, r0
 800381e:	461c      	mov	r4, r3
 8003820:	4a0c      	ldr	r2, [pc, #48]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4620      	mov	r0, r4
 8003826:	f000 f8dd 	bl	80039e4 <_ZN10TimeScreenC1EP5ModelP3LCD>
 800382a:	4b10      	ldr	r3, [pc, #64]	; (800386c <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe4>)
 800382c:	601c      	str	r4, [r3, #0]
	kontrastSettings = new Contrast(model, &lcd, contrast);
 800382e:	2018      	movs	r0, #24
 8003830:	f009 fe51 	bl	800d4d6 <_Znwj>
 8003834:	4603      	mov	r3, r0
 8003836:	461c      	mov	r4, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a06      	ldr	r2, [pc, #24]	; (8003854 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	4620      	mov	r0, r4
 8003840:	f000 fa22 	bl	8003c88 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe8>)
 8003846:	601c      	str	r4, [r3, #0]
}
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4618      	mov	r0, r3
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	bd90      	pop	{r4, r7, pc}
 8003852:	bf00      	nop
 8003854:	20000328 	.word	0x20000328
 8003858:	2000032c 	.word	0x2000032c
 800385c:	20000330 	.word	0x20000330
 8003860:	20000334 	.word	0x20000334
 8003864:	20000338 	.word	0x20000338
 8003868:	2000033c 	.word	0x2000033c
 800386c:	20000340 	.word	0x20000340
 8003870:	20000344 	.word	0x20000344

08003874 <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	lcd.InitLCD();
 800387c:	4806      	ldr	r0, [pc, #24]	; (8003898 <_ZN13ScreenControl10InitScreenEv+0x24>)
 800387e:	f7fd fda5 	bl	80013cc <_ZN3LCD7InitLCDEv>

	currentScreen = Model::E_MAIN_SCRREN;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2203      	movs	r2, #3
 800388c:	705a      	strb	r2, [r3, #1]

}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000328 	.word	0x20000328

0800389c <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	785a      	ldrb	r2, [r3, #1]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b07      	cmp	r3, #7
 80038b2:	d85a      	bhi.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <_ZN13ScreenControl6UpdateEv+0x20>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038f1 	.word	0x080038f1
 80038c0:	08003905 	.word	0x08003905
 80038c4:	08003969 	.word	0x08003969
 80038c8:	080038dd 	.word	0x080038dd
 80038cc:	08003941 	.word	0x08003941
 80038d0:	08003919 	.word	0x08003919
 80038d4:	0800392d 	.word	0x0800392d
 80038d8:	08003955 	.word	0x08003955

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 80038dc:	4b25      	ldr	r3, [pc, #148]	; (8003974 <_ZN13ScreenControl6UpdateEv+0xd8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff faa3 	bl	8002e2c <_ZN10MainScreen6UpdateEv>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	705a      	strb	r2, [r3, #1]
		break;
 80038ee:	e03c      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <_ZN13ScreenControl6UpdateEv+0xdc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f8a9 	bl	8002a4c <_ZN10BWSettings6UpdateEv>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	705a      	strb	r2, [r3, #1]
		break;
 8003902:	e032      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_PW_SETTINGS:
		nextScreen = pwSettings->Update();
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <_ZN13ScreenControl6UpdateEv+0xe0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fd6d 	bl	80033e8 <_ZN10PWSettings6UpdateEv>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	705a      	strb	r2, [r3, #1]
		break;
 8003916:	e028      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_TIME_SETTINGS:
		nextScreen = timeSettings->Update();
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <_ZN13ScreenControl6UpdateEv+0xe4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 ff5b 	bl	80047d8 <_ZN12TimeSettings6UpdateEv>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	705a      	strb	r2, [r3, #1]
		break;
 800392a:	e01e      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_DATE_SETTINGS:
		nextScreen = dateSettings->Update();
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <_ZN13ScreenControl6UpdateEv+0xe8>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fbbb 	bl	80040ac <_ZN12DateSettings6UpdateEv>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	705a      	strb	r2, [r3, #1]
		break;
 800393e:	e014      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_LOG_BOOK:
		break;
	case Model::E_TIME:
		nextScreen =timeScreen->Update();
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <_ZN13ScreenControl6UpdateEv+0xec>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f861 	bl	8003a0c <_ZN10TimeScreen6UpdateEv>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	705a      	strb	r2, [r3, #1]
	break;
 8003952:	e00a      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_KONTRAST_SETTINGS:
		nextScreen = kontrastSettings->Update();
 8003954:	4b0d      	ldr	r3, [pc, #52]	; (800398c <_ZN13ScreenControl6UpdateEv+0xf0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f9b9 	bl	8003cd0 <_ZN8Contrast6UpdateEv>
 800395e:	4603      	mov	r3, r0
 8003960:	461a      	mov	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	705a      	strb	r2, [r3, #1]
		break;
 8003966:	e000      	b.n	800396a <_ZN13ScreenControl6UpdateEv+0xce>
		break;
 8003968:	bf00      	nop
	}
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	2000032c 	.word	0x2000032c
 8003978:	20000334 	.word	0x20000334
 800397c:	20000330 	.word	0x20000330
 8003980:	20000338 	.word	0x20000338
 8003984:	2000033c 	.word	0x2000033c
 8003988:	20000340 	.word	0x20000340
 800398c:	20000344 	.word	0x20000344

08003990 <_ZN13ScreenControl16getCurrentScreenEv>:


Model::ESCREEN ScreenControl::getCurrentScreen(){
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	return this->currentScreen;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	781b      	ldrb	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <_Z41__static_initialization_and_destruction_0ii>:
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039be:	4293      	cmp	r3, r2
 80039c0:	d102      	bne.n	80039c8 <_Z41__static_initialization_and_destruction_0ii+0x20>
static LCD lcd;
 80039c2:	4803      	ldr	r0, [pc, #12]	; (80039d0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80039c4:	f7fd fcf6 	bl	80013b4 <_ZN3LCDC1Ev>
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000328 	.word	0x20000328

080039d4 <_GLOBAL__sub_I__ZN13ScreenControlC2EP5ModelP8Kontrast>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039dc:	2001      	movs	r0, #1
 80039de:	f7ff ffe3 	bl	80039a8 <_Z41__static_initialization_and_destruction_0ii>
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_ZN10TimeScreenC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "TimeScreen.h"

TimeScreen::TimeScreen(Model *model, LCD *lcd) {
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
	this->model= model;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]

}
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <_ZN10TimeScreen6UpdateEv>:

Model::ESCREEN TimeScreen::Update(){
 8003a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2204      	movs	r2, #4
 8003a18:	721a      	strb	r2, [r3, #8]

	lcd->Write("Zeit",4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685c      	ldr	r4, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe faa3 	bl	8001f6e <_ZNK5Model7getHourEv>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe faed 	bl	8002010 <_ZNK5Model9getMinuteEv>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461e      	mov	r6, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fb20 	bl	8002084 <_ZNK5Model10getSecondsEv>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4632      	mov	r2, r6
 8003a48:	4629      	mov	r1, r5
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8a4 	bl	8003b98 <_ZN10TimeScreen15TimeToCharArrayEhhh>
 8003a50:	4602      	mov	r2, r0
 8003a52:	2304      	movs	r3, #4
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	2308      	movs	r3, #8
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	9200      	str	r2, [sp, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2204      	movs	r2, #4
 8003a60:	494c      	ldr	r1, [pc, #304]	; (8003b94 <_ZN10TimeScreen6UpdateEv+0x188>)
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7fd fdbd 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fb7c 	bl	800216a <_ZNK5Model9isT1ShortEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <_ZN10TimeScreen6UpdateEv+0x78>
		model->setT1Short(false);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe fb80 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe fb51 	bl	8002130 <_ZNK5Model8isT1LongEv>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <_ZN10TimeScreen6UpdateEv+0x94>
		model->setT1Long(false);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2100      	movs	r1, #0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fb55 	bl	800214a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fe fb9a 	bl	80021de <_ZNK5Model9isT2ShortEv>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <_ZN10TimeScreen6UpdateEv+0xb0>
		model->setT2Short(false);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fb9e 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fb6f 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <_ZN10TimeScreen6UpdateEv+0xcc>
		model->setT2Long(false);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fb73 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fbb8 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <_ZN10TimeScreen6UpdateEv+0xe8>
		//-

		model->setT3Short(false);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2100      	movs	r1, #0
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fbbc 	bl	800226c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fe fb8d 	bl	8002218 <_ZNK5Model8isT3LongEv>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <_ZN10TimeScreen6UpdateEv+0x104>
		model->setT3Long(false);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fe fb91 	bl	8002232 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fbb9 	bl	800228c <_ZNK5Model8isT4LongEv>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <_ZN10TimeScreen6UpdateEv+0x120>
		model->setT4Long(false);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2100      	movs	r1, #0
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fbbd 	bl	80022a6 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fe fbc8 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <_ZN10TimeScreen6UpdateEv+0x13c>
		model->setT4Short(false);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fbcc 	bl	80022e0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fbd7 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <_ZN10TimeScreen6UpdateEv+0x15e>
		screen = Model::E_MAIN_SCRREN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fbd8 	bl	800231a <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe fbe3 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <_ZN10TimeScreen6UpdateEv+0x17a>
		model->setT5Short(false);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fbe7 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	7a1b      	ldrb	r3, [r3, #8]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	0800d7f8 	.word	0x0800d7f8

08003b98 <_ZN10TimeScreen15TimeToCharArrayEhhh>:

char* TimeScreen::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	70fb      	strb	r3, [r7, #3]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70bb      	strb	r3, [r7, #2]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	4a32      	ldr	r2, [pc, #200]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	08db      	lsrs	r3, r3, #3
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	3330      	adds	r3, #48	; 0x30
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003bc4:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	08db      	lsrs	r3, r3, #3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	0152      	lsls	r2, r2, #5
 8003bd6:	1ad2      	subs	r2, r2, r3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	4413      	add	r3, r2
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	3330      	adds	r3, #48	; 0x30
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003bec:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003bf0:	223a      	movs	r2, #58	; 0x3a
 8003bf2:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 8003bf4:	78bb      	ldrb	r3, [r7, #2]
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	08db      	lsrs	r3, r3, #3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	3330      	adds	r3, #48	; 0x30
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003c06:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	4a1d      	ldr	r2, [pc, #116]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	0152      	lsls	r2, r2, #5
 8003c18:	1ad2      	subs	r2, r2, r3
 8003c1a:	0092      	lsls	r2, r2, #2
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	78bb      	ldrb	r3, [r7, #2]
 8003c24:	4413      	add	r3, r2
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	3330      	adds	r3, #48	; 0x30
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003c2e:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003c32:	223a      	movs	r2, #58	; 0x3a
 8003c34:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8003c36:	787b      	ldrb	r3, [r7, #1]
 8003c38:	4a11      	ldr	r2, [pc, #68]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3e:	08db      	lsrs	r3, r3, #3
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3330      	adds	r3, #48	; 0x30
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003c48:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 8003c4a:	787b      	ldrb	r3, [r7, #1]
 8003c4c:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	08db      	lsrs	r3, r3, #3
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	461a      	mov	r2, r3
 8003c58:	0152      	lsls	r2, r2, #5
 8003c5a:	1ad2      	subs	r2, r2, r3
 8003c5c:	0092      	lsls	r2, r2, #2
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	787b      	ldrb	r3, [r7, #1]
 8003c66:	4413      	add	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	3330      	adds	r3, #48	; 0x30
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003c70:	71da      	strb	r2, [r3, #7]
	return result;
 8003c72:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	20000348 	.word	0x20000348

08003c88 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>:
 */

#include "Contrast.h"
#include "../../Model/Tools.h"

Contrast::Contrast(Model *model, LCD *lcd, Kontrast *contrast) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast+0x44>)
 8003c9a:	611a      	str	r2, [r3, #16]
	this->model = model;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
	this->init = false;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	751a      	strb	r2, [r3, #20]
	this->contrast = contrast;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
	kontrast = model->getKontrast();
 8003cb4:	68b8      	ldr	r0, [r7, #8]
 8003cb6:	f7fe fc5b 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	755a      	strb	r2, [r3, #21]
}
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	0800d800 	.word	0x0800d800

08003cd0 <_ZN8Contrast6UpdateEv>:

Model::ESCREEN Contrast::Update(void) {
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af04      	add	r7, sp, #16
 8003cd6:	6078      	str	r0, [r7, #4]
		screen = Model::E_KONTRAST_SETTINGS;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2207      	movs	r2, #7
 8003cdc:	701a      	strb	r2, [r3, #0]


		if(!init){
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7d1b      	ldrb	r3, [r3, #20]
 8003ce2:	f083 0301 	eor.w	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <_ZN8Contrast6UpdateEv+0x62>

			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689c      	ldr	r4, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691d      	ldr	r5, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7fe fc39 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fdad 	bl	8002860 <_ZN5Tools11byteToAsciiEh>
 8003d06:	4602      	mov	r2, r0
 8003d08:	2309      	movs	r3, #9
 8003d0a:	9302      	str	r3, [sp, #8]
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	9200      	str	r2, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	2208      	movs	r2, #8
 8003d16:	4629      	mov	r1, r5
 8003d18:	4620      	mov	r0, r4
 8003d1a:	f7fd fc62 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6898      	ldr	r0, [r3, #8]
 8003d22:	2301      	movs	r3, #1
 8003d24:	2202      	movs	r2, #2
 8003d26:	210b      	movs	r1, #11
 8003d28:	f7fd fcc0 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
			init = true;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	751a      	strb	r2, [r3, #20]
		}



		if(HAL_GPIO_ReadPin(SW_PW_GPIO_Port, SW_PW_Pin) == GPIO_PIN_RESET){
 8003d32:	2120      	movs	r1, #32
 8003d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d38:	f001 fc2c 	bl	8005594 <HAL_GPIO_ReadPin>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <_ZN8Contrast6UpdateEv+0x88>
			model->setT2Long(false);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fa33 	bl	80021be <_ZN5Model9setT2LongEb>
		}
		if(HAL_GPIO_ReadPin(SW_SUM_GPIO_Port, SW_SUM_Pin) == GPIO_PIN_RESET){
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5e:	f001 fc19 	bl	8005594 <HAL_GPIO_ReadPin>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <_ZN8Contrast6UpdateEv+0xae>
			model->setT3Long(false);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fe fa5a 	bl	8002232 <_ZN5Model9setT3LongEb>
		}

		//------------------SW_BW------------------
		if(model->isT1Short()){
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe f9f1 	bl	800216a <_ZNK5Model9isT1ShortEv>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <_ZN8Contrast6UpdateEv+0xca>
			model->setT1Short(false);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2100      	movs	r1, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe f9f5 	bl	8002184 <_ZN5Model10setT1ShortEb>
		}
		if(model->isT1Long()){
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe f9c6 	bl	8002130 <_ZNK5Model8isT1LongEv>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d005      	beq.n	8003db6 <_ZN8Contrast6UpdateEv+0xe6>
			model->setT1Long(false);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2100      	movs	r1, #0
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe f9ca 	bl	800214a <_ZN5Model9setT1LongEb>
		}

		//------------------SW_PW------------------
		if(model->isT2Short()){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fe fa0f 	bl	80021de <_ZNK5Model9isT2ShortEv>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03f      	beq.n	8003e46 <_ZN8Contrast6UpdateEv+0x176>
			if(kontrast < 100){
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	7d5b      	ldrb	r3, [r3, #21]
 8003dca:	2b63      	cmp	r3, #99	; 0x63
 8003dcc:	d835      	bhi.n	8003e3a <_ZN8Contrast6UpdateEv+0x16a>
				model->setKontrast(kontrast++);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6858      	ldr	r0, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	7d5b      	ldrb	r3, [r3, #21]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	b2d1      	uxtb	r1, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	7551      	strb	r1, [r2, #21]
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fe fbd3 	bl	800258a <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689c      	ldr	r4, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691d      	ldr	r5, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe fbbd 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fd31 	bl	8002860 <_ZN5Tools11byteToAsciiEh>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	2309      	movs	r3, #9
 8003e02:	9302      	str	r3, [sp, #8]
 8003e04:	2303      	movs	r3, #3
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	4629      	mov	r1, r5
 8003e10:	4620      	mov	r0, r4
 8003e12:	f7fd fbe6 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6898      	ldr	r0, [r3, #8]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	210b      	movs	r1, #11
 8003e20:	f7fd fc44 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	7d5b      	ldrb	r3, [r3, #21]
 8003e2c:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fd faa3 	bl	8001380 <_ZN8Kontrast11setContrastEh>
			}

			model->setT2Short(false);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fe f9d9 	bl	80021f8 <_ZN5Model10setT2ShortEb>
		}
		if(model->isT2Long()){
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f9aa 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d039      	beq.n	8003eca <_ZN8Contrast6UpdateEv+0x1fa>
			if(kontrast < 100){
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7d5b      	ldrb	r3, [r3, #21]
 8003e5a:	2b63      	cmp	r3, #99	; 0x63
 8003e5c:	d835      	bhi.n	8003eca <_ZN8Contrast6UpdateEv+0x1fa>
				model->setKontrast(kontrast++);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6858      	ldr	r0, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7d5b      	ldrb	r3, [r3, #21]
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	b2d1      	uxtb	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	7551      	strb	r1, [r2, #21]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f7fe fb8b 	bl	800258a <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689c      	ldr	r4, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691d      	ldr	r5, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe fb75 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fce9 	bl	8002860 <_ZN5Tools11byteToAsciiEh>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	2309      	movs	r3, #9
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	2303      	movs	r3, #3
 8003e96:	9301      	str	r3, [sp, #4]
 8003e98:	9200      	str	r2, [sp, #0]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f7fd fb9e 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6898      	ldr	r0, [r3, #8]
 8003eaa:	2301      	movs	r3, #1
 8003eac:	2202      	movs	r2, #2
 8003eae:	210b      	movs	r1, #11
 8003eb0:	f7fd fbfc 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7d5b      	ldrb	r3, [r3, #21]
 8003ebc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fd fa5b 	bl	8001380 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Summe------------------
		if(model->isT3Short()){
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe f9bf 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03f      	beq.n	8003f5a <_ZN8Contrast6UpdateEv+0x28a>
			if(kontrast > 0){
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	7d5b      	ldrb	r3, [r3, #21]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d035      	beq.n	8003f4e <_ZN8Contrast6UpdateEv+0x27e>
			model->setKontrast(kontrast--);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6858      	ldr	r0, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7d5b      	ldrb	r3, [r3, #21]
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	b2d1      	uxtb	r1, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	7551      	strb	r1, [r2, #21]
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	f7fe fb49 	bl	800258a <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689c      	ldr	r4, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691d      	ldr	r5, [r3, #16]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fe fb33 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fca7 	bl	8002860 <_ZN5Tools11byteToAsciiEh>
 8003f12:	4602      	mov	r2, r0
 8003f14:	2309      	movs	r3, #9
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	2303      	movs	r3, #3
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	9200      	str	r2, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	2208      	movs	r2, #8
 8003f22:	4629      	mov	r1, r5
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7fd fb5c 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6898      	ldr	r0, [r3, #8]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	2202      	movs	r2, #2
 8003f32:	210b      	movs	r1, #11
 8003f34:	f7fd fbba 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7d5b      	ldrb	r3, [r3, #21]
 8003f40:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fd fa19 	bl	8001380 <_ZN8Kontrast11setContrastEh>
			}
			model->setT3Short(false);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f989 	bl	800226c <_ZN5Model10setT3ShortEb>
		}
		if(model->isT3Long()){
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f95a 	bl	8002218 <_ZNK5Model8isT3LongEv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d039      	beq.n	8003fde <_ZN8Contrast6UpdateEv+0x30e>
			if(kontrast > 0){
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	7d5b      	ldrb	r3, [r3, #21]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d035      	beq.n	8003fde <_ZN8Contrast6UpdateEv+0x30e>
			model->setKontrast(kontrast--);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6858      	ldr	r0, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7d5b      	ldrb	r3, [r3, #21]
 8003f7a:	1e5a      	subs	r2, r3, #1
 8003f7c:	b2d1      	uxtb	r1, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	7551      	strb	r1, [r2, #21]
 8003f82:	4619      	mov	r1, r3
 8003f84:	f7fe fb01 	bl	800258a <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689c      	ldr	r4, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691d      	ldr	r5, [r3, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe faeb 	bl	8002570 <_ZNK5Model11getKontrastEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7fe fc5f 	bl	8002860 <_ZN5Tools11byteToAsciiEh>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	2309      	movs	r3, #9
 8003fa6:	9302      	str	r3, [sp, #8]
 8003fa8:	2303      	movs	r3, #3
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	9200      	str	r2, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f7fd fb14 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6898      	ldr	r0, [r3, #8]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	210b      	movs	r1, #11
 8003fc4:	f7fd fb72 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68da      	ldr	r2, [r3, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7d5b      	ldrb	r3, [r3, #21]
 8003fd0:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4610      	mov	r0, r2
 8003fda:	f7fd f9d1 	bl	8001380 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Total------------------
		if(model->isT4Short()){
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe f96f 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <_ZN8Contrast6UpdateEv+0x32a>
			model->setT4Short(false);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe f973 	bl	80022e0 <_ZN5Model10setT4ShortEb>
		}
		if(model->isT4Long()){
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f944 	bl	800228c <_ZNK5Model8isT4LongEv>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <_ZN8Contrast6UpdateEv+0x346>
			model->setT4Long(false);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe f948 	bl	80022a6 <_ZN5Model9setT4LongEb>
		}

		//------------------SW_Tar------------------
		if(model->isT5Short()){
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe f98d 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00b      	beq.n	800403e <_ZN8Contrast6UpdateEv+0x36e>
			screen = Model::E_TIME_SETTINGS;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2205      	movs	r2, #5
 800402a:	701a      	strb	r2, [r3, #0]
			init = false;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	751a      	strb	r2, [r3, #20]
			model->setT5Short(false);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe f98b 	bl	8002354 <_ZN5Model10setT5ShortEb>
		}
		if(model->isT5Long()){
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe f95c 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <_ZN8Contrast6UpdateEv+0x396>
			//Speichern ToDo
			screen = Model::E_MAIN_SCRREN;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2203      	movs	r2, #3
 8004052:	701a      	strb	r2, [r3, #0]
			init = false;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	751a      	strb	r2, [r3, #20]
			model->setT5Long(false);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe f95a 	bl	800231a <_ZN5Model9setT5LongEb>
		}


		return screen;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	781b      	ldrb	r3, [r3, #0]

}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004074 <_ZN12DateSettingsC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "DateSettings.h"

DateSettings::DateSettings(Model *model, LCD *lcd) {
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <_ZN12DateSettingsC1EP5ModelP3LCD+0x34>)
 8004084:	60da      	str	r2, [r3, #12]
	this->model = model;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
	this->init = false;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	745a      	strb	r2, [r3, #17]
}
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	0800d80c 	.word	0x0800d80c

080040ac <_ZN12DateSettings6UpdateEv>:


Model::ESCREEN DateSettings::Update(){
 80040ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b0:	b088      	sub	sp, #32
 80040b2:	af04      	add	r7, sp, #16
 80040b4:	6078      	str	r0, [r7, #4]

	screen = Model::E_DATE_SETTINGS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2206      	movs	r2, #6
 80040ba:	721a      	strb	r2, [r3, #8]

	if(!init){
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	7c5b      	ldrb	r3, [r3, #17]
 80040c0:	f083 0301 	eor.w	r3, r3, #1
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d038      	beq.n	800413c <_ZN12DateSettings6UpdateEv+0x90>
		position = 0;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	741a      	strb	r2, [r3, #16]
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685c      	ldr	r4, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68dd      	ldr	r5, [r3, #12]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe f80a 	bl	80020f6 <_ZNK5Model7getYearEv>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461e      	mov	r6, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fd ffad 	bl	800204a <_ZNK5Model8getMonthEv>
 80040f0:	4603      	mov	r3, r0
 80040f2:	4698      	mov	r8, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd ff0b 	bl	8001f14 <_ZNK5Model6getDayEv>
 80040fe:	4603      	mov	r3, r0
 8004100:	4642      	mov	r2, r8
 8004102:	4631      	mov	r1, r6
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fad1 	bl	80046ac <_ZN12DateSettings15DateToCharArrayEhhh>
 800410a:	4602      	mov	r2, r0
 800410c:	2302      	movs	r3, #2
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	230c      	movs	r3, #12
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	9200      	str	r2, [sp, #0]
 8004116:	2300      	movs	r3, #0
 8004118:	2205      	movs	r2, #5
 800411a:	4629      	mov	r1, r5
 800411c:	4620      	mov	r0, r4
 800411e:	f7fd fa60 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6858      	ldr	r0, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	7c1b      	ldrb	r3, [r3, #16]
 800412a:	3302      	adds	r3, #2
 800412c:	b2d9      	uxtb	r1, r3
 800412e:	2301      	movs	r3, #1
 8004130:	2202      	movs	r2, #2
 8004132:	f7fd fabb 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	745a      	strb	r2, [r3, #17]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f812 	bl	800216a <_ZNK5Model9isT1ShortEv>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d031      	beq.n	80041b0 <_ZN12DateSettings6UpdateEv+0x104>
		//Change position
		if(position >= 9){
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7c1b      	ldrb	r3, [r3, #16]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d903      	bls.n	800415c <_ZN12DateSettings6UpdateEv+0xb0>
			position = 0;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	741a      	strb	r2, [r3, #16]
 800415a:	e019      	b.n	8004190 <_ZN12DateSettings6UpdateEv+0xe4>
		}else{
			position++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7c1b      	ldrb	r3, [r3, #16]
 8004160:	3301      	adds	r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	741a      	strb	r2, [r3, #16]
			if(position == 2){
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7c1b      	ldrb	r3, [r3, #16]
 800416c:	2b02      	cmp	r3, #2
 800416e:	d105      	bne.n	800417c <_ZN12DateSettings6UpdateEv+0xd0>
				position++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7c1b      	ldrb	r3, [r3, #16]
 8004174:	3301      	adds	r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	741a      	strb	r2, [r3, #16]
			}
			if(position == 5){
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7c1b      	ldrb	r3, [r3, #16]
 8004180:	2b05      	cmp	r3, #5
 8004182:	d105      	bne.n	8004190 <_ZN12DateSettings6UpdateEv+0xe4>
				position += 3;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7c1b      	ldrb	r3, [r3, #16]
 8004188:	3303      	adds	r3, #3
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	741a      	strb	r2, [r3, #16]
			}
		}
		lcd->SetCursorPosition(position+2, 2, true);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6858      	ldr	r0, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7c1b      	ldrb	r3, [r3, #16]
 8004198:	3302      	adds	r3, #2
 800419a:	b2d9      	uxtb	r1, r3
 800419c:	2301      	movs	r3, #1
 800419e:	2202      	movs	r2, #2
 80041a0:	f7fd fa84 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd ffea 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd ffbb 	bl	8002130 <_ZNK5Model8isT1LongEv>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <_ZN12DateSettings6UpdateEv+0x120>
		model->setT1Long(false);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2100      	movs	r1, #0
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd ffbf 	bl	800214a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe f804 	bl	80021de <_ZNK5Model9isT2ShortEv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 81e6 	beq.w	80045aa <_ZN12DateSettings6UpdateEv+0x4fe>
		uint8_t year = model->getYear();
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd ff87 	bl	80020f6 <_ZNK5Model7getYearEv>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]
		uint8_t month = model->getMonth();
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd ff2a 	bl	800204a <_ZNK5Model8getMonthEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	73bb      	strb	r3, [r7, #14]
		uint8_t day = model->getDay();
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fe88 	bl	8001f14 <_ZNK5Model6getDayEv>
 8004204:	4603      	mov	r3, r0
 8004206:	737b      	strb	r3, [r7, #13]
		//Tag
		if(position == 0){
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7c1b      	ldrb	r3, [r3, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d16a      	bne.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
			switch(month){
 8004210:	7bbb      	ldrb	r3, [r7, #14]
 8004212:	3b01      	subs	r3, #1
 8004214:	2b0b      	cmp	r3, #11
 8004216:	d863      	bhi.n	80042e0 <_ZN12DateSettings6UpdateEv+0x234>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <_ZN12DateSettings6UpdateEv+0x174>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004251 	.word	0x08004251
 8004224:	080042b1 	.word	0x080042b1
 8004228:	08004251 	.word	0x08004251
 800422c:	08004281 	.word	0x08004281
 8004230:	08004251 	.word	0x08004251
 8004234:	08004281 	.word	0x08004281
 8004238:	08004251 	.word	0x08004251
 800423c:	08004251 	.word	0x08004251
 8004240:	08004281 	.word	0x08004281
 8004244:	08004251 	.word	0x08004251
 8004248:	08004281 	.word	0x08004281
 800424c:	08004251 	.word	0x08004251
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 21 ){
 8004250:	7b7b      	ldrb	r3, [r7, #13]
 8004252:	2b15      	cmp	r3, #21
 8004254:	d910      	bls.n	8004278 <_ZN12DateSettings6UpdateEv+0x1cc>
					day = (day - (day/10)*10);
 8004256:	7b7b      	ldrb	r3, [r7, #13]
 8004258:	4aaa      	ldr	r2, [pc, #680]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	08db      	lsrs	r3, r3, #3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	461a      	mov	r2, r3
 8004264:	0152      	lsls	r2, r2, #5
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	0092      	lsls	r2, r2, #2
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	b2da      	uxtb	r2, r3
 8004270:	7b7b      	ldrb	r3, [r7, #13]
 8004272:	4413      	add	r3, r2
 8004274:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 8004276:	e036      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 8004278:	7b7b      	ldrb	r3, [r7, #13]
 800427a:	330a      	adds	r3, #10
 800427c:	737b      	strb	r3, [r7, #13]
				break;
 800427e:	e032      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 ){
 8004280:	7b7b      	ldrb	r3, [r7, #13]
 8004282:	2b14      	cmp	r3, #20
 8004284:	d910      	bls.n	80042a8 <_ZN12DateSettings6UpdateEv+0x1fc>
					day = (day - (day/10)*10);
 8004286:	7b7b      	ldrb	r3, [r7, #13]
 8004288:	4a9e      	ldr	r2, [pc, #632]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 800428a:	fba2 2303 	umull	r2, r3, r2, r3
 800428e:	08db      	lsrs	r3, r3, #3
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	0152      	lsls	r2, r2, #5
 8004296:	1ad2      	subs	r2, r2, r3
 8004298:	0092      	lsls	r2, r2, #2
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	7b7b      	ldrb	r3, [r7, #13]
 80042a2:	4413      	add	r3, r2
 80042a4:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 80042a6:	e01e      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 80042a8:	7b7b      	ldrb	r3, [r7, #13]
 80042aa:	330a      	adds	r3, #10
 80042ac:	737b      	strb	r3, [r7, #13]
				break;
 80042ae:	e01a      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
			case 2:
				if(day > 18 ){
 80042b0:	7b7b      	ldrb	r3, [r7, #13]
 80042b2:	2b12      	cmp	r3, #18
 80042b4:	d910      	bls.n	80042d8 <_ZN12DateSettings6UpdateEv+0x22c>
					day = (day - (day/10)*10);
 80042b6:	7b7b      	ldrb	r3, [r7, #13]
 80042b8:	4a92      	ldr	r2, [pc, #584]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	0152      	lsls	r2, r2, #5
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	7b7b      	ldrb	r3, [r7, #13]
 80042d2:	4413      	add	r3, r2
 80042d4:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 80042d6:	e006      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 80042d8:	7b7b      	ldrb	r3, [r7, #13]
 80042da:	330a      	adds	r3, #10
 80042dc:	737b      	strb	r3, [r7, #13]
				break;
 80042de:	e002      	b.n	80042e6 <_ZN12DateSettings6UpdateEv+0x23a>
			default:
				day = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	737b      	strb	r3, [r7, #13]
				break;
 80042e4:	bf00      	nop
			}
		}

		if(position == 1){
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7c1b      	ldrb	r3, [r3, #16]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	f040 8085 	bne.w	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
			switch(month){
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b0b      	cmp	r3, #11
 80042f6:	d87d      	bhi.n	80043f4 <_ZN12DateSettings6UpdateEv+0x348>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <_ZN12DateSettings6UpdateEv+0x254>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004331 	.word	0x08004331
 8004304:	080043c7 	.word	0x080043c7
 8004308:	08004331 	.word	0x08004331
 800430c:	0800436d 	.word	0x0800436d
 8004310:	08004331 	.word	0x08004331
 8004314:	0800436d 	.word	0x0800436d
 8004318:	08004331 	.word	0x08004331
 800431c:	08004331 	.word	0x08004331
 8004320:	0800436d 	.word	0x0800436d
 8004324:	08004331 	.word	0x08004331
 8004328:	0800436d 	.word	0x0800436d
 800432c:	08004331 	.word	0x08004331
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 30 ){
 8004330:	7b7b      	ldrb	r3, [r7, #13]
 8004332:	2b1e      	cmp	r3, #30
 8004334:	d903      	bls.n	800433e <_ZN12DateSettings6UpdateEv+0x292>
					day -= 1;
 8004336:	7b7b      	ldrb	r3, [r7, #13]
 8004338:	3b01      	subs	r3, #1
 800433a:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 800433c:	e05d      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 800433e:	7b7a      	ldrb	r2, [r7, #13]
 8004340:	7b7b      	ldrb	r3, [r7, #13]
 8004342:	4970      	ldr	r1, [pc, #448]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 8004344:	fba1 1303 	umull	r1, r3, r1, r3
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	4619      	mov	r1, r3
 800434e:	f06f 0309 	mvn.w	r3, #9
 8004352:	fb03 f301 	mul.w	r3, r3, r1
 8004356:	4413      	add	r3, r2
 8004358:	2b08      	cmp	r3, #8
 800435a:	dc03      	bgt.n	8004364 <_ZN12DateSettings6UpdateEv+0x2b8>
					day+=1;
 800435c:	7b7b      	ldrb	r3, [r7, #13]
 800435e:	3301      	adds	r3, #1
 8004360:	737b      	strb	r3, [r7, #13]
				break;
 8004362:	e04a      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8004364:	7b7b      	ldrb	r3, [r7, #13]
 8004366:	3b09      	subs	r3, #9
 8004368:	737b      	strb	r3, [r7, #13]
				break;
 800436a:	e046      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 && (day - (day/10)*10) > 7 ){
 800436c:	7b7b      	ldrb	r3, [r7, #13]
 800436e:	2b14      	cmp	r3, #20
 8004370:	d912      	bls.n	8004398 <_ZN12DateSettings6UpdateEv+0x2ec>
 8004372:	7b7a      	ldrb	r2, [r7, #13]
 8004374:	7b7b      	ldrb	r3, [r7, #13]
 8004376:	4963      	ldr	r1, [pc, #396]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 8004378:	fba1 1303 	umull	r1, r3, r1, r3
 800437c:	08db      	lsrs	r3, r3, #3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	4619      	mov	r1, r3
 8004382:	f06f 0309 	mvn.w	r3, #9
 8004386:	fb03 f301 	mul.w	r3, r3, r1
 800438a:	4413      	add	r3, r2
 800438c:	2b07      	cmp	r3, #7
 800438e:	dd03      	ble.n	8004398 <_ZN12DateSettings6UpdateEv+0x2ec>
					day -= 8;
 8004390:	7b7b      	ldrb	r3, [r7, #13]
 8004392:	3b08      	subs	r3, #8
 8004394:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8004396:	e030      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 8004398:	7b7a      	ldrb	r2, [r7, #13]
 800439a:	7b7b      	ldrb	r3, [r7, #13]
 800439c:	4959      	ldr	r1, [pc, #356]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 800439e:	fba1 1303 	umull	r1, r3, r1, r3
 80043a2:	08db      	lsrs	r3, r3, #3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4619      	mov	r1, r3
 80043a8:	f06f 0309 	mvn.w	r3, #9
 80043ac:	fb03 f301 	mul.w	r3, r3, r1
 80043b0:	4413      	add	r3, r2
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	dc03      	bgt.n	80043be <_ZN12DateSettings6UpdateEv+0x312>
					day+=1;
 80043b6:	7b7b      	ldrb	r3, [r7, #13]
 80043b8:	3301      	adds	r3, #1
 80043ba:	737b      	strb	r3, [r7, #13]
				break;
 80043bc:	e01d      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 80043be:	7b7b      	ldrb	r3, [r7, #13]
 80043c0:	3b09      	subs	r3, #9
 80043c2:	737b      	strb	r3, [r7, #13]
				break;
 80043c4:	e019      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
			case 2:
				if((day - (day/10)*10) < 9){
 80043c6:	7b7a      	ldrb	r2, [r7, #13]
 80043c8:	7b7b      	ldrb	r3, [r7, #13]
 80043ca:	494e      	ldr	r1, [pc, #312]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 80043cc:	fba1 1303 	umull	r1, r3, r1, r3
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	4619      	mov	r1, r3
 80043d6:	f06f 0309 	mvn.w	r3, #9
 80043da:	fb03 f301 	mul.w	r3, r3, r1
 80043de:	4413      	add	r3, r2
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	dc03      	bgt.n	80043ec <_ZN12DateSettings6UpdateEv+0x340>
					day+=1;
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	3301      	adds	r3, #1
 80043e8:	737b      	strb	r3, [r7, #13]
				}else{
						day -=9;
				}
				break;
 80043ea:	e006      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 80043ec:	7b7b      	ldrb	r3, [r7, #13]
 80043ee:	3b09      	subs	r3, #9
 80043f0:	737b      	strb	r3, [r7, #13]
				break;
 80043f2:	e002      	b.n	80043fa <_ZN12DateSettings6UpdateEv+0x34e>
			default:
				day = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	737b      	strb	r3, [r7, #13]
				break;
 80043f8:	bf00      	nop
			}
		}

		//Monat
		if(position == 3){
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7c1b      	ldrb	r3, [r3, #16]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d10c      	bne.n	800441c <_ZN12DateSettings6UpdateEv+0x370>
			if(month < 3){
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	2b02      	cmp	r3, #2
 8004406:	d803      	bhi.n	8004410 <_ZN12DateSettings6UpdateEv+0x364>
				month +=10;
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	330a      	adds	r3, #10
 800440c:	73bb      	strb	r3, [r7, #14]
 800440e:	e005      	b.n	800441c <_ZN12DateSettings6UpdateEv+0x370>
			}else if(month > 9){
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	2b09      	cmp	r3, #9
 8004414:	d902      	bls.n	800441c <_ZN12DateSettings6UpdateEv+0x370>
				month -= 10;
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	3b0a      	subs	r3, #10
 800441a:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	7c1b      	ldrb	r3, [r3, #16]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d11f      	bne.n	8004464 <_ZN12DateSettings6UpdateEv+0x3b8>
			if((month - (month/10)*10) < 9 && month < 12){
 8004424:	7bba      	ldrb	r2, [r7, #14]
 8004426:	7bbb      	ldrb	r3, [r7, #14]
 8004428:	4936      	ldr	r1, [pc, #216]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 800442a:	fba1 1303 	umull	r1, r3, r1, r3
 800442e:	08db      	lsrs	r3, r3, #3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	f06f 0309 	mvn.w	r3, #9
 8004438:	fb03 f301 	mul.w	r3, r3, r1
 800443c:	4413      	add	r3, r2
 800443e:	2b08      	cmp	r3, #8
 8004440:	dc06      	bgt.n	8004450 <_ZN12DateSettings6UpdateEv+0x3a4>
 8004442:	7bbb      	ldrb	r3, [r7, #14]
 8004444:	2b0b      	cmp	r3, #11
 8004446:	d803      	bhi.n	8004450 <_ZN12DateSettings6UpdateEv+0x3a4>
				month +=1;
 8004448:	7bbb      	ldrb	r3, [r7, #14]
 800444a:	3301      	adds	r3, #1
 800444c:	73bb      	strb	r3, [r7, #14]
 800444e:	e009      	b.n	8004464 <_ZN12DateSettings6UpdateEv+0x3b8>
			}else if(month > 11){
 8004450:	7bbb      	ldrb	r3, [r7, #14]
 8004452:	2b0b      	cmp	r3, #11
 8004454:	d903      	bls.n	800445e <_ZN12DateSettings6UpdateEv+0x3b2>
				month = month - 2;
 8004456:	7bbb      	ldrb	r3, [r7, #14]
 8004458:	3b02      	subs	r3, #2
 800445a:	73bb      	strb	r3, [r7, #14]
 800445c:	e002      	b.n	8004464 <_ZN12DateSettings6UpdateEv+0x3b8>
			}else{
				month -= 9;
 800445e:	7bbb      	ldrb	r3, [r7, #14]
 8004460:	3b09      	subs	r3, #9
 8004462:	73bb      	strb	r3, [r7, #14]
			}
		}

		switch(month){
 8004464:	7bbb      	ldrb	r3, [r7, #14]
 8004466:	3b02      	subs	r3, #2
 8004468:	2b09      	cmp	r3, #9
 800446a:	d826      	bhi.n	80044ba <_ZN12DateSettings6UpdateEv+0x40e>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <_ZN12DateSettings6UpdateEv+0x3c8>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	080044a9 	.word	0x080044a9
 8004478:	080044bb 	.word	0x080044bb
 800447c:	0800449d 	.word	0x0800449d
 8004480:	080044bb 	.word	0x080044bb
 8004484:	0800449d 	.word	0x0800449d
 8004488:	080044bb 	.word	0x080044bb
 800448c:	080044bb 	.word	0x080044bb
 8004490:	0800449d 	.word	0x0800449d
 8004494:	080044bb 	.word	0x080044bb
 8004498:	0800449d 	.word	0x0800449d
					case 4:
					case 6:
					case 9:
					case 11:
						if(day > 30){
 800449c:	7b7b      	ldrb	r3, [r7, #13]
 800449e:	2b1e      	cmp	r3, #30
 80044a0:	d908      	bls.n	80044b4 <_ZN12DateSettings6UpdateEv+0x408>
							day = 30;
 80044a2:	231e      	movs	r3, #30
 80044a4:	737b      	strb	r3, [r7, #13]
						}
						break;
 80044a6:	e005      	b.n	80044b4 <_ZN12DateSettings6UpdateEv+0x408>
					case 2:
						if(day > 28){
 80044a8:	7b7b      	ldrb	r3, [r7, #13]
 80044aa:	2b1c      	cmp	r3, #28
 80044ac:	d904      	bls.n	80044b8 <_ZN12DateSettings6UpdateEv+0x40c>
							day = 28;
 80044ae:	231c      	movs	r3, #28
 80044b0:	737b      	strb	r3, [r7, #13]
						}
						break;
 80044b2:	e001      	b.n	80044b8 <_ZN12DateSettings6UpdateEv+0x40c>
						break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <_ZN12DateSettings6UpdateEv+0x40e>
						break;
 80044b8:	bf00      	nop
					}

		//Jahr
		if(position == 8){
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7c1b      	ldrb	r3, [r3, #16]
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d109      	bne.n	80044d6 <_ZN12DateSettings6UpdateEv+0x42a>
			if((year/10) < 9){
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
 80044c4:	2b59      	cmp	r3, #89	; 0x59
 80044c6:	d803      	bhi.n	80044d0 <_ZN12DateSettings6UpdateEv+0x424>
				year +=10;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	330a      	adds	r3, #10
 80044cc:	73fb      	strb	r3, [r7, #15]
 80044ce:	e002      	b.n	80044d6 <_ZN12DateSettings6UpdateEv+0x42a>
			}else{
				year -= 90;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	3b5a      	subs	r3, #90	; 0x5a
 80044d4:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 9){
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7c1b      	ldrb	r3, [r3, #16]
 80044da:	2b09      	cmp	r3, #9
 80044dc:	d117      	bne.n	800450e <_ZN12DateSettings6UpdateEv+0x462>
			if((year - (year/10)*10) < 9){
 80044de:	7bfa      	ldrb	r2, [r7, #15]
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	4908      	ldr	r1, [pc, #32]	; (8004504 <_ZN12DateSettings6UpdateEv+0x458>)
 80044e4:	fba1 1303 	umull	r1, r3, r1, r3
 80044e8:	08db      	lsrs	r3, r3, #3
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	4619      	mov	r1, r3
 80044ee:	f06f 0309 	mvn.w	r3, #9
 80044f2:	fb03 f301 	mul.w	r3, r3, r1
 80044f6:	4413      	add	r3, r2
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	dc05      	bgt.n	8004508 <_ZN12DateSettings6UpdateEv+0x45c>
				year +=1;
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	3301      	adds	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	e004      	b.n	800450e <_ZN12DateSettings6UpdateEv+0x462>
 8004504:	cccccccd 	.word	0xcccccccd
			}else{
				year -= 9;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	3b09      	subs	r3, #9
 800450c:	73fb      	strb	r3, [r7, #15]
			}
		}



		model->setYear(year);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	7bfa      	ldrb	r2, [r7, #15]
 8004514:	4611      	mov	r1, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fdfa 	bl	8002110 <_ZN5Model7setYearEh>
		model->setMonth(month);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	7bba      	ldrb	r2, [r7, #14]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7fd fd9d 	bl	8002064 <_ZN5Model8setMonthEh>
		model->setDay(day);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	7b7a      	ldrb	r2, [r7, #13]
 8004530:	4611      	mov	r1, r2
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fcfb 	bl	8001f2e <_ZN5Model6setDayEh>
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685c      	ldr	r4, [r3, #4]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68dd      	ldr	r5, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f7fd fdd6 	bl	80020f6 <_ZNK5Model7getYearEv>
 800454a:	4603      	mov	r3, r0
 800454c:	461e      	mov	r6, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7fd fd79 	bl	800204a <_ZNK5Model8getMonthEv>
 8004558:	4603      	mov	r3, r0
 800455a:	4698      	mov	r8, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fcd7 	bl	8001f14 <_ZNK5Model6getDayEv>
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	4631      	mov	r1, r6
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f89d 	bl	80046ac <_ZN12DateSettings15DateToCharArrayEhhh>
 8004572:	4602      	mov	r2, r0
 8004574:	2302      	movs	r3, #2
 8004576:	9302      	str	r3, [sp, #8]
 8004578:	230c      	movs	r3, #12
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	9200      	str	r2, [sp, #0]
 800457e:	2300      	movs	r3, #0
 8004580:	2205      	movs	r2, #5
 8004582:	4629      	mov	r1, r5
 8004584:	4620      	mov	r0, r4
 8004586:	f7fd f82c 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6858      	ldr	r0, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7c1b      	ldrb	r3, [r3, #16]
 8004592:	3302      	adds	r3, #2
 8004594:	b2d9      	uxtb	r1, r3
 8004596:	2301      	movs	r3, #1
 8004598:	2202      	movs	r2, #2
 800459a:	f7fd f887 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fd fe27 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fd fdf8 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <_ZN12DateSettings6UpdateEv+0x51a>
		model->setT2Long(false);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd fdfc 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fe41 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <_ZN12DateSettings6UpdateEv+0x536>
		model->setT3Short(false);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fe45 	bl	800226c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fd fe16 	bl	8002218 <_ZNK5Model8isT3LongEv>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <_ZN12DateSettings6UpdateEv+0x552>
		model->setT3Long(false);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fd fe1a 	bl	8002232 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fd fe5f 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <_ZN12DateSettings6UpdateEv+0x56e>
		model->setT4Short(false);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f7fd fe63 	bl	80022e0 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fe34 	bl	800228c <_ZNK5Model8isT4LongEv>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <_ZN12DateSettings6UpdateEv+0x58a>
		model->setT4Long(false);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f7fd fe38 	bl	80022a6 <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fd fe7d 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d011      	beq.n	800466a <_ZN12DateSettings6UpdateEv+0x5be>
		screen = Model::E_KONTRAST_SETTINGS;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2207      	movs	r2, #7
 800464a:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f808 	bl	8002668 <_ZN5Model16setOverrideClockEb>
		init = false;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	745a      	strb	r2, [r3, #17]
		model->setT5Short(false);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2100      	movs	r1, #0
 8004664:	4618      	mov	r0, r3
 8004666:	f7fd fe75 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f7fd fe46 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d011      	beq.n	800469e <_ZN12DateSettings6UpdateEv+0x5f2>
		//Speichern ToDo
		screen = Model::E_MAIN_SCRREN;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2203      	movs	r2, #3
 800467e:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd ffee 	bl	8002668 <_ZN5Model16setOverrideClockEb>
		init = false;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	745a      	strb	r2, [r3, #17]
		model->setT5Long(false);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd fe3e 	bl	800231a <_ZN5Model9setT5LongEb>
	}


	return screen;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7a1b      	ldrb	r3, [r3, #8]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080046ac <_ZN12DateSettings15DateToCharArrayEhhh>:


char* DateSettings::DateToCharArray(uint8_t year, uint8_t month, uint8_t day){
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	461a      	mov	r2, r3
 80046ba:	4603      	mov	r3, r0
 80046bc:	70fb      	strb	r3, [r7, #3]
 80046be:	460b      	mov	r3, r1
 80046c0:	70bb      	strb	r3, [r7, #2]
 80046c2:	4613      	mov	r3, r2
 80046c4:	707b      	strb	r3, [r7, #1]
	static char result[10];
	result[0] = day/10 + 0x30;
 80046c6:	787b      	ldrb	r3, [r7, #1]
 80046c8:	4a35      	ldr	r2, [pc, #212]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	08db      	lsrs	r3, r3, #3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	3330      	adds	r3, #48	; 0x30
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80046d8:	701a      	strb	r2, [r3, #0]
	result[1] = day - (day/10)*10 + 0x30;
 80046da:	787b      	ldrb	r3, [r7, #1]
 80046dc:	4a30      	ldr	r2, [pc, #192]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80046de:	fba2 2303 	umull	r2, r3, r2, r3
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	0152      	lsls	r2, r2, #5
 80046ea:	1ad2      	subs	r2, r2, r3
 80046ec:	0092      	lsls	r2, r2, #2
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	787b      	ldrb	r3, [r7, #1]
 80046f6:	4413      	add	r3, r2
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3330      	adds	r3, #48	; 0x30
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004700:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004704:	222e      	movs	r2, #46	; 0x2e
 8004706:	709a      	strb	r2, [r3, #2]
	result[3] = month/10 + 0x30;
 8004708:	78bb      	ldrb	r3, [r7, #2]
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	08db      	lsrs	r3, r3, #3
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3330      	adds	r3, #48	; 0x30
 8004716:	b2da      	uxtb	r2, r3
 8004718:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800471a:	70da      	strb	r2, [r3, #3]
	result[4] = month - (month/10)*10 + 0x30;
 800471c:	78bb      	ldrb	r3, [r7, #2]
 800471e:	4a20      	ldr	r2, [pc, #128]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	0152      	lsls	r2, r2, #5
 800472c:	1ad2      	subs	r2, r2, r3
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	b2da      	uxtb	r2, r3
 8004736:	78bb      	ldrb	r3, [r7, #2]
 8004738:	4413      	add	r3, r2
 800473a:	b2db      	uxtb	r3, r3
 800473c:	3330      	adds	r3, #48	; 0x30
 800473e:	b2da      	uxtb	r2, r3
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004742:	711a      	strb	r2, [r3, #4]
	result[5] = '.';
 8004744:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004746:	222e      	movs	r2, #46	; 0x2e
 8004748:	715a      	strb	r2, [r3, #5]
	result[6] = '2';
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800474c:	2232      	movs	r2, #50	; 0x32
 800474e:	719a      	strb	r2, [r3, #6]
	result[7] = '0';
 8004750:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004752:	2230      	movs	r2, #48	; 0x30
 8004754:	71da      	strb	r2, [r3, #7]
	result[8] = year/10 + 0x30;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	08db      	lsrs	r3, r3, #3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	3330      	adds	r3, #48	; 0x30
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4b0f      	ldr	r3, [pc, #60]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004768:	721a      	strb	r2, [r3, #8]
	result[9] = year - (year/10)*10 + 0x30;
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	08db      	lsrs	r3, r3, #3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	0152      	lsls	r2, r2, #5
 800477a:	1ad2      	subs	r2, r2, r3
 800477c:	0092      	lsls	r2, r2, #2
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	4413      	add	r3, r2
 8004788:	b2db      	uxtb	r3, r3
 800478a:	3330      	adds	r3, #48	; 0x30
 800478c:	b2da      	uxtb	r2, r3
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004790:	725a      	strb	r2, [r3, #9]
	return result;
 8004792:	4b04      	ldr	r3, [pc, #16]	; (80047a4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	cccccccd 	.word	0xcccccccd
 80047a4:	20000350 	.word	0x20000350

080047a8 <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) {
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <_ZN12TimeSettingsC1EP5ModelP3LCD+0x2c>)
 80047b8:	60da      	str	r2, [r3, #12]
	this->model = model;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	605a      	str	r2, [r3, #4]
}
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	0800d814 	.word	0x0800d814

080047d8 <_ZN12TimeSettings6UpdateEv>:




Model::ESCREEN TimeSettings::Update(){
 80047d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047dc:	b088      	sub	sp, #32
 80047de:	af04      	add	r7, sp, #16
 80047e0:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME_SETTINGS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2205      	movs	r2, #5
 80047e6:	721a      	strb	r2, [r3, #8]

	if(!init){
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7a9b      	ldrb	r3, [r3, #10]
 80047ec:	f083 0301 	eor.w	r3, r3, #1
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d038      	beq.n	8004868 <_ZN12TimeSettings6UpdateEv+0x90>
		position = 0;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685c      	ldr	r4, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68dd      	ldr	r5, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fbb0 	bl	8001f6e <_ZNK5Model7getHourEv>
 800480e:	4603      	mov	r3, r0
 8004810:	461e      	mov	r6, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7fd fbfa 	bl	8002010 <_ZNK5Model9getMinuteEv>
 800481c:	4603      	mov	r3, r0
 800481e:	4698      	mov	r8, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fd fc2d 	bl	8002084 <_ZNK5Model10getSecondsEv>
 800482a:	4603      	mov	r3, r0
 800482c:	4642      	mov	r2, r8
 800482e:	4631      	mov	r1, r6
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f9e3 	bl	8004bfc <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004836:	4602      	mov	r2, r0
 8004838:	2304      	movs	r3, #4
 800483a:	9302      	str	r3, [sp, #8]
 800483c:	2308      	movs	r3, #8
 800483e:	9301      	str	r3, [sp, #4]
 8004840:	9200      	str	r2, [sp, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	2204      	movs	r2, #4
 8004846:	4629      	mov	r1, r5
 8004848:	4620      	mov	r0, r4
 800484a:	f7fc feca 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2,true);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6858      	ldr	r0, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7a5b      	ldrb	r3, [r3, #9]
 8004856:	3304      	adds	r3, #4
 8004858:	b2d9      	uxtb	r1, r3
 800485a:	2301      	movs	r3, #1
 800485c:	2202      	movs	r2, #2
 800485e:	f7fc ff25 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	729a      	strb	r2, [r3, #10]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd fc7c 	bl	800216a <_ZNK5Model9isT1ShortEv>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02b      	beq.n	80048d0 <_ZN12TimeSettings6UpdateEv+0xf8>
		//Change position
		if(position >= 7){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7a5b      	ldrb	r3, [r3, #9]
 800487c:	2b06      	cmp	r3, #6
 800487e:	d903      	bls.n	8004888 <_ZN12TimeSettings6UpdateEv+0xb0>
			position = 0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	725a      	strb	r2, [r3, #9]
 8004886:	e013      	b.n	80048b0 <_ZN12TimeSettings6UpdateEv+0xd8>
		}else{
			position++;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	7a5b      	ldrb	r3, [r3, #9]
 800488c:	3301      	adds	r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	725a      	strb	r2, [r3, #9]
			if(position == 2 || position == 5){
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	7a5b      	ldrb	r3, [r3, #9]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d003      	beq.n	80048a4 <_ZN12TimeSettings6UpdateEv+0xcc>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	7a5b      	ldrb	r3, [r3, #9]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d105      	bne.n	80048b0 <_ZN12TimeSettings6UpdateEv+0xd8>
				position++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	7a5b      	ldrb	r3, [r3, #9]
 80048a8:	3301      	adds	r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	725a      	strb	r2, [r3, #9]
			}
		}
		lcd->SetCursorPosition(position+4, 2, true);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6858      	ldr	r0, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	7a5b      	ldrb	r3, [r3, #9]
 80048b8:	3304      	adds	r3, #4
 80048ba:	b2d9      	uxtb	r1, r3
 80048bc:	2301      	movs	r3, #1
 80048be:	2202      	movs	r2, #2
 80048c0:	f7fc fef4 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fd fc5a 	bl	8002184 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fd fc2b 	bl	8002130 <_ZNK5Model8isT1LongEv>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <_ZN12TimeSettings6UpdateEv+0x114>
		model->setT1Long(false);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fc2f 	bl	800214a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fd fc74 	bl	80021de <_ZNK5Model9isT2ShortEv>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 80fc 	beq.w	8004af6 <_ZN12TimeSettings6UpdateEv+0x31e>
		uint8_t hour = model->getHour();
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f7fd fb33 	bl	8001f6e <_ZNK5Model7getHourEv>
 8004908:	4603      	mov	r3, r0
 800490a:	73fb      	strb	r3, [r7, #15]
		uint8_t minute = model->getMinute();
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f7fd fb7d 	bl	8002010 <_ZNK5Model9getMinuteEv>
 8004916:	4603      	mov	r3, r0
 8004918:	73bb      	strb	r3, [r7, #14]
		uint8_t seconds = model->getSeconds();
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fd fbb0 	bl	8002084 <_ZNK5Model10getSecondsEv>
 8004924:	4603      	mov	r3, r0
 8004926:	737b      	strb	r3, [r7, #13]

		if(position == 0){
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7a5b      	ldrb	r3, [r3, #9]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <_ZN12TimeSettings6UpdateEv+0x17a>
			if(hour < 13){
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	2b0c      	cmp	r3, #12
 8004934:	d803      	bhi.n	800493e <_ZN12TimeSettings6UpdateEv+0x166>
				hour += 10;
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	330a      	adds	r3, #10
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	e009      	b.n	8004952 <_ZN12TimeSettings6UpdateEv+0x17a>
			}else if(hour <= 19){
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b13      	cmp	r3, #19
 8004942:	d803      	bhi.n	800494c <_ZN12TimeSettings6UpdateEv+0x174>
				hour -= 10;
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	3b0a      	subs	r3, #10
 8004948:	73fb      	strb	r3, [r7, #15]
 800494a:	e002      	b.n	8004952 <_ZN12TimeSettings6UpdateEv+0x17a>
			}else{
				hour -= 20;
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	3b14      	subs	r3, #20
 8004950:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 1){
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	7a5b      	ldrb	r3, [r3, #9]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d12f      	bne.n	80049ba <_ZN12TimeSettings6UpdateEv+0x1e2>
			if(hour < 20){
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b13      	cmp	r3, #19
 800495e:	d816      	bhi.n	800498e <_ZN12TimeSettings6UpdateEv+0x1b6>
				if(hour - (hour/10)*10 < 9){
 8004960:	7bfa      	ldrb	r2, [r7, #15]
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	49a4      	ldr	r1, [pc, #656]	; (8004bf8 <_ZN12TimeSettings6UpdateEv+0x420>)
 8004966:	fba1 1303 	umull	r1, r3, r1, r3
 800496a:	08db      	lsrs	r3, r3, #3
 800496c:	b2db      	uxtb	r3, r3
 800496e:	4619      	mov	r1, r3
 8004970:	f06f 0309 	mvn.w	r3, #9
 8004974:	fb03 f301 	mul.w	r3, r3, r1
 8004978:	4413      	add	r3, r2
 800497a:	2b08      	cmp	r3, #8
 800497c:	dc03      	bgt.n	8004986 <_ZN12TimeSettings6UpdateEv+0x1ae>
					hour+=1;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3301      	adds	r3, #1
 8004982:	73fb      	strb	r3, [r7, #15]
 8004984:	e019      	b.n	80049ba <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=9;
 8004986:	7bfb      	ldrb	r3, [r7, #15]
 8004988:	3b09      	subs	r3, #9
 800498a:	73fb      	strb	r3, [r7, #15]
 800498c:	e015      	b.n	80049ba <_ZN12TimeSettings6UpdateEv+0x1e2>
				}
			}else{
				if(hour - (hour/10)*10 < 3){
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	4999      	ldr	r1, [pc, #612]	; (8004bf8 <_ZN12TimeSettings6UpdateEv+0x420>)
 8004994:	fba1 1303 	umull	r1, r3, r1, r3
 8004998:	08db      	lsrs	r3, r3, #3
 800499a:	b2db      	uxtb	r3, r3
 800499c:	4619      	mov	r1, r3
 800499e:	f06f 0309 	mvn.w	r3, #9
 80049a2:	fb03 f301 	mul.w	r3, r3, r1
 80049a6:	4413      	add	r3, r2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	dc03      	bgt.n	80049b4 <_ZN12TimeSettings6UpdateEv+0x1dc>
					hour+=1;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	3301      	adds	r3, #1
 80049b0:	73fb      	strb	r3, [r7, #15]
 80049b2:	e002      	b.n	80049ba <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=3;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	3b03      	subs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
			}
		}



		if(position == 3){
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	7a5b      	ldrb	r3, [r3, #9]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d109      	bne.n	80049d6 <_ZN12TimeSettings6UpdateEv+0x1fe>
			if(minute < 50){
 80049c2:	7bbb      	ldrb	r3, [r7, #14]
 80049c4:	2b31      	cmp	r3, #49	; 0x31
 80049c6:	d803      	bhi.n	80049d0 <_ZN12TimeSettings6UpdateEv+0x1f8>
				minute += 10;
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	330a      	adds	r3, #10
 80049cc:	73bb      	strb	r3, [r7, #14]
 80049ce:	e002      	b.n	80049d6 <_ZN12TimeSettings6UpdateEv+0x1fe>
			}else{
				minute -= 50;
 80049d0:	7bbb      	ldrb	r3, [r7, #14]
 80049d2:	3b32      	subs	r3, #50	; 0x32
 80049d4:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	7a5b      	ldrb	r3, [r3, #9]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d115      	bne.n	8004a0a <_ZN12TimeSettings6UpdateEv+0x232>
				if(minute - (minute/10)*10 < 9){
 80049de:	7bba      	ldrb	r2, [r7, #14]
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	4985      	ldr	r1, [pc, #532]	; (8004bf8 <_ZN12TimeSettings6UpdateEv+0x420>)
 80049e4:	fba1 1303 	umull	r1, r3, r1, r3
 80049e8:	08db      	lsrs	r3, r3, #3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	4619      	mov	r1, r3
 80049ee:	f06f 0309 	mvn.w	r3, #9
 80049f2:	fb03 f301 	mul.w	r3, r3, r1
 80049f6:	4413      	add	r3, r2
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	dc03      	bgt.n	8004a04 <_ZN12TimeSettings6UpdateEv+0x22c>
					minute+=1;
 80049fc:	7bbb      	ldrb	r3, [r7, #14]
 80049fe:	3301      	adds	r3, #1
 8004a00:	73bb      	strb	r3, [r7, #14]
 8004a02:	e002      	b.n	8004a0a <_ZN12TimeSettings6UpdateEv+0x232>
				}else{
					minute-=9;
 8004a04:	7bbb      	ldrb	r3, [r7, #14]
 8004a06:	3b09      	subs	r3, #9
 8004a08:	73bb      	strb	r3, [r7, #14]
				}
		}


		if(position == 6){
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	7a5b      	ldrb	r3, [r3, #9]
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d109      	bne.n	8004a26 <_ZN12TimeSettings6UpdateEv+0x24e>
			if(seconds < 50){
 8004a12:	7b7b      	ldrb	r3, [r7, #13]
 8004a14:	2b31      	cmp	r3, #49	; 0x31
 8004a16:	d803      	bhi.n	8004a20 <_ZN12TimeSettings6UpdateEv+0x248>
				seconds += 10;
 8004a18:	7b7b      	ldrb	r3, [r7, #13]
 8004a1a:	330a      	adds	r3, #10
 8004a1c:	737b      	strb	r3, [r7, #13]
 8004a1e:	e002      	b.n	8004a26 <_ZN12TimeSettings6UpdateEv+0x24e>
			}else{
				seconds -= 50;
 8004a20:	7b7b      	ldrb	r3, [r7, #13]
 8004a22:	3b32      	subs	r3, #50	; 0x32
 8004a24:	737b      	strb	r3, [r7, #13]
			}
		}

		if(position == 7){
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	7a5b      	ldrb	r3, [r3, #9]
 8004a2a:	2b07      	cmp	r3, #7
 8004a2c:	d115      	bne.n	8004a5a <_ZN12TimeSettings6UpdateEv+0x282>
				if(seconds - (seconds/10)*10 < 9){
 8004a2e:	7b7a      	ldrb	r2, [r7, #13]
 8004a30:	7b7b      	ldrb	r3, [r7, #13]
 8004a32:	4971      	ldr	r1, [pc, #452]	; (8004bf8 <_ZN12TimeSettings6UpdateEv+0x420>)
 8004a34:	fba1 1303 	umull	r1, r3, r1, r3
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f06f 0309 	mvn.w	r3, #9
 8004a42:	fb03 f301 	mul.w	r3, r3, r1
 8004a46:	4413      	add	r3, r2
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	dc03      	bgt.n	8004a54 <_ZN12TimeSettings6UpdateEv+0x27c>
					seconds+=1;
 8004a4c:	7b7b      	ldrb	r3, [r7, #13]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	737b      	strb	r3, [r7, #13]
 8004a52:	e002      	b.n	8004a5a <_ZN12TimeSettings6UpdateEv+0x282>
				}else{
					seconds-=9;
 8004a54:	7b7b      	ldrb	r3, [r7, #13]
 8004a56:	3b09      	subs	r3, #9
 8004a58:	737b      	strb	r3, [r7, #13]
				}
		}


		model->setHour(hour);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	4611      	mov	r1, r2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fd fa90 	bl	8001f88 <_ZN5Model7setHourEh>
		model->setMinute(minute);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	7bba      	ldrb	r2, [r7, #14]
 8004a6e:	4611      	mov	r1, r2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fd fada 	bl	800202a <_ZN5Model9setMinuteEh>
		model->setSeconds(seconds);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	7b7a      	ldrb	r2, [r7, #13]
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fd fb0d 	bl	800209e <_ZN5Model10setSecondsEh>
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685c      	ldr	r4, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68dd      	ldr	r5, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd fa6c 	bl	8001f6e <_ZNK5Model7getHourEv>
 8004a96:	4603      	mov	r3, r0
 8004a98:	461e      	mov	r6, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fd fab6 	bl	8002010 <_ZNK5Model9getMinuteEv>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4698      	mov	r8, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd fae9 	bl	8002084 <_ZNK5Model10getSecondsEv>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	4631      	mov	r1, r6
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f89f 	bl	8004bfc <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	9302      	str	r3, [sp, #8]
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	9200      	str	r2, [sp, #0]
 8004aca:	2300      	movs	r3, #0
 8004acc:	2204      	movs	r2, #4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7fc fd86 	bl	80015e2 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2, true);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6858      	ldr	r0, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	7a5b      	ldrb	r3, [r3, #9]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	b2d9      	uxtb	r1, r3
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f7fc fde1 	bl	80016ac <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fd fb81 	bl	80021f8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fd fb52 	bl	80021a4 <_ZNK5Model8isT2LongEv>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <_ZN12TimeSettings6UpdateEv+0x33a>
		model->setT2Long(false);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fd fb56 	bl	80021be <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd fb9b 	bl	8002252 <_ZNK5Model9isT3ShortEv>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <_ZN12TimeSettings6UpdateEv+0x356>
		model->setT3Short(false);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fb9f 	bl	800226c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fb70 	bl	8002218 <_ZNK5Model8isT3LongEv>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <_ZN12TimeSettings6UpdateEv+0x372>
		model->setT3Long(false);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fb74 	bl	8002232 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fd fbb9 	bl	80022c6 <_ZNK5Model9isT4ShortEv>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <_ZN12TimeSettings6UpdateEv+0x38e>
		model->setT4Short(false);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fd fbbd 	bl	80022e0 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fb8e 	bl	800228c <_ZNK5Model8isT4LongEv>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <_ZN12TimeSettings6UpdateEv+0x3aa>
		model->setT4Long(false);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd fb92 	bl	80022a6 <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fd fbd7 	bl	800233a <_ZNK5Model9isT5ShortEv>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <_ZN12TimeSettings6UpdateEv+0x3de>
		screen = Model::E_DATE_SETTINGS;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2206      	movs	r2, #6
 8004b96:	721a      	strb	r2, [r3, #8]
		init = false;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd fd5f 	bl	8002668 <_ZN5Model16setOverrideClockEb>
		model->setT5Short(false);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fd fbcf 	bl	8002354 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fd fba0 	bl	8002300 <_ZNK5Model8isT5LongEv>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d011      	beq.n	8004bea <_ZN12TimeSettings6UpdateEv+0x412>
		screen = Model::E_MAIN_SCRREN;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	721a      	strb	r2, [r3, #8]
		init = false;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fd fd45 	bl	8002668 <_ZN5Model16setOverrideClockEb>
		model->setT5Long(false);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fd fb98 	bl	800231a <_ZN5Model9setT5LongEb>
	}


	return screen;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7a1b      	ldrb	r3, [r3, #8]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bf8:	cccccccd 	.word	0xcccccccd

08004bfc <_ZN12TimeSettings15TimeToCharArrayEhhh>:




char* TimeSettings::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	70fb      	strb	r3, [r7, #3]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70bb      	strb	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	4a32      	ldr	r2, [pc, #200]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	08db      	lsrs	r3, r3, #3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	3330      	adds	r3, #48	; 0x30
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c28:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	08db      	lsrs	r3, r3, #3
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	0152      	lsls	r2, r2, #5
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	0092      	lsls	r2, r2, #2
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	4413      	add	r3, r2
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	3330      	adds	r3, #48	; 0x30
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c50:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8004c52:	4b25      	ldr	r3, [pc, #148]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c54:	223a      	movs	r2, #58	; 0x3a
 8004c56:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 8004c58:	78bb      	ldrb	r3, [r7, #2]
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	08db      	lsrs	r3, r3, #3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	3330      	adds	r3, #48	; 0x30
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	4b1f      	ldr	r3, [pc, #124]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c6a:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8004c6c:	78bb      	ldrb	r3, [r7, #2]
 8004c6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	08db      	lsrs	r3, r3, #3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	0152      	lsls	r2, r2, #5
 8004c7c:	1ad2      	subs	r2, r2, r3
 8004c7e:	0092      	lsls	r2, r2, #2
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	78bb      	ldrb	r3, [r7, #2]
 8004c88:	4413      	add	r3, r2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3330      	adds	r3, #48	; 0x30
 8004c8e:	b2da      	uxtb	r2, r3
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c92:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c96:	223a      	movs	r2, #58	; 0x3a
 8004c98:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8004c9a:	787b      	ldrb	r3, [r7, #1]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	08db      	lsrs	r3, r3, #3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	3330      	adds	r3, #48	; 0x30
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004cac:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 8004cae:	787b      	ldrb	r3, [r7, #1]
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	; (8004ce4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	08db      	lsrs	r3, r3, #3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	0152      	lsls	r2, r2, #5
 8004cbe:	1ad2      	subs	r2, r2, r3
 8004cc0:	0092      	lsls	r2, r2, #2
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	005b      	lsls	r3, r3, #1
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	787b      	ldrb	r3, [r7, #1]
 8004cca:	4413      	add	r3, r2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	3330      	adds	r3, #48	; 0x30
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004cd4:	71da      	strb	r2, [r3, #7]
	return result;
 8004cd6:	4b04      	ldr	r3, [pc, #16]	; (8004ce8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr
 8004ce4:	cccccccd 	.word	0xcccccccd
 8004ce8:	2000035c 	.word	0x2000035c

08004cec <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>:
 */

#include "Time.h"


Time::Time(Model *model, I2C_HandleTypeDef *hi2c) {
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	this->model = model;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	601a      	str	r2, [r3, #0]
	this->hi2c = hi2c;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	605a      	str	r2, [r3, #4]

}
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <_ZN4Time7SetTimeEv>:

void Time::SetTime() {
 8004d12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af04      	add	r7, sp, #16
 8004d1a:	6078      	str	r0, [r7, #4]

	SetTime(model->getYear(),model->getMonth(),model->getDay(),model->getHour(),model->getMinute(),model->getSeconds());
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fd f9e8 	bl	80020f6 <_ZNK5Model7getYearEv>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461e      	mov	r6, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fd f98b 	bl	800204a <_ZNK5Model8getMonthEv>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4698      	mov	r8, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fd f8e9 	bl	8001f14 <_ZNK5Model6getDayEv>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4699      	mov	r9, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd f90f 	bl	8001f6e <_ZNK5Model7getHourEv>
 8004d50:	4603      	mov	r3, r0
 8004d52:	461c      	mov	r4, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fd f959 	bl	8002010 <_ZNK5Model9getMinuteEv>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461d      	mov	r5, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd f98c 	bl	8002084 <_ZNK5Model10getSecondsEv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	9302      	str	r3, [sp, #8]
 8004d70:	9501      	str	r5, [sp, #4]
 8004d72:	9400      	str	r4, [sp, #0]
 8004d74:	464b      	mov	r3, r9
 8004d76:	4642      	mov	r2, r8
 8004d78:	4631      	mov	r1, r6
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f805 	bl	8004d8a <_ZN4Time7SetTimeEhhhhhh>

}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d8a <_ZN4Time7SetTimeEhhhhhh>:
void Time::InitTimer() {

}


void Time::SetTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour,uint8_t minute, uint8_t seconds) {
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af02      	add	r7, sp, #8
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	4608      	mov	r0, r1
 8004d94:	4611      	mov	r1, r2
 8004d96:	461a      	mov	r2, r3
 8004d98:	4603      	mov	r3, r0
 8004d9a:	70fb      	strb	r3, [r7, #3]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70bb      	strb	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	707b      	strb	r3, [r7, #1]

	uint8_t txData[8];

	txData[0] = 0x02;
 8004da4:	2302      	movs	r3, #2
 8004da6:	723b      	strb	r3, [r7, #8]
	txData[1] = Tools::BCDEncoder(seconds);
 8004da8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fd fdbd 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004db2:	4603      	mov	r3, r0
 8004db4:	727b      	strb	r3, [r7, #9]
	txData[2] = Tools::BCDEncoder(minute);
 8004db6:	7f3b      	ldrb	r3, [r7, #28]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fd fdb7 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	72bb      	strb	r3, [r7, #10]
	txData[3] = Tools::BCDEncoder(hour);
 8004dc2:	7e3b      	ldrb	r3, [r7, #24]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fd fdb1 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	72fb      	strb	r3, [r7, #11]
	txData[4] = Tools::BCDEncoder(day);
 8004dce:	787b      	ldrb	r3, [r7, #1]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fd fdab 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	733b      	strb	r3, [r7, #12]
	txData[5] = 0x01;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	737b      	strb	r3, [r7, #13]
	txData[6] = Tools::BCDEncoder(month);
 8004dde:	78bb      	ldrb	r3, [r7, #2]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fd fda3 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004de6:	4603      	mov	r3, r0
 8004de8:	73bb      	strb	r3, [r7, #14]
	txData[7] = Tools::BCDEncoder(year);
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd fd9d 	bl	800292c <_ZN5Tools10BCDEncoderEh>
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, TIME_ADDR<<1, txData, sizeof(txData)/sizeof(txData[0]), I2C_TIMEOUT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6858      	ldr	r0, [r3, #4]
 8004dfa:	f107 0208 	add.w	r2, r7, #8
 8004dfe:	2364      	movs	r3, #100	; 0x64
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	2308      	movs	r3, #8
 8004e04:	21a2      	movs	r1, #162	; 0xa2
 8004e06:	f000 fc85 	bl	8005714 <HAL_I2C_Master_Transmit>

}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <_ZN4Time10UpdateTimeEv>:


void Time::UpdateTime(){
 8004e12:	b590      	push	{r4, r7, lr}
 8004e14:	b089      	sub	sp, #36	; 0x24
 8004e16:	af02      	add	r7, sp, #8
 8004e18:	6078      	str	r0, [r7, #4]
	uint8_t rxData[7];
	uint8_t txData[1];
	txData[0] = 0x02;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(hi2c,TIME_ADDR<<1 ,txData , 1, 100);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6858      	ldr	r0, [r3, #4]
 8004e22:	f107 020c 	add.w	r2, r7, #12
 8004e26:	2364      	movs	r3, #100	; 0x64
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	21a2      	movs	r1, #162	; 0xa2
 8004e2e:	f000 fc71 	bl	8005714 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, TIME_ADDR<<1, rxData, 7, 100);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6858      	ldr	r0, [r3, #4]
 8004e36:	f107 0210 	add.w	r2, r7, #16
 8004e3a:	2364      	movs	r3, #100	; 0x64
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2307      	movs	r3, #7
 8004e40:	21a2      	movs	r1, #162	; 0xa2
 8004e42:	f000 fd5b 	bl	80058fc <HAL_I2C_Master_Receive>

	model->setSeconds(Tools::BCDDecoder((rxData[0])&0x7F));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681c      	ldr	r4, [r3, #0]
 8004e4a:	7c3b      	ldrb	r3, [r7, #16]
 8004e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fd fd4e 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7fd f91e 	bl	800209e <_ZN5Model10setSecondsEh>
	model->setMinute(Tools::BCDDecoder((rxData[1])&0x7F));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681c      	ldr	r4, [r3, #0]
 8004e66:	7c7b      	ldrb	r3, [r7, #17]
 8004e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fd fd40 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4619      	mov	r1, r3
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7fd f8d6 	bl	800202a <_ZN5Model9setMinuteEh>
	model->setHour(Tools::BCDDecoder((rxData[2])&0x3F));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681c      	ldr	r4, [r3, #0]
 8004e82:	7cbb      	ldrb	r3, [r7, #18]
 8004e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fd32 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4619      	mov	r1, r3
 8004e94:	4620      	mov	r0, r4
 8004e96:	f7fd f877 	bl	8001f88 <_ZN5Model7setHourEh>
	model->setDay(Tools::BCDDecoder((rxData[3])&0x3F));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681c      	ldr	r4, [r3, #0]
 8004e9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd fd24 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7fd f83c 	bl	8001f2e <_ZN5Model6setDayEh>
	model->setDayOfWeek(Tools::BCDDecoder((rxData[4])&0x03));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681c      	ldr	r4, [r3, #0]
 8004eba:	7d3b      	ldrb	r3, [r7, #20]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fd fd16 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f7fd f83e 	bl	8001f4e <_ZN5Model12setDayOfWeekEh>
	model->setMonth(Tools::BCDDecoder((rxData[5])&0x1F));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681c      	ldr	r4, [r3, #0]
 8004ed6:	7d7b      	ldrb	r3, [r7, #21]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd fd08 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f7fd f8bb 	bl	8002064 <_ZN5Model8setMonthEh>
	model->setYear(Tools::BCDDecoder((rxData[6])&0xFF));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681c      	ldr	r4, [r3, #0]
 8004ef2:	7dbb      	ldrb	r3, [r7, #22]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fd fcfd 	bl	80028f4 <_ZN5Tools10BCDDecoderEh>
 8004efa:	4603      	mov	r3, r0
 8004efc:	4619      	mov	r1, r3
 8004efe:	4620      	mov	r0, r4
 8004f00:	f7fd f906 	bl	8002110 <_ZN5Model7setYearEh>
}
 8004f04:	bf00      	nop
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}

08004f0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f10:	f7fb ffa2 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004f14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004f16:	e003      	b.n	8004f20 <LoopCopyDataInit>

08004f18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004f1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004f1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004f1e:	3104      	adds	r1, #4

08004f20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004f20:	480a      	ldr	r0, [pc, #40]	; (8004f4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004f24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004f26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004f28:	d3f6      	bcc.n	8004f18 <CopyDataInit>
	ldr	r2, =_sbss
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004f2c:	e002      	b.n	8004f34 <LoopFillZerobss>

08004f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004f2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004f30:	f842 3b04 	str.w	r3, [r2], #4

08004f34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004f34:	4b08      	ldr	r3, [pc, #32]	; (8004f58 <LoopForever+0x16>)
	cmp	r2, r3
 8004f36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004f38:	d3f9      	bcc.n	8004f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f3a:	f008 faf3 	bl	800d524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f3e:	f7fb fd75 	bl	8000a2c <main>

08004f42 <LoopForever>:

LoopForever:
    b LoopForever
 8004f42:	e7fe      	b.n	8004f42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004f44:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004f48:	0800d8b8 	.word	0x0800d8b8
	ldr	r0, =_sdata
 8004f4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004f50:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8004f54:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8004f58:	20000fc0 	.word	0x20000fc0

08004f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f5c:	e7fe      	b.n	8004f5c <ADC1_2_IRQHandler>

08004f5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f68:	2003      	movs	r0, #3
 8004f6a:	f000 f95f 	bl	800522c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f000 f80e 	bl	8004f90 <HAL_InitTick>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	71fb      	strb	r3, [r7, #7]
 8004f7e:	e001      	b.n	8004f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f80:	f7fb feac 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f84:	79fb      	ldrb	r3, [r7, #7]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004f9c:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <HAL_InitTick+0x6c>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d023      	beq.n	8004fec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004fa4:	4b16      	ldr	r3, [pc, #88]	; (8005000 <HAL_InitTick+0x70>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <HAL_InitTick+0x6c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f96b 	bl	8005296 <HAL_SYSTICK_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b0f      	cmp	r3, #15
 8004fca:	d809      	bhi.n	8004fe0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fcc:	2200      	movs	r2, #0
 8004fce:	6879      	ldr	r1, [r7, #4]
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	f000 f935 	bl	8005242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <HAL_InitTick+0x74>)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e007      	b.n	8004ff0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e004      	b.n	8004ff0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e001      	b.n	8004ff0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000008 	.word	0x20000008
 8005000:	20000000 	.word	0x20000000
 8005004:	20000004 	.word	0x20000004

08005008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_IncTick+0x20>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_IncTick+0x24>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4413      	add	r3, r2
 8005018:	4a04      	ldr	r2, [pc, #16]	; (800502c <HAL_IncTick+0x24>)
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000008 	.word	0x20000008
 800502c:	2000040c 	.word	0x2000040c

08005030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return uwTick;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <HAL_GetTick+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	2000040c 	.word	0x2000040c

08005048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005050:	f7ff ffee 	bl	8005030 <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d005      	beq.n	800506e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005062:	4b09      	ldr	r3, [pc, #36]	; (8005088 <HAL_Delay+0x40>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800506e:	bf00      	nop
 8005070:	f7ff ffde 	bl	8005030 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	d8f7      	bhi.n	8005070 <HAL_Delay+0x28>
  {
  }
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20000008 	.word	0x20000008

0800508c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800509c:	4b0c      	ldr	r3, [pc, #48]	; (80050d0 <__NVIC_SetPriorityGrouping+0x44>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050a8:	4013      	ands	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050be:	4a04      	ldr	r2, [pc, #16]	; (80050d0 <__NVIC_SetPriorityGrouping+0x44>)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	60d3      	str	r3, [r2, #12]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050d8:	4b04      	ldr	r3, [pc, #16]	; (80050ec <__NVIC_GetPriorityGrouping+0x18>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	f003 0307 	and.w	r3, r3, #7
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	db0b      	blt.n	800511a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	4907      	ldr	r1, [pc, #28]	; (8005128 <__NVIC_EnableIRQ+0x38>)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2001      	movs	r0, #1
 8005112:	fa00 f202 	lsl.w	r2, r0, r2
 8005116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000e100 	.word	0xe000e100

0800512c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	6039      	str	r1, [r7, #0]
 8005136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513c:	2b00      	cmp	r3, #0
 800513e:	db0a      	blt.n	8005156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	b2da      	uxtb	r2, r3
 8005144:	490c      	ldr	r1, [pc, #48]	; (8005178 <__NVIC_SetPriority+0x4c>)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	0112      	lsls	r2, r2, #4
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	440b      	add	r3, r1
 8005150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005154:	e00a      	b.n	800516c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4908      	ldr	r1, [pc, #32]	; (800517c <__NVIC_SetPriority+0x50>)
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	3b04      	subs	r3, #4
 8005164:	0112      	lsls	r2, r2, #4
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	440b      	add	r3, r1
 800516a:	761a      	strb	r2, [r3, #24]
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	e000e100 	.word	0xe000e100
 800517c:	e000ed00 	.word	0xe000ed00

08005180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005180:	b480      	push	{r7}
 8005182:	b089      	sub	sp, #36	; 0x24
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f1c3 0307 	rsb	r3, r3, #7
 800519a:	2b04      	cmp	r3, #4
 800519c:	bf28      	it	cs
 800519e:	2304      	movcs	r3, #4
 80051a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3304      	adds	r3, #4
 80051a6:	2b06      	cmp	r3, #6
 80051a8:	d902      	bls.n	80051b0 <NVIC_EncodePriority+0x30>
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3b03      	subs	r3, #3
 80051ae:	e000      	b.n	80051b2 <NVIC_EncodePriority+0x32>
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b4:	f04f 32ff 	mov.w	r2, #4294967295
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	43da      	mvns	r2, r3
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	401a      	ands	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051c8:	f04f 31ff 	mov.w	r1, #4294967295
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	fa01 f303 	lsl.w	r3, r1, r3
 80051d2:	43d9      	mvns	r1, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d8:	4313      	orrs	r3, r2
         );
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051f8:	d301      	bcc.n	80051fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051fa:	2301      	movs	r3, #1
 80051fc:	e00f      	b.n	800521e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <SysTick_Config+0x40>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3b01      	subs	r3, #1
 8005204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005206:	210f      	movs	r1, #15
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	f7ff ff8e 	bl	800512c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <SysTick_Config+0x40>)
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005216:	4b04      	ldr	r3, [pc, #16]	; (8005228 <SysTick_Config+0x40>)
 8005218:	2207      	movs	r2, #7
 800521a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	e000e010 	.word	0xe000e010

0800522c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7ff ff29 	bl	800508c <__NVIC_SetPriorityGrouping>
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	4603      	mov	r3, r0
 800524a:	60b9      	str	r1, [r7, #8]
 800524c:	607a      	str	r2, [r7, #4]
 800524e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005254:	f7ff ff3e 	bl	80050d4 <__NVIC_GetPriorityGrouping>
 8005258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	6978      	ldr	r0, [r7, #20]
 8005260:	f7ff ff8e 	bl	8005180 <NVIC_EncodePriority>
 8005264:	4602      	mov	r2, r0
 8005266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f7ff ff5d 	bl	800512c <__NVIC_SetPriority>
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b082      	sub	sp, #8
 800527e:	af00      	add	r7, sp, #0
 8005280:	4603      	mov	r3, r0
 8005282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff ff31 	bl	80050f0 <__NVIC_EnableIRQ>
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff ffa2 	bl	80051e8 <SysTick_Config>
 80052a4:	4603      	mov	r3, r0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052be:	e14e      	b.n	800555e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	fa01 f303 	lsl.w	r3, r1, r3
 80052cc:	4013      	ands	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8140 	beq.w	8005558 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d00b      	beq.n	80052f8 <HAL_GPIO_Init+0x48>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d007      	beq.n	80052f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ec:	2b11      	cmp	r3, #17
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b12      	cmp	r3, #18
 80052f6:	d130      	bne.n	800535a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	4313      	orrs	r3, r2
 8005320:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800532e:	2201      	movs	r2, #1
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 0201 	and.w	r2, r3, #1
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	2203      	movs	r2, #3
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0xea>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b12      	cmp	r3, #18
 8005398:	d123      	bne.n	80053e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	08da      	lsrs	r2, r3, #3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3208      	adds	r2, #8
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	220f      	movs	r2, #15
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	43db      	mvns	r3, r3
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	4013      	ands	r3, r2
 80053bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	fa02 f303 	lsl.w	r3, r2, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	08da      	lsrs	r2, r3, #3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	3208      	adds	r2, #8
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2203      	movs	r2, #3
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f003 0203 	and.w	r2, r3, #3
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	693a      	ldr	r2, [r7, #16]
 8005414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 809a 	beq.w	8005558 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005424:	4b55      	ldr	r3, [pc, #340]	; (800557c <HAL_GPIO_Init+0x2cc>)
 8005426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005428:	4a54      	ldr	r2, [pc, #336]	; (800557c <HAL_GPIO_Init+0x2cc>)
 800542a:	f043 0301 	orr.w	r3, r3, #1
 800542e:	6613      	str	r3, [r2, #96]	; 0x60
 8005430:	4b52      	ldr	r3, [pc, #328]	; (800557c <HAL_GPIO_Init+0x2cc>)
 8005432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800543c:	4a50      	ldr	r2, [pc, #320]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	089b      	lsrs	r3, r3, #2
 8005442:	3302      	adds	r3, #2
 8005444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0303 	and.w	r3, r3, #3
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	220f      	movs	r2, #15
 8005454:	fa02 f303 	lsl.w	r3, r2, r3
 8005458:	43db      	mvns	r3, r3
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4013      	ands	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005466:	d013      	beq.n	8005490 <HAL_GPIO_Init+0x1e0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a46      	ldr	r2, [pc, #280]	; (8005584 <HAL_GPIO_Init+0x2d4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00d      	beq.n	800548c <HAL_GPIO_Init+0x1dc>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a45      	ldr	r2, [pc, #276]	; (8005588 <HAL_GPIO_Init+0x2d8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <HAL_GPIO_Init+0x1d8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a44      	ldr	r2, [pc, #272]	; (800558c <HAL_GPIO_Init+0x2dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_GPIO_Init+0x1d4>
 8005480:	2303      	movs	r3, #3
 8005482:	e006      	b.n	8005492 <HAL_GPIO_Init+0x1e2>
 8005484:	2307      	movs	r3, #7
 8005486:	e004      	b.n	8005492 <HAL_GPIO_Init+0x1e2>
 8005488:	2302      	movs	r3, #2
 800548a:	e002      	b.n	8005492 <HAL_GPIO_Init+0x1e2>
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <HAL_GPIO_Init+0x1e2>
 8005490:	2300      	movs	r3, #0
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	f002 0203 	and.w	r2, r2, #3
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4093      	lsls	r3, r2
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054a2:	4937      	ldr	r1, [pc, #220]	; (8005580 <HAL_GPIO_Init+0x2d0>)
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	3302      	adds	r3, #2
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80054b0:	4b37      	ldr	r3, [pc, #220]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4013      	ands	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054d4:	4a2e      	ldr	r2, [pc, #184]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80054da:	4b2d      	ldr	r3, [pc, #180]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	43db      	mvns	r3, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4013      	ands	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80054fe:	4a24      	ldr	r2, [pc, #144]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	43db      	mvns	r3, r3
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4013      	ands	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800552e:	4b18      	ldr	r3, [pc, #96]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	43db      	mvns	r3, r3
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4013      	ands	r3, r2
 800553c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005552:	4a0f      	ldr	r2, [pc, #60]	; (8005590 <HAL_GPIO_Init+0x2e0>)
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	3301      	adds	r3, #1
 800555c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	fa22 f303 	lsr.w	r3, r2, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	f47f aea9 	bne.w	80052c0 <HAL_GPIO_Init+0x10>
  }
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000
 8005580:	40010000 	.word	0x40010000
 8005584:	48000400 	.word	0x48000400
 8005588:	48000800 	.word	0x48000800
 800558c:	48000c00 	.word	0x48000c00
 8005590:	40010400 	.word	0x40010400

08005594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	460b      	mov	r3, r1
 800559e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	4013      	ands	r3, r2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80055ac:	2301      	movs	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	e001      	b.n	80055b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	807b      	strh	r3, [r7, #2]
 80055d0:	4613      	mov	r3, r2
 80055d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d4:	787b      	ldrb	r3, [r7, #1]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055da:	887a      	ldrh	r2, [r7, #2]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055e0:	e002      	b.n	80055e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055e2:	887a      	ldrh	r2, [r7, #2]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e081      	b.n	800570a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fb f9c2 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	; 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005644:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005654:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d107      	bne.n	800566e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800566a:	609a      	str	r2, [r3, #8]
 800566c:	e006      	b.n	800567c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800567a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d104      	bne.n	800568e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800568c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800569c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	ea42 0103 	orr.w	r1, r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	021a      	lsls	r2, r3, #8
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69d9      	ldr	r1, [r3, #28]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af02      	add	r7, sp, #8
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	607a      	str	r2, [r7, #4]
 800571e:	461a      	mov	r2, r3
 8005720:	460b      	mov	r3, r1
 8005722:	817b      	strh	r3, [r7, #10]
 8005724:	4613      	mov	r3, r2
 8005726:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b20      	cmp	r3, #32
 8005732:	f040 80da 	bne.w	80058ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_I2C_Master_Transmit+0x30>
 8005740:	2302      	movs	r3, #2
 8005742:	e0d3      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800574c:	f7ff fc70 	bl	8005030 <HAL_GetTick>
 8005750:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	2319      	movs	r3, #25
 8005758:	2201      	movs	r2, #1
 800575a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f9e6 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0be      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2221      	movs	r2, #33	; 0x21
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2210      	movs	r2, #16
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	893a      	ldrh	r2, [r7, #8]
 800578e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29b      	uxth	r3, r3
 800579c:	2bff      	cmp	r3, #255	; 0xff
 800579e:	d90e      	bls.n	80057be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	8979      	ldrh	r1, [r7, #10]
 80057ae:	4b51      	ldr	r3, [pc, #324]	; (80058f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fb48 	bl	8005e4c <I2C_TransferConfig>
 80057bc:	e06c      	b.n	8005898 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	8979      	ldrh	r1, [r7, #10]
 80057d0:	4b48      	ldr	r3, [pc, #288]	; (80058f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fb37 	bl	8005e4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80057de:	e05b      	b.n	8005898 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	6a39      	ldr	r1, [r7, #32]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f9e3 	bl	8005bb0 <I2C_WaitOnTXISFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e07b      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f8:	781a      	ldrb	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580e:	b29b      	uxth	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d034      	beq.n	8005898 <HAL_I2C_Master_Transmit+0x184>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d130      	bne.n	8005898 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	; 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f975 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d001      	beq.n	8005850 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e04d      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2bff      	cmp	r3, #255	; 0xff
 8005858:	d90e      	bls.n	8005878 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	22ff      	movs	r2, #255	; 0xff
 800585e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005864:	b2da      	uxtb	r2, r3
 8005866:	8979      	ldrh	r1, [r7, #10]
 8005868:	2300      	movs	r3, #0
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 faeb 	bl	8005e4c <I2C_TransferConfig>
 8005876:	e00f      	b.n	8005898 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005886:	b2da      	uxtb	r2, r3
 8005888:	8979      	ldrh	r1, [r7, #10]
 800588a:	2300      	movs	r3, #0
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fada 	bl	8005e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d19e      	bne.n	80057e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	6a39      	ldr	r1, [r7, #32]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f9c2 	bl	8005c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e01a      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2220      	movs	r2, #32
 80058bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6859      	ldr	r1, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80058ca:	400b      	ands	r3, r1
 80058cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	e000      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80058ea:	2302      	movs	r3, #2
  }
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	80002000 	.word	0x80002000
 80058f8:	fe00e800 	.word	0xfe00e800

080058fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	461a      	mov	r2, r3
 8005908:	460b      	mov	r3, r1
 800590a:	817b      	strh	r3, [r7, #10]
 800590c:	4613      	mov	r3, r2
 800590e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b20      	cmp	r3, #32
 800591a:	f040 80db 	bne.w	8005ad4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_I2C_Master_Receive+0x30>
 8005928:	2302      	movs	r3, #2
 800592a:	e0d4      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005934:	f7ff fb7c 	bl	8005030 <HAL_GetTick>
 8005938:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2319      	movs	r3, #25
 8005940:	2201      	movs	r2, #1
 8005942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f8f2 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0bf      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2222      	movs	r2, #34	; 0x22
 800595a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2210      	movs	r2, #16
 8005962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	893a      	ldrh	r2, [r7, #8]
 8005976:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	2bff      	cmp	r3, #255	; 0xff
 8005986:	d90e      	bls.n	80059a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	b2da      	uxtb	r2, r3
 8005994:	8979      	ldrh	r1, [r7, #10]
 8005996:	4b52      	ldr	r3, [pc, #328]	; (8005ae0 <HAL_I2C_Master_Receive+0x1e4>)
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fa54 	bl	8005e4c <I2C_TransferConfig>
 80059a4:	e06d      	b.n	8005a82 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	8979      	ldrh	r1, [r7, #10]
 80059b8:	4b49      	ldr	r3, [pc, #292]	; (8005ae0 <HAL_I2C_Master_Receive+0x1e4>)
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	f000 fa43 	bl	8005e4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80059c6:	e05c      	b.n	8005a82 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	6a39      	ldr	r1, [r7, #32]
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f96b 	bl	8005ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e07c      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d034      	beq.n	8005a82 <HAL_I2C_Master_Receive+0x186>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d130      	bne.n	8005a82 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2200      	movs	r2, #0
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f880 	bl	8005b30 <I2C_WaitOnFlagUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e04d      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	2bff      	cmp	r3, #255	; 0xff
 8005a42:	d90e      	bls.n	8005a62 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	22ff      	movs	r2, #255	; 0xff
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	8979      	ldrh	r1, [r7, #10]
 8005a52:	2300      	movs	r3, #0
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 f9f6 	bl	8005e4c <I2C_TransferConfig>
 8005a60:	e00f      	b.n	8005a82 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	8979      	ldrh	r1, [r7, #10]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f9e5 	bl	8005e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d19d      	bne.n	80059c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	6a39      	ldr	r1, [r7, #32]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f8cd 	bl	8005c30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d001      	beq.n	8005aa0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e01a      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <HAL_I2C_Master_Receive+0x1e8>)
 8005ab4:	400b      	ands	r3, r1
 8005ab6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	e000      	b.n	8005ad6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005ad4:	2302      	movs	r3, #2
  }
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	80002400 	.word	0x80002400
 8005ae4:	fe00e800 	.word	0xfe00e800

08005ae8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d103      	bne.n	8005b06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d007      	beq.n	8005b24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	619a      	str	r2, [r3, #24]
  }
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b40:	e022      	b.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d01e      	beq.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b4a:	f7ff fa71 	bl	8005030 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d302      	bcc.n	8005b60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d113      	bne.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	f043 0220 	orr.w	r2, r3, #32
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e00f      	b.n	8005ba8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d0cd      	beq.n	8005b42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005bbc:	e02c      	b.n	8005c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f8dc 	bl	8005d80 <I2C_IsAcknowledgeFailed>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e02a      	b.n	8005c28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd8:	d01e      	beq.n	8005c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bda:	f7ff fa29 	bl	8005030 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d302      	bcc.n	8005bf0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d113      	bne.n	8005c18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf4:	f043 0220 	orr.w	r2, r3, #32
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e007      	b.n	8005c28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d1cb      	bne.n	8005bbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c3c:	e028      	b.n	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 f89c 	bl	8005d80 <I2C_IsAcknowledgeFailed>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e026      	b.n	8005ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c52:	f7ff f9ed 	bl	8005030 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d113      	bne.n	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	f043 0220 	orr.w	r2, r3, #32
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e007      	b.n	8005ca0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f003 0320 	and.w	r3, r3, #32
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d1cf      	bne.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005cb4:	e055      	b.n	8005d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68b9      	ldr	r1, [r7, #8]
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f860 	bl	8005d80 <I2C_IsAcknowledgeFailed>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e053      	b.n	8005d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d129      	bne.n	8005d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d105      	bne.n	8005cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e03f      	b.n	8005d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6859      	ldr	r1, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005d06:	400b      	ands	r3, r1
 8005d08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e022      	b.n	8005d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d2c:	f7ff f980 	bl	8005030 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d302      	bcc.n	8005d42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e007      	b.n	8005d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	d1a2      	bne.n	8005cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	fe00e800 	.word	0xfe00e800

08005d80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b10      	cmp	r3, #16
 8005d98:	d151      	bne.n	8005e3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d9a:	e022      	b.n	8005de2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d01e      	beq.n	8005de2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da4:	f7ff f944 	bl	8005030 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <I2C_IsAcknowledgeFailed+0x3a>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d113      	bne.n	8005de2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e02e      	b.n	8005e40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d1d5      	bne.n	8005d9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f7ff fe71 	bl	8005ae8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <I2C_IsAcknowledgeFailed+0xc8>)
 8005e12:	400b      	ands	r3, r1
 8005e14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	fe00e800 	.word	0xfe00e800

08005e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	817b      	strh	r3, [r7, #10]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	0d5b      	lsrs	r3, r3, #21
 8005e68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <I2C_TransferConfig+0x58>)
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	43db      	mvns	r3, r3
 8005e72:	ea02 0103 	and.w	r1, r2, r3
 8005e76:	897b      	ldrh	r3, [r7, #10]
 8005e78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e7c:	7a7b      	ldrb	r3, [r7, #9]
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005e96:	bf00      	nop
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	03ff63ff 	.word	0x03ff63ff

08005ea8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d138      	bne.n	8005f30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e032      	b.n	8005f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005efa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6819      	ldr	r1, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	e000      	b.n	8005f32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f30:	2302      	movs	r3, #2
  }
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b20      	cmp	r3, #32
 8005f52:	d139      	bne.n	8005fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e033      	b.n	8005fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2224      	movs	r2, #36	; 0x24
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	021b      	lsls	r3, r3, #8
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0201 	orr.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	e000      	b.n	8005fca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005fc8:	2302      	movs	r3, #2
  }
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fd8:	b08b      	sub	sp, #44	; 0x2c
 8005fda:	af06      	add	r7, sp, #24
 8005fdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e104      	b.n	80061f2 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d106      	bne.n	8006002 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f006 fedb 	bl	800cdb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2203      	movs	r2, #3
 8006006:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4618      	mov	r0, r3
 8006010:	f003 f804 	bl	800901c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	687e      	ldr	r6, [r7, #4]
 800601c:	466d      	mov	r5, sp
 800601e:	f106 0410 	add.w	r4, r6, #16
 8006022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006024:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006026:	6823      	ldr	r3, [r4, #0]
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	1d33      	adds	r3, r6, #4
 800602c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800602e:	6838      	ldr	r0, [r7, #0]
 8006030:	f002 ffcc 	bl	8008fcc <USB_CoreInit>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e0d5      	b.n	80061f2 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f003 f800 	bl	8009052 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
 8006056:	e04c      	b.n	80060f2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	4613      	mov	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	440b      	add	r3, r1
 8006068:	3301      	adds	r3, #1
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	1c5a      	adds	r2, r3, #1
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	440b      	add	r3, r1
 800607e:	7bfa      	ldrb	r2, [r7, #15]
 8006080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006082:	7bfa      	ldrb	r2, [r7, #15]
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	b298      	uxth	r0, r3
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	440b      	add	r3, r1
 8006094:	3336      	adds	r3, #54	; 0x36
 8006096:	4602      	mov	r2, r0
 8006098:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	440b      	add	r3, r1
 80060aa:	3303      	adds	r3, #3
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060b0:	7bfa      	ldrb	r2, [r7, #15]
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	00db      	lsls	r3, r3, #3
 80060bc:	440b      	add	r3, r1
 80060be:	3338      	adds	r3, #56	; 0x38
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060c4:	7bfa      	ldrb	r2, [r7, #15]
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	00db      	lsls	r3, r3, #3
 80060d0:	440b      	add	r3, r1
 80060d2:	333c      	adds	r3, #60	; 0x3c
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060d8:	7bfa      	ldrb	r2, [r7, #15]
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	4613      	mov	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	440b      	add	r3, r1
 80060e6:	3340      	adds	r3, #64	; 0x40
 80060e8:	2200      	movs	r2, #0
 80060ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	3301      	adds	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
 80060f2:	7bfa      	ldrb	r2, [r7, #15]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d3ad      	bcc.n	8006058 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	73fb      	strb	r3, [r7, #15]
 8006100:	e044      	b.n	800618c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	00db      	lsls	r3, r3, #3
 800610e:	440b      	add	r3, r1
 8006110:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	00db      	lsls	r3, r3, #3
 8006124:	440b      	add	r3, r1
 8006126:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800612e:	7bfa      	ldrb	r2, [r7, #15]
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	440b      	add	r3, r1
 800613c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006140:	2200      	movs	r2, #0
 8006142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	6879      	ldr	r1, [r7, #4]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800615a:	7bfa      	ldrb	r2, [r7, #15]
 800615c:	6879      	ldr	r1, [r7, #4]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	440b      	add	r3, r1
 8006168:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006170:	7bfa      	ldrb	r2, [r7, #15]
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	440b      	add	r3, r1
 800617e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006186:	7bfb      	ldrb	r3, [r7, #15]
 8006188:	3301      	adds	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	7bfa      	ldrb	r2, [r7, #15]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	429a      	cmp	r2, r3
 8006194:	d3b5      	bcc.n	8006102 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	687e      	ldr	r6, [r7, #4]
 800619e:	466d      	mov	r5, sp
 80061a0:	f106 0410 	add.w	r4, r6, #16
 80061a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	602b      	str	r3, [r5, #0]
 80061ac:	1d33      	adds	r3, r6, #4
 80061ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061b0:	6838      	ldr	r0, [r7, #0]
 80061b2:	f002 ff5b 	bl	800906c <USB_DevInit>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e014      	b.n	80061f2 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 fa63 	bl	80076ac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 ff14 	bl	800b018 <USB_DevDisconnect>

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080061fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_PCD_Start+0x16>
 800620c:	2302      	movs	r3, #2
 800620e:	e012      	b.n	8006236 <HAL_PCD_Start+0x3c>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4618      	mov	r0, r3
 800621e:	f002 fee6 	bl	8008fee <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f004 fedf 	bl	800afea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4618      	mov	r0, r3
 800624c:	f004 fef9 	bl	800b042 <USB_ReadInterrupts>
 8006250:	4603      	mov	r3, r0
 8006252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800625a:	d102      	bne.n	8006262 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fb5b 	bl	8006918 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f004 feeb 	bl	800b042 <USB_ReadInterrupts>
 800626c:	4603      	mov	r3, r0
 800626e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d112      	bne.n	800629e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628a:	b292      	uxth	r2, r2
 800628c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f006 fe32 	bl	800cefa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006296:	2100      	movs	r1, #0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f91e 	bl	80064da <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f004 fecd 	bl	800b042 <USB_ReadInterrupts>
 80062a8:	4603      	mov	r3, r0
 80062aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b2:	d10b      	bne.n	80062cc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062bc:	b29a      	uxth	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062c6:	b292      	uxth	r2, r2
 80062c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f004 feb6 	bl	800b042 <USB_ReadInterrupts>
 80062d6:	4603      	mov	r3, r0
 80062d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062e0:	d10b      	bne.n	80062fa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062ea:	b29a      	uxth	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062f4:	b292      	uxth	r2, r2
 80062f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f004 fe9f 	bl	800b042 <USB_ReadInterrupts>
 8006304:	4603      	mov	r3, r0
 8006306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630e:	d133      	bne.n	8006378 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0204 	bic.w	r2, r2, #4
 8006322:	b292      	uxth	r2, r2
 8006324:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0208 	bic.w	r2, r2, #8
 800633a:	b292      	uxth	r2, r2
 800633c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006346:	2b01      	cmp	r3, #1
 8006348:	d107      	bne.n	800635a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006352:	2100      	movs	r1, #0
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f007 f881 	bl	800d45c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f006 fe06 	bl	800cf6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006368:	b29a      	uxth	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006372:	b292      	uxth	r2, r2
 8006374:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f004 fe60 	bl	800b042 <USB_ReadInterrupts>
 8006382:	4603      	mov	r3, r0
 8006384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006388:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800638c:	d126      	bne.n	80063dc <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0208 	orr.w	r2, r2, #8
 80063a0:	b292      	uxth	r2, r2
 80063a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063b8:	b292      	uxth	r2, r2
 80063ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0204 	orr.w	r2, r2, #4
 80063d0:	b292      	uxth	r2, r2
 80063d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f006 fdae 	bl	800cf38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f004 fe2e 	bl	800b042 <USB_ReadInterrupts>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ec:	2b80      	cmp	r3, #128	; 0x80
 80063ee:	d13f      	bne.n	8006470 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006402:	b292      	uxth	r2, r2
 8006404:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d12b      	bne.n	800646a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f042 0204 	orr.w	r2, r2, #4
 8006424:	b292      	uxth	r2, r2
 8006426:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006432:	b29a      	uxth	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0208 	orr.w	r2, r2, #8
 800643c:	b292      	uxth	r2, r2
 800643e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006452:	b29b      	uxth	r3, r3
 8006454:	089b      	lsrs	r3, r3, #2
 8006456:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006460:	2101      	movs	r1, #1
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f006 fffa 	bl	800d45c <HAL_PCDEx_LPM_Callback>
 8006468:	e002      	b.n	8006470 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f006 fd64 	bl	800cf38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4618      	mov	r0, r3
 8006476:	f004 fde4 	bl	800b042 <USB_ReadInterrupts>
 800647a:	4603      	mov	r3, r0
 800647c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d10e      	bne.n	80064a4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800648e:	b29a      	uxth	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006498:	b292      	uxth	r2, r2
 800649a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f006 fd1d 	bl	800cede <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f004 fdca 	bl	800b042 <USB_ReadInterrupts>
 80064ae:	4603      	mov	r3, r0
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d10b      	bne.n	80064d2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064cc:	b292      	uxth	r2, r2
 80064ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80064d2:	bf00      	nop
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	460b      	mov	r3, r1
 80064e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <HAL_PCD_SetAddress+0x1a>
 80064f0:	2302      	movs	r3, #2
 80064f2:	e013      	b.n	800651c <HAL_PCD_SetAddress+0x42>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	78fa      	ldrb	r2, [r7, #3]
 8006500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	78fa      	ldrb	r2, [r7, #3]
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f004 fd58 	bl	800afc2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	4608      	mov	r0, r1
 800652e:	4611      	mov	r1, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4603      	mov	r3, r0
 8006534:	70fb      	strb	r3, [r7, #3]
 8006536:	460b      	mov	r3, r1
 8006538:	803b      	strh	r3, [r7, #0]
 800653a:	4613      	mov	r3, r2
 800653c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006542:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da0e      	bge.n	8006568 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	4413      	add	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	705a      	strb	r2, [r3, #1]
 8006566:	e00e      	b.n	8006586 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 0207 	and.w	r2, r3, #7
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	b2da      	uxtb	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006592:	883a      	ldrh	r2, [r7, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	78ba      	ldrb	r2, [r7, #2]
 800659c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065b0:	78bb      	ldrb	r3, [r7, #2]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d102      	bne.n	80065bc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_PCD_EP_Open+0xa6>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e00e      	b.n	80065e8 <HAL_PCD_EP_Open+0xc4>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68f9      	ldr	r1, [r7, #12]
 80065d8:	4618      	mov	r0, r3
 80065da:	f002 fd69 	bl	80090b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80065e6:	7afb      	ldrb	r3, [r7, #11]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006600:	2b00      	cmp	r3, #0
 8006602:	da0e      	bge.n	8006622 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	705a      	strb	r2, [r3, #1]
 8006620:	e00e      	b.n	8006640 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	f003 0207 	and.w	r2, r3, #7
 8006628:	4613      	mov	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	4413      	add	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_PCD_EP_Close+0x6a>
 8006656:	2302      	movs	r3, #2
 8006658:	e00e      	b.n	8006678 <HAL_PCD_EP_Close+0x88>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68f9      	ldr	r1, [r7, #12]
 8006668:	4618      	mov	r0, r3
 800666a:	f003 f88f 	bl	800978c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	607a      	str	r2, [r7, #4]
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	460b      	mov	r3, r1
 800668e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006690:	7afb      	ldrb	r3, [r7, #11]
 8006692:	f003 0207 	and.w	r2, r3, #7
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2200      	movs	r2, #0
 80066b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c0:	7afb      	ldrb	r3, [r7, #11]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066cc:	7afb      	ldrb	r3, [r7, #11]
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d106      	bne.n	80066e4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6979      	ldr	r1, [r7, #20]
 80066dc:	4618      	mov	r0, r3
 80066de:	f003 fa42 	bl	8009b66 <USB_EPStartXfer>
 80066e2:	e005      	b.n	80066f0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6979      	ldr	r1, [r7, #20]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f003 fa3b 	bl	8009b66 <USB_EPStartXfer>
  }

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	460b      	mov	r3, r1
 8006704:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 0207 	and.w	r2, r3, #7
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	440b      	add	r3, r1
 8006718:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800671c:	681b      	ldr	r3, [r3, #0]
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
 8006736:	460b      	mov	r3, r1
 8006738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800673a:	7afb      	ldrb	r3, [r7, #11]
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	4613      	mov	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4413      	add	r3, r2
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2201      	movs	r2, #1
 8006774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006776:	7afb      	ldrb	r3, [r7, #11]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	b2da      	uxtb	r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6979      	ldr	r1, [r7, #20]
 8006792:	4618      	mov	r0, r3
 8006794:	f003 f9e7 	bl	8009b66 <USB_EPStartXfer>
 8006798:	e005      	b.n	80067a6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	6979      	ldr	r1, [r7, #20]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f003 f9e0 	bl	8009b66 <USB_EPStartXfer>
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067bc:	78fb      	ldrb	r3, [r7, #3]
 80067be:	f003 0207 	and.w	r2, r3, #7
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d901      	bls.n	80067ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e04c      	b.n	8006868 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da0e      	bge.n	80067f4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	4613      	mov	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4413      	add	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	705a      	strb	r2, [r3, #1]
 80067f2:	e00c      	b.n	800680e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	4613      	mov	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2201      	movs	r2, #1
 8006812:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	b2da      	uxtb	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006826:	2b01      	cmp	r3, #1
 8006828:	d101      	bne.n	800682e <HAL_PCD_EP_SetStall+0x7e>
 800682a:	2302      	movs	r3, #2
 800682c:	e01c      	b.n	8006868 <HAL_PCD_EP_SetStall+0xb8>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	4618      	mov	r0, r3
 800683e:	f004 fac1 	bl	800adc4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006842:	78fb      	ldrb	r3, [r7, #3]
 8006844:	f003 0307 	and.w	r3, r3, #7
 8006848:	2b00      	cmp	r3, #0
 800684a:	d108      	bne.n	800685e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f004 fc02 	bl	800b062 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	460b      	mov	r3, r1
 800687a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	429a      	cmp	r2, r3
 8006888:	d901      	bls.n	800688e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e040      	b.n	8006910 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800688e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006892:	2b00      	cmp	r3, #0
 8006894:	da0e      	bge.n	80068b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006896:	78fb      	ldrb	r3, [r7, #3]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	705a      	strb	r2, [r3, #1]
 80068b2:	e00e      	b.n	80068d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068b4:	78fb      	ldrb	r3, [r7, #3]
 80068b6:	f003 0207 	and.w	r2, r3, #7
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	f003 0307 	and.w	r3, r3, #7
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d101      	bne.n	80068f2 <HAL_PCD_EP_ClrStall+0x82>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e00e      	b.n	8006910 <HAL_PCD_EP_ClrStall+0xa0>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	4618      	mov	r0, r3
 8006902:	f004 fab0 	bl	800ae66 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08e      	sub	sp, #56	; 0x38
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006920:	e2d1      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800692a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800692c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800692e:	b2db      	uxtb	r3, r3
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006938:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8152 	bne.w	8006be6 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d150      	bne.n	80069ee <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	881b      	ldrh	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	89fb      	ldrh	r3, [r7, #14]
 8006964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3328      	adds	r3, #40	; 0x28
 8006974:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800697e:	b29b      	uxth	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	00db      	lsls	r3, r3, #3
 8006988:	4413      	add	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	4413      	add	r3, r2
 8006990:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800699e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	441a      	add	r2, r3
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80069ac:	2100      	movs	r1, #0
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f006 fa7b 	bl	800ceaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8282 	beq.w	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f040 827d 	bne.w	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	b292      	uxth	r2, r2
 80069e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069ec:	e26b      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80069fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d032      	beq.n	8006a6e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	461a      	mov	r2, r3
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f004 fb5a 	bl	800b0fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a54:	4013      	ands	r3, r2
 8006a56:	823b      	strh	r3, [r7, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	8a3a      	ldrh	r2, [r7, #16]
 8006a5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a62:	b292      	uxth	r2, r2
 8006a64:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f006 f9f2 	bl	800ce50 <HAL_PCD_SetupStageCallback>
 8006a6c:	e22b      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a6e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f280 8227 	bge.w	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a84:	4013      	ands	r3, r2
 8006a86:	83bb      	strh	r3, [r7, #28]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	8bba      	ldrh	r2, [r7, #28]
 8006a8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a92:	b292      	uxth	r2, r2
 8006a94:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	00db      	lsls	r3, r3, #3
 8006aa8:	4413      	add	r3, r2
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d019      	beq.n	8006afa <PCD_EP_ISR_Handler+0x1e2>
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d015      	beq.n	8006afa <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	6959      	ldr	r1, [r3, #20]
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f004 fb0c 	bl	800b0fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	695a      	ldr	r2, [r3, #20]
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	441a      	add	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006af2:	2100      	movs	r1, #0
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f006 f9bd 	bl	800ce74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	4413      	add	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d112      	bne.n	8006b48 <PCD_EP_ISR_Handler+0x230>
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	801a      	strh	r2, [r3, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	801a      	strh	r2, [r3, #0]
 8006b46:	e02f      	b.n	8006ba8 <PCD_EP_ISR_Handler+0x290>
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b4e:	d813      	bhi.n	8006b78 <PCD_EP_ISR_Handler+0x260>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	085b      	lsrs	r3, r3, #1
 8006b56:	633b      	str	r3, [r7, #48]	; 0x30
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <PCD_EP_ISR_Handler+0x252>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	3301      	adds	r3, #1
 8006b68:	633b      	str	r3, [r7, #48]	; 0x30
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	029b      	lsls	r3, r3, #10
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	e017      	b.n	8006ba8 <PCD_EP_ISR_Handler+0x290>
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <PCD_EP_ISR_Handler+0x27a>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	633b      	str	r3, [r7, #48]	; 0x30
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	029b      	lsls	r3, r3, #10
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb8:	827b      	strh	r3, [r7, #18]
 8006bba:	8a7b      	ldrh	r3, [r7, #18]
 8006bbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006bc0:	827b      	strh	r3, [r7, #18]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bc8:	827b      	strh	r3, [r7, #18]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	8a7b      	ldrh	r3, [r7, #18]
 8006bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]
 8006be4:	e16f      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bf8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f280 80e4 	bge.w	8006dca <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c18:	4013      	ands	r3, r2
 8006c1a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c30:	b292      	uxth	r2, r2
 8006c32:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006c34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	7b1b      	ldrb	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d120      	bne.n	8006c94 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	00db      	lsls	r3, r3, #3
 8006c64:	4413      	add	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c76:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006c78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 8083 	beq.w	8006d86 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	6959      	ldr	r1, [r3, #20]
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	88da      	ldrh	r2, [r3, #6]
 8006c8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c8e:	f004 fa35 	bl	800b0fc <USB_ReadPMA>
 8006c92:	e078      	b.n	8006d86 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d108      	bne.n	8006cae <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f91d 	bl	8006ee2 <HAL_PCD_EP_DB_Receive>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006cac:	e06b      	b.n	8006d86 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	847b      	strh	r3, [r7, #34]	; 0x22
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01f      	beq.n	8006d48 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	6812      	ldr	r2, [r2, #0]
 8006d20:	4413      	add	r3, r2
 8006d22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d2c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006d2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d028      	beq.n	8006d86 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	6959      	ldr	r1, [r3, #20]
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	891a      	ldrh	r2, [r3, #8]
 8006d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d42:	f004 f9db 	bl	800b0fc <USB_ReadPMA>
 8006d46:	e01e      	b.n	8006d86 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	4413      	add	r3, r2
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d66:	881b      	ldrh	r3, [r3, #0]
 8006d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d6c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8006d6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7a:	6959      	ldr	r1, [r3, #20]
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	895a      	ldrh	r2, [r3, #10]
 8006d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d82:	f004 f9bb 	bl	800b0fc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d8c:	441a      	add	r2, r3
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006d98:	441a      	add	r2, r3
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <PCD_EP_ISR_Handler+0x498>
 8006da6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d206      	bcs.n	8006dbe <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f006 f85c 	bl	800ce74 <HAL_PCD_DataOutStageCallback>
 8006dbc:	e005      	b.n	8006dca <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f002 fece 	bl	8009b66 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d078      	beq.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	881b      	ldrh	r3, [r3, #0]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e02:	843b      	strh	r3, [r7, #32]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	441a      	add	r2, r3
 8006e12:	8c3b      	ldrh	r3, [r7, #32]
 8006e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	78db      	ldrb	r3, [r3, #3]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d108      	bne.n	8006e3a <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d144      	bne.n	8006eba <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006e30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d13f      	bne.n	8006eba <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	4413      	add	r3, r2
 8006e54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	699a      	ldr	r2, [r3, #24]
 8006e64:	8bfb      	ldrh	r3, [r7, #30]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d906      	bls.n	8006e78 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	619a      	str	r2, [r3, #24]
 8006e76:	e002      	b.n	8006e7e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d106      	bne.n	8006e94 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f006 f80c 	bl	800ceaa <HAL_PCD_DataInStageCallback>
 8006e92:	e018      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	695a      	ldr	r2, [r3, #20]
 8006e98:	8bfb      	ldrh	r3, [r7, #30]
 8006e9a:	441a      	add	r2, r3
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	69da      	ldr	r2, [r3, #28]
 8006ea4:	8bfb      	ldrh	r3, [r7, #30]
 8006ea6:	441a      	add	r2, r3
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eaa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f002 fe57 	bl	8009b66 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006eb8:	e005      	b.n	8006ec6 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f917 	bl	80070f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	b21b      	sxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f6ff ad25 	blt.w	8006922 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3738      	adds	r7, #56	; 0x38
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b088      	sub	sp, #32
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	4613      	mov	r3, r2
 8006eee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ef0:	88fb      	ldrh	r3, [r7, #6]
 8006ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d07c      	beq.n	8006ff4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	00db      	lsls	r3, r3, #3
 8006f0c:	4413      	add	r3, r2
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	4413      	add	r3, r2
 8006f14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	8b7b      	ldrh	r3, [r7, #26]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d306      	bcc.n	8006f38 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	8b7b      	ldrh	r3, [r7, #26]
 8006f30:	1ad2      	subs	r2, r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	619a      	str	r2, [r3, #24]
 8006f36:	e002      	b.n	8006f3e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d123      	bne.n	8006f8e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	833b      	strh	r3, [r7, #24]
 8006f62:	8b3b      	ldrh	r3, [r7, #24]
 8006f64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006f68:	833b      	strh	r3, [r7, #24]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	441a      	add	r2, r3
 8006f78:	8b3b      	ldrh	r3, [r7, #24]
 8006f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01f      	beq.n	8006fd8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	82fb      	strh	r3, [r7, #22]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	8afb      	ldrh	r3, [r7, #22]
 8006fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006fd8:	8b7b      	ldrh	r3, [r7, #26]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8085 	beq.w	80070ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	6959      	ldr	r1, [r3, #20]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	891a      	ldrh	r2, [r3, #8]
 8006fec:	8b7b      	ldrh	r3, [r7, #26]
 8006fee:	f004 f885 	bl	800b0fc <USB_ReadPMA>
 8006ff2:	e07a      	b.n	80070ea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	4413      	add	r3, r2
 800700e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007018:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	699a      	ldr	r2, [r3, #24]
 800701e:	8b7b      	ldrh	r3, [r7, #26]
 8007020:	429a      	cmp	r2, r3
 8007022:	d306      	bcc.n	8007032 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	699a      	ldr	r2, [r3, #24]
 8007028:	8b7b      	ldrh	r3, [r7, #26]
 800702a:	1ad2      	subs	r2, r2, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	619a      	str	r2, [r3, #24]
 8007030:	e002      	b.n	8007038 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d123      	bne.n	8007088 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	4413      	add	r3, r2
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	b29b      	uxth	r3, r3
 8007052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	83fb      	strh	r3, [r7, #30]
 800705c:	8bfb      	ldrh	r3, [r7, #30]
 800705e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007062:	83fb      	strh	r3, [r7, #30]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	441a      	add	r2, r3
 8007072:	8bfb      	ldrh	r3, [r7, #30]
 8007074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007084:	b29b      	uxth	r3, r3
 8007086:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007088:	88fb      	ldrh	r3, [r7, #6]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d11f      	bne.n	80070d2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	4413      	add	r3, r2
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ac:	83bb      	strh	r3, [r7, #28]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	441a      	add	r2, r3
 80070bc:	8bbb      	ldrh	r3, [r7, #28]
 80070be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80070d2:	8b7b      	ldrh	r3, [r7, #26]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6959      	ldr	r1, [r3, #20]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	895a      	ldrh	r2, [r3, #10]
 80070e4:	8b7b      	ldrh	r3, [r7, #26]
 80070e6:	f004 f809 	bl	800b0fc <USB_ReadPMA>
    }
  }

  return count;
 80070ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3720      	adds	r7, #32
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b092      	sub	sp, #72	; 0x48
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8130 	beq.w	800736e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	4413      	add	r3, r2
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	4413      	add	r3, r2
 8007128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007132:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	699a      	ldr	r2, [r3, #24]
 8007138:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800713a:	429a      	cmp	r2, r3
 800713c:	d906      	bls.n	800714c <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007144:	1ad2      	subs	r2, r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	619a      	str	r2, [r3, #24]
 800714a:	e002      	b.n	8007152 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d12c      	bne.n	80071b4 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f005 fea2 	bl	800ceaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 822d 	beq.w	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	881b      	ldrh	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718c:	827b      	strh	r3, [r7, #18]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	8a7b      	ldrh	r3, [r7, #18]
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]
 80071b2:	e20b      	b.n	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071b4:	88fb      	ldrh	r3, [r7, #6]
 80071b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01f      	beq.n	80071fe <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	441a      	add	r2, r3
 80071e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007204:	2b01      	cmp	r3, #1
 8007206:	f040 81e1 	bne.w	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007210:	441a      	add	r2, r3
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	69da      	ldr	r2, [r3, #28]
 800721a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800721c:	441a      	add	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	6a1a      	ldr	r2, [r3, #32]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d309      	bcc.n	8007242 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	6a1a      	ldr	r2, [r3, #32]
 8007238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800723a:	1ad2      	subs	r2, r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	621a      	str	r2, [r3, #32]
 8007240:	e014      	b.n	800726c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800724a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007256:	e009      	b.n	800726c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d155      	bne.n	8007320 <HAL_PCD_EP_DB_Transmit+0x22c>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007282:	b29b      	uxth	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	4413      	add	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	00da      	lsls	r2, r3, #3
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	4413      	add	r3, r2
 8007296:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800729a:	617b      	str	r3, [r7, #20]
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d112      	bne.n	80072c8 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	881b      	ldrh	r3, [r3, #0]
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	801a      	strh	r2, [r3, #0]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	801a      	strh	r2, [r3, #0]
 80072c6:	e047      	b.n	8007358 <HAL_PCD_EP_DB_Transmit+0x264>
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	2b3e      	cmp	r3, #62	; 0x3e
 80072cc:	d811      	bhi.n	80072f2 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80072ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d0:	085b      	lsrs	r3, r3, #1
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80072de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e0:	3301      	adds	r3, #1
 80072e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e032      	b.n	8007358 <HAL_PCD_EP_DB_Transmit+0x264>
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f003 031f 	and.w	r3, r3, #31
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d102      	bne.n	8007308 <HAL_PCD_EP_DB_Transmit+0x214>
 8007302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007304:	3b01      	subs	r3, #1
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
 8007308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730a:	b29b      	uxth	r3, r3
 800730c:	029b      	lsls	r3, r3, #10
 800730e:	b29b      	uxth	r3, r3
 8007310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007318:	b29a      	uxth	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	801a      	strh	r2, [r3, #0]
 800731e:	e01b      	b.n	8007358 <HAL_PCD_EP_DB_Transmit+0x264>
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	785b      	ldrb	r3, [r3, #1]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d117      	bne.n	8007358 <HAL_PCD_EP_DB_Transmit+0x264>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007336:	b29b      	uxth	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	4413      	add	r3, r2
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	00da      	lsls	r2, r3, #3
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	4413      	add	r3, r2
 800734a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	b29a      	uxth	r2, r3
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	891a      	ldrh	r2, [r3, #8]
 8007364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007366:	b29b      	uxth	r3, r3
 8007368:	f003 fe87 	bl	800b07a <USB_WritePMA>
 800736c:	e12e      	b.n	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	4413      	add	r3, r2
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	6812      	ldr	r2, [r2, #0]
 8007386:	4413      	add	r3, r2
 8007388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007392:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800739a:	429a      	cmp	r2, r3
 800739c:	d306      	bcc.n	80073ac <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80073a4:	1ad2      	subs	r2, r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	619a      	str	r2, [r3, #24]
 80073aa:	e002      	b.n	80073b2 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d12c      	bne.n	8007414 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	4619      	mov	r1, r3
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f005 fd72 	bl	800ceaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 80fd 	bne.w	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007406:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800740a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]
 8007412:	e0db      	b.n	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d11f      	bne.n	800745e <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29b      	uxth	r3, r3
 8007430:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007434:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007438:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	441a      	add	r2, r3
 8007448:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800744a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800744e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800745a:	b29b      	uxth	r3, r3
 800745c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007464:	2b01      	cmp	r3, #1
 8007466:	f040 80b1 	bne.w	80075cc <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	695a      	ldr	r2, [r3, #20]
 800746e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007470:	441a      	add	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800747c:	441a      	add	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6a1a      	ldr	r2, [r3, #32]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	429a      	cmp	r2, r3
 800748c:	d309      	bcc.n	80074a2 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	1ad2      	subs	r2, r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	621a      	str	r2, [r3, #32]
 80074a0:	e014      	b.n	80074cc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d106      	bne.n	80074b8 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80074aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80074ac:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074b6:	e009      	b.n	80074cc <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2200      	movs	r2, #0
 80074c2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	785b      	ldrb	r3, [r3, #1]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d155      	bne.n	8007586 <HAL_PCD_EP_DB_Transmit+0x492>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	647b      	str	r3, [r7, #68]	; 0x44
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074ee:	4413      	add	r3, r2
 80074f0:	647b      	str	r3, [r7, #68]	; 0x44
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074fa:	4413      	add	r3, r2
 80074fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007500:	643b      	str	r3, [r7, #64]	; 0x40
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	2b00      	cmp	r3, #0
 8007506:	d112      	bne.n	800752e <HAL_PCD_EP_DB_Transmit+0x43a>
 8007508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007512:	b29a      	uxth	r2, r3
 8007514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	b29b      	uxth	r3, r3
 800751e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007522:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007526:	b29a      	uxth	r2, r3
 8007528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752a:	801a      	strh	r2, [r3, #0]
 800752c:	e044      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	2b3e      	cmp	r3, #62	; 0x3e
 8007532:	d811      	bhi.n	8007558 <HAL_PCD_EP_DB_Transmit+0x464>
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	085b      	lsrs	r3, r3, #1
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <HAL_PCD_EP_DB_Transmit+0x456>
 8007544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007546:	3301      	adds	r3, #1
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800754a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800754c:	b29b      	uxth	r3, r3
 800754e:	029b      	lsls	r3, r3, #10
 8007550:	b29a      	uxth	r2, r3
 8007552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007554:	801a      	strh	r2, [r3, #0]
 8007556:	e02f      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	2b00      	cmp	r3, #0
 8007566:	d102      	bne.n	800756e <HAL_PCD_EP_DB_Transmit+0x47a>
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	3b01      	subs	r3, #1
 800756c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	b29b      	uxth	r3, r3
 8007572:	029b      	lsls	r3, r3, #10
 8007574:	b29b      	uxth	r3, r3
 8007576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757e:	b29a      	uxth	r2, r3
 8007580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	e018      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	785b      	ldrb	r3, [r3, #1]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d114      	bne.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	4413      	add	r3, r2
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	00da      	lsls	r2, r3, #3
 80075a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ae:	633b      	str	r3, [r7, #48]	; 0x30
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	6959      	ldr	r1, [r3, #20]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	895a      	ldrh	r2, [r3, #10]
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f003 fd57 	bl	800b07a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	b29b      	uxth	r3, r3
 80075de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075e6:	823b      	strh	r3, [r7, #16]
 80075e8:	8a3b      	ldrh	r3, [r7, #16]
 80075ea:	f083 0310 	eor.w	r3, r3, #16
 80075ee:	823b      	strh	r3, [r7, #16]
 80075f0:	8a3b      	ldrh	r3, [r7, #16]
 80075f2:	f083 0320 	eor.w	r3, r3, #32
 80075f6:	823b      	strh	r3, [r7, #16]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	461a      	mov	r2, r3
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	441a      	add	r2, r3
 8007606:	8a3b      	ldrh	r3, [r7, #16]
 8007608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800760c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007618:	b29b      	uxth	r3, r3
 800761a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3748      	adds	r7, #72	; 0x48
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8007626:	b480      	push	{r7}
 8007628:	b087      	sub	sp, #28
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
 800762e:	607b      	str	r3, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	817b      	strh	r3, [r7, #10]
 8007634:	4613      	mov	r3, r2
 8007636:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007638:	897b      	ldrh	r3, [r7, #10]
 800763a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007644:	897b      	ldrh	r3, [r7, #10]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	1c5a      	adds	r2, r3, #1
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	00db      	lsls	r3, r3, #3
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	e009      	b.n	8007670 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800765c:	897a      	ldrh	r2, [r7, #10]
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	00db      	lsls	r3, r3, #3
 8007666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4413      	add	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007670:	893b      	ldrh	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d107      	bne.n	8007686 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	b29a      	uxth	r2, r3
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	80da      	strh	r2, [r3, #6]
 8007684:	e00b      	b.n	800769e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2201      	movs	r2, #1
 800768a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	b29a      	uxth	r2, r3
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	b29a      	uxth	r2, r3
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f043 0302 	orr.w	r3, r3, #2
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <HAL_PWREx_GetVoltageRange+0x18>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800770c:	4618      	mov	r0, r3
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40007000 	.word	0x40007000

0800771c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772a:	d130      	bne.n	800778e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800772c:	4b23      	ldr	r3, [pc, #140]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007738:	d038      	beq.n	80077ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007742:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007744:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007748:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800774a:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2232      	movs	r2, #50	; 0x32
 8007750:	fb02 f303 	mul.w	r3, r2, r3
 8007754:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	0c9b      	lsrs	r3, r3, #18
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007760:	e002      	b.n	8007768 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	3b01      	subs	r3, #1
 8007766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007768:	4b14      	ldr	r3, [pc, #80]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007774:	d102      	bne.n	800777c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1f2      	bne.n	8007762 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800777c:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007788:	d110      	bne.n	80077ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e00f      	b.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800778e:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779a:	d007      	beq.n	80077ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80077a4:	4a05      	ldr	r2, [pc, #20]	; (80077bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	40007000 	.word	0x40007000
 80077c0:	20000000 	.word	0x20000000
 80077c4:	431bde83 	.word	0x431bde83

080077c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80077c8:	b480      	push	{r7}
 80077ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80077cc:	4b05      	ldr	r3, [pc, #20]	; (80077e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	4a04      	ldr	r2, [pc, #16]	; (80077e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80077d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077d6:	6053      	str	r3, [r2, #4]
}
 80077d8:	bf00      	nop
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40007000 	.word	0x40007000

080077e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d102      	bne.n	80077fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	f000 bc56 	b.w	80080a8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077fc:	4ba1      	ldr	r3, [pc, #644]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 030c 	and.w	r3, r3, #12
 8007804:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007806:	4b9f      	ldr	r3, [pc, #636]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80e6 	beq.w	80079ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d007      	beq.n	8007834 <HAL_RCC_OscConfig+0x4c>
 8007824:	6a3b      	ldr	r3, [r7, #32]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	f040 808d 	bne.w	8007946 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	2b01      	cmp	r3, #1
 8007830:	f040 8089 	bne.w	8007946 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007834:	4b93      	ldr	r3, [pc, #588]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <HAL_RCC_OscConfig+0x66>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	69db      	ldr	r3, [r3, #28]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	f000 bc2d 	b.w	80080a8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007852:	4b8c      	ldr	r3, [pc, #560]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0308 	and.w	r3, r3, #8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d004      	beq.n	8007868 <HAL_RCC_OscConfig+0x80>
 800785e:	4b89      	ldr	r3, [pc, #548]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007866:	e005      	b.n	8007874 <HAL_RCC_OscConfig+0x8c>
 8007868:	4b86      	ldr	r3, [pc, #536]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 800786a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800786e:	091b      	lsrs	r3, r3, #4
 8007870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007874:	4293      	cmp	r3, r2
 8007876:	d224      	bcs.n	80078c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fd91 	bl	80083a4 <RCC_SetFlashLatencyFromMSIRange>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f000 bc0d 	b.w	80080a8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800788e:	4b7d      	ldr	r3, [pc, #500]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a7c      	ldr	r2, [pc, #496]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007894:	f043 0308 	orr.w	r3, r3, #8
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	4b7a      	ldr	r3, [pc, #488]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	4977      	ldr	r1, [pc, #476]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078ac:	4b75      	ldr	r3, [pc, #468]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	021b      	lsls	r3, r3, #8
 80078ba:	4972      	ldr	r1, [pc, #456]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	604b      	str	r3, [r1, #4]
 80078c0:	e025      	b.n	800790e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80078c2:	4b70      	ldr	r3, [pc, #448]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a6f      	ldr	r2, [pc, #444]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078c8:	f043 0308 	orr.w	r3, r3, #8
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	4b6d      	ldr	r3, [pc, #436]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	496a      	ldr	r1, [pc, #424]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80078e0:	4b68      	ldr	r3, [pc, #416]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	4965      	ldr	r1, [pc, #404]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fd50 	bl	80083a4 <RCC_SetFlashLatencyFromMSIRange>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e3cc      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800790e:	f000 fcb3 	bl	8008278 <HAL_RCC_GetSysClockFreq>
 8007912:	4601      	mov	r1, r0
 8007914:	4b5b      	ldr	r3, [pc, #364]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	091b      	lsrs	r3, r3, #4
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	4a5a      	ldr	r2, [pc, #360]	; (8007a88 <HAL_RCC_OscConfig+0x2a0>)
 8007920:	5cd3      	ldrb	r3, [r2, r3]
 8007922:	f003 031f 	and.w	r3, r3, #31
 8007926:	fa21 f303 	lsr.w	r3, r1, r3
 800792a:	4a58      	ldr	r2, [pc, #352]	; (8007a8c <HAL_RCC_OscConfig+0x2a4>)
 800792c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800792e:	4b58      	ldr	r3, [pc, #352]	; (8007a90 <HAL_RCC_OscConfig+0x2a8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd fb2c 	bl	8004f90 <HAL_InitTick>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d052      	beq.n	80079e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	e3b0      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	69db      	ldr	r3, [r3, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d032      	beq.n	80079b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800794e:	4b4d      	ldr	r3, [pc, #308]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a4c      	ldr	r2, [pc, #304]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800795a:	f7fd fb69 	bl	8005030 <HAL_GetTick>
 800795e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007960:	e008      	b.n	8007974 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007962:	f7fd fb65 	bl	8005030 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d901      	bls.n	8007974 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e399      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007974:	4b43      	ldr	r3, [pc, #268]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0f0      	beq.n	8007962 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007980:	4b40      	ldr	r3, [pc, #256]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a3f      	ldr	r2, [pc, #252]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007986:	f043 0308 	orr.w	r3, r3, #8
 800798a:	6013      	str	r3, [r2, #0]
 800798c:	4b3d      	ldr	r3, [pc, #244]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	493a      	ldr	r1, [pc, #232]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 800799a:	4313      	orrs	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800799e:	4b39      	ldr	r3, [pc, #228]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	4935      	ldr	r1, [pc, #212]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	604b      	str	r3, [r1, #4]
 80079b2:	e01a      	b.n	80079ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80079b4:	4b33      	ldr	r3, [pc, #204]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a32      	ldr	r2, [pc, #200]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80079ba:	f023 0301 	bic.w	r3, r3, #1
 80079be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80079c0:	f7fd fb36 	bl	8005030 <HAL_GetTick>
 80079c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079c8:	f7fd fb32 	bl	8005030 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e366      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80079da:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1f0      	bne.n	80079c8 <HAL_RCC_OscConfig+0x1e0>
 80079e6:	e000      	b.n	80079ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d073      	beq.n	8007ade <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	2b08      	cmp	r3, #8
 80079fa:	d005      	beq.n	8007a08 <HAL_RCC_OscConfig+0x220>
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	2b0c      	cmp	r3, #12
 8007a00:	d10e      	bne.n	8007a20 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b03      	cmp	r3, #3
 8007a06:	d10b      	bne.n	8007a20 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a08:	4b1e      	ldr	r3, [pc, #120]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d063      	beq.n	8007adc <HAL_RCC_OscConfig+0x2f4>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d15f      	bne.n	8007adc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e343      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a28:	d106      	bne.n	8007a38 <HAL_RCC_OscConfig+0x250>
 8007a2a:	4b16      	ldr	r3, [pc, #88]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e01d      	b.n	8007a74 <HAL_RCC_OscConfig+0x28c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a40:	d10c      	bne.n	8007a5c <HAL_RCC_OscConfig+0x274>
 8007a42:	4b10      	ldr	r3, [pc, #64]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a0f      	ldr	r2, [pc, #60]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	4b0d      	ldr	r3, [pc, #52]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a0c      	ldr	r2, [pc, #48]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e00b      	b.n	8007a74 <HAL_RCC_OscConfig+0x28c>
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a05      	ldr	r2, [pc, #20]	; (8007a84 <HAL_RCC_OscConfig+0x29c>)
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01b      	beq.n	8007ab4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7c:	f7fd fad8 	bl	8005030 <HAL_GetTick>
 8007a80:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a82:	e010      	b.n	8007aa6 <HAL_RCC_OscConfig+0x2be>
 8007a84:	40021000 	.word	0x40021000
 8007a88:	0800d864 	.word	0x0800d864
 8007a8c:	20000000 	.word	0x20000000
 8007a90:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a94:	f7fd facc 	bl	8005030 <HAL_GetTick>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	2b64      	cmp	r3, #100	; 0x64
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e300      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aa6:	4ba0      	ldr	r3, [pc, #640]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0f0      	beq.n	8007a94 <HAL_RCC_OscConfig+0x2ac>
 8007ab2:	e014      	b.n	8007ade <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab4:	f7fd fabc 	bl	8005030 <HAL_GetTick>
 8007ab8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007abc:	f7fd fab8 	bl	8005030 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b64      	cmp	r3, #100	; 0x64
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e2ec      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ace:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0x2d4>
 8007ada:	e000      	b.n	8007ade <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d060      	beq.n	8007bac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	2b04      	cmp	r3, #4
 8007aee:	d005      	beq.n	8007afc <HAL_RCC_OscConfig+0x314>
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	2b0c      	cmp	r3, #12
 8007af4:	d119      	bne.n	8007b2a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d116      	bne.n	8007b2a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007afc:	4b8a      	ldr	r3, [pc, #552]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_OscConfig+0x32c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e2c9      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b14:	4b84      	ldr	r3, [pc, #528]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	061b      	lsls	r3, r3, #24
 8007b22:	4981      	ldr	r1, [pc, #516]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b28:	e040      	b.n	8007bac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d023      	beq.n	8007b7a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b32:	4b7d      	ldr	r3, [pc, #500]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a7c      	ldr	r2, [pc, #496]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3e:	f7fd fa77 	bl	8005030 <HAL_GetTick>
 8007b42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b46:	f7fd fa73 	bl	8005030 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e2a7      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b58:	4b73      	ldr	r3, [pc, #460]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b64:	4b70      	ldr	r3, [pc, #448]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	496d      	ldr	r1, [pc, #436]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b74:	4313      	orrs	r3, r2
 8007b76:	604b      	str	r3, [r1, #4]
 8007b78:	e018      	b.n	8007bac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b7a:	4b6b      	ldr	r3, [pc, #428]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a6a      	ldr	r2, [pc, #424]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b86:	f7fd fa53 	bl	8005030 <HAL_GetTick>
 8007b8a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b8e:	f7fd fa4f 	bl	8005030 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e283      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007ba0:	4b61      	ldr	r3, [pc, #388]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1f0      	bne.n	8007b8e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d07f      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d05f      	beq.n	8007c80 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007bc0:	4b59      	ldr	r3, [pc, #356]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bc6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d037      	beq.n	8007c46 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e25c      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01b      	beq.n	8007c30 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8007bf8:	4b4b      	ldr	r3, [pc, #300]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bfe:	4a4a      	ldr	r2, [pc, #296]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c08:	f7fd fa12 	bl	8005030 <HAL_GetTick>
 8007c0c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c0e:	e008      	b.n	8007c22 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c10:	f7fd fa0e 	bl	8005030 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b11      	cmp	r3, #17
 8007c1c:	d901      	bls.n	8007c22 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e242      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c22:	4b41      	ldr	r3, [pc, #260]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1ef      	bne.n	8007c10 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8007c30:	4b3d      	ldr	r3, [pc, #244]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	f023 0210 	bic.w	r2, r3, #16
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	493a      	ldr	r1, [pc, #232]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c46:	4b38      	ldr	r3, [pc, #224]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c4c:	4a36      	ldr	r2, [pc, #216]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c56:	f7fd f9eb 	bl	8005030 <HAL_GetTick>
 8007c5a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5e:	f7fd f9e7 	bl	8005030 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b11      	cmp	r3, #17
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e21b      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c70:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d0ef      	beq.n	8007c5e <HAL_RCC_OscConfig+0x476>
 8007c7e:	e01b      	b.n	8007cb8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c80:	4b29      	ldr	r3, [pc, #164]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c86:	4a28      	ldr	r2, [pc, #160]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007c88:	f023 0301 	bic.w	r3, r3, #1
 8007c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c90:	f7fd f9ce 	bl	8005030 <HAL_GetTick>
 8007c94:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c98:	f7fd f9ca 	bl	8005030 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b11      	cmp	r3, #17
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e1fe      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007caa:	4b1f      	ldr	r3, [pc, #124]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1ef      	bne.n	8007c98 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f003 0304 	and.w	r3, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f000 80c1 	beq.w	8007e48 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007ccc:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10e      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cd8:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cdc:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ce4:	4b10      	ldr	r3, [pc, #64]	; (8007d28 <HAL_RCC_OscConfig+0x540>)
 8007ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf6:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <HAL_RCC_OscConfig+0x544>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d11c      	bne.n	8007d3c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <HAL_RCC_OscConfig+0x544>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a09      	ldr	r2, [pc, #36]	; (8007d2c <HAL_RCC_OscConfig+0x544>)
 8007d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d0e:	f7fd f98f 	bl	8005030 <HAL_GetTick>
 8007d12:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d14:	e00c      	b.n	8007d30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d16:	f7fd f98b 	bl	8005030 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d905      	bls.n	8007d30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e1bf      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
 8007d28:	40021000 	.word	0x40021000
 8007d2c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d30:	4bb1      	ldr	r3, [pc, #708]	; (8007ff8 <HAL_RCC_OscConfig+0x810>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d0ec      	beq.n	8007d16 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02c      	beq.n	8007da2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8007d48:	4bac      	ldr	r3, [pc, #688]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5a:	49a8      	ldr	r1, [pc, #672]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d010      	beq.n	8007d90 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007d6e:	4ba3      	ldr	r3, [pc, #652]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d74:	4aa1      	ldr	r2, [pc, #644]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d76:	f043 0304 	orr.w	r3, r3, #4
 8007d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007d7e:	4b9f      	ldr	r3, [pc, #636]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d84:	4a9d      	ldr	r2, [pc, #628]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d8e:	e018      	b.n	8007dc2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007d90:	4b9a      	ldr	r3, [pc, #616]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	4a99      	ldr	r2, [pc, #612]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007d98:	f043 0301 	orr.w	r3, r3, #1
 8007d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007da0:	e00f      	b.n	8007dc2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007da2:	4b96      	ldr	r3, [pc, #600]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da8:	4a94      	ldr	r2, [pc, #592]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007db2:	4b92      	ldr	r3, [pc, #584]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db8:	4a90      	ldr	r2, [pc, #576]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007dba:	f023 0304 	bic.w	r3, r3, #4
 8007dbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d016      	beq.n	8007df8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dca:	f7fd f931 	bl	8005030 <HAL_GetTick>
 8007dce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dd0:	e00a      	b.n	8007de8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd2:	f7fd f92d 	bl	8005030 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e15f      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de8:	4b84      	ldr	r3, [pc, #528]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ed      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x5ea>
 8007df6:	e01d      	b.n	8007e34 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df8:	f7fd f91a 	bl	8005030 <HAL_GetTick>
 8007dfc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dfe:	e00a      	b.n	8007e16 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e00:	f7fd f916 	bl	8005030 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e148      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e16:	4b79      	ldr	r3, [pc, #484]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ed      	bne.n	8007e00 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8007e24:	4b75      	ldr	r3, [pc, #468]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e2a:	4a74      	ldr	r2, [pc, #464]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d105      	bne.n	8007e48 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e3c:	4b6f      	ldr	r3, [pc, #444]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e40:	4a6e      	ldr	r2, [pc, #440]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d03c      	beq.n	8007ece <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01c      	beq.n	8007e96 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e5c:	4b67      	ldr	r3, [pc, #412]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e62:	4a66      	ldr	r2, [pc, #408]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e6c:	f7fd f8e0 	bl	8005030 <HAL_GetTick>
 8007e70:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e72:	e008      	b.n	8007e86 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e74:	f7fd f8dc 	bl	8005030 <HAL_GetTick>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	1ad3      	subs	r3, r2, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d901      	bls.n	8007e86 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e110      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e86:	4b5d      	ldr	r3, [pc, #372]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0ef      	beq.n	8007e74 <HAL_RCC_OscConfig+0x68c>
 8007e94:	e01b      	b.n	8007ece <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e96:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e9c:	4a57      	ldr	r2, [pc, #348]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007e9e:	f023 0301 	bic.w	r3, r3, #1
 8007ea2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea6:	f7fd f8c3 	bl	8005030 <HAL_GetTick>
 8007eaa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007eac:	e008      	b.n	8007ec0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007eae:	f7fd f8bf 	bl	8005030 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e0f3      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ec0:	4b4e      	ldr	r3, [pc, #312]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007ec2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ef      	bne.n	8007eae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80e7 	beq.w	80080a6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	f040 80b7 	bne.w	8008050 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ee2:	4b46      	ldr	r3, [pc, #280]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f003 0203 	and.w	r2, r3, #3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d124      	bne.n	8007f40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	3b01      	subs	r3, #1
 8007f02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d11b      	bne.n	8007f40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d113      	bne.n	8007f40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	3b01      	subs	r3, #1
 8007f26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d109      	bne.n	8007f40 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d061      	beq.n	8008004 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	2b0c      	cmp	r3, #12
 8007f44:	d056      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f46:	4b2d      	ldr	r3, [pc, #180]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a2c      	ldr	r2, [pc, #176]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007f4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f52:	f7fd f86d 	bl	8005030 <HAL_GetTick>
 8007f56:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f5a:	f7fd f869 	bl	8005030 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e09d      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f6c:	4b23      	ldr	r3, [pc, #140]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f0      	bne.n	8007f5a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f78:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_RCC_OscConfig+0x818>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f88:	3a01      	subs	r2, #1
 8007f8a:	0112      	lsls	r2, r2, #4
 8007f8c:	4311      	orrs	r1, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f92:	0212      	lsls	r2, r2, #8
 8007f94:	4311      	orrs	r1, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f9a:	0852      	lsrs	r2, r2, #1
 8007f9c:	3a01      	subs	r2, #1
 8007f9e:	0552      	lsls	r2, r2, #21
 8007fa0:	4311      	orrs	r1, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fa6:	0852      	lsrs	r2, r2, #1
 8007fa8:	3a01      	subs	r2, #1
 8007faa:	0652      	lsls	r2, r2, #25
 8007fac:	430a      	orrs	r2, r1
 8007fae:	4913      	ldr	r1, [pc, #76]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007fb4:	4b11      	ldr	r3, [pc, #68]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a10      	ldr	r2, [pc, #64]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fc0:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fcc:	f7fd f830 	bl	8005030 <HAL_GetTick>
 8007fd0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fd f82c 	bl	8005030 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e060      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <HAL_RCC_OscConfig+0x814>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ff2:	e058      	b.n	80080a6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e057      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
 8007ff8:	40007000 	.word	0x40007000
 8007ffc:	40021000 	.word	0x40021000
 8008000:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008004:	4b2a      	ldr	r3, [pc, #168]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d14a      	bne.n	80080a6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800801a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800801c:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008028:	f7fd f802 	bl	8005030 <HAL_GetTick>
 800802c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008030:	f7fc fffe 	bl	8005030 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e032      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008042:	4b1b      	ldr	r3, [pc, #108]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x848>
 800804e:	e02a      	b.n	80080a6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2b0c      	cmp	r3, #12
 8008054:	d025      	beq.n	80080a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 800805c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008060:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008062:	4b13      	ldr	r3, [pc, #76]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4a12      	ldr	r2, [pc, #72]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008068:	f023 0303 	bic.w	r3, r3, #3
 800806c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800806e:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	4a0f      	ldr	r2, [pc, #60]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008074:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008078:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807a:	f7fc ffd9 	bl	8005030 <HAL_GetTick>
 800807e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008082:	f7fc ffd5 	bl	8005030 <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e009      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008094:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <HAL_RCC_OscConfig+0x8c8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1f0      	bne.n	8008082 <HAL_RCC_OscConfig+0x89a>
 80080a0:	e001      	b.n	80080a6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e000      	b.n	80080a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3728      	adds	r7, #40	; 0x28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40021000 	.word	0x40021000

080080b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0c8      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080c8:	4b66      	ldr	r3, [pc, #408]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0307 	and.w	r3, r3, #7
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d910      	bls.n	80080f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080d6:	4b63      	ldr	r3, [pc, #396]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f023 0207 	bic.w	r2, r3, #7
 80080de:	4961      	ldr	r1, [pc, #388]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e6:	4b5f      	ldr	r3, [pc, #380]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d001      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0b0      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	2b00      	cmp	r3, #0
 8008102:	d04c      	beq.n	800819e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b03      	cmp	r3, #3
 800810a:	d107      	bne.n	800811c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800810c:	4b56      	ldr	r3, [pc, #344]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d121      	bne.n	800815c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e09e      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b02      	cmp	r3, #2
 8008122:	d107      	bne.n	8008134 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008124:	4b50      	ldr	r3, [pc, #320]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d115      	bne.n	800815c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e092      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d107      	bne.n	800814c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800813c:	4b4a      	ldr	r3, [pc, #296]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0302 	and.w	r3, r3, #2
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e086      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800814c:	4b46      	ldr	r3, [pc, #280]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008154:	2b00      	cmp	r3, #0
 8008156:	d101      	bne.n	800815c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e07e      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800815c:	4b42      	ldr	r3, [pc, #264]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f023 0203 	bic.w	r2, r3, #3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	493f      	ldr	r1, [pc, #252]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800816a:	4313      	orrs	r3, r2
 800816c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816e:	f7fc ff5f 	bl	8005030 <HAL_GetTick>
 8008172:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008174:	e00a      	b.n	800818c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008176:	f7fc ff5b 	bl	8005030 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f241 3288 	movw	r2, #5000	; 0x1388
 8008184:	4293      	cmp	r3, r2
 8008186:	d901      	bls.n	800818c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e066      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800818c:	4b36      	ldr	r3, [pc, #216]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 020c 	and.w	r2, r3, #12
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	429a      	cmp	r2, r3
 800819c:	d1eb      	bne.n	8008176 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081aa:	4b2f      	ldr	r3, [pc, #188]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	492c      	ldr	r1, [pc, #176]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081bc:	4b29      	ldr	r3, [pc, #164]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 0307 	and.w	r3, r3, #7
 80081c4:	683a      	ldr	r2, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d210      	bcs.n	80081ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ca:	4b26      	ldr	r3, [pc, #152]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f023 0207 	bic.w	r2, r3, #7
 80081d2:	4924      	ldr	r1, [pc, #144]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081da:	4b22      	ldr	r3, [pc, #136]	; (8008264 <HAL_RCC_ClockConfig+0x1b0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d001      	beq.n	80081ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e036      	b.n	800825a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0304 	and.w	r3, r3, #4
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d008      	beq.n	800820a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	4918      	ldr	r1, [pc, #96]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 8008206:	4313      	orrs	r3, r2
 8008208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008216:	4b14      	ldr	r3, [pc, #80]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	4910      	ldr	r1, [pc, #64]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800822a:	f000 f825 	bl	8008278 <HAL_RCC_GetSysClockFreq>
 800822e:	4601      	mov	r1, r0
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <HAL_RCC_ClockConfig+0x1b4>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	091b      	lsrs	r3, r3, #4
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	4a0c      	ldr	r2, [pc, #48]	; (800826c <HAL_RCC_ClockConfig+0x1b8>)
 800823c:	5cd3      	ldrb	r3, [r2, r3]
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	fa21 f303 	lsr.w	r3, r1, r3
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <HAL_RCC_ClockConfig+0x1bc>)
 8008248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <HAL_RCC_ClockConfig+0x1c0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f7fc fe9e 	bl	8004f90 <HAL_InitTick>
 8008254:	4603      	mov	r3, r0
 8008256:	72fb      	strb	r3, [r7, #11]

  return status;
 8008258:	7afb      	ldrb	r3, [r7, #11]
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	40022000 	.word	0x40022000
 8008268:	40021000 	.word	0x40021000
 800826c:	0800d864 	.word	0x0800d864
 8008270:	20000000 	.word	0x20000000
 8008274:	20000004 	.word	0x20000004

08008278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
 8008282:	2300      	movs	r3, #0
 8008284:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008286:	4b3d      	ldr	r3, [pc, #244]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f003 030c 	and.w	r3, r3, #12
 800828e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008290:	4b3a      	ldr	r3, [pc, #232]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <HAL_RCC_GetSysClockFreq+0x34>
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b0c      	cmp	r3, #12
 80082a4:	d121      	bne.n	80082ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d11e      	bne.n	80082ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80082ac:	4b33      	ldr	r3, [pc, #204]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d107      	bne.n	80082c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80082b8:	4b30      	ldr	r3, [pc, #192]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 80082ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	f003 030f 	and.w	r3, r3, #15
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	e005      	b.n	80082d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80082c8:	4b2c      	ldr	r3, [pc, #176]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80082d4:	4a2a      	ldr	r2, [pc, #168]	; (8008380 <HAL_RCC_GetSysClockFreq+0x108>)
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10d      	bne.n	8008300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082e8:	e00a      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d102      	bne.n	80082f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082f0:	4b24      	ldr	r3, [pc, #144]	; (8008384 <HAL_RCC_GetSysClockFreq+0x10c>)
 80082f2:	61bb      	str	r3, [r7, #24]
 80082f4:	e004      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b08      	cmp	r3, #8
 80082fa:	d101      	bne.n	8008300 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082fc:	4b22      	ldr	r3, [pc, #136]	; (8008388 <HAL_RCC_GetSysClockFreq+0x110>)
 80082fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	2b0c      	cmp	r3, #12
 8008304:	d133      	bne.n	800836e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008306:	4b1d      	ldr	r3, [pc, #116]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b02      	cmp	r3, #2
 8008314:	d002      	beq.n	800831c <HAL_RCC_GetSysClockFreq+0xa4>
 8008316:	2b03      	cmp	r3, #3
 8008318:	d003      	beq.n	8008322 <HAL_RCC_GetSysClockFreq+0xaa>
 800831a:	e005      	b.n	8008328 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800831c:	4b19      	ldr	r3, [pc, #100]	; (8008384 <HAL_RCC_GetSysClockFreq+0x10c>)
 800831e:	617b      	str	r3, [r7, #20]
      break;
 8008320:	e005      	b.n	800832e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <HAL_RCC_GetSysClockFreq+0x110>)
 8008324:	617b      	str	r3, [r7, #20]
      break;
 8008326:	e002      	b.n	800832e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	617b      	str	r3, [r7, #20]
      break;
 800832c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800832e:	4b13      	ldr	r3, [pc, #76]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	091b      	lsrs	r3, r3, #4
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	3301      	adds	r3, #1
 800833a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800833c:	4b0f      	ldr	r3, [pc, #60]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	fb02 f203 	mul.w	r2, r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008352:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_RCC_GetSysClockFreq+0x104>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	0e5b      	lsrs	r3, r3, #25
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	3301      	adds	r3, #1
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	fbb2 f3f3 	udiv	r3, r2, r3
 800836c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800836e:	69bb      	ldr	r3, [r7, #24]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3724      	adds	r7, #36	; 0x24
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	40021000 	.word	0x40021000
 8008380:	0800d874 	.word	0x0800d874
 8008384:	00f42400 	.word	0x00f42400
 8008388:	007a1200 	.word	0x007a1200

0800838c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800838c:	b480      	push	{r7}
 800838e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008390:	4b03      	ldr	r3, [pc, #12]	; (80083a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	20000000 	.word	0x20000000

080083a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083b0:	4b2a      	ldr	r3, [pc, #168]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d003      	beq.n	80083c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083bc:	f7ff f9a0 	bl	8007700 <HAL_PWREx_GetVoltageRange>
 80083c0:	6178      	str	r0, [r7, #20]
 80083c2:	e014      	b.n	80083ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083c4:	4b25      	ldr	r3, [pc, #148]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083c8:	4a24      	ldr	r2, [pc, #144]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ce:	6593      	str	r3, [r2, #88]	; 0x58
 80083d0:	4b22      	ldr	r3, [pc, #136]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80083dc:	f7ff f990 	bl	8007700 <HAL_PWREx_GetVoltageRange>
 80083e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e6:	4a1d      	ldr	r2, [pc, #116]	; (800845c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f4:	d10b      	bne.n	800840e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2b80      	cmp	r3, #128	; 0x80
 80083fa:	d919      	bls.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2ba0      	cmp	r3, #160	; 0xa0
 8008400:	d902      	bls.n	8008408 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008402:	2302      	movs	r3, #2
 8008404:	613b      	str	r3, [r7, #16]
 8008406:	e013      	b.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008408:	2301      	movs	r3, #1
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	e010      	b.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2b80      	cmp	r3, #128	; 0x80
 8008412:	d902      	bls.n	800841a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008414:	2303      	movs	r3, #3
 8008416:	613b      	str	r3, [r7, #16]
 8008418:	e00a      	b.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b80      	cmp	r3, #128	; 0x80
 800841e:	d102      	bne.n	8008426 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008420:	2302      	movs	r3, #2
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	e004      	b.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b70      	cmp	r3, #112	; 0x70
 800842a:	d101      	bne.n	8008430 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800842c:	2301      	movs	r3, #1
 800842e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008430:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f023 0207 	bic.w	r2, r3, #7
 8008438:	4909      	ldr	r1, [pc, #36]	; (8008460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0307 	and.w	r3, r3, #7
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	429a      	cmp	r2, r3
 800844c:	d001      	beq.n	8008452 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40021000 	.word	0x40021000
 8008460:	40022000 	.word	0x40022000

08008464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800846c:	2300      	movs	r3, #0
 800846e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008470:	2300      	movs	r3, #0
 8008472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	f000 809e 	beq.w	80085be <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008482:	2300      	movs	r3, #0
 8008484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008486:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008496:	2300      	movs	r3, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00d      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800849c:	4b40      	ldr	r3, [pc, #256]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800849e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a0:	4a3f      	ldr	r2, [pc, #252]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a6:	6593      	str	r3, [r2, #88]	; 0x58
 80084a8:	4b3d      	ldr	r3, [pc, #244]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084b4:	2301      	movs	r3, #1
 80084b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084b8:	4b3a      	ldr	r3, [pc, #232]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a39      	ldr	r2, [pc, #228]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80084be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80084c4:	f7fc fdb4 	bl	8005030 <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084ca:	e009      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084cc:	f7fc fdb0 	bl	8005030 <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d902      	bls.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	74fb      	strb	r3, [r7, #19]
        break;
 80084de:	e005      	b.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80084e0:	4b30      	ldr	r3, [pc, #192]	; (80085a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d0ef      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80084ec:	7cfb      	ldrb	r3, [r7, #19]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d15a      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80084f2:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80084f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01e      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	429a      	cmp	r2, r3
 800850c:	d019      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800850e:	4b24      	ldr	r3, [pc, #144]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008518:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800851a:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008520:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800852c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008530:	4a1b      	ldr	r2, [pc, #108]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800853a:	4a19      	ldr	r2, [pc, #100]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d016      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fc fd70 	bl	8005030 <HAL_GetTick>
 8008550:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008552:	e00b      	b.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008554:	f7fc fd6c 	bl	8005030 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008562:	4293      	cmp	r3, r2
 8008564:	d902      	bls.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	74fb      	strb	r3, [r7, #19]
            break;
 800856a:	e006      	b.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0ec      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800857a:	7cfb      	ldrb	r3, [r7, #19]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d10b      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008580:	4b07      	ldr	r3, [pc, #28]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858e:	4904      	ldr	r1, [pc, #16]	; (80085a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008596:	e009      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	74bb      	strb	r3, [r7, #18]
 800859c:	e006      	b.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x148>
 800859e:	bf00      	nop
 80085a0:	40021000 	.word	0x40021000
 80085a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a8:	7cfb      	ldrb	r3, [r7, #19]
 80085aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085ac:	7c7b      	ldrb	r3, [r7, #17]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d105      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085b2:	4b6e      	ldr	r3, [pc, #440]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	4a6d      	ldr	r2, [pc, #436]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00a      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085ca:	4b68      	ldr	r3, [pc, #416]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d0:	f023 0203 	bic.w	r2, r3, #3
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	4964      	ldr	r1, [pc, #400]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00a      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085ec:	4b5f      	ldr	r3, [pc, #380]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f2:	f023 020c 	bic.w	r2, r3, #12
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	495c      	ldr	r1, [pc, #368]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80085fc:	4313      	orrs	r3, r2
 80085fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00a      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800860e:	4b57      	ldr	r3, [pc, #348]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	4953      	ldr	r1, [pc, #332]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800861e:	4313      	orrs	r3, r2
 8008620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0320 	and.w	r3, r3, #32
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008630:	4b4e      	ldr	r3, [pc, #312]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	494b      	ldr	r1, [pc, #300]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008640:	4313      	orrs	r3, r2
 8008642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008652:	4b46      	ldr	r3, [pc, #280]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	4942      	ldr	r1, [pc, #264]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008674:	4b3d      	ldr	r3, [pc, #244]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	493a      	ldr	r1, [pc, #232]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008696:	4b35      	ldr	r3, [pc, #212]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	695b      	ldr	r3, [r3, #20]
 80086a4:	4931      	ldr	r1, [pc, #196]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80086b8:	4b2c      	ldr	r3, [pc, #176]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	4929      	ldr	r1, [pc, #164]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086da:	4b24      	ldr	r3, [pc, #144]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	4920      	ldr	r1, [pc, #128]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d015      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086fc:	4b1b      	ldr	r3, [pc, #108]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	4918      	ldr	r1, [pc, #96]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800870c:	4313      	orrs	r3, r2
 800870e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800871a:	d105      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800871c:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	4a12      	ldr	r2, [pc, #72]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008726:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d015      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008742:	490a      	ldr	r1, [pc, #40]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008744:	4313      	orrs	r3, r2
 8008746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008752:	d105      	bne.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008754:	4b05      	ldr	r3, [pc, #20]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	4a04      	ldr	r2, [pc, #16]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800875a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800875e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008760:	7cbb      	ldrb	r3, [r7, #18]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40021000 	.word	0x40021000

08008770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e049      	b.n	8008816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7f8 fbe2 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f000 fa8a 	bl	8008cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b01      	cmp	r3, #1
 8008832:	d001      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e03b      	b.n	80088b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0201 	orr.w	r2, r2, #1
 800884e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a19      	ldr	r2, [pc, #100]	; (80088bc <HAL_TIM_Base_Start_IT+0x9c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x4e>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008862:	d004      	beq.n	800886e <HAL_TIM_Base_Start_IT+0x4e>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d115      	bne.n	800889a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	4b13      	ldr	r3, [pc, #76]	; (80088c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008876:	4013      	ands	r3, r2
 8008878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b06      	cmp	r3, #6
 800887e:	d015      	beq.n	80088ac <HAL_TIM_Base_Start_IT+0x8c>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008886:	d011      	beq.n	80088ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f042 0201 	orr.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008898:	e008      	b.n	80088ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f042 0201 	orr.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	e000      	b.n	80088ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40014000 	.word	0x40014000
 80088c4:	00010007 	.word	0x00010007

080088c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b02      	cmp	r3, #2
 80088dc:	d122      	bne.n	8008924 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d11b      	bne.n	8008924 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0202 	mvn.w	r2, #2
 80088f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f9be 	bl	8008c8c <HAL_TIM_IC_CaptureCallback>
 8008910:	e005      	b.n	800891e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f9b0 	bl	8008c78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f9c1 	bl	8008ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	2b04      	cmp	r3, #4
 8008930:	d122      	bne.n	8008978 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b04      	cmp	r3, #4
 800893e:	d11b      	bne.n	8008978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f06f 0204 	mvn.w	r2, #4
 8008948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f994 	bl	8008c8c <HAL_TIM_IC_CaptureCallback>
 8008964:	e005      	b.n	8008972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f986 	bl	8008c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 f997 	bl	8008ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b08      	cmp	r3, #8
 8008984:	d122      	bne.n	80089cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b08      	cmp	r3, #8
 8008992:	d11b      	bne.n	80089cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0208 	mvn.w	r2, #8
 800899c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2204      	movs	r2, #4
 80089a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f96a 	bl	8008c8c <HAL_TIM_IC_CaptureCallback>
 80089b8:	e005      	b.n	80089c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f95c 	bl	8008c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f96d 	bl	8008ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b10      	cmp	r3, #16
 80089d8:	d122      	bne.n	8008a20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b10      	cmp	r3, #16
 80089e6:	d11b      	bne.n	8008a20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0210 	mvn.w	r2, #16
 80089f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2208      	movs	r2, #8
 80089f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f940 	bl	8008c8c <HAL_TIM_IC_CaptureCallback>
 8008a0c:	e005      	b.n	8008a1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f932 	bl	8008c78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 f943 	bl	8008ca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d10e      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	68db      	ldr	r3, [r3, #12]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d107      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f06f 0201 	mvn.w	r2, #1
 8008a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7f8 f89a 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b80      	cmp	r3, #128	; 0x80
 8008a58:	d10e      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a64:	2b80      	cmp	r3, #128	; 0x80
 8008a66:	d107      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fa96 	bl	8008fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a86:	d10e      	bne.n	8008aa6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68db      	ldr	r3, [r3, #12]
 8008a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a92:	2b80      	cmp	r3, #128	; 0x80
 8008a94:	d107      	bne.n	8008aa6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa89 	bl	8008fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab0:	2b40      	cmp	r3, #64	; 0x40
 8008ab2:	d10e      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abe:	2b40      	cmp	r3, #64	; 0x40
 8008ac0:	d107      	bne.n	8008ad2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 f8f1 	bl	8008cb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	d10e      	bne.n	8008afe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68db      	ldr	r3, [r3, #12]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d107      	bne.n	8008afe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f06f 0220 	mvn.w	r2, #32
 8008af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fa49 	bl	8008f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b084      	sub	sp, #16
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_TIM_ConfigClockSource+0x18>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e0a8      	b.n	8008c70 <HAL_TIM_ConfigClockSource+0x16a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008b40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b48:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2b40      	cmp	r3, #64	; 0x40
 8008b58:	d067      	beq.n	8008c2a <HAL_TIM_ConfigClockSource+0x124>
 8008b5a:	2b40      	cmp	r3, #64	; 0x40
 8008b5c:	d80b      	bhi.n	8008b76 <HAL_TIM_ConfigClockSource+0x70>
 8008b5e:	2b10      	cmp	r3, #16
 8008b60:	d073      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x144>
 8008b62:	2b10      	cmp	r3, #16
 8008b64:	d802      	bhi.n	8008b6c <HAL_TIM_ConfigClockSource+0x66>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d06f      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b6a:	e078      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008b6c:	2b20      	cmp	r3, #32
 8008b6e:	d06c      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x144>
 8008b70:	2b30      	cmp	r3, #48	; 0x30
 8008b72:	d06a      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008b74:	e073      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008b76:	2b70      	cmp	r3, #112	; 0x70
 8008b78:	d00d      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0x90>
 8008b7a:	2b70      	cmp	r3, #112	; 0x70
 8008b7c:	d804      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x82>
 8008b7e:	2b50      	cmp	r3, #80	; 0x50
 8008b80:	d033      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0xe4>
 8008b82:	2b60      	cmp	r3, #96	; 0x60
 8008b84:	d041      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008b86:	e06a      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8c:	d066      	beq.n	8008c5c <HAL_TIM_ConfigClockSource+0x156>
 8008b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b92:	d017      	beq.n	8008bc4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008b94:	e063      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	6899      	ldr	r1, [r3, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f000 f96d 	bl	8008e84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	609a      	str	r2, [r3, #8]
      break;
 8008bc2:	e04c      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	6899      	ldr	r1, [r3, #8]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f000 f956 	bl	8008e84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008be6:	609a      	str	r2, [r3, #8]
      break;
 8008be8:	e039      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6859      	ldr	r1, [r3, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f000 f8ca 	bl	8008d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2150      	movs	r1, #80	; 0x50
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f923 	bl	8008e4e <TIM_ITRx_SetConfig>
      break;
 8008c08:	e029      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f000 f8e9 	bl	8008dee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2160      	movs	r1, #96	; 0x60
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 f913 	bl	8008e4e <TIM_ITRx_SetConfig>
      break;
 8008c28:	e019      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 f8aa 	bl	8008d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2140      	movs	r1, #64	; 0x40
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 f903 	bl	8008e4e <TIM_ITRx_SetConfig>
      break;
 8008c48:	e009      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f000 f8fa 	bl	8008e4e <TIM_ITRx_SetConfig>
        break;
 8008c5a:	e000      	b.n	8008c5e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8008c5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a2a      	ldr	r2, [pc, #168]	; (8008d84 <TIM_Base_SetConfig+0xbc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d003      	beq.n	8008ce8 <TIM_Base_SetConfig+0x20>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce6:	d108      	bne.n	8008cfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a21      	ldr	r2, [pc, #132]	; (8008d84 <TIM_Base_SetConfig+0xbc>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00b      	beq.n	8008d1a <TIM_Base_SetConfig+0x52>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d08:	d007      	beq.n	8008d1a <TIM_Base_SetConfig+0x52>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a1e      	ldr	r2, [pc, #120]	; (8008d88 <TIM_Base_SetConfig+0xc0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d003      	beq.n	8008d1a <TIM_Base_SetConfig+0x52>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <TIM_Base_SetConfig+0xc4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d108      	bne.n	8008d2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a0c      	ldr	r2, [pc, #48]	; (8008d84 <TIM_Base_SetConfig+0xbc>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d007      	beq.n	8008d68 <TIM_Base_SetConfig+0xa0>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a0b      	ldr	r2, [pc, #44]	; (8008d88 <TIM_Base_SetConfig+0xc0>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d003      	beq.n	8008d68 <TIM_Base_SetConfig+0xa0>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a0a      	ldr	r2, [pc, #40]	; (8008d8c <TIM_Base_SetConfig+0xc4>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d103      	bne.n	8008d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	691a      	ldr	r2, [r3, #16]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	615a      	str	r2, [r3, #20]
}
 8008d76:	bf00      	nop
 8008d78:	3714      	adds	r7, #20
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40012c00 	.word	0x40012c00
 8008d88:	40014000 	.word	0x40014000
 8008d8c:	40014400 	.word	0x40014400

08008d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	6a1b      	ldr	r3, [r3, #32]
 8008da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	f023 0201 	bic.w	r2, r3, #1
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	011b      	lsls	r3, r3, #4
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 030a 	bic.w	r3, r3, #10
 8008dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	621a      	str	r2, [r3, #32]
}
 8008de2:	bf00      	nop
 8008de4:	371c      	adds	r7, #28
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b087      	sub	sp, #28
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	60b9      	str	r1, [r7, #8]
 8008df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f023 0210 	bic.w	r2, r3, #16
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	031b      	lsls	r3, r3, #12
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
 8008e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	f043 0307 	orr.w	r3, r3, #7
 8008e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	609a      	str	r2, [r3, #8]
}
 8008e78:	bf00      	nop
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	021a      	lsls	r2, r3, #8
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	609a      	str	r2, [r3, #8]
}
 8008eb8:	bf00      	nop
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d101      	bne.n	8008edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e04f      	b.n	8008f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d108      	bne.n	8008f18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a14      	ldr	r2, [pc, #80]	; (8008f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d009      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f44:	d004      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a10      	ldr	r2, [pc, #64]	; (8008f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d10c      	bne.n	8008f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	40012c00 	.word	0x40012c00
 8008f8c:	40014000 	.word	0x40014000

08008f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008fcc:	b084      	sub	sp, #16
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	f107 0014 	add.w	r0, r7, #20
 8008fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	b004      	add	sp, #16
 8008fec:	4770      	bx	lr

08008fee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b085      	sub	sp, #20
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ffe:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009002:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	b29a      	uxth	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009024:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009028:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009030:	b29a      	uxth	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	b29b      	uxth	r3, r3
 8009036:	43db      	mvns	r3, r3
 8009038:	b29b      	uxth	r3, r3
 800903a:	4013      	ands	r3, r2
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	4618      	mov	r0, r3
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800906c:	b084      	sub	sp, #16
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	f107 0014 	add.w	r0, r7, #20
 800907a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	b004      	add	sp, #16
 80090ac:	4770      	bx	lr
	...

080090b0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b09b      	sub	sp, #108	; 0x6c
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80090d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d81f      	bhi.n	8009122 <USB_ActivateEndpoint+0x72>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <USB_ActivateEndpoint+0x38>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	080090f9 	.word	0x080090f9
 80090ec:	08009115 	.word	0x08009115
 80090f0:	0800912b 	.word	0x0800912b
 80090f4:	08009107 	.word	0x08009107
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80090f8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80090fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009100:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009104:	e012      	b.n	800912c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009106:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800910a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800910e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009112:	e00b      	b.n	800912c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009114:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800911c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009120:	e004      	b.n	800912c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8009128:	e000      	b.n	800912c <USB_ActivateEndpoint+0x7c>
      break;
 800912a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	441a      	add	r2, r3
 8009136:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800913a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800913e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914a:	b29b      	uxth	r3, r3
 800914c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	b21b      	sxth	r3, r3
 800915e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	b21a      	sxth	r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	b21b      	sxth	r3, r3
 800916e:	4313      	orrs	r3, r2
 8009170:	b21b      	sxth	r3, r3
 8009172:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	441a      	add	r2, r3
 8009180:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800918c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009194:	b29b      	uxth	r3, r3
 8009196:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	7b1b      	ldrb	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f040 8149 	bne.w	8009434 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8084 	beq.w	80092b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	617b      	str	r3, [r7, #20]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	461a      	mov	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	4413      	add	r3, r2
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	00da      	lsls	r2, r3, #3
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	88db      	ldrh	r3, [r3, #6]
 80091d4:	085b      	lsrs	r3, r3, #1
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	81fb      	strh	r3, [r7, #14]
 80091ee:	89fb      	ldrh	r3, [r7, #14]
 80091f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d01b      	beq.n	8009230 <USB_ActivateEndpoint+0x180>
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	b29b      	uxth	r3, r3
 8009206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800920e:	81bb      	strh	r3, [r7, #12]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	441a      	add	r2, r3
 800921a:	89bb      	ldrh	r3, [r7, #12]
 800921c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800922c:	b29b      	uxth	r3, r3
 800922e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	78db      	ldrb	r3, [r3, #3]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d020      	beq.n	800927a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	b29b      	uxth	r3, r3
 8009246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800924a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800924e:	813b      	strh	r3, [r7, #8]
 8009250:	893b      	ldrh	r3, [r7, #8]
 8009252:	f083 0320 	eor.w	r3, r3, #32
 8009256:	813b      	strh	r3, [r7, #8]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	441a      	add	r2, r3
 8009262:	893b      	ldrh	r3, [r7, #8]
 8009264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800926c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009274:	b29b      	uxth	r3, r3
 8009276:	8013      	strh	r3, [r2, #0]
 8009278:	e27f      	b.n	800977a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	881b      	ldrh	r3, [r3, #0]
 8009286:	b29b      	uxth	r3, r3
 8009288:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009290:	817b      	strh	r3, [r7, #10]
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	441a      	add	r2, r3
 800929c:	897b      	ldrh	r3, [r7, #10]
 800929e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	8013      	strh	r3, [r2, #0]
 80092b2:	e262      	b.n	800977a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092be:	b29b      	uxth	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	4413      	add	r3, r2
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	00da      	lsls	r2, r3, #3
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	4413      	add	r3, r2
 80092d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	b29b      	uxth	r3, r3
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	627b      	str	r3, [r7, #36]	; 0x24
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	4413      	add	r3, r2
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	00da      	lsls	r2, r3, #3
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	4413      	add	r3, r2
 8009306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800930a:	623b      	str	r3, [r7, #32]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d112      	bne.n	800933a <USB_ActivateEndpoint+0x28a>
 8009314:	6a3b      	ldr	r3, [r7, #32]
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800931e:	b29a      	uxth	r2, r3
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	801a      	strh	r2, [r3, #0]
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009332:	b29a      	uxth	r2, r3
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	801a      	strh	r2, [r3, #0]
 8009338:	e02f      	b.n	800939a <USB_ActivateEndpoint+0x2ea>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	2b3e      	cmp	r3, #62	; 0x3e
 8009340:	d813      	bhi.n	800936a <USB_ActivateEndpoint+0x2ba>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	663b      	str	r3, [r7, #96]	; 0x60
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	691b      	ldr	r3, [r3, #16]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d002      	beq.n	800935c <USB_ActivateEndpoint+0x2ac>
 8009356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009358:	3301      	adds	r3, #1
 800935a:	663b      	str	r3, [r7, #96]	; 0x60
 800935c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29a      	uxth	r2, r3
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	801a      	strh	r2, [r3, #0]
 8009368:	e017      	b.n	800939a <USB_ActivateEndpoint+0x2ea>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	095b      	lsrs	r3, r3, #5
 8009370:	663b      	str	r3, [r7, #96]	; 0x60
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 031f 	and.w	r3, r3, #31
 800937a:	2b00      	cmp	r3, #0
 800937c:	d102      	bne.n	8009384 <USB_ActivateEndpoint+0x2d4>
 800937e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009380:	3b01      	subs	r3, #1
 8009382:	663b      	str	r3, [r7, #96]	; 0x60
 8009384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009386:	b29b      	uxth	r3, r3
 8009388:	029b      	lsls	r3, r3, #10
 800938a:	b29b      	uxth	r3, r3
 800938c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009394:	b29a      	uxth	r2, r3
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	83fb      	strh	r3, [r7, #30]
 80093a8:	8bfb      	ldrh	r3, [r7, #30]
 80093aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01b      	beq.n	80093ea <USB_ActivateEndpoint+0x33a>
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c8:	83bb      	strh	r3, [r7, #28]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	441a      	add	r2, r3
 80093d4:	8bbb      	ldrh	r3, [r7, #28]
 80093d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009400:	837b      	strh	r3, [r7, #26]
 8009402:	8b7b      	ldrh	r3, [r7, #26]
 8009404:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009408:	837b      	strh	r3, [r7, #26]
 800940a:	8b7b      	ldrh	r3, [r7, #26]
 800940c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009410:	837b      	strh	r3, [r7, #26]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	441a      	add	r2, r3
 800941c:	8b7b      	ldrh	r3, [r7, #26]
 800941e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009422:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800942a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800942e:	b29b      	uxth	r3, r3
 8009430:	8013      	strh	r3, [r2, #0]
 8009432:	e1a2      	b.n	800977a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	4413      	add	r3, r2
 800943e:	881b      	ldrh	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	441a      	add	r2, r3
 8009458:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800945c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009460:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009464:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800946c:	b29b      	uxth	r3, r3
 800946e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	65bb      	str	r3, [r7, #88]	; 0x58
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800947a:	b29b      	uxth	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009480:	4413      	add	r3, r2
 8009482:	65bb      	str	r3, [r7, #88]	; 0x58
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	00da      	lsls	r2, r3, #3
 800948a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948c:	4413      	add	r3, r2
 800948e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009492:	657b      	str	r3, [r7, #84]	; 0x54
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	891b      	ldrh	r3, [r3, #8]
 8009498:	085b      	lsrs	r3, r3, #1
 800949a:	b29b      	uxth	r3, r3
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	653b      	str	r3, [r7, #80]	; 0x50
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	461a      	mov	r2, r3
 80094b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094b4:	4413      	add	r3, r2
 80094b6:	653b      	str	r3, [r7, #80]	; 0x50
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	00da      	lsls	r2, r3, #3
 80094be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c0:	4413      	add	r3, r2
 80094c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	895b      	ldrh	r3, [r3, #10]
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	005b      	lsls	r3, r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f040 8091 	bne.w	8009604 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80094f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80094f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d01b      	beq.n	8009532 <USB_ActivateEndpoint+0x482>
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	b29b      	uxth	r3, r3
 8009508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800950c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009510:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	441a      	add	r2, r3
 800951c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800951e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800952a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800952e:	b29b      	uxth	r3, r3
 8009530:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	4413      	add	r3, r2
 800953c:	881b      	ldrh	r3, [r3, #0]
 800953e:	873b      	strh	r3, [r7, #56]	; 0x38
 8009540:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d01b      	beq.n	8009582 <USB_ActivateEndpoint+0x4d2>
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800955c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009560:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	441a      	add	r2, r3
 800956c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800956e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009572:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009576:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800957a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800957e:	b29b      	uxth	r3, r3
 8009580:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009598:	86bb      	strh	r3, [r7, #52]	; 0x34
 800959a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800959c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80095a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80095a4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095a8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	441a      	add	r2, r3
 80095b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80095b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095e0:	867b      	strh	r3, [r7, #50]	; 0x32
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	441a      	add	r2, r3
 80095ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80095ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095fe:	b29b      	uxth	r3, r3
 8009600:	8013      	strh	r3, [r2, #0]
 8009602:	e0ba      	b.n	800977a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009614:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d01d      	beq.n	800965c <USB_ActivateEndpoint+0x5ac>
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29b      	uxth	r3, r3
 800962e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009636:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	441a      	add	r2, r3
 8009644:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800964c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009658:	b29b      	uxth	r3, r3
 800965a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	781b      	ldrb	r3, [r3, #0]
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	881b      	ldrh	r3, [r3, #0]
 8009668:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800966c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b00      	cmp	r3, #0
 8009676:	d01d      	beq.n	80096b4 <USB_ActivateEndpoint+0x604>
 8009678:	687a      	ldr	r2, [r7, #4]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29b      	uxth	r3, r3
 8009686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800968a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800968e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	78db      	ldrb	r3, [r3, #3]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d024      	beq.n	8009706 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	4413      	add	r3, r2
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80096d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096da:	f083 0320 	eor.w	r3, r3, #32
 80096de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	441a      	add	r2, r3
 80096ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009700:	b29b      	uxth	r3, r3
 8009702:	8013      	strh	r3, [r2, #0]
 8009704:	e01d      	b.n	8009742 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	b29b      	uxth	r3, r3
 8009714:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800971c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	441a      	add	r2, r3
 800972a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800972e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973e:	b29b      	uxth	r3, r3
 8009740:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009758:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	441a      	add	r2, r3
 8009764:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800976a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009776:	b29b      	uxth	r3, r3
 8009778:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800977a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800977e:	4618      	mov	r0, r3
 8009780:	376c      	adds	r7, #108	; 0x6c
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop

0800978c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800978c:	b480      	push	{r7}
 800978e:	b08d      	sub	sp, #52	; 0x34
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	7b1b      	ldrb	r3, [r3, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f040 808e 	bne.w	80098bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d044      	beq.n	8009832 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	81bb      	strh	r3, [r7, #12]
 80097b6:	89bb      	ldrh	r3, [r7, #12]
 80097b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d01b      	beq.n	80097f8 <USB_DeactivateEndpoint+0x6c>
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d6:	817b      	strh	r3, [r7, #10]
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	441a      	add	r2, r3
 80097e2:	897b      	ldrh	r3, [r7, #10]
 80097e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b29b      	uxth	r3, r3
 8009806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980e:	813b      	strh	r3, [r7, #8]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	441a      	add	r2, r3
 800981a:	893b      	ldrh	r3, [r7, #8]
 800981c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009820:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009824:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800982c:	b29b      	uxth	r3, r3
 800982e:	8013      	strh	r3, [r2, #0]
 8009830:	e192      	b.n	8009b58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	827b      	strh	r3, [r7, #18]
 8009840:	8a7b      	ldrh	r3, [r7, #18]
 8009842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d01b      	beq.n	8009882 <USB_DeactivateEndpoint+0xf6>
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29b      	uxth	r3, r3
 8009858:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800985c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009860:	823b      	strh	r3, [r7, #16]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	441a      	add	r2, r3
 800986c:	8a3b      	ldrh	r3, [r7, #16]
 800986e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800987a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987e:	b29b      	uxth	r3, r3
 8009880:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	881b      	ldrh	r3, [r3, #0]
 800988e:	b29b      	uxth	r3, r3
 8009890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009898:	81fb      	strh	r3, [r7, #14]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	441a      	add	r2, r3
 80098a4:	89fb      	ldrh	r3, [r7, #14]
 80098a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	8013      	strh	r3, [r2, #0]
 80098ba:	e14d      	b.n	8009b58 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	785b      	ldrb	r3, [r3, #1]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f040 80a5 	bne.w	8009a10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	843b      	strh	r3, [r7, #32]
 80098d4:	8c3b      	ldrh	r3, [r7, #32]
 80098d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d01b      	beq.n	8009916 <USB_DeactivateEndpoint+0x18a>
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f4:	83fb      	strh	r3, [r7, #30]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	441a      	add	r2, r3
 8009900:	8bfb      	ldrh	r3, [r7, #30]
 8009902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800990a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800990e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009912:	b29b      	uxth	r3, r3
 8009914:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	4413      	add	r3, r2
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	83bb      	strh	r3, [r7, #28]
 8009924:	8bbb      	ldrh	r3, [r7, #28]
 8009926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01b      	beq.n	8009966 <USB_DeactivateEndpoint+0x1da>
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4413      	add	r3, r2
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009944:	837b      	strh	r3, [r7, #26]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	441a      	add	r2, r3
 8009950:	8b7b      	ldrh	r3, [r7, #26]
 8009952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009962:	b29b      	uxth	r3, r3
 8009964:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800997c:	833b      	strh	r3, [r7, #24]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	441a      	add	r2, r3
 8009988:	8b3b      	ldrh	r3, [r7, #24]
 800998a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800998e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009996:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800999a:	b29b      	uxth	r3, r3
 800999c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b4:	82fb      	strh	r3, [r7, #22]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	441a      	add	r2, r3
 80099c0:	8afb      	ldrh	r3, [r7, #22]
 80099c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ec:	82bb      	strh	r3, [r7, #20]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	441a      	add	r2, r3
 80099f8:	8abb      	ldrh	r3, [r7, #20]
 80099fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	8013      	strh	r3, [r2, #0]
 8009a0e:	e0a3      	b.n	8009b58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	881b      	ldrh	r3, [r3, #0]
 8009a1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01b      	beq.n	8009a60 <USB_DeactivateEndpoint+0x2d4>
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	4413      	add	r3, r2
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	441a      	add	r2, r3
 8009a4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009a4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d01b      	beq.n	8009ab0 <USB_DeactivateEndpoint+0x324>
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	441a      	add	r2, r3
 8009a9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	881b      	ldrh	r3, [r3, #0]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	441a      	add	r2, r3
 8009ad2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009adc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	441a      	add	r2, r3
 8009b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b36:	847b      	strh	r3, [r7, #34]	; 0x22
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3734      	adds	r7, #52	; 0x34
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b0c4      	sub	sp, #272	; 0x110
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	1d3b      	adds	r3, r7, #4
 8009b6e:	6018      	str	r0, [r3, #0]
 8009b70:	463b      	mov	r3, r7
 8009b72:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b74:	463b      	mov	r3, r7
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	785b      	ldrb	r3, [r3, #1]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	f040 8566 	bne.w	800a64c <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009b80:	463b      	mov	r3, r7
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	463b      	mov	r3, r7
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d905      	bls.n	8009b9c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009b90:	463b      	mov	r3, r7
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009b9a:	e004      	b.n	8009ba6 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ba6:	463b      	mov	r3, r7
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	7b1b      	ldrb	r3, [r3, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d12c      	bne.n	8009c0a <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6959      	ldr	r1, [r3, #20]
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	88da      	ldrh	r2, [r3, #6]
 8009bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	1d38      	adds	r0, r7, #4
 8009bc4:	6800      	ldr	r0, [r0, #0]
 8009bc6:	f001 fa58 	bl	800b07a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009bca:	1d3b      	adds	r3, r7, #4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	617b      	str	r3, [r7, #20]
 8009bd0:	1d3b      	adds	r3, r7, #4
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	4413      	add	r3, r2
 8009be0:	617b      	str	r3, [r7, #20]
 8009be2:	463b      	mov	r3, r7
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	00da      	lsls	r2, r3, #3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	4413      	add	r3, r2
 8009bee:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8009bf2:	f107 0310 	add.w	r3, r7, #16
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bfc:	b29a      	uxth	r2, r3
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	f000 bcec 	b.w	800a5e2 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009c0a:	463b      	mov	r3, r7
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	78db      	ldrb	r3, [r3, #3]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	f040 8356 	bne.w	800a2c2 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009c16:	463b      	mov	r3, r7
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	6a1a      	ldr	r2, [r3, #32]
 8009c1c:	463b      	mov	r3, r7
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	f240 82fa 	bls.w	800a21c <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8009c28:	1d3b      	adds	r3, r7, #4
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4413      	add	r3, r2
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c42:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8009c46:	1d3b      	adds	r3, r7, #4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	463b      	mov	r3, r7
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	441a      	add	r2, r3
 8009c54:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009c58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c60:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8009c6c:	463b      	mov	r3, r7
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	691b      	ldr	r3, [r3, #16]
 8009c72:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009c76:	463b      	mov	r3, r7
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6a1a      	ldr	r2, [r3, #32]
 8009c7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c80:	1ad2      	subs	r2, r2, r3
 8009c82:	463b      	mov	r3, r7
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c88:	1d3b      	adds	r3, r7, #4
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	463b      	mov	r3, r7
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 815e 	beq.w	8009f60 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ca4:	1d3b      	adds	r3, r7, #4
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8009caa:	463b      	mov	r3, r7
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d164      	bne.n	8009d7e <USB_EPStartXfer+0x218>
 8009cb4:	1d3b      	adds	r3, r7, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cba:	1d3b      	adds	r3, r7, #4
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc8:	4413      	add	r3, r2
 8009cca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ccc:	463b      	mov	r3, r7
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	00da      	lsls	r2, r3, #3
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8009cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d112      	bne.n	8009d0c <USB_EPStartXfer+0x1a6>
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d08:	801a      	strh	r2, [r3, #0]
 8009d0a:	e054      	b.n	8009db6 <USB_EPStartXfer+0x250>
 8009d0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d10:	2b3e      	cmp	r3, #62	; 0x3e
 8009d12:	d817      	bhi.n	8009d44 <USB_EPStartXfer+0x1de>
 8009d14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d18:	085b      	lsrs	r3, r3, #1
 8009d1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d004      	beq.n	8009d34 <USB_EPStartXfer+0x1ce>
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	029b      	lsls	r3, r3, #10
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	801a      	strh	r2, [r3, #0]
 8009d42:	e038      	b.n	8009db6 <USB_EPStartXfer+0x250>
 8009d44:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d48:	095b      	lsrs	r3, r3, #5
 8009d4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d52:	f003 031f 	and.w	r3, r3, #31
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <USB_EPStartXfer+0x1fe>
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d76:	b29a      	uxth	r2, r3
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	801a      	strh	r2, [r3, #0]
 8009d7c:	e01b      	b.n	8009db6 <USB_EPStartXfer+0x250>
 8009d7e:	463b      	mov	r3, r7
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d116      	bne.n	8009db6 <USB_EPStartXfer+0x250>
 8009d88:	1d3b      	adds	r3, r7, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d96:	4413      	add	r3, r2
 8009d98:	637b      	str	r3, [r7, #52]	; 0x34
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	00da      	lsls	r2, r3, #3
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da4:	4413      	add	r3, r2
 8009da6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009daa:	633b      	str	r3, [r7, #48]	; 0x30
 8009dac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009db6:	463b      	mov	r3, r7
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	895b      	ldrh	r3, [r3, #10]
 8009dbc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6959      	ldr	r1, [r3, #20]
 8009dc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009dd0:	1d38      	adds	r0, r7, #4
 8009dd2:	6800      	ldr	r0, [r0, #0]
 8009dd4:	f001 f951 	bl	800b07a <USB_WritePMA>
            ep->xfer_buff += len;
 8009dd8:	463b      	mov	r3, r7
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	695a      	ldr	r2, [r3, #20]
 8009dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009de2:	441a      	add	r2, r3
 8009de4:	463b      	mov	r3, r7
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009dea:	463b      	mov	r3, r7
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6a1a      	ldr	r2, [r3, #32]
 8009df0:	463b      	mov	r3, r7
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d90e      	bls.n	8009e18 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009e04:	463b      	mov	r3, r7
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6a1a      	ldr	r2, [r3, #32]
 8009e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e0e:	1ad2      	subs	r2, r2, r3
 8009e10:	463b      	mov	r3, r7
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	621a      	str	r2, [r3, #32]
 8009e16:	e008      	b.n	8009e2a <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e18:	463b      	mov	r3, r7
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8009e22:	463b      	mov	r3, r7
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2200      	movs	r2, #0
 8009e28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e2a:	463b      	mov	r3, r7
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d164      	bne.n	8009efe <USB_EPStartXfer+0x398>
 8009e34:	1d3b      	adds	r3, r7, #4
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	61fb      	str	r3, [r7, #28]
 8009e3a:	1d3b      	adds	r3, r7, #4
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	461a      	mov	r2, r3
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	61fb      	str	r3, [r7, #28]
 8009e4c:	463b      	mov	r3, r7
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	00da      	lsls	r2, r3, #3
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	4413      	add	r3, r2
 8009e58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e5c:	61bb      	str	r3, [r7, #24]
 8009e5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d112      	bne.n	8009e8c <USB_EPStartXfer+0x326>
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e84:	b29a      	uxth	r2, r3
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	801a      	strh	r2, [r3, #0]
 8009e8a:	e057      	b.n	8009f3c <USB_EPStartXfer+0x3d6>
 8009e8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e90:	2b3e      	cmp	r3, #62	; 0x3e
 8009e92:	d817      	bhi.n	8009ec4 <USB_EPStartXfer+0x35e>
 8009e94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e98:	085b      	lsrs	r3, r3, #1
 8009e9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d004      	beq.n	8009eb4 <USB_EPStartXfer+0x34e>
 8009eaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009eb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	029b      	lsls	r3, r3, #10
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	e03b      	b.n	8009f3c <USB_EPStartXfer+0x3d6>
 8009ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ec8:	095b      	lsrs	r3, r3, #5
 8009eca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ed2:	f003 031f 	and.w	r3, r3, #31
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <USB_EPStartXfer+0x37e>
 8009eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	801a      	strh	r2, [r3, #0]
 8009efc:	e01e      	b.n	8009f3c <USB_EPStartXfer+0x3d6>
 8009efe:	463b      	mov	r3, r7
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d119      	bne.n	8009f3c <USB_EPStartXfer+0x3d6>
 8009f08:	1d3b      	adds	r3, r7, #4
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009f0e:	1d3b      	adds	r3, r7, #4
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1c:	4413      	add	r3, r2
 8009f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f20:	463b      	mov	r3, r7
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	00da      	lsls	r2, r3, #3
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	4413      	add	r3, r2
 8009f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f30:	623b      	str	r3, [r7, #32]
 8009f32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f3c:	463b      	mov	r3, r7
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	891b      	ldrh	r3, [r3, #8]
 8009f42:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f46:	463b      	mov	r3, r7
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6959      	ldr	r1, [r3, #20]
 8009f4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009f56:	1d38      	adds	r0, r7, #4
 8009f58:	6800      	ldr	r0, [r0, #0]
 8009f5a:	f001 f88e 	bl	800b07a <USB_WritePMA>
 8009f5e:	e340      	b.n	800a5e2 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f60:	463b      	mov	r3, r7
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	785b      	ldrb	r3, [r3, #1]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d164      	bne.n	800a034 <USB_EPStartXfer+0x4ce>
 8009f6a:	1d3b      	adds	r3, r7, #4
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f70:	1d3b      	adds	r3, r7, #4
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7e:	4413      	add	r3, r2
 8009f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f82:	463b      	mov	r3, r7
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	00da      	lsls	r2, r3, #3
 8009f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d112      	bne.n	8009fc2 <USB_EPStartXfer+0x45c>
 8009f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009faa:	801a      	strh	r2, [r3, #0]
 8009fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fae:	881b      	ldrh	r3, [r3, #0]
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fbe:	801a      	strh	r2, [r3, #0]
 8009fc0:	e057      	b.n	800a072 <USB_EPStartXfer+0x50c>
 8009fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009fc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fc8:	d817      	bhi.n	8009ffa <USB_EPStartXfer+0x494>
 8009fca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009fce:	085b      	lsrs	r3, r3, #1
 8009fd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d004      	beq.n	8009fea <USB_EPStartXfer+0x484>
 8009fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	029b      	lsls	r3, r3, #10
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e03b      	b.n	800a072 <USB_EPStartXfer+0x50c>
 8009ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a008:	f003 031f 	and.w	r3, r3, #31
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USB_EPStartXfer+0x4b4>
 800a010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a014:	3b01      	subs	r3, #1
 800a016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a01a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a01e:	b29b      	uxth	r3, r3
 800a020:	029b      	lsls	r3, r3, #10
 800a022:	b29b      	uxth	r3, r3
 800a024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a030:	801a      	strh	r2, [r3, #0]
 800a032:	e01e      	b.n	800a072 <USB_EPStartXfer+0x50c>
 800a034:	463b      	mov	r3, r7
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	785b      	ldrb	r3, [r3, #1]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d119      	bne.n	800a072 <USB_EPStartXfer+0x50c>
 800a03e:	1d3b      	adds	r3, r7, #4
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	657b      	str	r3, [r7, #84]	; 0x54
 800a044:	1d3b      	adds	r3, r7, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a052:	4413      	add	r3, r2
 800a054:	657b      	str	r3, [r7, #84]	; 0x54
 800a056:	463b      	mov	r3, r7
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	00da      	lsls	r2, r3, #3
 800a05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a060:	4413      	add	r3, r2
 800a062:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a066:	653b      	str	r3, [r7, #80]	; 0x50
 800a068:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a070:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a072:	463b      	mov	r3, r7
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	891b      	ldrh	r3, [r3, #8]
 800a078:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a07c:	463b      	mov	r3, r7
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6959      	ldr	r1, [r3, #20]
 800a082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a086:	b29b      	uxth	r3, r3
 800a088:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a08c:	1d38      	adds	r0, r7, #4
 800a08e:	6800      	ldr	r0, [r0, #0]
 800a090:	f000 fff3 	bl	800b07a <USB_WritePMA>
            ep->xfer_buff += len;
 800a094:	463b      	mov	r3, r7
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	695a      	ldr	r2, [r3, #20]
 800a09a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a09e:	441a      	add	r2, r3
 800a0a0:	463b      	mov	r3, r7
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6a1a      	ldr	r2, [r3, #32]
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d90e      	bls.n	800a0d4 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800a0b6:	463b      	mov	r3, r7
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691b      	ldr	r3, [r3, #16]
 800a0bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800a0c0:	463b      	mov	r3, r7
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6a1a      	ldr	r2, [r3, #32]
 800a0c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	621a      	str	r2, [r3, #32]
 800a0d2:	e008      	b.n	800a0e6 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800a0de:	463b      	mov	r3, r7
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0e6:	1d3b      	adds	r3, r7, #4
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a0ec:	463b      	mov	r3, r7
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d164      	bne.n	800a1c0 <USB_EPStartXfer+0x65a>
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0fc:	1d3b      	adds	r3, r7, #4
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a104:	b29b      	uxth	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a10a:	4413      	add	r3, r2
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a10e:	463b      	mov	r3, r7
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	00da      	lsls	r2, r3, #3
 800a116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a118:	4413      	add	r3, r2
 800a11a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a11e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a124:	2b00      	cmp	r3, #0
 800a126:	d112      	bne.n	800a14e <USB_EPStartXfer+0x5e8>
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a132:	b29a      	uxth	r2, r3
 800a134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a136:	801a      	strh	r2, [r3, #0]
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	881b      	ldrh	r3, [r3, #0]
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a146:	b29a      	uxth	r2, r3
 800a148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a14a:	801a      	strh	r2, [r3, #0]
 800a14c:	e054      	b.n	800a1f8 <USB_EPStartXfer+0x692>
 800a14e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a152:	2b3e      	cmp	r3, #62	; 0x3e
 800a154:	d817      	bhi.n	800a186 <USB_EPStartXfer+0x620>
 800a156:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a160:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d004      	beq.n	800a176 <USB_EPStartXfer+0x610>
 800a16c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a170:	3301      	adds	r3, #1
 800a172:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	029b      	lsls	r3, r3, #10
 800a17e:	b29a      	uxth	r2, r3
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	801a      	strh	r2, [r3, #0]
 800a184:	e038      	b.n	800a1f8 <USB_EPStartXfer+0x692>
 800a186:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a18a:	095b      	lsrs	r3, r3, #5
 800a18c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a190:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a194:	f003 031f 	and.w	r3, r3, #31
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d104      	bne.n	800a1a6 <USB_EPStartXfer+0x640>
 800a19c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	029b      	lsls	r3, r3, #10
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	e01b      	b.n	800a1f8 <USB_EPStartXfer+0x692>
 800a1c0:	463b      	mov	r3, r7
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	785b      	ldrb	r3, [r3, #1]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d116      	bne.n	800a1f8 <USB_EPStartXfer+0x692>
 800a1ca:	1d3b      	adds	r3, r7, #4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	4413      	add	r3, r2
 800a1da:	647b      	str	r3, [r7, #68]	; 0x44
 800a1dc:	463b      	mov	r3, r7
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	781b      	ldrb	r3, [r3, #0]
 800a1e2:	00da      	lsls	r2, r3, #3
 800a1e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a1ec:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a1f8:	463b      	mov	r3, r7
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	895b      	ldrh	r3, [r3, #10]
 800a1fe:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a202:	463b      	mov	r3, r7
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	6959      	ldr	r1, [r3, #20]
 800a208:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a212:	1d38      	adds	r0, r7, #4
 800a214:	6800      	ldr	r0, [r0, #0]
 800a216:	f000 ff30 	bl	800b07a <USB_WritePMA>
 800a21a:	e1e2      	b.n	800a5e2 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 800a21c:	463b      	mov	r3, r7
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a226:	1d3b      	adds	r3, r7, #4
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	463b      	mov	r3, r7
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	881b      	ldrh	r3, [r3, #0]
 800a236:	b29b      	uxth	r3, r3
 800a238:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a23c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a240:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a244:	1d3b      	adds	r3, r7, #4
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	463b      	mov	r3, r7
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	441a      	add	r2, r3
 800a252:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a25a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a25e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a266:	b29b      	uxth	r3, r3
 800a268:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a26a:	1d3b      	adds	r3, r7, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	663b      	str	r3, [r7, #96]	; 0x60
 800a270:	1d3b      	adds	r3, r7, #4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a27e:	4413      	add	r3, r2
 800a280:	663b      	str	r3, [r7, #96]	; 0x60
 800a282:	463b      	mov	r3, r7
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	00da      	lsls	r2, r3, #3
 800a28a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a28c:	4413      	add	r3, r2
 800a28e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a292:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a294:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a298:	b29a      	uxth	r2, r3
 800a29a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a29c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a29e:	463b      	mov	r3, r7
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	891b      	ldrh	r3, [r3, #8]
 800a2a4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2a8:	463b      	mov	r3, r7
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6959      	ldr	r1, [r3, #20]
 800a2ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a2b8:	1d38      	adds	r0, r7, #4
 800a2ba:	6800      	ldr	r0, [r0, #0]
 800a2bc:	f000 fedd 	bl	800b07a <USB_WritePMA>
 800a2c0:	e18f      	b.n	800a5e2 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2c2:	1d3b      	adds	r3, r7, #4
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	463b      	mov	r3, r7
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4413      	add	r3, r2
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 808f 	beq.w	800a3fc <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2de:	1d3b      	adds	r3, r7, #4
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	785b      	ldrb	r3, [r3, #1]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d164      	bne.n	800a3b8 <USB_EPStartXfer+0x852>
 800a2ee:	1d3b      	adds	r3, r7, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	673b      	str	r3, [r7, #112]	; 0x70
 800a2f4:	1d3b      	adds	r3, r7, #4
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	461a      	mov	r2, r3
 800a300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a302:	4413      	add	r3, r2
 800a304:	673b      	str	r3, [r7, #112]	; 0x70
 800a306:	463b      	mov	r3, r7
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	00da      	lsls	r2, r3, #3
 800a30e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a310:	4413      	add	r3, r2
 800a312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a316:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a318:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d112      	bne.n	800a346 <USB_EPStartXfer+0x7e0>
 800a320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a33a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a33e:	b29a      	uxth	r2, r3
 800a340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a342:	801a      	strh	r2, [r3, #0]
 800a344:	e054      	b.n	800a3f0 <USB_EPStartXfer+0x88a>
 800a346:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a34a:	2b3e      	cmp	r3, #62	; 0x3e
 800a34c:	d817      	bhi.n	800a37e <USB_EPStartXfer+0x818>
 800a34e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a358:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a35c:	f003 0301 	and.w	r3, r3, #1
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <USB_EPStartXfer+0x808>
 800a364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a368:	3301      	adds	r3, #1
 800a36a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a36e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a372:	b29b      	uxth	r3, r3
 800a374:	029b      	lsls	r3, r3, #10
 800a376:	b29a      	uxth	r2, r3
 800a378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37a:	801a      	strh	r2, [r3, #0]
 800a37c:	e038      	b.n	800a3f0 <USB_EPStartXfer+0x88a>
 800a37e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a382:	095b      	lsrs	r3, r3, #5
 800a384:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a388:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a38c:	f003 031f 	and.w	r3, r3, #31
 800a390:	2b00      	cmp	r3, #0
 800a392:	d104      	bne.n	800a39e <USB_EPStartXfer+0x838>
 800a394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a398:	3b01      	subs	r3, #1
 800a39a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a39e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	029b      	lsls	r3, r3, #10
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e01b      	b.n	800a3f0 <USB_EPStartXfer+0x88a>
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d116      	bne.n	800a3f0 <USB_EPStartXfer+0x88a>
 800a3c2:	1d3b      	adds	r3, r7, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3d0:	4413      	add	r3, r2
 800a3d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3d4:	463b      	mov	r3, r7
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	00da      	lsls	r2, r3, #3
 800a3dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3de:	4413      	add	r3, r2
 800a3e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3e4:	677b      	str	r3, [r7, #116]	; 0x74
 800a3e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	895b      	ldrh	r3, [r3, #10]
 800a3f6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 800a3fa:	e097      	b.n	800a52c <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a3fc:	463b      	mov	r3, r7
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d168      	bne.n	800a4d8 <USB_EPStartXfer+0x972>
 800a406:	1d3b      	adds	r3, r7, #4
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a40e:	1d3b      	adds	r3, r7, #4
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a416:	b29b      	uxth	r3, r3
 800a418:	461a      	mov	r2, r3
 800a41a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a41e:	4413      	add	r3, r2
 800a420:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a424:	463b      	mov	r3, r7
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	00da      	lsls	r2, r3, #3
 800a42c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a430:	4413      	add	r3, r2
 800a432:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a436:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d112      	bne.n	800a466 <USB_EPStartXfer+0x900>
 800a440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a44e:	801a      	strh	r2, [r3, #0]
 800a450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a452:	881b      	ldrh	r3, [r3, #0]
 800a454:	b29b      	uxth	r3, r3
 800a456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a45a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45e:	b29a      	uxth	r2, r3
 800a460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a462:	801a      	strh	r2, [r3, #0]
 800a464:	e05d      	b.n	800a522 <USB_EPStartXfer+0x9bc>
 800a466:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a46a:	2b3e      	cmp	r3, #62	; 0x3e
 800a46c:	d817      	bhi.n	800a49e <USB_EPStartXfer+0x938>
 800a46e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a472:	085b      	lsrs	r3, r3, #1
 800a474:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d004      	beq.n	800a48e <USB_EPStartXfer+0x928>
 800a484:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a488:	3301      	adds	r3, #1
 800a48a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a48e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a492:	b29b      	uxth	r3, r3
 800a494:	029b      	lsls	r3, r3, #10
 800a496:	b29a      	uxth	r2, r3
 800a498:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a49a:	801a      	strh	r2, [r3, #0]
 800a49c:	e041      	b.n	800a522 <USB_EPStartXfer+0x9bc>
 800a49e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4a2:	095b      	lsrs	r3, r3, #5
 800a4a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4ac:	f003 031f 	and.w	r3, r3, #31
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d104      	bne.n	800a4be <USB_EPStartXfer+0x958>
 800a4b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	029b      	lsls	r3, r3, #10
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4d4:	801a      	strh	r2, [r3, #0]
 800a4d6:	e024      	b.n	800a522 <USB_EPStartXfer+0x9bc>
 800a4d8:	463b      	mov	r3, r7
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d11f      	bne.n	800a522 <USB_EPStartXfer+0x9bc>
 800a4e2:	1d3b      	adds	r3, r7, #4
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a4ea:	1d3b      	adds	r3, r7, #4
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	00da      	lsls	r2, r3, #3
 800a508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a50c:	4413      	add	r3, r2
 800a50e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a516:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a520:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a522:	463b      	mov	r3, r7
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	891b      	ldrh	r3, [r3, #8]
 800a528:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a52c:	463b      	mov	r3, r7
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6959      	ldr	r1, [r3, #20]
 800a532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a536:	b29b      	uxth	r3, r3
 800a538:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800a53c:	1d38      	adds	r0, r7, #4
 800a53e:	6800      	ldr	r0, [r0, #0]
 800a540:	f000 fd9b 	bl	800b07a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800a544:	463b      	mov	r3, r7
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	785b      	ldrb	r3, [r3, #1]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d122      	bne.n	800a594 <USB_EPStartXfer+0xa2e>
 800a54e:	1d3b      	adds	r3, r7, #4
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	463b      	mov	r3, r7
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	4413      	add	r3, r2
 800a55c:	881b      	ldrh	r3, [r3, #0]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a568:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800a56c:	1d3b      	adds	r3, r7, #4
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	463b      	mov	r3, r7
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	009b      	lsls	r3, r3, #2
 800a578:	441a      	add	r2, r3
 800a57a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a57e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a582:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a58a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a58e:	b29b      	uxth	r3, r3
 800a590:	8013      	strh	r3, [r2, #0]
 800a592:	e026      	b.n	800a5e2 <USB_EPStartXfer+0xa7c>
 800a594:	463b      	mov	r3, r7
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	785b      	ldrb	r3, [r3, #1]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d121      	bne.n	800a5e2 <USB_EPStartXfer+0xa7c>
 800a59e:	1d3b      	adds	r3, r7, #4
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800a5bc:	1d3b      	adds	r3, r7, #4
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	441a      	add	r2, r3
 800a5ca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800a5ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a5e2:	1d3b      	adds	r3, r7, #4
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	881b      	ldrh	r3, [r3, #0]
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f107 020e 	add.w	r2, r7, #14
 800a5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a600:	8013      	strh	r3, [r2, #0]
 800a602:	f107 030e 	add.w	r3, r7, #14
 800a606:	f107 020e 	add.w	r2, r7, #14
 800a60a:	8812      	ldrh	r2, [r2, #0]
 800a60c:	f082 0210 	eor.w	r2, r2, #16
 800a610:	801a      	strh	r2, [r3, #0]
 800a612:	f107 030e 	add.w	r3, r7, #14
 800a616:	f107 020e 	add.w	r2, r7, #14
 800a61a:	8812      	ldrh	r2, [r2, #0]
 800a61c:	f082 0220 	eor.w	r2, r2, #32
 800a620:	801a      	strh	r2, [r3, #0]
 800a622:	1d3b      	adds	r3, r7, #4
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	463b      	mov	r3, r7
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	441a      	add	r2, r3
 800a630:	f107 030e 	add.w	r3, r7, #14
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a63a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a63e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a646:	b29b      	uxth	r3, r3
 800a648:	8013      	strh	r3, [r2, #0]
 800a64a:	e3b5      	b.n	800adb8 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a64c:	463b      	mov	r3, r7
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	7b1b      	ldrb	r3, [r3, #12]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f040 8090 	bne.w	800a778 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800a658:	463b      	mov	r3, r7
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	463b      	mov	r3, r7
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	429a      	cmp	r2, r3
 800a666:	d90e      	bls.n	800a686 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800a668:	463b      	mov	r3, r7
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	691b      	ldr	r3, [r3, #16]
 800a66e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800a672:	463b      	mov	r3, r7
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	699a      	ldr	r2, [r3, #24]
 800a678:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a67c:	1ad2      	subs	r2, r2, r3
 800a67e:	463b      	mov	r3, r7
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	619a      	str	r2, [r3, #24]
 800a684:	e008      	b.n	800a698 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800a686:	463b      	mov	r3, r7
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800a690:	463b      	mov	r3, r7
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2200      	movs	r2, #0
 800a696:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a698:	1d3b      	adds	r3, r7, #4
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6a0:	1d3b      	adds	r3, r7, #4
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	00da      	lsls	r2, r3, #3
 800a6be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d116      	bne.n	800a702 <USB_EPStartXfer+0xb9c>
 800a6d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6e6:	801a      	strh	r2, [r3, #0]
 800a6e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	e32c      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
 800a702:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a706:	2b3e      	cmp	r3, #62	; 0x3e
 800a708:	d818      	bhi.n	800a73c <USB_EPStartXfer+0xbd6>
 800a70a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a70e:	085b      	lsrs	r3, r3, #1
 800a710:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a714:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d004      	beq.n	800a72a <USB_EPStartXfer+0xbc4>
 800a720:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a724:	3301      	adds	r3, #1
 800a726:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a72a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a72e:	b29b      	uxth	r3, r3
 800a730:	029b      	lsls	r3, r3, #10
 800a732:	b29a      	uxth	r2, r3
 800a734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a738:	801a      	strh	r2, [r3, #0]
 800a73a:	e30f      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
 800a73c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a740:	095b      	lsrs	r3, r3, #5
 800a742:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a746:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a74a:	f003 031f 	and.w	r3, r3, #31
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d104      	bne.n	800a75c <USB_EPStartXfer+0xbf6>
 800a752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a756:	3b01      	subs	r3, #1
 800a758:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a75c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a760:	b29b      	uxth	r3, r3
 800a762:	029b      	lsls	r3, r3, #10
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76e:	b29a      	uxth	r2, r3
 800a770:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a774:	801a      	strh	r2, [r3, #0]
 800a776:	e2f1      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800a778:	463b      	mov	r3, r7
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	78db      	ldrb	r3, [r3, #3]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	f040 818f 	bne.w	800aaa2 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a784:	463b      	mov	r3, r7
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d175      	bne.n	800a87a <USB_EPStartXfer+0xd14>
 800a78e:	1d3b      	adds	r3, r7, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a796:	1d3b      	adds	r3, r7, #4
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	00da      	lsls	r2, r3, #3
 800a7b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a7b8:	4413      	add	r3, r2
 800a7ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d116      	bne.n	800a7fa <USB_EPStartXfer+0xc94>
 800a7cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7de:	801a      	strh	r2, [r3, #0]
 800a7e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a7f6:	801a      	strh	r2, [r3, #0]
 800a7f8:	e065      	b.n	800a8c6 <USB_EPStartXfer+0xd60>
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	2b3e      	cmp	r3, #62	; 0x3e
 800a802:	d81a      	bhi.n	800a83a <USB_EPStartXfer+0xcd4>
 800a804:	463b      	mov	r3, r7
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	085b      	lsrs	r3, r3, #1
 800a80c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a810:	463b      	mov	r3, r7
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0301 	and.w	r3, r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d004      	beq.n	800a828 <USB_EPStartXfer+0xcc2>
 800a81e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a822:	3301      	adds	r3, #1
 800a824:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a828:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	029b      	lsls	r3, r3, #10
 800a830:	b29a      	uxth	r2, r3
 800a832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a836:	801a      	strh	r2, [r3, #0]
 800a838:	e045      	b.n	800a8c6 <USB_EPStartXfer+0xd60>
 800a83a:	463b      	mov	r3, r7
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	095b      	lsrs	r3, r3, #5
 800a842:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a846:	463b      	mov	r3, r7
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	f003 031f 	and.w	r3, r3, #31
 800a850:	2b00      	cmp	r3, #0
 800a852:	d104      	bne.n	800a85e <USB_EPStartXfer+0xcf8>
 800a854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a858:	3b01      	subs	r3, #1
 800a85a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a85e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a862:	b29b      	uxth	r3, r3
 800a864:	029b      	lsls	r3, r3, #10
 800a866:	b29b      	uxth	r3, r3
 800a868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a870:	b29a      	uxth	r2, r3
 800a872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e025      	b.n	800a8c6 <USB_EPStartXfer+0xd60>
 800a87a:	463b      	mov	r3, r7
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d120      	bne.n	800a8c6 <USB_EPStartXfer+0xd60>
 800a884:	1d3b      	adds	r3, r7, #4
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a88c:	1d3b      	adds	r3, r7, #4
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a894:	b29b      	uxth	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a89c:	4413      	add	r3, r2
 800a89e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8a2:	463b      	mov	r3, r7
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	00da      	lsls	r2, r3, #3
 800a8aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	691b      	ldr	r3, [r3, #16]
 800a8be:	b29a      	uxth	r2, r3
 800a8c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a8c4:	801a      	strh	r2, [r3, #0]
 800a8c6:	1d3b      	adds	r3, r7, #4
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a8ce:	463b      	mov	r3, r7
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d175      	bne.n	800a9c4 <USB_EPStartXfer+0xe5e>
 800a8d8:	1d3b      	adds	r3, r7, #4
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8e0:	1d3b      	adds	r3, r7, #4
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	00da      	lsls	r2, r3, #3
 800a8fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a902:	4413      	add	r3, r2
 800a904:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a90c:	463b      	mov	r3, r7
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d116      	bne.n	800a944 <USB_EPStartXfer+0xdde>
 800a916:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a922:	b29a      	uxth	r2, r3
 800a924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a928:	801a      	strh	r2, [r3, #0]
 800a92a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	e061      	b.n	800aa08 <USB_EPStartXfer+0xea2>
 800a944:	463b      	mov	r3, r7
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	2b3e      	cmp	r3, #62	; 0x3e
 800a94c:	d81a      	bhi.n	800a984 <USB_EPStartXfer+0xe1e>
 800a94e:	463b      	mov	r3, r7
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	085b      	lsrs	r3, r3, #1
 800a956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a95a:	463b      	mov	r3, r7
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	2b00      	cmp	r3, #0
 800a966:	d004      	beq.n	800a972 <USB_EPStartXfer+0xe0c>
 800a968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96c:	3301      	adds	r3, #1
 800a96e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a976:	b29b      	uxth	r3, r3
 800a978:	029b      	lsls	r3, r3, #10
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a980:	801a      	strh	r2, [r3, #0]
 800a982:	e041      	b.n	800aa08 <USB_EPStartXfer+0xea2>
 800a984:	463b      	mov	r3, r7
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	691b      	ldr	r3, [r3, #16]
 800a98a:	095b      	lsrs	r3, r3, #5
 800a98c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a990:	463b      	mov	r3, r7
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	f003 031f 	and.w	r3, r3, #31
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <USB_EPStartXfer+0xe42>
 800a99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	029b      	lsls	r3, r3, #10
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9c0:	801a      	strh	r2, [r3, #0]
 800a9c2:	e021      	b.n	800aa08 <USB_EPStartXfer+0xea2>
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	785b      	ldrb	r3, [r3, #1]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d11c      	bne.n	800aa08 <USB_EPStartXfer+0xea2>
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	461a      	mov	r2, r3
 800a9da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9de:	4413      	add	r3, r2
 800a9e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	00da      	lsls	r2, r3, #3
 800a9ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a9fa:	463b      	mov	r3, r7
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa06:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800aa08:	463b      	mov	r3, r7
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f000 81a4 	beq.w	800ad5c <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aa14:	1d3b      	adds	r3, r7, #4
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	463b      	mov	r3, r7
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa28:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aa2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <USB_EPStartXfer+0xeda>
 800aa34:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10d      	bne.n	800aa5c <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aa44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f040 8187 	bne.w	800ad5c <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa4e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800aa52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f040 8180 	bne.w	800ad5c <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aa5c:	1d3b      	adds	r3, r7, #4
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	463b      	mov	r3, r7
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa76:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800aa7a:	1d3b      	adds	r3, r7, #4
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	463b      	mov	r3, r7
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	441a      	add	r2, r3
 800aa88:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800aa8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	8013      	strh	r3, [r2, #0]
 800aaa0:	e15c      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	78db      	ldrb	r3, [r3, #3]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	f040 8155 	bne.w	800ad58 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800aaae:	463b      	mov	r3, r7
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	699a      	ldr	r2, [r3, #24]
 800aab4:	463b      	mov	r3, r7
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d90e      	bls.n	800aadc <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800aabe:	463b      	mov	r3, r7
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800aac8:	463b      	mov	r3, r7
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	699a      	ldr	r2, [r3, #24]
 800aace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aad2:	1ad2      	subs	r2, r2, r3
 800aad4:	463b      	mov	r3, r7
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	619a      	str	r2, [r3, #24]
 800aada:	e008      	b.n	800aaee <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800aadc:	463b      	mov	r3, r7
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800aae6:	463b      	mov	r3, r7
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	2200      	movs	r2, #0
 800aaec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aaee:	463b      	mov	r3, r7
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d16f      	bne.n	800abd8 <USB_EPStartXfer+0x1072>
 800aaf8:	1d3b      	adds	r3, r7, #4
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab00:	1d3b      	adds	r3, r7, #4
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab10:	4413      	add	r3, r2
 800ab12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab16:	463b      	mov	r3, r7
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	00da      	lsls	r2, r3, #3
 800ab1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab22:	4413      	add	r3, r2
 800ab24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d116      	bne.n	800ab62 <USB_EPStartXfer+0xffc>
 800ab34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab38:	881b      	ldrh	r3, [r3, #0]
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab46:	801a      	strh	r2, [r3, #0]
 800ab48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab5e:	801a      	strh	r2, [r3, #0]
 800ab60:	e05f      	b.n	800ac22 <USB_EPStartXfer+0x10bc>
 800ab62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab66:	2b3e      	cmp	r3, #62	; 0x3e
 800ab68:	d818      	bhi.n	800ab9c <USB_EPStartXfer+0x1036>
 800ab6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab6e:	085b      	lsrs	r3, r3, #1
 800ab70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ab78:	f003 0301 	and.w	r3, r3, #1
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d004      	beq.n	800ab8a <USB_EPStartXfer+0x1024>
 800ab80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab84:	3301      	adds	r3, #1
 800ab86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	029b      	lsls	r3, r3, #10
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ab98:	801a      	strh	r2, [r3, #0]
 800ab9a:	e042      	b.n	800ac22 <USB_EPStartXfer+0x10bc>
 800ab9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aba0:	095b      	lsrs	r3, r3, #5
 800aba2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aba6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800abaa:	f003 031f 	and.w	r3, r3, #31
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d104      	bne.n	800abbc <USB_EPStartXfer+0x1056>
 800abb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abb6:	3b01      	subs	r3, #1
 800abb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	029b      	lsls	r3, r3, #10
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abce:	b29a      	uxth	r2, r3
 800abd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800abd4:	801a      	strh	r2, [r3, #0]
 800abd6:	e024      	b.n	800ac22 <USB_EPStartXfer+0x10bc>
 800abd8:	463b      	mov	r3, r7
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d11f      	bne.n	800ac22 <USB_EPStartXfer+0x10bc>
 800abe2:	1d3b      	adds	r3, r7, #4
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abea:	1d3b      	adds	r3, r7, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	461a      	mov	r2, r3
 800abf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800abfa:	4413      	add	r3, r2
 800abfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ac00:	463b      	mov	r3, r7
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	00da      	lsls	r2, r3, #3
 800ac08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ac16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac1a:	b29a      	uxth	r2, r3
 800ac1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac20:	801a      	strh	r2, [r3, #0]
 800ac22:	1d3b      	adds	r3, r7, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac2a:	463b      	mov	r3, r7
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	785b      	ldrb	r3, [r3, #1]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d16f      	bne.n	800ad14 <USB_EPStartXfer+0x11ae>
 800ac34:	1d3b      	adds	r3, r7, #4
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac3c:	1d3b      	adds	r3, r7, #4
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	461a      	mov	r2, r3
 800ac48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac52:	463b      	mov	r3, r7
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	00da      	lsls	r2, r3, #3
 800ac5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac5e:	4413      	add	r3, r2
 800ac60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ac68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d116      	bne.n	800ac9e <USB_EPStartXfer+0x1138>
 800ac70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac7c:	b29a      	uxth	r2, r3
 800ac7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac88:	881b      	ldrh	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac9a:	801a      	strh	r2, [r3, #0]
 800ac9c:	e05e      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
 800ac9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800aca2:	2b3e      	cmp	r3, #62	; 0x3e
 800aca4:	d818      	bhi.n	800acd8 <USB_EPStartXfer+0x1172>
 800aca6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800acaa:	085b      	lsrs	r3, r3, #1
 800acac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800acb4:	f003 0301 	and.w	r3, r3, #1
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d004      	beq.n	800acc6 <USB_EPStartXfer+0x1160>
 800acbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acc0:	3301      	adds	r3, #1
 800acc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acca:	b29b      	uxth	r3, r3
 800accc:	029b      	lsls	r3, r3, #10
 800acce:	b29a      	uxth	r2, r3
 800acd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800acd4:	801a      	strh	r2, [r3, #0]
 800acd6:	e041      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
 800acd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800acdc:	095b      	lsrs	r3, r3, #5
 800acde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ace2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ace6:	f003 031f 	and.w	r3, r3, #31
 800acea:	2b00      	cmp	r3, #0
 800acec:	d104      	bne.n	800acf8 <USB_EPStartXfer+0x1192>
 800acee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acf2:	3b01      	subs	r3, #1
 800acf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	029b      	lsls	r3, r3, #10
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad10:	801a      	strh	r2, [r3, #0]
 800ad12:	e023      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
 800ad14:	463b      	mov	r3, r7
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	785b      	ldrb	r3, [r3, #1]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d11e      	bne.n	800ad5c <USB_EPStartXfer+0x11f6>
 800ad1e:	1d3b      	adds	r3, r7, #4
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad2e:	4413      	add	r3, r2
 800ad30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ad34:	463b      	mov	r3, r7
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	00da      	lsls	r2, r3, #3
 800ad3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad40:	4413      	add	r3, r2
 800ad42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ad4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad54:	801a      	strh	r2, [r3, #0]
 800ad56:	e001      	b.n	800ad5c <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e02e      	b.n	800adba <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad5c:	1d3b      	adds	r3, r7, #4
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	463b      	mov	r3, r7
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad76:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ad7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ad7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ad86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ad8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad8e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ad92:	1d3b      	adds	r3, r7, #4
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	463b      	mov	r3, r7
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	441a      	add	r2, r3
 800ada0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ada4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800adb8:	2300      	movs	r3, #0
}
 800adba:	4618      	mov	r0, r3
 800adbc:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	785b      	ldrb	r3, [r3, #1]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d020      	beq.n	800ae18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adec:	81bb      	strh	r3, [r7, #12]
 800adee:	89bb      	ldrh	r3, [r7, #12]
 800adf0:	f083 0310 	eor.w	r3, r3, #16
 800adf4:	81bb      	strh	r3, [r7, #12]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	441a      	add	r2, r3
 800ae00:	89bb      	ldrh	r3, [r7, #12]
 800ae02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	8013      	strh	r3, [r2, #0]
 800ae16:	e01f      	b.n	800ae58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	4413      	add	r3, r2
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae2e:	81fb      	strh	r3, [r7, #14]
 800ae30:	89fb      	ldrh	r3, [r7, #14]
 800ae32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ae36:	81fb      	strh	r3, [r7, #14]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	441a      	add	r2, r3
 800ae42:	89fb      	ldrh	r3, [r7, #14]
 800ae44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	7b1b      	ldrb	r3, [r3, #12]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f040 809d 	bne.w	800afb4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	785b      	ldrb	r3, [r3, #1]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d04c      	beq.n	800af1c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	823b      	strh	r3, [r7, #16]
 800ae90:	8a3b      	ldrh	r3, [r7, #16]
 800ae92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d01b      	beq.n	800aed2 <USB_EPClearStall+0x6c>
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	4413      	add	r3, r2
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb0:	81fb      	strh	r3, [r7, #14]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	441a      	add	r2, r3
 800aebc:	89fb      	ldrh	r3, [r7, #14]
 800aebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aeca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aece:	b29b      	uxth	r3, r3
 800aed0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	78db      	ldrb	r3, [r3, #3]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d06c      	beq.n	800afb4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aef0:	81bb      	strh	r3, [r7, #12]
 800aef2:	89bb      	ldrh	r3, [r7, #12]
 800aef4:	f083 0320 	eor.w	r3, r3, #32
 800aef8:	81bb      	strh	r3, [r7, #12]
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	009b      	lsls	r3, r3, #2
 800af02:	441a      	add	r2, r3
 800af04:	89bb      	ldrh	r3, [r7, #12]
 800af06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af16:	b29b      	uxth	r3, r3
 800af18:	8013      	strh	r3, [r2, #0]
 800af1a:	e04b      	b.n	800afb4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	4413      	add	r3, r2
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	82fb      	strh	r3, [r7, #22]
 800af2a:	8afb      	ldrh	r3, [r7, #22]
 800af2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d01b      	beq.n	800af6c <USB_EPClearStall+0x106>
 800af34:	687a      	ldr	r2, [r7, #4]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	b29b      	uxth	r3, r3
 800af42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4a:	82bb      	strh	r3, [r7, #20]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	441a      	add	r2, r3
 800af56:	8abb      	ldrh	r3, [r7, #20]
 800af58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af68:	b29b      	uxth	r3, r3
 800af6a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	881b      	ldrh	r3, [r3, #0]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af82:	827b      	strh	r3, [r7, #18]
 800af84:	8a7b      	ldrh	r3, [r7, #18]
 800af86:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800af8a:	827b      	strh	r3, [r7, #18]
 800af8c:	8a7b      	ldrh	r3, [r7, #18]
 800af8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af92:	827b      	strh	r3, [r7, #18]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	441a      	add	r2, r3
 800af9e:	8a7b      	ldrh	r3, [r7, #18]
 800afa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	371c      	adds	r7, #28
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr

0800afc2 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800afc2:	b480      	push	{r7}
 800afc4:	b083      	sub	sp, #12
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	6078      	str	r0, [r7, #4]
 800afca:	460b      	mov	r3, r1
 800afcc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800afce:	78fb      	ldrb	r3, [r7, #3]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2280      	movs	r2, #128	; 0x80
 800afd8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800aff8:	b29b      	uxth	r3, r3
 800affa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800affe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b002:	b29a      	uxth	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b026:	b29b      	uxth	r3, r3
 800b028:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b050:	b29b      	uxth	r3, r3
 800b052:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b054:	68fb      	ldr	r3, [r7, #12]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b07a:	b480      	push	{r7}
 800b07c:	b08d      	sub	sp, #52	; 0x34
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	4611      	mov	r1, r2
 800b086:	461a      	mov	r2, r3
 800b088:	460b      	mov	r3, r1
 800b08a:	80fb      	strh	r3, [r7, #6]
 800b08c:	4613      	mov	r3, r2
 800b08e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b090:	88bb      	ldrh	r3, [r7, #4]
 800b092:	3301      	adds	r3, #1
 800b094:	085b      	lsrs	r3, r3, #1
 800b096:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0a0:	88fa      	ldrh	r2, [r7, #6]
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b0aa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0b0:	e01b      	b.n	800b0ea <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	69bb      	ldr	r3, [r7, #24]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	b29a      	uxth	r2, r3
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	3302      	adds	r3, #2
 800b0dc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1e0      	bne.n	800b0b2 <USB_WritePMA+0x38>
  }
}
 800b0f0:	bf00      	nop
 800b0f2:	3734      	adds	r7, #52	; 0x34
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b08b      	sub	sp, #44	; 0x2c
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	4611      	mov	r1, r2
 800b108:	461a      	mov	r2, r3
 800b10a:	460b      	mov	r3, r1
 800b10c:	80fb      	strh	r3, [r7, #6]
 800b10e:	4613      	mov	r3, r2
 800b110:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b112:	88bb      	ldrh	r3, [r7, #4]
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	b29b      	uxth	r3, r3
 800b118:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b122:	88fa      	ldrh	r2, [r7, #6]
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b12c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	627b      	str	r3, [r7, #36]	; 0x24
 800b132:	e018      	b.n	800b166 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b134:	6a3b      	ldr	r3, [r7, #32]
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	3302      	adds	r3, #2
 800b140:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	b2da      	uxtb	r2, r3
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	3301      	adds	r3, #1
 800b14e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	0a1b      	lsrs	r3, r3, #8
 800b154:	b2da      	uxtb	r2, r3
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	3301      	adds	r3, #1
 800b15e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b162:	3b01      	subs	r3, #1
 800b164:	627b      	str	r3, [r7, #36]	; 0x24
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d1e3      	bne.n	800b134 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b16c:	88bb      	ldrh	r3, [r7, #4]
 800b16e:	f003 0301 	and.w	r3, r3, #1
 800b172:	b29b      	uxth	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d007      	beq.n	800b188 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b178:	6a3b      	ldr	r3, [r7, #32]
 800b17a:	881b      	ldrh	r3, [r3, #0]
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	b2da      	uxtb	r2, r3
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	701a      	strb	r2, [r3, #0]
  }
}
 800b188:	bf00      	nop
 800b18a:	372c      	adds	r7, #44	; 0x2c
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	460b      	mov	r3, r1
 800b19e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b1a4:	f002 f9e2 	bl	800d56c <malloc>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d105      	bne.n	800b1be <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e066      	b.n	800b28c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	7c1b      	ldrb	r3, [r3, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d119      	bne.n	800b202 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1d2:	2202      	movs	r2, #2
 800b1d4:	2181      	movs	r1, #129	; 0x81
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 ff78 	bl	800d0cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b1e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f001 ff6e 	bl	800d0cc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2210      	movs	r2, #16
 800b1fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b200:	e016      	b.n	800b230 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	2202      	movs	r2, #2
 800b206:	2181      	movs	r1, #129	; 0x81
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f001 ff5f 	bl	800d0cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2201      	movs	r2, #1
 800b212:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b214:	2340      	movs	r3, #64	; 0x40
 800b216:	2202      	movs	r2, #2
 800b218:	2101      	movs	r1, #1
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 ff56 	bl	800d0cc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2210      	movs	r2, #16
 800b22c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b230:	2308      	movs	r3, #8
 800b232:	2203      	movs	r2, #3
 800b234:	2182      	movs	r1, #130	; 0x82
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 ff48 	bl	800d0cc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7c1b      	ldrb	r3, [r3, #16]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d109      	bne.n	800b27a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b270:	2101      	movs	r1, #1
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f002 f8a6 	bl	800d3c4 <USBD_LL_PrepareReceive>
 800b278:	e007      	b.n	800b28a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b280:	2340      	movs	r3, #64	; 0x40
 800b282:	2101      	movs	r1, #1
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f002 f89d 	bl	800d3c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2a0:	2181      	movs	r1, #129	; 0x81
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 ff50 	bl	800d148 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f001 ff49 	bl	800d148 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b2be:	2182      	movs	r1, #130	; 0x82
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f001 ff41 	bl	800d148 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00e      	beq.n	800b2fe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f002 f943 	bl	800d57c <free>
    pdev->pClassData = NULL;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b318:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d03a      	beq.n	800b3a8 <USBD_CDC_Setup+0xa0>
 800b332:	2b20      	cmp	r3, #32
 800b334:	f040 8097 	bne.w	800b466 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	88db      	ldrh	r3, [r3, #6]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d029      	beq.n	800b394 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	b25b      	sxtb	r3, r3
 800b346:	2b00      	cmp	r3, #0
 800b348:	da11      	bge.n	800b36e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b356:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	88d2      	ldrh	r2, [r2, #6]
 800b35c:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b35e:	6939      	ldr	r1, [r7, #16]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	88db      	ldrh	r3, [r3, #6]
 800b364:	461a      	mov	r2, r3
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 fa8d 	bl	800c886 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b36c:	e082      	b.n	800b474 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	785a      	ldrb	r2, [r3, #1]
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	88db      	ldrh	r3, [r3, #6]
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b384:	6939      	ldr	r1, [r7, #16]
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	88db      	ldrh	r3, [r3, #6]
 800b38a:	461a      	mov	r2, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 faa6 	bl	800c8de <USBD_CtlPrepareRx>
      break;
 800b392:	e06f      	b.n	800b474 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	7850      	ldrb	r0, [r2, #1]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	6839      	ldr	r1, [r7, #0]
 800b3a4:	4798      	blx	r3
      break;
 800b3a6:	e065      	b.n	800b474 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	785b      	ldrb	r3, [r3, #1]
 800b3ac:	2b0b      	cmp	r3, #11
 800b3ae:	d84f      	bhi.n	800b450 <USBD_CDC_Setup+0x148>
 800b3b0:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <USBD_CDC_Setup+0xb0>)
 800b3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b6:	bf00      	nop
 800b3b8:	0800b3e9 	.word	0x0800b3e9
 800b3bc:	0800b45f 	.word	0x0800b45f
 800b3c0:	0800b451 	.word	0x0800b451
 800b3c4:	0800b451 	.word	0x0800b451
 800b3c8:	0800b451 	.word	0x0800b451
 800b3cc:	0800b451 	.word	0x0800b451
 800b3d0:	0800b451 	.word	0x0800b451
 800b3d4:	0800b451 	.word	0x0800b451
 800b3d8:	0800b451 	.word	0x0800b451
 800b3dc:	0800b451 	.word	0x0800b451
 800b3e0:	0800b411 	.word	0x0800b411
 800b3e4:	0800b439 	.word	0x0800b439
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d107      	bne.n	800b402 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b3f2:	f107 030c 	add.w	r3, r7, #12
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fa43 	bl	800c886 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b400:	e030      	b.n	800b464 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800b402:	6839      	ldr	r1, [r7, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f001 f9cd 	bl	800c7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b40a:	2303      	movs	r3, #3
 800b40c:	75fb      	strb	r3, [r7, #23]
          break;
 800b40e:	e029      	b.n	800b464 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b416:	2b03      	cmp	r3, #3
 800b418:	d107      	bne.n	800b42a <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b41a:	f107 030f 	add.w	r3, r7, #15
 800b41e:	2201      	movs	r2, #1
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 fa2f 	bl	800c886 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b428:	e01c      	b.n	800b464 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 f9b9 	bl	800c7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b432:	2303      	movs	r3, #3
 800b434:	75fb      	strb	r3, [r7, #23]
          break;
 800b436:	e015      	b.n	800b464 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d00f      	beq.n	800b462 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f001 f9ad 	bl	800c7a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b44a:	2303      	movs	r3, #3
 800b44c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b44e:	e008      	b.n	800b462 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 f9a6 	bl	800c7a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b458:	2303      	movs	r3, #3
 800b45a:	75fb      	strb	r3, [r7, #23]
          break;
 800b45c:	e002      	b.n	800b464 <USBD_CDC_Setup+0x15c>
          break;
 800b45e:	bf00      	nop
 800b460:	e008      	b.n	800b474 <USBD_CDC_Setup+0x16c>
          break;
 800b462:	bf00      	nop
      }
      break;
 800b464:	e006      	b.n	800b474 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 f99b 	bl	800c7a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b46e:	2303      	movs	r3, #3
 800b470:	75fb      	strb	r3, [r7, #23]
      break;
 800b472:	bf00      	nop
  }

  return (uint8_t)ret;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop

0800b480 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	460b      	mov	r3, r1
 800b48a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b492:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d101      	bne.n	800b4a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	e04f      	b.n	800b542 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b4aa:	78fa      	ldrb	r2, [r7, #3]
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	4413      	add	r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3318      	adds	r3, #24
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d029      	beq.n	800b514 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b4c0:	78fa      	ldrb	r2, [r7, #3]
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	3318      	adds	r3, #24
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	78f9      	ldrb	r1, [r7, #3]
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	440b      	add	r3, r1
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	4403      	add	r3, r0
 800b4e0:	3338      	adds	r3, #56	; 0x38
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b4e8:	fb03 f301 	mul.w	r3, r3, r1
 800b4ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d110      	bne.n	800b514 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	3318      	adds	r3, #24
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b506:	78f9      	ldrb	r1, [r7, #3]
 800b508:	2300      	movs	r3, #0
 800b50a:	2200      	movs	r2, #0
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f001 ff21 	bl	800d354 <USBD_LL_Transmit>
 800b512:	e015      	b.n	800b540 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	2200      	movs	r2, #0
 800b518:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b522:	691b      	ldr	r3, [r3, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00b      	beq.n	800b540 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b52e:	691b      	ldr	r3, [r3, #16]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b084      	sub	sp, #16
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	460b      	mov	r3, r1
 800b554:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b55c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b564:	2b00      	cmp	r3, #0
 800b566:	d101      	bne.n	800b56c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b568:	2303      	movs	r3, #3
 800b56a:	e015      	b.n	800b598 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 ff5f 	bl	800d434 <USBD_LL_GetRxDataSize>
 800b576:	4602      	mov	r2, r0
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b592:	4611      	mov	r1, r2
 800b594:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d015      	beq.n	800b5e6 <USBD_CDC_EP0_RxReady+0x46>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b5c0:	2bff      	cmp	r3, #255	; 0xff
 800b5c2:	d010      	beq.n	800b5e6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b5d2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5da:	b292      	uxth	r2, r2
 800b5dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	22ff      	movs	r2, #255	; 0xff
 800b5e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3710      	adds	r7, #16
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b083      	sub	sp, #12
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2243      	movs	r2, #67	; 0x43
 800b5fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b5fe:	4b03      	ldr	r3, [pc, #12]	; (800b60c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b600:	4618      	mov	r0, r3
 800b602:	370c      	adds	r7, #12
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	20000094 	.word	0x20000094

0800b610 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2243      	movs	r2, #67	; 0x43
 800b61c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b61e:	4b03      	ldr	r3, [pc, #12]	; (800b62c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b620:	4618      	mov	r0, r3
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	20000050 	.word	0x20000050

0800b630 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2243      	movs	r2, #67	; 0x43
 800b63c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b63e:	4b03      	ldr	r3, [pc, #12]	; (800b64c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr
 800b64c:	200000d8 	.word	0x200000d8

0800b650 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	220a      	movs	r2, #10
 800b65c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b65e:	4b03      	ldr	r3, [pc, #12]	; (800b66c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b660:	4618      	mov	r0, r3
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	2000000c 	.word	0x2000000c

0800b670 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b680:	2303      	movs	r3, #3
 800b682:	e004      	b.n	800b68e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b68c:	2300      	movs	r3, #0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	370c      	adds	r7, #12
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr

0800b69a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b087      	sub	sp, #28
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	60f8      	str	r0, [r7, #12]
 800b6a2:	60b9      	str	r1, [r7, #8]
 800b6a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ac:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	687a      	ldr	r2, [r7, #4]
 800b6ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	371c      	adds	r7, #28
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6dc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3714      	adds	r7, #20
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b702:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b704:	2301      	movs	r3, #1
 800b706:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b712:	2303      	movs	r3, #3
 800b714:	e01a      	b.n	800b74c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d114      	bne.n	800b74a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2201      	movs	r2, #1
 800b724:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b73e:	2181      	movs	r1, #129	; 0x81
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 fe07 	bl	800d354 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b762:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b76e:	2303      	movs	r3, #3
 800b770:	e016      	b.n	800b7a0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	7c1b      	ldrb	r3, [r3, #16]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d109      	bne.n	800b78e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b780:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b784:	2101      	movs	r1, #1
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f001 fe1c 	bl	800d3c4 <USBD_LL_PrepareReceive>
 800b78c:	e007      	b.n	800b79e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b794:	2340      	movs	r3, #64	; 0x40
 800b796:	2101      	movs	r1, #1
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 fe13 	bl	800d3c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e01f      	b.n	800b800 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	79fa      	ldrb	r2, [r7, #7]
 800b7f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 fbd5 	bl	800cfa4 <USBD_LL_Init>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e016      	b.n	800b84e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00b      	beq.n	800b84c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	f107 020e 	add.w	r2, r7, #14
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
 800b844:	4602      	mov	r2, r0
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f001 fc02 	bl	800d068 <USBD_LL_Start>
 800b864:	4603      	mov	r3, r0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b86e:	b480      	push	{r7}
 800b870:	b083      	sub	sp, #12
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b876:	2300      	movs	r3, #0
}
 800b878:	4618      	mov	r0, r3
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b890:	2303      	movs	r3, #3
 800b892:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d009      	beq.n	800b8b2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	78fa      	ldrb	r2, [r7, #3]
 800b8a8:	4611      	mov	r1, r2
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	4798      	blx	r3
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d007      	beq.n	800b8e2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	78fa      	ldrb	r2, [r7, #3]
 800b8dc:	4611      	mov	r1, r2
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	4798      	blx	r3
  }

  return USBD_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 ff16 	bl	800c730 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b912:	461a      	mov	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b920:	f003 031f 	and.w	r3, r3, #31
 800b924:	2b01      	cmp	r3, #1
 800b926:	d00e      	beq.n	800b946 <USBD_LL_SetupStage+0x5a>
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d302      	bcc.n	800b932 <USBD_LL_SetupStage+0x46>
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d014      	beq.n	800b95a <USBD_LL_SetupStage+0x6e>
 800b930:	e01d      	b.n	800b96e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 f9d6 	bl	800bcec <USBD_StdDevReq>
 800b940:	4603      	mov	r3, r0
 800b942:	73fb      	strb	r3, [r7, #15]
      break;
 800b944:	e020      	b.n	800b988 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b94c:	4619      	mov	r1, r3
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fa3a 	bl	800bdc8 <USBD_StdItfReq>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
      break;
 800b958:	e016      	b.n	800b988 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fa76 	bl	800be54 <USBD_StdEPReq>
 800b968:	4603      	mov	r3, r0
 800b96a:	73fb      	strb	r3, [r7, #15]
      break;
 800b96c:	e00c      	b.n	800b988 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b974:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	4619      	mov	r1, r3
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 fc19 	bl	800d1b4 <USBD_LL_StallEP>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
      break;
 800b986:	bf00      	nop
  }

  return ret;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b086      	sub	sp, #24
 800b996:	af00      	add	r7, sp, #0
 800b998:	60f8      	str	r0, [r7, #12]
 800b99a:	460b      	mov	r3, r1
 800b99c:	607a      	str	r2, [r7, #4]
 800b99e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9a0:	7afb      	ldrb	r3, [r7, #11]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d137      	bne.n	800ba16 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	d14a      	bne.n	800ba4e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	689a      	ldr	r2, [r3, #8]
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d913      	bls.n	800b9ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	1ad2      	subs	r2, r2, r3
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	bf28      	it	cs
 800b9de:	4613      	movcs	r3, r2
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	6879      	ldr	r1, [r7, #4]
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 ff97 	bl	800c918 <USBD_CtlContinueRx>
 800b9ea:	e030      	b.n	800ba4e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f2:	691b      	ldr	r3, [r3, #16]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00a      	beq.n	800ba0e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	d105      	bne.n	800ba0e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ba0e:	68f8      	ldr	r0, [r7, #12]
 800ba10:	f000 ff93 	bl	800c93a <USBD_CtlSendStatus>
 800ba14:	e01b      	b.n	800ba4e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d013      	beq.n	800ba4a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba28:	2b03      	cmp	r3, #3
 800ba2a:	d10e      	bne.n	800ba4a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	7afa      	ldrb	r2, [r7, #11]
 800ba36:	4611      	mov	r1, r2
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	4798      	blx	r3
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ba46:	7dfb      	ldrb	r3, [r7, #23]
 800ba48:	e002      	b.n	800ba50 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e000      	b.n	800ba50 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b086      	sub	sp, #24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	460b      	mov	r3, r1
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d16a      	bne.n	800bb42 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3314      	adds	r3, #20
 800ba70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d155      	bne.n	800bb28 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d914      	bls.n	800bab2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	1ad2      	subs	r2, r2, r3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	6879      	ldr	r1, [r7, #4]
 800ba9e:	68f8      	ldr	r0, [r7, #12]
 800baa0:	f000 ff0c 	bl	800c8bc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baa4:	2300      	movs	r3, #0
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	68f8      	ldr	r0, [r7, #12]
 800baac:	f001 fc8a 	bl	800d3c4 <USBD_LL_PrepareReceive>
 800bab0:	e03a      	b.n	800bb28 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	d11c      	bne.n	800baf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	685a      	ldr	r2, [r3, #4]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d316      	bcc.n	800baf8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	685a      	ldr	r2, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d20f      	bcs.n	800baf8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bad8:	2200      	movs	r2, #0
 800bada:	2100      	movs	r1, #0
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 feed 	bl	800c8bc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	2100      	movs	r1, #0
 800baf0:	68f8      	ldr	r0, [r7, #12]
 800baf2:	f001 fc67 	bl	800d3c4 <USBD_LL_PrepareReceive>
 800baf6:	e017      	b.n	800bb28 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00a      	beq.n	800bb1a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d105      	bne.n	800bb1a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb1a:	2180      	movs	r1, #128	; 0x80
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f001 fb49 	bl	800d1b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	f000 ff1c 	bl	800c960 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d123      	bne.n	800bb7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff fe9b 	bl	800b86e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bb40:	e01b      	b.n	800bb7a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb48:	695b      	ldr	r3, [r3, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d013      	beq.n	800bb76 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d10e      	bne.n	800bb76 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	7afa      	ldrb	r2, [r7, #11]
 800bb62:	4611      	mov	r1, r2
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	4798      	blx	r3
 800bb68:	4603      	mov	r3, r0
 800bb6a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d003      	beq.n	800bb7a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
 800bb74:	e002      	b.n	800bb7c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bb76:	2303      	movs	r3, #3
 800bb78:	e000      	b.n	800bb7c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3718      	adds	r7, #24
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d009      	beq.n	800bbc8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	6852      	ldr	r2, [r2, #4]
 800bbc0:	b2d2      	uxtb	r2, r2
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbc8:	2340      	movs	r3, #64	; 0x40
 800bbca:	2200      	movs	r2, #0
 800bbcc:	2100      	movs	r1, #0
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f001 fa7c 	bl	800d0cc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2240      	movs	r2, #64	; 0x40
 800bbe0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbe4:	2340      	movs	r3, #64	; 0x40
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	2180      	movs	r1, #128	; 0x80
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f001 fa6e 	bl	800d0cc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2240      	movs	r2, #64	; 0x40
 800bbfa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3708      	adds	r7, #8
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}

0800bc06 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
 800bc0e:	460b      	mov	r3, r1
 800bc10:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	78fa      	ldrb	r2, [r7, #3]
 800bc16:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	370c      	adds	r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2204      	movs	r2, #4
 800bc3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d105      	bne.n	800bc6e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8a:	2b03      	cmp	r3, #3
 800bc8c:	d10b      	bne.n	800bca6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d005      	beq.n	800bca6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca0:	69db      	ldr	r3, [r3, #28]
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b087      	sub	sp, #28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bcce:	8a3b      	ldrh	r3, [r7, #16]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	b21a      	sxth	r2, r3
 800bcd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	b21b      	sxth	r3, r3
 800bcdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bcde:	89fb      	ldrh	r3, [r7, #14]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	371c      	adds	r7, #28
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd02:	2b20      	cmp	r3, #32
 800bd04:	d004      	beq.n	800bd10 <USBD_StdDevReq+0x24>
 800bd06:	2b40      	cmp	r3, #64	; 0x40
 800bd08:	d002      	beq.n	800bd10 <USBD_StdDevReq+0x24>
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d00a      	beq.n	800bd24 <USBD_StdDevReq+0x38>
 800bd0e:	e050      	b.n	800bdb2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	4798      	blx	r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73fb      	strb	r3, [r7, #15]
    break;
 800bd22:	e04b      	b.n	800bdbc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	785b      	ldrb	r3, [r3, #1]
 800bd28:	2b09      	cmp	r3, #9
 800bd2a:	d83c      	bhi.n	800bda6 <USBD_StdDevReq+0xba>
 800bd2c:	a201      	add	r2, pc, #4	; (adr r2, 800bd34 <USBD_StdDevReq+0x48>)
 800bd2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd32:	bf00      	nop
 800bd34:	0800bd89 	.word	0x0800bd89
 800bd38:	0800bd9d 	.word	0x0800bd9d
 800bd3c:	0800bda7 	.word	0x0800bda7
 800bd40:	0800bd93 	.word	0x0800bd93
 800bd44:	0800bda7 	.word	0x0800bda7
 800bd48:	0800bd67 	.word	0x0800bd67
 800bd4c:	0800bd5d 	.word	0x0800bd5d
 800bd50:	0800bda7 	.word	0x0800bda7
 800bd54:	0800bd7f 	.word	0x0800bd7f
 800bd58:	0800bd71 	.word	0x0800bd71
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f9d0 	bl	800c104 <USBD_GetDescriptor>
      break;
 800bd64:	e024      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 fb5f 	bl	800c42c <USBD_SetAddress>
      break;
 800bd6e:	e01f      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fb9c 	bl	800c4b0 <USBD_SetConfig>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd7c:	e018      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bd7e:	6839      	ldr	r1, [r7, #0]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fc39 	bl	800c5f8 <USBD_GetConfig>
      break;
 800bd86:	e013      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fc68 	bl	800c660 <USBD_GetStatus>
      break;
 800bd90:	e00e      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bd92:	6839      	ldr	r1, [r7, #0]
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f000 fc96 	bl	800c6c6 <USBD_SetFeature>
      break;
 800bd9a:	e009      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fca5 	bl	800c6ee <USBD_ClrFeature>
      break;
 800bda4:	e004      	b.n	800bdb0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bda6:	6839      	ldr	r1, [r7, #0]
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f000 fcfb 	bl	800c7a4 <USBD_CtlError>
      break;
 800bdae:	bf00      	nop
    }
    break;
 800bdb0:	e004      	b.n	800bdbc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fcf5 	bl	800c7a4 <USBD_CtlError>
    break;
 800bdba:	bf00      	nop
  }

  return ret;
 800bdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop

0800bdc8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b084      	sub	sp, #16
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	d003      	beq.n	800bdea <USBD_StdItfReq+0x22>
 800bde2:	2b40      	cmp	r3, #64	; 0x40
 800bde4:	d001      	beq.n	800bdea <USBD_StdItfReq+0x22>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d12a      	bne.n	800be40 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d81d      	bhi.n	800be32 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	889b      	ldrh	r3, [r3, #4]
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d813      	bhi.n	800be28 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
 800be0e:	4603      	mov	r3, r0
 800be10:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	88db      	ldrh	r3, [r3, #6]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d110      	bne.n	800be3c <USBD_StdItfReq+0x74>
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d10d      	bne.n	800be3c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 fd8a 	bl	800c93a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800be26:	e009      	b.n	800be3c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fcba 	bl	800c7a4 <USBD_CtlError>
      break;
 800be30:	e004      	b.n	800be3c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fcb5 	bl	800c7a4 <USBD_CtlError>
      break;
 800be3a:	e000      	b.n	800be3e <USBD_StdItfReq+0x76>
      break;
 800be3c:	bf00      	nop
    }
    break;
 800be3e:	e004      	b.n	800be4a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fcae 	bl	800c7a4 <USBD_CtlError>
    break;
 800be48:	bf00      	nop
  }

  return ret;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	889b      	ldrh	r3, [r3, #4]
 800be66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be70:	2b20      	cmp	r3, #32
 800be72:	d004      	beq.n	800be7e <USBD_StdEPReq+0x2a>
 800be74:	2b40      	cmp	r3, #64	; 0x40
 800be76:	d002      	beq.n	800be7e <USBD_StdEPReq+0x2a>
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00a      	beq.n	800be92 <USBD_StdEPReq+0x3e>
 800be7c:	e137      	b.n	800c0ee <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	4798      	blx	r3
 800be8c:	4603      	mov	r3, r0
 800be8e:	73fb      	strb	r3, [r7, #15]
    break;
 800be90:	e132      	b.n	800c0f8 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	785b      	ldrb	r3, [r3, #1]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d03e      	beq.n	800bf18 <USBD_StdEPReq+0xc4>
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d002      	beq.n	800bea4 <USBD_StdEPReq+0x50>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d079      	beq.n	800bf96 <USBD_StdEPReq+0x142>
 800bea2:	e11e      	b.n	800c0e2 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d002      	beq.n	800beb4 <USBD_StdEPReq+0x60>
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d015      	beq.n	800bede <USBD_StdEPReq+0x8a>
 800beb2:	e02b      	b.n	800bf0c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00c      	beq.n	800bed4 <USBD_StdEPReq+0x80>
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b80      	cmp	r3, #128	; 0x80
 800bebe:	d009      	beq.n	800bed4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 f975 	bl	800d1b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800beca:	2180      	movs	r1, #128	; 0x80
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f001 f971 	bl	800d1b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bed2:	e020      	b.n	800bf16 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fc64 	bl	800c7a4 <USBD_CtlError>
        break;
 800bedc:	e01b      	b.n	800bf16 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10e      	bne.n	800bf04 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d00b      	beq.n	800bf04 <USBD_StdEPReq+0xb0>
 800beec:	7bbb      	ldrb	r3, [r7, #14]
 800beee:	2b80      	cmp	r3, #128	; 0x80
 800bef0:	d008      	beq.n	800bf04 <USBD_StdEPReq+0xb0>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	88db      	ldrh	r3, [r3, #6]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800befa:	7bbb      	ldrb	r3, [r7, #14]
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f001 f958 	bl	800d1b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 fd18 	bl	800c93a <USBD_CtlSendStatus>

        break;
 800bf0a:	e004      	b.n	800bf16 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fc48 	bl	800c7a4 <USBD_CtlError>
        break;
 800bf14:	bf00      	nop
      }
      break;
 800bf16:	e0e9      	b.n	800c0ec <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d002      	beq.n	800bf28 <USBD_StdEPReq+0xd4>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d015      	beq.n	800bf52 <USBD_StdEPReq+0xfe>
 800bf26:	e02f      	b.n	800bf88 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00c      	beq.n	800bf48 <USBD_StdEPReq+0xf4>
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b80      	cmp	r3, #128	; 0x80
 800bf32:	d009      	beq.n	800bf48 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f001 f93b 	bl	800d1b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 f937 	bl	800d1b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bf46:	e025      	b.n	800bf94 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 fc2a 	bl	800c7a4 <USBD_CtlError>
        break;
 800bf50:	e020      	b.n	800bf94 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	885b      	ldrh	r3, [r3, #2]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d11b      	bne.n	800bf92 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	4619      	mov	r1, r3
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f001 f959 	bl	800d220 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fce3 	bl	800c93a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	6839      	ldr	r1, [r7, #0]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	4798      	blx	r3
 800bf82:	4603      	mov	r3, r0
 800bf84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bf86:	e004      	b.n	800bf92 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fc0a 	bl	800c7a4 <USBD_CtlError>
        break;
 800bf90:	e000      	b.n	800bf94 <USBD_StdEPReq+0x140>
        break;
 800bf92:	bf00      	nop
      }
      break;
 800bf94:	e0aa      	b.n	800c0ec <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf9c:	2b02      	cmp	r3, #2
 800bf9e:	d002      	beq.n	800bfa6 <USBD_StdEPReq+0x152>
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	d032      	beq.n	800c00a <USBD_StdEPReq+0x1b6>
 800bfa4:	e097      	b.n	800c0d6 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d007      	beq.n	800bfbc <USBD_StdEPReq+0x168>
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	2b80      	cmp	r3, #128	; 0x80
 800bfb0:	d004      	beq.n	800bfbc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fbf5 	bl	800c7a4 <USBD_CtlError>
          break;
 800bfba:	e091      	b.n	800c0e0 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	da0b      	bge.n	800bfdc <USBD_StdEPReq+0x188>
 800bfc4:	7bbb      	ldrb	r3, [r7, #14]
 800bfc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bfca:	4613      	mov	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	3310      	adds	r3, #16
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	3304      	adds	r3, #4
 800bfda:	e00b      	b.n	800bff4 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bfdc:	7bbb      	ldrb	r3, [r7, #14]
 800bfde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	009b      	lsls	r3, r3, #2
 800bfe6:	4413      	add	r3, r2
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	4413      	add	r3, r2
 800bff2:	3304      	adds	r3, #4
 800bff4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2202      	movs	r2, #2
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fc3f 	bl	800c886 <USBD_CtlSendData>
        break;
 800c008:	e06a      	b.n	800c0e0 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	da11      	bge.n	800c036 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	f003 020f 	and.w	r2, r3, #15
 800c018:	6879      	ldr	r1, [r7, #4]
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	440b      	add	r3, r1
 800c024:	3324      	adds	r3, #36	; 0x24
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d117      	bne.n	800c05c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fbb8 	bl	800c7a4 <USBD_CtlError>
            break;
 800c034:	e054      	b.n	800c0e0 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c036:	7bbb      	ldrb	r3, [r7, #14]
 800c038:	f003 020f 	and.w	r2, r3, #15
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	4613      	mov	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4413      	add	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	440b      	add	r3, r1
 800c048:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c04c:	881b      	ldrh	r3, [r3, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d104      	bne.n	800c05c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fba5 	bl	800c7a4 <USBD_CtlError>
            break;
 800c05a:	e041      	b.n	800c0e0 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c05c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c060:	2b00      	cmp	r3, #0
 800c062:	da0b      	bge.n	800c07c <USBD_StdEPReq+0x228>
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c06a:	4613      	mov	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	3310      	adds	r3, #16
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	4413      	add	r3, r2
 800c078:	3304      	adds	r3, #4
 800c07a:	e00b      	b.n	800c094 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	4413      	add	r3, r2
 800c092:	3304      	adds	r3, #4
 800c094:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d002      	beq.n	800c0a2 <USBD_StdEPReq+0x24e>
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	2b80      	cmp	r3, #128	; 0x80
 800c0a0:	d103      	bne.n	800c0aa <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e00e      	b.n	800c0c8 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 f8ec 	bl	800d28c <USBD_LL_IsStallEP>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	601a      	str	r2, [r3, #0]
 800c0c0:	e002      	b.n	800c0c8 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	2202      	movs	r2, #2
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fbd9 	bl	800c886 <USBD_CtlSendData>
          break;
 800c0d4:	e004      	b.n	800c0e0 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fb63 	bl	800c7a4 <USBD_CtlError>
        break;
 800c0de:	bf00      	nop
      }
      break;
 800c0e0:	e004      	b.n	800c0ec <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fb5d 	bl	800c7a4 <USBD_CtlError>
      break;
 800c0ea:	bf00      	nop
    }
    break;
 800c0ec:	e004      	b.n	800c0f8 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800c0ee:	6839      	ldr	r1, [r7, #0]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fb57 	bl	800c7a4 <USBD_CtlError>
    break;
 800c0f6:	bf00      	nop
  }

  return ret;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
	...

0800c104 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	885b      	ldrh	r3, [r3, #2]
 800c11e:	0a1b      	lsrs	r3, r3, #8
 800c120:	b29b      	uxth	r3, r3
 800c122:	3b01      	subs	r3, #1
 800c124:	2b0e      	cmp	r3, #14
 800c126:	f200 8152 	bhi.w	800c3ce <USBD_GetDescriptor+0x2ca>
 800c12a:	a201      	add	r2, pc, #4	; (adr r2, 800c130 <USBD_GetDescriptor+0x2c>)
 800c12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c130:	0800c1a1 	.word	0x0800c1a1
 800c134:	0800c1b9 	.word	0x0800c1b9
 800c138:	0800c1f9 	.word	0x0800c1f9
 800c13c:	0800c3cf 	.word	0x0800c3cf
 800c140:	0800c3cf 	.word	0x0800c3cf
 800c144:	0800c36f 	.word	0x0800c36f
 800c148:	0800c39b 	.word	0x0800c39b
 800c14c:	0800c3cf 	.word	0x0800c3cf
 800c150:	0800c3cf 	.word	0x0800c3cf
 800c154:	0800c3cf 	.word	0x0800c3cf
 800c158:	0800c3cf 	.word	0x0800c3cf
 800c15c:	0800c3cf 	.word	0x0800c3cf
 800c160:	0800c3cf 	.word	0x0800c3cf
 800c164:	0800c3cf 	.word	0x0800c3cf
 800c168:	0800c16d 	.word	0x0800c16d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00b      	beq.n	800c190 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	7c12      	ldrb	r2, [r2, #16]
 800c184:	f107 0108 	add.w	r1, r7, #8
 800c188:	4610      	mov	r0, r2
 800c18a:	4798      	blx	r3
 800c18c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c18e:	e126      	b.n	800c3de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c190:	6839      	ldr	r1, [r7, #0]
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 fb06 	bl	800c7a4 <USBD_CtlError>
      err++;
 800c198:	7afb      	ldrb	r3, [r7, #11]
 800c19a:	3301      	adds	r3, #1
 800c19c:	72fb      	strb	r3, [r7, #11]
    break;
 800c19e:	e11e      	b.n	800c3de <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	7c12      	ldrb	r2, [r2, #16]
 800c1ac:	f107 0108 	add.w	r1, r7, #8
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	4798      	blx	r3
 800c1b4:	60f8      	str	r0, [r7, #12]
    break;
 800c1b6:	e112      	b.n	800c3de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7c1b      	ldrb	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10d      	bne.n	800c1dc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c8:	f107 0208 	add.w	r2, r7, #8
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c1da:	e100      	b.n	800c3de <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	f107 0208 	add.w	r2, r7, #8
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	4798      	blx	r3
 800c1ec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	701a      	strb	r2, [r3, #0]
    break;
 800c1f6:	e0f2      	b.n	800c3de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	885b      	ldrh	r3, [r3, #2]
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	f200 80ac 	bhi.w	800c35c <USBD_GetDescriptor+0x258>
 800c204:	a201      	add	r2, pc, #4	; (adr r2, 800c20c <USBD_GetDescriptor+0x108>)
 800c206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20a:	bf00      	nop
 800c20c:	0800c225 	.word	0x0800c225
 800c210:	0800c259 	.word	0x0800c259
 800c214:	0800c28d 	.word	0x0800c28d
 800c218:	0800c2c1 	.word	0x0800c2c1
 800c21c:	0800c2f5 	.word	0x0800c2f5
 800c220:	0800c329 	.word	0x0800c329
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00b      	beq.n	800c248 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	7c12      	ldrb	r2, [r2, #16]
 800c23c:	f107 0108 	add.w	r1, r7, #8
 800c240:	4610      	mov	r0, r2
 800c242:	4798      	blx	r3
 800c244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c246:	e091      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c248:	6839      	ldr	r1, [r7, #0]
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 faaa 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c250:	7afb      	ldrb	r3, [r7, #11]
 800c252:	3301      	adds	r3, #1
 800c254:	72fb      	strb	r3, [r7, #11]
      break;
 800c256:	e089      	b.n	800c36c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00b      	beq.n	800c27c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	7c12      	ldrb	r2, [r2, #16]
 800c270:	f107 0108 	add.w	r1, r7, #8
 800c274:	4610      	mov	r0, r2
 800c276:	4798      	blx	r3
 800c278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c27a:	e077      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fa90 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c284:	7afb      	ldrb	r3, [r7, #11]
 800c286:	3301      	adds	r3, #1
 800c288:	72fb      	strb	r3, [r7, #11]
      break;
 800c28a:	e06f      	b.n	800c36c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00b      	beq.n	800c2b0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	7c12      	ldrb	r2, [r2, #16]
 800c2a4:	f107 0108 	add.w	r1, r7, #8
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2ae:	e05d      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c2b0:	6839      	ldr	r1, [r7, #0]
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 fa76 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c2b8:	7afb      	ldrb	r3, [r7, #11]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	72fb      	strb	r3, [r7, #11]
      break;
 800c2be:	e055      	b.n	800c36c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d00b      	beq.n	800c2e4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	7c12      	ldrb	r2, [r2, #16]
 800c2d8:	f107 0108 	add.w	r1, r7, #8
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4798      	blx	r3
 800c2e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2e2:	e043      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fa5c 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c2ec:	7afb      	ldrb	r3, [r7, #11]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c2f2:	e03b      	b.n	800c36c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00b      	beq.n	800c318 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	7c12      	ldrb	r2, [r2, #16]
 800c30c:	f107 0108 	add.w	r1, r7, #8
 800c310:	4610      	mov	r0, r2
 800c312:	4798      	blx	r3
 800c314:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c316:	e029      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fa42 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	3301      	adds	r3, #1
 800c324:	72fb      	strb	r3, [r7, #11]
      break;
 800c326:	e021      	b.n	800c36c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	699b      	ldr	r3, [r3, #24]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00b      	beq.n	800c34c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	7c12      	ldrb	r2, [r2, #16]
 800c340:	f107 0108 	add.w	r1, r7, #8
 800c344:	4610      	mov	r0, r2
 800c346:	4798      	blx	r3
 800c348:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c34a:	e00f      	b.n	800c36c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa28 	bl	800c7a4 <USBD_CtlError>
        err++;
 800c354:	7afb      	ldrb	r3, [r7, #11]
 800c356:	3301      	adds	r3, #1
 800c358:	72fb      	strb	r3, [r7, #11]
      break;
 800c35a:	e007      	b.n	800c36c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 fa20 	bl	800c7a4 <USBD_CtlError>
      err++;
 800c364:	7afb      	ldrb	r3, [r7, #11]
 800c366:	3301      	adds	r3, #1
 800c368:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c36a:	bf00      	nop
    }
    break;
 800c36c:	e037      	b.n	800c3de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	7c1b      	ldrb	r3, [r3, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d109      	bne.n	800c38a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c37e:	f107 0208 	add.w	r2, r7, #8
 800c382:	4610      	mov	r0, r2
 800c384:	4798      	blx	r3
 800c386:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c388:	e029      	b.n	800c3de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fa09 	bl	800c7a4 <USBD_CtlError>
      err++;
 800c392:	7afb      	ldrb	r3, [r7, #11]
 800c394:	3301      	adds	r3, #1
 800c396:	72fb      	strb	r3, [r7, #11]
    break;
 800c398:	e021      	b.n	800c3de <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	7c1b      	ldrb	r3, [r3, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10d      	bne.n	800c3be <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3aa:	f107 0208 	add.w	r2, r7, #8
 800c3ae:	4610      	mov	r0, r2
 800c3b0:	4798      	blx	r3
 800c3b2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	2207      	movs	r2, #7
 800c3ba:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c3bc:	e00f      	b.n	800c3de <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f9ef 	bl	800c7a4 <USBD_CtlError>
      err++;
 800c3c6:	7afb      	ldrb	r3, [r7, #11]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	72fb      	strb	r3, [r7, #11]
    break;
 800c3cc:	e007      	b.n	800c3de <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c3ce:	6839      	ldr	r1, [r7, #0]
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f9e7 	bl	800c7a4 <USBD_CtlError>
    err++;
 800c3d6:	7afb      	ldrb	r3, [r7, #11]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	72fb      	strb	r3, [r7, #11]
    break;
 800c3dc:	bf00      	nop
  }

  if (err != 0U)
 800c3de:	7afb      	ldrb	r3, [r7, #11]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d11e      	bne.n	800c422 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	88db      	ldrh	r3, [r3, #6]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d016      	beq.n	800c41a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c3ec:	893b      	ldrh	r3, [r7, #8]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00e      	beq.n	800c410 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	88da      	ldrh	r2, [r3, #6]
 800c3f6:	893b      	ldrh	r3, [r7, #8]
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	bf28      	it	cs
 800c3fc:	4613      	movcs	r3, r2
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c402:	893b      	ldrh	r3, [r7, #8]
 800c404:	461a      	mov	r2, r3
 800c406:	68f9      	ldr	r1, [r7, #12]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa3c 	bl	800c886 <USBD_CtlSendData>
 800c40e:	e009      	b.n	800c424 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 f9c6 	bl	800c7a4 <USBD_CtlError>
 800c418:	e004      	b.n	800c424 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa8d 	bl	800c93a <USBD_CtlSendStatus>
 800c420:	e000      	b.n	800c424 <USBD_GetDescriptor+0x320>
    return;
 800c422:	bf00      	nop
    }
  }
}
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop

0800c42c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	889b      	ldrh	r3, [r3, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d130      	bne.n	800c4a0 <USBD_SetAddress+0x74>
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	88db      	ldrh	r3, [r3, #6]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d12c      	bne.n	800c4a0 <USBD_SetAddress+0x74>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	2b7f      	cmp	r3, #127	; 0x7f
 800c44c:	d828      	bhi.n	800c4a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c460:	2b03      	cmp	r3, #3
 800c462:	d104      	bne.n	800c46e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f99c 	bl	800c7a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c46c:	e01c      	b.n	800c4a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	7bfa      	ldrb	r2, [r7, #15]
 800c472:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	4619      	mov	r1, r3
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 ff34 	bl	800d2e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fa5a 	bl	800c93a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d004      	beq.n	800c496 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c494:	e008      	b.n	800c4a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2201      	movs	r2, #1
 800c49a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49e:	e003      	b.n	800c4a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 f97e 	bl	800c7a4 <USBD_CtlError>
  }
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	885b      	ldrh	r3, [r3, #2]
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	4b4b      	ldr	r3, [pc, #300]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c4c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4c8:	4b4a      	ldr	r3, [pc, #296]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d905      	bls.n	800c4dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 f966 	bl	800c7a4 <USBD_CtlError>
    return USBD_FAIL;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	e087      	b.n	800c5ec <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e2:	2b02      	cmp	r3, #2
 800c4e4:	d002      	beq.n	800c4ec <USBD_SetConfig+0x3c>
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d025      	beq.n	800c536 <USBD_SetConfig+0x86>
 800c4ea:	e071      	b.n	800c5d0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c4ec:	4b41      	ldr	r3, [pc, #260]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d01c      	beq.n	800c52e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c4f4:	4b3f      	ldr	r3, [pc, #252]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4fe:	4b3d      	ldr	r3, [pc, #244]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	4619      	mov	r1, r3
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff f9bd 	bl	800b884 <USBD_SetClassConfig>
 800c50a:	4603      	mov	r3, r0
 800c50c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c50e:	7bfb      	ldrb	r3, [r7, #15]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f944 	bl	800c7a4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c51c:	e065      	b.n	800c5ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa0b 	bl	800c93a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2203      	movs	r2, #3
 800c528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c52c:	e05d      	b.n	800c5ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa03 	bl	800c93a <USBD_CtlSendStatus>
    break;
 800c534:	e059      	b.n	800c5ea <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c536:	4b2f      	ldr	r3, [pc, #188]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d112      	bne.n	800c564 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2202      	movs	r2, #2
 800c542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c546:	4b2b      	ldr	r3, [pc, #172]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	461a      	mov	r2, r3
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c550:	4b28      	ldr	r3, [pc, #160]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff f9b0 	bl	800b8bc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 f9ec 	bl	800c93a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c562:	e042      	b.n	800c5ea <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c564:	4b23      	ldr	r3, [pc, #140]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	461a      	mov	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d02a      	beq.n	800c5c8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	b2db      	uxtb	r3, r3
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff f99e 	bl	800b8bc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c580:	4b1c      	ldr	r3, [pc, #112]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	461a      	mov	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c58a:	4b1a      	ldr	r3, [pc, #104]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	4619      	mov	r1, r3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f7ff f977 	bl	800b884 <USBD_SetClassConfig>
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00f      	beq.n	800c5c0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c5a0:	6839      	ldr	r1, [r7, #0]
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f000 f8fe 	bl	800c7a4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	b2db      	uxtb	r3, r3
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7ff f983 	bl	800b8bc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c5be:	e014      	b.n	800c5ea <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f9ba 	bl	800c93a <USBD_CtlSendStatus>
    break;
 800c5c6:	e010      	b.n	800c5ea <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f000 f9b6 	bl	800c93a <USBD_CtlSendStatus>
    break;
 800c5ce:	e00c      	b.n	800c5ea <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f8e6 	bl	800c7a4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5d8:	4b06      	ldr	r3, [pc, #24]	; (800c5f4 <USBD_SetConfig+0x144>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff f96c 	bl	800b8bc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e8:	bf00      	nop
  }

  return ret;
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3710      	adds	r7, #16
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	20000364 	.word	0x20000364

0800c5f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	88db      	ldrh	r3, [r3, #6]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d004      	beq.n	800c614 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c60a:	6839      	ldr	r1, [r7, #0]
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f8c9 	bl	800c7a4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c612:	e021      	b.n	800c658 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	db17      	blt.n	800c64e <USBD_GetConfig+0x56>
 800c61e:	2b02      	cmp	r3, #2
 800c620:	dd02      	ble.n	800c628 <USBD_GetConfig+0x30>
 800c622:	2b03      	cmp	r3, #3
 800c624:	d00b      	beq.n	800c63e <USBD_GetConfig+0x46>
 800c626:	e012      	b.n	800c64e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3308      	adds	r3, #8
 800c632:	2201      	movs	r2, #1
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f925 	bl	800c886 <USBD_CtlSendData>
      break;
 800c63c:	e00c      	b.n	800c658 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3304      	adds	r3, #4
 800c642:	2201      	movs	r2, #1
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f91d 	bl	800c886 <USBD_CtlSendData>
      break;
 800c64c:	e004      	b.n	800c658 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f8a7 	bl	800c7a4 <USBD_CtlError>
      break;
 800c656:	bf00      	nop
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c670:	3b01      	subs	r3, #1
 800c672:	2b02      	cmp	r3, #2
 800c674:	d81e      	bhi.n	800c6b4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	88db      	ldrh	r3, [r3, #6]
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d004      	beq.n	800c688 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c67e:	6839      	ldr	r1, [r7, #0]
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f88f 	bl	800c7a4 <USBD_CtlError>
      break;
 800c686:	e01a      	b.n	800c6be <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d005      	beq.n	800c6a4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f043 0202 	orr.w	r2, r3, #2
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	330c      	adds	r3, #12
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 f8ea 	bl	800c886 <USBD_CtlSendData>
    break;
 800c6b2:	e004      	b.n	800c6be <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f874 	bl	800c7a4 <USBD_CtlError>
    break;
 800c6bc:	bf00      	nop
  }
}
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	885b      	ldrh	r3, [r3, #2]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d106      	bne.n	800c6e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f92a 	bl	800c93a <USBD_CtlSendStatus>
  }
}
 800c6e6:	bf00      	nop
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6fe:	3b01      	subs	r3, #1
 800c700:	2b02      	cmp	r3, #2
 800c702:	d80b      	bhi.n	800c71c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	885b      	ldrh	r3, [r3, #2]
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d10c      	bne.n	800c726 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f910 	bl	800c93a <USBD_CtlSendStatus>
      }
      break;
 800c71a:	e004      	b.n	800c726 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f840 	bl	800c7a4 <USBD_CtlError>
      break;
 800c724:	e000      	b.n	800c728 <USBD_ClrFeature+0x3a>
      break;
 800c726:	bf00      	nop
  }
}
 800c728:	bf00      	nop
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	781a      	ldrb	r2, [r3, #0]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3301      	adds	r3, #1
 800c74a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	781a      	ldrb	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3301      	adds	r3, #1
 800c758:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f7ff faa8 	bl	800bcb0 <SWAPBYTE>
 800c760:	4603      	mov	r3, r0
 800c762:	461a      	mov	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	3301      	adds	r3, #1
 800c76c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	3301      	adds	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c774:	68f8      	ldr	r0, [r7, #12]
 800c776:	f7ff fa9b 	bl	800bcb0 <SWAPBYTE>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461a      	mov	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3301      	adds	r3, #1
 800c786:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	3301      	adds	r3, #1
 800c78c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f7ff fa8e 	bl	800bcb0 <SWAPBYTE>
 800c794:	4603      	mov	r3, r0
 800c796:	461a      	mov	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	80da      	strh	r2, [r3, #6]
}
 800c79c:	bf00      	nop
 800c79e:	3710      	adds	r7, #16
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7ae:	2180      	movs	r1, #128	; 0x80
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fcff 	bl	800d1b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fcfb 	bl	800d1b4 <USBD_LL_StallEP>
}
 800c7be:	bf00      	nop
 800c7c0:	3708      	adds	r7, #8
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}

0800c7c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7c6:	b580      	push	{r7, lr}
 800c7c8:	b086      	sub	sp, #24
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	60f8      	str	r0, [r7, #12]
 800c7ce:	60b9      	str	r1, [r7, #8]
 800c7d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d036      	beq.n	800c84a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c7e0:	6938      	ldr	r0, [r7, #16]
 800c7e2:	f000 f836 	bl	800c852 <USBD_GetLen>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	3301      	adds	r3, #1
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	7812      	ldrb	r2, [r2, #0]
 800c7fe:	701a      	strb	r2, [r3, #0]
  idx++;
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	3301      	adds	r3, #1
 800c804:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c806:	7dfb      	ldrb	r3, [r7, #23]
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	4413      	add	r3, r2
 800c80c:	2203      	movs	r2, #3
 800c80e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c810:	7dfb      	ldrb	r3, [r7, #23]
 800c812:	3301      	adds	r3, #1
 800c814:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c816:	e013      	b.n	800c840 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	68ba      	ldr	r2, [r7, #8]
 800c81c:	4413      	add	r3, r2
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	7812      	ldrb	r2, [r2, #0]
 800c822:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	3301      	adds	r3, #1
 800c828:	613b      	str	r3, [r7, #16]
    idx++;
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	3301      	adds	r3, #1
 800c82e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	68ba      	ldr	r2, [r7, #8]
 800c834:	4413      	add	r3, r2
 800c836:	2200      	movs	r2, #0
 800c838:	701a      	strb	r2, [r3, #0]
    idx++;
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	3301      	adds	r3, #1
 800c83e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1e7      	bne.n	800c818 <USBD_GetString+0x52>
 800c848:	e000      	b.n	800c84c <USBD_GetString+0x86>
    return;
 800c84a:	bf00      	nop
  }
}
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c852:	b480      	push	{r7}
 800c854:	b085      	sub	sp, #20
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c85a:	2300      	movs	r3, #0
 800c85c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c862:	e005      	b.n	800c870 <USBD_GetLen+0x1e>
  {
    len++;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
 800c866:	3301      	adds	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3301      	adds	r3, #1
 800c86e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c870:	68bb      	ldr	r3, [r7, #8]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1f5      	bne.n	800c864 <USBD_GetLen+0x12>
  }

  return len;
 800c878:	7bfb      	ldrb	r3, [r7, #15]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b084      	sub	sp, #16
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2202      	movs	r2, #2
 800c896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 fd51 	bl	800d354 <USBD_LL_Transmit>

  return USBD_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3710      	adds	r7, #16
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 fd40 	bl	800d354 <USBD_LL_Transmit>

  return USBD_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	60f8      	str	r0, [r7, #12]
 800c8e6:	60b9      	str	r1, [r7, #8]
 800c8e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2203      	movs	r2, #3
 800c8ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	2100      	movs	r1, #0
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 fd5b 	bl	800d3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3710      	adds	r7, #16
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	2100      	movs	r1, #0
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f000 fd4a 	bl	800d3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b082      	sub	sp, #8
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2204      	movs	r2, #4
 800c946:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c94a:	2300      	movs	r3, #0
 800c94c:	2200      	movs	r2, #0
 800c94e:	2100      	movs	r1, #0
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fcff 	bl	800d354 <USBD_LL_Transmit>

  return USBD_OK;
 800c956:	2300      	movs	r3, #0
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2205      	movs	r2, #5
 800c96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c970:	2300      	movs	r3, #0
 800c972:	2200      	movs	r2, #0
 800c974:	2100      	movs	r1, #0
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 fd24 	bl	800d3c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c98c:	2200      	movs	r2, #0
 800c98e:	4912      	ldr	r1, [pc, #72]	; (800c9d8 <MX_USB_DEVICE_Init+0x50>)
 800c990:	4812      	ldr	r0, [pc, #72]	; (800c9dc <MX_USB_DEVICE_Init+0x54>)
 800c992:	f7fe ff09 	bl	800b7a8 <USBD_Init>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d001      	beq.n	800c9a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c99c:	f7f4 f978 	bl	8000c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9a0:	490f      	ldr	r1, [pc, #60]	; (800c9e0 <MX_USB_DEVICE_Init+0x58>)
 800c9a2:	480e      	ldr	r0, [pc, #56]	; (800c9dc <MX_USB_DEVICE_Init+0x54>)
 800c9a4:	f7fe ff30 	bl	800b808 <USBD_RegisterClass>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9ae:	f7f4 f96f 	bl	8000c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9b2:	490c      	ldr	r1, [pc, #48]	; (800c9e4 <MX_USB_DEVICE_Init+0x5c>)
 800c9b4:	4809      	ldr	r0, [pc, #36]	; (800c9dc <MX_USB_DEVICE_Init+0x54>)
 800c9b6:	f7fe fe5b 	bl	800b670 <USBD_CDC_RegisterInterface>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9c0:	f7f4 f966 	bl	8000c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9c4:	4805      	ldr	r0, [pc, #20]	; (800c9dc <MX_USB_DEVICE_Init+0x54>)
 800c9c6:	f7fe ff46 	bl	800b856 <USBD_Start>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c9d0:	f7f4 f95e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9d4:	bf00      	nop
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20000130 	.word	0x20000130
 800c9dc:	20000410 	.word	0x20000410
 800c9e0:	20000018 	.word	0x20000018
 800c9e4:	2000011c 	.word	0x2000011c

0800c9e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4905      	ldr	r1, [pc, #20]	; (800ca04 <CDC_Init_FS+0x1c>)
 800c9f0:	4805      	ldr	r0, [pc, #20]	; (800ca08 <CDC_Init_FS+0x20>)
 800c9f2:	f7fe fe52 	bl	800b69a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9f6:	4905      	ldr	r1, [pc, #20]	; (800ca0c <CDC_Init_FS+0x24>)
 800c9f8:	4803      	ldr	r0, [pc, #12]	; (800ca08 <CDC_Init_FS+0x20>)
 800c9fa:	f7fe fe67 	bl	800b6cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c9fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	200008d4 	.word	0x200008d4
 800ca08:	20000410 	.word	0x20000410
 800ca0c:	200006e0 	.word	0x200006e0

0800ca10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca10:	b480      	push	{r7}
 800ca12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	6039      	str	r1, [r7, #0]
 800ca2a:	71fb      	strb	r3, [r7, #7]
 800ca2c:	4613      	mov	r3, r2
 800ca2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	2b23      	cmp	r3, #35	; 0x23
 800ca34:	d84a      	bhi.n	800cacc <CDC_Control_FS+0xac>
 800ca36:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <CDC_Control_FS+0x1c>)
 800ca38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3c:	0800cacd 	.word	0x0800cacd
 800ca40:	0800cacd 	.word	0x0800cacd
 800ca44:	0800cacd 	.word	0x0800cacd
 800ca48:	0800cacd 	.word	0x0800cacd
 800ca4c:	0800cacd 	.word	0x0800cacd
 800ca50:	0800cacd 	.word	0x0800cacd
 800ca54:	0800cacd 	.word	0x0800cacd
 800ca58:	0800cacd 	.word	0x0800cacd
 800ca5c:	0800cacd 	.word	0x0800cacd
 800ca60:	0800cacd 	.word	0x0800cacd
 800ca64:	0800cacd 	.word	0x0800cacd
 800ca68:	0800cacd 	.word	0x0800cacd
 800ca6c:	0800cacd 	.word	0x0800cacd
 800ca70:	0800cacd 	.word	0x0800cacd
 800ca74:	0800cacd 	.word	0x0800cacd
 800ca78:	0800cacd 	.word	0x0800cacd
 800ca7c:	0800cacd 	.word	0x0800cacd
 800ca80:	0800cacd 	.word	0x0800cacd
 800ca84:	0800cacd 	.word	0x0800cacd
 800ca88:	0800cacd 	.word	0x0800cacd
 800ca8c:	0800cacd 	.word	0x0800cacd
 800ca90:	0800cacd 	.word	0x0800cacd
 800ca94:	0800cacd 	.word	0x0800cacd
 800ca98:	0800cacd 	.word	0x0800cacd
 800ca9c:	0800cacd 	.word	0x0800cacd
 800caa0:	0800cacd 	.word	0x0800cacd
 800caa4:	0800cacd 	.word	0x0800cacd
 800caa8:	0800cacd 	.word	0x0800cacd
 800caac:	0800cacd 	.word	0x0800cacd
 800cab0:	0800cacd 	.word	0x0800cacd
 800cab4:	0800cacd 	.word	0x0800cacd
 800cab8:	0800cacd 	.word	0x0800cacd
 800cabc:	0800cacd 	.word	0x0800cacd
 800cac0:	0800cacd 	.word	0x0800cacd
 800cac4:	0800cacd 	.word	0x0800cacd
 800cac8:	0800cacd 	.word	0x0800cacd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cacc:	bf00      	nop
  }

  return (USBD_OK);
 800cace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	4806      	ldr	r0, [pc, #24]	; (800cb04 <CDC_Receive_FS+0x28>)
 800caea:	f7fe fdef 	bl	800b6cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800caee:	4805      	ldr	r0, [pc, #20]	; (800cb04 <CDC_Receive_FS+0x28>)
 800caf0:	f7fe fe30 	bl	800b754 <USBD_CDC_ReceivePacket>
  USBReceive(Buf);
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7f4 f86b 	bl	8000bd0 <USBReceive>
  return (USBD_OK);
 800cafa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3708      	adds	r7, #8
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}
 800cb04:	20000410 	.word	0x20000410

0800cb08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cb14:	2300      	movs	r3, #0
 800cb16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <CDC_Transmit_FS+0x48>)
 800cb1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cb1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e00b      	b.n	800cb46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb2e:	887b      	ldrh	r3, [r7, #2]
 800cb30:	461a      	mov	r2, r3
 800cb32:	6879      	ldr	r1, [r7, #4]
 800cb34:	4806      	ldr	r0, [pc, #24]	; (800cb50 <CDC_Transmit_FS+0x48>)
 800cb36:	f7fe fdb0 	bl	800b69a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb3a:	4805      	ldr	r0, [pc, #20]	; (800cb50 <CDC_Transmit_FS+0x48>)
 800cb3c:	f7fe fdda 	bl	800b6f4 <USBD_CDC_TransmitPacket>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3710      	adds	r7, #16
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	20000410 	.word	0x20000410

0800cb54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b087      	sub	sp, #28
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
	...

0800cb78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b083      	sub	sp, #12
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	4603      	mov	r3, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	2212      	movs	r2, #18
 800cb88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb8a:	4b03      	ldr	r3, [pc, #12]	; (800cb98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	370c      	adds	r7, #12
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	20000150 	.word	0x20000150

0800cb9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	4603      	mov	r3, r0
 800cba4:	6039      	str	r1, [r7, #0]
 800cba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbae:	4b03      	ldr	r3, [pc, #12]	; (800cbbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000170 	.word	0x20000170

0800cbc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	6039      	str	r1, [r7, #0]
 800cbca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d105      	bne.n	800cbde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	4907      	ldr	r1, [pc, #28]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbd6:	4808      	ldr	r0, [pc, #32]	; (800cbf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbd8:	f7ff fdf5 	bl	800c7c6 <USBD_GetString>
 800cbdc:	e004      	b.n	800cbe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbde:	683a      	ldr	r2, [r7, #0]
 800cbe0:	4904      	ldr	r1, [pc, #16]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbe2:	4805      	ldr	r0, [pc, #20]	; (800cbf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cbe4:	f7ff fdef 	bl	800c7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20000ac8 	.word	0x20000ac8
 800cbf8:	0800d81c 	.word	0x0800d81c

0800cbfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	4603      	mov	r3, r0
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	4904      	ldr	r1, [pc, #16]	; (800cc1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc0c:	4804      	ldr	r0, [pc, #16]	; (800cc20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc0e:	f7ff fdda 	bl	800c7c6 <USBD_GetString>
  return USBD_StrDesc;
 800cc12:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20000ac8 	.word	0x20000ac8
 800cc20:	0800d834 	.word	0x0800d834

0800cc24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	6039      	str	r1, [r7, #0]
 800cc2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	221a      	movs	r2, #26
 800cc34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc36:	f000 f855 	bl	800cce4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc3a:	4b02      	ldr	r3, [pc, #8]	; (800cc44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	20000174 	.word	0x20000174

0800cc48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	6039      	str	r1, [r7, #0]
 800cc52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc54:	79fb      	ldrb	r3, [r7, #7]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d105      	bne.n	800cc66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4907      	ldr	r1, [pc, #28]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc5e:	4808      	ldr	r0, [pc, #32]	; (800cc80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc60:	f7ff fdb1 	bl	800c7c6 <USBD_GetString>
 800cc64:	e004      	b.n	800cc70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	4904      	ldr	r1, [pc, #16]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc6a:	4805      	ldr	r0, [pc, #20]	; (800cc80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc6c:	f7ff fdab 	bl	800c7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc70:	4b02      	ldr	r3, [pc, #8]	; (800cc7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	20000ac8 	.word	0x20000ac8
 800cc80:	0800d848 	.word	0x0800d848

0800cc84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	6039      	str	r1, [r7, #0]
 800cc8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4907      	ldr	r1, [pc, #28]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc9a:	4808      	ldr	r0, [pc, #32]	; (800ccbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc9c:	f7ff fd93 	bl	800c7c6 <USBD_GetString>
 800cca0:	e004      	b.n	800ccac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cca2:	683a      	ldr	r2, [r7, #0]
 800cca4:	4904      	ldr	r1, [pc, #16]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cca6:	4805      	ldr	r0, [pc, #20]	; (800ccbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cca8:	f7ff fd8d 	bl	800c7c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3708      	adds	r7, #8
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	20000ac8 	.word	0x20000ac8
 800ccbc:	0800d854 	.word	0x0800d854

0800ccc0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	6039      	str	r1, [r7, #0]
 800ccca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	220c      	movs	r2, #12
 800ccd0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ccd2:	4b03      	ldr	r3, [pc, #12]	; (800cce0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr
 800cce0:	20000164 	.word	0x20000164

0800cce4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccea:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <Get_SerialNum+0x44>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccf0:	4b0e      	ldr	r3, [pc, #56]	; (800cd2c <Get_SerialNum+0x48>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccf6:	4b0e      	ldr	r3, [pc, #56]	; (800cd30 <Get_SerialNum+0x4c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4413      	add	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d009      	beq.n	800cd1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd0a:	2208      	movs	r2, #8
 800cd0c:	4909      	ldr	r1, [pc, #36]	; (800cd34 <Get_SerialNum+0x50>)
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f000 f814 	bl	800cd3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd14:	2204      	movs	r2, #4
 800cd16:	4908      	ldr	r1, [pc, #32]	; (800cd38 <Get_SerialNum+0x54>)
 800cd18:	68b8      	ldr	r0, [r7, #8]
 800cd1a:	f000 f80f 	bl	800cd3c <IntToUnicode>
  }
}
 800cd1e:	bf00      	nop
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	1fff7590 	.word	0x1fff7590
 800cd2c:	1fff7594 	.word	0x1fff7594
 800cd30:	1fff7598 	.word	0x1fff7598
 800cd34:	20000176 	.word	0x20000176
 800cd38:	20000186 	.word	0x20000186

0800cd3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	4613      	mov	r3, r2
 800cd48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd4e:	2300      	movs	r3, #0
 800cd50:	75fb      	strb	r3, [r7, #23]
 800cd52:	e027      	b.n	800cda4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	0f1b      	lsrs	r3, r3, #28
 800cd58:	2b09      	cmp	r3, #9
 800cd5a:	d80b      	bhi.n	800cd74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	0f1b      	lsrs	r3, r3, #28
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	4619      	mov	r1, r3
 800cd68:	68bb      	ldr	r3, [r7, #8]
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3230      	adds	r2, #48	; 0x30
 800cd6e:	b2d2      	uxtb	r2, r2
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	e00a      	b.n	800cd8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	0f1b      	lsrs	r3, r3, #28
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	005b      	lsls	r3, r3, #1
 800cd7e:	4619      	mov	r1, r3
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	440b      	add	r3, r1
 800cd84:	3237      	adds	r2, #55	; 0x37
 800cd86:	b2d2      	uxtb	r2, r2
 800cd88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	011b      	lsls	r3, r3, #4
 800cd8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd90:	7dfb      	ldrb	r3, [r7, #23]
 800cd92:	005b      	lsls	r3, r3, #1
 800cd94:	3301      	adds	r3, #1
 800cd96:	68ba      	ldr	r2, [r7, #8]
 800cd98:	4413      	add	r3, r2
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd9e:	7dfb      	ldrb	r3, [r7, #23]
 800cda0:	3301      	adds	r3, #1
 800cda2:	75fb      	strb	r3, [r7, #23]
 800cda4:	7dfa      	ldrb	r2, [r7, #23]
 800cda6:	79fb      	ldrb	r3, [r7, #7]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d3d3      	bcc.n	800cd54 <IntToUnicode+0x18>
  }
}
 800cdac:	bf00      	nop
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr

0800cdb8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08a      	sub	sp, #40	; 0x28
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdc0:	f107 0314 	add.w	r3, r7, #20
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]
 800cdc8:	605a      	str	r2, [r3, #4]
 800cdca:	609a      	str	r2, [r3, #8]
 800cdcc:	60da      	str	r2, [r3, #12]
 800cdce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a1c      	ldr	r2, [pc, #112]	; (800ce48 <HAL_PCD_MspInit+0x90>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d131      	bne.n	800ce3e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdda:	4b1c      	ldr	r3, [pc, #112]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800cddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdde:	4a1b      	ldr	r2, [pc, #108]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800cde0:	f043 0301 	orr.w	r3, r3, #1
 800cde4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800cde6:	4b19      	ldr	r3, [pc, #100]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800cde8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cdea:	f003 0301 	and.w	r3, r3, #1
 800cdee:	613b      	str	r3, [r7, #16]
 800cdf0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdf2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdf8:	2302      	movs	r3, #2
 800cdfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce00:	2303      	movs	r3, #3
 800ce02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800ce04:	230a      	movs	r3, #10
 800ce06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce08:	f107 0314 	add.w	r3, r7, #20
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ce12:	f7f8 fa4d 	bl	80052b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce16:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800ce18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce1a:	4a0c      	ldr	r2, [pc, #48]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800ce1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce20:	6593      	str	r3, [r2, #88]	; 0x58
 800ce22:	4b0a      	ldr	r3, [pc, #40]	; (800ce4c <HAL_PCD_MspInit+0x94>)
 800ce24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800ce2e:	2200      	movs	r2, #0
 800ce30:	2100      	movs	r1, #0
 800ce32:	2043      	movs	r0, #67	; 0x43
 800ce34:	f7f8 fa05 	bl	8005242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800ce38:	2043      	movs	r0, #67	; 0x43
 800ce3a:	f7f8 fa1e 	bl	800527a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce3e:	bf00      	nop
 800ce40:	3728      	adds	r7, #40	; 0x28
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	40006800 	.word	0x40006800
 800ce4c:	40021000 	.word	0x40021000

0800ce50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ce64:	4619      	mov	r1, r3
 800ce66:	4610      	mov	r0, r2
 800ce68:	f7fe fd40 	bl	800b8ec <USBD_LL_SetupStage>
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	460b      	mov	r3, r1
 800ce7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ce86:	78fa      	ldrb	r2, [r7, #3]
 800ce88:	6879      	ldr	r1, [r7, #4]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	440b      	add	r3, r1
 800ce94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	78fb      	ldrb	r3, [r7, #3]
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	f7fe fd78 	bl	800b992 <USBD_LL_DataOutStage>
}
 800cea2:	bf00      	nop
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cebc:	78fa      	ldrb	r2, [r7, #3]
 800cebe:	6879      	ldr	r1, [r7, #4]
 800cec0:	4613      	mov	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4413      	add	r3, r2
 800cec6:	00db      	lsls	r3, r3, #3
 800cec8:	440b      	add	r3, r1
 800ceca:	333c      	adds	r3, #60	; 0x3c
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	78fb      	ldrb	r3, [r7, #3]
 800ced0:	4619      	mov	r1, r3
 800ced2:	f7fe fdc1 	bl	800ba58 <USBD_LL_DataInStage>
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b082      	sub	sp, #8
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fe fec5 	bl	800bc7c <USBD_LL_SOF>
}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf02:	2301      	movs	r3, #1
 800cf04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d001      	beq.n	800cf12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf0e:	f7f3 febf 	bl	8000c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cf18:	7bfa      	ldrb	r2, [r7, #15]
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fe72 	bl	800bc06 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7fe fe2b 	bl	800bb84 <USBD_LL_Reset>
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
	...

0800cf38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cf46:	4618      	mov	r0, r3
 800cf48:	f7fe fe6d 	bl	800bc26 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d005      	beq.n	800cf60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf54:	4b04      	ldr	r3, [pc, #16]	; (800cf68 <HAL_PCD_SuspendCallback+0x30>)
 800cf56:	691b      	ldr	r3, [r3, #16]
 800cf58:	4a03      	ldr	r2, [pc, #12]	; (800cf68 <HAL_PCD_SuspendCallback+0x30>)
 800cf5a:	f043 0306 	orr.w	r3, r3, #6
 800cf5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed00 	.word	0xe000ed00

0800cf6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d007      	beq.n	800cf8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf7c:	4b08      	ldr	r3, [pc, #32]	; (800cfa0 <HAL_PCD_ResumeCallback+0x34>)
 800cf7e:	691b      	ldr	r3, [r3, #16]
 800cf80:	4a07      	ldr	r2, [pc, #28]	; (800cfa0 <HAL_PCD_ResumeCallback+0x34>)
 800cf82:	f023 0306 	bic.w	r3, r3, #6
 800cf86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cf88:	f000 fa9e 	bl	800d4c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7fe fe5c 	bl	800bc50 <USBD_LL_Resume>
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	e000ed00 	.word	0xe000ed00

0800cfa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800cfac:	f7fa fc0c 	bl	80077c8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cfb0:	4a2b      	ldr	r2, [pc, #172]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	4a29      	ldr	r2, [pc, #164]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cfc0:	4b27      	ldr	r3, [pc, #156]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfc2:	4a28      	ldr	r2, [pc, #160]	; (800d064 <USBD_LL_Init+0xc0>)
 800cfc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cfc6:	4b26      	ldr	r3, [pc, #152]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfc8:	2208      	movs	r2, #8
 800cfca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cfcc:	4b24      	ldr	r3, [pc, #144]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfce:	2202      	movs	r2, #2
 800cfd0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfd2:	4b23      	ldr	r3, [pc, #140]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cfd8:	4b21      	ldr	r3, [pc, #132]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cfde:	4b20      	ldr	r3, [pc, #128]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cfe4:	4b1e      	ldr	r3, [pc, #120]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfea:	4b1d      	ldr	r3, [pc, #116]	; (800d060 <USBD_LL_Init+0xbc>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cff0:	481b      	ldr	r0, [pc, #108]	; (800d060 <USBD_LL_Init+0xbc>)
 800cff2:	f7f8 fff0 	bl	8005fd6 <HAL_PCD_Init>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800cffc:	f7f3 fe48 	bl	8000c90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d006:	2318      	movs	r3, #24
 800d008:	2200      	movs	r2, #0
 800d00a:	2100      	movs	r1, #0
 800d00c:	f7fa fb0b 	bl	8007626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d016:	2358      	movs	r3, #88	; 0x58
 800d018:	2200      	movs	r2, #0
 800d01a:	2180      	movs	r1, #128	; 0x80
 800d01c:	f7fa fb03 	bl	8007626 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d026:	23c0      	movs	r3, #192	; 0xc0
 800d028:	2200      	movs	r2, #0
 800d02a:	2181      	movs	r1, #129	; 0x81
 800d02c:	f7fa fafb 	bl	8007626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d036:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d03a:	2200      	movs	r2, #0
 800d03c:	2101      	movs	r1, #1
 800d03e:	f7fa faf2 	bl	8007626 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d048:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d04c:	2200      	movs	r2, #0
 800d04e:	2182      	movs	r1, #130	; 0x82
 800d050:	f7fa fae9 	bl	8007626 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	20000cc8 	.word	0x20000cc8
 800d064:	40006800 	.word	0x40006800

0800d068 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d070:	2300      	movs	r3, #0
 800d072:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d07e:	4618      	mov	r0, r3
 800d080:	f7f9 f8bb 	bl	80061fa <HAL_PCD_Start>
 800d084:	4603      	mov	r3, r0
 800d086:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b03      	cmp	r3, #3
 800d08c:	d816      	bhi.n	800d0bc <USBD_LL_Start+0x54>
 800d08e:	a201      	add	r2, pc, #4	; (adr r2, 800d094 <USBD_LL_Start+0x2c>)
 800d090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d094:	0800d0a5 	.word	0x0800d0a5
 800d098:	0800d0ab 	.word	0x0800d0ab
 800d09c:	0800d0b1 	.word	0x0800d0b1
 800d0a0:	0800d0b7 	.word	0x0800d0b7
    case HAL_OK :
      usb_status = USBD_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a8:	e00b      	b.n	800d0c2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0aa:	2303      	movs	r3, #3
 800d0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ae:	e008      	b.n	800d0c2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b4:	e005      	b.n	800d0c2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0b6:	2303      	movs	r3, #3
 800d0b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ba:	e002      	b.n	800d0c2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	73fb      	strb	r3, [r7, #15]
    break;
 800d0c0:	bf00      	nop
  }
  return usb_status;
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	4611      	mov	r1, r2
 800d0d8:	461a      	mov	r2, r3
 800d0da:	4603      	mov	r3, r0
 800d0dc:	70fb      	strb	r3, [r7, #3]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	70bb      	strb	r3, [r7, #2]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d0f4:	78bb      	ldrb	r3, [r7, #2]
 800d0f6:	883a      	ldrh	r2, [r7, #0]
 800d0f8:	78f9      	ldrb	r1, [r7, #3]
 800d0fa:	f7f9 fa13 	bl	8006524 <HAL_PCD_EP_Open>
 800d0fe:	4603      	mov	r3, r0
 800d100:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	2b03      	cmp	r3, #3
 800d106:	d817      	bhi.n	800d138 <USBD_LL_OpenEP+0x6c>
 800d108:	a201      	add	r2, pc, #4	; (adr r2, 800d110 <USBD_LL_OpenEP+0x44>)
 800d10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10e:	bf00      	nop
 800d110:	0800d121 	.word	0x0800d121
 800d114:	0800d127 	.word	0x0800d127
 800d118:	0800d12d 	.word	0x0800d12d
 800d11c:	0800d133 	.word	0x0800d133
    case HAL_OK :
      usb_status = USBD_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
    break;
 800d124:	e00b      	b.n	800d13e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d126:	2303      	movs	r3, #3
 800d128:	73fb      	strb	r3, [r7, #15]
    break;
 800d12a:	e008      	b.n	800d13e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d12c:	2301      	movs	r3, #1
 800d12e:	73fb      	strb	r3, [r7, #15]
    break;
 800d130:	e005      	b.n	800d13e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d132:	2303      	movs	r3, #3
 800d134:	73fb      	strb	r3, [r7, #15]
    break;
 800d136:	e002      	b.n	800d13e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	73fb      	strb	r3, [r7, #15]
    break;
 800d13c:	bf00      	nop
  }
  return usb_status;
 800d13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3710      	adds	r7, #16
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	460b      	mov	r3, r1
 800d152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d154:	2300      	movs	r3, #0
 800d156:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d158:	2300      	movs	r3, #0
 800d15a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d162:	78fa      	ldrb	r2, [r7, #3]
 800d164:	4611      	mov	r1, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7f9 fa42 	bl	80065f0 <HAL_PCD_EP_Close>
 800d16c:	4603      	mov	r3, r0
 800d16e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d170:	7bbb      	ldrb	r3, [r7, #14]
 800d172:	2b03      	cmp	r3, #3
 800d174:	d816      	bhi.n	800d1a4 <USBD_LL_CloseEP+0x5c>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <USBD_LL_CloseEP+0x34>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d18d 	.word	0x0800d18d
 800d180:	0800d193 	.word	0x0800d193
 800d184:	0800d199 	.word	0x0800d199
 800d188:	0800d19f 	.word	0x0800d19f
    case HAL_OK :
      usb_status = USBD_OK;
 800d18c:	2300      	movs	r3, #0
 800d18e:	73fb      	strb	r3, [r7, #15]
    break;
 800d190:	e00b      	b.n	800d1aa <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d192:	2303      	movs	r3, #3
 800d194:	73fb      	strb	r3, [r7, #15]
    break;
 800d196:	e008      	b.n	800d1aa <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d198:	2301      	movs	r3, #1
 800d19a:	73fb      	strb	r3, [r7, #15]
    break;
 800d19c:	e005      	b.n	800d1aa <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a2:	e002      	b.n	800d1aa <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1a8:	bf00      	nop
  }
  return usb_status;
 800d1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3710      	adds	r7, #16
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	460b      	mov	r3, r1
 800d1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1ce:	78fa      	ldrb	r2, [r7, #3]
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f9 faec 	bl	80067b0 <HAL_PCD_EP_SetStall>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d1dc:	7bbb      	ldrb	r3, [r7, #14]
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d816      	bhi.n	800d210 <USBD_LL_StallEP+0x5c>
 800d1e2:	a201      	add	r2, pc, #4	; (adr r2, 800d1e8 <USBD_LL_StallEP+0x34>)
 800d1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e8:	0800d1f9 	.word	0x0800d1f9
 800d1ec:	0800d1ff 	.word	0x0800d1ff
 800d1f0:	0800d205 	.word	0x0800d205
 800d1f4:	0800d20b 	.word	0x0800d20b
    case HAL_OK :
      usb_status = USBD_OK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d1fc:	e00b      	b.n	800d216 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1fe:	2303      	movs	r3, #3
 800d200:	73fb      	strb	r3, [r7, #15]
    break;
 800d202:	e008      	b.n	800d216 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d204:	2301      	movs	r3, #1
 800d206:	73fb      	strb	r3, [r7, #15]
    break;
 800d208:	e005      	b.n	800d216 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d20a:	2303      	movs	r3, #3
 800d20c:	73fb      	strb	r3, [r7, #15]
    break;
 800d20e:	e002      	b.n	800d216 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d210:	2303      	movs	r3, #3
 800d212:	73fb      	strb	r3, [r7, #15]
    break;
 800d214:	bf00      	nop
  }
  return usb_status;
 800d216:	7bfb      	ldrb	r3, [r7, #15]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d230:	2300      	movs	r3, #0
 800d232:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d23a:	78fa      	ldrb	r2, [r7, #3]
 800d23c:	4611      	mov	r1, r2
 800d23e:	4618      	mov	r0, r3
 800d240:	f7f9 fb16 	bl	8006870 <HAL_PCD_EP_ClrStall>
 800d244:	4603      	mov	r3, r0
 800d246:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	2b03      	cmp	r3, #3
 800d24c:	d816      	bhi.n	800d27c <USBD_LL_ClearStallEP+0x5c>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <USBD_LL_ClearStallEP+0x34>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d265 	.word	0x0800d265
 800d258:	0800d26b 	.word	0x0800d26b
 800d25c:	0800d271 	.word	0x0800d271
 800d260:	0800d277 	.word	0x0800d277
    case HAL_OK :
      usb_status = USBD_OK;
 800d264:	2300      	movs	r3, #0
 800d266:	73fb      	strb	r3, [r7, #15]
    break;
 800d268:	e00b      	b.n	800d282 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d26a:	2303      	movs	r3, #3
 800d26c:	73fb      	strb	r3, [r7, #15]
    break;
 800d26e:	e008      	b.n	800d282 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d270:	2301      	movs	r3, #1
 800d272:	73fb      	strb	r3, [r7, #15]
    break;
 800d274:	e005      	b.n	800d282 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d276:	2303      	movs	r3, #3
 800d278:	73fb      	strb	r3, [r7, #15]
    break;
 800d27a:	e002      	b.n	800d282 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d27c:	2303      	movs	r3, #3
 800d27e:	73fb      	strb	r3, [r7, #15]
    break;
 800d280:	bf00      	nop
  }
  return usb_status;
 800d282:	7bfb      	ldrb	r3, [r7, #15]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d29e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d2a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	da0c      	bge.n	800d2c2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d2a8:	78fb      	ldrb	r3, [r7, #3]
 800d2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	1c5a      	adds	r2, r3, #1
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	00db      	lsls	r3, r3, #3
 800d2ba:	440b      	add	r3, r1
 800d2bc:	3302      	adds	r3, #2
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	e00b      	b.n	800d2da <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d2c2:	78fb      	ldrb	r3, [r7, #3]
 800d2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2c8:	68f9      	ldr	r1, [r7, #12]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	4413      	add	r3, r2
 800d2d0:	00db      	lsls	r3, r3, #3
 800d2d2:	440b      	add	r3, r1
 800d2d4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d2d8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3714      	adds	r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr
	...

0800d2e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d302:	78fa      	ldrb	r2, [r7, #3]
 800d304:	4611      	mov	r1, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7f9 f8e7 	bl	80064da <HAL_PCD_SetAddress>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d310:	7bbb      	ldrb	r3, [r7, #14]
 800d312:	2b03      	cmp	r3, #3
 800d314:	d816      	bhi.n	800d344 <USBD_LL_SetUSBAddress+0x5c>
 800d316:	a201      	add	r2, pc, #4	; (adr r2, 800d31c <USBD_LL_SetUSBAddress+0x34>)
 800d318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d31c:	0800d32d 	.word	0x0800d32d
 800d320:	0800d333 	.word	0x0800d333
 800d324:	0800d339 	.word	0x0800d339
 800d328:	0800d33f 	.word	0x0800d33f
    case HAL_OK :
      usb_status = USBD_OK;
 800d32c:	2300      	movs	r3, #0
 800d32e:	73fb      	strb	r3, [r7, #15]
    break;
 800d330:	e00b      	b.n	800d34a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
    break;
 800d336:	e008      	b.n	800d34a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d338:	2301      	movs	r3, #1
 800d33a:	73fb      	strb	r3, [r7, #15]
    break;
 800d33c:	e005      	b.n	800d34a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d33e:	2303      	movs	r3, #3
 800d340:	73fb      	strb	r3, [r7, #15]
    break;
 800d342:	e002      	b.n	800d34a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	73fb      	strb	r3, [r7, #15]
    break;
 800d348:	bf00      	nop
  }
  return usb_status;
 800d34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3710      	adds	r7, #16
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b086      	sub	sp, #24
 800d358:	af00      	add	r7, sp, #0
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	607a      	str	r2, [r7, #4]
 800d35e:	603b      	str	r3, [r7, #0]
 800d360:	460b      	mov	r3, r1
 800d362:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d372:	7af9      	ldrb	r1, [r7, #11]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	f7f9 f9d7 	bl	800672a <HAL_PCD_EP_Transmit>
 800d37c:	4603      	mov	r3, r0
 800d37e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d380:	7dbb      	ldrb	r3, [r7, #22]
 800d382:	2b03      	cmp	r3, #3
 800d384:	d816      	bhi.n	800d3b4 <USBD_LL_Transmit+0x60>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <USBD_LL_Transmit+0x38>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d39d 	.word	0x0800d39d
 800d390:	0800d3a3 	.word	0x0800d3a3
 800d394:	0800d3a9 	.word	0x0800d3a9
 800d398:	0800d3af 	.word	0x0800d3af
    case HAL_OK :
      usb_status = USBD_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	75fb      	strb	r3, [r7, #23]
    break;
 800d3a0:	e00b      	b.n	800d3ba <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	75fb      	strb	r3, [r7, #23]
    break;
 800d3a6:	e008      	b.n	800d3ba <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	75fb      	strb	r3, [r7, #23]
    break;
 800d3ac:	e005      	b.n	800d3ba <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3ae:	2303      	movs	r3, #3
 800d3b0:	75fb      	strb	r3, [r7, #23]
    break;
 800d3b2:	e002      	b.n	800d3ba <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	75fb      	strb	r3, [r7, #23]
    break;
 800d3b8:	bf00      	nop
  }
  return usb_status;
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	607a      	str	r2, [r7, #4]
 800d3ce:	603b      	str	r3, [r7, #0]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3e2:	7af9      	ldrb	r1, [r7, #11]
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	687a      	ldr	r2, [r7, #4]
 800d3e8:	f7f9 f94a 	bl	8006680 <HAL_PCD_EP_Receive>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d3f0:	7dbb      	ldrb	r3, [r7, #22]
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d816      	bhi.n	800d424 <USBD_LL_PrepareReceive+0x60>
 800d3f6:	a201      	add	r2, pc, #4	; (adr r2, 800d3fc <USBD_LL_PrepareReceive+0x38>)
 800d3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fc:	0800d40d 	.word	0x0800d40d
 800d400:	0800d413 	.word	0x0800d413
 800d404:	0800d419 	.word	0x0800d419
 800d408:	0800d41f 	.word	0x0800d41f
    case HAL_OK :
      usb_status = USBD_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	75fb      	strb	r3, [r7, #23]
    break;
 800d410:	e00b      	b.n	800d42a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d412:	2303      	movs	r3, #3
 800d414:	75fb      	strb	r3, [r7, #23]
    break;
 800d416:	e008      	b.n	800d42a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d418:	2301      	movs	r3, #1
 800d41a:	75fb      	strb	r3, [r7, #23]
    break;
 800d41c:	e005      	b.n	800d42a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d41e:	2303      	movs	r3, #3
 800d420:	75fb      	strb	r3, [r7, #23]
    break;
 800d422:	e002      	b.n	800d42a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d424:	2303      	movs	r3, #3
 800d426:	75fb      	strb	r3, [r7, #23]
    break;
 800d428:	bf00      	nop
  }
  return usb_status;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d446:	78fa      	ldrb	r2, [r7, #3]
 800d448:	4611      	mov	r1, r2
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7f9 f955 	bl	80066fa <HAL_PCD_EP_GetRxCount>
 800d450:	4603      	mov	r3, r0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d002      	beq.n	800d474 <HAL_PCDEx_LPM_Callback+0x18>
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d013      	beq.n	800d49a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d472:	e023      	b.n	800d4bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	699b      	ldr	r3, [r3, #24]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d007      	beq.n	800d48c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d47c:	f000 f824 	bl	800d4c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d480:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	4a0f      	ldr	r2, [pc, #60]	; (800d4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d486:	f023 0306 	bic.w	r3, r3, #6
 800d48a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fbdc 	bl	800bc50 <USBD_LL_Resume>
    break;
 800d498:	e010      	b.n	800d4bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f7fe fbc0 	bl	800bc26 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	699b      	ldr	r3, [r3, #24]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d005      	beq.n	800d4ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d4ae:	4b05      	ldr	r3, [pc, #20]	; (800d4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	4a04      	ldr	r2, [pc, #16]	; (800d4c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d4b4:	f043 0306 	orr.w	r3, r3, #6
 800d4b8:	6113      	str	r3, [r2, #16]
    break;
 800d4ba:	bf00      	nop
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}
 800d4c4:	e000ed00 	.word	0xe000ed00

0800d4c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800d4cc:	bf00      	nop
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <_Znwj>:
 800d4d6:	b510      	push	{r4, lr}
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	bf14      	ite	ne
 800d4dc:	4604      	movne	r4, r0
 800d4de:	2401      	moveq	r4, #1
 800d4e0:	4620      	mov	r0, r4
 800d4e2:	f000 f843 	bl	800d56c <malloc>
 800d4e6:	b930      	cbnz	r0, 800d4f6 <_Znwj+0x20>
 800d4e8:	f000 f806 	bl	800d4f8 <_ZSt15get_new_handlerv>
 800d4ec:	b908      	cbnz	r0, 800d4f2 <_Znwj+0x1c>
 800d4ee:	f000 f80b 	bl	800d508 <abort>
 800d4f2:	4780      	blx	r0
 800d4f4:	e7f4      	b.n	800d4e0 <_Znwj+0xa>
 800d4f6:	bd10      	pop	{r4, pc}

0800d4f8 <_ZSt15get_new_handlerv>:
 800d4f8:	4b02      	ldr	r3, [pc, #8]	; (800d504 <_ZSt15get_new_handlerv+0xc>)
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	f3bf 8f5b 	dmb	ish
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	20000368 	.word	0x20000368

0800d508 <abort>:
 800d508:	b508      	push	{r3, lr}
 800d50a:	2006      	movs	r0, #6
 800d50c:	f000 f926 	bl	800d75c <raise>
 800d510:	2001      	movs	r0, #1
 800d512:	f7f3 fc61 	bl	8000dd8 <_exit>
	...

0800d518 <__errno>:
 800d518:	4b01      	ldr	r3, [pc, #4]	; (800d520 <__errno+0x8>)
 800d51a:	6818      	ldr	r0, [r3, #0]
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	20000190 	.word	0x20000190

0800d524 <__libc_init_array>:
 800d524:	b570      	push	{r4, r5, r6, lr}
 800d526:	4e0d      	ldr	r6, [pc, #52]	; (800d55c <__libc_init_array+0x38>)
 800d528:	4c0d      	ldr	r4, [pc, #52]	; (800d560 <__libc_init_array+0x3c>)
 800d52a:	1ba4      	subs	r4, r4, r6
 800d52c:	10a4      	asrs	r4, r4, #2
 800d52e:	2500      	movs	r5, #0
 800d530:	42a5      	cmp	r5, r4
 800d532:	d109      	bne.n	800d548 <__libc_init_array+0x24>
 800d534:	4e0b      	ldr	r6, [pc, #44]	; (800d564 <__libc_init_array+0x40>)
 800d536:	4c0c      	ldr	r4, [pc, #48]	; (800d568 <__libc_init_array+0x44>)
 800d538:	f000 f944 	bl	800d7c4 <_init>
 800d53c:	1ba4      	subs	r4, r4, r6
 800d53e:	10a4      	asrs	r4, r4, #2
 800d540:	2500      	movs	r5, #0
 800d542:	42a5      	cmp	r5, r4
 800d544:	d105      	bne.n	800d552 <__libc_init_array+0x2e>
 800d546:	bd70      	pop	{r4, r5, r6, pc}
 800d548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d54c:	4798      	blx	r3
 800d54e:	3501      	adds	r5, #1
 800d550:	e7ee      	b.n	800d530 <__libc_init_array+0xc>
 800d552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d556:	4798      	blx	r3
 800d558:	3501      	adds	r5, #1
 800d55a:	e7f2      	b.n	800d542 <__libc_init_array+0x1e>
 800d55c:	0800d8a4 	.word	0x0800d8a4
 800d560:	0800d8a4 	.word	0x0800d8a4
 800d564:	0800d8a4 	.word	0x0800d8a4
 800d568:	0800d8b4 	.word	0x0800d8b4

0800d56c <malloc>:
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <malloc+0xc>)
 800d56e:	4601      	mov	r1, r0
 800d570:	6818      	ldr	r0, [r3, #0]
 800d572:	f000 b861 	b.w	800d638 <_malloc_r>
 800d576:	bf00      	nop
 800d578:	20000190 	.word	0x20000190

0800d57c <free>:
 800d57c:	4b02      	ldr	r3, [pc, #8]	; (800d588 <free+0xc>)
 800d57e:	4601      	mov	r1, r0
 800d580:	6818      	ldr	r0, [r3, #0]
 800d582:	f000 b80b 	b.w	800d59c <_free_r>
 800d586:	bf00      	nop
 800d588:	20000190 	.word	0x20000190

0800d58c <memset>:
 800d58c:	4402      	add	r2, r0
 800d58e:	4603      	mov	r3, r0
 800d590:	4293      	cmp	r3, r2
 800d592:	d100      	bne.n	800d596 <memset+0xa>
 800d594:	4770      	bx	lr
 800d596:	f803 1b01 	strb.w	r1, [r3], #1
 800d59a:	e7f9      	b.n	800d590 <memset+0x4>

0800d59c <_free_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4605      	mov	r5, r0
 800d5a0:	2900      	cmp	r1, #0
 800d5a2:	d045      	beq.n	800d630 <_free_r+0x94>
 800d5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5a8:	1f0c      	subs	r4, r1, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	bfb8      	it	lt
 800d5ae:	18e4      	addlt	r4, r4, r3
 800d5b0:	f000 f905 	bl	800d7be <__malloc_lock>
 800d5b4:	4a1f      	ldr	r2, [pc, #124]	; (800d634 <_free_r+0x98>)
 800d5b6:	6813      	ldr	r3, [r2, #0]
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	b933      	cbnz	r3, 800d5ca <_free_r+0x2e>
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	6014      	str	r4, [r2, #0]
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5c6:	f000 b8fb 	b.w	800d7c0 <__malloc_unlock>
 800d5ca:	42a3      	cmp	r3, r4
 800d5cc:	d90c      	bls.n	800d5e8 <_free_r+0x4c>
 800d5ce:	6821      	ldr	r1, [r4, #0]
 800d5d0:	1862      	adds	r2, r4, r1
 800d5d2:	4293      	cmp	r3, r2
 800d5d4:	bf04      	itt	eq
 800d5d6:	681a      	ldreq	r2, [r3, #0]
 800d5d8:	685b      	ldreq	r3, [r3, #4]
 800d5da:	6063      	str	r3, [r4, #4]
 800d5dc:	bf04      	itt	eq
 800d5de:	1852      	addeq	r2, r2, r1
 800d5e0:	6022      	streq	r2, [r4, #0]
 800d5e2:	6004      	str	r4, [r0, #0]
 800d5e4:	e7ec      	b.n	800d5c0 <_free_r+0x24>
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	685a      	ldr	r2, [r3, #4]
 800d5ea:	b10a      	cbz	r2, 800d5f0 <_free_r+0x54>
 800d5ec:	42a2      	cmp	r2, r4
 800d5ee:	d9fa      	bls.n	800d5e6 <_free_r+0x4a>
 800d5f0:	6819      	ldr	r1, [r3, #0]
 800d5f2:	1858      	adds	r0, r3, r1
 800d5f4:	42a0      	cmp	r0, r4
 800d5f6:	d10b      	bne.n	800d610 <_free_r+0x74>
 800d5f8:	6820      	ldr	r0, [r4, #0]
 800d5fa:	4401      	add	r1, r0
 800d5fc:	1858      	adds	r0, r3, r1
 800d5fe:	4282      	cmp	r2, r0
 800d600:	6019      	str	r1, [r3, #0]
 800d602:	d1dd      	bne.n	800d5c0 <_free_r+0x24>
 800d604:	6810      	ldr	r0, [r2, #0]
 800d606:	6852      	ldr	r2, [r2, #4]
 800d608:	605a      	str	r2, [r3, #4]
 800d60a:	4401      	add	r1, r0
 800d60c:	6019      	str	r1, [r3, #0]
 800d60e:	e7d7      	b.n	800d5c0 <_free_r+0x24>
 800d610:	d902      	bls.n	800d618 <_free_r+0x7c>
 800d612:	230c      	movs	r3, #12
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	e7d3      	b.n	800d5c0 <_free_r+0x24>
 800d618:	6820      	ldr	r0, [r4, #0]
 800d61a:	1821      	adds	r1, r4, r0
 800d61c:	428a      	cmp	r2, r1
 800d61e:	bf04      	itt	eq
 800d620:	6811      	ldreq	r1, [r2, #0]
 800d622:	6852      	ldreq	r2, [r2, #4]
 800d624:	6062      	str	r2, [r4, #4]
 800d626:	bf04      	itt	eq
 800d628:	1809      	addeq	r1, r1, r0
 800d62a:	6021      	streq	r1, [r4, #0]
 800d62c:	605c      	str	r4, [r3, #4]
 800d62e:	e7c7      	b.n	800d5c0 <_free_r+0x24>
 800d630:	bd38      	pop	{r3, r4, r5, pc}
 800d632:	bf00      	nop
 800d634:	2000036c 	.word	0x2000036c

0800d638 <_malloc_r>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	1ccd      	adds	r5, r1, #3
 800d63c:	f025 0503 	bic.w	r5, r5, #3
 800d640:	3508      	adds	r5, #8
 800d642:	2d0c      	cmp	r5, #12
 800d644:	bf38      	it	cc
 800d646:	250c      	movcc	r5, #12
 800d648:	2d00      	cmp	r5, #0
 800d64a:	4606      	mov	r6, r0
 800d64c:	db01      	blt.n	800d652 <_malloc_r+0x1a>
 800d64e:	42a9      	cmp	r1, r5
 800d650:	d903      	bls.n	800d65a <_malloc_r+0x22>
 800d652:	230c      	movs	r3, #12
 800d654:	6033      	str	r3, [r6, #0]
 800d656:	2000      	movs	r0, #0
 800d658:	bd70      	pop	{r4, r5, r6, pc}
 800d65a:	f000 f8b0 	bl	800d7be <__malloc_lock>
 800d65e:	4a21      	ldr	r2, [pc, #132]	; (800d6e4 <_malloc_r+0xac>)
 800d660:	6814      	ldr	r4, [r2, #0]
 800d662:	4621      	mov	r1, r4
 800d664:	b991      	cbnz	r1, 800d68c <_malloc_r+0x54>
 800d666:	4c20      	ldr	r4, [pc, #128]	; (800d6e8 <_malloc_r+0xb0>)
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	b91b      	cbnz	r3, 800d674 <_malloc_r+0x3c>
 800d66c:	4630      	mov	r0, r6
 800d66e:	f000 f83d 	bl	800d6ec <_sbrk_r>
 800d672:	6020      	str	r0, [r4, #0]
 800d674:	4629      	mov	r1, r5
 800d676:	4630      	mov	r0, r6
 800d678:	f000 f838 	bl	800d6ec <_sbrk_r>
 800d67c:	1c43      	adds	r3, r0, #1
 800d67e:	d124      	bne.n	800d6ca <_malloc_r+0x92>
 800d680:	230c      	movs	r3, #12
 800d682:	6033      	str	r3, [r6, #0]
 800d684:	4630      	mov	r0, r6
 800d686:	f000 f89b 	bl	800d7c0 <__malloc_unlock>
 800d68a:	e7e4      	b.n	800d656 <_malloc_r+0x1e>
 800d68c:	680b      	ldr	r3, [r1, #0]
 800d68e:	1b5b      	subs	r3, r3, r5
 800d690:	d418      	bmi.n	800d6c4 <_malloc_r+0x8c>
 800d692:	2b0b      	cmp	r3, #11
 800d694:	d90f      	bls.n	800d6b6 <_malloc_r+0x7e>
 800d696:	600b      	str	r3, [r1, #0]
 800d698:	50cd      	str	r5, [r1, r3]
 800d69a:	18cc      	adds	r4, r1, r3
 800d69c:	4630      	mov	r0, r6
 800d69e:	f000 f88f 	bl	800d7c0 <__malloc_unlock>
 800d6a2:	f104 000b 	add.w	r0, r4, #11
 800d6a6:	1d23      	adds	r3, r4, #4
 800d6a8:	f020 0007 	bic.w	r0, r0, #7
 800d6ac:	1ac3      	subs	r3, r0, r3
 800d6ae:	d0d3      	beq.n	800d658 <_malloc_r+0x20>
 800d6b0:	425a      	negs	r2, r3
 800d6b2:	50e2      	str	r2, [r4, r3]
 800d6b4:	e7d0      	b.n	800d658 <_malloc_r+0x20>
 800d6b6:	428c      	cmp	r4, r1
 800d6b8:	684b      	ldr	r3, [r1, #4]
 800d6ba:	bf16      	itet	ne
 800d6bc:	6063      	strne	r3, [r4, #4]
 800d6be:	6013      	streq	r3, [r2, #0]
 800d6c0:	460c      	movne	r4, r1
 800d6c2:	e7eb      	b.n	800d69c <_malloc_r+0x64>
 800d6c4:	460c      	mov	r4, r1
 800d6c6:	6849      	ldr	r1, [r1, #4]
 800d6c8:	e7cc      	b.n	800d664 <_malloc_r+0x2c>
 800d6ca:	1cc4      	adds	r4, r0, #3
 800d6cc:	f024 0403 	bic.w	r4, r4, #3
 800d6d0:	42a0      	cmp	r0, r4
 800d6d2:	d005      	beq.n	800d6e0 <_malloc_r+0xa8>
 800d6d4:	1a21      	subs	r1, r4, r0
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 f808 	bl	800d6ec <_sbrk_r>
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d0cf      	beq.n	800d680 <_malloc_r+0x48>
 800d6e0:	6025      	str	r5, [r4, #0]
 800d6e2:	e7db      	b.n	800d69c <_malloc_r+0x64>
 800d6e4:	2000036c 	.word	0x2000036c
 800d6e8:	20000370 	.word	0x20000370

0800d6ec <_sbrk_r>:
 800d6ec:	b538      	push	{r3, r4, r5, lr}
 800d6ee:	4c06      	ldr	r4, [pc, #24]	; (800d708 <_sbrk_r+0x1c>)
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	4605      	mov	r5, r0
 800d6f4:	4608      	mov	r0, r1
 800d6f6:	6023      	str	r3, [r4, #0]
 800d6f8:	f7f3 fb78 	bl	8000dec <_sbrk>
 800d6fc:	1c43      	adds	r3, r0, #1
 800d6fe:	d102      	bne.n	800d706 <_sbrk_r+0x1a>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	b103      	cbz	r3, 800d706 <_sbrk_r+0x1a>
 800d704:	602b      	str	r3, [r5, #0]
 800d706:	bd38      	pop	{r3, r4, r5, pc}
 800d708:	20000fbc 	.word	0x20000fbc

0800d70c <_raise_r>:
 800d70c:	291f      	cmp	r1, #31
 800d70e:	b538      	push	{r3, r4, r5, lr}
 800d710:	4604      	mov	r4, r0
 800d712:	460d      	mov	r5, r1
 800d714:	d904      	bls.n	800d720 <_raise_r+0x14>
 800d716:	2316      	movs	r3, #22
 800d718:	6003      	str	r3, [r0, #0]
 800d71a:	f04f 30ff 	mov.w	r0, #4294967295
 800d71e:	bd38      	pop	{r3, r4, r5, pc}
 800d720:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d722:	b112      	cbz	r2, 800d72a <_raise_r+0x1e>
 800d724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d728:	b94b      	cbnz	r3, 800d73e <_raise_r+0x32>
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f830 	bl	800d790 <_getpid_r>
 800d730:	462a      	mov	r2, r5
 800d732:	4601      	mov	r1, r0
 800d734:	4620      	mov	r0, r4
 800d736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d73a:	f000 b817 	b.w	800d76c <_kill_r>
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d00a      	beq.n	800d758 <_raise_r+0x4c>
 800d742:	1c59      	adds	r1, r3, #1
 800d744:	d103      	bne.n	800d74e <_raise_r+0x42>
 800d746:	2316      	movs	r3, #22
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	2001      	movs	r0, #1
 800d74c:	e7e7      	b.n	800d71e <_raise_r+0x12>
 800d74e:	2400      	movs	r4, #0
 800d750:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d754:	4628      	mov	r0, r5
 800d756:	4798      	blx	r3
 800d758:	2000      	movs	r0, #0
 800d75a:	e7e0      	b.n	800d71e <_raise_r+0x12>

0800d75c <raise>:
 800d75c:	4b02      	ldr	r3, [pc, #8]	; (800d768 <raise+0xc>)
 800d75e:	4601      	mov	r1, r0
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	f7ff bfd3 	b.w	800d70c <_raise_r>
 800d766:	bf00      	nop
 800d768:	20000190 	.word	0x20000190

0800d76c <_kill_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4c07      	ldr	r4, [pc, #28]	; (800d78c <_kill_r+0x20>)
 800d770:	2300      	movs	r3, #0
 800d772:	4605      	mov	r5, r0
 800d774:	4608      	mov	r0, r1
 800d776:	4611      	mov	r1, r2
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	f7f3 fb1d 	bl	8000db8 <_kill>
 800d77e:	1c43      	adds	r3, r0, #1
 800d780:	d102      	bne.n	800d788 <_kill_r+0x1c>
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	b103      	cbz	r3, 800d788 <_kill_r+0x1c>
 800d786:	602b      	str	r3, [r5, #0]
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	bf00      	nop
 800d78c:	20000fbc 	.word	0x20000fbc

0800d790 <_getpid_r>:
 800d790:	f7f3 bb0a 	b.w	8000da8 <_getpid>

0800d794 <strncpy>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	3901      	subs	r1, #1
 800d798:	4604      	mov	r4, r0
 800d79a:	b902      	cbnz	r2, 800d79e <strncpy+0xa>
 800d79c:	bd70      	pop	{r4, r5, r6, pc}
 800d79e:	4623      	mov	r3, r4
 800d7a0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d7a4:	f803 5b01 	strb.w	r5, [r3], #1
 800d7a8:	1e56      	subs	r6, r2, #1
 800d7aa:	b92d      	cbnz	r5, 800d7b8 <strncpy+0x24>
 800d7ac:	4414      	add	r4, r2
 800d7ae:	42a3      	cmp	r3, r4
 800d7b0:	d0f4      	beq.n	800d79c <strncpy+0x8>
 800d7b2:	f803 5b01 	strb.w	r5, [r3], #1
 800d7b6:	e7fa      	b.n	800d7ae <strncpy+0x1a>
 800d7b8:	461c      	mov	r4, r3
 800d7ba:	4632      	mov	r2, r6
 800d7bc:	e7ed      	b.n	800d79a <strncpy+0x6>

0800d7be <__malloc_lock>:
 800d7be:	4770      	bx	lr

0800d7c0 <__malloc_unlock>:
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <_init>:
 800d7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c6:	bf00      	nop
 800d7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ca:	bc08      	pop	{r3}
 800d7cc:	469e      	mov	lr, r3
 800d7ce:	4770      	bx	lr

0800d7d0 <_fini>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	bf00      	nop
 800d7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7d6:	bc08      	pop	{r3}
 800d7d8:	469e      	mov	lr, r3
 800d7da:	4770      	bx	lr
