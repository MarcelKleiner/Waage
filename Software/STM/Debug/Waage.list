
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c31c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800c4a8  0800c4a8  0001c4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d0  0800c5d0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5d0  0800c5d0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5d0  0800c5d0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c5d0  0800c5d0  0001c5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5d8  0800c5d8  0001c5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001168  200001f4  0800c7d0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  0800c7d0  0002135c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066452  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009c2a  00000000  00000000  00086676  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b60  00000000  00000000  000902a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001898  00000000  00000000  00091e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027e83  00000000  00000000  00093698  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00027219  00000000  00000000  000bb51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b894b  00000000  00000000  000e2734  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019b07f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008584  00000000  00000000  0019b0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800c490 	.word	0x0800c490

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	0800c490 	.word	0x0800c490

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3324      	adds	r3, #36	; 0x24
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fb9c 	bl	800192c <_ZN5ModelC1Ev>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	335c      	adds	r3, #92	; 0x5c
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fab9 	bl	8001770 <_ZN8LoadCellC1Ev>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3370      	adds	r3, #112	; 0x70
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fab4 	bl	8001770 <_ZN8LoadCellC1Ev>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f103 0284 	add.w	r2, r3, #132	; 0x84
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3324      	adds	r3, #36	; 0x24
 8000212:	4619      	mov	r1, r3
 8000214:	4610      	mov	r0, r2
 8000216:	f002 fe8d 	bl	8002f34 <_ZN13ScreenControlC1EP5Model>
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3324      	adds	r3, #36	; 0x24
 8000224:	4619      	mov	r1, r3
 8000226:	4610      	mov	r0, r2
 8000228:	f000 fd84 	bl	8000d34 <_ZN13ButtonControlC1EP5Model>
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a11      	ldr	r2, [pc, #68]	; (8000274 <_ZN7AppMainC1Ev+0x98>)
 8000230:	605a      	str	r2, [r3, #4]
	lcSettings1.clkPin = CLK_L1_Pin;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2220      	movs	r2, #32
 8000236:	811a      	strh	r2, [r3, #8]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <_ZN7AppMainC1Ev+0x98>)
 800023c:	60da      	str	r2, [r3, #12]
	lcSettings1.dataPin = DATA_L1_Pin;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2210      	movs	r2, #16
 8000242:	821a      	strh	r2, [r3, #16]
	lcSettings1.loadCellNr = 1;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2201      	movs	r2, #1
 8000248:	749a      	strb	r2, [r3, #18]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a09      	ldr	r2, [pc, #36]	; (8000274 <_ZN7AppMainC1Ev+0x98>)
 800024e:	615a      	str	r2, [r3, #20]
	lcSettings2.clkPin = CLK_L2_Pin;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	831a      	strh	r2, [r3, #24]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <_ZN7AppMainC1Ev+0x98>)
 800025a:	61da      	str	r2, [r3, #28]
	lcSettings2.dataPin = DATA_L2_Pin;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2240      	movs	r2, #64	; 0x40
 8000260:	841a      	strh	r2, [r3, #32]
	lcSettings2.loadCellNr = 2;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2202      	movs	r2, #2
 8000266:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22


}
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4618      	mov	r0, r3
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	48000400 	.word	0x48000400

08000278 <_ZN7AppMain4InitEv>:



void AppMain::Init(){
 8000278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800027a:	b085      	sub	sp, #20
 800027c:	af02      	add	r7, sp, #8
 800027e:	6078      	str	r0, [r7, #4]
	loadCell1.InitLoadCell(&model, lcSettings1);
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f103 0524 	add.w	r5, r3, #36	; 0x24
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	466e      	mov	r6, sp
 8000290:	f103 020c 	add.w	r2, r3, #12
 8000294:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000298:	e886 0003 	stmia.w	r6, {r0, r1}
 800029c:	3304      	adds	r3, #4
 800029e:	cb0c      	ldmia	r3, {r2, r3}
 80002a0:	4629      	mov	r1, r5
 80002a2:	4620      	mov	r0, r4
 80002a4:	f001 fa74 	bl	8001790 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	466e      	mov	r6, sp
 80002b8:	f103 021c 	add.w	r2, r3, #28
 80002bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002c0:	e886 0003 	stmia.w	r6, {r0, r1}
 80002c4:	3314      	adds	r3, #20
 80002c6:	cb0c      	ldmia	r3, {r2, r3}
 80002c8:	4629      	mov	r1, r5
 80002ca:	4620      	mov	r0, r4
 80002cc:	f001 fa60 	bl	8001790 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f004 fb44 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80002dc:	2201      	movs	r2, #1
 80002de:	2110      	movs	r1, #16
 80002e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e4:	f004 fb3e 	bl	8004964 <HAL_GPIO_WritePin>
	screenControl.InitScreen();
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3384      	adds	r3, #132	; 0x84
 80002ec:	4618      	mov	r0, r3
 80002ee:	f002 fe8d 	bl	800300c <_ZN13ScreenControl10InitScreenEv>
	timeSynchroCounter = 0;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	2200      	movs	r2, #0
 80002f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000302 <_ZN7AppMain5mainFEv>:


void AppMain::mainF(){
 8000302:	b590      	push	{r4, r7, lr}
 8000304:	ed2d 8b02 	vpush	{d8}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
while(true){
	if(updateEnable)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d002      	beq.n	800031c <_ZN7AppMain5mainFEv+0x1a>
	updateEnable = false;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	701a      	strb	r2, [r3, #0]
	loadCell2.Update();
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	3370      	adds	r3, #112	; 0x70
 8000320:	4618      	mov	r0, r3
 8000322:	f001 fa4f 	bl	80017c4 <_ZN8LoadCell6UpdateEv>
	//loadCell.Update(); //ToDo
	int32_t weight1 = (model.getLoadCell1()-model.getLoadCellOffset1()) /model.getLoadCellGradient1();
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3324      	adds	r3, #36	; 0x24
 800032a:	4618      	mov	r0, r3
 800032c:	f001 fbac 	bl	8001a88 <_ZNK5Model12getLoadCell1Ev>
 8000330:	4604      	mov	r4, r0
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	3324      	adds	r3, #36	; 0x24
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fdc0 	bl	8001ebc <_ZNK5Model18getLoadCellOffset1Ev>
 800033c:	4603      	mov	r3, r0
 800033e:	1ae3      	subs	r3, r4, r3
 8000340:	ee07 3a90 	vmov	s15, r3
 8000344:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3324      	adds	r3, #36	; 0x24
 800034c:	4618      	mov	r0, r3
 800034e:	f001 fd81 	bl	8001e54 <_ZNK5Model20getLoadCellGradient1Ev>
 8000352:	eeb0 7a40 	vmov.f32	s14, s0
 8000356:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800035a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800035e:	ee17 3a90 	vmov	r3, s15
 8000362:	60fb      	str	r3, [r7, #12]
	int32_t weight2 = (model.getLoadCell2()-model.getLoadCellOffset2()) /model.getLoadCellGradient2();
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	3324      	adds	r3, #36	; 0x24
 8000368:	4618      	mov	r0, r3
 800036a:	f001 fba7 	bl	8001abc <_ZNK5Model12getLoadCell2Ev>
 800036e:	4604      	mov	r4, r0
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	3324      	adds	r3, #36	; 0x24
 8000374:	4618      	mov	r0, r3
 8000376:	f001 fdbb 	bl	8001ef0 <_ZNK5Model18getLoadCellOffset2Ev>
 800037a:	4603      	mov	r3, r0
 800037c:	1ae3      	subs	r3, r4, r3
 800037e:	ee07 3a90 	vmov	s15, r3
 8000382:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	3324      	adds	r3, #36	; 0x24
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fd7c 	bl	8001e88 <_ZNK5Model20getLoadCellGradient2Ev>
 8000390:	eeb0 7a40 	vmov.f32	s14, s0
 8000394:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000398:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800039c:	ee17 3a90 	vmov	r3, s15
 80003a0:	60bb      	str	r3, [r7, #8]
	model.setWeight(weight2);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3324      	adds	r3, #36	; 0x24
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	b212      	sxth	r2, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4618      	mov	r0, r3
 80003ae:	f001 fc03 	bl	8001bb8 <_ZN5Model9setWeightEs>
	model.setWeight(weight1 + weight2);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	b29b      	uxth	r3, r3
 80003c0:	4413      	add	r3, r2
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	b21b      	sxth	r3, r3
 80003c6:	4619      	mov	r1, r3
 80003c8:	f001 fbf6 	bl	8001bb8 <_ZN5Model9setWeightEs>
	screenControl.Update();
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3384      	adds	r3, #132	; 0x84
 80003d0:	4618      	mov	r0, r3
 80003d2:	f002 fe85 	bl	80030e0 <_ZN13ScreenControl6UpdateEv>
}
 80003d6:	e79a      	b.n	800030e <_ZN7AppMain5mainFEv+0xc>

080003d8 <_ZN7AppMain12ButtonUpdateEv>:


}

void AppMain::ButtonUpdate(){
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	buttonControl.UpdateButton();
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	33a8      	adds	r3, #168	; 0xa8
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fcc3 	bl	8000d70 <_ZN13ButtonControl12UpdateButtonEv>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
	...

080003f4 <_ZN7AppMain3ClkEv>:


void AppMain::Clk(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]



		if(timeSynchroCounter == 1800){
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000402:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000406:	d107      	bne.n	8000418 <_ZN7AppMain3ClkEv+0x24>
			timeSynchroCounter++;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800040e:	1c5a      	adds	r2, r3, #1
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000416:	e003      	b.n	8000420 <_ZN7AppMain3ClkEv+0x2c>
		}else{
			//ToDo Time Synchro
			timeSynchroCounter = 0;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	2200      	movs	r2, #0
 800041c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		}


		uint8_t seconds = model.getSeconds();
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3324      	adds	r3, #36	; 0x24
 8000424:	4618      	mov	r0, r3
 8000426:	f001 fb9d 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 800042a:	4603      	mov	r3, r0
 800042c:	73fb      	strb	r3, [r7, #15]
			uint8_t minute = model.getMinute();
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	3324      	adds	r3, #36	; 0x24
 8000432:	4618      	mov	r0, r3
 8000434:	f001 fb5c 	bl	8001af0 <_ZNK5Model9getMinuteEv>
 8000438:	4603      	mov	r3, r0
 800043a:	73bb      	strb	r3, [r7, #14]
			uint8_t hours = model.getHour();
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3324      	adds	r3, #36	; 0x24
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fb04 	bl	8001a4e <_ZNK5Model7getHourEv>
 8000446:	4603      	mov	r3, r0
 8000448:	737b      	strb	r3, [r7, #13]
			uint8_t day = model.getDay();
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3324      	adds	r3, #36	; 0x24
 800044e:	4618      	mov	r0, r3
 8000450:	f001 fae0 	bl	8001a14 <_ZNK5Model6getDayEv>
 8000454:	4603      	mov	r3, r0
 8000456:	733b      	strb	r3, [r7, #12]
			uint8_t month = model.getMonth();
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3324      	adds	r3, #36	; 0x24
 800045c:	4618      	mov	r0, r3
 800045e:	f001 fb64 	bl	8001b2a <_ZNK5Model8getMonthEv>
 8000462:	4603      	mov	r3, r0
 8000464:	72fb      	strb	r3, [r7, #11]
			uint8_t year = model.getYear();
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3324      	adds	r3, #36	; 0x24
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fbb3 	bl	8001bd6 <_ZNK5Model7getYearEv>
 8000470:	4603      	mov	r3, r0
 8000472:	72bb      	strb	r3, [r7, #10]
			if(model.getSeconds() < 59){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3324      	adds	r3, #36	; 0x24
 8000478:	4618      	mov	r0, r3
 800047a:	f001 fb73 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 800047e:	4603      	mov	r3, r0
 8000480:	2b3a      	cmp	r3, #58	; 0x3a
 8000482:	bf94      	ite	ls
 8000484:	2301      	movls	r3, #1
 8000486:	2300      	movhi	r3, #0
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d003      	beq.n	8000496 <_ZN7AppMain3ClkEv+0xa2>
				seconds++;
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	3301      	adds	r3, #1
 8000492:	73fb      	strb	r3, [r7, #15]
 8000494:	e068      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
			}else{
				seconds = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	73fb      	strb	r3, [r7, #15]
				if(minute == 59){
 800049a:	7bbb      	ldrb	r3, [r7, #14]
 800049c:	2b3b      	cmp	r3, #59	; 0x3b
 800049e:	d160      	bne.n	8000562 <_ZN7AppMain3ClkEv+0x16e>
					minute = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73bb      	strb	r3, [r7, #14]
					if(hours == 23){
 80004a4:	7b7b      	ldrb	r3, [r7, #13]
 80004a6:	2b17      	cmp	r3, #23
 80004a8:	d157      	bne.n	800055a <_ZN7AppMain3ClkEv+0x166>
						hours = 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	737b      	strb	r3, [r7, #13]
						switch(month){
 80004ae:	7afb      	ldrb	r3, [r7, #11]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	2b0b      	cmp	r3, #11
 80004b4:	d858      	bhi.n	8000568 <_ZN7AppMain3ClkEv+0x174>
 80004b6:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <_ZN7AppMain3ClkEv+0xc8>)
 80004b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004bc:	080004ed 	.word	0x080004ed
 80004c0:	0800053f 	.word	0x0800053f
 80004c4:	080004ed 	.word	0x080004ed
 80004c8:	08000525 	.word	0x08000525
 80004cc:	080004ed 	.word	0x080004ed
 80004d0:	08000525 	.word	0x08000525
 80004d4:	080004ed 	.word	0x080004ed
 80004d8:	080004ed 	.word	0x080004ed
 80004dc:	08000525 	.word	0x08000525
 80004e0:	080004ed 	.word	0x080004ed
 80004e4:	08000525 	.word	0x08000525
 80004e8:	08000507 	.word	0x08000507
								case 3:
								case 5:
								case 7:
								case 8:
								case 10:
									if(day == 31 ){
 80004ec:	7b3b      	ldrb	r3, [r7, #12]
 80004ee:	2b1f      	cmp	r3, #31
 80004f0:	d105      	bne.n	80004fe <_ZN7AppMain3ClkEv+0x10a>
										day = 1;
 80004f2:	2301      	movs	r3, #1
 80004f4:	733b      	strb	r3, [r7, #12]
										month++;
 80004f6:	7afb      	ldrb	r3, [r7, #11]
 80004f8:	3301      	adds	r3, #1
 80004fa:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 80004fc:	e034      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
										day++;
 80004fe:	7b3b      	ldrb	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	733b      	strb	r3, [r7, #12]
									break;
 8000504:	e030      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
								case 12:
									if(day == 31 ){
 8000506:	7b3b      	ldrb	r3, [r7, #12]
 8000508:	2b1f      	cmp	r3, #31
 800050a:	d107      	bne.n	800051c <_ZN7AppMain3ClkEv+0x128>
										day = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	733b      	strb	r3, [r7, #12]
										month = 1;
 8000510:	2301      	movs	r3, #1
 8000512:	72fb      	strb	r3, [r7, #11]
										year++;
 8000514:	7abb      	ldrb	r3, [r7, #10]
 8000516:	3301      	adds	r3, #1
 8000518:	72bb      	strb	r3, [r7, #10]
									}else{
										day++;
									}
									break;
 800051a:	e025      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
										day++;
 800051c:	7b3b      	ldrb	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	733b      	strb	r3, [r7, #12]
									break;
 8000522:	e021      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
								case 4:
								case 6:
								case 9:
								case 11:
									if(day == 30 ){
 8000524:	7b3b      	ldrb	r3, [r7, #12]
 8000526:	2b1e      	cmp	r3, #30
 8000528:	d105      	bne.n	8000536 <_ZN7AppMain3ClkEv+0x142>
										day = 1;
 800052a:	2301      	movs	r3, #1
 800052c:	733b      	strb	r3, [r7, #12]
										month++;
 800052e:	7afb      	ldrb	r3, [r7, #11]
 8000530:	3301      	adds	r3, #1
 8000532:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 8000534:	e018      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
										day++;
 8000536:	7b3b      	ldrb	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	733b      	strb	r3, [r7, #12]
									break;
 800053c:	e014      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
								case 2:
									if(day == 28 ){
 800053e:	7b3b      	ldrb	r3, [r7, #12]
 8000540:	2b1c      	cmp	r3, #28
 8000542:	d105      	bne.n	8000550 <_ZN7AppMain3ClkEv+0x15c>
										day= 1;
 8000544:	2301      	movs	r3, #1
 8000546:	733b      	strb	r3, [r7, #12]
										month++;
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	3301      	adds	r3, #1
 800054c:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 800054e:	e00b      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
										day++;
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	3301      	adds	r3, #1
 8000554:	733b      	strb	r3, [r7, #12]
									break;
 8000556:	bf00      	nop
 8000558:	e006      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
								}
					}else{
						hours++;
 800055a:	7b7b      	ldrb	r3, [r7, #13]
 800055c:	3301      	adds	r3, #1
 800055e:	737b      	strb	r3, [r7, #13]
 8000560:	e002      	b.n	8000568 <_ZN7AppMain3ClkEv+0x174>
					}
				}else{
					minute++;
 8000562:	7bbb      	ldrb	r3, [r7, #14]
 8000564:	3301      	adds	r3, #1
 8000566:	73bb      	strb	r3, [r7, #14]
				}
			}

		if(screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS && screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS){
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	3384      	adds	r3, #132	; 0x84
 800056c:	4618      	mov	r0, r3
 800056e:	f002 fe17 	bl	80031a0 <_ZN13ScreenControl16getCurrentScreenEv>
 8000572:	4603      	mov	r3, r0
 8000574:	2b05      	cmp	r3, #5
 8000576:	d009      	beq.n	800058c <_ZN7AppMain3ClkEv+0x198>
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	3384      	adds	r3, #132	; 0x84
 800057c:	4618      	mov	r0, r3
 800057e:	f002 fe0f 	bl	80031a0 <_ZN13ScreenControl16getCurrentScreenEv>
 8000582:	4603      	mov	r3, r0
 8000584:	2b06      	cmp	r3, #6
 8000586:	d001      	beq.n	800058c <_ZN7AppMain3ClkEv+0x198>
 8000588:	2301      	movs	r3, #1
 800058a:	e000      	b.n	800058e <_ZN7AppMain3ClkEv+0x19a>
 800058c:	2300      	movs	r3, #0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d029      	beq.n	80005e6 <_ZN7AppMain3ClkEv+0x1f2>
			model.setSeconds(seconds);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3324      	adds	r3, #36	; 0x24
 8000596:	7bfa      	ldrb	r2, [r7, #15]
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f001 faef 	bl	8001b7e <_ZN5Model10setSecondsEh>
			model.setMinute(minute);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3324      	adds	r3, #36	; 0x24
 80005a4:	7bba      	ldrb	r2, [r7, #14]
 80005a6:	4611      	mov	r1, r2
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 faae 	bl	8001b0a <_ZN5Model9setMinuteEh>
			model.setHour(hours);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3324      	adds	r3, #36	; 0x24
 80005b2:	7b7a      	ldrb	r2, [r7, #13]
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fa56 	bl	8001a68 <_ZN5Model7setHourEh>
			model.setDay(day);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3324      	adds	r3, #36	; 0x24
 80005c0:	7b3a      	ldrb	r2, [r7, #12]
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 fa32 	bl	8001a2e <_ZN5Model6setDayEh>
			model.setMonth(month);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3324      	adds	r3, #36	; 0x24
 80005ce:	7afa      	ldrb	r2, [r7, #11]
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fab6 	bl	8001b44 <_ZN5Model8setMonthEh>
			model.setYear(year);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3324      	adds	r3, #36	; 0x24
 80005dc:	7aba      	ldrb	r2, [r7, #10]
 80005de:	4611      	mov	r1, r2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fb05 	bl	8001bf0 <_ZN5Model7setYearEh>
		}
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <MX_GPIO_Init+0x170>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a55      	ldr	r2, [pc, #340]	; (8000760 <MX_GPIO_Init+0x170>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b53      	ldr	r3, [pc, #332]	; (8000760 <MX_GPIO_Init+0x170>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b50      	ldr	r3, [pc, #320]	; (8000760 <MX_GPIO_Init+0x170>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a4f      	ldr	r2, [pc, #316]	; (8000760 <MX_GPIO_Init+0x170>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b4d      	ldr	r3, [pc, #308]	; (8000760 <MX_GPIO_Init+0x170>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	4b4a      	ldr	r3, [pc, #296]	; (8000760 <MX_GPIO_Init+0x170>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a49      	ldr	r2, [pc, #292]	; (8000760 <MX_GPIO_Init+0x170>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b47      	ldr	r3, [pc, #284]	; (8000760 <MX_GPIO_Init+0x170>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b44      	ldr	r3, [pc, #272]	; (8000760 <MX_GPIO_Init+0x170>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a43      	ldr	r2, [pc, #268]	; (8000760 <MX_GPIO_Init+0x170>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b41      	ldr	r3, [pc, #260]	; (8000760 <MX_GPIO_Init+0x170>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800066c:	483d      	ldr	r0, [pc, #244]	; (8000764 <MX_GPIO_Init+0x174>)
 800066e:	f004 f979 	bl	8004964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000672:	2200      	movs	r2, #0
 8000674:	f248 0157 	movw	r1, #32855	; 0x8057
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f004 f972 	bl	8004964 <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	21a9      	movs	r1, #169	; 0xa9
 8000684:	4838      	ldr	r0, [pc, #224]	; (8000768 <MX_GPIO_Init+0x178>)
 8000686:	f004 f96d 	bl	8004964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2108      	movs	r1, #8
 800068e:	4837      	ldr	r0, [pc, #220]	; (800076c <MX_GPIO_Init+0x17c>)
 8000690:	f004 f968 	bl	8004964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000694:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	482d      	ldr	r0, [pc, #180]	; (8000764 <MX_GPIO_Init+0x174>)
 80006ae:	f003 ffcf 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 80006b2:	f248 0357 	movw	r3, #32855	; 0x8057
 80006b6:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4619      	mov	r1, r3
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ce:	f003 ffbf 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 80006d2:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f003 ffb1 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 80006ee:	23a9      	movs	r3, #169	; 0xa9
 80006f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	4818      	ldr	r0, [pc, #96]	; (8000768 <MX_GPIO_Init+0x178>)
 8000706:	f003 ffa3 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 800070a:	2302      	movs	r3, #2
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000712:	2302      	movs	r3, #2
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	4619      	mov	r1, r3
 800071c:	4812      	ldr	r0, [pc, #72]	; (8000768 <MX_GPIO_Init+0x178>)
 800071e:	f003 ff97 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 8000722:	2350      	movs	r3, #80	; 0x50
 8000724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_GPIO_Init+0x178>)
 8000736:	f003 ff8b 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 800073a:	2308      	movs	r3, #8
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4806      	ldr	r0, [pc, #24]	; (800076c <MX_GPIO_Init+0x17c>)
 8000752:	f003 ff7d 	bl	8004650 <HAL_GPIO_Init>

}
 8000756:	bf00      	nop
 8000758:	3728      	adds	r7, #40	; 0x28
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400
 800076c:	48001c00 	.word	0x48001c00

08000770 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	f004 f8f2 	bl	8004994 <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 f931 	bl	8000a1c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007be:	f004 f978 	bl	8004ab2 <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 f928 	bl	8000a1c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2C1_Init+0x74>)
 80007d0:	f004 f9ba 	bl	8004b48 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f91f 	bl	8000a1c <Error_Handler>
  }

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000328 	.word	0x20000328
 80007e8:	40005400 	.word	0x40005400
 80007ec:	10909cec 	.word	0x10909cec

080007f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a18      	ldr	r2, [pc, #96]	; (8000870 <HAL_I2C_MspInit+0x80>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d129      	bne.n	8000866 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <HAL_I2C_MspInit+0x84>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <HAL_I2C_MspInit+0x84>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_I2C_MspInit+0x84>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800082a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000830:	2312      	movs	r3, #18
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	2301      	movs	r3, #1
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800083c:	2304      	movs	r3, #4
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f003 ff01 	bl	8004650 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_I2C_MspInit+0x84>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_I2C_MspInit+0x84>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_I2C_MspInit+0x84>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40005400 	.word	0x40005400
 8000874:	40021000 	.word	0x40021000

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087c:	f003 fd3f 	bl	80042fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000880:	f000 f81e 	bl	80008c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000884:	f7ff feb4 	bl	80005f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000888:	f7ff ff72 	bl	8000770 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800088c:	f00a fe52 	bl	800b534 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000890:	f000 f9de 	bl	8000c50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 8000894:	4807      	ldr	r0, [pc, #28]	; (80008b4 <main+0x3c>)
 8000896:	f7ff ffab 	bl	80007f0 <HAL_I2C_MspInit>
  HAL_TIM_Base_MspInit(&htim2);
 800089a:	4807      	ldr	r0, [pc, #28]	; (80008b8 <main+0x40>)
 800089c:	f000 fa26 	bl	8000cec <HAL_TIM_Base_MspInit>
  appMain.Init();
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <main+0x44>)
 80008a2:	f7ff fce9 	bl	8000278 <_ZN7AppMain4InitEv>
  HAL_TIM_Base_Start_IT(&htim2);
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <main+0x40>)
 80008a8:	f006 fdc0 	bl	800742c <HAL_TIM_Base_Start_IT>
	appMain.mainF();
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <main+0x44>)
 80008ae:	f7ff fd28 	bl	8000302 <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <main+0x3a>
 80008b4:	20000328 	.word	0x20000328
 80008b8:	20000374 	.word	0x20000374
 80008bc:	20000210 	.word	0x20000210

080008c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0a4      	sub	sp, #144	; 0x90
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008ca:	2244      	movs	r2, #68	; 0x44
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00b fcd7 	bl	800c282 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2234      	movs	r2, #52	; 0x34
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fcc9 	bl	800c282 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008f4:	f005 fd18 	bl	8006328 <HAL_PWREx_ControlVoltageScaling>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	bf14      	ite	ne
 80008fe:	2301      	movne	r3, #1
 8000900:	2300      	moveq	r3, #0
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000908:	f000 f888 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800090c:	2312      	movs	r3, #18
 800090e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000916:	2340      	movs	r3, #64	; 0x40
 8000918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000922:	23b0      	movs	r3, #176	; 0xb0
 8000924:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092a:	2302      	movs	r3, #2
 800092c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000934:	230a      	movs	r3, #10
 8000936:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800094a:	4618      	mov	r0, r3
 800094c:	f005 fd52 	bl	80063f4 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	bf14      	ite	ne
 8000956:	2301      	movne	r3, #1
 8000958:	2300      	moveq	r3, #0
 800095a:	b2db      	uxtb	r3, r3
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000960:	f000 f85c 	bl	8000a1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2303      	movs	r3, #3
 800096a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800097c:	2104      	movs	r1, #4
 800097e:	4618      	mov	r0, r3
 8000980:	f006 f99e 	bl	8006cc0 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000994:	f000 f842 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000998:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800099c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 80009a2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f006 fb60 	bl	8007070 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80009c0:	f000 f82c 	bl	8000a1c <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3790      	adds	r7, #144	; 0x90
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

uint8_t timeCounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	/*IO_COM Synchronisationstimer*/
	if(htim->Instance == TIM2){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009dc:	d116      	bne.n	8000a0c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timeCounter == 99){
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b63      	cmp	r3, #99	; 0x63
 80009e4:	d106      	bne.n	80009f4 <HAL_TIM_PeriodElapsedCallback+0x28>
			appMain.Clk();
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80009e8:	f7ff fd04 	bl	80003f4 <_ZN7AppMain3ClkEv>
			timeCounter = 0;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e005      	b.n	8000a00 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			timeCounter++;
 80009f4:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80009fe:	701a      	strb	r2, [r3, #0]
		}
		appMain.ButtonUpdate();
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a02:	f7ff fce9 	bl	80003d8 <_ZN7AppMain12ButtonUpdateEv>
		appMain.updateEnable = true;
 8000a06:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]

	}
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200002cc 	.word	0x200002cc
 8000a18:	20000210 	.word	0x20000210

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
	...

08000a2c <_Z41__static_initialization_and_destruction_0ii>:
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d107      	bne.n	8000a4c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d102      	bne.n	8000a4c <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000a48:	f7ff fbc8 	bl	80001dc <_ZN7AppMainC1Ev>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000210 	.word	0x20000210

08000a58 <_GLOBAL__sub_I_appMain>:
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a60:	2001      	movs	r0, #1
 8000a62:	f7ff ffe3 	bl	8000a2c <_Z41__static_initialization_and_destruction_0ii>
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x44>)
 8000a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x44>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6613      	str	r3, [r2, #96]	; 0x60
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x44>)
 8000a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x44>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6593      	str	r3, [r2, #88]	; 0x58
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f003 fc50 	bl	80043a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <TIM2_IRQHandler+0x10>)
 8000b12:	f006 fcdf 	bl	80074d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000374 	.word	0x20000374

08000b20 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <USB_IRQHandler+0x10>)
 8000b26:	f004 f98f 	bl	8004e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20001064 	.word	0x20001064

08000b34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	return 1;
 8000b38:	2301      	movs	r3, #1
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_kill>:

int _kill(int pid, int sig)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b4e:	f00b fb53 	bl	800c1f8 <__errno>
 8000b52:	4602      	mov	r2, r0
 8000b54:	2316      	movs	r3, #22
 8000b56:	6013      	str	r3, [r2, #0]
	return -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_exit>:

void _exit (int status)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff ffe7 	bl	8000b44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b76:	e7fe      	b.n	8000b76 <_exit+0x12>

08000b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b80:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <_sbrk+0x5c>)
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <_sbrk+0x60>)
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <_sbrk+0x64>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <_sbrk+0x64>)
 8000b96:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <_sbrk+0x68>)
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d207      	bcs.n	8000bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba8:	f00b fb26 	bl	800c1f8 <__errno>
 8000bac:	4602      	mov	r2, r0
 8000bae:	230c      	movs	r3, #12
 8000bb0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	e009      	b.n	8000bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <_sbrk+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <_sbrk+0x64>)
 8000bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000a000 	.word	0x2000a000
 8000bd8:	00000400 	.word	0x00000400
 8000bdc:	200002d0 	.word	0x200002d0
 8000be0:	20001360 	.word	0x20001360

08000be4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <SystemInit+0x64>)
 8000bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bee:	4a16      	ldr	r2, [pc, #88]	; (8000c48 <SystemInit+0x64>)
 8000bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <SystemInit+0x68>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <SystemInit+0x68>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <SystemInit+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <SystemInit+0x68>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <SystemInit+0x68>)
 8000c10:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c14:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <SystemInit+0x68>)
 8000c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c20:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SystemInit+0x68>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <SystemInit+0x68>)
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c2e:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <SystemInit+0x68>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SystemInit+0x64>)
 8000c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c3a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	40021000 	.word	0x40021000

08000c50 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c78:	2210      	movs	r2, #16
 8000c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 46999;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c84:	f24b 7297 	movw	r2, #46999	; 0xb797
 8000c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000c98:	f006 fb70 	bl	800737c <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ca2:	f7ff febb 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000cb4:	f006 fd2d 	bl	8007712 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cbe:	f7ff fead 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_TIM2_Init+0x98>)
 8000cd0:	f006 fefe 	bl	8007ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cda:	f7ff fe9f 	bl	8000a1c <Error_Handler>
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000374 	.word	0x20000374

08000cec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cfc:	d113      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_TIM_Base_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <HAL_TIM_Base_MspInit+0x44>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_TIM_Base_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201c      	movs	r0, #28
 8000d1c:	f003 fc61 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d20:	201c      	movs	r0, #28
 8000d22:	f003 fc7a 	bl	800461a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2200      	movs	r2, #0
 8000d54:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	60da      	str	r2, [r3, #12]
}
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4618      	mov	r0, r3
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000d78:	2108      	movs	r1, #8
 8000d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7e:	f003 fdd9 	bl	8004934 <HAL_GPIO_ReadPin>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	bf14      	ite	ne
 8000d88:	2301      	movne	r3, #1
 8000d8a:	2300      	moveq	r3, #0
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	795b      	ldrb	r3, [r3, #5]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d90d      	bls.n	8000dc2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	2b63      	cmp	r3, #99	; 0x63
 8000dac:	d809      	bhi.n	8000dc2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8000dae:	2108      	movs	r1, #8
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f003 fdbe 	bl	8004934 <HAL_GPIO_ReadPin>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8000dc2:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 ff48 	bl	8001c64 <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	795b      	ldrb	r3, [r3, #5]
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d90f      	bls.n	8000e02 <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	f083 0301 	eor.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d008      	beq.n	8000e02 <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 ff17 	bl	8001c2a <_ZN5Model9setT1LongEb>
		T1last = true;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8000e02:	2108      	movs	r1, #8
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f003 fd94 	bl	8004934 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 8000e28:	2120      	movs	r1, #32
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f003 fd81 	bl	8004934 <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	bf14      	ite	ne
 8000e38:	2301      	movne	r3, #1
 8000e3a:	2300      	moveq	r3, #0
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d005      	beq.n	8000e4e <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d90d      	bls.n	8000e72 <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	799b      	ldrb	r3, [r3, #6]
 8000e5a:	2b63      	cmp	r3, #99	; 0x63
 8000e5c:	d809      	bhi.n	8000e72 <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 8000e5e:	2120      	movs	r1, #32
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f003 fd66 	bl	8004934 <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <_ZN13ButtonControl12UpdateButtonEv+0x102>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 8000e72:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d008      	beq.n	8000e8a <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 ff2a 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	799b      	ldrb	r3, [r3, #6]
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	d90f      	bls.n	8000eb2 <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	f083 0301 	eor.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d008      	beq.n	8000eb2 <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fef9 	bl	8001c9e <_ZN5Model9setT2LongEb>
		T2last = true;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8000eb2:	2120      	movs	r1, #32
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f003 fd3c 	bl	8004934 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf0c      	ite	eq
 8000ec2:	2301      	moveq	r3, #1
 8000ec4:	2300      	movne	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f003 fd29 	bl	8004934 <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d005      	beq.n	8000efe <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	79db      	ldrb	r3, [r3, #7]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d90d      	bls.n	8000f22 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	79db      	ldrb	r3, [r3, #7]
 8000f0a:	2b63      	cmp	r3, #99	; 0x63
 8000f0c:	d809      	bhi.n	8000f22 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f003 fd0e 	bl	8004934 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8000f22:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ff0c 	bl	8001d4c <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	79db      	ldrb	r3, [r3, #7]
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d90f      	bls.n	8000f62 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	f083 0301 	eor.w	r3, r3, #1
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d008      	beq.n	8000f62 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2101      	movs	r1, #1
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fedb 	bl	8001d12 <_ZN5Model9setT3LongEb>
		T3last = true;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 8000f62:	2180      	movs	r1, #128	; 0x80
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f003 fce4 	bl	8004934 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 8000f88:	2102      	movs	r1, #2
 8000f8a:	4859      	ldr	r0, [pc, #356]	; (80010f0 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8000f8c:	f003 fcd2 	bl	8004934 <HAL_GPIO_ReadPin>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	bf14      	ite	ne
 8000f96:	2301      	movne	r3, #1
 8000f98:	2300      	moveq	r3, #0
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a1b      	ldrb	r3, [r3, #8]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d90c      	bls.n	8000fce <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7a1b      	ldrb	r3, [r3, #8]
 8000fb8:	2b63      	cmp	r3, #99	; 0x63
 8000fba:	d808      	bhi.n	8000fce <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	484c      	ldr	r0, [pc, #304]	; (80010f0 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8000fc0:	f003 fcb8 	bl	8004934 <HAL_GPIO_ReadPin>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <_ZN13ButtonControl12UpdateButtonEv+0x260>
 8000fce:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d008      	beq.n	8000fe6 <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	2101      	movs	r1, #1
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 fef0 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a1b      	ldrb	r3, [r3, #8]
 8000fea:	2b64      	cmp	r3, #100	; 0x64
 8000fec:	d90f      	bls.n	800100e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	78db      	ldrb	r3, [r3, #3]
 8000ff2:	f083 0301 	eor.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2101      	movs	r1, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f000 febf 	bl	8001d86 <_ZN5Model9setT4LongEb>
		T4last = true;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2201      	movs	r2, #1
 800100c:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 800100e:	2102      	movs	r1, #2
 8001010:	4837      	ldr	r0, [pc, #220]	; (80010f0 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001012:	f003 fc8f 	bl	8004934 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	bf0c      	ite	eq
 800101c:	2301      	moveq	r3, #1
 800101e:	2300      	movne	r3, #0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 8001032:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f003 fc7b 	bl	8004934 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7a5b      	ldrb	r3, [r3, #9]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 800105e:	2b02      	cmp	r3, #2
 8001060:	d90e      	bls.n	8001080 <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	7a5b      	ldrb	r3, [r3, #9]
 8001066:	2b63      	cmp	r3, #99	; 0x63
 8001068:	d80a      	bhi.n	8001080 <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f003 fc5f 	bl	8004934 <HAL_GPIO_ReadPin>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d101      	bne.n	8001080 <_ZN13ButtonControl12UpdateButtonEv+0x310>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <_ZN13ButtonControl12UpdateButtonEv+0x312>
 8001080:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2101      	movs	r1, #1
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fed1 	bl	8001e34 <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7a5b      	ldrb	r3, [r3, #9]
 800109c:	2b64      	cmp	r3, #100	; 0x64
 800109e:	d90f      	bls.n	80010c0 <_ZN13ButtonControl12UpdateButtonEv+0x350>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	791b      	ldrb	r3, [r3, #4]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2101      	movs	r1, #1
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fea0 	bl	8001dfa <_ZN5Model9setT5LongEb>
		T5last = true;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 80010c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c8:	f003 fc34 	bl	8004934 <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d005      	beq.n	80010e8 <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	725a      	strb	r2, [r3, #9]
	}



}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	48000400 	.word	0x48000400

080010f4 <_ZN3LCDC1Ev>:
#include "main.h"
using namespace std;



LCD::LCD() {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

}
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

	string s;
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4618      	mov	r0, r3
 800111a:	f00a ffde 	bl	800c0da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2102      	movs	r1, #2
 8001122:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001126:	f003 fc1d 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001132:	f003 fc17 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2108      	movs	r1, #8
 800113a:	4824      	ldr	r0, [pc, #144]	; (80011cc <_ZN3LCD7InitLCDEv+0xc0>)
 800113c:	f003 fc12 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f003 fc0b 	bl	8004964 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	481e      	ldr	r0, [pc, #120]	; (80011d0 <_ZN3LCD7InitLCDEv+0xc4>)
 8001156:	f003 fc05 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <_ZN3LCD7InitLCDEv+0xc4>)
 8001162:	f003 fbff 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2101      	movs	r1, #1
 800116a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116e:	f003 fbf9 	bl	8004964 <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 8001172:	2130      	movs	r1, #48	; 0x30
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f995 	bl	80014a4 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 800117a:	2130      	movs	r1, #48	; 0x30
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f991 	bl	80014a4 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 8001182:	2130      	movs	r1, #48	; 0x30
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f98d 	bl	80014a4 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x20);
 800118a:	2120      	movs	r1, #32
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f989 	bl	80014a4 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommand(0x28);
 8001192:	2128      	movs	r1, #40	; 0x28
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f9cf 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x10); //Set cursor
 800119a:	2110      	movs	r1, #16
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f9cb 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 80011a2:	210f      	movs	r1, #15
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 f9c7 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x06);
 80011aa:	2106      	movs	r1, #6
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f9c3 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x01);
 80011b2:	2101      	movs	r1, #1
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f9bf 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	string s;
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	4618      	mov	r0, r3
 80011c0:	f00a ff92 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	48001c00 	.word	0x48001c00
 80011d0:	48000800 	.word	0x48000800

080011d4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:

void LCD::Write(string line1, string line2){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]

	WriteCommand(0x80);
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f000 f9a8 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	75fb      	strb	r3, [r7, #23]
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b0b      	cmp	r3, #11
 80011f0:	d81f      	bhi.n	8001232 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e>
		if(line1.length() > i){
 80011f2:	68b8      	ldr	r0, [r7, #8]
 80011f4:	f00a ff7e 	bl	800c0f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	bf8c      	ite	hi
 8001200:	2301      	movhi	r3, #1
 8001202:	2300      	movls	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e>
			WriteData(line1[i]);
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	4619      	mov	r1, r3
 800120e:	68b8      	ldr	r0, [r7, #8]
 8001210:	f00a ff72 	bl	800c0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001214:	4603      	mov	r3, r0
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 fa1a 	bl	8001654 <_ZN3LCD9WriteDataEh>
 8001220:	e003      	b.n	800122a <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x56>
		}else{
			WriteData(0x10);
 8001222:	2110      	movs	r1, #16
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 fa15 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	3301      	adds	r3, #1
 800122e:	75fb      	strb	r3, [r7, #23]
 8001230:	e7dc      	b.n	80011ec <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x18>
		}
	}
	WriteCommand(0x80+0x40);
 8001232:	21c0      	movs	r1, #192	; 0xc0
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 f97f 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 800123a:	2300      	movs	r3, #0
 800123c:	75bb      	strb	r3, [r7, #22]
 800123e:	7dbb      	ldrb	r3, [r7, #22]
 8001240:	2b0b      	cmp	r3, #11
 8001242:	d81f      	bhi.n	8001284 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xb0>
		if(line2.length() > i){
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00a ff55 	bl	800c0f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800124a:	4602      	mov	r2, r0
 800124c:	7dbb      	ldrb	r3, [r7, #22]
 800124e:	429a      	cmp	r2, r3
 8001250:	bf8c      	ite	hi
 8001252:	2301      	movhi	r3, #1
 8001254:	2300      	movls	r3, #0
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00b      	beq.n	8001274 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa0>
			WriteData(line2[i]);
 800125c:	7dbb      	ldrb	r3, [r7, #22]
 800125e:	4619      	mov	r1, r3
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f00a ff49 	bl	800c0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001266:	4603      	mov	r3, r0
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f9f1 	bl	8001654 <_ZN3LCD9WriteDataEh>
 8001272:	e003      	b.n	800127c <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa8>
		}else{
			WriteData(0x10);
 8001274:	2110      	movs	r1, #16
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 f9ec 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	3301      	adds	r3, #1
 8001280:	75bb      	strb	r3, [r7, #22]
 8001282:	e7dc      	b.n	800123e <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6a>
		}
	}
}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_ZN3LCD5WriteEPchhS0_hh>:

void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4611      	mov	r1, r2
 8001298:	461a      	mov	r2, r3
 800129a:	460b      	mov	r3, r1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	4613      	mov	r3, r2
 80012a0:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	68f8      	ldr	r0, [r7, #12]
 80012a6:	f000 f947 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	75fb      	strb	r3, [r7, #23]
 80012ae:	7dfa      	ldrb	r2, [r7, #23]
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d207      	bcs.n	80012c6 <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 80012b6:	2110      	movs	r1, #16
 80012b8:	68f8      	ldr	r0, [r7, #12]
 80012ba:	f000 f9cb 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	3301      	adds	r3, #1
 80012c2:	75fb      	strb	r3, [r7, #23]
 80012c4:	e7f3      	b.n	80012ae <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 80012c6:	2300      	movs	r3, #0
 80012c8:	75bb      	strb	r3, [r7, #22]
 80012ca:	7dbb      	ldrb	r3, [r7, #22]
 80012cc:	2b0b      	cmp	r3, #11
 80012ce:	d814      	bhi.n	80012fa <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	7dbb      	ldrb	r3, [r7, #22]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d908      	bls.n	80012ea <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 f9b6 	bl	8001654 <_ZN3LCD9WriteDataEh>
 80012e8:	e003      	b.n	80012f2 <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 80012ea:	2110      	movs	r1, #16
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f000 f9b1 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 80012f2:	7dbb      	ldrb	r3, [r7, #22]
 80012f4:	3301      	adds	r3, #1
 80012f6:	75bb      	strb	r3, [r7, #22]
 80012f8:	e7e7      	b.n	80012ca <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 80012fa:	21c0      	movs	r1, #192	; 0xc0
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f000 f91b 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001302:	2300      	movs	r3, #0
 8001304:	757b      	strb	r3, [r7, #21]
 8001306:	7d7a      	ldrb	r2, [r7, #21]
 8001308:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800130c:	429a      	cmp	r2, r3
 800130e:	d207      	bcs.n	8001320 <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 8001310:	2110      	movs	r1, #16
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f99e 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001318:	7d7b      	ldrb	r3, [r7, #21]
 800131a:	3301      	adds	r3, #1
 800131c:	757b      	strb	r3, [r7, #21]
 800131e:	e7f2      	b.n	8001306 <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 8001320:	2300      	movs	r3, #0
 8001322:	753b      	strb	r3, [r7, #20]
 8001324:	7d3a      	ldrb	r2, [r7, #20]
 8001326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800132a:	f1c3 030c 	rsb	r3, r3, #12
 800132e:	429a      	cmp	r2, r3
 8001330:	da15      	bge.n	800135e <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 8001332:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	429a      	cmp	r2, r3
 800133a:	d908      	bls.n	800134e <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 800133c:	7d3b      	ldrb	r3, [r7, #20]
 800133e:	6a3a      	ldr	r2, [r7, #32]
 8001340:	4413      	add	r3, r2
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f984 	bl	8001654 <_ZN3LCD9WriteDataEh>
 800134c:	e003      	b.n	8001356 <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 800134e:	2110      	movs	r1, #16
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f97f 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 8001356:	7d3b      	ldrb	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	753b      	strb	r3, [r7, #20]
 800135c:	e7e2      	b.n	8001324 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>:


void LCD::Write(string line1, uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4613      	mov	r3, r2
 8001374:	71fb      	strb	r3, [r7, #7]
	WriteCommand(0x80+startl1);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	3b80      	subs	r3, #128	; 0x80
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4619      	mov	r1, r3
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f8da 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001384:	2300      	movs	r3, #0
 8001386:	75fb      	strb	r3, [r7, #23]
 8001388:	7dfa      	ldrb	r2, [r7, #23]
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f1c3 030c 	rsb	r3, r3, #12
 8001390:	429a      	cmp	r2, r3
 8001392:	da1f      	bge.n	80013d4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x6e>
		if(line1.length() > i){
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f00a fead 	bl	800c0f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800139a:	4602      	mov	r2, r0
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	429a      	cmp	r2, r3
 80013a0:	bf8c      	ite	hi
 80013a2:	2301      	movhi	r3, #1
 80013a4:	2300      	movls	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x5e>
			WriteData(line1[i]);
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
 80013ae:	4619      	mov	r1, r3
 80013b0:	68b8      	ldr	r0, [r7, #8]
 80013b2:	f00a fea1 	bl	800c0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80013b6:	4603      	mov	r3, r0
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f949 	bl	8001654 <_ZN3LCD9WriteDataEh>
 80013c2:	e003      	b.n	80013cc <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x66>
		}else{
			WriteData(0x10);
 80013c4:	2110      	movs	r1, #16
 80013c6:	68f8      	ldr	r0, [r7, #12]
 80013c8:	f000 f944 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	e7d9      	b.n	8001388 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x22>
		}
	}


	WriteCommand(0x80+0x40);
 80013d4:	21c0      	movs	r1, #192	; 0xc0
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f8ae 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 80013dc:	2300      	movs	r3, #0
 80013de:	75bb      	strb	r3, [r7, #22]
 80013e0:	7dba      	ldrb	r2, [r7, #22]
 80013e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d207      	bcs.n	80013fa <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x94>
		WriteData(0x10);
 80013ea:	2110      	movs	r1, #16
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f931 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	3301      	adds	r3, #1
 80013f6:	75bb      	strb	r3, [r7, #22]
 80013f8:	e7f2      	b.n	80013e0 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 80013fa:	2300      	movs	r3, #0
 80013fc:	757b      	strb	r3, [r7, #21]
 80013fe:	7d7a      	ldrb	r2, [r7, #21]
 8001400:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001404:	f1c3 030c 	rsb	r3, r3, #12
 8001408:	429a      	cmp	r2, r3
 800140a:	da15      	bge.n	8001438 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xd2>
		if(lengthL2 > i){
 800140c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001410:	7d7b      	ldrb	r3, [r7, #21]
 8001412:	429a      	cmp	r2, r3
 8001414:	d908      	bls.n	8001428 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xc2>
			WriteData(line2[i]);
 8001416:	7d7b      	ldrb	r3, [r7, #21]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f917 	bl	8001654 <_ZN3LCD9WriteDataEh>
 8001426:	e003      	b.n	8001430 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xca>
		}else{
			WriteData(0x10);
 8001428:	2110      	movs	r1, #16
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f912 	bl	8001654 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 8001430:	7d7b      	ldrb	r3, [r7, #21]
 8001432:	3301      	adds	r3, #1
 8001434:	757b      	strb	r3, [r7, #21]
 8001436:	e7e2      	b.n	80013fe <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x98>
		}
	}


}
 8001438:	bf00      	nop
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4608      	mov	r0, r1
 800144a:	4611      	mov	r1, r2
 800144c:	461a      	mov	r2, r3
 800144e:	4603      	mov	r3, r0
 8001450:	70fb      	strb	r3, [r7, #3]
 8001452:	460b      	mov	r3, r1
 8001454:	70bb      	strb	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 800145a:	78bb      	ldrb	r3, [r7, #2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d107      	bne.n	8001470 <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	3b80      	subs	r3, #128	; 0x80
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4619      	mov	r1, r3
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f865 	bl	8001538 <_ZN3LCD12WriteCommandEh>
 800146e:	e009      	b.n	8001484 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 8001470:	78bb      	ldrb	r3, [r7, #2]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d106      	bne.n	8001484 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	3b40      	subs	r3, #64	; 0x40
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f000 f85a 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 8001484:	787b      	ldrb	r3, [r7, #1]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 800148a:	210f      	movs	r1, #15
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f853 	bl	8001538 <_ZN3LCD12WriteCommandEh>
	}




}
 8001492:	e003      	b.n	800149c <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001494:	210f      	movs	r1, #15
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f84e 	bl	8001538 <_ZN3LCD12WriteCommandEh>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	111b      	asrs	r3, r3, #4
 80014b4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	2102      	movs	r1, #2
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f003 fa4d 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	2104      	movs	r1, #4
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f003 fa43 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	461a      	mov	r2, r3
 80014e8:	2108      	movs	r1, #8
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 80014ec:	f003 fa3a 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f003 fa2f 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001506:	2001      	movs	r0, #1
 8001508:	f002 ff6e 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2101      	movs	r1, #1
 8001510:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001514:	f003 fa26 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f002 ff65 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	2101      	movs	r1, #1
 8001522:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001526:	f003 fa1d 	bl	8004964 <HAL_GPIO_WritePin>
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	48001c00 	.word	0x48001c00

08001538 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4840      	ldr	r0, [pc, #256]	; (800164c <_ZN3LCD12WriteCommandEh+0x114>)
 800154c:	f003 fa0a 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	483d      	ldr	r0, [pc, #244]	; (800164c <_ZN3LCD12WriteCommandEh+0x114>)
 8001558:	f003 fa04 	bl	8004964 <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	111b      	asrs	r3, r3, #4
 8001560:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	461a      	mov	r2, r3
 800156c:	2102      	movs	r1, #2
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f003 f9f7 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	2104      	movs	r1, #4
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f003 f9ed 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	2108      	movs	r1, #8
 8001596:	482e      	ldr	r0, [pc, #184]	; (8001650 <_ZN3LCD12WriteCommandEh+0x118>)
 8001598:	f003 f9e4 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f003 f9d9 	bl	8004964 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2101      	movs	r1, #1
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f003 f9d3 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015be:	2001      	movs	r0, #1
 80015c0:	f002 ff12 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2101      	movs	r1, #1
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f003 f9ca 	bl	8004964 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 80015d0:	78fb      	ldrb	r3, [r7, #3]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	2102      	movs	r1, #2
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f003 f9c0 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	2104      	movs	r1, #4
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f003 f9b6 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	2108      	movs	r1, #8
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <_ZN3LCD12WriteCommandEh+0x118>)
 8001606:	f003 f9ad 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 800160a:	78fb      	ldrb	r3, [r7, #3]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f003 f9a2 	bl	8004964 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2101      	movs	r1, #1
 8001624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001628:	f003 f99c 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f002 fedb 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	2101      	movs	r1, #1
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f003 f993 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f002 fed2 	bl	80043e8 <HAL_Delay>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	48000800 	.word	0x48000800
 8001650:	48001c00 	.word	0x48001c00

08001654 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	460b      	mov	r3, r1
 800165e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001660:	2201      	movs	r2, #1
 8001662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001666:	4840      	ldr	r0, [pc, #256]	; (8001768 <_ZN3LCD9WriteDataEh+0x114>)
 8001668:	f003 f97c 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001672:	483d      	ldr	r0, [pc, #244]	; (8001768 <_ZN3LCD9WriteDataEh+0x114>)
 8001674:	f003 f976 	bl	8004964 <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	111b      	asrs	r3, r3, #4
 800167c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	2102      	movs	r1, #2
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f003 f969 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	b2db      	uxtb	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	2104      	movs	r1, #4
 800169e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a2:	f003 f95f 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	2108      	movs	r1, #8
 80016b2:	482e      	ldr	r0, [pc, #184]	; (800176c <_ZN3LCD9WriteDataEh+0x118>)
 80016b4:	f003 f956 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ca:	f003 f94b 	bl	8004964 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2101      	movs	r1, #1
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f003 f945 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016da:	2001      	movs	r0, #1
 80016dc:	f002 fe84 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2101      	movs	r1, #1
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f003 f93c 	bl	8004964 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	2102      	movs	r1, #2
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f003 f932 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001700:	78fb      	ldrb	r3, [r7, #3]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	2104      	movs	r1, #4
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f003 f928 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	b2db      	uxtb	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2108      	movs	r1, #8
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <_ZN3LCD9WriteDataEh+0x118>)
 8001722:	f003 f91f 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 8001726:	78fb      	ldrb	r3, [r7, #3]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f003 f914 	bl	8004964 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2101      	movs	r1, #1
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f003 f90e 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001748:	2001      	movs	r0, #1
 800174a:	f002 fe4d 	bl	80043e8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2101      	movs	r1, #1
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f003 f905 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f002 fe44 	bl	80043e8 <HAL_Delay>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	48000800 	.word	0x48000800
 800176c:	48001c00 	.word	0x48001c00

08001770 <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	this->model = model;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
	DWT_Init();
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f88d 	bl	80018a0 <_ZN8LoadCell8DWT_InitEv>
}
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 8001790:	b082      	sub	sp, #8
 8001792:	b490      	push	{r4, r7}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
 800179c:	f107 0110 	add.w	r1, r7, #16
 80017a0:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	1d1c      	adds	r4, r3, #4
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc90      	pop	{r4, r7}
 80017c0:	b002      	add	sp, #8
 80017c2:	4770      	bx	lr

080017c4 <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6858      	ldr	r0, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	891b      	ldrh	r3, [r3, #8]
 80017d8:	2200      	movs	r2, #0
 80017da:	4619      	mov	r1, r3
 80017dc:	f003 f8c2 	bl	8004964 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8a1b      	ldrh	r3, [r3, #16]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f003 f8a2 	bl	8004934 <HAL_GPIO_ReadPin>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d04a      	beq.n	8001896 <_ZN8LoadCell6UpdateEv+0xd2>
		for(int i = 0; i<25; i++){
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b18      	cmp	r3, #24
 8001808:	dc2b      	bgt.n	8001862 <_ZN8LoadCell6UpdateEv+0x9e>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6858      	ldr	r0, [r3, #4]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	891b      	ldrh	r3, [r3, #8]
 8001812:	2201      	movs	r2, #1
 8001814:	4619      	mov	r1, r3
 8001816:	f003 f8a5 	bl	8004964 <HAL_GPIO_WritePin>
			DWT_Delay_us(10);
 800181a:	210a      	movs	r1, #10
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f85d 	bl	80018dc <_ZN8LoadCell12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6858      	ldr	r0, [r3, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	891b      	ldrh	r3, [r3, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	4619      	mov	r1, r3
 800182e:	f003 f899 	bl	8004964 <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68da      	ldr	r2, [r3, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	8a1b      	ldrh	r3, [r3, #16]
 800183a:	4619      	mov	r1, r3
 800183c:	4610      	mov	r0, r2
 800183e:	f003 f879 	bl	8004934 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
			DWT_Delay_us(10);
 8001852:	210a      	movs	r1, #10
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f841 	bl	80018dc <_ZN8LoadCell12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	3301      	adds	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	e7d0      	b.n	8001804 <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7c9b      	ldrb	r3, [r3, #18]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <_ZN8LoadCell6UpdateEv+0xb2>
 8001870:	2b02      	cmp	r3, #2
 8001872:	d008      	beq.n	8001886 <_ZN8LoadCell6UpdateEv+0xc2>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 8001874:	e00f      	b.n	8001896 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell1(data);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f90e 	bl	8001aa0 <_ZN5Model12setLoadCell1El>
			break;
 8001884:	e007      	b.n	8001896 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell2(data);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f920 	bl	8001ad4 <_ZN5Model12setLoadCell2El>
			break;
 8001894:	bf00      	nop
		}
	}

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
	...

080018a0 <_ZN8LoadCell8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void LoadCell::DWT_Init(void) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80018a8:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <_ZN8LoadCell8DWT_InitEv+0x34>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <_ZN8LoadCell8DWT_InitEv+0x34>)
 80018ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b2:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_ZN8LoadCell8DWT_InitEv+0x38>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_ZN8LoadCell8DWT_InitEv+0x38>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <_ZN8LoadCell8DWT_InitEv+0x38>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6013      	str	r3, [r2, #0]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000edf0 	.word	0xe000edf0
 80018d8:	e0001000 	.word	0xe0001000

080018dc <_ZN8LoadCell12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void LoadCell::DWT_Delay_us(volatile uint32_t microseconds) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80018ec:	f005 fb54 	bl	8006f98 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <_ZN8LoadCell12DWT_Delay_usEm+0x4c>)
 80018f4:	fba3 2302 	umull	r2, r3, r3, r2
 80018f8:	0c9b      	lsrs	r3, r3, #18
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	603b      	str	r3, [r7, #0]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	bf34      	ite	cc
 8001910:	2301      	movcc	r3, #1
 8001912:	2300      	movcs	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d000      	beq.n	800191c <_ZN8LoadCell12DWT_Delay_usEm+0x40>
 800191a:	e7f2      	b.n	8001902 <_ZN8LoadCell12DWT_Delay_usEm+0x26>
		;
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	e0001000 	.word	0xe0001000
 8001928:	431bde83 	.word	0x431bde83

0800192c <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001946:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f240 32ca 	movw	r2, #970	; 0x3ca
 800194e:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <_ZN5ModelC1Ev+0xe4>)
 8001954:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a2d      	ldr	r2, [pc, #180]	; (8001a10 <_ZN5ModelC1Ev+0xe4>)
 800195a:	615a      	str	r2, [r3, #20]

	 weight = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	831a      	strh	r2, [r3, #24]

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 400; //Preis in Rr/100g
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001968:	61da      	str	r2, [r3, #28]
	 Parafinwachs_Preis = 350;	//Preis in Rr/100g
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001970:	621a      	str	r2, [r3, #32]


	 wachstyp = E_UNDEF;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 00;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	 month = 01;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	 day = 01;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	 dayOfWeek = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 hour = 0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	 minute = 0;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 seconds = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	//---------------Taster Status---------------
	 T1Short = false;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 T1Long = false;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	 T2Short = false;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 T2Long = false;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	 T3Short = false;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 T3Long = false;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	 T4Short = false;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 T4Long = false;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	 T5Short = false;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 T5Long = false;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

}
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40566666 	.word	0x40566666

08001a14 <_ZNK5Model6getDayEv>:

uint8_t Model::getDay() const {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	return day;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <_ZN5Model6setDayEh>:

void Model::setDay(uint8_t day) {
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	460b      	mov	r3, r1
 8001a38:	70fb      	strb	r3, [r7, #3]
	this->day = day;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	78fa      	ldrb	r2, [r7, #3]
 8001a3e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <_ZNK5Model7getHourEv>:

void Model::setDayOfWeek(uint8_t dayOfWeek) {
	this->dayOfWeek = dayOfWeek;
}

uint8_t Model::getHour() const {
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
	return hour;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_ZN5Model7setHourEh>:

void Model::setHour(uint8_t hour) {
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	70fb      	strb	r3, [r7, #3]
	this->hour = hour;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	78fa      	ldrb	r2, [r7, #3]
 8001a78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_ZNK5Model12getLoadCell1Ev>:

int32_t Model::getLoadCell1() const {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	return loadCell1;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	return loadCell2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <_ZNK5Model9getMinuteEv>:

uint8_t Model::getMinute() const {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	return minute;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN5Model9setMinuteEh>:

void Model::setMinute(uint8_t minute) {
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
	this->minute = minute;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_ZNK5Model8getMonthEv>:

uint8_t Model::getMonth() const {
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
	return month;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZN5Model8setMonthEh>:

void Model::setMonth(uint8_t month) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
	this->month = month;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_ZNK5Model10getSecondsEv>:

uint8_t Model::getSeconds() const {
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	return seconds;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_ZN5Model10setSecondsEh>:

void Model::setSeconds(uint8_t seconds) {
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
	this->seconds = seconds;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <_ZNK5Model9getWeightEv>:

int16_t Model::getWeight() const {
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
	return weight;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	831a      	strh	r2, [r3, #24]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNK5Model7getYearEv>:

uint8_t Model::getYear() const {
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
	return year;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_ZN5Model7setYearEh>:

void Model::setYear(uint8_t year) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	70fb      	strb	r3, [r7, #3]
	this->year = year;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	78fa      	ldrb	r2, [r7, #3]
 8001c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <_ZNK5Model8isT1LongEv>:

bool Model::isT1Long() const {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
	return T1Long;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	460b      	mov	r3, r1
 8001c34:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return T1Short;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	return T2Long;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return T2Short;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	return T3Long;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	78fa      	ldrb	r2, [r7, #3]
 8001d22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
	return T3Short;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	return T4Long;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	78fa      	ldrb	r2, [r7, #3]
 8001d96:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
	return T4Short;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	return T5Long;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	78fa      	ldrb	r2, [r7, #3]
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	return T5Short;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	d802      	bhi.n	8001e72 <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 8001e6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e70:	e001      	b.n	8001e76 <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	ee07 3a90 	vmov	s15, r3
}
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d802      	bhi.n	8001ea6 <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 8001ea0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ea4:	e001      	b.n	8001eaa <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	ee07 3a90 	vmov	s15, r3
}
 8001eae:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	609a      	str	r2, [r3, #8]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	ee07 3a90 	vmov	s15, r3
 8001f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 8001f36:	edd7 7a00 	vldr	s15, [r7]
 8001f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3e:	ee17 2a90 	vmov	r2, s15
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	61da      	str	r2, [r3, #28]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001f66:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_ZN5Model20setParafinwachsPreisEf>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
	Parafinwachs_Preis = parafinwachsPreis;
 8001f80:	edd7 7a00 	vldr	s15, [r7]
 8001f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f88:	ee17 2a90 	vmov	r2, s15
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	621a      	str	r2, [r3, #32]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZNK5Model11getWachstypEv>:

Model::EWACHS Model::getWachstyp() const {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	return wachstyp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	switch(this->wachstyp){
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d011      	beq.n	8001ff8 <_ZN5Model11setWachstypENS_6EWACHSE+0x42>
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d01c      	beq.n	8002012 <_ZN5Model11setWachstypENS_6EWACHSE+0x5c>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d000      	beq.n	8001fde <_ZN5Model11setWachstypENS_6EWACHSE+0x28>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 8001fdc:	e026      	b.n	800202c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2110      	movs	r1, #16
 8001fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe6:	f002 fcbd 	bl	8004964 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff2:	f002 fcb7 	bl	8004964 <HAL_GPIO_WritePin>
		break;
 8001ff6:	e019      	b.n	800202c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002000:	f002 fcb0 	bl	8004964 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	2140      	movs	r1, #64	; 0x40
 8002008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200c:	f002 fcaa 	bl	8004964 <HAL_GPIO_WritePin>
		break;
 8002010:	e00c      	b.n	800202c <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	2110      	movs	r1, #16
 8002016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201a:	f002 fca3 	bl	8004964 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002026:	f002 fc9d 	bl	8004964 <HAL_GPIO_WritePin>
		break;
 800202a:	bf00      	nop
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	60da      	str	r2, [r3, #12]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	bfb8      	it	lt
 800205e:	425b      	neglt	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "math.h"
using namespace std;

char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ffe9 	bl	8002050 <_ZSt3absl>
 800207e:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a4a      	ldr	r2, [pc, #296]	; (80021ac <_ZN5Tools14intToAsciiCharElh+0x140>)
 8002084:	fb82 1203 	smull	r1, r2, r2, r3
 8002088:	1312      	asrs	r2, r2, #12
 800208a:	17db      	asrs	r3, r3, #31
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3330      	adds	r3, #48	; 0x30
 8002092:	b2da      	uxtb	r2, r3
 8002094:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002096:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a46      	ldr	r2, [pc, #280]	; (80021b4 <_ZN5Tools14intToAsciiCharElh+0x148>)
 800209c:	fb82 1203 	smull	r1, r2, r2, r3
 80020a0:	1192      	asrs	r2, r2, #6
 80020a2:	17db      	asrs	r3, r3, #31
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4940      	ldr	r1, [pc, #256]	; (80021ac <_ZN5Tools14intToAsciiCharElh+0x140>)
 80020ac:	fb81 0103 	smull	r0, r1, r1, r3
 80020b0:	1309      	asrs	r1, r1, #12
 80020b2:	17db      	asrs	r3, r3, #31
 80020b4:	1a5b      	subs	r3, r3, r1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	4619      	mov	r1, r3
 80020ba:	0089      	lsls	r1, r1, #2
 80020bc:	440b      	add	r3, r1
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	3330      	adds	r3, #48	; 0x30
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 80020cc:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a39      	ldr	r2, [pc, #228]	; (80021b8 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 80020d2:	fb82 1203 	smull	r1, r2, r2, r3
 80020d6:	1152      	asrs	r2, r2, #5
 80020d8:	17db      	asrs	r3, r3, #31
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4934      	ldr	r1, [pc, #208]	; (80021b4 <_ZN5Tools14intToAsciiCharElh+0x148>)
 80020e2:	fb81 0103 	smull	r0, r1, r1, r3
 80020e6:	1189      	asrs	r1, r1, #6
 80020e8:	17db      	asrs	r3, r3, #31
 80020ea:	1a5b      	subs	r3, r3, r1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	0089      	lsls	r1, r1, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	3330      	adds	r3, #48	; 0x30
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002102:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <_ZN5Tools14intToAsciiCharElh+0x150>)
 8002108:	fb82 1203 	smull	r1, r2, r2, r3
 800210c:	1092      	asrs	r2, r2, #2
 800210e:	17db      	asrs	r3, r3, #31
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b2da      	uxtb	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4928      	ldr	r1, [pc, #160]	; (80021b8 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 8002118:	fb81 0103 	smull	r0, r1, r1, r3
 800211c:	1149      	asrs	r1, r1, #5
 800211e:	17db      	asrs	r3, r3, #31
 8002120:	1a5b      	subs	r3, r3, r1
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4619      	mov	r1, r3
 8002126:	0089      	lsls	r1, r1, #2
 8002128:	440b      	add	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4413      	add	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3330      	adds	r3, #48	; 0x30
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002138:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <_ZN5Tools14intToAsciiCharElh+0x150>)
 800213e:	fb83 1302 	smull	r1, r3, r3, r2
 8002142:	1099      	asrs	r1, r3, #2
 8002144:	17d3      	asrs	r3, r2, #31
 8002146:	1ac9      	subs	r1, r1, r3
 8002148:	460b      	mov	r3, r1
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	1ad1      	subs	r1, r2, r3
 8002152:	b2cb      	uxtb	r3, r1
 8002154:	3330      	adds	r3, #48	; 0x30
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800215a:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 800215c:	2300      	movs	r3, #0
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	2300      	movs	r3, #0
 8002162:	73bb      	strb	r3, [r7, #14]
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b05      	cmp	r3, #5
 8002168:	d81a      	bhi.n	80021a0 <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 800216a:	7bfb      	ldrb	r3, [r7, #15]
 800216c:	f1c3 0205 	rsb	r2, r3, #5
 8002170:	78fb      	ldrb	r3, [r7, #3]
 8002172:	429a      	cmp	r2, r3
 8002174:	d107      	bne.n	8002186 <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <_ZN5Tools14intToAsciiCharElh+0x154>)
 800217a:	212e      	movs	r1, #46	; 0x2e
 800217c:	54d1      	strb	r1, [r2, r3]
        		j--;
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3b01      	subs	r3, #1
 8002182:	73bb      	strb	r3, [r7, #14]
 8002184:	e005      	b.n	8002192 <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 8002186:	7bba      	ldrb	r2, [r7, #14]
 8002188:	7bfb      	ldrb	r3, [r7, #15]
 800218a:	4909      	ldr	r1, [pc, #36]	; (80021b0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800218c:	5c89      	ldrb	r1, [r1, r2]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <_ZN5Tools14intToAsciiCharElh+0x154>)
 8002190:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	3301      	adds	r3, #1
 800219c:	73bb      	strb	r3, [r7, #14]
 800219e:	e7e1      	b.n	8002164 <_ZN5Tools14intToAsciiCharElh+0xf8>



        }

	return result;
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	68db8bad 	.word	0x68db8bad
 80021b0:	200002d4 	.word	0x200002d4
 80021b4:	10624dd3 	.word	0x10624dd3
 80021b8:	51eb851f 	.word	0x51eb851f
 80021bc:	66666667 	.word	0x66666667
 80021c0:	200002dc 	.word	0x200002dc

080021c4 <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	int result = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <_ZN5Tools8Round5RpEl+0x60>)
 80021d4:	fb83 1302 	smull	r1, r3, r3, r2
 80021d8:	1099      	asrs	r1, r3, #2
 80021da:	17d3      	asrs	r3, r2, #31
 80021dc:	1ac9      	subs	r1, r1, r3
 80021de:	460b      	mov	r3, r1
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <_ZN5Tools8Round5RpEl+0x60>)
 80021ee:	fb82 1203 	smull	r1, r2, r2, r3
 80021f2:	1052      	asrs	r2, r2, #1
 80021f4:	17db      	asrs	r3, r3, #31
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	1d5a      	adds	r2, r3, #5
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e003      	b.n	8002214 <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	617b      	str	r3, [r7, #20]
    }
    return result;
 8002214:	697b      	ldr	r3, [r7, #20]
}
 8002216:	4618      	mov	r0, r3
 8002218:	371c      	adds	r7, #28
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	66666667 	.word	0x66666667

08002228 <_ZN10BWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd) {
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b087      	sub	sp, #28
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fa0c 	bl	8002654 <_ZN10BaseScreenC1Ev>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f103 0410 	add.w	r4, r3, #16
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4618      	mov	r0, r3
 8002248:	f009 ff0c 	bl	800c064 <_ZNSaIcEC1Ev>
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	461a      	mov	r2, r3
 8002252:	490b      	ldr	r1, [pc, #44]	; (8002280 <_ZN10BWSettingsC1EP5ModelP3LCD+0x58>)
 8002254:	4620      	mov	r0, r4
 8002256:	f009 ffa9 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4618      	mov	r0, r3
 8002260:	f009 ff01 	bl	800c066 <_ZNSaIcED1Ev>
	this->model = model;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	605a      	str	r2, [r3, #4]
	position = 0;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	735a      	strb	r2, [r3, #13]
	init = false;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	739a      	strb	r2, [r3, #14]
}
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	0800c4a8 	.word	0x0800c4a8

08002284 <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b093      	sub	sp, #76	; 0x4c
 8002288:	af02      	add	r7, sp, #8
 800228a:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	731a      	strb	r2, [r3, #12]

	int preis = model->getBienenwachsPreis();
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe36 	bl	8001f08 <_ZNK5Model19getBienenwachsPreisEv>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a4:	ee17 3a90 	vmov	r3, s15
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(!init){
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7b9b      	ldrb	r3, [r3, #14]
 80022ae:	f083 0301 	eor.w	r3, r3, #1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02e      	beq.n	8002316 <_ZN10BWSettings6UpdateEv+0x92>
		position = 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689c      	ldr	r4, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f103 0210 	add.w	r2, r3, #16
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f009 ff3a 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80022d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f97f 	bl	80025dc <_ZN10BWSettings16prizeToCharArrayEm>
 80022de:	4602      	mov	r2, r0
 80022e0:	f107 010c 	add.w	r1, r7, #12
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	230c      	movs	r3, #12
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	4620      	mov	r0, r4
 80022f2:	f7ff f838 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 80022f6:	f107 030c 	add.w	r3, r7, #12
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fef4 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6898      	ldr	r0, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7b59      	ldrb	r1, [r3, #13]
 8002308:	2301      	movs	r3, #1
 800230a:	2202      	movs	r2, #2
 800230c:	f7ff f898 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc95 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d025      	beq.n	8002372 <_ZN10BWSettings6UpdateEv+0xee>
		//Change position
		if(position >= 4){
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	7b5b      	ldrb	r3, [r3, #13]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d903      	bls.n	8002336 <_ZN10BWSettings6UpdateEv+0xb2>
			position = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	735a      	strb	r2, [r3, #13]
 8002334:	e00f      	b.n	8002356 <_ZN10BWSettings6UpdateEv+0xd2>
		}else{
			position++;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b5b      	ldrb	r3, [r3, #13]
 800233a:	3301      	adds	r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7b5b      	ldrb	r3, [r3, #13]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d105      	bne.n	8002356 <_ZN10BWSettings6UpdateEv+0xd2>
				position++;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b5b      	ldrb	r3, [r3, #13]
 800234e:	3301      	adds	r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	735a      	strb	r2, [r3, #13]
			}
		}

		lcd->SetCursorPosition(position, 2,true);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6898      	ldr	r0, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7b59      	ldrb	r1, [r3, #13]
 800235e:	2301      	movs	r3, #1
 8002360:	2202      	movs	r2, #2
 8002362:	f7ff f86d 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fc79 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc4a 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <_ZN10BWSettings6UpdateEv+0x10a>
		model->setT1Long(false);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc4e 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fc93 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80aa 	beq.w	80024f4 <_ZN10BWSettings6UpdateEv+0x270>

		if(position == 0){
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7b5b      	ldrb	r3, [r3, #13]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d110      	bne.n	80023ca <_ZN10BWSettings6UpdateEv+0x146>
			if(preis/1000 == 9){
 80023a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023aa:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80023ae:	3b28      	subs	r3, #40	; 0x28
 80023b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b4:	d205      	bcs.n	80023c2 <_ZN10BWSettings6UpdateEv+0x13e>
				preis -= 9000;
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b8:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 80023bc:	3b28      	subs	r3, #40	; 0x28
 80023be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c0:	e003      	b.n	80023ca <_ZN10BWSettings6UpdateEv+0x146>
			}else{
				preis += 1000;
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 1){
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7b5b      	ldrb	r3, [r3, #13]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d11c      	bne.n	800240c <_ZN10BWSettings6UpdateEv+0x188>
			if((preis/100 - (preis/1000)*10) == 9){
 80023d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023d4:	4a7e      	ldr	r2, [pc, #504]	; (80025d0 <_ZN10BWSettings6UpdateEv+0x34c>)
 80023d6:	fb82 1203 	smull	r1, r2, r2, r3
 80023da:	1152      	asrs	r2, r2, #5
 80023dc:	17db      	asrs	r3, r3, #31
 80023de:	1ad1      	subs	r1, r2, r3
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	4a7c      	ldr	r2, [pc, #496]	; (80025d4 <_ZN10BWSettings6UpdateEv+0x350>)
 80023e4:	fb82 0203 	smull	r0, r2, r2, r3
 80023e8:	1192      	asrs	r2, r2, #6
 80023ea:	17db      	asrs	r3, r3, #31
 80023ec:	1a9a      	subs	r2, r3, r2
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	440b      	add	r3, r1
 80023f8:	2b09      	cmp	r3, #9
 80023fa:	d104      	bne.n	8002406 <_ZN10BWSettings6UpdateEv+0x182>
				preis -= 900;
 80023fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023fe:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002404:	e002      	b.n	800240c <_ZN10BWSettings6UpdateEv+0x188>
			}else{
				preis += 100;
 8002406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002408:	3364      	adds	r3, #100	; 0x64
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 3){
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7b5b      	ldrb	r3, [r3, #13]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d11b      	bne.n	800244c <_ZN10BWSettings6UpdateEv+0x1c8>
			if((preis/10 - (preis/100)*10) == 9){
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	4a70      	ldr	r2, [pc, #448]	; (80025d8 <_ZN10BWSettings6UpdateEv+0x354>)
 8002418:	fb82 1203 	smull	r1, r2, r2, r3
 800241c:	1092      	asrs	r2, r2, #2
 800241e:	17db      	asrs	r3, r3, #31
 8002420:	1ad1      	subs	r1, r2, r3
 8002422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <_ZN10BWSettings6UpdateEv+0x34c>)
 8002426:	fb82 0203 	smull	r0, r2, r2, r3
 800242a:	1152      	asrs	r2, r2, #5
 800242c:	17db      	asrs	r3, r3, #31
 800242e:	1a9a      	subs	r2, r3, r2
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	440b      	add	r3, r1
 800243a:	2b09      	cmp	r3, #9
 800243c:	d103      	bne.n	8002446 <_ZN10BWSettings6UpdateEv+0x1c2>
				preis -= 90;
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002440:	3b5a      	subs	r3, #90	; 0x5a
 8002442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002444:	e002      	b.n	800244c <_ZN10BWSettings6UpdateEv+0x1c8>
			}else{
				preis += 10;
 8002446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002448:	330a      	adds	r3, #10
 800244a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}


		if(position == 4){
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7b5b      	ldrb	r3, [r3, #13]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d114      	bne.n	800247e <_ZN10BWSettings6UpdateEv+0x1fa>
			if((preis - (preis/10)*10 ) == 0){
 8002454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002456:	4b60      	ldr	r3, [pc, #384]	; (80025d8 <_ZN10BWSettings6UpdateEv+0x354>)
 8002458:	fb83 2301 	smull	r2, r3, r3, r1
 800245c:	109a      	asrs	r2, r3, #2
 800245e:	17cb      	asrs	r3, r1, #31
 8002460:	1ad2      	subs	r2, r2, r3
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	1aca      	subs	r2, r1, r3
 800246c:	2a00      	cmp	r2, #0
 800246e:	d103      	bne.n	8002478 <_ZN10BWSettings6UpdateEv+0x1f4>
				preis += 5;
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	3305      	adds	r3, #5
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002476:	e002      	b.n	800247e <_ZN10BWSettings6UpdateEv+0x1fa>
			}else{
				preis -= 5;
 8002478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800247a:	3b05      	subs	r3, #5
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
		model->setBienenwachsPreis(preis);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002484:	ee07 2a90 	vmov	s15, r2
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	eeb0 0a67 	vmov.f32	s0, s15
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fd4a 	bl	8001f2a <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689c      	ldr	r4, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f103 0210 	add.w	r2, r3, #16
 80024a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f009 fe4e 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	4619      	mov	r1, r3
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f893 	bl	80025dc <_ZN10BWSettings16prizeToCharArrayEm>
 80024b6:	4602      	mov	r2, r0
 80024b8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	230c      	movs	r3, #12
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	2200      	movs	r2, #0
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7fe ff4c 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4618      	mov	r0, r3
 80024d4:	f009 fe08 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7b59      	ldrb	r1, [r3, #13]
 80024e0:	2301      	movs	r3, #1
 80024e2:	2202      	movs	r2, #2
 80024e4:	f7fe ffac 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fbf2 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fbc3 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <_ZN10BWSettings6UpdateEv+0x28c>
		model->setT2Long(false);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fbc7 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fc0c 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <_ZN10BWSettings6UpdateEv+0x2a8>
		//-

		model->setT3Short(false);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fc10 	bl	8001d4c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fbe1 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <_ZN10BWSettings6UpdateEv+0x2c4>
		model->setT3Long(false);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fbe5 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fc0d 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <_ZN10BWSettings6UpdateEv+0x2e0>
		model->setT4Long(false);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2100      	movs	r1, #0
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fc11 	bl	8001d86 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fc1c 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <_ZN10BWSettings6UpdateEv+0x2fc>
		model->setT4Short(false);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc20 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fc2b 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <_ZN10BWSettings6UpdateEv+0x324>
		//Neuer Wert speichern
		init = false;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2203      	movs	r2, #3
 800259a:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fc29 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fc34 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <_ZN10BWSettings6UpdateEv+0x340>
		model->setT5Short(false);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fc38 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b1b      	ldrb	r3, [r3, #12]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3744      	adds	r7, #68	; 0x44
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	51eb851f 	.word	0x51eb851f
 80025d4:	10624dd3 	.word	0x10624dd3
 80025d8:	66666667 	.word	0x66666667

080025dc <_ZN10BWSettings16prizeToCharArrayEm>:


char* BWSettings::prizeToCharArray(uint32_t prize){
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd3e 	bl	800206c <_ZN5Tools14intToAsciiCharElh>
 80025f0:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d80b      	bhi.n	8002614 <_ZN10BWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	3301      	adds	r3, #1
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	441a      	add	r2, r3
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	7811      	ldrb	r1, [r2, #0]
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800260a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	3301      	adds	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e7f0      	b.n	80025f6 <_ZN10BWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002616:	2220      	movs	r2, #32
 8002618:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800261c:	2246      	movs	r2, #70	; 0x46
 800261e:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002622:	2272      	movs	r2, #114	; 0x72
 8002624:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002628:	222f      	movs	r2, #47	; 0x2f
 800262a:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800262e:	2231      	movs	r2, #49	; 0x31
 8002630:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002634:	2230      	movs	r2, #48	; 0x30
 8002636:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800263a:	2230      	movs	r2, #48	; 0x30
 800263c:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002640:	2267      	movs	r2, #103	; 0x67
 8002642:	731a      	strb	r2, [r3, #12]
	return result;
 8002644:	4b02      	ldr	r3, [pc, #8]	; (8002650 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200002e4 	.word	0x200002e4

08002654 <_ZN10BaseScreenC1Ev>:
 *      Author: marcel
 */
#include "BaseScreen.h"
#include "main.h"

BaseScreen::BaseScreen(){
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 800265c:	2200      	movs	r2, #0
 800265e:	2110      	movs	r1, #16
 8002660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002664:	f002 f97e 	bl	8004964 <HAL_GPIO_WritePin>
}
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <_ZN10MainScreenC1EP5ModelP3LCD>:
#include "MainScreen.h"

using namespace std;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 8002672:	b580      	push	{r7, lr}
 8002674:	b084      	sub	sp, #16
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ffe7 	bl	8002654 <_ZN10BaseScreenC1Ev>
	this->model = model;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]
	this->screen = Model::E_MAIN_SCRREN;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2203      	movs	r2, #3
 8002696:	731a      	strb	r2, [r3, #12]
}
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <_ZN10MainScreen6UpdateEv>:
void MainScreen::Init(){
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());
}

Model::ESCREEN MainScreen::Update(){
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	ed2d 8b02 	vpush	{d8}
 80026aa:	b0ad      	sub	sp, #180	; 0xb4
 80026ac:	af04      	add	r7, sp, #16
 80026ae:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	731a      	strb	r2, [r3, #12]

	//------------------Screen Update------------------
	int prize = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fc6b 	bl	8001f9c <_ZNK5Model11getWachstypEv>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01f      	beq.n	8002716 <_ZN10MainScreen6UpdateEv+0x72>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis()/100);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fa5f 	bl	8001b9e <_ZNK5Model9getWeightEv>
 80026e0:	4603      	mov	r3, r0
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fc0a 	bl	8001f08 <_ZNK5Model19getBienenwachsPreisEv>
 80026f4:	eef0 7a40 	vmov.f32	s15, s0
 80026f8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80026fc:	eddf 6aa9 	vldr	s13, [pc, #676]	; 80029a4 <_ZN10MainScreen6UpdateEv+0x300>
 8002700:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002704:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002708:	ee17 0a90 	vmov	r0, s15
 800270c:	f7ff fd5a 	bl	80021c4 <_ZN5Tools8Round5RpEl>
 8002710:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8002714:	e02b      	b.n	800276e <_ZN10MainScreen6UpdateEv+0xca>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fc3e 	bl	8001f9c <_ZNK5Model11getWachstypEv>
 8002720:	4603      	mov	r3, r0
 8002722:	2b02      	cmp	r3, #2
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01e      	beq.n	800276e <_ZN10MainScreen6UpdateEv+0xca>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis()/100);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fa32 	bl	8001b9e <_ZNK5Model9getWeightEv>
 800273a:	4603      	mov	r3, r0
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fc02 	bl	8001f52 <_ZNK5Model20getParafinwachsPreisEv>
 800274e:	eef0 7a40 	vmov.f32	s15, s0
 8002752:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002756:	eddf 6a93 	vldr	s13, [pc, #588]	; 80029a4 <_ZN10MainScreen6UpdateEv+0x300>
 800275a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800275e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002762:	ee17 0a90 	vmov	r0, s15
 8002766:	f7ff fd2d 	bl	80021c4 <_ZN5Tools8Round5RpEl>
 800276a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	}


	char *asciiWeight = {Tools::intToAsciiChar(model->getWeight(),3)};
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fa13 	bl	8001b9e <_ZNK5Model9getWeightEv>
 8002778:	4603      	mov	r3, r0
 800277a:	2103      	movs	r1, #3
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc75 	bl	800206c <_ZN5Tools14intToAsciiCharElh>
 8002782:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa07 	bl	8001b9e <_ZNK5Model9getWeightEv>
 8002790:	4603      	mov	r3, r0
 8002792:	b29b      	uxth	r3, r3
 8002794:	0bdb      	lsrs	r3, r3, #15
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <_ZN10MainScreen6UpdateEv+0xfe>
		w[0] = '-';
 800279c:	232d      	movs	r3, #45	; 0x2d
 800279e:	763b      	strb	r3, [r7, #24]
 80027a0:	e001      	b.n	80027a6 <_ZN10MainScreen6UpdateEv+0x102>
	}else{
		w[0] = ' ';
 80027a2:	2320      	movs	r3, #32
 80027a4:	763b      	strb	r3, [r7, #24]
	}

	w[1] = asciiWeight[0];
 80027a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	767b      	strb	r3, [r7, #25]
	w[2] = asciiWeight[1];
 80027ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	76bb      	strb	r3, [r7, #26]
	w[3] = asciiWeight[2];
 80027b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ba:	789b      	ldrb	r3, [r3, #2]
 80027bc:	76fb      	strb	r3, [r7, #27]
	w[4] = asciiWeight[3];
 80027be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027c2:	78db      	ldrb	r3, [r3, #3]
 80027c4:	773b      	strb	r3, [r7, #28]
	w[5] = asciiWeight[4];
 80027c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027ca:	791b      	ldrb	r3, [r3, #4]
 80027cc:	777b      	strb	r3, [r7, #29]
	w[6] = asciiWeight[5];
 80027ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027d2:	795b      	ldrb	r3, [r3, #5]
 80027d4:	77bb      	strb	r3, [r7, #30]
	w[7] = ' ';
 80027d6:	2320      	movs	r3, #32
 80027d8:	77fb      	strb	r3, [r7, #31]
	w[8] = 'k';
 80027da:	236b      	movs	r3, #107	; 0x6b
 80027dc:	f887 3020 	strb.w	r3, [r7, #32]
	w[9] = 'g';
 80027e0:	2367      	movs	r3, #103	; 0x67
 80027e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	char* asciiPrize = {Tools::intToAsciiChar(prize, 2)};
 80027e6:	2102      	movs	r1, #2
 80027e8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80027ec:	f7ff fc3e 	bl	800206c <_ZN5Tools14intToAsciiCharElh>
 80027f0:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	p[0] = asciiPrize[0];
 80027f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	733b      	strb	r3, [r7, #12]
	p[1] = asciiPrize[1];
 80027fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002800:	785b      	ldrb	r3, [r3, #1]
 8002802:	737b      	strb	r3, [r7, #13]
	p[2] = asciiPrize[2];
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002808:	789b      	ldrb	r3, [r3, #2]
 800280a:	73bb      	strb	r3, [r7, #14]
	p[3] = asciiPrize[3];
 800280c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002810:	78db      	ldrb	r3, [r3, #3]
 8002812:	73fb      	strb	r3, [r7, #15]
	p[4] = asciiPrize[4];
 8002814:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002818:	791b      	ldrb	r3, [r3, #4]
 800281a:	743b      	strb	r3, [r7, #16]
	p[5] = asciiPrize[5];
 800281c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002820:	795b      	ldrb	r3, [r3, #5]
 8002822:	747b      	strb	r3, [r7, #17]
	p[6] = ' ';
 8002824:	2320      	movs	r3, #32
 8002826:	74bb      	strb	r3, [r7, #18]
	p[7] = 'F';
 8002828:	2346      	movs	r3, #70	; 0x46
 800282a:	74fb      	strb	r3, [r7, #19]
	p[8] = 'r';
 800282c:	2372      	movs	r3, #114	; 0x72
 800282e:	753b      	strb	r3, [r7, #20]



	lcd->Write(w,10,2,p,9,3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6898      	ldr	r0, [r3, #8]
 8002834:	f107 0118 	add.w	r1, r7, #24
 8002838:	2303      	movs	r3, #3
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	2309      	movs	r3, #9
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f107 030c 	add.w	r3, r7, #12
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2302      	movs	r3, #2
 8002848:	220a      	movs	r2, #10
 800284a:	f7fe fd1f 	bl	800128c <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff f9f9 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <_ZN10MainScreen6UpdateEv+0x1d2>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fba6 	bl	8001fb6 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2100      	movs	r1, #0
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f9f7 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff f9c8 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <_ZN10MainScreen6UpdateEv+0x1f4>
		screen = Model::E_BW_SETTINGS;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	731a      	strb	r2, [r3, #12]
		model->setT1Long(false);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f9c9 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fa0e 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00b      	beq.n	80028c0 <_ZN10MainScreen6UpdateEv+0x21c>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2102      	movs	r1, #2
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fb81 	bl	8001fb6 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2100      	movs	r1, #0
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fa0c 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff f9dd 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <_ZN10MainScreen6UpdateEv+0x23e>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	731a      	strb	r2, [r3, #12]
		model->setT2Long(false);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2100      	movs	r1, #0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff f9de 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff fa06 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <_ZN10MainScreen6UpdateEv+0x25a>

		model->setT3Long(false);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fa0a 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fa15 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8091 	beq.w	8002a32 <_ZN10MainScreen6UpdateEv+0x38e>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff fa18 	bl	8001d4c <_ZN5Model10setT3ShortEb>
		if(summeActive){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7b9b      	ldrb	r3, [r3, #14]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d043      	beq.n	80029ac <_ZN10MainScreen6UpdateEv+0x308>
			lcd->Write("            ", "            ");
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689c      	ldr	r4, [r3, #8]
 8002928:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800292c:	4618      	mov	r0, r3
 800292e:	f009 fb99 	bl	800c064 <_ZNSaIcEC1Ev>
 8002932:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	491b      	ldr	r1, [pc, #108]	; (80029a8 <_ZN10MainScreen6UpdateEv+0x304>)
 800293c:	4618      	mov	r0, r3
 800293e:	f009 fc35 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002946:	4618      	mov	r0, r3
 8002948:	f009 fb8c 	bl	800c064 <_ZNSaIcEC1Ev>
 800294c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002950:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002954:	4914      	ldr	r1, [pc, #80]	; (80029a8 <_ZN10MainScreen6UpdateEv+0x304>)
 8002956:	4618      	mov	r0, r3
 8002958:	f009 fc28 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800295c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002964:	4619      	mov	r1, r3
 8002966:	4620      	mov	r0, r4
 8002968:	f7fe fc34 	bl	80011d4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 800296c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002970:	4618      	mov	r0, r3
 8002972:	f009 fbb9 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002976:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800297a:	4618      	mov	r0, r3
 800297c:	f009 fb73 	bl	800c066 <_ZNSaIcED1Ev>
 8002980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002984:	4618      	mov	r0, r3
 8002986:	f009 fbaf 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800298a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800298e:	4618      	mov	r0, r3
 8002990:	f009 fb69 	bl	800c066 <_ZNSaIcED1Ev>
			summeCounter++;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7b5b      	ldrb	r3, [r3, #13]
 8002998:	3301      	adds	r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	735a      	strb	r2, [r3, #13]
 80029a0:	e047      	b.n	8002a32 <_ZN10MainScreen6UpdateEv+0x38e>
 80029a2:	bf00      	nop
 80029a4:	42c80000 	.word	0x42c80000
 80029a8:	0800c4b4 	.word	0x0800c4b4
		}else{
			summeActive = true;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	739a      	strb	r2, [r3, #14]
			summeCounter= 1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	735a      	strb	r2, [r3, #13]
			lcd->Write("            ", "            ");
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689c      	ldr	r4, [r3, #8]
 80029bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80029c0:	4618      	mov	r0, r3
 80029c2:	f009 fb4f 	bl	800c064 <_ZNSaIcEC1Ev>
 80029c6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80029ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029ce:	494d      	ldr	r1, [pc, #308]	; (8002b04 <_ZN10MainScreen6UpdateEv+0x460>)
 80029d0:	4618      	mov	r0, r3
 80029d2:	f009 fbeb 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80029d6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029da:	4618      	mov	r0, r3
 80029dc:	f009 fb42 	bl	800c064 <_ZNSaIcEC1Ev>
 80029e0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80029e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80029e8:	4946      	ldr	r1, [pc, #280]	; (8002b04 <_ZN10MainScreen6UpdateEv+0x460>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f009 fbde 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80029f0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80029f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029f8:	4619      	mov	r1, r3
 80029fa:	4620      	mov	r0, r4
 80029fc:	f7fe fbea 	bl	80011d4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8002a00:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a04:	4618      	mov	r0, r3
 8002a06:	f009 fb6f 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002a0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f009 fb29 	bl	800c066 <_ZNSaIcED1Ev>
 8002a14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f009 fb65 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002a1e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002a22:	4618      	mov	r0, r3
 8002a24:	f009 fb1f 	bl	800c066 <_ZNSaIcED1Ev>
			HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4836      	ldr	r0, [pc, #216]	; (8002b08 <_ZN10MainScreen6UpdateEv+0x464>)
 8002a2e:	f001 ff99 	bl	8004964 <HAL_GPIO_WritePin>
		}
	}

	//------------------Total------------------
	if(model->isT4Long()){
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff f998 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <_ZN10MainScreen6UpdateEv+0x3b0>
		model->setT4Long(false);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2100      	movs	r1, #0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f99c 	bl	8001d86 <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2204      	movs	r2, #4
 8002a52:	731a      	strb	r2, [r3, #12]
	}
	if(model->isT4Short()){
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff f9a4 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d010      	beq.n	8002a86 <_ZN10MainScreen6UpdateEv+0x3e2>
		model->setT4Short(false);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f9a8 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
		summeActive = false;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	739a      	strb	r2, [r3, #14]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4823      	ldr	r0, [pc, #140]	; (8002b08 <_ZN10MainScreen6UpdateEv+0x464>)
 8002a7c:	f001 ff72 	bl	8004964 <HAL_GPIO_WritePin>
		summeCounter = 0;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	735a      	strb	r2, [r3, #13]
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff f9a8 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <_ZN10MainScreen6UpdateEv+0x404>
		screen = Model::E_TIME_SETTINGS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2205      	movs	r2, #5
 8002a9a:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f9a9 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff f9b4 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01d      	beq.n	8002af4 <_ZN10MainScreen6UpdateEv+0x450>
		model->setLoadCellOffset1(model->getLoadCell1());
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685c      	ldr	r4, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fe ffe1 	bl	8001a88 <_ZNK5Model12getLoadCell1Ev>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7ff fa02 	bl	8001ed4 <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685c      	ldr	r4, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe ffef 	bl	8001abc <_ZNK5Model12getLoadCell2Ev>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff faa6 	bl	8002034 <_ZN5Model18setLoadCellOffset2El>
		model->setT5Short(false);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f9a0 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7b1b      	ldrb	r3, [r3, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	37a4      	adds	r7, #164	; 0xa4
 8002afc:	46bd      	mov	sp, r7
 8002afe:	ecbd 8b02 	vpop	{d8}
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	0800c4b4 	.word	0x0800c4b4
 8002b08:	48000400 	.word	0x48000400

08002b0c <_ZN10PWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd) : BaseScreen() {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fd9a 	bl	8002654 <_ZN10BaseScreenC1Ev>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f103 0410 	add.w	r4, r3, #16
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f009 fa9a 	bl	800c064 <_ZNSaIcEC1Ev>
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	461a      	mov	r2, r3
 8002b36:	490a      	ldr	r1, [pc, #40]	; (8002b60 <_ZN10PWSettingsC1EP5ModelP3LCD+0x54>)
 8002b38:	4620      	mov	r0, r4
 8002b3a:	f009 fb37 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4618      	mov	r0, r3
 8002b44:	f009 fa8f 	bl	800c066 <_ZNSaIcED1Ev>
	this->model = model;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	609a      	str	r2, [r3, #8]
}
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	0800c4c4 	.word	0x0800c4c4

08002b64 <_ZN10PWSettings6UpdateEv>:



Model::ESCREEN PWSettings::Update(){
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b093      	sub	sp, #76	; 0x4c
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	6078      	str	r0, [r7, #4]

	screen = Model::E_PW_SETTINGS;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	731a      	strb	r2, [r3, #12]

	int preis = model->getParafinwachsPreis();
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff f9eb 	bl	8001f52 <_ZNK5Model20getParafinwachsPreisEv>
 8002b7c:	eef0 7a40 	vmov.f32	s15, s0
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(!init){
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7b9b      	ldrb	r3, [r3, #14]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02e      	beq.n	8002bf6 <_ZN10PWSettings6UpdateEv+0x92>
		position = 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689c      	ldr	r4, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f103 0210 	add.w	r2, r3, #16
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f009 faca 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f97f 	bl	8002ebc <_ZN10PWSettings16prizeToCharArrayEm>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	f107 010c 	add.w	r1, r7, #12
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	230c      	movs	r3, #12
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7fe fbc8 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8002bd6:	f107 030c 	add.w	r3, r7, #12
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f009 fa84 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6898      	ldr	r0, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7b59      	ldrb	r1, [r3, #13]
 8002be8:	2301      	movs	r3, #1
 8002bea:	2202      	movs	r2, #2
 8002bec:	f7fe fc28 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f825 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d025      	beq.n	8002c52 <_ZN10PWSettings6UpdateEv+0xee>
		//Change position
		if(position >= 4){
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	2b03      	cmp	r3, #3
 8002c0c:	d903      	bls.n	8002c16 <_ZN10PWSettings6UpdateEv+0xb2>
			position = 0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	735a      	strb	r2, [r3, #13]
 8002c14:	e00f      	b.n	8002c36 <_ZN10PWSettings6UpdateEv+0xd2>
		}else{
			position++;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7b5b      	ldrb	r3, [r3, #13]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7b5b      	ldrb	r3, [r3, #13]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d105      	bne.n	8002c36 <_ZN10PWSettings6UpdateEv+0xd2>
				position++;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7b5b      	ldrb	r3, [r3, #13]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	735a      	strb	r2, [r3, #13]
			}
		}


		lcd->SetCursorPosition(position, 2,true);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6898      	ldr	r0, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b59      	ldrb	r1, [r3, #13]
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2202      	movs	r2, #2
 8002c42:	f7fe fbfd 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff f809 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe ffda 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <_ZN10PWSettings6UpdateEv+0x10a>
		model->setT1Long(false);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe ffde 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff f823 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80aa 	beq.w	8002dd4 <_ZN10PWSettings6UpdateEv+0x270>

		if(position == 0){
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7b5b      	ldrb	r3, [r3, #13]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d110      	bne.n	8002caa <_ZN10PWSettings6UpdateEv+0x146>
			if(preis/1000 == 9){
 8002c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8a:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002c8e:	3b28      	subs	r3, #40	; 0x28
 8002c90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c94:	d205      	bcs.n	8002ca2 <_ZN10PWSettings6UpdateEv+0x13e>
				preis -= 9000;
 8002c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c98:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002c9c:	3b28      	subs	r3, #40	; 0x28
 8002c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca0:	e003      	b.n	8002caa <_ZN10PWSettings6UpdateEv+0x146>
			}else{
				preis += 1000;
 8002ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 1){
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7b5b      	ldrb	r3, [r3, #13]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d11c      	bne.n	8002cec <_ZN10PWSettings6UpdateEv+0x188>
			if((preis/100 - (preis/1000)*10) == 9){
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	4a7e      	ldr	r2, [pc, #504]	; (8002eb0 <_ZN10PWSettings6UpdateEv+0x34c>)
 8002cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8002cba:	1152      	asrs	r2, r2, #5
 8002cbc:	17db      	asrs	r3, r3, #31
 8002cbe:	1ad1      	subs	r1, r2, r3
 8002cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc2:	4a7c      	ldr	r2, [pc, #496]	; (8002eb4 <_ZN10PWSettings6UpdateEv+0x350>)
 8002cc4:	fb82 0203 	smull	r0, r2, r2, r3
 8002cc8:	1192      	asrs	r2, r2, #6
 8002cca:	17db      	asrs	r3, r3, #31
 8002ccc:	1a9a      	subs	r2, r3, r2
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	440b      	add	r3, r1
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	d104      	bne.n	8002ce6 <_ZN10PWSettings6UpdateEv+0x182>
				preis -= 900;
 8002cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cde:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce4:	e002      	b.n	8002cec <_ZN10PWSettings6UpdateEv+0x188>
			}else{
				preis += 100;
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce8:	3364      	adds	r3, #100	; 0x64
 8002cea:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 3){
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7b5b      	ldrb	r3, [r3, #13]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d11b      	bne.n	8002d2c <_ZN10PWSettings6UpdateEv+0x1c8>
			if((preis/10 - (preis/100)*10) == 9){
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	4a70      	ldr	r2, [pc, #448]	; (8002eb8 <_ZN10PWSettings6UpdateEv+0x354>)
 8002cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cfc:	1092      	asrs	r2, r2, #2
 8002cfe:	17db      	asrs	r3, r3, #31
 8002d00:	1ad1      	subs	r1, r2, r3
 8002d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d04:	4a6a      	ldr	r2, [pc, #424]	; (8002eb0 <_ZN10PWSettings6UpdateEv+0x34c>)
 8002d06:	fb82 0203 	smull	r0, r2, r2, r3
 8002d0a:	1152      	asrs	r2, r2, #5
 8002d0c:	17db      	asrs	r3, r3, #31
 8002d0e:	1a9a      	subs	r2, r3, r2
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	d103      	bne.n	8002d26 <_ZN10PWSettings6UpdateEv+0x1c2>
				preis -= 90;
 8002d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d20:	3b5a      	subs	r3, #90	; 0x5a
 8002d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d24:	e002      	b.n	8002d2c <_ZN10PWSettings6UpdateEv+0x1c8>
			}else{
				preis += 10;
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	330a      	adds	r3, #10
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}


		if(position == 4){
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7b5b      	ldrb	r3, [r3, #13]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d114      	bne.n	8002d5e <_ZN10PWSettings6UpdateEv+0x1fa>
			if((preis - (preis/10)*10 ) == 0){
 8002d34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d36:	4b60      	ldr	r3, [pc, #384]	; (8002eb8 <_ZN10PWSettings6UpdateEv+0x354>)
 8002d38:	fb83 2301 	smull	r2, r3, r3, r1
 8002d3c:	109a      	asrs	r2, r3, #2
 8002d3e:	17cb      	asrs	r3, r1, #31
 8002d40:	1ad2      	subs	r2, r2, r3
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	1aca      	subs	r2, r1, r3
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d103      	bne.n	8002d58 <_ZN10PWSettings6UpdateEv+0x1f4>
				preis += 5;
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	3305      	adds	r3, #5
 8002d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d56:	e002      	b.n	8002d5e <_ZN10PWSettings6UpdateEv+0x1fa>
			}else{
				preis -= 5;
 8002d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5a:	3b05      	subs	r3, #5
 8002d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
		model->setParafinwachsPreis(preis);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d64:	ee07 2a90 	vmov	s15, r2
 8002d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f8ff 	bl	8001f74 <_ZN5Model20setParafinwachsPreisEf>
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689c      	ldr	r4, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f103 0210 	add.w	r2, r3, #16
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f009 f9de 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f893 	bl	8002ebc <_ZN10PWSettings16prizeToCharArrayEm>
 8002d96:	4602      	mov	r2, r0
 8002d98:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	230c      	movs	r3, #12
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	2200      	movs	r2, #0
 8002da8:	4620      	mov	r0, r4
 8002daa:	f7fe fadc 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4618      	mov	r0, r3
 8002db4:	f009 f998 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6898      	ldr	r0, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7b59      	ldrb	r1, [r3, #13]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f7fe fb3c 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe ff82 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe ff53 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <_ZN10PWSettings6UpdateEv+0x28c>
		model->setT2Long(false);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe ff57 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe ff9c 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <_ZN10PWSettings6UpdateEv+0x2a8>
		//-

		model->setT3Short(false);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe ffa0 	bl	8001d4c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe ff71 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <_ZN10PWSettings6UpdateEv+0x2c4>
		model->setT3Long(false);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe ff75 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe ff9d 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <_ZN10PWSettings6UpdateEv+0x2e0>
		model->setT4Long(false);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe ffa1 	bl	8001d86 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe ffac 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <_ZN10PWSettings6UpdateEv+0x2fc>
		model->setT4Short(false);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe ffb0 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ffbb 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00b      	beq.n	8002e88 <_ZN10PWSettings6UpdateEv+0x324>
		//Neuer Wert speichern
		init = false;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe ffb9 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe ffc4 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <_ZN10PWSettings6UpdateEv+0x340>
		model->setT5Short(false);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ffc8 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3744      	adds	r7, #68	; 0x44
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	51eb851f 	.word	0x51eb851f
 8002eb4:	10624dd3 	.word	0x10624dd3
 8002eb8:	66666667 	.word	0x66666667

08002ebc <_ZN10PWSettings16prizeToCharArrayEm>:


char* PWSettings::prizeToCharArray(uint32_t prize){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff f8ce 	bl	800206c <_ZN5Tools14intToAsciiCharElh>
 8002ed0:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d80b      	bhi.n	8002ef4 <_ZN10PWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	7811      	ldrb	r1, [r2, #0]
 8002ee8:	4a11      	ldr	r2, [pc, #68]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002eea:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e7f0      	b.n	8002ed6 <_ZN10PWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002efc:	2246      	movs	r2, #70	; 0x46
 8002efe:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f02:	2272      	movs	r2, #114	; 0x72
 8002f04:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f08:	222f      	movs	r2, #47	; 0x2f
 8002f0a:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f0e:	2231      	movs	r2, #49	; 0x31
 8002f10:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8002f12:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f14:	2230      	movs	r2, #48	; 0x30
 8002f16:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f1a:	2230      	movs	r2, #48	; 0x30
 8002f1c:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8002f20:	2267      	movs	r2, #103	; 0x67
 8002f22:	731a      	strb	r2, [r3, #12]
	return result;
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200002f0 	.word	0x200002f0

08002f34 <_ZN13ScreenControlC1EP5Model>:
#include <string>




ScreenControl::ScreenControl(Model *model) {
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
	this->model = model;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	605a      	str	r2, [r3, #4]
	lcd  = new  LCD();
 8002f44:	2001      	movs	r0, #1
 8002f46:	f009 f874 	bl	800c032 <_Znwj>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	461c      	mov	r4, r3
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f7fe f8d0 	bl	80010f4 <_ZN3LCDC1Ev>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609c      	str	r4, [r3, #8]
	mainScreen = new MainScreen(model, lcd);
 8002f58:	2010      	movs	r0, #16
 8002f5a:	f009 f86a 	bl	800c032 <_Znwj>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	461c      	mov	r4, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6839      	ldr	r1, [r7, #0]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff fb81 	bl	8002672 <_ZN10MainScreenC1EP5ModelP3LCD>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	60dc      	str	r4, [r3, #12]
	pwSettings = new PWSettings(model, lcd);
 8002f74:	2028      	movs	r0, #40	; 0x28
 8002f76:	f009 f85c 	bl	800c032 <_Znwj>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461c      	mov	r4, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	461a      	mov	r2, r3
 8002f84:	6839      	ldr	r1, [r7, #0]
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fdc0 	bl	8002b0c <_ZN10PWSettingsC1EP5ModelP3LCD>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	611c      	str	r4, [r3, #16]
	bwSettings = new BWSettings(model, lcd);
 8002f90:	2028      	movs	r0, #40	; 0x28
 8002f92:	f009 f84e 	bl	800c032 <_Znwj>
 8002f96:	4603      	mov	r3, r0
 8002f98:	461c      	mov	r4, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6839      	ldr	r1, [r7, #0]
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff f940 	bl	8002228 <_ZN10BWSettingsC1EP5ModelP3LCD>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615c      	str	r4, [r3, #20]
	timeSettings = new TimeSettings(model, lcd);
 8002fac:	2024      	movs	r0, #36	; 0x24
 8002fae:	f009 f840 	bl	800c032 <_Znwj>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461c      	mov	r4, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6839      	ldr	r1, [r7, #0]
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f000 fe86 	bl	8003cd0 <_ZN12TimeSettingsC1EP5ModelP3LCD>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	619c      	str	r4, [r3, #24]
	dateSettings = new DateSettings(model, lcd);
 8002fc8:	2028      	movs	r0, #40	; 0x28
 8002fca:	f009 f832 	bl	800c032 <_Znwj>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461c      	mov	r4, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	4620      	mov	r0, r4
 8002fdc:	f000 fa54 	bl	8003488 <_ZN12DateSettingsC1EP5ModelP3LCD>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	61dc      	str	r4, [r3, #28]
	timeScreen = new TimeScreen(model, lcd);
 8002fe4:	200c      	movs	r0, #12
 8002fe6:	f009 f824 	bl	800c032 <_Znwj>
 8002fea:	4603      	mov	r3, r0
 8002fec:	461c      	mov	r4, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	f000 f8de 	bl	80031b8 <_ZN10TimeScreenC1EP5ModelP3LCD>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	621c      	str	r4, [r3, #32]
}
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}
	...

0800300c <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b09d      	sub	sp, #116	; 0x74
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	lcd->InitLCD();
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fe f877 	bl	800110c <_ZN3LCD7InitLCDEv>

	string i = "10.000 kg";
 800301e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003022:	4618      	mov	r0, r3
 8003024:	f009 f81e 	bl	800c064 <_ZNSaIcEC1Ev>
 8003028:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	4929      	ldr	r1, [pc, #164]	; (80030d8 <_ZN13ScreenControl10InitScreenEv+0xcc>)
 8003032:	4618      	mov	r0, r3
 8003034:	f009 f8ba 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003038:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800303c:	4618      	mov	r0, r3
 800303e:	f009 f812 	bl	800c066 <_ZNSaIcED1Ev>
	string a = "02.25 Fr";
 8003042:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003046:	4618      	mov	r0, r3
 8003048:	f009 f80c 	bl	800c064 <_ZNSaIcEC1Ev>
 800304c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4921      	ldr	r1, [pc, #132]	; (80030dc <_ZN13ScreenControl10InitScreenEv+0xd0>)
 8003056:	4618      	mov	r0, r3
 8003058:	f009 f8a8 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800305c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003060:	4618      	mov	r0, r3
 8003062:	f009 f800 	bl	800c066 <_ZNSaIcED1Ev>
	lcd->Write(i,a);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689c      	ldr	r4, [r3, #8]
 800306a:	f107 0220 	add.w	r2, r7, #32
 800306e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003072:	4611      	mov	r1, r2
 8003074:	4618      	mov	r0, r3
 8003076:	f009 f867 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800307a:	f107 0208 	add.w	r2, r7, #8
 800307e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f009 f85f 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800308a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800308e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003092:	4619      	mov	r1, r3
 8003094:	4620      	mov	r0, r4
 8003096:	f7fe f89d 	bl	80011d4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 800309a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800309e:	4618      	mov	r0, r3
 80030a0:	f009 f822 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030a8:	4618      	mov	r0, r3
 80030aa:	f009 f81d 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	currentScreen = Model::E_MAIN_SCRREN;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2203      	movs	r2, #3
 80030b8:	705a      	strb	r2, [r3, #1]
	string a = "02.25 Fr";
 80030ba:	f107 0308 	add.w	r3, r7, #8
 80030be:	4618      	mov	r0, r3
 80030c0:	f009 f812 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string i = "10.000 kg";
 80030c4:	f107 0320 	add.w	r3, r7, #32
 80030c8:	4618      	mov	r0, r3
 80030ca:	f009 f80d 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 80030ce:	bf00      	nop
 80030d0:	3774      	adds	r7, #116	; 0x74
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	0800c4d4 	.word	0x0800c4d4
 80030dc:	0800c4e0 	.word	0x0800c4e0

080030e0 <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	785a      	ldrb	r2, [r3, #1]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b06      	cmp	r3, #6
 80030f6:	d84e      	bhi.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
 80030f8:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <_ZN13ScreenControl6UpdateEv+0x20>)
 80030fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fe:	bf00      	nop
 8003100:	08003131 	.word	0x08003131
 8003104:	08003145 	.word	0x08003145
 8003108:	08003195 	.word	0x08003195
 800310c:	0800311d 	.word	0x0800311d
 8003110:	08003181 	.word	0x08003181
 8003114:	08003159 	.word	0x08003159
 8003118:	0800316d 	.word	0x0800316d

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fabf 	bl	80026a4 <_ZN10MainScreen6UpdateEv>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	705a      	strb	r2, [r3, #1]
		break;
 800312e:	e032      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f8a5 	bl	8002284 <_ZN10BWSettings6UpdateEv>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	705a      	strb	r2, [r3, #1]
		break;
 8003142:	e028      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
	case Model::E_PW_SETTINGS:
		nextScreen = pwSettings->Update();
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fd0b 	bl	8002b64 <_ZN10PWSettings6UpdateEv>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	705a      	strb	r2, [r3, #1]
		break;
 8003156:	e01e      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
	case Model::E_TIME_SETTINGS:
		nextScreen = timeSettings->Update();
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fddf 	bl	8003d20 <_ZN12TimeSettings6UpdateEv>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	705a      	strb	r2, [r3, #1]
		break;
 800316a:	e014      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
	case Model::E_DATE_SETTINGS:
		nextScreen = dateSettings->Update();
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 f9b5 	bl	80034e0 <_ZN12DateSettings6UpdateEv>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	705a      	strb	r2, [r3, #1]
		break;
 800317e:	e00a      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
	case Model::E_LOG_BOOK:
		break;
	case Model::E_TIME:
		nextScreen =timeScreen->Update();
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f82b 	bl	80031e0 <_ZN10TimeScreen6UpdateEv>
 800318a:	4603      	mov	r3, r0
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	705a      	strb	r2, [r3, #1]
		break;
 8003192:	e000      	b.n	8003196 <_ZN13ScreenControl6UpdateEv+0xb6>
		break;
 8003194:	bf00      	nop
	}
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop

080031a0 <_ZN13ScreenControl16getCurrentScreenEv>:


Model::ESCREEN ScreenControl::getCurrentScreen(){
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	return this->currentScreen;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	781b      	ldrb	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_ZN10TimeScreenC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "TimeScreen.h"

TimeScreen::TimeScreen(Model *model, LCD *lcd) {
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	this->model= model;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	605a      	str	r2, [r3, #4]

}
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <_ZN10TimeScreen6UpdateEv>:

Model::ESCREEN TimeScreen::Update(){
 80031e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e2:	b08d      	sub	sp, #52	; 0x34
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	721a      	strb	r2, [r3, #8]

	lcd->Write("Zeit",0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685c      	ldr	r4, [r3, #4]
 80031f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f6:	4618      	mov	r0, r3
 80031f8:	f008 ff34 	bl	800c064 <_ZNSaIcEC1Ev>
 80031fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	4963      	ldr	r1, [pc, #396]	; (8003394 <_ZN10TimeScreen6UpdateEv+0x1b4>)
 8003206:	4618      	mov	r0, r3
 8003208:	f008 ffd0 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fc1c 	bl	8001a4e <_ZNK5Model7getHourEv>
 8003216:	4603      	mov	r3, r0
 8003218:	461d      	mov	r5, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fc66 	bl	8001af0 <_ZNK5Model9getMinuteEv>
 8003224:	4603      	mov	r3, r0
 8003226:	461e      	mov	r6, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe fc99 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 8003232:	4603      	mov	r3, r0
 8003234:	4632      	mov	r2, r6
 8003236:	4629      	mov	r1, r5
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8ad 	bl	8003398 <_ZN10TimeScreen15TimeToCharArrayEhhh>
 800323e:	4602      	mov	r2, r0
 8003240:	f107 010c 	add.w	r1, r7, #12
 8003244:	2304      	movs	r3, #4
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2308      	movs	r3, #8
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	2200      	movs	r2, #0
 8003250:	4620      	mov	r0, r4
 8003252:	f7fe f888 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	4618      	mov	r0, r3
 800325c:	f008 ff44 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003264:	4618      	mov	r0, r3
 8003266:	f008 fefe 	bl	800c066 <_ZNSaIcED1Ev>

	//------------------SW_BW------------------
	if(model->isT1Short()){
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fceb 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <_ZN10TimeScreen6UpdateEv+0xa6>
		model->setT1Short(false);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f7fe fcef 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fcc0 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <_ZN10TimeScreen6UpdateEv+0xc2>
		model->setT1Long(false);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fcc4 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fd09 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <_ZN10TimeScreen6UpdateEv+0xde>
		model->setT2Short(false);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe fd0d 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fcde 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <_ZN10TimeScreen6UpdateEv+0xfa>
		model->setT2Long(false);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fce2 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fd27 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <_ZN10TimeScreen6UpdateEv+0x116>
		//-

		model->setT3Short(false);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2100      	movs	r1, #0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fd2b 	bl	8001d4c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fcfc 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <_ZN10TimeScreen6UpdateEv+0x132>
		model->setT3Long(false);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fd00 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd28 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d005      	beq.n	800332e <_ZN10TimeScreen6UpdateEv+0x14e>
		model->setT4Long(false);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f7fe fd2c 	bl	8001d86 <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe fd37 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <_ZN10TimeScreen6UpdateEv+0x16a>
		model->setT4Short(false);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f7fe fd3b 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fd46 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d008      	beq.n	800336c <_ZN10TimeScreen6UpdateEv+0x18c>
		screen = Model::E_MAIN_SCRREN;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2203      	movs	r2, #3
 800335e:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fd47 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fd52 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <_ZN10TimeScreen6UpdateEv+0x1a8>
		model->setT5Short(false);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fd56 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7a1b      	ldrb	r3, [r3, #8]
}
 800338c:	4618      	mov	r0, r3
 800338e:	372c      	adds	r7, #44	; 0x2c
 8003390:	46bd      	mov	sp, r7
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003394:	0800c4ec 	.word	0x0800c4ec

08003398 <_ZN10TimeScreen15TimeToCharArrayEhhh>:

char* TimeScreen::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	70fb      	strb	r3, [r7, #3]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70bb      	strb	r3, [r7, #2]
 80033ae:	4613      	mov	r3, r2
 80033b0:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	4a32      	ldr	r2, [pc, #200]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80033b6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ba:	08db      	lsrs	r3, r3, #3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	3330      	adds	r3, #48	; 0x30
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b30      	ldr	r3, [pc, #192]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80033c4:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	08db      	lsrs	r3, r3, #3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	0152      	lsls	r2, r2, #5
 80033d6:	1ad2      	subs	r2, r2, r3
 80033d8:	0092      	lsls	r2, r2, #2
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	4413      	add	r3, r2
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	3330      	adds	r3, #48	; 0x30
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80033ec:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 80033ee:	4b25      	ldr	r3, [pc, #148]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80033f0:	223a      	movs	r2, #58	; 0x3a
 80033f2:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	4a22      	ldr	r2, [pc, #136]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	08db      	lsrs	r3, r3, #3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3330      	adds	r3, #48	; 0x30
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003406:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8003408:	78bb      	ldrb	r3, [r7, #2]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	08db      	lsrs	r3, r3, #3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	461a      	mov	r2, r3
 8003416:	0152      	lsls	r2, r2, #5
 8003418:	1ad2      	subs	r2, r2, r3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	78bb      	ldrb	r3, [r7, #2]
 8003424:	4413      	add	r3, r2
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3330      	adds	r3, #48	; 0x30
 800342a:	b2da      	uxtb	r2, r3
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 800342e:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003432:	223a      	movs	r2, #58	; 0x3a
 8003434:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8003436:	787b      	ldrb	r3, [r7, #1]
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	08db      	lsrs	r3, r3, #3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	3330      	adds	r3, #48	; 0x30
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003448:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 800344a:	787b      	ldrb	r3, [r7, #1]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	08db      	lsrs	r3, r3, #3
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	0152      	lsls	r2, r2, #5
 800345a:	1ad2      	subs	r2, r2, r3
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	b2da      	uxtb	r2, r3
 8003464:	787b      	ldrb	r3, [r7, #1]
 8003466:	4413      	add	r3, r2
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3330      	adds	r3, #48	; 0x30
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b05      	ldr	r3, [pc, #20]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003470:	71da      	strb	r2, [r3, #7]
	return result;
 8003472:	4b04      	ldr	r3, [pc, #16]	; (8003484 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	cccccccd 	.word	0xcccccccd
 8003484:	200002fc 	.word	0x200002fc

08003488 <_ZN12DateSettingsC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "DateSettings.h"

DateSettings::DateSettings(Model *model, LCD *lcd) {
 8003488:	b590      	push	{r4, r7, lr}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f103 040c 	add.w	r4, r3, #12
 800349a:	f107 0314 	add.w	r3, r7, #20
 800349e:	4618      	mov	r0, r3
 80034a0:	f008 fde0 	bl	800c064 <_ZNSaIcEC1Ev>
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	461a      	mov	r2, r3
 80034aa:	490c      	ldr	r1, [pc, #48]	; (80034dc <_ZN12DateSettingsC1EP5ModelP3LCD+0x54>)
 80034ac:	4620      	mov	r0, r4
 80034ae:	f008 fe7d 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80034b2:	f107 0314 	add.w	r3, r7, #20
 80034b6:	4618      	mov	r0, r3
 80034b8:	f008 fdd5 	bl	800c066 <_ZNSaIcED1Ev>
	this->model = model;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	605a      	str	r2, [r3, #4]
	this->init = false;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	bf00      	nop
 80034dc:	0800c4f4 	.word	0x0800c4f4

080034e0 <_ZN12DateSettings6UpdateEv>:


Model::ESCREEN DateSettings::Update(){
 80034e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e2:	b093      	sub	sp, #76	; 0x4c
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	6078      	str	r0, [r7, #4]

	screen = Model::E_DATE_SETTINGS;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2206      	movs	r2, #6
 80034ec:	721a      	strb	r2, [r3, #8]

	if(!init){
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034f4:	f083 0301 	eor.w	r3, r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d047      	beq.n	800358e <_ZN12DateSettings6UpdateEv+0xae>
		position = 0;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		lcd->Write(line1,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685c      	ldr	r4, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f103 020c 	add.w	r2, r3, #12
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f008 fe16 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe fb58 	bl	8001bd6 <_ZNK5Model7getYearEv>
 8003526:	4603      	mov	r3, r0
 8003528:	461d      	mov	r5, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fe fafb 	bl	8001b2a <_ZNK5Model8getMonthEv>
 8003534:	4603      	mov	r3, r0
 8003536:	461e      	mov	r6, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fa69 	bl	8001a14 <_ZNK5Model6getDayEv>
 8003542:	4603      	mov	r3, r0
 8003544:	4632      	mov	r2, r6
 8003546:	4629      	mov	r1, r5
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 fb43 	bl	8003bd4 <_ZN12DateSettings15DateToCharArrayEhhh>
 800354e:	4602      	mov	r2, r0
 8003550:	f107 010c 	add.w	r1, r7, #12
 8003554:	2302      	movs	r3, #2
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	230c      	movs	r3, #12
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	2200      	movs	r2, #0
 8003560:	4620      	mov	r0, r4
 8003562:	f7fd ff00 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4618      	mov	r0, r3
 800356c:	f008 fdbc 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+2, 2,true);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6858      	ldr	r0, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800357a:	3302      	adds	r3, #2
 800357c:	b2d9      	uxtb	r1, r3
 800357e:	2301      	movs	r3, #1
 8003580:	2202      	movs	r2, #2
 8003582:	f7fd ff5d 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fe fb59 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03c      	beq.n	8003618 <_ZN12DateSettings6UpdateEv+0x138>
		//Change position
		if(position >= 9){
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	d904      	bls.n	80035b2 <_ZN12DateSettings6UpdateEv+0xd2>
			position = 0;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035b0:	e021      	b.n	80035f6 <_ZN12DateSettings6UpdateEv+0x116>
		}else{
			position++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035b8:	3301      	adds	r3, #1
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(position == 2){
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d107      	bne.n	80035dc <_ZN12DateSettings6UpdateEv+0xfc>
				position++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
			if(position == 5){
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d107      	bne.n	80035f6 <_ZN12DateSettings6UpdateEv+0x116>
				position += 3;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035ec:	3303      	adds	r3, #3
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		lcd->SetCursorPosition(position+2, 2, true);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6858      	ldr	r0, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003600:	3302      	adds	r3, #2
 8003602:	b2d9      	uxtb	r1, r3
 8003604:	2301      	movs	r3, #1
 8003606:	2202      	movs	r2, #2
 8003608:	f7fd ff1a 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fb26 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe faf7 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZN12DateSettings6UpdateEv+0x154>
		model->setT1Long(false);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2100      	movs	r1, #0
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe fafb 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe fb40 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8250 	beq.w	8003ae6 <_ZN12DateSettings6UpdateEv+0x606>
		uint8_t year = model->getYear();
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fac3 	bl	8001bd6 <_ZNK5Model7getYearEv>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t month = model->getMonth();
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fa65 	bl	8001b2a <_ZNK5Model8getMonthEv>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		uint8_t day = model->getDay();
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe f9d2 	bl	8001a14 <_ZNK5Model6getDayEv>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		//Tag
		if(position == 0){
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800367c:	2b00      	cmp	r3, #0
 800367e:	d17d      	bne.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
			switch(month){
 8003680:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003684:	3b01      	subs	r3, #1
 8003686:	2b0b      	cmp	r3, #11
 8003688:	d874      	bhi.n	8003774 <_ZN12DateSettings6UpdateEv+0x294>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <_ZN12DateSettings6UpdateEv+0x1b0>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036c1 	.word	0x080036c1
 8003694:	08003739 	.word	0x08003739
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036fd 	.word	0x080036fd
 80036a0:	080036c1 	.word	0x080036c1
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036c1 	.word	0x080036c1
 80036b0:	080036fd 	.word	0x080036fd
 80036b4:	080036c1 	.word	0x080036c1
 80036b8:	080036fd 	.word	0x080036fd
 80036bc:	080036c1 	.word	0x080036c1
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 21 ){
 80036c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80036c4:	2b15      	cmp	r3, #21
 80036c6:	d913      	bls.n	80036f0 <_ZN12DateSettings6UpdateEv+0x210>
					day = (day - (day/10)*10);
 80036c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80036cc:	4ad3      	ldr	r2, [pc, #844]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	08db      	lsrs	r3, r3, #3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	461a      	mov	r2, r3
 80036d8:	0152      	lsls	r2, r2, #5
 80036da:	1ad2      	subs	r2, r2, r3
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80036e8:	4413      	add	r3, r2
 80036ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 80036ee:	e045      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 80036f0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80036f4:	330a      	adds	r3, #10
 80036f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 80036fa:	e03f      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 ){
 80036fc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003700:	2b14      	cmp	r3, #20
 8003702:	d913      	bls.n	800372c <_ZN12DateSettings6UpdateEv+0x24c>
					day = (day - (day/10)*10);
 8003704:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003708:	4ac4      	ldr	r2, [pc, #784]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	08db      	lsrs	r3, r3, #3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	0152      	lsls	r2, r2, #5
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	b2da      	uxtb	r2, r3
 8003720:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003724:	4413      	add	r3, r2
 8003726:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 800372a:	e027      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 800372c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003730:	330a      	adds	r3, #10
 8003732:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003736:	e021      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
			case 2:
				if(day > 18 ){
 8003738:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800373c:	2b12      	cmp	r3, #18
 800373e:	d913      	bls.n	8003768 <_ZN12DateSettings6UpdateEv+0x288>
					day = (day - (day/10)*10);
 8003740:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003744:	4ab5      	ldr	r2, [pc, #724]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	08db      	lsrs	r3, r3, #3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	0152      	lsls	r2, r2, #5
 8003752:	1ad2      	subs	r2, r2, r3
 8003754:	0092      	lsls	r2, r2, #2
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	b2da      	uxtb	r2, r3
 800375c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003760:	4413      	add	r3, r2
 8003762:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 8003766:	e009      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 8003768:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800376c:	330a      	adds	r3, #10
 800376e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003772:	e003      	b.n	800377c <_ZN12DateSettings6UpdateEv+0x29c>
			default:
				day = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 800377a:	bf00      	nop
			}
		}

		if(position == 1){
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003782:	2b01      	cmp	r3, #1
 8003784:	f040 80a2 	bne.w	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
			switch(month){
 8003788:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800378c:	3b01      	subs	r3, #1
 800378e:	2b0b      	cmp	r3, #11
 8003790:	f200 8098 	bhi.w	80038c4 <_ZN12DateSettings6UpdateEv+0x3e4>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <_ZN12DateSettings6UpdateEv+0x2bc>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037cd 	.word	0x080037cd
 80037a0:	0800388b 	.word	0x0800388b
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	0800381b 	.word	0x0800381b
 80037ac:	080037cd 	.word	0x080037cd
 80037b0:	0800381b 	.word	0x0800381b
 80037b4:	080037cd 	.word	0x080037cd
 80037b8:	080037cd 	.word	0x080037cd
 80037bc:	0800381b 	.word	0x0800381b
 80037c0:	080037cd 	.word	0x080037cd
 80037c4:	0800381b 	.word	0x0800381b
 80037c8:	080037cd 	.word	0x080037cd
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 30 ){
 80037cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037d0:	2b1e      	cmp	r3, #30
 80037d2:	d905      	bls.n	80037e0 <_ZN12DateSettings6UpdateEv+0x300>
					day -= 1;
 80037d4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037d8:	3b01      	subs	r3, #1
 80037da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 80037de:	e075      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
				}else if((day - (day/10)*10) < 9){
 80037e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80037e8:	498c      	ldr	r1, [pc, #560]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 80037ea:	fba1 1303 	umull	r1, r3, r1, r3
 80037ee:	08db      	lsrs	r3, r3, #3
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	4619      	mov	r1, r3
 80037f4:	f06f 0309 	mvn.w	r3, #9
 80037f8:	fb03 f301 	mul.w	r3, r3, r1
 80037fc:	4413      	add	r3, r2
 80037fe:	2b08      	cmp	r3, #8
 8003800:	dc05      	bgt.n	800380e <_ZN12DateSettings6UpdateEv+0x32e>
					day+=1;
 8003802:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003806:	3301      	adds	r3, #1
 8003808:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 800380c:	e05e      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 800380e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003812:	3b09      	subs	r3, #9
 8003814:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003818:	e058      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 && (day - (day/10)*10) > 7 ){
 800381a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800381e:	2b14      	cmp	r3, #20
 8003820:	d916      	bls.n	8003850 <_ZN12DateSettings6UpdateEv+0x370>
 8003822:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003826:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800382a:	497c      	ldr	r1, [pc, #496]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 800382c:	fba1 1303 	umull	r1, r3, r1, r3
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	4619      	mov	r1, r3
 8003836:	f06f 0309 	mvn.w	r3, #9
 800383a:	fb03 f301 	mul.w	r3, r3, r1
 800383e:	4413      	add	r3, r2
 8003840:	2b07      	cmp	r3, #7
 8003842:	dd05      	ble.n	8003850 <_ZN12DateSettings6UpdateEv+0x370>
					day -= 8;
 8003844:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003848:	3b08      	subs	r3, #8
 800384a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 800384e:	e03d      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
				}else if((day - (day/10)*10) < 9){
 8003850:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003854:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003858:	4970      	ldr	r1, [pc, #448]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 800385a:	fba1 1303 	umull	r1, r3, r1, r3
 800385e:	08db      	lsrs	r3, r3, #3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4619      	mov	r1, r3
 8003864:	f06f 0309 	mvn.w	r3, #9
 8003868:	fb03 f301 	mul.w	r3, r3, r1
 800386c:	4413      	add	r3, r2
 800386e:	2b08      	cmp	r3, #8
 8003870:	dc05      	bgt.n	800387e <_ZN12DateSettings6UpdateEv+0x39e>
					day+=1;
 8003872:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003876:	3301      	adds	r3, #1
 8003878:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 800387c:	e026      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 800387e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003882:	3b09      	subs	r3, #9
 8003884:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003888:	e020      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
			case 2:
				if((day - (day/10)*10) < 9){
 800388a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800388e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003892:	4962      	ldr	r1, [pc, #392]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 8003894:	fba1 1303 	umull	r1, r3, r1, r3
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	b2db      	uxtb	r3, r3
 800389c:	4619      	mov	r1, r3
 800389e:	f06f 0309 	mvn.w	r3, #9
 80038a2:	fb03 f301 	mul.w	r3, r3, r1
 80038a6:	4413      	add	r3, r2
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	dc05      	bgt.n	80038b8 <_ZN12DateSettings6UpdateEv+0x3d8>
					day+=1;
 80038ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80038b0:	3301      	adds	r3, #1
 80038b2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
						day -=9;
				}
				break;
 80038b6:	e009      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 80038b8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80038bc:	3b09      	subs	r3, #9
 80038be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 80038c2:	e003      	b.n	80038cc <_ZN12DateSettings6UpdateEv+0x3ec>
			default:
				day = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 80038ca:	bf00      	nop
			}
		}

		//Monat
		if(position == 3){
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d112      	bne.n	80038fc <_ZN12DateSettings6UpdateEv+0x41c>
			if(month < 3){
 80038d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d805      	bhi.n	80038ea <_ZN12DateSettings6UpdateEv+0x40a>
				month +=10;
 80038de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038e2:	330a      	adds	r3, #10
 80038e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80038e8:	e008      	b.n	80038fc <_ZN12DateSettings6UpdateEv+0x41c>
			}else if(month > 9){
 80038ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038ee:	2b09      	cmp	r3, #9
 80038f0:	d904      	bls.n	80038fc <_ZN12DateSettings6UpdateEv+0x41c>
				month -= 10;
 80038f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80038f6:	3b0a      	subs	r3, #10
 80038f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		if(position == 4){
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003902:	2b04      	cmp	r3, #4
 8003904:	d129      	bne.n	800395a <_ZN12DateSettings6UpdateEv+0x47a>
			if((month - (month/10)*10) < 9 && month < 12){
 8003906:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800390a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800390e:	4943      	ldr	r1, [pc, #268]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 8003910:	fba1 1303 	umull	r1, r3, r1, r3
 8003914:	08db      	lsrs	r3, r3, #3
 8003916:	b2db      	uxtb	r3, r3
 8003918:	4619      	mov	r1, r3
 800391a:	f06f 0309 	mvn.w	r3, #9
 800391e:	fb03 f301 	mul.w	r3, r3, r1
 8003922:	4413      	add	r3, r2
 8003924:	2b08      	cmp	r3, #8
 8003926:	dc09      	bgt.n	800393c <_ZN12DateSettings6UpdateEv+0x45c>
 8003928:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800392c:	2b0b      	cmp	r3, #11
 800392e:	d805      	bhi.n	800393c <_ZN12DateSettings6UpdateEv+0x45c>
				month +=1;
 8003930:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003934:	3301      	adds	r3, #1
 8003936:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800393a:	e00e      	b.n	800395a <_ZN12DateSettings6UpdateEv+0x47a>
			}else if(month > 11){
 800393c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003940:	2b0b      	cmp	r3, #11
 8003942:	d905      	bls.n	8003950 <_ZN12DateSettings6UpdateEv+0x470>
				month = month - 2;
 8003944:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003948:	3b02      	subs	r3, #2
 800394a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800394e:	e004      	b.n	800395a <_ZN12DateSettings6UpdateEv+0x47a>
			}else{
				month -= 9;
 8003950:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003954:	3b09      	subs	r3, #9
 8003956:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		switch(month){
 800395a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800395e:	3b02      	subs	r3, #2
 8003960:	2b09      	cmp	r3, #9
 8003962:	d82a      	bhi.n	80039ba <_ZN12DateSettings6UpdateEv+0x4da>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <_ZN12DateSettings6UpdateEv+0x48c>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	080039a5 	.word	0x080039a5
 8003970:	080039bb 	.word	0x080039bb
 8003974:	08003995 	.word	0x08003995
 8003978:	080039bb 	.word	0x080039bb
 800397c:	08003995 	.word	0x08003995
 8003980:	080039bb 	.word	0x080039bb
 8003984:	080039bb 	.word	0x080039bb
 8003988:	08003995 	.word	0x08003995
 800398c:	080039bb 	.word	0x080039bb
 8003990:	08003995 	.word	0x08003995
					case 4:
					case 6:
					case 9:
					case 11:
						if(day > 30){
 8003994:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003998:	2b1e      	cmp	r3, #30
 800399a:	d90b      	bls.n	80039b4 <_ZN12DateSettings6UpdateEv+0x4d4>
							day = 30;
 800399c:	231e      	movs	r3, #30
 800399e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						}
						break;
 80039a2:	e007      	b.n	80039b4 <_ZN12DateSettings6UpdateEv+0x4d4>
					case 2:
						if(day > 28){
 80039a4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80039a8:	2b1c      	cmp	r3, #28
 80039aa:	d905      	bls.n	80039b8 <_ZN12DateSettings6UpdateEv+0x4d8>
							day = 28;
 80039ac:	231c      	movs	r3, #28
 80039ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						}
						break;
 80039b2:	e001      	b.n	80039b8 <_ZN12DateSettings6UpdateEv+0x4d8>
						break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <_ZN12DateSettings6UpdateEv+0x4da>
						break;
 80039b8:	bf00      	nop
					}

		//Jahr
		if(position == 8){
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10e      	bne.n	80039e2 <_ZN12DateSettings6UpdateEv+0x502>
			if((year/10) < 9){
 80039c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039c8:	2b59      	cmp	r3, #89	; 0x59
 80039ca:	d805      	bhi.n	80039d8 <_ZN12DateSettings6UpdateEv+0x4f8>
				year +=10;
 80039cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039d0:	330a      	adds	r3, #10
 80039d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80039d6:	e004      	b.n	80039e2 <_ZN12DateSettings6UpdateEv+0x502>
			}else{
				year -= 90;
 80039d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039dc:	3b5a      	subs	r3, #90	; 0x5a
 80039de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if(position == 9){
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	d11e      	bne.n	8003a2a <_ZN12DateSettings6UpdateEv+0x54a>
			if((year - (year/10)*10) < 9){
 80039ec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80039f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039f4:	4909      	ldr	r1, [pc, #36]	; (8003a1c <_ZN12DateSettings6UpdateEv+0x53c>)
 80039f6:	fba1 1303 	umull	r1, r3, r1, r3
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	4619      	mov	r1, r3
 8003a00:	f06f 0309 	mvn.w	r3, #9
 8003a04:	fb03 f301 	mul.w	r3, r3, r1
 8003a08:	4413      	add	r3, r2
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	dc08      	bgt.n	8003a20 <_ZN12DateSettings6UpdateEv+0x540>
				year +=1;
 8003a0e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a12:	3301      	adds	r3, #1
 8003a14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a18:	e007      	b.n	8003a2a <_ZN12DateSettings6UpdateEv+0x54a>
 8003a1a:	bf00      	nop
 8003a1c:	cccccccd 	.word	0xcccccccd
			}else{
				year -= 9;
 8003a20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a24:	3b09      	subs	r3, #9
 8003a26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}



		model->setYear(year);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe f8db 	bl	8001bf0 <_ZN5Model7setYearEh>
		model->setMonth(month);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe f87d 	bl	8001b44 <_ZN5Model8setMonthEh>
		model->setDay(day);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd ffea 	bl	8001a2e <_ZN5Model6setDayEh>
		lcd->Write(line1,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685c      	ldr	r4, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f103 020c 	add.w	r2, r3, #12
 8003a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f008 fb6c 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe f8ae 	bl	8001bd6 <_ZNK5Model7getYearEv>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	461d      	mov	r5, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f851 	bl	8001b2a <_ZNK5Model8getMonthEv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461e      	mov	r6, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd ffbf 	bl	8001a14 <_ZNK5Model6getDayEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4632      	mov	r2, r6
 8003a9a:	4629      	mov	r1, r5
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f899 	bl	8003bd4 <_ZN12DateSettings15DateToCharArrayEhhh>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	230c      	movs	r3, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	f7fd fc56 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f008 fb12 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+2, 2,true);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6858      	ldr	r0, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ace:	3302      	adds	r3, #2
 8003ad0:	b2d9      	uxtb	r1, r3
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f7fd fcb3 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe f8f9 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe f8ca 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <_ZN12DateSettings6UpdateEv+0x622>
		model->setT2Long(false);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe f8ce 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe f913 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <_ZN12DateSettings6UpdateEv+0x63e>
		model->setT3Short(false);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fe f917 	bl	8001d4c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe f8e8 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d005      	beq.n	8003b3a <_ZN12DateSettings6UpdateEv+0x65a>
		model->setT3Long(false);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe f8ec 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe f931 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <_ZN12DateSettings6UpdateEv+0x676>
		model->setT4Short(false);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe f935 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe f906 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <_ZN12DateSettings6UpdateEv+0x692>
		model->setT4Long(false);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe f90a 	bl	8001d86 <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe f94f 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <_ZN12DateSettings6UpdateEv+0x6bc>
		screen = Model::E_TIME_SETTINGS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2205      	movs	r2, #5
 8003b86:	721a      	strb	r2, [r3, #8]
		init = false;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		model->setT5Short(false);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fe f94c 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe f91d 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00c      	beq.n	8003bc6 <_ZN12DateSettings6UpdateEv+0x6e6>
		//Speichern ToDo
		screen = Model::E_MAIN_SCRREN;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2203      	movs	r2, #3
 8003bb0:	721a      	strb	r2, [r3, #8]
		init = false;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		model->setT5Long(false);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe f91a 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}


	return screen;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7a1b      	ldrb	r3, [r3, #8]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3744      	adds	r7, #68	; 0x44
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <_ZN12DateSettings15DateToCharArrayEhhh>:


char* DateSettings::DateToCharArray(uint8_t year, uint8_t month, uint8_t day){
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	70fb      	strb	r3, [r7, #3]
 8003be6:	460b      	mov	r3, r1
 8003be8:	70bb      	strb	r3, [r7, #2]
 8003bea:	4613      	mov	r3, r2
 8003bec:	707b      	strb	r3, [r7, #1]
	static char result[10];
	result[0] = day/10 + 0x30;
 8003bee:	787b      	ldrb	r3, [r7, #1]
 8003bf0:	4a35      	ldr	r2, [pc, #212]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	3330      	adds	r3, #48	; 0x30
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c00:	701a      	strb	r2, [r3, #0]
	result[1] = day - (day/10)*10 + 0x30;
 8003c02:	787b      	ldrb	r3, [r7, #1]
 8003c04:	4a30      	ldr	r2, [pc, #192]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	461a      	mov	r2, r3
 8003c10:	0152      	lsls	r2, r2, #5
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	4413      	add	r3, r2
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3330      	adds	r3, #48	; 0x30
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c28:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c2c:	222e      	movs	r2, #46	; 0x2e
 8003c2e:	709a      	strb	r2, [r3, #2]
	result[3] = month/10 + 0x30;
 8003c30:	78bb      	ldrb	r3, [r7, #2]
 8003c32:	4a25      	ldr	r2, [pc, #148]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	3330      	adds	r3, #48	; 0x30
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c42:	70da      	strb	r2, [r3, #3]
	result[4] = month - (month/10)*10 + 0x30;
 8003c44:	78bb      	ldrb	r3, [r7, #2]
 8003c46:	4a20      	ldr	r2, [pc, #128]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	0152      	lsls	r2, r2, #5
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	0092      	lsls	r2, r2, #2
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	78bb      	ldrb	r3, [r7, #2]
 8003c60:	4413      	add	r3, r2
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	3330      	adds	r3, #48	; 0x30
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c6a:	711a      	strb	r2, [r3, #4]
	result[5] = '.';
 8003c6c:	4b17      	ldr	r3, [pc, #92]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c6e:	222e      	movs	r2, #46	; 0x2e
 8003c70:	715a      	strb	r2, [r3, #5]
	result[6] = '2';
 8003c72:	4b16      	ldr	r3, [pc, #88]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c74:	2232      	movs	r2, #50	; 0x32
 8003c76:	719a      	strb	r2, [r3, #6]
	result[7] = '0';
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c7a:	2230      	movs	r2, #48	; 0x30
 8003c7c:	71da      	strb	r2, [r3, #7]
	result[8] = year/10 + 0x30;
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	4a11      	ldr	r2, [pc, #68]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	3330      	adds	r3, #48	; 0x30
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003c90:	721a      	strb	r2, [r3, #8]
	result[9] = year - (year/10)*10 + 0x30;
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	0152      	lsls	r2, r2, #5
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	4413      	add	r3, r2
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	3330      	adds	r3, #48	; 0x30
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8003cb8:	725a      	strb	r2, [r3, #9]
	return result;
 8003cba:	4b04      	ldr	r3, [pc, #16]	; (8003ccc <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	20000304 	.word	0x20000304

08003cd0 <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) {
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f103 040c 	add.w	r4, r3, #12
 8003ce2:	f107 0314 	add.w	r3, r7, #20
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f008 f9bc 	bl	800c064 <_ZNSaIcEC1Ev>
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	490a      	ldr	r1, [pc, #40]	; (8003d1c <_ZN12TimeSettingsC1EP5ModelP3LCD+0x4c>)
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f008 fa59 	bl	800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f008 f9b1 	bl	800c066 <_ZNSaIcED1Ev>
	this->model = model;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	605a      	str	r2, [r3, #4]
}
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4618      	mov	r0, r3
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	0800c4fc 	.word	0x0800c4fc

08003d20 <_ZN12TimeSettings6UpdateEv>:




Model::ESCREEN TimeSettings::Update(){
 8003d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d22:	b093      	sub	sp, #76	; 0x4c
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME_SETTINGS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2205      	movs	r2, #5
 8003d2c:	721a      	strb	r2, [r3, #8]

	if(!init){
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	7a9b      	ldrb	r3, [r3, #10]
 8003d32:	f083 0301 	eor.w	r3, r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d044      	beq.n	8003dc6 <_ZN12TimeSettings6UpdateEv+0xa6>
		position = 0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685c      	ldr	r4, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f103 020c 	add.w	r2, r3, #12
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	4611      	mov	r1, r2
 8003d52:	4618      	mov	r0, r3
 8003d54:	f008 f9f8 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fd fe76 	bl	8001a4e <_ZNK5Model7getHourEv>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461d      	mov	r5, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fec0 	bl	8001af0 <_ZNK5Model9getMinuteEv>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461e      	mov	r6, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fef3 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4632      	mov	r2, r6
 8003d82:	4629      	mov	r1, r5
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fa19 	bl	80041bc <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	f107 010c 	add.w	r1, r7, #12
 8003d90:	2304      	movs	r3, #4
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	2308      	movs	r3, #8
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7fd fae2 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003da2:	f107 030c 	add.w	r3, r7, #12
 8003da6:	4618      	mov	r0, r3
 8003da8:	f008 f99e 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+4, 2,true);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6858      	ldr	r0, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	7a5b      	ldrb	r3, [r3, #9]
 8003db4:	3304      	adds	r3, #4
 8003db6:	b2d9      	uxtb	r1, r3
 8003db8:	2301      	movs	r3, #1
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f7fd fb40 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	729a      	strb	r2, [r3, #10]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd ff3d 	bl	8001c4a <_ZNK5Model9isT1ShortEv>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d02b      	beq.n	8003e2e <_ZN12TimeSettings6UpdateEv+0x10e>
		//Change position
		if(position >= 7){
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	7a5b      	ldrb	r3, [r3, #9]
 8003dda:	2b06      	cmp	r3, #6
 8003ddc:	d903      	bls.n	8003de6 <_ZN12TimeSettings6UpdateEv+0xc6>
			position = 0;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	725a      	strb	r2, [r3, #9]
 8003de4:	e013      	b.n	8003e0e <_ZN12TimeSettings6UpdateEv+0xee>
		}else{
			position++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a5b      	ldrb	r3, [r3, #9]
 8003dea:	3301      	adds	r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	725a      	strb	r2, [r3, #9]
			if(position == 2 || position == 5){
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7a5b      	ldrb	r3, [r3, #9]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d003      	beq.n	8003e02 <_ZN12TimeSettings6UpdateEv+0xe2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7a5b      	ldrb	r3, [r3, #9]
 8003dfe:	2b05      	cmp	r3, #5
 8003e00:	d105      	bne.n	8003e0e <_ZN12TimeSettings6UpdateEv+0xee>
				position++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7a5b      	ldrb	r3, [r3, #9]
 8003e06:	3301      	adds	r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	725a      	strb	r2, [r3, #9]
			}
		}
		lcd->SetCursorPosition(position+4, 2, true);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6858      	ldr	r0, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	7a5b      	ldrb	r3, [r3, #9]
 8003e16:	3304      	adds	r3, #4
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f7fd fb0f 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fd ff1b 	bl	8001c64 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd feec 	bl	8001c10 <_ZNK5Model8isT1LongEv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <_ZN12TimeSettings6UpdateEv+0x12a>
		model->setT1Long(false);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd fef0 	bl	8001c2a <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd ff35 	bl	8001cbe <_ZNK5Model9isT2ShortEv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8139 	beq.w	80040ce <_ZN12TimeSettings6UpdateEv+0x3ae>
		uint8_t hour = model->getHour();
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd fdf4 	bl	8001a4e <_ZNK5Model7getHourEv>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t minute = model->getMinute();
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fd fe3d 	bl	8001af0 <_ZNK5Model9getMinuteEv>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		uint8_t seconds = model->getSeconds();
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fd fe6f 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		if(position == 0){
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7a5b      	ldrb	r3, [r3, #9]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <_ZN12TimeSettings6UpdateEv+0x1a6>
			if(hour < 13){
 8003e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d805      	bhi.n	8003ea8 <_ZN12TimeSettings6UpdateEv+0x188>
				hour += 10;
 8003e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ea0:	330a      	adds	r3, #10
 8003ea2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003ea6:	e00e      	b.n	8003ec6 <_ZN12TimeSettings6UpdateEv+0x1a6>
			}else if(hour < 19){
 8003ea8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003eac:	2b12      	cmp	r3, #18
 8003eae:	d805      	bhi.n	8003ebc <_ZN12TimeSettings6UpdateEv+0x19c>
				hour -= 10;
 8003eb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003eb4:	3b0a      	subs	r3, #10
 8003eb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003eba:	e004      	b.n	8003ec6 <_ZN12TimeSettings6UpdateEv+0x1a6>
			}else{
				hour -= 20;
 8003ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ec0:	3b14      	subs	r3, #20
 8003ec2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if(position == 1){
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	7a5b      	ldrb	r3, [r3, #9]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d13c      	bne.n	8003f48 <_ZN12TimeSettings6UpdateEv+0x228>
			if(hour < 20){
 8003ece:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ed2:	2b13      	cmp	r3, #19
 8003ed4:	d81c      	bhi.n	8003f10 <_ZN12TimeSettings6UpdateEv+0x1f0>
				if(hour - (hour/10)*10 < 9){
 8003ed6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ede:	49b6      	ldr	r1, [pc, #728]	; (80041b8 <_ZN12TimeSettings6UpdateEv+0x498>)
 8003ee0:	fba1 1303 	umull	r1, r3, r1, r3
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	4619      	mov	r1, r3
 8003eea:	f06f 0309 	mvn.w	r3, #9
 8003eee:	fb03 f301 	mul.w	r3, r3, r1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	dc05      	bgt.n	8003f04 <_ZN12TimeSettings6UpdateEv+0x1e4>
					hour+=1;
 8003ef8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003efc:	3301      	adds	r3, #1
 8003efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f02:	e021      	b.n	8003f48 <_ZN12TimeSettings6UpdateEv+0x228>
				}else{
					hour-=9;
 8003f04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f08:	3b09      	subs	r3, #9
 8003f0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f0e:	e01b      	b.n	8003f48 <_ZN12TimeSettings6UpdateEv+0x228>
				}
			}else{
				if(hour - (hour/10)*10 < 3){
 8003f10:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f18:	49a7      	ldr	r1, [pc, #668]	; (80041b8 <_ZN12TimeSettings6UpdateEv+0x498>)
 8003f1a:	fba1 1303 	umull	r1, r3, r1, r3
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	4619      	mov	r1, r3
 8003f24:	f06f 0309 	mvn.w	r3, #9
 8003f28:	fb03 f301 	mul.w	r3, r3, r1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	dc05      	bgt.n	8003f3e <_ZN12TimeSettings6UpdateEv+0x21e>
					hour+=1;
 8003f32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f36:	3301      	adds	r3, #1
 8003f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f3c:	e004      	b.n	8003f48 <_ZN12TimeSettings6UpdateEv+0x228>
				}else{
					hour-=3;
 8003f3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f42:	3b03      	subs	r3, #3
 8003f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}



		if(position == 3){
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7a5b      	ldrb	r3, [r3, #9]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d10e      	bne.n	8003f6e <_ZN12TimeSettings6UpdateEv+0x24e>
			if(minute < 50){
 8003f50:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f54:	2b31      	cmp	r3, #49	; 0x31
 8003f56:	d805      	bhi.n	8003f64 <_ZN12TimeSettings6UpdateEv+0x244>
				minute += 10;
 8003f58:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f5c:	330a      	adds	r3, #10
 8003f5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003f62:	e004      	b.n	8003f6e <_ZN12TimeSettings6UpdateEv+0x24e>
			}else{
				minute -= 50;
 8003f64:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f68:	3b32      	subs	r3, #50	; 0x32
 8003f6a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		if(position == 4){
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	7a5b      	ldrb	r3, [r3, #9]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d11b      	bne.n	8003fae <_ZN12TimeSettings6UpdateEv+0x28e>
				if(minute - (minute/10)*10 < 9){
 8003f76:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003f7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f7e:	498e      	ldr	r1, [pc, #568]	; (80041b8 <_ZN12TimeSettings6UpdateEv+0x498>)
 8003f80:	fba1 1303 	umull	r1, r3, r1, r3
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f06f 0309 	mvn.w	r3, #9
 8003f8e:	fb03 f301 	mul.w	r3, r3, r1
 8003f92:	4413      	add	r3, r2
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	dc05      	bgt.n	8003fa4 <_ZN12TimeSettings6UpdateEv+0x284>
					minute+=1;
 8003f98:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003fa2:	e004      	b.n	8003fae <_ZN12TimeSettings6UpdateEv+0x28e>
				}else{
					minute-=9;
 8003fa4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fa8:	3b09      	subs	r3, #9
 8003faa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				}
		}


		if(position == 6){
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7a5b      	ldrb	r3, [r3, #9]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d10e      	bne.n	8003fd4 <_ZN12TimeSettings6UpdateEv+0x2b4>
			if(seconds < 50){
 8003fb6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fba:	2b31      	cmp	r3, #49	; 0x31
 8003fbc:	d805      	bhi.n	8003fca <_ZN12TimeSettings6UpdateEv+0x2aa>
				seconds += 10;
 8003fbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fc2:	330a      	adds	r3, #10
 8003fc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003fc8:	e004      	b.n	8003fd4 <_ZN12TimeSettings6UpdateEv+0x2b4>
			}else{
				seconds -= 50;
 8003fca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fce:	3b32      	subs	r3, #50	; 0x32
 8003fd0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			}
		}

		if(position == 7){
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7a5b      	ldrb	r3, [r3, #9]
 8003fd8:	2b07      	cmp	r3, #7
 8003fda:	d11b      	bne.n	8004014 <_ZN12TimeSettings6UpdateEv+0x2f4>
				if(seconds - (seconds/10)*10 < 9){
 8003fdc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003fe0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003fe4:	4974      	ldr	r1, [pc, #464]	; (80041b8 <_ZN12TimeSettings6UpdateEv+0x498>)
 8003fe6:	fba1 1303 	umull	r1, r3, r1, r3
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	f06f 0309 	mvn.w	r3, #9
 8003ff4:	fb03 f301 	mul.w	r3, r3, r1
 8003ff8:	4413      	add	r3, r2
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	dc05      	bgt.n	800400a <_ZN12TimeSettings6UpdateEv+0x2ea>
					seconds+=1;
 8003ffe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004002:	3301      	adds	r3, #1
 8004004:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004008:	e004      	b.n	8004014 <_ZN12TimeSettings6UpdateEv+0x2f4>
				}else{
					seconds-=9;
 800400a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800400e:	3b09      	subs	r3, #9
 8004010:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}
		}


		model->setHour(hour);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f7fd fd22 	bl	8001a68 <_ZN5Model7setHourEh>
		model->setMinute(minute);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fd6b 	bl	8001b0a <_ZN5Model9setMinuteEh>
		model->setSeconds(seconds);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fd9d 	bl	8001b7e <_ZN5Model10setSecondsEh>
		lcd->Write(line1,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685c      	ldr	r4, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f103 020c 	add.w	r2, r3, #12
 800404e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004052:	4611      	mov	r1, r2
 8004054:	4618      	mov	r0, r3
 8004056:	f008 f877 	bl	800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd fcf5 	bl	8001a4e <_ZNK5Model7getHourEv>
 8004064:	4603      	mov	r3, r0
 8004066:	461d      	mov	r5, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4618      	mov	r0, r3
 800406e:	f7fd fd3f 	bl	8001af0 <_ZNK5Model9getMinuteEv>
 8004072:	4603      	mov	r3, r0
 8004074:	461e      	mov	r6, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd fd72 	bl	8001b64 <_ZNK5Model10getSecondsEv>
 8004080:	4603      	mov	r3, r0
 8004082:	4632      	mov	r2, r6
 8004084:	4629      	mov	r1, r5
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f898 	bl	80041bc <_ZN12TimeSettings15TimeToCharArrayEhhh>
 800408c:	4602      	mov	r2, r0
 800408e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004092:	2304      	movs	r3, #4
 8004094:	9301      	str	r3, [sp, #4]
 8004096:	2308      	movs	r3, #8
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	4613      	mov	r3, r2
 800409c:	2200      	movs	r2, #0
 800409e:	4620      	mov	r0, r4
 80040a0:	f7fd f961 	bl	8001366 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 80040a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040a8:	4618      	mov	r0, r3
 80040aa:	f008 f81d 	bl	800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+4, 2, true);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6858      	ldr	r0, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7a5b      	ldrb	r3, [r3, #9]
 80040b6:	3304      	adds	r3, #4
 80040b8:	b2d9      	uxtb	r1, r3
 80040ba:	2301      	movs	r3, #1
 80040bc:	2202      	movs	r2, #2
 80040be:	f7fd f9bf 	bl	8001440 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fe05 	bl	8001cd8 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fd fdd6 	bl	8001c84 <_ZNK5Model8isT2LongEv>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <_ZN12TimeSettings6UpdateEv+0x3ca>
		model->setT2Long(false);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd fdda 	bl	8001c9e <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd fe1f 	bl	8001d32 <_ZNK5Model9isT3ShortEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <_ZN12TimeSettings6UpdateEv+0x3e6>
		model->setT3Short(false);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f7fd fe23 	bl	8001d4c <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd fdf4 	bl	8001cf8 <_ZNK5Model8isT3LongEv>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <_ZN12TimeSettings6UpdateEv+0x402>
		model->setT3Long(false);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fdf8 	bl	8001d12 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd fe3d 	bl	8001da6 <_ZNK5Model9isT4ShortEv>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <_ZN12TimeSettings6UpdateEv+0x41e>
		model->setT4Short(false);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2100      	movs	r1, #0
 8004138:	4618      	mov	r0, r3
 800413a:	f7fd fe41 	bl	8001dc0 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fe12 	bl	8001d6c <_ZNK5Model8isT4LongEv>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <_ZN12TimeSettings6UpdateEv+0x43a>
		model->setT4Long(false);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f7fd fe16 	bl	8001d86 <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fe5b 	bl	8001e1a <_ZNK5Model9isT5ShortEv>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00b      	beq.n	8004182 <_ZN12TimeSettings6UpdateEv+0x462>
		screen = Model::E_DATE_SETTINGS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2206      	movs	r2, #6
 800416e:	721a      	strb	r2, [r3, #8]
		init = false;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	729a      	strb	r2, [r3, #10]
		model->setT5Short(false);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f7fd fe59 	bl	8001e34 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd fe2a 	bl	8001de0 <_ZNK5Model8isT5LongEv>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <_ZN12TimeSettings6UpdateEv+0x48a>
		screen = Model::E_MAIN_SCRREN;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2203      	movs	r2, #3
 8004196:	721a      	strb	r2, [r3, #8]
		init = false;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	729a      	strb	r2, [r3, #10]
		//Speichern ToDo
		model->setT5Long(false);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fe28 	bl	8001dfa <_ZN5Model9setT5LongEb>
	}


	return screen;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7a1b      	ldrb	r3, [r3, #8]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3744      	adds	r7, #68	; 0x44
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041b6:	bf00      	nop
 80041b8:	cccccccd 	.word	0xcccccccd

080041bc <_ZN12TimeSettings15TimeToCharArrayEhhh>:




char* TimeSettings::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	70fb      	strb	r3, [r7, #3]
 80041ce:	460b      	mov	r3, r1
 80041d0:	70bb      	strb	r3, [r7, #2]
 80041d2:	4613      	mov	r3, r2
 80041d4:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	4a32      	ldr	r2, [pc, #200]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	08db      	lsrs	r3, r3, #3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	3330      	adds	r3, #48	; 0x30
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80041e8:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	4a2d      	ldr	r2, [pc, #180]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	08db      	lsrs	r3, r3, #3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	0152      	lsls	r2, r2, #5
 80041fa:	1ad2      	subs	r2, r2, r3
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	b2da      	uxtb	r2, r3
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	4413      	add	r3, r2
 8004208:	b2db      	uxtb	r3, r3
 800420a:	3330      	adds	r3, #48	; 0x30
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b26      	ldr	r3, [pc, #152]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004210:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8004212:	4b25      	ldr	r3, [pc, #148]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004214:	223a      	movs	r2, #58	; 0x3a
 8004216:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 8004218:	78bb      	ldrb	r3, [r7, #2]
 800421a:	4a22      	ldr	r2, [pc, #136]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	08db      	lsrs	r3, r3, #3
 8004222:	b2db      	uxtb	r3, r3
 8004224:	3330      	adds	r3, #48	; 0x30
 8004226:	b2da      	uxtb	r2, r3
 8004228:	4b1f      	ldr	r3, [pc, #124]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800422a:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 800422c:	78bb      	ldrb	r3, [r7, #2]
 800422e:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	08db      	lsrs	r3, r3, #3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	0152      	lsls	r2, r2, #5
 800423c:	1ad2      	subs	r2, r2, r3
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	78bb      	ldrb	r3, [r7, #2]
 8004248:	4413      	add	r3, r2
 800424a:	b2db      	uxtb	r3, r3
 800424c:	3330      	adds	r3, #48	; 0x30
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004252:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8004254:	4b14      	ldr	r3, [pc, #80]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004256:	223a      	movs	r2, #58	; 0x3a
 8004258:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 800425a:	787b      	ldrb	r3, [r7, #1]
 800425c:	4a11      	ldr	r2, [pc, #68]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	08db      	lsrs	r3, r3, #3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	3330      	adds	r3, #48	; 0x30
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800426c:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 800426e:	787b      	ldrb	r3, [r7, #1]
 8004270:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	08db      	lsrs	r3, r3, #3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	0152      	lsls	r2, r2, #5
 800427e:	1ad2      	subs	r2, r2, r3
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	b2da      	uxtb	r2, r3
 8004288:	787b      	ldrb	r3, [r7, #1]
 800428a:	4413      	add	r3, r2
 800428c:	b2db      	uxtb	r3, r3
 800428e:	3330      	adds	r3, #48	; 0x30
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004294:	71da      	strb	r2, [r3, #7]
	return result;
 8004296:	4b04      	ldr	r3, [pc, #16]	; (80042a8 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	cccccccd 	.word	0xcccccccd
 80042a8:	20000310 	.word	0x20000310

080042ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80042ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80042b0:	f7fc fc98 	bl	8000be4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80042b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80042b6:	e003      	b.n	80042c0 <LoopCopyDataInit>

080042b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80042ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80042bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80042be:	3104      	adds	r1, #4

080042c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80042c0:	480a      	ldr	r0, [pc, #40]	; (80042ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80042c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80042c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80042c8:	d3f6      	bcc.n	80042b8 <CopyDataInit>
	ldr	r2, =_sbss
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80042cc:	e002      	b.n	80042d4 <LoopFillZerobss>

080042ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80042ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80042d0:	f842 3b04 	str.w	r3, [r2], #4

080042d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80042d4:	4b08      	ldr	r3, [pc, #32]	; (80042f8 <LoopForever+0x16>)
	cmp	r2, r3
 80042d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80042d8:	d3f9      	bcc.n	80042ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042da:	f007 ff93 	bl	800c204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80042de:	f7fc facb 	bl	8000878 <main>

080042e2 <LoopForever>:

LoopForever:
    b LoopForever
 80042e2:	e7fe      	b.n	80042e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80042e4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80042e8:	0800c5dc 	.word	0x0800c5dc
	ldr	r0, =_sdata
 80042ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80042f0:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80042f4:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80042f8:	2000135c 	.word	0x2000135c

080042fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80042fc:	e7fe      	b.n	80042fc <ADC1_2_IRQHandler>

080042fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004308:	2003      	movs	r0, #3
 800430a:	f000 f95f 	bl	80045cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800430e:	2000      	movs	r0, #0
 8004310:	f000 f80e 	bl	8004330 <HAL_InitTick>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	71fb      	strb	r3, [r7, #7]
 800431e:	e001      	b.n	8004324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004320:	f7fc fba2 	bl	8000a68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004324:	79fb      	ldrb	r3, [r7, #7]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800433c:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_InitTick+0x6c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_InitTick+0x70>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b14      	ldr	r3, [pc, #80]	; (800439c <HAL_InitTick+0x6c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004352:	fbb3 f3f1 	udiv	r3, r3, r1
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f96b 	bl	8004636 <HAL_SYSTICK_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10f      	bne.n	8004386 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0f      	cmp	r3, #15
 800436a:	d809      	bhi.n	8004380 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800436c:	2200      	movs	r2, #0
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f04f 30ff 	mov.w	r0, #4294967295
 8004374:	f000 f935 	bl	80045e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004378:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <HAL_InitTick+0x74>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	e007      	b.n	8004390 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	e004      	b.n	8004390 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	73fb      	strb	r3, [r7, #15]
 800438a:	e001      	b.n	8004390 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000008 	.word	0x20000008
 80043a0:	20000000 	.word	0x20000000
 80043a4:	20000004 	.word	0x20000004

080043a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <HAL_IncTick+0x20>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <HAL_IncTick+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4413      	add	r3, r2
 80043b8:	4a04      	ldr	r2, [pc, #16]	; (80043cc <HAL_IncTick+0x24>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000008 	.word	0x20000008
 80043cc:	200003c0 	.word	0x200003c0

080043d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return uwTick;
 80043d4:	4b03      	ldr	r3, [pc, #12]	; (80043e4 <HAL_GetTick+0x14>)
 80043d6:	681b      	ldr	r3, [r3, #0]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	200003c0 	.word	0x200003c0

080043e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043f0:	f7ff ffee 	bl	80043d0 <HAL_GetTick>
 80043f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004400:	d005      	beq.n	800440e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <HAL_Delay+0x40>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800440e:	bf00      	nop
 8004410:	f7ff ffde 	bl	80043d0 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	429a      	cmp	r2, r3
 800441e:	d8f7      	bhi.n	8004410 <HAL_Delay+0x28>
  {
  }
}
 8004420:	bf00      	nop
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	20000008 	.word	0x20000008

0800442c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800443c:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004448:	4013      	ands	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800445e:	4a04      	ldr	r2, [pc, #16]	; (8004470 <__NVIC_SetPriorityGrouping+0x44>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	60d3      	str	r3, [r2, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	e000ed00 	.word	0xe000ed00

08004474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004478:	4b04      	ldr	r3, [pc, #16]	; (800448c <__NVIC_GetPriorityGrouping+0x18>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	0a1b      	lsrs	r3, r3, #8
 800447e:	f003 0307 	and.w	r3, r3, #7
}
 8004482:	4618      	mov	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db0b      	blt.n	80044ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4907      	ldr	r1, [pc, #28]	; (80044c8 <__NVIC_EnableIRQ+0x38>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2001      	movs	r0, #1
 80044b2:	fa00 f202 	lsl.w	r2, r0, r2
 80044b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	e000e100 	.word	0xe000e100

080044cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	6039      	str	r1, [r7, #0]
 80044d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	db0a      	blt.n	80044f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	490c      	ldr	r1, [pc, #48]	; (8004518 <__NVIC_SetPriority+0x4c>)
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	0112      	lsls	r2, r2, #4
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	440b      	add	r3, r1
 80044f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f4:	e00a      	b.n	800450c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4908      	ldr	r1, [pc, #32]	; (800451c <__NVIC_SetPriority+0x50>)
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	3b04      	subs	r3, #4
 8004504:	0112      	lsls	r2, r2, #4
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	440b      	add	r3, r1
 800450a:	761a      	strb	r2, [r3, #24]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	e000e100 	.word	0xe000e100
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f1c3 0307 	rsb	r3, r3, #7
 800453a:	2b04      	cmp	r3, #4
 800453c:	bf28      	it	cs
 800453e:	2304      	movcs	r3, #4
 8004540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	3304      	adds	r3, #4
 8004546:	2b06      	cmp	r3, #6
 8004548:	d902      	bls.n	8004550 <NVIC_EncodePriority+0x30>
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3b03      	subs	r3, #3
 800454e:	e000      	b.n	8004552 <NVIC_EncodePriority+0x32>
 8004550:	2300      	movs	r3, #0
 8004552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004554:	f04f 32ff 	mov.w	r2, #4294967295
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	401a      	ands	r2, r3
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004568:	f04f 31ff 	mov.w	r1, #4294967295
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	43d9      	mvns	r1, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	4313      	orrs	r3, r2
         );
}
 800457a:	4618      	mov	r0, r3
 800457c:	3724      	adds	r7, #36	; 0x24
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3b01      	subs	r3, #1
 8004594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004598:	d301      	bcc.n	800459e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800459a:	2301      	movs	r3, #1
 800459c:	e00f      	b.n	80045be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800459e:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <SysTick_Config+0x40>)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045a6:	210f      	movs	r1, #15
 80045a8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ac:	f7ff ff8e 	bl	80044cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <SysTick_Config+0x40>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b6:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <SysTick_Config+0x40>)
 80045b8:	2207      	movs	r2, #7
 80045ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	e000e010 	.word	0xe000e010

080045cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ff29 	bl	800442c <__NVIC_SetPriorityGrouping>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b086      	sub	sp, #24
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	60b9      	str	r1, [r7, #8]
 80045ec:	607a      	str	r2, [r7, #4]
 80045ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045f4:	f7ff ff3e 	bl	8004474 <__NVIC_GetPriorityGrouping>
 80045f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	6978      	ldr	r0, [r7, #20]
 8004600:	f7ff ff8e 	bl	8004520 <NVIC_EncodePriority>
 8004604:	4602      	mov	r2, r0
 8004606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff ff5d 	bl	80044cc <__NVIC_SetPriority>
}
 8004612:	bf00      	nop
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	4603      	mov	r3, r0
 8004622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff31 	bl	8004490 <__NVIC_EnableIRQ>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ffa2 	bl	8004588 <SysTick_Config>
 8004644:	4603      	mov	r3, r0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800465e:	e14e      	b.n	80048fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2101      	movs	r1, #1
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8140 	beq.w	80048f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d00b      	beq.n	8004698 <HAL_GPIO_Init+0x48>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d007      	beq.n	8004698 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800468c:	2b11      	cmp	r3, #17
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b12      	cmp	r3, #18
 8004696:	d130      	bne.n	80046fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2203      	movs	r2, #3
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ce:	2201      	movs	r2, #1
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43db      	mvns	r3, r3
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	4013      	ands	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0201 	and.w	r2, r3, #1
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4013      	ands	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0xea>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b12      	cmp	r3, #18
 8004738:	d123      	bne.n	8004782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	08da      	lsrs	r2, r3, #3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3208      	adds	r2, #8
 8004742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	220f      	movs	r2, #15
 8004752:	fa02 f303 	lsl.w	r3, r2, r3
 8004756:	43db      	mvns	r3, r3
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4013      	ands	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	08da      	lsrs	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3208      	adds	r2, #8
 800477c:	6939      	ldr	r1, [r7, #16]
 800477e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 0203 	and.w	r2, r3, #3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	fa02 f303 	lsl.w	r3, r2, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 809a 	beq.w	80048f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c4:	4b55      	ldr	r3, [pc, #340]	; (800491c <HAL_GPIO_Init+0x2cc>)
 80047c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c8:	4a54      	ldr	r2, [pc, #336]	; (800491c <HAL_GPIO_Init+0x2cc>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6613      	str	r3, [r2, #96]	; 0x60
 80047d0:	4b52      	ldr	r3, [pc, #328]	; (800491c <HAL_GPIO_Init+0x2cc>)
 80047d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	60bb      	str	r3, [r7, #8]
 80047da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047dc:	4a50      	ldr	r2, [pc, #320]	; (8004920 <HAL_GPIO_Init+0x2d0>)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	3302      	adds	r3, #2
 80047e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	220f      	movs	r2, #15
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004806:	d013      	beq.n	8004830 <HAL_GPIO_Init+0x1e0>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a46      	ldr	r2, [pc, #280]	; (8004924 <HAL_GPIO_Init+0x2d4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00d      	beq.n	800482c <HAL_GPIO_Init+0x1dc>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a45      	ldr	r2, [pc, #276]	; (8004928 <HAL_GPIO_Init+0x2d8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <HAL_GPIO_Init+0x1d8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a44      	ldr	r2, [pc, #272]	; (800492c <HAL_GPIO_Init+0x2dc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_GPIO_Init+0x1d4>
 8004820:	2303      	movs	r3, #3
 8004822:	e006      	b.n	8004832 <HAL_GPIO_Init+0x1e2>
 8004824:	2307      	movs	r3, #7
 8004826:	e004      	b.n	8004832 <HAL_GPIO_Init+0x1e2>
 8004828:	2302      	movs	r3, #2
 800482a:	e002      	b.n	8004832 <HAL_GPIO_Init+0x1e2>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <HAL_GPIO_Init+0x1e2>
 8004830:	2300      	movs	r3, #0
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	f002 0203 	and.w	r2, r2, #3
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4093      	lsls	r3, r2
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004842:	4937      	ldr	r1, [pc, #220]	; (8004920 <HAL_GPIO_Init+0x2d0>)
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	3302      	adds	r3, #2
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004850:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004874:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800487a:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	43db      	mvns	r3, r3
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4013      	ands	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800489e:	4a24      	ldr	r2, [pc, #144]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	43db      	mvns	r3, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048c8:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ce:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	43db      	mvns	r3, r3
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4013      	ands	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80048f2:	4a0f      	ldr	r2, [pc, #60]	; (8004930 <HAL_GPIO_Init+0x2e0>)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	3301      	adds	r3, #1
 80048fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	f47f aea9 	bne.w	8004660 <HAL_GPIO_Init+0x10>
  }
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	40010000 	.word	0x40010000
 8004924:	48000400 	.word	0x48000400
 8004928:	48000800 	.word	0x48000800
 800492c:	48000c00 	.word	0x48000c00
 8004930:	40010400 	.word	0x40010400

08004934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691a      	ldr	r2, [r3, #16]
 8004944:	887b      	ldrh	r3, [r7, #2]
 8004946:	4013      	ands	r3, r2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800494c:	2301      	movs	r3, #1
 800494e:	73fb      	strb	r3, [r7, #15]
 8004950:	e001      	b.n	8004956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004956:	7bfb      	ldrb	r3, [r7, #15]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	807b      	strh	r3, [r7, #2]
 8004970:	4613      	mov	r3, r2
 8004972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004974:	787b      	ldrb	r3, [r7, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004980:	e002      	b.n	8004988 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004982:	887a      	ldrh	r2, [r7, #2]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e081      	b.n	8004aaa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7fb ff18 	bl	80007f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	e006      	b.n	8004a1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689a      	ldr	r2, [r3, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d104      	bne.n	8004a2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6812      	ldr	r2, [r2, #0]
 8004a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	ea42 0103 	orr.w	r1, r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69d9      	ldr	r1, [r3, #28]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f042 0201 	orr.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d138      	bne.n	8004b3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e032      	b.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2224      	movs	r2, #36	; 0x24
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f042 0201 	orr.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b20      	cmp	r3, #32
 8004b5c:	d139      	bne.n	8004bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e033      	b.n	8004bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0201 	orr.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004be2:	b08b      	sub	sp, #44	; 0x2c
 8004be4:	af06      	add	r7, sp, #24
 8004be6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e104      	b.n	8004dfc <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f006 fe84 	bl	800b914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 f805 	bl	8007c28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	687e      	ldr	r6, [r7, #4]
 8004c26:	466d      	mov	r5, sp
 8004c28:	f106 0410 	add.w	r4, r6, #16
 8004c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	1d33      	adds	r3, r6, #4
 8004c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c38:	6838      	ldr	r0, [r7, #0]
 8004c3a:	f002 ffcd 	bl	8007bd8 <USB_CoreInit>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0d5      	b.n	8004dfc <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2100      	movs	r1, #0
 8004c56:	4618      	mov	r0, r3
 8004c58:	f003 f801 	bl	8007c5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	73fb      	strb	r3, [r7, #15]
 8004c60:	e04c      	b.n	8004cfc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	4613      	mov	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	440b      	add	r3, r1
 8004c72:	3301      	adds	r3, #1
 8004c74:	2201      	movs	r2, #1
 8004c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	440b      	add	r3, r1
 8004c88:	7bfa      	ldrb	r2, [r7, #15]
 8004c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c8c:	7bfa      	ldrb	r2, [r7, #15]
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	b298      	uxth	r0, r3
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3336      	adds	r3, #54	; 0x36
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	440b      	add	r3, r1
 8004cb4:	3303      	adds	r3, #3
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cba:	7bfa      	ldrb	r2, [r7, #15]
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3338      	adds	r3, #56	; 0x38
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	440b      	add	r3, r1
 8004cdc:	333c      	adds	r3, #60	; 0x3c
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4413      	add	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	440b      	add	r3, r1
 8004cf0:	3340      	adds	r3, #64	; 0x40
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	7bfa      	ldrb	r2, [r7, #15]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d3ad      	bcc.n	8004c62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	e044      	b.n	8004d96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	440b      	add	r3, r1
 8004d1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	6879      	ldr	r1, [r7, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	440b      	add	r3, r1
 8004d30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d4e:	7bfa      	ldrb	r2, [r7, #15]
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	440b      	add	r3, r1
 8004d88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	3301      	adds	r3, #1
 8004d94:	73fb      	strb	r3, [r7, #15]
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d3b5      	bcc.n	8004d0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	687e      	ldr	r6, [r7, #4]
 8004da8:	466d      	mov	r5, sp
 8004daa:	f106 0410 	add.w	r4, r6, #16
 8004dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	1d33      	adds	r3, r6, #4
 8004db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dba:	6838      	ldr	r0, [r7, #0]
 8004dbc:	f002 ff5c 	bl	8007c78 <USB_DevInit>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e014      	b.n	8004dfc <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d102      	bne.n	8004df0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f001 fa63 	bl	80062b6 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f004 ff15 	bl	8009c24 <USB_DevDisconnect>

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_PCD_Start+0x16>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e012      	b.n	8004e40 <HAL_PCD_Start+0x3c>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 fee7 	bl	8007bfa <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f004 fee0 	bl	8009bf6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f004 fefa 	bl	8009c4e <USB_ReadInterrupts>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e64:	d102      	bne.n	8004e6c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fb5b 	bl	8005522 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f004 feec 	bl	8009c4e <USB_ReadInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e80:	d112      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	b292      	uxth	r2, r2
 8004e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f006 fddb 	bl	800ba56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f91e 	bl	80050e4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f004 fece 	bl	8009c4e <USB_ReadInterrupts>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d10b      	bne.n	8004ed6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ed0:	b292      	uxth	r2, r2
 8004ed2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f004 feb7 	bl	8009c4e <USB_ReadInterrupts>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eea:	d10b      	bne.n	8004f04 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004efe:	b292      	uxth	r2, r2
 8004f00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f004 fea0 	bl	8009c4e <USB_ReadInterrupts>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f18:	d133      	bne.n	8004f82 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0204 	bic.w	r2, r2, #4
 8004f2c:	b292      	uxth	r2, r2
 8004f2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0208 	bic.w	r2, r2, #8
 8004f44:	b292      	uxth	r2, r2
 8004f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d107      	bne.n	8004f64 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f007 f82a 	bl	800bfb8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f006 fdaf 	bl	800bac8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f004 fe61 	bl	8009c4e <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d126      	bne.n	8004fe6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0208 	orr.w	r2, r2, #8
 8004faa:	b292      	uxth	r2, r2
 8004fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc2:	b292      	uxth	r2, r2
 8004fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0204 	orr.w	r2, r2, #4
 8004fda:	b292      	uxth	r2, r2
 8004fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f006 fd57 	bl	800ba94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fe2f 	bl	8009c4e <USB_ReadInterrupts>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d13f      	bne.n	800507a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800500c:	b292      	uxth	r2, r2
 800500e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d12b      	bne.n	8005074 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0204 	orr.w	r2, r2, #4
 800502e:	b292      	uxth	r2, r2
 8005030:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800503c:	b29a      	uxth	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0208 	orr.w	r2, r2, #8
 8005046:	b292      	uxth	r2, r2
 8005048:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800505c:	b29b      	uxth	r3, r3
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800506a:	2101      	movs	r1, #1
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f006 ffa3 	bl	800bfb8 <HAL_PCDEx_LPM_Callback>
 8005072:	e002      	b.n	800507a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f006 fd0d 	bl	800ba94 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f004 fde5 	bl	8009c4e <USB_ReadInterrupts>
 8005084:	4603      	mov	r3, r0
 8005086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508e:	d10e      	bne.n	80050ae <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005098:	b29a      	uxth	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050a2:	b292      	uxth	r2, r2
 80050a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f006 fcc6 	bl	800ba3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fdcb 	bl	8009c4e <USB_ReadInterrupts>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c2:	d10b      	bne.n	80050dc <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d6:	b292      	uxth	r2, r2
 80050d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_PCD_SetAddress+0x1a>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e013      	b.n	8005126 <HAL_PCD_SetAddress+0x42>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	78fa      	ldrb	r2, [r7, #3]
 800510a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	78fa      	ldrb	r2, [r7, #3]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f004 fd59 	bl	8009bce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	4608      	mov	r0, r1
 8005138:	4611      	mov	r1, r2
 800513a:	461a      	mov	r2, r3
 800513c:	4603      	mov	r3, r0
 800513e:	70fb      	strb	r3, [r7, #3]
 8005140:	460b      	mov	r3, r1
 8005142:	803b      	strh	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800514c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005150:	2b00      	cmp	r3, #0
 8005152:	da0e      	bge.n	8005172 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	00db      	lsls	r3, r3, #3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	705a      	strb	r2, [r3, #1]
 8005170:	e00e      	b.n	8005190 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	f003 0207 	and.w	r2, r3, #7
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4413      	add	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005190:	78fb      	ldrb	r3, [r7, #3]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	b2da      	uxtb	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800519c:	883a      	ldrh	r2, [r7, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	78ba      	ldrb	r2, [r7, #2]
 80051a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d004      	beq.n	80051ba <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80051ba:	78bb      	ldrb	r3, [r7, #2]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d102      	bne.n	80051c6 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_PCD_EP_Open+0xa6>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e00e      	b.n	80051f2 <HAL_PCD_EP_Open+0xc4>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fd6a 	bl	8007cbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80051f0:	7afb      	ldrb	r3, [r7, #11]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800520a:	2b00      	cmp	r3, #0
 800520c:	da0e      	bge.n	800522c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	705a      	strb	r2, [r3, #1]
 800522a:	e00e      	b.n	800524a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f003 0207 	and.w	r2, r3, #7
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	b2da      	uxtb	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_PCD_EP_Close+0x6a>
 8005260:	2302      	movs	r3, #2
 8005262:	e00e      	b.n	8005282 <HAL_PCD_EP_Close+0x88>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68f9      	ldr	r1, [r7, #12]
 8005272:	4618      	mov	r0, r3
 8005274:	f003 f890 	bl	8008398 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b086      	sub	sp, #24
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	460b      	mov	r3, r1
 8005298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529a:	7afb      	ldrb	r3, [r7, #11]
 800529c:	f003 0207 	and.w	r2, r3, #7
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2200      	movs	r2, #0
 80052c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052ca:	7afb      	ldrb	r3, [r7, #11]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80052d6:	7afb      	ldrb	r3, [r7, #11]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f003 fa43 	bl	8008772 <USB_EPStartXfer>
 80052ec:	e005      	b.n	80052fa <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6979      	ldr	r1, [r7, #20]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f003 fa3c 	bl	8008772 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	f003 0207 	and.w	r2, r3, #7
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	440b      	add	r3, r1
 8005322:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005326:	681b      	ldr	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	607a      	str	r2, [r7, #4]
 800533e:	603b      	str	r3, [r7, #0]
 8005340:	460b      	mov	r3, r1
 8005342:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	2200      	movs	r2, #0
 8005378:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2201      	movs	r2, #1
 800537e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	b2da      	uxtb	r2, r3
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800538c:	7afb      	ldrb	r3, [r7, #11]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6979      	ldr	r1, [r7, #20]
 800539c:	4618      	mov	r0, r3
 800539e:	f003 f9e8 	bl	8008772 <USB_EPStartXfer>
 80053a2:	e005      	b.n	80053b0 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6979      	ldr	r1, [r7, #20]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f003 f9e1 	bl	8008772 <USB_EPStartXfer>
  }

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80053c6:	78fb      	ldrb	r3, [r7, #3]
 80053c8:	f003 0207 	and.w	r2, r3, #7
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d901      	bls.n	80053d8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e04c      	b.n	8005472 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	da0e      	bge.n	80053fe <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	4613      	mov	r3, r2
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	705a      	strb	r2, [r3, #1]
 80053fc:	e00c      	b.n	8005418 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053fe:	78fa      	ldrb	r2, [r7, #3]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <HAL_PCD_EP_SetStall+0x7e>
 8005434:	2302      	movs	r3, #2
 8005436:	e01c      	b.n	8005472 <HAL_PCD_EP_SetStall+0xb8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	4618      	mov	r0, r3
 8005448:	f004 fac2 	bl	80099d0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800544c:	78fb      	ldrb	r3, [r7, #3]
 800544e:	f003 0307 	and.w	r3, r3, #7
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f004 fc03 	bl	8009c6e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005486:	78fb      	ldrb	r3, [r7, #3]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	429a      	cmp	r2, r3
 8005492:	d901      	bls.n	8005498 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e040      	b.n	800551a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005498:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800549c:	2b00      	cmp	r3, #0
 800549e:	da0e      	bge.n	80054be <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	4413      	add	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	705a      	strb	r2, [r3, #1]
 80054bc:	e00e      	b.n	80054dc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f003 0207 	and.w	r2, r3, #7
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d101      	bne.n	80054fc <HAL_PCD_EP_ClrStall+0x82>
 80054f8:	2302      	movs	r3, #2
 80054fa:	e00e      	b.n	800551a <HAL_PCD_EP_ClrStall+0xa0>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	4618      	mov	r0, r3
 800550c:	f004 fab1 	bl	8009a72 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08e      	sub	sp, #56	; 0x38
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800552a:	e2d1      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005534:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005536:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8005542:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 8152 	bne.w	80057f0 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800554c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d150      	bne.n	80055f8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b29b      	uxth	r3, r3
 800555e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	81fb      	strh	r3, [r7, #14]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3328      	adds	r3, #40	; 0x28
 800557e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	6812      	ldr	r2, [r2, #0]
 8005598:	4413      	add	r3, r2
 800559a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	695a      	ldr	r2, [r3, #20]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	441a      	add	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80055b6:	2100      	movs	r1, #0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f006 fa24 	bl	800ba06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8282 	beq.w	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 827d 	bne.w	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b292      	uxth	r2, r2
 80055ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055f6:	e26b      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800560a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560e:	2b00      	cmp	r3, #0
 8005610:	d032      	beq.n	8005678 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800561a:	b29b      	uxth	r3, r3
 800561c:	461a      	mov	r2, r3
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	4413      	add	r3, r2
 800562c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005638:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800564c:	b29b      	uxth	r3, r3
 800564e:	f004 fb5b 	bl	8009d08 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	b29a      	uxth	r2, r3
 800565a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800565e:	4013      	ands	r3, r2
 8005660:	823b      	strh	r3, [r7, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	8a3a      	ldrh	r2, [r7, #16]
 8005668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566c:	b292      	uxth	r2, r2
 800566e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f006 f99b 	bl	800b9ac <HAL_PCD_SetupStageCallback>
 8005676:	e22b      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005678:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800567c:	2b00      	cmp	r3, #0
 800567e:	f280 8227 	bge.w	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29a      	uxth	r2, r3
 800568a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800568e:	4013      	ands	r3, r2
 8005690:	83bb      	strh	r3, [r7, #28]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	8bba      	ldrh	r2, [r7, #28]
 8005698:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800569c:	b292      	uxth	r2, r2
 800569e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d019      	beq.n	8005704 <PCD_EP_ISR_Handler+0x1e2>
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d015      	beq.n	8005704 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	6959      	ldr	r1, [r3, #20]
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f004 fb0d 	bl	8009d08 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	441a      	add	r2, r3
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80056fc:	2100      	movs	r1, #0
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f006 f966 	bl	800b9d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005712:	b29b      	uxth	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	4413      	add	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d112      	bne.n	8005752 <PCD_EP_ISR_Handler+0x230>
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005736:	b29a      	uxth	r2, r3
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	881b      	ldrh	r3, [r3, #0]
 8005740:	b29b      	uxth	r3, r3
 8005742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574a:	b29a      	uxth	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	801a      	strh	r2, [r3, #0]
 8005750:	e02f      	b.n	80057b2 <PCD_EP_ISR_Handler+0x290>
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b3e      	cmp	r3, #62	; 0x3e
 8005758:	d813      	bhi.n	8005782 <PCD_EP_ISR_Handler+0x260>
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	085b      	lsrs	r3, r3, #1
 8005760:	633b      	str	r3, [r7, #48]	; 0x30
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <PCD_EP_ISR_Handler+0x252>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	3301      	adds	r3, #1
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	b29b      	uxth	r3, r3
 8005778:	029b      	lsls	r3, r3, #10
 800577a:	b29a      	uxth	r2, r3
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e017      	b.n	80057b2 <PCD_EP_ISR_Handler+0x290>
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2b00      	cmp	r3, #0
 8005794:	d102      	bne.n	800579c <PCD_EP_ISR_Handler+0x27a>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	3b01      	subs	r3, #1
 800579a:	633b      	str	r3, [r7, #48]	; 0x30
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	b29b      	uxth	r3, r3
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	827b      	strh	r3, [r7, #18]
 80057c4:	8a7b      	ldrh	r3, [r7, #18]
 80057c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057ca:	827b      	strh	r3, [r7, #18]
 80057cc:	8a7b      	ldrh	r3, [r7, #18]
 80057ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80057d2:	827b      	strh	r3, [r7, #18]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	8a7b      	ldrh	r3, [r7, #18]
 80057da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	8013      	strh	r3, [r2, #0]
 80057ee:	e16f      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	461a      	mov	r2, r3
 80057f6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005802:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005806:	2b00      	cmp	r3, #0
 8005808:	f280 80e4 	bge.w	80059d4 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29a      	uxth	r2, r3
 800581e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005822:	4013      	ands	r3, r2
 8005824:	853b      	strh	r3, [r7, #40]	; 0x28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800583a:	b292      	uxth	r2, r2
 800583c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800583e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	7b1b      	ldrb	r3, [r3, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d120      	bne.n	800589e <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005864:	b29b      	uxth	r3, r3
 8005866:	461a      	mov	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	00db      	lsls	r3, r3, #3
 800586e:	4413      	add	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	4413      	add	r3, r2
 8005876:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005880:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8005882:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8083 	beq.w	8005990 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	6959      	ldr	r1, [r3, #20]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	88da      	ldrh	r2, [r3, #6]
 8005896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005898:	f004 fa36 	bl	8009d08 <USB_ReadPMA>
 800589c:	e078      	b.n	8005990 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d108      	bne.n	80058b8 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80058a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80058a8:	461a      	mov	r2, r3
 80058aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f91d 	bl	8005aec <HAL_PCD_EP_DB_Receive>
 80058b2:	4603      	mov	r3, r0
 80058b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80058b6:	e06b      	b.n	8005990 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01f      	beq.n	8005952 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800591a:	b29b      	uxth	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	4413      	add	r3, r2
 800592c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005936:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800593a:	2b00      	cmp	r3, #0
 800593c:	d028      	beq.n	8005990 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	6959      	ldr	r1, [r3, #20]
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	891a      	ldrh	r2, [r3, #8]
 800594a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800594c:	f004 f9dc 	bl	8009d08 <USB_ReadPMA>
 8005950:	e01e      	b.n	8005990 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595a:	b29b      	uxth	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	4413      	add	r3, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	4413      	add	r3, r2
 800596c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005970:	881b      	ldrh	r3, [r3, #0]
 8005972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005976:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8005978:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	6959      	ldr	r1, [r3, #20]
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	895a      	ldrh	r2, [r3, #10]
 800598a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800598c:	f004 f9bc 	bl	8009d08 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005996:	441a      	add	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059a2:	441a      	add	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d004      	beq.n	80059ba <PCD_EP_ISR_Handler+0x498>
 80059b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d206      	bcs.n	80059c8 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f006 f805 	bl	800b9d0 <HAL_PCD_DataOutStageCallback>
 80059c6:	e005      	b.n	80059d4 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ce:	4618      	mov	r0, r3
 80059d0:	f002 fecf 	bl	8008772 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80059d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80059d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d078      	beq.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 80059de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	4413      	add	r3, r2
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	881b      	ldrh	r3, [r3, #0]
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0c:	843b      	strh	r3, [r7, #32]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	441a      	add	r2, r3
 8005a1c:	8c3b      	ldrh	r3, [r7, #32]
 8005a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	78db      	ldrb	r3, [r3, #3]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d108      	bne.n	8005a44 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d144      	bne.n	8005ac4 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8005a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d13f      	bne.n	8005ac4 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	8bfb      	ldrh	r3, [r7, #30]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d906      	bls.n	8005a82 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	8bfb      	ldrh	r3, [r7, #30]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	619a      	str	r2, [r3, #24]
 8005a80:	e002      	b.n	8005a88 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d106      	bne.n	8005a9e <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f005 ffb5 	bl	800ba06 <HAL_PCD_DataInStageCallback>
 8005a9c:	e018      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	441a      	add	r2, r3
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	69da      	ldr	r2, [r3, #28]
 8005aae:	8bfb      	ldrh	r3, [r7, #30]
 8005ab0:	441a      	add	r2, r3
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005abc:	4618      	mov	r0, r3
 8005abe:	f002 fe58 	bl	8008772 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005ac2:	e005      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005ac4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f917 	bl	8005cfe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	b21b      	sxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f6ff ad25 	blt.w	800552c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3738      	adds	r7, #56	; 0x38
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d07c      	beq.n	8005bfe <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	4413      	add	r3, r2
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	8b7b      	ldrh	r3, [r7, #26]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d306      	bcc.n	8005b42 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	8b7b      	ldrh	r3, [r7, #26]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	619a      	str	r2, [r3, #24]
 8005b40:	e002      	b.n	8005b48 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d123      	bne.n	8005b98 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	833b      	strh	r3, [r7, #24]
 8005b6c:	8b3b      	ldrh	r3, [r7, #24]
 8005b6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b72:	833b      	strh	r3, [r7, #24]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	441a      	add	r2, r3
 8005b82:	8b3b      	ldrh	r3, [r7, #24]
 8005b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d01f      	beq.n	8005be2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	82fb      	strh	r3, [r7, #22]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8afb      	ldrh	r3, [r7, #22]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005be2:	8b7b      	ldrh	r3, [r7, #26]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8085 	beq.w	8005cf4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6959      	ldr	r1, [r3, #20]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	891a      	ldrh	r2, [r3, #8]
 8005bf6:	8b7b      	ldrh	r3, [r7, #26]
 8005bf8:	f004 f886 	bl	8009d08 <USB_ReadPMA>
 8005bfc:	e07a      	b.n	8005cf4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	4413      	add	r3, r2
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	6812      	ldr	r2, [r2, #0]
 8005c16:	4413      	add	r3, r2
 8005c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c22:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	8b7b      	ldrh	r3, [r7, #26]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d306      	bcc.n	8005c3c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	8b7b      	ldrh	r3, [r7, #26]
 8005c34:	1ad2      	subs	r2, r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	e002      	b.n	8005c42 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d123      	bne.n	8005c92 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c64:	83fb      	strh	r3, [r7, #30]
 8005c66:	8bfb      	ldrh	r3, [r7, #30]
 8005c68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005c6c:	83fb      	strh	r3, [r7, #30]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	441a      	add	r2, r3
 8005c7c:	8bfb      	ldrh	r3, [r7, #30]
 8005c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11f      	bne.n	8005cdc <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	83bb      	strh	r3, [r7, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8bbb      	ldrh	r3, [r7, #28]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005cdc:	8b7b      	ldrh	r3, [r7, #26]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6818      	ldr	r0, [r3, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6959      	ldr	r1, [r3, #20]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	895a      	ldrh	r2, [r3, #10]
 8005cee:	8b7b      	ldrh	r3, [r7, #26]
 8005cf0:	f004 f80a 	bl	8009d08 <USB_ReadPMA>
    }
  }

  return count;
 8005cf4:	8b7b      	ldrh	r3, [r7, #26]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b092      	sub	sp, #72	; 0x48
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 8130 	beq.w	8005f78 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	461a      	mov	r2, r3
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d906      	bls.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	619a      	str	r2, [r3, #24]
 8005d54:	e002      	b.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d12c      	bne.n	8005dbe <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f005 fe4b 	bl	800ba06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d70:	88fb      	ldrh	r3, [r7, #6]
 8005d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 822d 	beq.w	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	827b      	strh	r3, [r7, #18]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	8a7b      	ldrh	r3, [r7, #18]
 8005da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8013      	strh	r3, [r2, #0]
 8005dbc:	e20b      	b.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01f      	beq.n	8005e08 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	f040 81e1 	bne.w	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	695a      	ldr	r2, [r3, #20]
 8005e18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e1a:	441a      	add	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e26:	441a      	add	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d309      	bcc.n	8005e4c <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e44:	1ad2      	subs	r2, r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	621a      	str	r2, [r3, #32]
 8005e4a:	e014      	b.n	8005e76 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d106      	bne.n	8005e62 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8005e54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e56:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005e60:	e009      	b.n	8005e76 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d155      	bne.n	8005f2a <HAL_PCD_EP_DB_Transmit+0x22c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	61bb      	str	r3, [r7, #24]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	4413      	add	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	00da      	lsls	r2, r3, #3
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d112      	bne.n	8005ed2 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	801a      	strh	r2, [r3, #0]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	801a      	strh	r2, [r3, #0]
 8005ed0:	e047      	b.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x264>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed6:	d811      	bhi.n	8005efc <HAL_PCD_EP_DB_Transmit+0x1fe>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eda:	085b      	lsrs	r3, r3, #1
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d002      	beq.n	8005eee <HAL_PCD_EP_DB_Transmit+0x1f0>
 8005ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eea:	3301      	adds	r3, #1
 8005eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	029b      	lsls	r3, r3, #10
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	e032      	b.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x264>
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f04:	f003 031f 	and.w	r3, r3, #31
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d102      	bne.n	8005f12 <HAL_PCD_EP_DB_Transmit+0x214>
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	029b      	lsls	r3, r3, #10
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	e01b      	b.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x264>
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d117      	bne.n	8005f62 <HAL_PCD_EP_DB_Transmit+0x264>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	461a      	mov	r2, r3
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	4413      	add	r3, r2
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00da      	lsls	r2, r3, #3
 8005f50:	6a3b      	ldr	r3, [r7, #32]
 8005f52:	4413      	add	r3, r2
 8005f54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	6959      	ldr	r1, [r3, #20]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	891a      	ldrh	r2, [r3, #8]
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f003 fe88 	bl	8009c86 <USB_WritePMA>
 8005f76:	e12e      	b.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	461a      	mov	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	6812      	ldr	r2, [r2, #0]
 8005f90:	4413      	add	r3, r2
 8005f92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f96:	881b      	ldrh	r3, [r3, #0]
 8005f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f9c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d306      	bcc.n	8005fb6 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	619a      	str	r2, [r3, #24]
 8005fb4:	e002      	b.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d12c      	bne.n	800601e <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f005 fd1b 	bl	800ba06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f040 80fd 	bne.w	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	441a      	add	r2, r3
 8006006:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800600c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006018:	b29b      	uxth	r3, r3
 800601a:	8013      	strh	r3, [r2, #0]
 800601c:	e0db      	b.n	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11f      	bne.n	8006068 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	b29b      	uxth	r3, r3
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006064:	b29b      	uxth	r3, r3
 8006066:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800606e:	2b01      	cmp	r3, #1
 8006070:	f040 80b1 	bne.w	80061d6 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	695a      	ldr	r2, [r3, #20]
 8006078:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800607a:	441a      	add	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	69da      	ldr	r2, [r3, #28]
 8006084:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006086:	441a      	add	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a1a      	ldr	r2, [r3, #32]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	429a      	cmp	r2, r3
 8006096:	d309      	bcc.n	80060ac <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	1ad2      	subs	r2, r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	621a      	str	r2, [r3, #32]
 80060aa:	e014      	b.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80060b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060b6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060c0:	e009      	b.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2200      	movs	r2, #0
 80060cc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	785b      	ldrb	r3, [r3, #1]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d155      	bne.n	8006190 <HAL_PCD_EP_DB_Transmit+0x492>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	647b      	str	r3, [r7, #68]	; 0x44
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f8:	4413      	add	r3, r2
 80060fa:	647b      	str	r3, [r7, #68]	; 0x44
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	00da      	lsls	r2, r3, #3
 8006102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006104:	4413      	add	r3, r2
 8006106:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800610a:	643b      	str	r3, [r7, #64]	; 0x40
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	2b00      	cmp	r3, #0
 8006110:	d112      	bne.n	8006138 <HAL_PCD_EP_DB_Transmit+0x43a>
 8006112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800611c:	b29a      	uxth	r2, r3
 800611e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006120:	801a      	strh	r2, [r3, #0]
 8006122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006130:	b29a      	uxth	r2, r3
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	e044      	b.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	2b3e      	cmp	r3, #62	; 0x3e
 800613c:	d811      	bhi.n	8006162 <HAL_PCD_EP_DB_Transmit+0x464>
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	085b      	lsrs	r3, r3, #1
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_PCD_EP_DB_Transmit+0x456>
 800614e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006150:	3301      	adds	r3, #1
 8006152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006156:	b29b      	uxth	r3, r3
 8006158:	029b      	lsls	r3, r3, #10
 800615a:	b29a      	uxth	r2, r3
 800615c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800615e:	801a      	strh	r2, [r3, #0]
 8006160:	e02f      	b.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006174:	3b01      	subs	r3, #1
 8006176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006188:	b29a      	uxth	r2, r3
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	e018      	b.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d114      	bne.n	80061c2 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a6:	4413      	add	r3, r2
 80061a8:	637b      	str	r3, [r7, #52]	; 0x34
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	00da      	lsls	r2, r3, #3
 80061b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b2:	4413      	add	r3, r2
 80061b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	b29a      	uxth	r2, r3
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6959      	ldr	r1, [r3, #20]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	895a      	ldrh	r2, [r3, #10]
 80061ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f003 fd58 	bl	8009c86 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f0:	823b      	strh	r3, [r7, #16]
 80061f2:	8a3b      	ldrh	r3, [r7, #16]
 80061f4:	f083 0310 	eor.w	r3, r3, #16
 80061f8:	823b      	strh	r3, [r7, #16]
 80061fa:	8a3b      	ldrh	r3, [r7, #16]
 80061fc:	f083 0320 	eor.w	r3, r3, #32
 8006200:	823b      	strh	r3, [r7, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	8a3b      	ldrh	r3, [r7, #16]
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3748      	adds	r7, #72	; 0x48
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	817b      	strh	r3, [r7, #10]
 800623e:	4613      	mov	r3, r2
 8006240:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006242:	897b      	ldrh	r3, [r7, #10]
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00b      	beq.n	8006266 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624e:	897b      	ldrh	r3, [r7, #10]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	4613      	mov	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e009      	b.n	800627a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006266:	897a      	ldrh	r2, [r7, #10]
 8006268:	4613      	mov	r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800627a:	893b      	ldrh	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2200      	movs	r2, #0
 8006284:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	b29a      	uxth	r2, r3
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	80da      	strh	r2, [r3, #6]
 800628e:	e00b      	b.n	80062a8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2201      	movs	r2, #1
 8006294:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	b29a      	uxth	r2, r3
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	0c1b      	lsrs	r3, r3, #16
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b085      	sub	sp, #20
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f043 0302 	orr.w	r3, r3, #2
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
	...

0800630c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <HAL_PWREx_GetVoltageRange+0x18>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40007000 	.word	0x40007000

08006328 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006336:	d130      	bne.n	800639a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006338:	4b23      	ldr	r3, [pc, #140]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006344:	d038      	beq.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800634e:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006350:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006354:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006356:	4b1d      	ldr	r3, [pc, #116]	; (80063cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2232      	movs	r2, #50	; 0x32
 800635c:	fb02 f303 	mul.w	r3, r2, r3
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006362:	fba2 2303 	umull	r2, r3, r2, r3
 8006366:	0c9b      	lsrs	r3, r3, #18
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800636c:	e002      	b.n	8006374 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b01      	subs	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d102      	bne.n	8006388 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1f2      	bne.n	800636e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006394:	d110      	bne.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e00f      	b.n	80063ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a6:	d007      	beq.n	80063b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063b0:	4a05      	ldr	r2, [pc, #20]	; (80063c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40007000 	.word	0x40007000
 80063cc:	20000000 	.word	0x20000000
 80063d0:	431bde83 	.word	0x431bde83

080063d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80063d8:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4a04      	ldr	r2, [pc, #16]	; (80063f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80063de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063e2:	6053      	str	r3, [r2, #4]
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	40007000 	.word	0x40007000

080063f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d102      	bne.n	8006408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	f000 bc56 	b.w	8006cb4 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006408:	4ba1      	ldr	r3, [pc, #644]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006412:	4b9f      	ldr	r3, [pc, #636]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80e6 	beq.w	80065f6 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <HAL_RCC_OscConfig+0x4c>
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	f040 808d 	bne.w	8006552 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	2b01      	cmp	r3, #1
 800643c:	f040 8089 	bne.w	8006552 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006440:	4b93      	ldr	r3, [pc, #588]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d006      	beq.n	800645a <HAL_RCC_OscConfig+0x66>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	f000 bc2d 	b.w	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800645e:	4b8c      	ldr	r3, [pc, #560]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <HAL_RCC_OscConfig+0x80>
 800646a:	4b89      	ldr	r3, [pc, #548]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006472:	e005      	b.n	8006480 <HAL_RCC_OscConfig+0x8c>
 8006474:	4b86      	ldr	r3, [pc, #536]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006480:	4293      	cmp	r3, r2
 8006482:	d224      	bcs.n	80064ce <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	4618      	mov	r0, r3
 800648a:	f000 fd91 	bl	8006fb0 <RCC_SetFlashLatencyFromMSIRange>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	f000 bc0d 	b.w	8006cb4 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800649a:	4b7d      	ldr	r3, [pc, #500]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7c      	ldr	r2, [pc, #496]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b7a      	ldr	r3, [pc, #488]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	4977      	ldr	r1, [pc, #476]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064b8:	4b75      	ldr	r3, [pc, #468]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	4972      	ldr	r1, [pc, #456]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	604b      	str	r3, [r1, #4]
 80064cc:	e025      	b.n	800651a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ce:	4b70      	ldr	r3, [pc, #448]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a6f      	ldr	r2, [pc, #444]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064d4:	f043 0308 	orr.w	r3, r3, #8
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4b6d      	ldr	r3, [pc, #436]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	496a      	ldr	r1, [pc, #424]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064ec:	4b68      	ldr	r3, [pc, #416]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	4965      	ldr	r1, [pc, #404]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fd50 	bl	8006fb0 <RCC_SetFlashLatencyFromMSIRange>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e3cc      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800651a:	f000 fcb3 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 800651e:	4601      	mov	r1, r0
 8006520:	4b5b      	ldr	r3, [pc, #364]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	4a5a      	ldr	r2, [pc, #360]	; (8006694 <HAL_RCC_OscConfig+0x2a0>)
 800652c:	5cd3      	ldrb	r3, [r2, r3]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	fa21 f303 	lsr.w	r3, r1, r3
 8006536:	4a58      	ldr	r2, [pc, #352]	; (8006698 <HAL_RCC_OscConfig+0x2a4>)
 8006538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800653a:	4b58      	ldr	r3, [pc, #352]	; (800669c <HAL_RCC_OscConfig+0x2a8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd fef6 	bl	8004330 <HAL_InitTick>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d052      	beq.n	80065f4 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	e3b0      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d032      	beq.n	80065c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800655a:	4b4d      	ldr	r3, [pc, #308]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a4c      	ldr	r2, [pc, #304]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006566:	f7fd ff33 	bl	80043d0 <HAL_GetTick>
 800656a:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800656e:	f7fd ff2f 	bl	80043d0 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e399      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006580:	4b43      	ldr	r3, [pc, #268]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800658c:	4b40      	ldr	r3, [pc, #256]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3f      	ldr	r2, [pc, #252]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4b3d      	ldr	r3, [pc, #244]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	493a      	ldr	r1, [pc, #232]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065aa:	4b39      	ldr	r3, [pc, #228]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	4935      	ldr	r1, [pc, #212]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
 80065be:	e01a      	b.n	80065f6 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065c0:	4b33      	ldr	r3, [pc, #204]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a32      	ldr	r2, [pc, #200]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065cc:	f7fd ff00 	bl	80043d0 <HAL_GetTick>
 80065d0:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065d4:	f7fd fefc 	bl	80043d0 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e366      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065e6:	4b2a      	ldr	r3, [pc, #168]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x1e0>
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d073      	beq.n	80066ea <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d005      	beq.n	8006614 <HAL_RCC_OscConfig+0x220>
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d10e      	bne.n	800662c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d10b      	bne.n	800662c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	4b1e      	ldr	r3, [pc, #120]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d063      	beq.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d15f      	bne.n	80066e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e343      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d106      	bne.n	8006644 <HAL_RCC_OscConfig+0x250>
 8006636:	4b16      	ldr	r3, [pc, #88]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a15      	ldr	r2, [pc, #84]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e01d      	b.n	8006680 <HAL_RCC_OscConfig+0x28c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664c:	d10c      	bne.n	8006668 <HAL_RCC_OscConfig+0x274>
 800664e:	4b10      	ldr	r3, [pc, #64]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e00b      	b.n	8006680 <HAL_RCC_OscConfig+0x28c>
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800666e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006672:	6013      	str	r3, [r2, #0]
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a05      	ldr	r2, [pc, #20]	; (8006690 <HAL_RCC_OscConfig+0x29c>)
 800667a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800667e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fd fea2 	bl	80043d0 <HAL_GetTick>
 800668c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800668e:	e010      	b.n	80066b2 <HAL_RCC_OscConfig+0x2be>
 8006690:	40021000 	.word	0x40021000
 8006694:	0800c54c 	.word	0x0800c54c
 8006698:	20000000 	.word	0x20000000
 800669c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a0:	f7fd fe96 	bl	80043d0 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b64      	cmp	r3, #100	; 0x64
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e300      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066b2:	4ba0      	ldr	r3, [pc, #640]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x2ac>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fd fe86 	bl	80043d0 <HAL_GetTick>
 80066c4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c8:	f7fd fe82 	bl	80043d0 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	; 0x64
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e2ec      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066da:	4b96      	ldr	r3, [pc, #600]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2d4>
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d060      	beq.n	80067b8 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_OscConfig+0x314>
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d119      	bne.n	8006736 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d116      	bne.n	8006736 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006708:	4b8a      	ldr	r3, [pc, #552]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_OscConfig+0x32c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e2c9      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b84      	ldr	r3, [pc, #528]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	4981      	ldr	r1, [pc, #516]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006730:	4313      	orrs	r3, r2
 8006732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006734:	e040      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d023      	beq.n	8006786 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800673e:	4b7d      	ldr	r3, [pc, #500]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7c      	ldr	r2, [pc, #496]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fd fe41 	bl	80043d0 <HAL_GetTick>
 800674e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006752:	f7fd fe3d 	bl	80043d0 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e2a7      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006764:	4b73      	ldr	r3, [pc, #460]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006770:	4b70      	ldr	r3, [pc, #448]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	061b      	lsls	r3, r3, #24
 800677e:	496d      	ldr	r1, [pc, #436]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]
 8006784:	e018      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006786:	4b6b      	ldr	r3, [pc, #428]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a6a      	ldr	r2, [pc, #424]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800678c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fd fe1d 	bl	80043d0 <HAL_GetTick>
 8006796:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800679a:	f7fd fe19 	bl	80043d0 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e283      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ac:	4b61      	ldr	r3, [pc, #388]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f0      	bne.n	800679a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d07f      	beq.n	80068c4 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d05f      	beq.n	800688c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80067cc:	4b59      	ldr	r3, [pc, #356]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d2:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699a      	ldr	r2, [r3, #24]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	429a      	cmp	r2, r3
 80067e0:	d037      	beq.n	8006852 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d006      	beq.n	80067fa <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e25c      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01b      	beq.n	800683c <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8006804:	4b4b      	ldr	r3, [pc, #300]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680a:	4a4a      	ldr	r2, [pc, #296]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006814:	f7fd fddc 	bl	80043d0 <HAL_GetTick>
 8006818:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800681a:	e008      	b.n	800682e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800681c:	f7fd fdd8 	bl	80043d0 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b11      	cmp	r3, #17
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e242      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ef      	bne.n	800681c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800683c:	4b3d      	ldr	r3, [pc, #244]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800683e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006842:	f023 0210 	bic.w	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	493a      	ldr	r1, [pc, #232]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006852:	4b38      	ldr	r3, [pc, #224]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006858:	4a36      	ldr	r2, [pc, #216]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006862:	f7fd fdb5 	bl	80043d0 <HAL_GetTick>
 8006866:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686a:	f7fd fdb1 	bl	80043d0 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b11      	cmp	r3, #17
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e21b      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800687c:	4b2d      	ldr	r3, [pc, #180]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800687e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0ef      	beq.n	800686a <HAL_RCC_OscConfig+0x476>
 800688a:	e01b      	b.n	80068c4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b29      	ldr	r3, [pc, #164]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006892:	4a28      	ldr	r2, [pc, #160]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689c:	f7fd fd98 	bl	80043d0 <HAL_GetTick>
 80068a0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a4:	f7fd fd94 	bl	80043d0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b11      	cmp	r3, #17
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e1fe      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068b6:	4b1f      	ldr	r3, [pc, #124]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80068b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ef      	bne.n	80068a4 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80c1 	beq.w	8006a54 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068d8:	4b16      	ldr	r3, [pc, #88]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10e      	bne.n	8006902 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e4:	4b13      	ldr	r3, [pc, #76]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80068e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e8:	4a12      	ldr	r2, [pc, #72]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6593      	str	r3, [r2, #88]	; 0x58
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <HAL_RCC_OscConfig+0x540>)
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <HAL_RCC_OscConfig+0x544>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11c      	bne.n	8006948 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <HAL_RCC_OscConfig+0x544>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_RCC_OscConfig+0x544>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fd fd59 	bl	80043d0 <HAL_GetTick>
 800691e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006920:	e00c      	b.n	800693c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fd fd55 	bl	80043d0 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d905      	bls.n	800693c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e1bf      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
 8006934:	40021000 	.word	0x40021000
 8006938:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800693c:	4bb1      	ldr	r3, [pc, #708]	; (8006c04 <HAL_RCC_OscConfig+0x810>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0ec      	beq.n	8006922 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d02c      	beq.n	80069ae <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8006954:	4bac      	ldr	r3, [pc, #688]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006966:	49a8      	ldr	r1, [pc, #672]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006968:	4313      	orrs	r3, r2
 800696a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d010      	beq.n	800699c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800697a:	4ba3      	ldr	r3, [pc, #652]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	4aa1      	ldr	r2, [pc, #644]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006982:	f043 0304 	orr.w	r3, r3, #4
 8006986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800698a:	4b9f      	ldr	r3, [pc, #636]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	4a9d      	ldr	r2, [pc, #628]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800699a:	e018      	b.n	80069ce <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800699c:	4b9a      	ldr	r3, [pc, #616]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	4a99      	ldr	r2, [pc, #612]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069ac:	e00f      	b.n	80069ce <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80069ae:	4b96      	ldr	r3, [pc, #600]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	4a94      	ldr	r2, [pc, #592]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80069be:	4b92      	ldr	r3, [pc, #584]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	4a90      	ldr	r2, [pc, #576]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d016      	beq.n	8006a04 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d6:	f7fd fcfb 	bl	80043d0 <HAL_GetTick>
 80069da:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069dc:	e00a      	b.n	80069f4 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069de:	f7fd fcf7 	bl	80043d0 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d901      	bls.n	80069f4 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e15f      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069f4:	4b84      	ldr	r3, [pc, #528]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0ed      	beq.n	80069de <HAL_RCC_OscConfig+0x5ea>
 8006a02:	e01d      	b.n	8006a40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a04:	f7fd fce4 	bl	80043d0 <HAL_GetTick>
 8006a08:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a0a:	e00a      	b.n	8006a22 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a0c:	f7fd fce0 	bl	80043d0 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e148      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a22:	4b79      	ldr	r3, [pc, #484]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ed      	bne.n	8006a0c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8006a30:	4b75      	ldr	r3, [pc, #468]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a36:	4a74      	ldr	r2, [pc, #464]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d105      	bne.n	8006a54 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a48:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	4a6e      	ldr	r2, [pc, #440]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d03c      	beq.n	8006ada <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01c      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a68:	4b67      	ldr	r3, [pc, #412]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a6e:	4a66      	ldr	r2, [pc, #408]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a70:	f043 0301 	orr.w	r3, r3, #1
 8006a74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a78:	f7fd fcaa 	bl	80043d0 <HAL_GetTick>
 8006a7c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a80:	f7fd fca6 	bl	80043d0 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e110      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a92:	4b5d      	ldr	r3, [pc, #372]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0ef      	beq.n	8006a80 <HAL_RCC_OscConfig+0x68c>
 8006aa0:	e01b      	b.n	8006ada <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aa2:	4b59      	ldr	r3, [pc, #356]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab2:	f7fd fc8d 	bl	80043d0 <HAL_GetTick>
 8006ab6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aba:	f7fd fc89 	bl	80043d0 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0f3      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006acc:	4b4e      	ldr	r3, [pc, #312]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1ef      	bne.n	8006aba <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f000 80e7 	beq.w	8006cb2 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	f040 80b7 	bne.w	8006c5c <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006aee:	4b46      	ldr	r3, [pc, #280]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d124      	bne.n	8006b4c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d11b      	bne.n	8006b4c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d113      	bne.n	8006b4c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	3b01      	subs	r3, #1
 8006b32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d109      	bne.n	8006b4c <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	3b01      	subs	r3, #1
 8006b46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d061      	beq.n	8006c10 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	d056      	beq.n	8006c00 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b52:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006b58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b5e:	f7fd fc37 	bl	80043d0 <HAL_GetTick>
 8006b62:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fd fc33 	bl	80043d0 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e09d      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b78:	4b23      	ldr	r3, [pc, #140]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1f0      	bne.n	8006b66 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b84:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <HAL_RCC_OscConfig+0x818>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b94:	3a01      	subs	r2, #1
 8006b96:	0112      	lsls	r2, r2, #4
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b9e:	0212      	lsls	r2, r2, #8
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ba6:	0852      	lsrs	r2, r2, #1
 8006ba8:	3a01      	subs	r2, #1
 8006baa:	0552      	lsls	r2, r2, #21
 8006bac:	4311      	orrs	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006bb2:	0852      	lsrs	r2, r2, #1
 8006bb4:	3a01      	subs	r2, #1
 8006bb6:	0652      	lsls	r2, r2, #25
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	4913      	ldr	r1, [pc, #76]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a10      	ldr	r2, [pc, #64]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bcc:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bd8:	f7fd fbfa 	bl	80043d0 <HAL_GetTick>
 8006bdc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bde:	e008      	b.n	8006bf2 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be0:	f7fd fbf6 	bl	80043d0 <HAL_GetTick>
 8006be4:	4602      	mov	r2, r0
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e060      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <HAL_RCC_OscConfig+0x814>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0f0      	beq.n	8006be0 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bfe:	e058      	b.n	8006cb2 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e057      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
 8006c04:	40007000 	.word	0x40007000
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c10:	4b2a      	ldr	r3, [pc, #168]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d14a      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c1c:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c28:	4b24      	ldr	r3, [pc, #144]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4a23      	ldr	r2, [pc, #140]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c34:	f7fd fbcc 	bl	80043d0 <HAL_GetTick>
 8006c38:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3c:	f7fd fbc8 	bl	80043d0 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e032      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x848>
 8006c5a:	e02a      	b.n	8006cb2 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	2b0c      	cmp	r3, #12
 8006c60:	d025      	beq.n	8006cae <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c62:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c6c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	4a12      	ldr	r2, [pc, #72]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c74:	f023 0303 	bic.w	r3, r3, #3
 8006c78:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8006c7a:	4b10      	ldr	r3, [pc, #64]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	4a0f      	ldr	r2, [pc, #60]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006c80:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c86:	f7fd fba3 	bl	80043d0 <HAL_GetTick>
 8006c8a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c8e:	f7fd fb9f 	bl	80043d0 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e009      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca0:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <HAL_RCC_OscConfig+0x8c8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f0      	bne.n	8006c8e <HAL_RCC_OscConfig+0x89a>
 8006cac:	e001      	b.n	8006cb2 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3728      	adds	r7, #40	; 0x28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40021000 	.word	0x40021000

08006cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0c8      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b66      	ldr	r3, [pc, #408]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d910      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b63      	ldr	r3, [pc, #396]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 0207 	bic.w	r2, r3, #7
 8006cea:	4961      	ldr	r1, [pc, #388]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b5f      	ldr	r3, [pc, #380]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0b0      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d04c      	beq.n	8006daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d107      	bne.n	8006d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d18:	4b56      	ldr	r3, [pc, #344]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d121      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e09e      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d30:	4b50      	ldr	r3, [pc, #320]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d115      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e092      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d48:	4b4a      	ldr	r3, [pc, #296]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d109      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e086      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d58:	4b46      	ldr	r3, [pc, #280]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e07e      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f023 0203 	bic.w	r2, r3, #3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	493f      	ldr	r1, [pc, #252]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7a:	f7fd fb29 	bl	80043d0 <HAL_GetTick>
 8006d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d80:	e00a      	b.n	8006d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d82:	f7fd fb25 	bl	80043d0 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e066      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d98:	4b36      	ldr	r3, [pc, #216]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f003 020c 	and.w	r2, r3, #12
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d1eb      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d008      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	492c      	ldr	r1, [pc, #176]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc8:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d210      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd6:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f023 0207 	bic.w	r2, r3, #7
 8006dde:	4924      	ldr	r1, [pc, #144]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <HAL_RCC_ClockConfig+0x1b0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e036      	b.n	8006e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e04:	4b1b      	ldr	r3, [pc, #108]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4918      	ldr	r1, [pc, #96]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e22:	4b14      	ldr	r3, [pc, #80]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4910      	ldr	r1, [pc, #64]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e36:	f000 f825 	bl	8006e84 <HAL_RCC_GetSysClockFreq>
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	4b0d      	ldr	r3, [pc, #52]	; (8006e74 <HAL_RCC_ClockConfig+0x1b4>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <HAL_RCC_ClockConfig+0x1b8>)
 8006e48:	5cd3      	ldrb	r3, [r2, r3]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	fa21 f303 	lsr.w	r3, r1, r3
 8006e52:	4a0a      	ldr	r2, [pc, #40]	; (8006e7c <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e56:	4b0a      	ldr	r3, [pc, #40]	; (8006e80 <HAL_RCC_ClockConfig+0x1c0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd fa68 	bl	8004330 <HAL_InitTick>
 8006e60:	4603      	mov	r3, r0
 8006e62:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e64:	7afb      	ldrb	r3, [r7, #11]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	40022000 	.word	0x40022000
 8006e74:	40021000 	.word	0x40021000
 8006e78:	0800c54c 	.word	0x0800c54c
 8006e7c:	20000000 	.word	0x20000000
 8006e80:	20000004 	.word	0x20000004

08006e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b089      	sub	sp, #36	; 0x24
 8006e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e92:	4b3d      	ldr	r3, [pc, #244]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e9c:	4b3a      	ldr	r3, [pc, #232]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	f003 0303 	and.w	r3, r3, #3
 8006ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	2b0c      	cmp	r3, #12
 8006eb0:	d121      	bne.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d11e      	bne.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006eb8:	4b33      	ldr	r3, [pc, #204]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d107      	bne.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ec4:	4b30      	ldr	r3, [pc, #192]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eca:	0a1b      	lsrs	r3, r3, #8
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	61fb      	str	r3, [r7, #28]
 8006ed2:	e005      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ed4:	4b2c      	ldr	r3, [pc, #176]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10d      	bne.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ef4:	e00a      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d102      	bne.n	8006f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006efc:	4b24      	ldr	r3, [pc, #144]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e004      	b.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d101      	bne.n	8006f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f08:	4b22      	ldr	r3, [pc, #136]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b0c      	cmp	r3, #12
 8006f10:	d133      	bne.n	8006f7a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f12:	4b1d      	ldr	r3, [pc, #116]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d002      	beq.n	8006f28 <HAL_RCC_GetSysClockFreq+0xa4>
 8006f22:	2b03      	cmp	r3, #3
 8006f24:	d003      	beq.n	8006f2e <HAL_RCC_GetSysClockFreq+0xaa>
 8006f26:	e005      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f2a:	617b      	str	r3, [r7, #20]
      break;
 8006f2c:	e005      	b.n	8006f3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f2e:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f30:	617b      	str	r3, [r7, #20]
      break;
 8006f32:	e002      	b.n	8006f3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	617b      	str	r3, [r7, #20]
      break;
 8006f38:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	091b      	lsrs	r3, r3, #4
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	3301      	adds	r3, #1
 8006f46:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f48:	4b0f      	ldr	r3, [pc, #60]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	0a1b      	lsrs	r3, r3, #8
 8006f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	fb02 f203 	mul.w	r2, r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f60:	4b09      	ldr	r3, [pc, #36]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x104>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	0e5b      	lsrs	r3, r3, #25
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f78:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f7a:	69bb      	ldr	r3, [r7, #24]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3724      	adds	r7, #36	; 0x24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	0800c55c 	.word	0x0800c55c
 8006f90:	00f42400 	.word	0x00f42400
 8006f94:	007a1200 	.word	0x007a1200

08006f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f9c:	4b03      	ldr	r3, [pc, #12]	; (8006fac <HAL_RCC_GetHCLKFreq+0x14>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000000 	.word	0x20000000

08006fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fb8:	2300      	movs	r3, #0
 8006fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fc8:	f7ff f9a0 	bl	800630c <HAL_PWREx_GetVoltageRange>
 8006fcc:	6178      	str	r0, [r7, #20]
 8006fce:	e014      	b.n	8006ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd0:	4b25      	ldr	r3, [pc, #148]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fda:	6593      	str	r3, [r2, #88]	; 0x58
 8006fdc:	4b22      	ldr	r3, [pc, #136]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fe8:	f7ff f990 	bl	800630c <HAL_PWREx_GetVoltageRange>
 8006fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007000:	d10b      	bne.n	800701a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b80      	cmp	r3, #128	; 0x80
 8007006:	d919      	bls.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2ba0      	cmp	r3, #160	; 0xa0
 800700c:	d902      	bls.n	8007014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800700e:	2302      	movs	r3, #2
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	e013      	b.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007014:	2301      	movs	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	e010      	b.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2b80      	cmp	r3, #128	; 0x80
 800701e:	d902      	bls.n	8007026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007020:	2303      	movs	r3, #3
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	e00a      	b.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b80      	cmp	r3, #128	; 0x80
 800702a:	d102      	bne.n	8007032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800702c:	2302      	movs	r3, #2
 800702e:	613b      	str	r3, [r7, #16]
 8007030:	e004      	b.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2b70      	cmp	r3, #112	; 0x70
 8007036:	d101      	bne.n	800703c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007038:	2301      	movs	r3, #1
 800703a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800703c:	4b0b      	ldr	r3, [pc, #44]	; (800706c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f023 0207 	bic.w	r2, r3, #7
 8007044:	4909      	ldr	r1, [pc, #36]	; (800706c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3718      	adds	r7, #24
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40021000 	.word	0x40021000
 800706c:	40022000 	.word	0x40022000

08007070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007078:	2300      	movs	r3, #0
 800707a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800707c:	2300      	movs	r3, #0
 800707e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 809e 	beq.w	80071ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007092:	4b46      	ldr	r3, [pc, #280]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b40      	ldr	r3, [pc, #256]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	4a3f      	ldr	r2, [pc, #252]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	6593      	str	r3, [r2, #88]	; 0x58
 80070b4:	4b3d      	ldr	r3, [pc, #244]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c4:	4b3a      	ldr	r3, [pc, #232]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80070ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d0:	f7fd f97e 	bl	80043d0 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070d8:	f7fd f97a 	bl	80043d0 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d902      	bls.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	74fb      	strb	r3, [r7, #19]
        break;
 80070ea:	e005      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070ec:	4b30      	ldr	r3, [pc, #192]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0ef      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d15a      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01e      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	697a      	ldr	r2, [r7, #20]
 8007116:	429a      	cmp	r2, r3
 8007118:	d019      	beq.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800711a:	4b24      	ldr	r3, [pc, #144]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800711c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007126:	4b21      	ldr	r3, [pc, #132]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	4a1f      	ldr	r2, [pc, #124]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800712e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007136:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713c:	4a1b      	ldr	r2, [pc, #108]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800713e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007146:	4a19      	ldr	r2, [pc, #100]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d016      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fd f93a 	bl	80043d0 <HAL_GetTick>
 800715c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800715e:	e00b      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007160:	f7fd f936 	bl	80043d0 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	f241 3288 	movw	r2, #5000	; 0x1388
 800716e:	4293      	cmp	r3, r2
 8007170:	d902      	bls.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	74fb      	strb	r3, [r7, #19]
            break;
 8007176:	e006      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007178:	4b0c      	ldr	r3, [pc, #48]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800717a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0ec      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8007186:	7cfb      	ldrb	r3, [r7, #19]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d10b      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718c:	4b07      	ldr	r3, [pc, #28]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719a:	4904      	ldr	r1, [pc, #16]	; (80071ac <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800719c:	4313      	orrs	r3, r2
 800719e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071a2:	e009      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	74bb      	strb	r3, [r7, #18]
 80071a8:	e006      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071b8:	7c7b      	ldrb	r3, [r7, #17]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d105      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071be:	4b6e      	ldr	r3, [pc, #440]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	4a6d      	ldr	r2, [pc, #436]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80071c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071d6:	4b68      	ldr	r3, [pc, #416]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80071d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071dc:	f023 0203 	bic.w	r2, r3, #3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	4964      	ldr	r1, [pc, #400]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071f8:	4b5f      	ldr	r3, [pc, #380]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80071fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071fe:	f023 020c 	bic.w	r2, r3, #12
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	495c      	ldr	r1, [pc, #368]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007208:	4313      	orrs	r3, r2
 800720a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800721a:	4b57      	ldr	r3, [pc, #348]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800721c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007220:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	4953      	ldr	r1, [pc, #332]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800722a:	4313      	orrs	r3, r2
 800722c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800723c:	4b4e      	ldr	r3, [pc, #312]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	494b      	ldr	r1, [pc, #300]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800725e:	4b46      	ldr	r3, [pc, #280]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	4942      	ldr	r1, [pc, #264]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007280:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	493a      	ldr	r1, [pc, #232]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072a2:	4b35      	ldr	r3, [pc, #212]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	695b      	ldr	r3, [r3, #20]
 80072b0:	4931      	ldr	r1, [pc, #196]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072c4:	4b2c      	ldr	r3, [pc, #176]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	4929      	ldr	r1, [pc, #164]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072e6:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	4920      	ldr	r1, [pc, #128]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	4918      	ldr	r1, [pc, #96]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007318:	4313      	orrs	r3, r2
 800731a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007326:	d105      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	4a12      	ldr	r2, [pc, #72]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800732e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007332:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d015      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007340:	4b0d      	ldr	r3, [pc, #52]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	490a      	ldr	r1, [pc, #40]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800735e:	d105      	bne.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007360:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	4a04      	ldr	r2, [pc, #16]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800736c:	7cbb      	ldrb	r3, [r7, #18]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	40021000 	.word	0x40021000

0800737c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e049      	b.n	8007422 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7f9 fca2 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f000 fa8a 	bl	80078d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	d001      	beq.n	8007444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e03b      	b.n	80074bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2202      	movs	r2, #2
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d009      	beq.n	800747a <HAL_TIM_Base_Start_IT+0x4e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746e:	d004      	beq.n	800747a <HAL_TIM_Base_Start_IT+0x4e>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a15      	ldr	r2, [pc, #84]	; (80074cc <HAL_TIM_Base_Start_IT+0xa0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d115      	bne.n	80074a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007482:	4013      	ands	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2b06      	cmp	r3, #6
 800748a:	d015      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x8c>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007492:	d011      	beq.n	80074b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074a4:	e008      	b.n	80074b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0201 	orr.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	e000      	b.n	80074ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3714      	adds	r7, #20
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40014000 	.word	0x40014000
 80074d0:	00010007 	.word	0x00010007

080074d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d122      	bne.n	8007530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d11b      	bne.n	8007530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f06f 0202 	mvn.w	r2, #2
 8007500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f9be 	bl	8007898 <HAL_TIM_IC_CaptureCallback>
 800751c:	e005      	b.n	800752a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f000 f9b0 	bl	8007884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f9c1 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0304 	and.w	r3, r3, #4
 800753a:	2b04      	cmp	r3, #4
 800753c:	d122      	bne.n	8007584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	f003 0304 	and.w	r3, r3, #4
 8007548:	2b04      	cmp	r3, #4
 800754a:	d11b      	bne.n	8007584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f06f 0204 	mvn.w	r2, #4
 8007554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2202      	movs	r2, #2
 800755a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f994 	bl	8007898 <HAL_TIM_IC_CaptureCallback>
 8007570:	e005      	b.n	800757e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f986 	bl	8007884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f997 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	f003 0308 	and.w	r3, r3, #8
 800758e:	2b08      	cmp	r3, #8
 8007590:	d122      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b08      	cmp	r3, #8
 800759e:	d11b      	bne.n	80075d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0208 	mvn.w	r2, #8
 80075a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2204      	movs	r2, #4
 80075ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69db      	ldr	r3, [r3, #28]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f96a 	bl	8007898 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f95c 	bl	8007884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f96d 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	2b10      	cmp	r3, #16
 80075e4:	d122      	bne.n	800762c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f003 0310 	and.w	r3, r3, #16
 80075f0:	2b10      	cmp	r3, #16
 80075f2:	d11b      	bne.n	800762c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f06f 0210 	mvn.w	r2, #16
 80075fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2208      	movs	r2, #8
 8007602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f940 	bl	8007898 <HAL_TIM_IC_CaptureCallback>
 8007618:	e005      	b.n	8007626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f932 	bl	8007884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f943 	bl	80078ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	2b01      	cmp	r3, #1
 8007638:	d10e      	bne.n	8007658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	2b01      	cmp	r3, #1
 8007646:	d107      	bne.n	8007658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f06f 0201 	mvn.w	r2, #1
 8007650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7f9 f9ba 	bl	80009cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007662:	2b80      	cmp	r3, #128	; 0x80
 8007664:	d10e      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007670:	2b80      	cmp	r3, #128	; 0x80
 8007672:	d107      	bne.n	8007684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800767c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa96 	bl	8007bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007692:	d10e      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b80      	cmp	r3, #128	; 0x80
 80076a0:	d107      	bne.n	80076b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa89 	bl	8007bc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b40      	cmp	r3, #64	; 0x40
 80076be:	d10e      	bne.n	80076de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d107      	bne.n	80076de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8f1 	bl	80078c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	f003 0320 	and.w	r3, r3, #32
 80076e8:	2b20      	cmp	r3, #32
 80076ea:	d10e      	bne.n	800770a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d107      	bne.n	800770a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f06f 0220 	mvn.w	r2, #32
 8007702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa49 	bl	8007b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800770a:	bf00      	nop
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007722:	2b01      	cmp	r3, #1
 8007724:	d101      	bne.n	800772a <HAL_TIM_ConfigClockSource+0x18>
 8007726:	2302      	movs	r3, #2
 8007728:	e0a8      	b.n	800787c <HAL_TIM_ConfigClockSource+0x16a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2202      	movs	r2, #2
 8007736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007748:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800774c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007754:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d067      	beq.n	8007836 <HAL_TIM_ConfigClockSource+0x124>
 8007766:	2b40      	cmp	r3, #64	; 0x40
 8007768:	d80b      	bhi.n	8007782 <HAL_TIM_ConfigClockSource+0x70>
 800776a:	2b10      	cmp	r3, #16
 800776c:	d073      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x144>
 800776e:	2b10      	cmp	r3, #16
 8007770:	d802      	bhi.n	8007778 <HAL_TIM_ConfigClockSource+0x66>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d06f      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007776:	e078      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007778:	2b20      	cmp	r3, #32
 800777a:	d06c      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x144>
 800777c:	2b30      	cmp	r3, #48	; 0x30
 800777e:	d06a      	beq.n	8007856 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8007780:	e073      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007782:	2b70      	cmp	r3, #112	; 0x70
 8007784:	d00d      	beq.n	80077a2 <HAL_TIM_ConfigClockSource+0x90>
 8007786:	2b70      	cmp	r3, #112	; 0x70
 8007788:	d804      	bhi.n	8007794 <HAL_TIM_ConfigClockSource+0x82>
 800778a:	2b50      	cmp	r3, #80	; 0x50
 800778c:	d033      	beq.n	80077f6 <HAL_TIM_ConfigClockSource+0xe4>
 800778e:	2b60      	cmp	r3, #96	; 0x60
 8007790:	d041      	beq.n	8007816 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8007792:	e06a      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8007794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007798:	d066      	beq.n	8007868 <HAL_TIM_ConfigClockSource+0x156>
 800779a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800779e:	d017      	beq.n	80077d0 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80077a0:	e063      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6818      	ldr	r0, [r3, #0]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	6899      	ldr	r1, [r3, #8]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f000 f96d 	bl	8007a90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	609a      	str	r2, [r3, #8]
      break;
 80077ce:	e04c      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6899      	ldr	r1, [r3, #8]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	f000 f956 	bl	8007a90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f2:	609a      	str	r2, [r3, #8]
      break;
 80077f4:	e039      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6859      	ldr	r1, [r3, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	461a      	mov	r2, r3
 8007804:	f000 f8ca 	bl	800799c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2150      	movs	r1, #80	; 0x50
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f923 	bl	8007a5a <TIM_ITRx_SetConfig>
      break;
 8007814:	e029      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6818      	ldr	r0, [r3, #0]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	6859      	ldr	r1, [r3, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	461a      	mov	r2, r3
 8007824:	f000 f8e9 	bl	80079fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2160      	movs	r1, #96	; 0x60
 800782e:	4618      	mov	r0, r3
 8007830:	f000 f913 	bl	8007a5a <TIM_ITRx_SetConfig>
      break;
 8007834:	e019      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	6859      	ldr	r1, [r3, #4]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	461a      	mov	r2, r3
 8007844:	f000 f8aa 	bl	800799c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2140      	movs	r1, #64	; 0x40
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f903 	bl	8007a5a <TIM_ITRx_SetConfig>
      break;
 8007854:	e009      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f000 f8fa 	bl	8007a5a <TIM_ITRx_SetConfig>
        break;
 8007866:	e000      	b.n	800786a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8007868:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078b4:	bf00      	nop
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a2a      	ldr	r2, [pc, #168]	; (8007990 <TIM_Base_SetConfig+0xbc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_Base_SetConfig+0x20>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f2:	d108      	bne.n	8007906 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	4313      	orrs	r3, r2
 8007904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a21      	ldr	r2, [pc, #132]	; (8007990 <TIM_Base_SetConfig+0xbc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00b      	beq.n	8007926 <TIM_Base_SetConfig+0x52>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007914:	d007      	beq.n	8007926 <TIM_Base_SetConfig+0x52>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1e      	ldr	r2, [pc, #120]	; (8007994 <TIM_Base_SetConfig+0xc0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d003      	beq.n	8007926 <TIM_Base_SetConfig+0x52>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1d      	ldr	r2, [pc, #116]	; (8007998 <TIM_Base_SetConfig+0xc4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d108      	bne.n	8007938 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800792c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	68db      	ldr	r3, [r3, #12]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4313      	orrs	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	689a      	ldr	r2, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a0c      	ldr	r2, [pc, #48]	; (8007990 <TIM_Base_SetConfig+0xbc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <TIM_Base_SetConfig+0xa0>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <TIM_Base_SetConfig+0xc0>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0xa0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a0a      	ldr	r2, [pc, #40]	; (8007998 <TIM_Base_SetConfig+0xc4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d103      	bne.n	800797c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40012c00 	.word	0x40012c00
 8007994:	40014000 	.word	0x40014000
 8007998:	40014400 	.word	0x40014400

0800799c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 030a 	bic.w	r3, r3, #10
 80079d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	4313      	orrs	r3, r2
 80079e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	621a      	str	r2, [r3, #32]
}
 80079ee:	bf00      	nop
 80079f0:	371c      	adds	r7, #28
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079fa:	b480      	push	{r7}
 80079fc:	b087      	sub	sp, #28
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f023 0210 	bic.w	r2, r3, #16
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	031b      	lsls	r3, r3, #12
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	621a      	str	r2, [r3, #32]
}
 8007a4e:	bf00      	nop
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f043 0307 	orr.w	r3, r3, #7
 8007a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	609a      	str	r2, [r3, #8]
}
 8007a84:	bf00      	nop
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	021a      	lsls	r2, r3, #8
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	609a      	str	r2, [r3, #8]
}
 8007ac4:	bf00      	nop
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d101      	bne.n	8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	e04f      	b.n	8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d108      	bne.n	8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b18:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a14      	ldr	r2, [pc, #80]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d009      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b50:	d004      	beq.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a10      	ldr	r2, [pc, #64]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10c      	bne.n	8007b76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40012c00 	.word	0x40012c00
 8007b98:	40014000 	.word	0x40014000

08007b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007bd8:	b084      	sub	sp, #16
 8007bda:	b480      	push	{r7}
 8007bdc:	b083      	sub	sp, #12
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	f107 0014 	add.w	r0, r7, #20
 8007be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	b004      	add	sp, #16
 8007bf8:	4770      	bx	lr

08007bfa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c0a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c0e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c30:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c34:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	4013      	ands	r3, r2
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c78:	b084      	sub	sp, #16
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	f107 0014 	add.w	r0, r7, #20
 8007c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	b004      	add	sp, #16
 8007cb8:	4770      	bx	lr
	...

08007cbc <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b09b      	sub	sp, #108	; 0x6c
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	78db      	ldrb	r3, [r3, #3]
 8007cea:	2b03      	cmp	r3, #3
 8007cec:	d81f      	bhi.n	8007d2e <USB_ActivateEndpoint+0x72>
 8007cee:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <USB_ActivateEndpoint+0x38>)
 8007cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf4:	08007d05 	.word	0x08007d05
 8007cf8:	08007d21 	.word	0x08007d21
 8007cfc:	08007d37 	.word	0x08007d37
 8007d00:	08007d13 	.word	0x08007d13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d0c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d10:	e012      	b.n	8007d38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d12:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d16:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d1e:	e00b      	b.n	8007d38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d28:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8007d2c:	e004      	b.n	8007d38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8007d34:	e000      	b.n	8007d38 <USB_ActivateEndpoint+0x7c>
      break;
 8007d36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	441a      	add	r2, r3
 8007d42:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4413      	add	r3, r2
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	b21b      	sxth	r3, r3
 8007d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	b21a      	sxth	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	b21b      	sxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	7b1b      	ldrb	r3, [r3, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f040 8149 	bne.w	8008040 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	785b      	ldrb	r3, [r3, #1]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 8084 	beq.w	8007ec0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	00da      	lsls	r2, r3, #3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	88db      	ldrh	r3, [r3, #6]
 8007de0:	085b      	lsrs	r3, r3, #1
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	b29a      	uxth	r2, r3
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	81fb      	strh	r3, [r7, #14]
 8007dfa:	89fb      	ldrh	r3, [r7, #14]
 8007dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d01b      	beq.n	8007e3c <USB_ActivateEndpoint+0x180>
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	81bb      	strh	r3, [r7, #12]
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	441a      	add	r2, r3
 8007e26:	89bb      	ldrh	r3, [r7, #12]
 8007e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	78db      	ldrb	r3, [r3, #3]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d020      	beq.n	8007e86 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5a:	813b      	strh	r3, [r7, #8]
 8007e5c:	893b      	ldrh	r3, [r7, #8]
 8007e5e:	f083 0320 	eor.w	r3, r3, #32
 8007e62:	813b      	strh	r3, [r7, #8]
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	441a      	add	r2, r3
 8007e6e:	893b      	ldrh	r3, [r7, #8]
 8007e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	8013      	strh	r3, [r2, #0]
 8007e84:	e27f      	b.n	8008386 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	881b      	ldrh	r3, [r3, #0]
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e9c:	817b      	strh	r3, [r7, #10]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	441a      	add	r2, r3
 8007ea8:	897b      	ldrh	r3, [r7, #10]
 8007eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	8013      	strh	r3, [r2, #0]
 8007ebe:	e262      	b.n	8008386 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	4413      	add	r3, r2
 8007ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	00da      	lsls	r2, r3, #3
 8007eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	88db      	ldrh	r3, [r3, #6]
 8007ee8:	085b      	lsrs	r3, r3, #1
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	4413      	add	r3, r2
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	00da      	lsls	r2, r3, #3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	4413      	add	r3, r2
 8007f12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f16:	623b      	str	r3, [r7, #32]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d112      	bne.n	8007f46 <USB_ActivateEndpoint+0x28a>
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	e02f      	b.n	8007fa6 <USB_ActivateEndpoint+0x2ea>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8007f4c:	d813      	bhi.n	8007f76 <USB_ActivateEndpoint+0x2ba>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	663b      	str	r3, [r7, #96]	; 0x60
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <USB_ActivateEndpoint+0x2ac>
 8007f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f64:	3301      	adds	r3, #1
 8007f66:	663b      	str	r3, [r7, #96]	; 0x60
 8007f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	029b      	lsls	r3, r3, #10
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	801a      	strh	r2, [r3, #0]
 8007f74:	e017      	b.n	8007fa6 <USB_ActivateEndpoint+0x2ea>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d102      	bne.n	8007f90 <USB_ActivateEndpoint+0x2d4>
 8007f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	029b      	lsls	r3, r3, #10
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	83fb      	strh	r3, [r7, #30]
 8007fb4:	8bfb      	ldrh	r3, [r7, #30]
 8007fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01b      	beq.n	8007ff6 <USB_ActivateEndpoint+0x33a>
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	881b      	ldrh	r3, [r3, #0]
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd4:	83bb      	strh	r3, [r7, #28]
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	441a      	add	r2, r3
 8007fe0:	8bbb      	ldrh	r3, [r7, #28]
 8007fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800c:	837b      	strh	r3, [r7, #26]
 800800e:	8b7b      	ldrh	r3, [r7, #26]
 8008010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008014:	837b      	strh	r3, [r7, #26]
 8008016:	8b7b      	ldrh	r3, [r7, #26]
 8008018:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800801c:	837b      	strh	r3, [r7, #26]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	441a      	add	r2, r3
 8008028:	8b7b      	ldrh	r3, [r7, #26]
 800802a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800802e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803a:	b29b      	uxth	r3, r3
 800803c:	8013      	strh	r3, [r2, #0]
 800803e:	e1a2      	b.n	8008386 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008056:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008070:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008078:	b29b      	uxth	r3, r3
 800807a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008086:	b29b      	uxth	r3, r3
 8008088:	461a      	mov	r2, r3
 800808a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800808c:	4413      	add	r3, r2
 800808e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	00da      	lsls	r2, r3, #3
 8008096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008098:	4413      	add	r3, r2
 800809a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800809e:	657b      	str	r3, [r7, #84]	; 0x54
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	891b      	ldrh	r3, [r3, #8]
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	653b      	str	r3, [r7, #80]	; 0x50
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080c0:	4413      	add	r3, r2
 80080c2:	653b      	str	r3, [r7, #80]	; 0x50
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	00da      	lsls	r2, r3, #3
 80080ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080cc:	4413      	add	r3, r2
 80080ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	895b      	ldrh	r3, [r3, #10]
 80080d8:	085b      	lsrs	r3, r3, #1
 80080da:	b29b      	uxth	r3, r3
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	b29a      	uxth	r2, r3
 80080e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	785b      	ldrb	r3, [r3, #1]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f040 8091 	bne.w	8008210 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80080fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80080fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d01b      	beq.n	800813e <USB_ActivateEndpoint+0x482>
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	b29b      	uxth	r3, r3
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	441a      	add	r2, r3
 8008128:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800812a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800812e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800813a:	b29b      	uxth	r3, r3
 800813c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	873b      	strh	r3, [r7, #56]	; 0x38
 800814c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d01b      	beq.n	800818e <USB_ActivateEndpoint+0x4d2>
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4413      	add	r3, r2
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	441a      	add	r2, r3
 8008178:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800817a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008186:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800818a:	b29b      	uxth	r3, r3
 800818c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80081a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80081ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80081b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	441a      	add	r2, r3
 80081f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80081fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]
 800820e:	e0ba      	b.n	8008386 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008220:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01d      	beq.n	8008268 <USB_ActivateEndpoint+0x5ac>
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	4413      	add	r3, r2
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	b29b      	uxth	r3, r3
 800823a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	441a      	add	r2, r3
 8008250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008264:	b29b      	uxth	r3, r3
 8008266:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008278:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800827c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01d      	beq.n	80082c0 <USB_ActivateEndpoint+0x604>
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	441a      	add	r2, r3
 80082a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80082ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082bc:	b29b      	uxth	r3, r3
 80082be:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	78db      	ldrb	r3, [r3, #3]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d024      	beq.n	8008312 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082e6:	f083 0320 	eor.w	r3, r3, #32
 80082ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	441a      	add	r2, r3
 80082f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80082fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	b29b      	uxth	r3, r3
 800830e:	8013      	strh	r3, [r2, #0]
 8008310:	e01d      	b.n	800834e <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008328:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	441a      	add	r2, r3
 8008336:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800833a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800833e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800834a:	b29b      	uxth	r3, r3
 800834c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008364:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	441a      	add	r2, r3
 8008370:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800837a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800837e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008382:	b29b      	uxth	r3, r3
 8008384:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800838a:	4618      	mov	r0, r3
 800838c:	376c      	adds	r7, #108	; 0x6c
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop

08008398 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008398:	b480      	push	{r7}
 800839a:	b08d      	sub	sp, #52	; 0x34
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	7b1b      	ldrb	r3, [r3, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f040 808e 	bne.w	80084c8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	785b      	ldrb	r3, [r3, #1]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d044      	beq.n	800843e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	81bb      	strh	r3, [r7, #12]
 80083c2:	89bb      	ldrh	r3, [r7, #12]
 80083c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d01b      	beq.n	8008404 <USB_DeactivateEndpoint+0x6c>
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e2:	817b      	strh	r3, [r7, #10]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	441a      	add	r2, r3
 80083ee:	897b      	ldrh	r3, [r7, #10]
 80083f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008400:	b29b      	uxth	r3, r3
 8008402:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800841a:	813b      	strh	r3, [r7, #8]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	441a      	add	r2, r3
 8008426:	893b      	ldrh	r3, [r7, #8]
 8008428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	b29b      	uxth	r3, r3
 800843a:	8013      	strh	r3, [r2, #0]
 800843c:	e192      	b.n	8008764 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	827b      	strh	r3, [r7, #18]
 800844c:	8a7b      	ldrh	r3, [r7, #18]
 800844e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d01b      	beq.n	800848e <USB_DeactivateEndpoint+0xf6>
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	881b      	ldrh	r3, [r3, #0]
 8008462:	b29b      	uxth	r3, r3
 8008464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	823b      	strh	r3, [r7, #16]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	441a      	add	r2, r3
 8008478:	8a3b      	ldrh	r3, [r7, #16]
 800847a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800848a:	b29b      	uxth	r3, r3
 800848c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29b      	uxth	r3, r3
 800849c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a4:	81fb      	strh	r3, [r7, #14]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	441a      	add	r2, r3
 80084b0:	89fb      	ldrh	r3, [r7, #14]
 80084b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	8013      	strh	r3, [r2, #0]
 80084c6:	e14d      	b.n	8008764 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	785b      	ldrb	r3, [r3, #1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 80a5 	bne.w	800861c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	843b      	strh	r3, [r7, #32]
 80084e0:	8c3b      	ldrh	r3, [r7, #32]
 80084e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d01b      	beq.n	8008522 <USB_DeactivateEndpoint+0x18a>
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008500:	83fb      	strh	r3, [r7, #30]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	441a      	add	r2, r3
 800850c:	8bfb      	ldrh	r3, [r7, #30]
 800850e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008516:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800851a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800851e:	b29b      	uxth	r3, r3
 8008520:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	83bb      	strh	r3, [r7, #28]
 8008530:	8bbb      	ldrh	r3, [r7, #28]
 8008532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01b      	beq.n	8008572 <USB_DeactivateEndpoint+0x1da>
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	b29b      	uxth	r3, r3
 8008548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800854c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008550:	837b      	strh	r3, [r7, #26]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	8b7b      	ldrh	r3, [r7, #26]
 800855e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008566:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800856e:	b29b      	uxth	r3, r3
 8008570:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	881b      	ldrh	r3, [r3, #0]
 800857e:	b29b      	uxth	r3, r3
 8008580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008588:	833b      	strh	r3, [r7, #24]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	441a      	add	r2, r3
 8008594:	8b3b      	ldrh	r3, [r7, #24]
 8008596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800859a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800859e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	82fb      	strh	r3, [r7, #22]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	8afb      	ldrh	r3, [r7, #22]
 80085ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f8:	82bb      	strh	r3, [r7, #20]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	441a      	add	r2, r3
 8008604:	8abb      	ldrh	r3, [r7, #20]
 8008606:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800860a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800860e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008616:	b29b      	uxth	r3, r3
 8008618:	8013      	strh	r3, [r2, #0]
 800861a:	e0a3      	b.n	8008764 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4413      	add	r3, r2
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800862a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800862c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01b      	beq.n	800866c <USB_DeactivateEndpoint+0x2d4>
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	4413      	add	r3, r2
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29b      	uxth	r3, r3
 8008642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800864a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008660:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008668:	b29b      	uxth	r3, r3
 800866a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	857b      	strh	r3, [r7, #42]	; 0x2a
 800867a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800867c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01b      	beq.n	80086bc <USB_DeactivateEndpoint+0x324>
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869a:	853b      	strh	r3, [r7, #40]	; 0x28
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80086e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80086ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	847b      	strh	r3, [r7, #34]	; 0x22
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	441a      	add	r2, r3
 800874e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008760:	b29b      	uxth	r3, r3
 8008762:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3734      	adds	r7, #52	; 0x34
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b0c4      	sub	sp, #272	; 0x110
 8008776:	af00      	add	r7, sp, #0
 8008778:	1d3b      	adds	r3, r7, #4
 800877a:	6018      	str	r0, [r3, #0]
 800877c:	463b      	mov	r3, r7
 800877e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008780:	463b      	mov	r3, r7
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b01      	cmp	r3, #1
 8008788:	f040 8566 	bne.w	8009258 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800878c:	463b      	mov	r3, r7
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	699a      	ldr	r2, [r3, #24]
 8008792:	463b      	mov	r3, r7
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	429a      	cmp	r2, r3
 800879a:	d905      	bls.n	80087a8 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800879c:	463b      	mov	r3, r7
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80087a6:	e004      	b.n	80087b2 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80087a8:	463b      	mov	r3, r7
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80087b2:	463b      	mov	r3, r7
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	7b1b      	ldrb	r3, [r3, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d12c      	bne.n	8008816 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80087bc:	463b      	mov	r3, r7
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6959      	ldr	r1, [r3, #20]
 80087c2:	463b      	mov	r3, r7
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	88da      	ldrh	r2, [r3, #6]
 80087c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	1d38      	adds	r0, r7, #4
 80087d0:	6800      	ldr	r0, [r0, #0]
 80087d2:	f001 fa58 	bl	8009c86 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80087d6:	1d3b      	adds	r3, r7, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	617b      	str	r3, [r7, #20]
 80087dc:	1d3b      	adds	r3, r7, #4
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	461a      	mov	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	4413      	add	r3, r2
 80087ec:	617b      	str	r3, [r7, #20]
 80087ee:	463b      	mov	r3, r7
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	00da      	lsls	r2, r3, #3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	4413      	add	r3, r2
 80087fa:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80087fe:	f107 0310 	add.w	r3, r7, #16
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008808:	b29a      	uxth	r2, r3
 800880a:	f107 0310 	add.w	r3, r7, #16
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	801a      	strh	r2, [r3, #0]
 8008812:	f000 bcec 	b.w	80091ee <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008816:	463b      	mov	r3, r7
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	2b02      	cmp	r3, #2
 800881e:	f040 8356 	bne.w	8008ece <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008822:	463b      	mov	r3, r7
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6a1a      	ldr	r2, [r3, #32]
 8008828:	463b      	mov	r3, r7
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	429a      	cmp	r2, r3
 8008830:	f240 82fa 	bls.w	8008e28 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8008834:	1d3b      	adds	r3, r7, #4
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	463b      	mov	r3, r7
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	b29b      	uxth	r3, r3
 8008846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8008852:	1d3b      	adds	r3, r7, #4
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	463b      	mov	r3, r7
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	441a      	add	r2, r3
 8008860:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8008864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800886c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008874:	b29b      	uxth	r3, r3
 8008876:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8008878:	463b      	mov	r3, r7
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008882:	463b      	mov	r3, r7
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800888c:	1ad2      	subs	r2, r2, r3
 800888e:	463b      	mov	r3, r7
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008894:	1d3b      	adds	r3, r7, #4
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	463b      	mov	r3, r7
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4413      	add	r3, r2
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 815e 	beq.w	8008b6c <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80088b0:	1d3b      	adds	r3, r7, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	637b      	str	r3, [r7, #52]	; 0x34
 80088b6:	463b      	mov	r3, r7
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d164      	bne.n	800898a <USB_EPStartXfer+0x218>
 80088c0:	1d3b      	adds	r3, r7, #4
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088c6:	1d3b      	adds	r3, r7, #4
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	461a      	mov	r2, r3
 80088d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d4:	4413      	add	r3, r2
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d8:	463b      	mov	r3, r7
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	00da      	lsls	r2, r3, #3
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	4413      	add	r3, r2
 80088e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d112      	bne.n	8008918 <USB_EPStartXfer+0x1a6>
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800890c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008910:	b29a      	uxth	r2, r3
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	801a      	strh	r2, [r3, #0]
 8008916:	e054      	b.n	80089c2 <USB_EPStartXfer+0x250>
 8008918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800891c:	2b3e      	cmp	r3, #62	; 0x3e
 800891e:	d817      	bhi.n	8008950 <USB_EPStartXfer+0x1de>
 8008920:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800892a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d004      	beq.n	8008940 <USB_EPStartXfer+0x1ce>
 8008936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800893a:	3301      	adds	r3, #1
 800893c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29a      	uxth	r2, r3
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	801a      	strh	r2, [r3, #0]
 800894e:	e038      	b.n	80089c2 <USB_EPStartXfer+0x250>
 8008950:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008954:	095b      	lsrs	r3, r3, #5
 8008956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800895a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <USB_EPStartXfer+0x1fe>
 8008966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896a:	3b01      	subs	r3, #1
 800896c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008974:	b29b      	uxth	r3, r3
 8008976:	029b      	lsls	r3, r3, #10
 8008978:	b29b      	uxth	r3, r3
 800897a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800897e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008982:	b29a      	uxth	r2, r3
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	801a      	strh	r2, [r3, #0]
 8008988:	e01b      	b.n	80089c2 <USB_EPStartXfer+0x250>
 800898a:	463b      	mov	r3, r7
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d116      	bne.n	80089c2 <USB_EPStartXfer+0x250>
 8008994:	1d3b      	adds	r3, r7, #4
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800899c:	b29b      	uxth	r3, r3
 800899e:	461a      	mov	r2, r3
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	4413      	add	r3, r2
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
 80089a6:	463b      	mov	r3, r7
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	00da      	lsls	r2, r3, #3
 80089ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b0:	4413      	add	r3, r2
 80089b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80089b6:	633b      	str	r3, [r7, #48]	; 0x30
 80089b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089bc:	b29a      	uxth	r2, r3
 80089be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089c2:	463b      	mov	r3, r7
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	895b      	ldrh	r3, [r3, #10]
 80089c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089cc:	463b      	mov	r3, r7
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6959      	ldr	r1, [r3, #20]
 80089d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80089dc:	1d38      	adds	r0, r7, #4
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	f001 f951 	bl	8009c86 <USB_WritePMA>
            ep->xfer_buff += len;
 80089e4:	463b      	mov	r3, r7
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695a      	ldr	r2, [r3, #20]
 80089ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80089ee:	441a      	add	r2, r3
 80089f0:	463b      	mov	r3, r7
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089f6:	463b      	mov	r3, r7
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	463b      	mov	r3, r7
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d90e      	bls.n	8008a24 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8008a06:	463b      	mov	r3, r7
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008a10:	463b      	mov	r3, r7
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a1a:	1ad2      	subs	r2, r2, r3
 8008a1c:	463b      	mov	r3, r7
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	621a      	str	r2, [r3, #32]
 8008a22:	e008      	b.n	8008a36 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a24:	463b      	mov	r3, r7
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6a1b      	ldr	r3, [r3, #32]
 8008a2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008a2e:	463b      	mov	r3, r7
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a36:	463b      	mov	r3, r7
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d164      	bne.n	8008b0a <USB_EPStartXfer+0x398>
 8008a40:	1d3b      	adds	r3, r7, #4
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	1d3b      	adds	r3, r7, #4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	61fb      	str	r3, [r7, #28]
 8008a58:	463b      	mov	r3, r7
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	00da      	lsls	r2, r3, #3
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d112      	bne.n	8008a98 <USB_EPStartXfer+0x326>
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	801a      	strh	r2, [r3, #0]
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	e057      	b.n	8008b48 <USB_EPStartXfer+0x3d6>
 8008a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008a9c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a9e:	d817      	bhi.n	8008ad0 <USB_EPStartXfer+0x35e>
 8008aa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008aaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d004      	beq.n	8008ac0 <USB_EPStartXfer+0x34e>
 8008ab6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008aba:	3301      	adds	r3, #1
 8008abc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ac0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	029b      	lsls	r3, r3, #10
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	801a      	strh	r2, [r3, #0]
 8008ace:	e03b      	b.n	8008b48 <USB_EPStartXfer+0x3d6>
 8008ad0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ad4:	095b      	lsrs	r3, r3, #5
 8008ad6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ada:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <USB_EPStartXfer+0x37e>
 8008ae6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008aea:	3b01      	subs	r3, #1
 8008aec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	029b      	lsls	r3, r3, #10
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	e01e      	b.n	8008b48 <USB_EPStartXfer+0x3d6>
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	785b      	ldrb	r3, [r3, #1]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d119      	bne.n	8008b48 <USB_EPStartXfer+0x3d6>
 8008b14:	1d3b      	adds	r3, r7, #4
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
 8008b1a:	1d3b      	adds	r3, r7, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	4413      	add	r3, r2
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	00da      	lsls	r2, r3, #3
 8008b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b36:	4413      	add	r3, r2
 8008b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b3c:	623b      	str	r3, [r7, #32]
 8008b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b48:	463b      	mov	r3, r7
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	891b      	ldrh	r3, [r3, #8]
 8008b4e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b52:	463b      	mov	r3, r7
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6959      	ldr	r1, [r3, #20]
 8008b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008b62:	1d38      	adds	r0, r7, #4
 8008b64:	6800      	ldr	r0, [r0, #0]
 8008b66:	f001 f88e 	bl	8009c86 <USB_WritePMA>
 8008b6a:	e340      	b.n	80091ee <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b6c:	463b      	mov	r3, r7
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d164      	bne.n	8008c40 <USB_EPStartXfer+0x4ce>
 8008b76:	1d3b      	adds	r3, r7, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b7c:	1d3b      	adds	r3, r7, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8a:	4413      	add	r3, r2
 8008b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b8e:	463b      	mov	r3, r7
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	00da      	lsls	r2, r3, #3
 8008b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b98:	4413      	add	r3, r2
 8008b9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d112      	bne.n	8008bce <USB_EPStartXfer+0x45c>
 8008ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bca:	801a      	strh	r2, [r3, #0]
 8008bcc:	e057      	b.n	8008c7e <USB_EPStartXfer+0x50c>
 8008bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8008bd4:	d817      	bhi.n	8008c06 <USB_EPStartXfer+0x494>
 8008bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008be0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <USB_EPStartXfer+0x484>
 8008bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	029b      	lsls	r3, r3, #10
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c02:	801a      	strh	r2, [r3, #0]
 8008c04:	e03b      	b.n	8008c7e <USB_EPStartXfer+0x50c>
 8008c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c14:	f003 031f 	and.w	r3, r3, #31
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d104      	bne.n	8008c26 <USB_EPStartXfer+0x4b4>
 8008c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c20:	3b01      	subs	r3, #1
 8008c22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	029b      	lsls	r3, r3, #10
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	e01e      	b.n	8008c7e <USB_EPStartXfer+0x50c>
 8008c40:	463b      	mov	r3, r7
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d119      	bne.n	8008c7e <USB_EPStartXfer+0x50c>
 8008c4a:	1d3b      	adds	r3, r7, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	657b      	str	r3, [r7, #84]	; 0x54
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c5e:	4413      	add	r3, r2
 8008c60:	657b      	str	r3, [r7, #84]	; 0x54
 8008c62:	463b      	mov	r3, r7
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	00da      	lsls	r2, r3, #3
 8008c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c72:	653b      	str	r3, [r7, #80]	; 0x50
 8008c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008c7e:	463b      	mov	r3, r7
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	891b      	ldrh	r3, [r3, #8]
 8008c84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c88:	463b      	mov	r3, r7
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6959      	ldr	r1, [r3, #20]
 8008c8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008c98:	1d38      	adds	r0, r7, #4
 8008c9a:	6800      	ldr	r0, [r0, #0]
 8008c9c:	f000 fff3 	bl	8009c86 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ca0:	463b      	mov	r3, r7
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008caa:	441a      	add	r2, r3
 8008cac:	463b      	mov	r3, r7
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008cb2:	463b      	mov	r3, r7
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	463b      	mov	r3, r7
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d90e      	bls.n	8008ce0 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8008ccc:	463b      	mov	r3, r7
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a1a      	ldr	r2, [r3, #32]
 8008cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008cd6:	1ad2      	subs	r2, r2, r3
 8008cd8:	463b      	mov	r3, r7
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	621a      	str	r2, [r3, #32]
 8008cde:	e008      	b.n	8008cf2 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ce0:	463b      	mov	r3, r7
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8008cea:	463b      	mov	r3, r7
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d164      	bne.n	8008dcc <USB_EPStartXfer+0x65a>
 8008d02:	1d3b      	adds	r3, r7, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d08:	1d3b      	adds	r3, r7, #4
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d16:	4413      	add	r3, r2
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	00da      	lsls	r2, r3, #3
 8008d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d24:	4413      	add	r3, r2
 8008d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d112      	bne.n	8008d5a <USB_EPStartXfer+0x5e8>
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	881b      	ldrh	r3, [r3, #0]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	801a      	strh	r2, [r3, #0]
 8008d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d56:	801a      	strh	r2, [r3, #0]
 8008d58:	e054      	b.n	8008e04 <USB_EPStartXfer+0x692>
 8008d5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d60:	d817      	bhi.n	8008d92 <USB_EPStartXfer+0x620>
 8008d62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d66:	085b      	lsrs	r3, r3, #1
 8008d68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d004      	beq.n	8008d82 <USB_EPStartXfer+0x610>
 8008d78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	029b      	lsls	r3, r3, #10
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	e038      	b.n	8008e04 <USB_EPStartXfer+0x692>
 8008d92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008da0:	f003 031f 	and.w	r3, r3, #31
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USB_EPStartXfer+0x640>
 8008da8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008dac:	3b01      	subs	r3, #1
 8008dae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	029b      	lsls	r3, r3, #10
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e01b      	b.n	8008e04 <USB_EPStartXfer+0x692>
 8008dcc:	463b      	mov	r3, r7
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d116      	bne.n	8008e04 <USB_EPStartXfer+0x692>
 8008dd6:	1d3b      	adds	r3, r7, #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de4:	4413      	add	r3, r2
 8008de6:	647b      	str	r3, [r7, #68]	; 0x44
 8008de8:	463b      	mov	r3, r7
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	00da      	lsls	r2, r3, #3
 8008df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df2:	4413      	add	r3, r2
 8008df4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008df8:	643b      	str	r3, [r7, #64]	; 0x40
 8008dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e04:	463b      	mov	r3, r7
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	895b      	ldrh	r3, [r3, #10]
 8008e0a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e0e:	463b      	mov	r3, r7
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	6959      	ldr	r1, [r3, #20]
 8008e14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008e1e:	1d38      	adds	r0, r7, #4
 8008e20:	6800      	ldr	r0, [r0, #0]
 8008e22:	f000 ff30 	bl	8009c86 <USB_WritePMA>
 8008e26:	e1e2      	b.n	80091ee <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8008e28:	463b      	mov	r3, r7
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8008e32:	1d3b      	adds	r3, r7, #4
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	463b      	mov	r3, r7
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e4c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008e50:	1d3b      	adds	r3, r7, #4
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	463b      	mov	r3, r7
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	441a      	add	r2, r3
 8008e5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008e76:	1d3b      	adds	r3, r7, #4
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e7c:	1d3b      	adds	r3, r7, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	461a      	mov	r2, r3
 8008e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e8a:	4413      	add	r3, r2
 8008e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e8e:	463b      	mov	r3, r7
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	00da      	lsls	r2, r3, #3
 8008e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e98:	4413      	add	r3, r2
 8008e9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ea8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008eaa:	463b      	mov	r3, r7
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	891b      	ldrh	r3, [r3, #8]
 8008eb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	6959      	ldr	r1, [r3, #20]
 8008eba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8008ec4:	1d38      	adds	r0, r7, #4
 8008ec6:	6800      	ldr	r0, [r0, #0]
 8008ec8:	f000 fedd 	bl	8009c86 <USB_WritePMA>
 8008ecc:	e18f      	b.n	80091ee <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ece:	1d3b      	adds	r3, r7, #4
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 808f 	beq.w	8009008 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008eea:	1d3b      	adds	r3, r7, #4
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d164      	bne.n	8008fc4 <USB_EPStartXfer+0x852>
 8008efa:	1d3b      	adds	r3, r7, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	673b      	str	r3, [r7, #112]	; 0x70
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f0e:	4413      	add	r3, r2
 8008f10:	673b      	str	r3, [r7, #112]	; 0x70
 8008f12:	463b      	mov	r3, r7
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	00da      	lsls	r2, r3, #3
 8008f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d112      	bne.n	8008f52 <USB_EPStartXfer+0x7e0>
 8008f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3a:	801a      	strh	r2, [r3, #0]
 8008f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3e:	881b      	ldrh	r3, [r3, #0]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	e054      	b.n	8008ffc <USB_EPStartXfer+0x88a>
 8008f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f56:	2b3e      	cmp	r3, #62	; 0x3e
 8008f58:	d817      	bhi.n	8008f8a <USB_EPStartXfer+0x818>
 8008f5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f5e:	085b      	lsrs	r3, r3, #1
 8008f60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <USB_EPStartXfer+0x808>
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f74:	3301      	adds	r3, #1
 8008f76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	029b      	lsls	r3, r3, #10
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f86:	801a      	strh	r2, [r3, #0]
 8008f88:	e038      	b.n	8008ffc <USB_EPStartXfer+0x88a>
 8008f8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008f94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <USB_EPStartXfer+0x838>
 8008fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa4:	3b01      	subs	r3, #1
 8008fa6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	029b      	lsls	r3, r3, #10
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc0:	801a      	strh	r2, [r3, #0]
 8008fc2:	e01b      	b.n	8008ffc <USB_EPStartXfer+0x88a>
 8008fc4:	463b      	mov	r3, r7
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	785b      	ldrb	r3, [r3, #1]
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d116      	bne.n	8008ffc <USB_EPStartXfer+0x88a>
 8008fce:	1d3b      	adds	r3, r7, #4
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	461a      	mov	r2, r3
 8008fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fdc:	4413      	add	r3, r2
 8008fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fe0:	463b      	mov	r3, r7
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	00da      	lsls	r2, r3, #3
 8008fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fea:	4413      	add	r3, r2
 8008fec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ff0:	677b      	str	r3, [r7, #116]	; 0x74
 8008ff2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ffa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008ffc:	463b      	mov	r3, r7
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	895b      	ldrh	r3, [r3, #10]
 8009002:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8009006:	e097      	b.n	8009138 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009008:	463b      	mov	r3, r7
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	785b      	ldrb	r3, [r3, #1]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d168      	bne.n	80090e4 <USB_EPStartXfer+0x972>
 8009012:	1d3b      	adds	r3, r7, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800901a:	1d3b      	adds	r3, r7, #4
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009022:	b29b      	uxth	r3, r3
 8009024:	461a      	mov	r2, r3
 8009026:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800902a:	4413      	add	r3, r2
 800902c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009030:	463b      	mov	r3, r7
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	00da      	lsls	r2, r3, #3
 8009038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800903c:	4413      	add	r3, r2
 800903e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009042:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009048:	2b00      	cmp	r3, #0
 800904a:	d112      	bne.n	8009072 <USB_EPStartXfer+0x900>
 800904c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009056:	b29a      	uxth	r2, r3
 8009058:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	b29b      	uxth	r3, r3
 8009062:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009066:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906a:	b29a      	uxth	r2, r3
 800906c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	e05d      	b.n	800912e <USB_EPStartXfer+0x9bc>
 8009072:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009076:	2b3e      	cmp	r3, #62	; 0x3e
 8009078:	d817      	bhi.n	80090aa <USB_EPStartXfer+0x938>
 800907a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009084:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <USB_EPStartXfer+0x928>
 8009090:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009094:	3301      	adds	r3, #1
 8009096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800909a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800909e:	b29b      	uxth	r3, r3
 80090a0:	029b      	lsls	r3, r3, #10
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090a6:	801a      	strh	r2, [r3, #0]
 80090a8:	e041      	b.n	800912e <USB_EPStartXfer+0x9bc>
 80090aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d104      	bne.n	80090ca <USB_EPStartXfer+0x958>
 80090c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80090c4:	3b01      	subs	r3, #1
 80090c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	029b      	lsls	r3, r3, #10
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090dc:	b29a      	uxth	r2, r3
 80090de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	e024      	b.n	800912e <USB_EPStartXfer+0x9bc>
 80090e4:	463b      	mov	r3, r7
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d11f      	bne.n	800912e <USB_EPStartXfer+0x9bc>
 80090ee:	1d3b      	adds	r3, r7, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090f6:	1d3b      	adds	r3, r7, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090fe:	b29b      	uxth	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009106:	4413      	add	r3, r2
 8009108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800910c:	463b      	mov	r3, r7
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	00da      	lsls	r2, r3, #3
 8009114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009118:	4413      	add	r3, r2
 800911a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800911e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009126:	b29a      	uxth	r2, r3
 8009128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800912c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800912e:	463b      	mov	r3, r7
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	891b      	ldrh	r3, [r3, #8]
 8009134:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009138:	463b      	mov	r3, r7
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6959      	ldr	r1, [r3, #20]
 800913e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009142:	b29b      	uxth	r3, r3
 8009144:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009148:	1d38      	adds	r0, r7, #4
 800914a:	6800      	ldr	r0, [r0, #0]
 800914c:	f000 fd9b 	bl	8009c86 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009150:	463b      	mov	r3, r7
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	785b      	ldrb	r3, [r3, #1]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d122      	bne.n	80091a0 <USB_EPStartXfer+0xa2e>
 800915a:	1d3b      	adds	r3, r7, #4
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	463b      	mov	r3, r7
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009174:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009178:	1d3b      	adds	r3, r7, #4
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	463b      	mov	r3, r7
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	441a      	add	r2, r3
 8009186:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800918a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800919a:	b29b      	uxth	r3, r3
 800919c:	8013      	strh	r3, [r2, #0]
 800919e:	e026      	b.n	80091ee <USB_EPStartXfer+0xa7c>
 80091a0:	463b      	mov	r3, r7
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d121      	bne.n	80091ee <USB_EPStartXfer+0xa7c>
 80091aa:	1d3b      	adds	r3, r7, #4
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	463b      	mov	r3, r7
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	881b      	ldrh	r3, [r3, #0]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091c4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	463b      	mov	r3, r7
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	441a      	add	r2, r3
 80091d6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80091da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80091ee:	1d3b      	adds	r3, r7, #4
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	463b      	mov	r3, r7
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	f107 020e 	add.w	r2, r7, #14
 8009204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009208:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800920c:	8013      	strh	r3, [r2, #0]
 800920e:	f107 030e 	add.w	r3, r7, #14
 8009212:	f107 020e 	add.w	r2, r7, #14
 8009216:	8812      	ldrh	r2, [r2, #0]
 8009218:	f082 0210 	eor.w	r2, r2, #16
 800921c:	801a      	strh	r2, [r3, #0]
 800921e:	f107 030e 	add.w	r3, r7, #14
 8009222:	f107 020e 	add.w	r2, r7, #14
 8009226:	8812      	ldrh	r2, [r2, #0]
 8009228:	f082 0220 	eor.w	r2, r2, #32
 800922c:	801a      	strh	r2, [r3, #0]
 800922e:	1d3b      	adds	r3, r7, #4
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	463b      	mov	r3, r7
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	441a      	add	r2, r3
 800923c:	f107 030e 	add.w	r3, r7, #14
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800924a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800924e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009252:	b29b      	uxth	r3, r3
 8009254:	8013      	strh	r3, [r2, #0]
 8009256:	e3b5      	b.n	80099c4 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009258:	463b      	mov	r3, r7
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	7b1b      	ldrb	r3, [r3, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 8090 	bne.w	8009384 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8009264:	463b      	mov	r3, r7
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	699a      	ldr	r2, [r3, #24]
 800926a:	463b      	mov	r3, r7
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	429a      	cmp	r2, r3
 8009272:	d90e      	bls.n	8009292 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8009274:	463b      	mov	r3, r7
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800927e:	463b      	mov	r3, r7
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	699a      	ldr	r2, [r3, #24]
 8009284:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	463b      	mov	r3, r7
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	619a      	str	r2, [r3, #24]
 8009290:	e008      	b.n	80092a4 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8009292:	463b      	mov	r3, r7
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800929c:	463b      	mov	r3, r7
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2200      	movs	r2, #0
 80092a2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80092a4:	1d3b      	adds	r3, r7, #4
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092ac:	1d3b      	adds	r3, r7, #4
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092bc:	4413      	add	r3, r2
 80092be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092c2:	463b      	mov	r3, r7
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	00da      	lsls	r2, r3, #3
 80092ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092ce:	4413      	add	r3, r2
 80092d0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80092d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80092d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d116      	bne.n	800930e <USB_EPStartXfer+0xb9c>
 80092e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009304:	b29a      	uxth	r2, r3
 8009306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800930a:	801a      	strh	r2, [r3, #0]
 800930c:	e32c      	b.n	8009968 <USB_EPStartXfer+0x11f6>
 800930e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009312:	2b3e      	cmp	r3, #62	; 0x3e
 8009314:	d818      	bhi.n	8009348 <USB_EPStartXfer+0xbd6>
 8009316:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009320:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <USB_EPStartXfer+0xbc4>
 800932c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009330:	3301      	adds	r3, #1
 8009332:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009336:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29a      	uxth	r2, r3
 8009340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009344:	801a      	strh	r2, [r3, #0]
 8009346:	e30f      	b.n	8009968 <USB_EPStartXfer+0x11f6>
 8009348:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009352:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009356:	f003 031f 	and.w	r3, r3, #31
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <USB_EPStartXfer+0xbf6>
 800935e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009362:	3b01      	subs	r3, #1
 8009364:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009368:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800936c:	b29b      	uxth	r3, r3
 800936e:	029b      	lsls	r3, r3, #10
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	e2f1      	b.n	8009968 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8009384:	463b      	mov	r3, r7
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	78db      	ldrb	r3, [r3, #3]
 800938a:	2b02      	cmp	r3, #2
 800938c:	f040 818f 	bne.w	80096ae <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009390:	463b      	mov	r3, r7
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	785b      	ldrb	r3, [r3, #1]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d175      	bne.n	8009486 <USB_EPStartXfer+0xd14>
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093a2:	1d3b      	adds	r3, r7, #4
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	461a      	mov	r2, r3
 80093ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093b2:	4413      	add	r3, r2
 80093b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b8:	463b      	mov	r3, r7
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	00da      	lsls	r2, r3, #3
 80093c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80093c4:	4413      	add	r3, r2
 80093c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80093ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093ce:	463b      	mov	r3, r7
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d116      	bne.n	8009406 <USB_EPStartXfer+0xc94>
 80093d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093dc:	881b      	ldrh	r3, [r3, #0]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e065      	b.n	80094d2 <USB_EPStartXfer+0xd60>
 8009406:	463b      	mov	r3, r7
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	2b3e      	cmp	r3, #62	; 0x3e
 800940e:	d81a      	bhi.n	8009446 <USB_EPStartXfer+0xcd4>
 8009410:	463b      	mov	r3, r7
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	085b      	lsrs	r3, r3, #1
 8009418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800941c:	463b      	mov	r3, r7
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <USB_EPStartXfer+0xcc2>
 800942a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800942e:	3301      	adds	r3, #1
 8009430:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009438:	b29b      	uxth	r3, r3
 800943a:	029b      	lsls	r3, r3, #10
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009442:	801a      	strh	r2, [r3, #0]
 8009444:	e045      	b.n	80094d2 <USB_EPStartXfer+0xd60>
 8009446:	463b      	mov	r3, r7
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009452:	463b      	mov	r3, r7
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f003 031f 	and.w	r3, r3, #31
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <USB_EPStartXfer+0xcf8>
 8009460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009464:	3b01      	subs	r3, #1
 8009466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800946a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800946e:	b29b      	uxth	r3, r3
 8009470:	029b      	lsls	r3, r3, #10
 8009472:	b29b      	uxth	r3, r3
 8009474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800947c:	b29a      	uxth	r2, r3
 800947e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	e025      	b.n	80094d2 <USB_EPStartXfer+0xd60>
 8009486:	463b      	mov	r3, r7
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	785b      	ldrb	r3, [r3, #1]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d120      	bne.n	80094d2 <USB_EPStartXfer+0xd60>
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009498:	1d3b      	adds	r3, r7, #4
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	461a      	mov	r2, r3
 80094a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094a8:	4413      	add	r3, r2
 80094aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094ae:	463b      	mov	r3, r7
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	00da      	lsls	r2, r3, #3
 80094b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094ba:	4413      	add	r3, r2
 80094bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094c4:	463b      	mov	r3, r7
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094d0:	801a      	strh	r2, [r3, #0]
 80094d2:	1d3b      	adds	r3, r7, #4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80094da:	463b      	mov	r3, r7
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d175      	bne.n	80095d0 <USB_EPStartXfer+0xe5e>
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094ec:	1d3b      	adds	r3, r7, #4
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	461a      	mov	r2, r3
 80094f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80094fc:	4413      	add	r3, r2
 80094fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009502:	463b      	mov	r3, r7
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	00da      	lsls	r2, r3, #3
 800950a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800950e:	4413      	add	r3, r2
 8009510:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009518:	463b      	mov	r3, r7
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d116      	bne.n	8009550 <USB_EPStartXfer+0xdde>
 8009522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29b      	uxth	r3, r3
 800952a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800952e:	b29a      	uxth	r2, r3
 8009530:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009534:	801a      	strh	r2, [r3, #0]
 8009536:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009546:	b29a      	uxth	r2, r3
 8009548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	e061      	b.n	8009614 <USB_EPStartXfer+0xea2>
 8009550:	463b      	mov	r3, r7
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b3e      	cmp	r3, #62	; 0x3e
 8009558:	d81a      	bhi.n	8009590 <USB_EPStartXfer+0xe1e>
 800955a:	463b      	mov	r3, r7
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	085b      	lsrs	r3, r3, #1
 8009562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009566:	463b      	mov	r3, r7
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <USB_EPStartXfer+0xe0c>
 8009574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009578:	3301      	adds	r3, #1
 800957a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800957e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009582:	b29b      	uxth	r3, r3
 8009584:	029b      	lsls	r3, r3, #10
 8009586:	b29a      	uxth	r2, r3
 8009588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	e041      	b.n	8009614 <USB_EPStartXfer+0xea2>
 8009590:	463b      	mov	r3, r7
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	095b      	lsrs	r3, r3, #5
 8009598:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800959c:	463b      	mov	r3, r7
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 031f 	and.w	r3, r3, #31
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <USB_EPStartXfer+0xe42>
 80095aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095ae:	3b01      	subs	r3, #1
 80095b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80095b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	029b      	lsls	r3, r3, #10
 80095bc:	b29b      	uxth	r3, r3
 80095be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095cc:	801a      	strh	r2, [r3, #0]
 80095ce:	e021      	b.n	8009614 <USB_EPStartXfer+0xea2>
 80095d0:	463b      	mov	r3, r7
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	785b      	ldrb	r3, [r3, #1]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d11c      	bne.n	8009614 <USB_EPStartXfer+0xea2>
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ea:	4413      	add	r3, r2
 80095ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095f0:	463b      	mov	r3, r7
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095fc:	4413      	add	r3, r2
 80095fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009606:	463b      	mov	r3, r7
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	b29a      	uxth	r2, r3
 800960e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009612:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8009614:	463b      	mov	r3, r7
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 81a4 	beq.w	8009968 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009620:	1d3b      	adds	r3, r7, #4
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	463b      	mov	r3, r7
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009634:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009638:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d005      	beq.n	800964c <USB_EPStartXfer+0xeda>
 8009640:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800964c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009654:	2b00      	cmp	r3, #0
 8009656:	f040 8187 	bne.w	8009968 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800965a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800965e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8180 	bne.w	8009968 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009668:	1d3b      	adds	r3, r7, #4
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	463b      	mov	r3, r7
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009682:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8009686:	1d3b      	adds	r3, r7, #4
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	463b      	mov	r3, r7
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	441a      	add	r2, r3
 8009694:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8009698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800969c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	8013      	strh	r3, [r2, #0]
 80096ac:	e15c      	b.n	8009968 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096ae:	463b      	mov	r3, r7
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	78db      	ldrb	r3, [r3, #3]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	f040 8155 	bne.w	8009964 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 80096ba:	463b      	mov	r3, r7
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699a      	ldr	r2, [r3, #24]
 80096c0:	463b      	mov	r3, r7
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d90e      	bls.n	80096e8 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 80096ca:	463b      	mov	r3, r7
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 80096d4:	463b      	mov	r3, r7
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	463b      	mov	r3, r7
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	619a      	str	r2, [r3, #24]
 80096e6:	e008      	b.n	80096fa <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80096e8:	463b      	mov	r3, r7
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	699b      	ldr	r3, [r3, #24]
 80096ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80096f2:	463b      	mov	r3, r7
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2200      	movs	r2, #0
 80096f8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80096fa:	463b      	mov	r3, r7
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d16f      	bne.n	80097e4 <USB_EPStartXfer+0x1072>
 8009704:	1d3b      	adds	r3, r7, #4
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800970c:	1d3b      	adds	r3, r7, #4
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009714:	b29b      	uxth	r3, r3
 8009716:	461a      	mov	r2, r3
 8009718:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800971c:	4413      	add	r3, r2
 800971e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	00da      	lsls	r2, r3, #3
 800972a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800972e:	4413      	add	r3, r2
 8009730:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009734:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009738:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800973c:	2b00      	cmp	r3, #0
 800973e:	d116      	bne.n	800976e <USB_EPStartXfer+0xffc>
 8009740:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009744:	881b      	ldrh	r3, [r3, #0]
 8009746:	b29b      	uxth	r3, r3
 8009748:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800974c:	b29a      	uxth	r2, r3
 800974e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009752:	801a      	strh	r2, [r3, #0]
 8009754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009758:	881b      	ldrh	r3, [r3, #0]
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009764:	b29a      	uxth	r2, r3
 8009766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	e05f      	b.n	800982e <USB_EPStartXfer+0x10bc>
 800976e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009772:	2b3e      	cmp	r3, #62	; 0x3e
 8009774:	d818      	bhi.n	80097a8 <USB_EPStartXfer+0x1036>
 8009776:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009780:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <USB_EPStartXfer+0x1024>
 800978c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009790:	3301      	adds	r3, #1
 8009792:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29a      	uxth	r2, r3
 80097a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097a4:	801a      	strh	r2, [r3, #0]
 80097a6:	e042      	b.n	800982e <USB_EPStartXfer+0x10bc>
 80097a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097ac:	095b      	lsrs	r3, r3, #5
 80097ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097b6:	f003 031f 	and.w	r3, r3, #31
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d104      	bne.n	80097c8 <USB_EPStartXfer+0x1056>
 80097be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c2:	3b01      	subs	r3, #1
 80097c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	029b      	lsls	r3, r3, #10
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097da:	b29a      	uxth	r2, r3
 80097dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097e0:	801a      	strh	r2, [r3, #0]
 80097e2:	e024      	b.n	800982e <USB_EPStartXfer+0x10bc>
 80097e4:	463b      	mov	r3, r7
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d11f      	bne.n	800982e <USB_EPStartXfer+0x10bc>
 80097ee:	1d3b      	adds	r3, r7, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097f6:	1d3b      	adds	r3, r7, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097fe:	b29b      	uxth	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009806:	4413      	add	r3, r2
 8009808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800980c:	463b      	mov	r3, r7
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	00da      	lsls	r2, r3, #3
 8009814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009818:	4413      	add	r3, r2
 800981a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800981e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009826:	b29a      	uxth	r2, r3
 8009828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	1d3b      	adds	r3, r7, #4
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009836:	463b      	mov	r3, r7
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d16f      	bne.n	8009920 <USB_EPStartXfer+0x11ae>
 8009840:	1d3b      	adds	r3, r7, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009848:	1d3b      	adds	r3, r7, #4
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009850:	b29b      	uxth	r3, r3
 8009852:	461a      	mov	r2, r3
 8009854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009858:	4413      	add	r3, r2
 800985a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800985e:	463b      	mov	r3, r7
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	00da      	lsls	r2, r3, #3
 8009866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800986a:	4413      	add	r3, r2
 800986c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009874:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009878:	2b00      	cmp	r3, #0
 800987a:	d116      	bne.n	80098aa <USB_EPStartXfer+0x1138>
 800987c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29b      	uxth	r3, r3
 8009884:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	b29b      	uxth	r3, r3
 8009898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800989c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	e05e      	b.n	8009968 <USB_EPStartXfer+0x11f6>
 80098aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098ae:	2b3e      	cmp	r3, #62	; 0x3e
 80098b0:	d818      	bhi.n	80098e4 <USB_EPStartXfer+0x1172>
 80098b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098b6:	085b      	lsrs	r3, r3, #1
 80098b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d004      	beq.n	80098d2 <USB_EPStartXfer+0x1160>
 80098c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098cc:	3301      	adds	r3, #1
 80098ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	029b      	lsls	r3, r3, #10
 80098da:	b29a      	uxth	r2, r3
 80098dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	e041      	b.n	8009968 <USB_EPStartXfer+0x11f6>
 80098e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098e8:	095b      	lsrs	r3, r3, #5
 80098ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098f2:	f003 031f 	and.w	r3, r3, #31
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d104      	bne.n	8009904 <USB_EPStartXfer+0x1192>
 80098fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098fe:	3b01      	subs	r3, #1
 8009900:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009908:	b29b      	uxth	r3, r3
 800990a:	029b      	lsls	r3, r3, #10
 800990c:	b29b      	uxth	r3, r3
 800990e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009916:	b29a      	uxth	r2, r3
 8009918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800991c:	801a      	strh	r2, [r3, #0]
 800991e:	e023      	b.n	8009968 <USB_EPStartXfer+0x11f6>
 8009920:	463b      	mov	r3, r7
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11e      	bne.n	8009968 <USB_EPStartXfer+0x11f6>
 800992a:	1d3b      	adds	r3, r7, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009932:	b29b      	uxth	r3, r3
 8009934:	461a      	mov	r2, r3
 8009936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800993a:	4413      	add	r3, r2
 800993c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009940:	463b      	mov	r3, r7
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	00da      	lsls	r2, r3, #3
 8009948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800994c:	4413      	add	r3, r2
 800994e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009952:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009956:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800995a:	b29a      	uxth	r2, r3
 800995c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	e001      	b.n	8009968 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e02e      	b.n	80099c6 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009968:	1d3b      	adds	r3, r7, #4
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	463b      	mov	r3, r7
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009986:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800998a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800998e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8009992:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009996:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800999a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800999e:	1d3b      	adds	r3, r7, #4
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	463b      	mov	r3, r7
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	441a      	add	r2, r3
 80099ac:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80099b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d020      	beq.n	8009a24 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099f8:	81bb      	strh	r3, [r7, #12]
 80099fa:	89bb      	ldrh	r3, [r7, #12]
 80099fc:	f083 0310 	eor.w	r3, r3, #16
 8009a00:	81bb      	strh	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	441a      	add	r2, r3
 8009a0c:	89bb      	ldrh	r3, [r7, #12]
 8009a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	8013      	strh	r3, [r2, #0]
 8009a22:	e01f      	b.n	8009a64 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a3a:	81fb      	strh	r3, [r7, #14]
 8009a3c:	89fb      	ldrh	r3, [r7, #14]
 8009a3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a42:	81fb      	strh	r3, [r7, #14]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	441a      	add	r2, r3
 8009a4e:	89fb      	ldrh	r3, [r7, #14]
 8009a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b087      	sub	sp, #28
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	7b1b      	ldrb	r3, [r3, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 809d 	bne.w	8009bc0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d04c      	beq.n	8009b28 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	881b      	ldrh	r3, [r3, #0]
 8009a9a:	823b      	strh	r3, [r7, #16]
 8009a9c:	8a3b      	ldrh	r3, [r7, #16]
 8009a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d01b      	beq.n	8009ade <USB_EPClearStall+0x6c>
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abc:	81fb      	strh	r3, [r7, #14]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	441a      	add	r2, r3
 8009ac8:	89fb      	ldrh	r3, [r7, #14]
 8009aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	78db      	ldrb	r3, [r3, #3]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d06c      	beq.n	8009bc0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afc:	81bb      	strh	r3, [r7, #12]
 8009afe:	89bb      	ldrh	r3, [r7, #12]
 8009b00:	f083 0320 	eor.w	r3, r3, #32
 8009b04:	81bb      	strh	r3, [r7, #12]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	441a      	add	r2, r3
 8009b10:	89bb      	ldrh	r3, [r7, #12]
 8009b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	8013      	strh	r3, [r2, #0]
 8009b26:	e04b      	b.n	8009bc0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	82fb      	strh	r3, [r7, #22]
 8009b36:	8afb      	ldrh	r3, [r7, #22]
 8009b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01b      	beq.n	8009b78 <USB_EPClearStall+0x106>
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b56:	82bb      	strh	r3, [r7, #20]
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	441a      	add	r2, r3
 8009b62:	8abb      	ldrh	r3, [r7, #20]
 8009b64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4413      	add	r3, r2
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8e:	827b      	strh	r3, [r7, #18]
 8009b90:	8a7b      	ldrh	r3, [r7, #18]
 8009b92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b96:	827b      	strh	r3, [r7, #18]
 8009b98:	8a7b      	ldrh	r3, [r7, #18]
 8009b9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b9e:	827b      	strh	r3, [r7, #18]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	441a      	add	r2, r3
 8009baa:	8a7b      	ldrh	r3, [r7, #18]
 8009bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b083      	sub	sp, #12
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	460b      	mov	r3, r1
 8009bd8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2280      	movs	r2, #128	; 0x80
 8009be4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr

08009bf6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c0e:	b29a      	uxth	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009c60:	68fb      	ldr	r3, [r7, #12]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b08d      	sub	sp, #52	; 0x34
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	4611      	mov	r1, r2
 8009c92:	461a      	mov	r2, r3
 8009c94:	460b      	mov	r3, r1
 8009c96:	80fb      	strh	r3, [r7, #6]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009c9c:	88bb      	ldrh	r3, [r7, #4]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	085b      	lsrs	r3, r3, #1
 8009ca2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009cac:	88fa      	ldrh	r2, [r7, #6]
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cbc:	e01b      	b.n	8009cf6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	3301      	adds	r3, #1
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e0      	bne.n	8009cbe <USB_WritePMA+0x38>
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3734      	adds	r7, #52	; 0x34
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b08b      	sub	sp, #44	; 0x2c
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	4611      	mov	r1, r2
 8009d14:	461a      	mov	r2, r3
 8009d16:	460b      	mov	r3, r1
 8009d18:	80fb      	strh	r3, [r7, #6]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009d1e:	88bb      	ldrh	r3, [r7, #4]
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d2e:	88fa      	ldrh	r2, [r7, #6]
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d38:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3e:	e018      	b.n	8009d72 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	881b      	ldrh	r3, [r3, #0]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	627b      	str	r3, [r7, #36]	; 0x24
 8009d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e3      	bne.n	8009d40 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009d78:	88bb      	ldrh	r3, [r7, #4]
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	701a      	strb	r2, [r3, #0]
  }
}
 8009d94:	bf00      	nop
 8009d96:	372c      	adds	r7, #44	; 0x2c
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009dac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009db0:	f002 fa4c 	bl	800c24c <malloc>
 8009db4:	4603      	mov	r3, r0
 8009db6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d105      	bne.n	8009dca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	e066      	b.n	8009e98 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	7c1b      	ldrb	r3, [r3, #16]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d119      	bne.n	8009e0e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dde:	2202      	movs	r2, #2
 8009de0:	2181      	movs	r1, #129	; 0x81
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 ff20 	bl	800bc28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009df2:	2202      	movs	r2, #2
 8009df4:	2101      	movs	r1, #1
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 ff16 	bl	800bc28 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2210      	movs	r2, #16
 8009e08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009e0c:	e016      	b.n	8009e3c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e0e:	2340      	movs	r3, #64	; 0x40
 8009e10:	2202      	movs	r2, #2
 8009e12:	2181      	movs	r1, #129	; 0x81
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 ff07 	bl	800bc28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e20:	2340      	movs	r3, #64	; 0x40
 8009e22:	2202      	movs	r2, #2
 8009e24:	2101      	movs	r1, #1
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f001 fefe 	bl	800bc28 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2210      	movs	r2, #16
 8009e38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009e3c:	2308      	movs	r3, #8
 8009e3e:	2203      	movs	r2, #3
 8009e40:	2182      	movs	r1, #130	; 0x82
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 fef0 	bl	800bc28 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	7c1b      	ldrb	r3, [r3, #16]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f002 f84e 	bl	800bf20 <USBD_LL_PrepareReceive>
 8009e84:	e007      	b.n	8009e96 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009e8c:	2340      	movs	r3, #64	; 0x40
 8009e8e:	2101      	movs	r1, #1
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f002 f845 	bl	800bf20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009eac:	2181      	movs	r1, #129	; 0x81
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 fef8 	bl	800bca4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009eba:	2101      	movs	r1, #1
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 fef1 	bl	800bca4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009eca:	2182      	movs	r1, #130	; 0x82
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fee9 	bl	800bca4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00e      	beq.n	8009f0a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009efc:	4618      	mov	r0, r3
 8009efe:	f002 f9ad 	bl	800c25c <free>
    pdev->pClassData = NULL;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f24:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d03a      	beq.n	8009fb4 <USBD_CDC_Setup+0xa0>
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	f040 8097 	bne.w	800a072 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	88db      	ldrh	r3, [r3, #6]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d029      	beq.n	8009fa0 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b25b      	sxtb	r3, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	da11      	bge.n	8009f7a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009f62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	88d2      	ldrh	r2, [r2, #6]
 8009f68:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f6a:	6939      	ldr	r1, [r7, #16]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	88db      	ldrh	r3, [r3, #6]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 fa5d 	bl	800b432 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009f78:	e082      	b.n	800a080 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	785a      	ldrb	r2, [r3, #1]
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	88db      	ldrh	r3, [r3, #6]
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009f90:	6939      	ldr	r1, [r7, #16]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	88db      	ldrh	r3, [r3, #6]
 8009f96:	461a      	mov	r2, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 fa76 	bl	800b48a <USBD_CtlPrepareRx>
      break;
 8009f9e:	e06f      	b.n	800a080 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	7850      	ldrb	r0, [r2, #1]
 8009fac:	2200      	movs	r2, #0
 8009fae:	6839      	ldr	r1, [r7, #0]
 8009fb0:	4798      	blx	r3
      break;
 8009fb2:	e065      	b.n	800a080 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	785b      	ldrb	r3, [r3, #1]
 8009fb8:	2b0b      	cmp	r3, #11
 8009fba:	d84f      	bhi.n	800a05c <USBD_CDC_Setup+0x148>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBD_CDC_Setup+0xb0>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	0800a06b 	.word	0x0800a06b
 8009fcc:	0800a05d 	.word	0x0800a05d
 8009fd0:	0800a05d 	.word	0x0800a05d
 8009fd4:	0800a05d 	.word	0x0800a05d
 8009fd8:	0800a05d 	.word	0x0800a05d
 8009fdc:	0800a05d 	.word	0x0800a05d
 8009fe0:	0800a05d 	.word	0x0800a05d
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a05d 	.word	0x0800a05d
 8009fec:	0800a01d 	.word	0x0800a01d
 8009ff0:	0800a045 	.word	0x0800a045
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ffa:	2b03      	cmp	r3, #3
 8009ffc:	d107      	bne.n	800a00e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ffe:	f107 030c 	add.w	r3, r7, #12
 800a002:	2202      	movs	r2, #2
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 fa13 	bl	800b432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a00c:	e030      	b.n	800a070 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f001 f99d 	bl	800b350 <USBD_CtlError>
            ret = USBD_FAIL;
 800a016:	2303      	movs	r3, #3
 800a018:	75fb      	strb	r3, [r7, #23]
          break;
 800a01a:	e029      	b.n	800a070 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a022:	2b03      	cmp	r3, #3
 800a024:	d107      	bne.n	800a036 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a026:	f107 030f 	add.w	r3, r7, #15
 800a02a:	2201      	movs	r2, #1
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 f9ff 	bl	800b432 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a034:	e01c      	b.n	800a070 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 f989 	bl	800b350 <USBD_CtlError>
            ret = USBD_FAIL;
 800a03e:	2303      	movs	r3, #3
 800a040:	75fb      	strb	r3, [r7, #23]
          break;
 800a042:	e015      	b.n	800a070 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d00f      	beq.n	800a06e <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 f97d 	bl	800b350 <USBD_CtlError>
            ret = USBD_FAIL;
 800a056:	2303      	movs	r3, #3
 800a058:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a05a:	e008      	b.n	800a06e <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f001 f976 	bl	800b350 <USBD_CtlError>
          ret = USBD_FAIL;
 800a064:	2303      	movs	r3, #3
 800a066:	75fb      	strb	r3, [r7, #23]
          break;
 800a068:	e002      	b.n	800a070 <USBD_CDC_Setup+0x15c>
          break;
 800a06a:	bf00      	nop
 800a06c:	e008      	b.n	800a080 <USBD_CDC_Setup+0x16c>
          break;
 800a06e:	bf00      	nop
      }
      break;
 800a070:	e006      	b.n	800a080 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 f96b 	bl	800b350 <USBD_CtlError>
      ret = USBD_FAIL;
 800a07a:	2303      	movs	r3, #3
 800a07c:	75fb      	strb	r3, [r7, #23]
      break;
 800a07e:	bf00      	nop
  }

  return (uint8_t)ret;
 800a080:	7dfb      	ldrb	r3, [r7, #23]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3718      	adds	r7, #24
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop

0800a08c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a09e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	e04f      	b.n	800a14e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0b6:	78fa      	ldrb	r2, [r7, #3]
 800a0b8:	6879      	ldr	r1, [r7, #4]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	440b      	add	r3, r1
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d029      	beq.n	800a120 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a0cc:	78fa      	ldrb	r2, [r7, #3]
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	440b      	add	r3, r1
 800a0da:	3318      	adds	r3, #24
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	78f9      	ldrb	r1, [r7, #3]
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	440b      	add	r3, r1
 800a0e8:	00db      	lsls	r3, r3, #3
 800a0ea:	4403      	add	r3, r0
 800a0ec:	3338      	adds	r3, #56	; 0x38
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0f4:	fb03 f301 	mul.w	r3, r3, r1
 800a0f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d110      	bne.n	800a120 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	6879      	ldr	r1, [r7, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	440b      	add	r3, r1
 800a10c:	3318      	adds	r3, #24
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a112:	78f9      	ldrb	r1, [r7, #3]
 800a114:	2300      	movs	r3, #0
 800a116:	2200      	movs	r2, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 fec9 	bl	800beb0 <USBD_LL_Transmit>
 800a11e:	e015      	b.n	800a14c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2200      	movs	r2, #0
 800a124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00b      	beq.n	800a14c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a148:	78fa      	ldrb	r2, [r7, #3]
 800a14a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	460b      	mov	r3, r1
 800a160:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a168:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a174:	2303      	movs	r3, #3
 800a176:	e015      	b.n	800a1a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 ff07 	bl	800bf90 <USBD_LL_GetRxDataSize>
 800a182:	4602      	mov	r2, r0
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1ba:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d015      	beq.n	800a1f2 <USBD_CDC_EP0_RxReady+0x46>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1cc:	2bff      	cmp	r3, #255	; 0xff
 800a1ce:	d010      	beq.n	800a1f2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a1de:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a1e6:	b292      	uxth	r2, r2
 800a1e8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	22ff      	movs	r2, #255	; 0xff
 800a1ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2243      	movs	r2, #67	; 0x43
 800a208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a20a:	4b03      	ldr	r3, [pc, #12]	; (800a218 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	20000094 	.word	0x20000094

0800a21c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2243      	movs	r2, #67	; 0x43
 800a228:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a22a:	4b03      	ldr	r3, [pc, #12]	; (800a238 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	20000050 	.word	0x20000050

0800a23c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2243      	movs	r2, #67	; 0x43
 800a248:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	200000d8 	.word	0x200000d8

0800a25c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	220a      	movs	r2, #10
 800a268:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a26a:	4b03      	ldr	r3, [pc, #12]	; (800a278 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr
 800a278:	2000000c 	.word	0x2000000c

0800a27c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d101      	bne.n	800a290 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e004      	b.n	800a29a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b087      	sub	sp, #28
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	60f8      	str	r0, [r7, #12]
 800a2ae:	60b9      	str	r1, [r7, #8]
 800a2b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	371c      	adds	r7, #28
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2e8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a316:	2b00      	cmp	r3, #0
 800a318:	d101      	bne.n	800a31e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a31a:	2303      	movs	r3, #3
 800a31c:	e016      	b.n	800a34c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	7c1b      	ldrb	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d109      	bne.n	800a33a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a32c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a330:	2101      	movs	r1, #1
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 fdf4 	bl	800bf20 <USBD_LL_PrepareReceive>
 800a338:	e007      	b.n	800a34a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	2101      	movs	r1, #1
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f001 fdeb 	bl	800bf20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	e01f      	b.n	800a3ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2200      	movs	r2, #0
 800a370:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	68ba      	ldr	r2, [r7, #8]
 800a38e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	79fa      	ldrb	r2, [r7, #7]
 800a39e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f001 fbad 	bl	800bb00 <USBD_LL_Init>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a3aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e016      	b.n	800a3fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00b      	beq.n	800a3f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	f107 020e 	add.w	r2, r7, #14
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	4798      	blx	r3
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f001 fbda 	bl	800bbc4 <USBD_LL_Start>
 800a410:	4603      	mov	r3, r0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	460b      	mov	r3, r1
 800a43a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a43c:	2303      	movs	r3, #3
 800a43e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a446:	2b00      	cmp	r3, #0
 800a448:	d009      	beq.n	800a45e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	78fa      	ldrb	r2, [r7, #3]
 800a454:	4611      	mov	r1, r2
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	4798      	blx	r3
 800a45a:	4603      	mov	r3, r0
 800a45c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d007      	beq.n	800a48e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	78fa      	ldrb	r2, [r7, #3]
 800a488:	4611      	mov	r1, r2
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	4798      	blx	r3
  }

  return USBD_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 ff16 	bl	800b2dc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d00e      	beq.n	800a4f2 <USBD_LL_SetupStage+0x5a>
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d302      	bcc.n	800a4de <USBD_LL_SetupStage+0x46>
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d014      	beq.n	800a506 <USBD_LL_SetupStage+0x6e>
 800a4dc:	e01d      	b.n	800a51a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f9d6 	bl	800a898 <USBD_StdDevReq>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f0:	e020      	b.n	800a534 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fa3a 	bl	800a974 <USBD_StdItfReq>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
      break;
 800a504:	e016      	b.n	800a534 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a50c:	4619      	mov	r1, r3
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fa76 	bl	800aa00 <USBD_StdEPReq>
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e00c      	b.n	800a534 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a520:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a524:	b2db      	uxtb	r3, r3
 800a526:	4619      	mov	r1, r3
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f001 fbf1 	bl	800bd10 <USBD_LL_StallEP>
 800a52e:	4603      	mov	r3, r0
 800a530:	73fb      	strb	r3, [r7, #15]
      break;
 800a532:	bf00      	nop
  }

  return ret;
 800a534:	7bfb      	ldrb	r3, [r7, #15]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	460b      	mov	r3, r1
 800a548:	607a      	str	r2, [r7, #4]
 800a54a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a54c:	7afb      	ldrb	r3, [r7, #11]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d137      	bne.n	800a5c2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a558:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a560:	2b03      	cmp	r3, #3
 800a562:	d14a      	bne.n	800a5fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	689a      	ldr	r2, [r3, #8]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	68db      	ldr	r3, [r3, #12]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d913      	bls.n	800a598 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	1ad2      	subs	r2, r2, r3
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	68da      	ldr	r2, [r3, #12]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	4293      	cmp	r3, r2
 800a588:	bf28      	it	cs
 800a58a:	4613      	movcs	r3, r2
 800a58c:	461a      	mov	r2, r3
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f000 ff97 	bl	800b4c4 <USBD_CtlContinueRx>
 800a596:	e030      	b.n	800a5fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00a      	beq.n	800a5ba <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a5aa:	2b03      	cmp	r3, #3
 800a5ac:	d105      	bne.n	800a5ba <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a5ba:	68f8      	ldr	r0, [r7, #12]
 800a5bc:	f000 ff93 	bl	800b4e6 <USBD_CtlSendStatus>
 800a5c0:	e01b      	b.n	800a5fa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d013      	beq.n	800a5f6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d10e      	bne.n	800a5f6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	7afa      	ldrb	r2, [r7, #11]
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	4798      	blx	r3
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a5ec:	7dfb      	ldrb	r3, [r7, #23]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d003      	beq.n	800a5fa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	e002      	b.n	800a5fc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	e000      	b.n	800a5fc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	460b      	mov	r3, r1
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d16a      	bne.n	800a6ee <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	3314      	adds	r3, #20
 800a61c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a624:	2b02      	cmp	r3, #2
 800a626:	d155      	bne.n	800a6d4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	689a      	ldr	r2, [r3, #8]
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	429a      	cmp	r2, r3
 800a632:	d914      	bls.n	800a65e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	689b      	ldr	r3, [r3, #8]
 800a646:	461a      	mov	r2, r3
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 ff0c 	bl	800b468 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a650:	2300      	movs	r3, #0
 800a652:	2200      	movs	r2, #0
 800a654:	2100      	movs	r1, #0
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f001 fc62 	bl	800bf20 <USBD_LL_PrepareReceive>
 800a65c:	e03a      	b.n	800a6d4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	d11c      	bne.n	800a6a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a672:	429a      	cmp	r2, r3
 800a674:	d316      	bcc.n	800a6a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	685a      	ldr	r2, [r3, #4]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a680:	429a      	cmp	r2, r3
 800a682:	d20f      	bcs.n	800a6a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a684:	2200      	movs	r2, #0
 800a686:	2100      	movs	r1, #0
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 feed 	bl	800b468 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a696:	2300      	movs	r3, #0
 800a698:	2200      	movs	r2, #0
 800a69a:	2100      	movs	r1, #0
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f001 fc3f 	bl	800bf20 <USBD_LL_PrepareReceive>
 800a6a2:	e017      	b.n	800a6d4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d105      	bne.n	800a6c6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c0:	68db      	ldr	r3, [r3, #12]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c6:	2180      	movs	r1, #128	; 0x80
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	f001 fb21 	bl	800bd10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 ff1c 	bl	800b50c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d123      	bne.n	800a726 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f7ff fe9b 	bl	800a41a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a6ec:	e01b      	b.n	800a726 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d013      	beq.n	800a722 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a700:	2b03      	cmp	r3, #3
 800a702:	d10e      	bne.n	800a722 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a70a:	695b      	ldr	r3, [r3, #20]
 800a70c:	7afa      	ldrb	r2, [r7, #11]
 800a70e:	4611      	mov	r1, r2
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	4798      	blx	r3
 800a714:	4603      	mov	r3, r0
 800a716:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	e002      	b.n	800a728 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a722:	2303      	movs	r3, #3
 800a724:	e000      	b.n	800a728 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d009      	beq.n	800a774 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	6852      	ldr	r2, [r2, #4]
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	4611      	mov	r1, r2
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a774:	2340      	movs	r3, #64	; 0x40
 800a776:	2200      	movs	r2, #0
 800a778:	2100      	movs	r1, #0
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f001 fa54 	bl	800bc28 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2240      	movs	r2, #64	; 0x40
 800a78c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a790:	2340      	movs	r3, #64	; 0x40
 800a792:	2200      	movs	r2, #0
 800a794:	2180      	movs	r1, #128	; 0x80
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f001 fa46 	bl	800bc28 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2240      	movs	r2, #64	; 0x40
 800a7a6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	78fa      	ldrb	r2, [r7, #3]
 800a7c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b083      	sub	sp, #12
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2204      	movs	r2, #4
 800a7ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a80a:	2b04      	cmp	r3, #4
 800a80c:	d105      	bne.n	800a81a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a836:	2b03      	cmp	r3, #3
 800a838:	d10b      	bne.n	800a852 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a840:	69db      	ldr	r3, [r3, #28]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	3301      	adds	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a87a:	8a3b      	ldrh	r3, [r7, #16]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	b21a      	sxth	r2, r3
 800a880:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a884:	4313      	orrs	r3, r2
 800a886:	b21b      	sxth	r3, r3
 800a888:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a88a:	89fb      	ldrh	r3, [r7, #14]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8ae:	2b20      	cmp	r3, #32
 800a8b0:	d004      	beq.n	800a8bc <USBD_StdDevReq+0x24>
 800a8b2:	2b40      	cmp	r3, #64	; 0x40
 800a8b4:	d002      	beq.n	800a8bc <USBD_StdDevReq+0x24>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <USBD_StdDevReq+0x38>
 800a8ba:	e050      	b.n	800a95e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ce:	e04b      	b.n	800a968 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	785b      	ldrb	r3, [r3, #1]
 800a8d4:	2b09      	cmp	r3, #9
 800a8d6:	d83c      	bhi.n	800a952 <USBD_StdDevReq+0xba>
 800a8d8:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <USBD_StdDevReq+0x48>)
 800a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8de:	bf00      	nop
 800a8e0:	0800a935 	.word	0x0800a935
 800a8e4:	0800a949 	.word	0x0800a949
 800a8e8:	0800a953 	.word	0x0800a953
 800a8ec:	0800a93f 	.word	0x0800a93f
 800a8f0:	0800a953 	.word	0x0800a953
 800a8f4:	0800a913 	.word	0x0800a913
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a953 	.word	0x0800a953
 800a900:	0800a92b 	.word	0x0800a92b
 800a904:	0800a91d 	.word	0x0800a91d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a908:	6839      	ldr	r1, [r7, #0]
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f000 f9d0 	bl	800acb0 <USBD_GetDescriptor>
      break;
 800a910:	e024      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a912:	6839      	ldr	r1, [r7, #0]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fb5f 	bl	800afd8 <USBD_SetAddress>
      break;
 800a91a:	e01f      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb9c 	bl	800b05c <USBD_SetConfig>
 800a924:	4603      	mov	r3, r0
 800a926:	73fb      	strb	r3, [r7, #15]
      break;
 800a928:	e018      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a92a:	6839      	ldr	r1, [r7, #0]
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f000 fc39 	bl	800b1a4 <USBD_GetConfig>
      break;
 800a932:	e013      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a934:	6839      	ldr	r1, [r7, #0]
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fc68 	bl	800b20c <USBD_GetStatus>
      break;
 800a93c:	e00e      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a93e:	6839      	ldr	r1, [r7, #0]
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fc96 	bl	800b272 <USBD_SetFeature>
      break;
 800a946:	e009      	b.n	800a95c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 fca5 	bl	800b29a <USBD_ClrFeature>
      break;
 800a950:	e004      	b.n	800a95c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a952:	6839      	ldr	r1, [r7, #0]
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fcfb 	bl	800b350 <USBD_CtlError>
      break;
 800a95a:	bf00      	nop
    }
    break;
 800a95c:	e004      	b.n	800a968 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fcf5 	bl	800b350 <USBD_CtlError>
    break;
 800a966:	bf00      	nop
  }

  return ret;
 800a968:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop

0800a974 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d003      	beq.n	800a996 <USBD_StdItfReq+0x22>
 800a98e:	2b40      	cmp	r3, #64	; 0x40
 800a990:	d001      	beq.n	800a996 <USBD_StdItfReq+0x22>
 800a992:	2b00      	cmp	r3, #0
 800a994:	d12a      	bne.n	800a9ec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99c:	3b01      	subs	r3, #1
 800a99e:	2b02      	cmp	r3, #2
 800a9a0:	d81d      	bhi.n	800a9de <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	889b      	ldrh	r3, [r3, #4]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d813      	bhi.n	800a9d4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b2:	689b      	ldr	r3, [r3, #8]
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	4798      	blx	r3
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	88db      	ldrh	r3, [r3, #6]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d110      	bne.n	800a9e8 <USBD_StdItfReq+0x74>
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10d      	bne.n	800a9e8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fd8a 	bl	800b4e6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a9d2:	e009      	b.n	800a9e8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fcba 	bl	800b350 <USBD_CtlError>
      break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fcb5 	bl	800b350 <USBD_CtlError>
      break;
 800a9e6:	e000      	b.n	800a9ea <USBD_StdItfReq+0x76>
      break;
 800a9e8:	bf00      	nop
    }
    break;
 800a9ea:	e004      	b.n	800a9f6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 fcae 	bl	800b350 <USBD_CtlError>
    break;
 800a9f4:	bf00      	nop
  }

  return ret;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	889b      	ldrh	r3, [r3, #4]
 800aa12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa1c:	2b20      	cmp	r3, #32
 800aa1e:	d004      	beq.n	800aa2a <USBD_StdEPReq+0x2a>
 800aa20:	2b40      	cmp	r3, #64	; 0x40
 800aa22:	d002      	beq.n	800aa2a <USBD_StdEPReq+0x2a>
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00a      	beq.n	800aa3e <USBD_StdEPReq+0x3e>
 800aa28:	e137      	b.n	800ac9a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	6839      	ldr	r1, [r7, #0]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
 800aa38:	4603      	mov	r3, r0
 800aa3a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa3c:	e132      	b.n	800aca4 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	785b      	ldrb	r3, [r3, #1]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d03e      	beq.n	800aac4 <USBD_StdEPReq+0xc4>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d002      	beq.n	800aa50 <USBD_StdEPReq+0x50>
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d079      	beq.n	800ab42 <USBD_StdEPReq+0x142>
 800aa4e:	e11e      	b.n	800ac8e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d002      	beq.n	800aa60 <USBD_StdEPReq+0x60>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d015      	beq.n	800aa8a <USBD_StdEPReq+0x8a>
 800aa5e:	e02b      	b.n	800aab8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00c      	beq.n	800aa80 <USBD_StdEPReq+0x80>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b80      	cmp	r3, #128	; 0x80
 800aa6a:	d009      	beq.n	800aa80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f94d 	bl	800bd10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa76:	2180      	movs	r1, #128	; 0x80
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f949 	bl	800bd10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aa7e:	e020      	b.n	800aac2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fc64 	bl	800b350 <USBD_CtlError>
        break;
 800aa88:	e01b      	b.n	800aac2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	885b      	ldrh	r3, [r3, #2]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10e      	bne.n	800aab0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa92:	7bbb      	ldrb	r3, [r7, #14]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00b      	beq.n	800aab0 <USBD_StdEPReq+0xb0>
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	2b80      	cmp	r3, #128	; 0x80
 800aa9c:	d008      	beq.n	800aab0 <USBD_StdEPReq+0xb0>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	88db      	ldrh	r3, [r3, #6]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d104      	bne.n	800aab0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 f930 	bl	800bd10 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fd18 	bl	800b4e6 <USBD_CtlSendStatus>

        break;
 800aab6:	e004      	b.n	800aac2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fc48 	bl	800b350 <USBD_CtlError>
        break;
 800aac0:	bf00      	nop
      }
      break;
 800aac2:	e0e9      	b.n	800ac98 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d002      	beq.n	800aad4 <USBD_StdEPReq+0xd4>
 800aace:	2b03      	cmp	r3, #3
 800aad0:	d015      	beq.n	800aafe <USBD_StdEPReq+0xfe>
 800aad2:	e02f      	b.n	800ab34 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00c      	beq.n	800aaf4 <USBD_StdEPReq+0xf4>
 800aada:	7bbb      	ldrb	r3, [r7, #14]
 800aadc:	2b80      	cmp	r3, #128	; 0x80
 800aade:	d009      	beq.n	800aaf4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800aae0:	7bbb      	ldrb	r3, [r7, #14]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 f913 	bl	800bd10 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aaea:	2180      	movs	r1, #128	; 0x80
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f001 f90f 	bl	800bd10 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aaf2:	e025      	b.n	800ab40 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fc2a 	bl	800b350 <USBD_CtlError>
        break;
 800aafc:	e020      	b.n	800ab40 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	885b      	ldrh	r3, [r3, #2]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d11b      	bne.n	800ab3e <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d004      	beq.n	800ab1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab10:	7bbb      	ldrb	r3, [r7, #14]
 800ab12:	4619      	mov	r1, r3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f001 f931 	bl	800bd7c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fce3 	bl	800b4e6 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ab32:	e004      	b.n	800ab3e <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fc0a 	bl	800b350 <USBD_CtlError>
        break;
 800ab3c:	e000      	b.n	800ab40 <USBD_StdEPReq+0x140>
        break;
 800ab3e:	bf00      	nop
      }
      break;
 800ab40:	e0aa      	b.n	800ac98 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d002      	beq.n	800ab52 <USBD_StdEPReq+0x152>
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d032      	beq.n	800abb6 <USBD_StdEPReq+0x1b6>
 800ab50:	e097      	b.n	800ac82 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d007      	beq.n	800ab68 <USBD_StdEPReq+0x168>
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
 800ab5a:	2b80      	cmp	r3, #128	; 0x80
 800ab5c:	d004      	beq.n	800ab68 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fbf5 	bl	800b350 <USBD_CtlError>
          break;
 800ab66:	e091      	b.n	800ac8c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	da0b      	bge.n	800ab88 <USBD_StdEPReq+0x188>
 800ab70:	7bbb      	ldrb	r3, [r7, #14]
 800ab72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab76:	4613      	mov	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	4413      	add	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	3310      	adds	r3, #16
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	4413      	add	r3, r2
 800ab84:	3304      	adds	r3, #4
 800ab86:	e00b      	b.n	800aba0 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ab88:	7bbb      	ldrb	r3, [r7, #14]
 800ab8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab8e:	4613      	mov	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4413      	add	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	3304      	adds	r3, #4
 800aba0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	2202      	movs	r2, #2
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fc3f 	bl	800b432 <USBD_CtlSendData>
        break;
 800abb4:	e06a      	b.n	800ac8c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800abb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da11      	bge.n	800abe2 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	f003 020f 	and.w	r2, r3, #15
 800abc4:	6879      	ldr	r1, [r7, #4]
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	3324      	adds	r3, #36	; 0x24
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d117      	bne.n	800ac08 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fbb8 	bl	800b350 <USBD_CtlError>
            break;
 800abe0:	e054      	b.n	800ac8c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abe2:	7bbb      	ldrb	r3, [r7, #14]
 800abe4:	f003 020f 	and.w	r2, r3, #15
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d104      	bne.n	800ac08 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 fba5 	bl	800b350 <USBD_CtlError>
            break;
 800ac06:	e041      	b.n	800ac8c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	da0b      	bge.n	800ac28 <USBD_StdEPReq+0x228>
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac16:	4613      	mov	r3, r2
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	3310      	adds	r3, #16
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	4413      	add	r3, r2
 800ac24:	3304      	adds	r3, #4
 800ac26:	e00b      	b.n	800ac40 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ac28:	7bbb      	ldrb	r3, [r7, #14]
 800ac2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	3304      	adds	r3, #4
 800ac40:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac42:	7bbb      	ldrb	r3, [r7, #14]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <USBD_StdEPReq+0x24e>
 800ac48:	7bbb      	ldrb	r3, [r7, #14]
 800ac4a:	2b80      	cmp	r3, #128	; 0x80
 800ac4c:	d103      	bne.n	800ac56 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	e00e      	b.n	800ac74 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f001 f8c4 	bl	800bde8 <USBD_LL_IsStallEP>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2201      	movs	r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	e002      	b.n	800ac74 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	2202      	movs	r2, #2
 800ac78:	4619      	mov	r1, r3
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f000 fbd9 	bl	800b432 <USBD_CtlSendData>
          break;
 800ac80:	e004      	b.n	800ac8c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fb63 	bl	800b350 <USBD_CtlError>
        break;
 800ac8a:	bf00      	nop
      }
      break;
 800ac8c:	e004      	b.n	800ac98 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800ac8e:	6839      	ldr	r1, [r7, #0]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fb5d 	bl	800b350 <USBD_CtlError>
      break;
 800ac96:	bf00      	nop
    }
    break;
 800ac98:	e004      	b.n	800aca4 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fb57 	bl	800b350 <USBD_CtlError>
    break;
 800aca2:	bf00      	nop
  }

  return ret;
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
	...

0800acb0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acbe:	2300      	movs	r3, #0
 800acc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	b29b      	uxth	r3, r3
 800acce:	3b01      	subs	r3, #1
 800acd0:	2b0e      	cmp	r3, #14
 800acd2:	f200 8152 	bhi.w	800af7a <USBD_GetDescriptor+0x2ca>
 800acd6:	a201      	add	r2, pc, #4	; (adr r2, 800acdc <USBD_GetDescriptor+0x2c>)
 800acd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acdc:	0800ad4d 	.word	0x0800ad4d
 800ace0:	0800ad65 	.word	0x0800ad65
 800ace4:	0800ada5 	.word	0x0800ada5
 800ace8:	0800af7b 	.word	0x0800af7b
 800acec:	0800af7b 	.word	0x0800af7b
 800acf0:	0800af1b 	.word	0x0800af1b
 800acf4:	0800af47 	.word	0x0800af47
 800acf8:	0800af7b 	.word	0x0800af7b
 800acfc:	0800af7b 	.word	0x0800af7b
 800ad00:	0800af7b 	.word	0x0800af7b
 800ad04:	0800af7b 	.word	0x0800af7b
 800ad08:	0800af7b 	.word	0x0800af7b
 800ad0c:	0800af7b 	.word	0x0800af7b
 800ad10:	0800af7b 	.word	0x0800af7b
 800ad14:	0800ad19 	.word	0x0800ad19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad1e:	69db      	ldr	r3, [r3, #28]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00b      	beq.n	800ad3c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	f107 0108 	add.w	r1, r7, #8
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800ad3a:	e126      	b.n	800af8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fb06 	bl	800b350 <USBD_CtlError>
      err++;
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	3301      	adds	r3, #1
 800ad48:	72fb      	strb	r3, [r7, #11]
    break;
 800ad4a:	e11e      	b.n	800af8a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	7c12      	ldrb	r2, [r2, #16]
 800ad58:	f107 0108 	add.w	r1, r7, #8
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	4798      	blx	r3
 800ad60:	60f8      	str	r0, [r7, #12]
    break;
 800ad62:	e112      	b.n	800af8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	7c1b      	ldrb	r3, [r3, #16]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10d      	bne.n	800ad88 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad74:	f107 0208 	add.w	r2, r7, #8
 800ad78:	4610      	mov	r0, r2
 800ad7a:	4798      	blx	r3
 800ad7c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3301      	adds	r3, #1
 800ad82:	2202      	movs	r2, #2
 800ad84:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ad86:	e100      	b.n	800af8a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad90:	f107 0208 	add.w	r2, r7, #8
 800ad94:	4610      	mov	r0, r2
 800ad96:	4798      	blx	r3
 800ad98:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	2202      	movs	r2, #2
 800ada0:	701a      	strb	r2, [r3, #0]
    break;
 800ada2:	e0f2      	b.n	800af8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	885b      	ldrh	r3, [r3, #2]
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b05      	cmp	r3, #5
 800adac:	f200 80ac 	bhi.w	800af08 <USBD_GetDescriptor+0x258>
 800adb0:	a201      	add	r2, pc, #4	; (adr r2, 800adb8 <USBD_GetDescriptor+0x108>)
 800adb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb6:	bf00      	nop
 800adb8:	0800add1 	.word	0x0800add1
 800adbc:	0800ae05 	.word	0x0800ae05
 800adc0:	0800ae39 	.word	0x0800ae39
 800adc4:	0800ae6d 	.word	0x0800ae6d
 800adc8:	0800aea1 	.word	0x0800aea1
 800adcc:	0800aed5 	.word	0x0800aed5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00b      	beq.n	800adf4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	7c12      	ldrb	r2, [r2, #16]
 800ade8:	f107 0108 	add.w	r1, r7, #8
 800adec:	4610      	mov	r0, r2
 800adee:	4798      	blx	r3
 800adf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adf2:	e091      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 faaa 	bl	800b350 <USBD_CtlError>
        err++;
 800adfc:	7afb      	ldrb	r3, [r7, #11]
 800adfe:	3301      	adds	r3, #1
 800ae00:	72fb      	strb	r3, [r7, #11]
      break;
 800ae02:	e089      	b.n	800af18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d00b      	beq.n	800ae28 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	7c12      	ldrb	r2, [r2, #16]
 800ae1c:	f107 0108 	add.w	r1, r7, #8
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae26:	e077      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 fa90 	bl	800b350 <USBD_CtlError>
        err++;
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	3301      	adds	r3, #1
 800ae34:	72fb      	strb	r3, [r7, #11]
      break;
 800ae36:	e06f      	b.n	800af18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	7c12      	ldrb	r2, [r2, #16]
 800ae50:	f107 0108 	add.w	r1, r7, #8
 800ae54:	4610      	mov	r0, r2
 800ae56:	4798      	blx	r3
 800ae58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae5a:	e05d      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fa76 	bl	800b350 <USBD_CtlError>
        err++;
 800ae64:	7afb      	ldrb	r3, [r7, #11]
 800ae66:	3301      	adds	r3, #1
 800ae68:	72fb      	strb	r3, [r7, #11]
      break;
 800ae6a:	e055      	b.n	800af18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00b      	beq.n	800ae90 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	691b      	ldr	r3, [r3, #16]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	7c12      	ldrb	r2, [r2, #16]
 800ae84:	f107 0108 	add.w	r1, r7, #8
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3
 800ae8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae8e:	e043      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa5c 	bl	800b350 <USBD_CtlError>
        err++;
 800ae98:	7afb      	ldrb	r3, [r7, #11]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	72fb      	strb	r3, [r7, #11]
      break;
 800ae9e:	e03b      	b.n	800af18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00b      	beq.n	800aec4 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeb2:	695b      	ldr	r3, [r3, #20]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	7c12      	ldrb	r2, [r2, #16]
 800aeb8:	f107 0108 	add.w	r1, r7, #8
 800aebc:	4610      	mov	r0, r2
 800aebe:	4798      	blx	r3
 800aec0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aec2:	e029      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fa42 	bl	800b350 <USBD_CtlError>
        err++;
 800aecc:	7afb      	ldrb	r3, [r7, #11]
 800aece:	3301      	adds	r3, #1
 800aed0:	72fb      	strb	r3, [r7, #11]
      break;
 800aed2:	e021      	b.n	800af18 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aeda:	699b      	ldr	r3, [r3, #24]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00b      	beq.n	800aef8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	7c12      	ldrb	r2, [r2, #16]
 800aeec:	f107 0108 	add.w	r1, r7, #8
 800aef0:	4610      	mov	r0, r2
 800aef2:	4798      	blx	r3
 800aef4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aef6:	e00f      	b.n	800af18 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800aef8:	6839      	ldr	r1, [r7, #0]
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 fa28 	bl	800b350 <USBD_CtlError>
        err++;
 800af00:	7afb      	ldrb	r3, [r7, #11]
 800af02:	3301      	adds	r3, #1
 800af04:	72fb      	strb	r3, [r7, #11]
      break;
 800af06:	e007      	b.n	800af18 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fa20 	bl	800b350 <USBD_CtlError>
      err++;
 800af10:	7afb      	ldrb	r3, [r7, #11]
 800af12:	3301      	adds	r3, #1
 800af14:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800af16:	bf00      	nop
    }
    break;
 800af18:	e037      	b.n	800af8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	7c1b      	ldrb	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d109      	bne.n	800af36 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af2a:	f107 0208 	add.w	r2, r7, #8
 800af2e:	4610      	mov	r0, r2
 800af30:	4798      	blx	r3
 800af32:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800af34:	e029      	b.n	800af8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 fa09 	bl	800b350 <USBD_CtlError>
      err++;
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	3301      	adds	r3, #1
 800af42:	72fb      	strb	r3, [r7, #11]
    break;
 800af44:	e021      	b.n	800af8a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7c1b      	ldrb	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10d      	bne.n	800af6a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	f107 0208 	add.w	r2, r7, #8
 800af5a:	4610      	mov	r0, r2
 800af5c:	4798      	blx	r3
 800af5e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3301      	adds	r3, #1
 800af64:	2207      	movs	r2, #7
 800af66:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800af68:	e00f      	b.n	800af8a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f9ef 	bl	800b350 <USBD_CtlError>
      err++;
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	3301      	adds	r3, #1
 800af76:	72fb      	strb	r3, [r7, #11]
    break;
 800af78:	e007      	b.n	800af8a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f9e7 	bl	800b350 <USBD_CtlError>
    err++;
 800af82:	7afb      	ldrb	r3, [r7, #11]
 800af84:	3301      	adds	r3, #1
 800af86:	72fb      	strb	r3, [r7, #11]
    break;
 800af88:	bf00      	nop
  }

  if (err != 0U)
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d11e      	bne.n	800afce <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	88db      	ldrh	r3, [r3, #6]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d016      	beq.n	800afc6 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800af98:	893b      	ldrh	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00e      	beq.n	800afbc <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	88da      	ldrh	r2, [r3, #6]
 800afa2:	893b      	ldrh	r3, [r7, #8]
 800afa4:	4293      	cmp	r3, r2
 800afa6:	bf28      	it	cs
 800afa8:	4613      	movcs	r3, r2
 800afaa:	b29b      	uxth	r3, r3
 800afac:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800afae:	893b      	ldrh	r3, [r7, #8]
 800afb0:	461a      	mov	r2, r3
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fa3c 	bl	800b432 <USBD_CtlSendData>
 800afba:	e009      	b.n	800afd0 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f9c6 	bl	800b350 <USBD_CtlError>
 800afc4:	e004      	b.n	800afd0 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f000 fa8d 	bl	800b4e6 <USBD_CtlSendStatus>
 800afcc:	e000      	b.n	800afd0 <USBD_GetDescriptor+0x320>
    return;
 800afce:	bf00      	nop
    }
  }
}
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop

0800afd8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d130      	bne.n	800b04c <USBD_SetAddress+0x74>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d12c      	bne.n	800b04c <USBD_SetAddress+0x74>
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	885b      	ldrh	r3, [r3, #2]
 800aff6:	2b7f      	cmp	r3, #127	; 0x7f
 800aff8:	d828      	bhi.n	800b04c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	885b      	ldrh	r3, [r3, #2]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d104      	bne.n	800b01a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f99c 	bl	800b350 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b018:	e01c      	b.n	800b054 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	7bfa      	ldrb	r2, [r7, #15]
 800b01e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b022:	7bfb      	ldrb	r3, [r7, #15]
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 ff0c 	bl	800be44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fa5a 	bl	800b4e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d004      	beq.n	800b042 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b040:	e008      	b.n	800b054 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b04a:	e003      	b.n	800b054 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f97e 	bl	800b350 <USBD_CtlError>
  }
}
 800b054:	bf00      	nop
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	885b      	ldrh	r3, [r3, #2]
 800b06e:	b2da      	uxtb	r2, r3
 800b070:	4b4b      	ldr	r3, [pc, #300]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b074:	4b4a      	ldr	r3, [pc, #296]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d905      	bls.n	800b088 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f966 	bl	800b350 <USBD_CtlError>
    return USBD_FAIL;
 800b084:	2303      	movs	r3, #3
 800b086:	e087      	b.n	800b198 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d002      	beq.n	800b098 <USBD_SetConfig+0x3c>
 800b092:	2b03      	cmp	r3, #3
 800b094:	d025      	beq.n	800b0e2 <USBD_SetConfig+0x86>
 800b096:	e071      	b.n	800b17c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800b098:	4b41      	ldr	r3, [pc, #260]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d01c      	beq.n	800b0da <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800b0a0:	4b3f      	ldr	r3, [pc, #252]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0aa:	4b3d      	ldr	r3, [pc, #244]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7ff f9bd 	bl	800a430 <USBD_SetClassConfig>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800b0ba:	7bfb      	ldrb	r3, [r7, #15]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 f944 	bl	800b350 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b0c8:	e065      	b.n	800b196 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa0b 	bl	800b4e6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2203      	movs	r2, #3
 800b0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b0d8:	e05d      	b.n	800b196 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 fa03 	bl	800b4e6 <USBD_CtlSendStatus>
    break;
 800b0e0:	e059      	b.n	800b196 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800b0e2:	4b2f      	ldr	r3, [pc, #188]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d112      	bne.n	800b110 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800b0f2:	4b2b      	ldr	r3, [pc, #172]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0fc:	4b28      	ldr	r3, [pc, #160]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	4619      	mov	r1, r3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff f9b0 	bl	800a468 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f9ec 	bl	800b4e6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800b10e:	e042      	b.n	800b196 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800b110:	4b23      	ldr	r3, [pc, #140]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	461a      	mov	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d02a      	beq.n	800b174 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	b2db      	uxtb	r3, r3
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff f99e 	bl	800a468 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800b12c:	4b1c      	ldr	r3, [pc, #112]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800b136:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff f977 	bl	800a430 <USBD_SetClassConfig>
 800b142:	4603      	mov	r3, r0
 800b144:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800b146:	7bfb      	ldrb	r3, [r7, #15]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00f      	beq.n	800b16c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 f8fe 	bl	800b350 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff f983 	bl	800a468 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800b16a:	e014      	b.n	800b196 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f9ba 	bl	800b4e6 <USBD_CtlSendStatus>
    break;
 800b172:	e010      	b.n	800b196 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f9b6 	bl	800b4e6 <USBD_CtlSendStatus>
    break;
 800b17a:	e00c      	b.n	800b196 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f8e6 	bl	800b350 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b184:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <USBD_SetConfig+0x144>)
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	4619      	mov	r1, r3
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7ff f96c 	bl	800a468 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800b190:	2303      	movs	r3, #3
 800b192:	73fb      	strb	r3, [r7, #15]
    break;
 800b194:	bf00      	nop
  }

  return ret;
 800b196:	7bfb      	ldrb	r3, [r7, #15]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000318 	.word	0x20000318

0800b1a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	88db      	ldrh	r3, [r3, #6]
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d004      	beq.n	800b1c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f8c9 	bl	800b350 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800b1be:	e021      	b.n	800b204 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	db17      	blt.n	800b1fa <USBD_GetConfig+0x56>
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	dd02      	ble.n	800b1d4 <USBD_GetConfig+0x30>
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d00b      	beq.n	800b1ea <USBD_GetConfig+0x46>
 800b1d2:	e012      	b.n	800b1fa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	2201      	movs	r2, #1
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f925 	bl	800b432 <USBD_CtlSendData>
      break;
 800b1e8:	e00c      	b.n	800b204 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f91d 	bl	800b432 <USBD_CtlSendData>
      break;
 800b1f8:	e004      	b.n	800b204 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f8a7 	bl	800b350 <USBD_CtlError>
      break;
 800b202:	bf00      	nop
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	3b01      	subs	r3, #1
 800b21e:	2b02      	cmp	r3, #2
 800b220:	d81e      	bhi.n	800b260 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	88db      	ldrh	r3, [r3, #6]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d004      	beq.n	800b234 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f000 f88f 	bl	800b350 <USBD_CtlError>
      break;
 800b232:	e01a      	b.n	800b26a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b240:	2b00      	cmp	r3, #0
 800b242:	d005      	beq.n	800b250 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	f043 0202 	orr.w	r2, r3, #2
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	330c      	adds	r3, #12
 800b254:	2202      	movs	r2, #2
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f8ea 	bl	800b432 <USBD_CtlSendData>
    break;
 800b25e:	e004      	b.n	800b26a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f874 	bl	800b350 <USBD_CtlError>
    break;
 800b268:	bf00      	nop
  }
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	885b      	ldrh	r3, [r3, #2]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d106      	bne.n	800b292 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f92a 	bl	800b4e6 <USBD_CtlSendStatus>
  }
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b082      	sub	sp, #8
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2aa:	3b01      	subs	r3, #1
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d80b      	bhi.n	800b2c8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	885b      	ldrh	r3, [r3, #2]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d10c      	bne.n	800b2d2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f910 	bl	800b4e6 <USBD_CtlSendStatus>
      }
      break;
 800b2c6:	e004      	b.n	800b2d2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f840 	bl	800b350 <USBD_CtlError>
      break;
 800b2d0:	e000      	b.n	800b2d4 <USBD_ClrFeature+0x3a>
      break;
 800b2d2:	bf00      	nop
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	781a      	ldrb	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	781a      	ldrb	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7ff faa8 	bl	800a85c <SWAPBYTE>
 800b30c:	4603      	mov	r3, r0
 800b30e:	461a      	mov	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	3301      	adds	r3, #1
 800b318:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff fa9b 	bl	800a85c <SWAPBYTE>
 800b326:	4603      	mov	r3, r0
 800b328:	461a      	mov	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3301      	adds	r3, #1
 800b332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff fa8e 	bl	800a85c <SWAPBYTE>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	80da      	strh	r2, [r3, #6]
}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b35a:	2180      	movs	r1, #128	; 0x80
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fcd7 	bl	800bd10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b362:	2100      	movs	r1, #0
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fcd3 	bl	800bd10 <USBD_LL_StallEP>
}
 800b36a:	bf00      	nop
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b086      	sub	sp, #24
 800b376:	af00      	add	r7, sp, #0
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	60b9      	str	r1, [r7, #8]
 800b37c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d036      	beq.n	800b3f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b38c:	6938      	ldr	r0, [r7, #16]
 800b38e:	f000 f836 	bl	800b3fe <USBD_GetLen>
 800b392:	4603      	mov	r3, r0
 800b394:	3301      	adds	r3, #1
 800b396:	b29b      	uxth	r3, r3
 800b398:	005b      	lsls	r3, r3, #1
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3a0:	7dfb      	ldrb	r3, [r7, #23]
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	7812      	ldrb	r2, [r2, #0]
 800b3aa:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	2203      	movs	r2, #3
 800b3ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3c2:	e013      	b.n	800b3ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b3c4:	7dfb      	ldrb	r3, [r7, #23]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	693a      	ldr	r2, [r7, #16]
 800b3cc:	7812      	ldrb	r2, [r2, #0]
 800b3ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	613b      	str	r3, [r7, #16]
    idx++;
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e7      	bne.n	800b3c4 <USBD_GetString+0x52>
 800b3f4:	e000      	b.n	800b3f8 <USBD_GetString+0x86>
    return;
 800b3f6:	bf00      	nop
  }
}
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3fe:	b480      	push	{r7}
 800b400:	b085      	sub	sp, #20
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b40e:	e005      	b.n	800b41c <USBD_GetLen+0x1e>
  {
    len++;
 800b410:	7bfb      	ldrb	r3, [r7, #15]
 800b412:	3301      	adds	r3, #1
 800b414:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	3301      	adds	r3, #1
 800b41a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1f5      	bne.n	800b410 <USBD_GetLen+0x12>
  }

  return len;
 800b424:	7bfb      	ldrb	r3, [r7, #15]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	60f8      	str	r0, [r7, #12]
 800b43a:	60b9      	str	r1, [r7, #8]
 800b43c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2202      	movs	r2, #2
 800b442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68ba      	ldr	r2, [r7, #8]
 800b456:	2100      	movs	r1, #0
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fd29 	bl	800beb0 <USBD_LL_Transmit>

  return USBD_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	2100      	movs	r1, #0
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fd18 	bl	800beb0 <USBD_LL_Transmit>

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2203      	movs	r2, #3
 800b49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	68f8      	ldr	r0, [r7, #12]
 800b4b6:	f000 fd33 	bl	800bf20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ba:	2300      	movs	r3, #0
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f000 fd22 	bl	800bf20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}

0800b4e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4e6:	b580      	push	{r7, lr}
 800b4e8:	b082      	sub	sp, #8
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2204      	movs	r2, #4
 800b4f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 fcd7 	bl	800beb0 <USBD_LL_Transmit>

  return USBD_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2205      	movs	r2, #5
 800b518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b51c:	2300      	movs	r3, #0
 800b51e:	2200      	movs	r2, #0
 800b520:	2100      	movs	r1, #0
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 fcfc 	bl	800bf20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
	...

0800b534 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b538:	2200      	movs	r2, #0
 800b53a:	4912      	ldr	r1, [pc, #72]	; (800b584 <MX_USB_DEVICE_Init+0x50>)
 800b53c:	4812      	ldr	r0, [pc, #72]	; (800b588 <MX_USB_DEVICE_Init+0x54>)
 800b53e:	f7fe ff09 	bl	800a354 <USBD_Init>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b548:	f7f5 fa68 	bl	8000a1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b54c:	490f      	ldr	r1, [pc, #60]	; (800b58c <MX_USB_DEVICE_Init+0x58>)
 800b54e:	480e      	ldr	r0, [pc, #56]	; (800b588 <MX_USB_DEVICE_Init+0x54>)
 800b550:	f7fe ff30 	bl	800a3b4 <USBD_RegisterClass>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b55a:	f7f5 fa5f 	bl	8000a1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b55e:	490c      	ldr	r1, [pc, #48]	; (800b590 <MX_USB_DEVICE_Init+0x5c>)
 800b560:	4809      	ldr	r0, [pc, #36]	; (800b588 <MX_USB_DEVICE_Init+0x54>)
 800b562:	f7fe fe8b 	bl	800a27c <USBD_CDC_RegisterInterface>
 800b566:	4603      	mov	r3, r0
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b56c:	f7f5 fa56 	bl	8000a1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b570:	4805      	ldr	r0, [pc, #20]	; (800b588 <MX_USB_DEVICE_Init+0x54>)
 800b572:	f7fe ff46 	bl	800a402 <USBD_Start>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b57c:	f7f5 fa4e 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b580:	bf00      	nop
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000130 	.word	0x20000130
 800b588:	200003c4 	.word	0x200003c4
 800b58c:	20000018 	.word	0x20000018
 800b590:	2000011c 	.word	0x2000011c

0800b594 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b598:	2200      	movs	r2, #0
 800b59a:	4905      	ldr	r1, [pc, #20]	; (800b5b0 <CDC_Init_FS+0x1c>)
 800b59c:	4805      	ldr	r0, [pc, #20]	; (800b5b4 <CDC_Init_FS+0x20>)
 800b59e:	f7fe fe82 	bl	800a2a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5a2:	4905      	ldr	r1, [pc, #20]	; (800b5b8 <CDC_Init_FS+0x24>)
 800b5a4:	4803      	ldr	r0, [pc, #12]	; (800b5b4 <CDC_Init_FS+0x20>)
 800b5a6:	f7fe fe97 	bl	800a2d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	20000a7c 	.word	0x20000a7c
 800b5b4:	200003c4 	.word	0x200003c4
 800b5b8:	20000694 	.word	0x20000694

0800b5bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	6039      	str	r1, [r7, #0]
 800b5d6:	71fb      	strb	r3, [r7, #7]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b5dc:	79fb      	ldrb	r3, [r7, #7]
 800b5de:	2b23      	cmp	r3, #35	; 0x23
 800b5e0:	d84a      	bhi.n	800b678 <CDC_Control_FS+0xac>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <CDC_Control_FS+0x1c>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b679 	.word	0x0800b679
 800b5ec:	0800b679 	.word	0x0800b679
 800b5f0:	0800b679 	.word	0x0800b679
 800b5f4:	0800b679 	.word	0x0800b679
 800b5f8:	0800b679 	.word	0x0800b679
 800b5fc:	0800b679 	.word	0x0800b679
 800b600:	0800b679 	.word	0x0800b679
 800b604:	0800b679 	.word	0x0800b679
 800b608:	0800b679 	.word	0x0800b679
 800b60c:	0800b679 	.word	0x0800b679
 800b610:	0800b679 	.word	0x0800b679
 800b614:	0800b679 	.word	0x0800b679
 800b618:	0800b679 	.word	0x0800b679
 800b61c:	0800b679 	.word	0x0800b679
 800b620:	0800b679 	.word	0x0800b679
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b679 	.word	0x0800b679
 800b62c:	0800b679 	.word	0x0800b679
 800b630:	0800b679 	.word	0x0800b679
 800b634:	0800b679 	.word	0x0800b679
 800b638:	0800b679 	.word	0x0800b679
 800b63c:	0800b679 	.word	0x0800b679
 800b640:	0800b679 	.word	0x0800b679
 800b644:	0800b679 	.word	0x0800b679
 800b648:	0800b679 	.word	0x0800b679
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	0800b679 	.word	0x0800b679
 800b654:	0800b679 	.word	0x0800b679
 800b658:	0800b679 	.word	0x0800b679
 800b65c:	0800b679 	.word	0x0800b679
 800b660:	0800b679 	.word	0x0800b679
 800b664:	0800b679 	.word	0x0800b679
 800b668:	0800b679 	.word	0x0800b679
 800b66c:	0800b679 	.word	0x0800b679
 800b670:	0800b679 	.word	0x0800b679
 800b674:	0800b679 	.word	0x0800b679
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b678:	bf00      	nop
  }

  return (USBD_OK);
 800b67a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	370c      	adds	r7, #12
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr

0800b688 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	4805      	ldr	r0, [pc, #20]	; (800b6ac <CDC_Receive_FS+0x24>)
 800b696:	f7fe fe1f 	bl	800a2d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b69a:	4804      	ldr	r0, [pc, #16]	; (800b6ac <CDC_Receive_FS+0x24>)
 800b69c:	f7fe fe30 	bl	800a300 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6a0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	200003c4 	.word	0x200003c4

0800b6b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b6c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	371c      	adds	r7, #28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
	...

0800b6d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	4603      	mov	r3, r0
 800b6dc:	6039      	str	r1, [r7, #0]
 800b6de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	2212      	movs	r2, #18
 800b6e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6e6:	4b03      	ldr	r3, [pc, #12]	; (800b6f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr
 800b6f4:	20000150 	.word	0x20000150

0800b6f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	4603      	mov	r3, r0
 800b700:	6039      	str	r1, [r7, #0]
 800b702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	2204      	movs	r2, #4
 800b708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b70a:	4b03      	ldr	r3, [pc, #12]	; (800b718 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	20000170 	.word	0x20000170

0800b71c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d105      	bne.n	800b73a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	4907      	ldr	r1, [pc, #28]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
 800b732:	4808      	ldr	r0, [pc, #32]	; (800b754 <USBD_FS_ProductStrDescriptor+0x38>)
 800b734:	f7ff fe1d 	bl	800b372 <USBD_GetString>
 800b738:	e004      	b.n	800b744 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	4904      	ldr	r1, [pc, #16]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
 800b73e:	4805      	ldr	r0, [pc, #20]	; (800b754 <USBD_FS_ProductStrDescriptor+0x38>)
 800b740:	f7ff fe17 	bl	800b372 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b744:	4b02      	ldr	r3, [pc, #8]	; (800b750 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	20000e64 	.word	0x20000e64
 800b754:	0800c504 	.word	0x0800c504

0800b758 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	4603      	mov	r3, r0
 800b760:	6039      	str	r1, [r7, #0]
 800b762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	4904      	ldr	r1, [pc, #16]	; (800b778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b768:	4804      	ldr	r0, [pc, #16]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b76a:	f7ff fe02 	bl	800b372 <USBD_GetString>
  return USBD_StrDesc;
 800b76e:	4b02      	ldr	r3, [pc, #8]	; (800b778 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	20000e64 	.word	0x20000e64
 800b77c:	0800c51c 	.word	0x0800c51c

0800b780 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	6039      	str	r1, [r7, #0]
 800b78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	221a      	movs	r2, #26
 800b790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b792:	f000 f855 	bl	800b840 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b796:	4b02      	ldr	r3, [pc, #8]	; (800b7a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000174 	.word	0x20000174

0800b7a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d105      	bne.n	800b7c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4907      	ldr	r1, [pc, #28]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ba:	4808      	ldr	r0, [pc, #32]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7bc:	f7ff fdd9 	bl	800b372 <USBD_GetString>
 800b7c0:	e004      	b.n	800b7cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4904      	ldr	r1, [pc, #16]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7c6:	4805      	ldr	r0, [pc, #20]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c8:	f7ff fdd3 	bl	800b372 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20000e64 	.word	0x20000e64
 800b7dc:	0800c530 	.word	0x0800c530

0800b7e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6039      	str	r1, [r7, #0]
 800b7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d105      	bne.n	800b7fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	4907      	ldr	r1, [pc, #28]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7f6:	4808      	ldr	r0, [pc, #32]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7f8:	f7ff fdbb 	bl	800b372 <USBD_GetString>
 800b7fc:	e004      	b.n	800b808 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4904      	ldr	r1, [pc, #16]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b802:	4805      	ldr	r0, [pc, #20]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b804:	f7ff fdb5 	bl	800b372 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b808:	4b02      	ldr	r3, [pc, #8]	; (800b814 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20000e64 	.word	0x20000e64
 800b818:	0800c53c 	.word	0x0800c53c

0800b81c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	6039      	str	r1, [r7, #0]
 800b826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	220c      	movs	r2, #12
 800b82c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b82e:	4b03      	ldr	r3, [pc, #12]	; (800b83c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000164 	.word	0x20000164

0800b840 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b846:	4b0f      	ldr	r3, [pc, #60]	; (800b884 <Get_SerialNum+0x44>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b84c:	4b0e      	ldr	r3, [pc, #56]	; (800b888 <Get_SerialNum+0x48>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b852:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <Get_SerialNum+0x4c>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4413      	add	r3, r2
 800b85e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d009      	beq.n	800b87a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b866:	2208      	movs	r2, #8
 800b868:	4909      	ldr	r1, [pc, #36]	; (800b890 <Get_SerialNum+0x50>)
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f000 f814 	bl	800b898 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b870:	2204      	movs	r2, #4
 800b872:	4908      	ldr	r1, [pc, #32]	; (800b894 <Get_SerialNum+0x54>)
 800b874:	68b8      	ldr	r0, [r7, #8]
 800b876:	f000 f80f 	bl	800b898 <IntToUnicode>
  }
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	1fff7590 	.word	0x1fff7590
 800b888:	1fff7594 	.word	0x1fff7594
 800b88c:	1fff7598 	.word	0x1fff7598
 800b890:	20000176 	.word	0x20000176
 800b894:	20000186 	.word	0x20000186

0800b898 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	75fb      	strb	r3, [r7, #23]
 800b8ae:	e027      	b.n	800b900 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	0f1b      	lsrs	r3, r3, #28
 800b8b4:	2b09      	cmp	r3, #9
 800b8b6:	d80b      	bhi.n	800b8d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	0f1b      	lsrs	r3, r3, #28
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
 800b8c0:	005b      	lsls	r3, r3, #1
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	440b      	add	r3, r1
 800b8c8:	3230      	adds	r2, #48	; 0x30
 800b8ca:	b2d2      	uxtb	r2, r2
 800b8cc:	701a      	strb	r2, [r3, #0]
 800b8ce:	e00a      	b.n	800b8e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	0f1b      	lsrs	r3, r3, #28
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	005b      	lsls	r3, r3, #1
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	440b      	add	r3, r1
 800b8e0:	3237      	adds	r2, #55	; 0x37
 800b8e2:	b2d2      	uxtb	r2, r2
 800b8e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	011b      	lsls	r3, r3, #4
 800b8ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8ec:	7dfb      	ldrb	r3, [r7, #23]
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	68ba      	ldr	r2, [r7, #8]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8fa:	7dfb      	ldrb	r3, [r7, #23]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	75fb      	strb	r3, [r7, #23]
 800b900:	7dfa      	ldrb	r2, [r7, #23]
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	429a      	cmp	r2, r3
 800b906:	d3d3      	bcc.n	800b8b0 <IntToUnicode+0x18>
  }
}
 800b908:	bf00      	nop
 800b90a:	371c      	adds	r7, #28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b08a      	sub	sp, #40	; 0x28
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b91c:	f107 0314 	add.w	r3, r7, #20
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	605a      	str	r2, [r3, #4]
 800b926:	609a      	str	r2, [r3, #8]
 800b928:	60da      	str	r2, [r3, #12]
 800b92a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a1c      	ldr	r2, [pc, #112]	; (800b9a4 <HAL_PCD_MspInit+0x90>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d131      	bne.n	800b99a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b936:	4b1c      	ldr	r3, [pc, #112]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b93a:	4a1b      	ldr	r2, [pc, #108]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b93c:	f043 0301 	orr.w	r3, r3, #1
 800b940:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b942:	4b19      	ldr	r3, [pc, #100]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	613b      	str	r3, [r7, #16]
 800b94c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b94e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b954:	2302      	movs	r3, #2
 800b956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b95c:	2303      	movs	r3, #3
 800b95e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800b960:	230a      	movs	r3, #10
 800b962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b964:	f107 0314 	add.w	r3, r7, #20
 800b968:	4619      	mov	r1, r3
 800b96a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b96e:	f7f8 fe6f 	bl	8004650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b972:	4b0d      	ldr	r3, [pc, #52]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b976:	4a0c      	ldr	r2, [pc, #48]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b978:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b97c:	6593      	str	r3, [r2, #88]	; 0x58
 800b97e:	4b0a      	ldr	r3, [pc, #40]	; (800b9a8 <HAL_PCD_MspInit+0x94>)
 800b980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b98a:	2200      	movs	r2, #0
 800b98c:	2100      	movs	r1, #0
 800b98e:	2043      	movs	r0, #67	; 0x43
 800b990:	f7f8 fe27 	bl	80045e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b994:	2043      	movs	r0, #67	; 0x43
 800b996:	f7f8 fe40 	bl	800461a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b99a:	bf00      	nop
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40006800 	.word	0x40006800
 800b9a8:	40021000 	.word	0x40021000

0800b9ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fd68 	bl	800a498 <USBD_LL_SetupStage>
}
 800b9c8:	bf00      	nop
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}

0800b9d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	440b      	add	r3, r1
 800b9f0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f7fe fda0 	bl	800a53e <USBD_LL_DataOutStage>
}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ba18:	78fa      	ldrb	r2, [r7, #3]
 800ba1a:	6879      	ldr	r1, [r7, #4]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	440b      	add	r3, r1
 800ba26:	333c      	adds	r3, #60	; 0x3c
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	78fb      	ldrb	r3, [r7, #3]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f7fe fde9 	bl	800a604 <USBD_LL_DataInStage>
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7fe feed 	bl	800a828 <USBD_LL_SOF>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d001      	beq.n	800ba6e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba6a:	f7f4 ffd7 	bl	8000a1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba74:	7bfa      	ldrb	r2, [r7, #15]
 800ba76:	4611      	mov	r1, r2
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fe fe9a 	bl	800a7b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7fe fe53 	bl	800a730 <USBD_LL_Reset>
}
 800ba8a:	bf00      	nop
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7fe fe95 	bl	800a7d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d005      	beq.n	800babc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bab0:	4b04      	ldr	r3, [pc, #16]	; (800bac4 <HAL_PCD_SuspendCallback+0x30>)
 800bab2:	691b      	ldr	r3, [r3, #16]
 800bab4:	4a03      	ldr	r2, [pc, #12]	; (800bac4 <HAL_PCD_SuspendCallback+0x30>)
 800bab6:	f043 0306 	orr.w	r3, r3, #6
 800baba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800babc:	bf00      	nop
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	e000ed00 	.word	0xe000ed00

0800bac8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d007      	beq.n	800bae8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bad8:	4b08      	ldr	r3, [pc, #32]	; (800bafc <HAL_PCD_ResumeCallback+0x34>)
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	4a07      	ldr	r2, [pc, #28]	; (800bafc <HAL_PCD_ResumeCallback+0x34>)
 800bade:	f023 0306 	bic.w	r3, r3, #6
 800bae2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bae4:	f000 fa9e 	bl	800c024 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fe84 	bl	800a7fc <USBD_LL_Resume>
}
 800baf4:	bf00      	nop
 800baf6:	3708      	adds	r7, #8
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	e000ed00 	.word	0xe000ed00

0800bb00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800bb08:	f7fa fc64 	bl	80063d4 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bb0c:	4a2b      	ldr	r2, [pc, #172]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	4a29      	ldr	r2, [pc, #164]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb1e:	4a28      	ldr	r2, [pc, #160]	; (800bbc0 <USBD_LL_Init+0xc0>)
 800bb20:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bb22:	4b26      	ldr	r3, [pc, #152]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb24:	2208      	movs	r2, #8
 800bb26:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bb28:	4b24      	ldr	r3, [pc, #144]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb2e:	4b23      	ldr	r3, [pc, #140]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb30:	2202      	movs	r2, #2
 800bb32:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bb34:	4b21      	ldr	r3, [pc, #132]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb36:	2200      	movs	r2, #0
 800bb38:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bb3a:	4b20      	ldr	r3, [pc, #128]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bb40:	4b1e      	ldr	r3, [pc, #120]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bb46:	4b1d      	ldr	r3, [pc, #116]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb48:	2200      	movs	r2, #0
 800bb4a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bb4c:	481b      	ldr	r0, [pc, #108]	; (800bbbc <USBD_LL_Init+0xbc>)
 800bb4e:	f7f9 f847 	bl	8004be0 <HAL_PCD_Init>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d001      	beq.n	800bb5c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800bb58:	f7f4 ff60 	bl	8000a1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb62:	2318      	movs	r3, #24
 800bb64:	2200      	movs	r2, #0
 800bb66:	2100      	movs	r1, #0
 800bb68:	f7fa fb62 	bl	8006230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb72:	2358      	movs	r3, #88	; 0x58
 800bb74:	2200      	movs	r2, #0
 800bb76:	2180      	movs	r1, #128	; 0x80
 800bb78:	f7fa fb5a 	bl	8006230 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb82:	23c0      	movs	r3, #192	; 0xc0
 800bb84:	2200      	movs	r2, #0
 800bb86:	2181      	movs	r1, #129	; 0x81
 800bb88:	f7fa fb52 	bl	8006230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb92:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb96:	2200      	movs	r2, #0
 800bb98:	2101      	movs	r1, #1
 800bb9a:	f7fa fb49 	bl	8006230 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2182      	movs	r1, #130	; 0x82
 800bbac:	f7fa fb40 	bl	8006230 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3708      	adds	r7, #8
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20001064 	.word	0x20001064
 800bbc0:	40006800 	.word	0x40006800

0800bbc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7f9 f912 	bl	8004e04 <HAL_PCD_Start>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bbe4:	7bbb      	ldrb	r3, [r7, #14]
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d816      	bhi.n	800bc18 <USBD_LL_Start+0x54>
 800bbea:	a201      	add	r2, pc, #4	; (adr r2, 800bbf0 <USBD_LL_Start+0x2c>)
 800bbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc07 	.word	0x0800bc07
 800bbf8:	0800bc0d 	.word	0x0800bc0d
 800bbfc:	0800bc13 	.word	0x0800bc13
    case HAL_OK :
      usb_status = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73fb      	strb	r3, [r7, #15]
    break;
 800bc04:	e00b      	b.n	800bc1e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc06:	2303      	movs	r3, #3
 800bc08:	73fb      	strb	r3, [r7, #15]
    break;
 800bc0a:	e008      	b.n	800bc1e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc10:	e005      	b.n	800bc1e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc12:	2303      	movs	r3, #3
 800bc14:	73fb      	strb	r3, [r7, #15]
    break;
 800bc16:	e002      	b.n	800bc1e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc1c:	bf00      	nop
  }
  return usb_status;
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	4608      	mov	r0, r1
 800bc32:	4611      	mov	r1, r2
 800bc34:	461a      	mov	r2, r3
 800bc36:	4603      	mov	r3, r0
 800bc38:	70fb      	strb	r3, [r7, #3]
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	70bb      	strb	r3, [r7, #2]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc46:	2300      	movs	r3, #0
 800bc48:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc50:	78bb      	ldrb	r3, [r7, #2]
 800bc52:	883a      	ldrh	r2, [r7, #0]
 800bc54:	78f9      	ldrb	r1, [r7, #3]
 800bc56:	f7f9 fa6a 	bl	800512e <HAL_PCD_EP_Open>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	2b03      	cmp	r3, #3
 800bc62:	d817      	bhi.n	800bc94 <USBD_LL_OpenEP+0x6c>
 800bc64:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBD_LL_OpenEP+0x44>)
 800bc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6a:	bf00      	nop
 800bc6c:	0800bc7d 	.word	0x0800bc7d
 800bc70:	0800bc83 	.word	0x0800bc83
 800bc74:	0800bc89 	.word	0x0800bc89
 800bc78:	0800bc8f 	.word	0x0800bc8f
    case HAL_OK :
      usb_status = USBD_OK;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc80:	e00b      	b.n	800bc9a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc82:	2303      	movs	r3, #3
 800bc84:	73fb      	strb	r3, [r7, #15]
    break;
 800bc86:	e008      	b.n	800bc9a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc8c:	e005      	b.n	800bc9a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	73fb      	strb	r3, [r7, #15]
    break;
 800bc92:	e002      	b.n	800bc9a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800bc94:	2303      	movs	r3, #3
 800bc96:	73fb      	strb	r3, [r7, #15]
    break;
 800bc98:	bf00      	nop
  }
  return usb_status;
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcbe:	78fa      	ldrb	r2, [r7, #3]
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f9 fa99 	bl	80051fa <HAL_PCD_EP_Close>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	d816      	bhi.n	800bd00 <USBD_LL_CloseEP+0x5c>
 800bcd2:	a201      	add	r2, pc, #4	; (adr r2, 800bcd8 <USBD_LL_CloseEP+0x34>)
 800bcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd8:	0800bce9 	.word	0x0800bce9
 800bcdc:	0800bcef 	.word	0x0800bcef
 800bce0:	0800bcf5 	.word	0x0800bcf5
 800bce4:	0800bcfb 	.word	0x0800bcfb
    case HAL_OK :
      usb_status = USBD_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	73fb      	strb	r3, [r7, #15]
    break;
 800bcec:	e00b      	b.n	800bd06 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bcee:	2303      	movs	r3, #3
 800bcf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf2:	e008      	b.n	800bd06 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bcf8:	e005      	b.n	800bd06 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	73fb      	strb	r3, [r7, #15]
    break;
 800bcfe:	e002      	b.n	800bd06 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd00:	2303      	movs	r3, #3
 800bd02:	73fb      	strb	r3, [r7, #15]
    break;
 800bd04:	bf00      	nop
  }
  return usb_status;
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	460b      	mov	r3, r1
 800bd1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7f9 fb43 	bl	80053ba <HAL_PCD_EP_SetStall>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	d816      	bhi.n	800bd6c <USBD_LL_StallEP+0x5c>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <USBD_LL_StallEP+0x34>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd55 	.word	0x0800bd55
 800bd48:	0800bd5b 	.word	0x0800bd5b
 800bd4c:	0800bd61 	.word	0x0800bd61
 800bd50:	0800bd67 	.word	0x0800bd67
    case HAL_OK :
      usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
    break;
 800bd58:	e00b      	b.n	800bd72 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5e:	e008      	b.n	800bd72 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e005      	b.n	800bd72 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd66:	2303      	movs	r3, #3
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	e002      	b.n	800bd72 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd70:	bf00      	nop
  }
  return usb_status;
 800bd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd96:	78fa      	ldrb	r2, [r7, #3]
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7f9 fb6d 	bl	800547a <HAL_PCD_EP_ClrStall>
 800bda0:	4603      	mov	r3, r0
 800bda2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	d816      	bhi.n	800bdd8 <USBD_LL_ClearStallEP+0x5c>
 800bdaa:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <USBD_LL_ClearStallEP+0x34>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800bdc1 	.word	0x0800bdc1
 800bdb4:	0800bdc7 	.word	0x0800bdc7
 800bdb8:	0800bdcd 	.word	0x0800bdcd
 800bdbc:	0800bdd3 	.word	0x0800bdd3
    case HAL_OK :
      usb_status = USBD_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800bdc4:	e00b      	b.n	800bdde <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800bdca:	e008      	b.n	800bdde <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd0:	e005      	b.n	800bdde <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bdd6:	e002      	b.n	800bdde <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bdd8:	2303      	movs	r3, #3
 800bdda:	73fb      	strb	r3, [r7, #15]
    break;
 800bddc:	bf00      	nop
  }
  return usb_status;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bdfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be00:	2b00      	cmp	r3, #0
 800be02:	da0c      	bge.n	800be1e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be04:	78fb      	ldrb	r3, [r7, #3]
 800be06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0a:	68f9      	ldr	r1, [r7, #12]
 800be0c:	1c5a      	adds	r2, r3, #1
 800be0e:	4613      	mov	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4413      	add	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	440b      	add	r3, r1
 800be18:	3302      	adds	r3, #2
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	e00b      	b.n	800be36 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be1e:	78fb      	ldrb	r3, [r7, #3]
 800be20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be24:	68f9      	ldr	r1, [r7, #12]
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	440b      	add	r3, r1
 800be30:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800be34:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr
	...

0800be44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be5e:	78fa      	ldrb	r2, [r7, #3]
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7f9 f93e 	bl	80050e4 <HAL_PCD_SetAddress>
 800be68:	4603      	mov	r3, r0
 800be6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	2b03      	cmp	r3, #3
 800be70:	d816      	bhi.n	800bea0 <USBD_LL_SetUSBAddress+0x5c>
 800be72:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <USBD_LL_SetUSBAddress+0x34>)
 800be74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be78:	0800be89 	.word	0x0800be89
 800be7c:	0800be8f 	.word	0x0800be8f
 800be80:	0800be95 	.word	0x0800be95
 800be84:	0800be9b 	.word	0x0800be9b
    case HAL_OK :
      usb_status = USBD_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
    break;
 800be8c:	e00b      	b.n	800bea6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be8e:	2303      	movs	r3, #3
 800be90:	73fb      	strb	r3, [r7, #15]
    break;
 800be92:	e008      	b.n	800bea6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be94:	2301      	movs	r3, #1
 800be96:	73fb      	strb	r3, [r7, #15]
    break;
 800be98:	e005      	b.n	800bea6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be9a:	2303      	movs	r3, #3
 800be9c:	73fb      	strb	r3, [r7, #15]
    break;
 800be9e:	e002      	b.n	800bea6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bea0:	2303      	movs	r3, #3
 800bea2:	73fb      	strb	r3, [r7, #15]
    break;
 800bea4:	bf00      	nop
  }
  return usb_status;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3710      	adds	r7, #16
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b086      	sub	sp, #24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	607a      	str	r2, [r7, #4]
 800beba:	603b      	str	r3, [r7, #0]
 800bebc:	460b      	mov	r3, r1
 800bebe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bece:	7af9      	ldrb	r1, [r7, #11]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	f7f9 fa2e 	bl	8005334 <HAL_PCD_EP_Transmit>
 800bed8:	4603      	mov	r3, r0
 800beda:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bedc:	7dbb      	ldrb	r3, [r7, #22]
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d816      	bhi.n	800bf10 <USBD_LL_Transmit+0x60>
 800bee2:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <USBD_LL_Transmit+0x38>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bef9 	.word	0x0800bef9
 800beec:	0800beff 	.word	0x0800beff
 800bef0:	0800bf05 	.word	0x0800bf05
 800bef4:	0800bf0b 	.word	0x0800bf0b
    case HAL_OK :
      usb_status = USBD_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	75fb      	strb	r3, [r7, #23]
    break;
 800befc:	e00b      	b.n	800bf16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	75fb      	strb	r3, [r7, #23]
    break;
 800bf02:	e008      	b.n	800bf16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf04:	2301      	movs	r3, #1
 800bf06:	75fb      	strb	r3, [r7, #23]
    break;
 800bf08:	e005      	b.n	800bf16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf0e:	e002      	b.n	800bf16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf10:	2303      	movs	r3, #3
 800bf12:	75fb      	strb	r3, [r7, #23]
    break;
 800bf14:	bf00      	nop
  }
  return usb_status;
 800bf16:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	607a      	str	r2, [r7, #4]
 800bf2a:	603b      	str	r3, [r7, #0]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf30:	2300      	movs	r3, #0
 800bf32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf34:	2300      	movs	r3, #0
 800bf36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bf3e:	7af9      	ldrb	r1, [r7, #11]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	f7f9 f9a1 	bl	800528a <HAL_PCD_EP_Receive>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bf4c:	7dbb      	ldrb	r3, [r7, #22]
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d816      	bhi.n	800bf80 <USBD_LL_PrepareReceive+0x60>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <USBD_LL_PrepareReceive+0x38>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf69 	.word	0x0800bf69
 800bf5c:	0800bf6f 	.word	0x0800bf6f
 800bf60:	0800bf75 	.word	0x0800bf75
 800bf64:	0800bf7b 	.word	0x0800bf7b
    case HAL_OK :
      usb_status = USBD_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	75fb      	strb	r3, [r7, #23]
    break;
 800bf6c:	e00b      	b.n	800bf86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	75fb      	strb	r3, [r7, #23]
    break;
 800bf72:	e008      	b.n	800bf86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bf74:	2301      	movs	r3, #1
 800bf76:	75fb      	strb	r3, [r7, #23]
    break;
 800bf78:	e005      	b.n	800bf86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	75fb      	strb	r3, [r7, #23]
    break;
 800bf7e:	e002      	b.n	800bf86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bf80:	2303      	movs	r3, #3
 800bf82:	75fb      	strb	r3, [r7, #23]
    break;
 800bf84:	bf00      	nop
  }
  return usb_status;
 800bf86:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f9 f9ac 	bl	8005304 <HAL_PCD_EP_GetRxCount>
 800bfac:	4603      	mov	r3, r0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bfc4:	78fb      	ldrb	r3, [r7, #3]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <HAL_PCDEx_LPM_Callback+0x18>
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d013      	beq.n	800bff6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bfce:	e023      	b.n	800c018 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	699b      	ldr	r3, [r3, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfd8:	f000 f824 	bl	800c024 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfdc:	4b10      	ldr	r3, [pc, #64]	; (800c020 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	4a0f      	ldr	r2, [pc, #60]	; (800c020 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfe2:	f023 0306 	bic.w	r3, r3, #6
 800bfe6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe fc04 	bl	800a7fc <USBD_LL_Resume>
    break;
 800bff4:	e010      	b.n	800c018 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe fbe8 	bl	800a7d2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	699b      	ldr	r3, [r3, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c00a:	4b05      	ldr	r3, [pc, #20]	; (800c020 <HAL_PCDEx_LPM_Callback+0x68>)
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	4a04      	ldr	r2, [pc, #16]	; (800c020 <HAL_PCDEx_LPM_Callback+0x68>)
 800c010:	f043 0306 	orr.w	r3, r3, #6
 800c014:	6113      	str	r3, [r2, #16]
    break;
 800c016:	bf00      	nop
}
 800c018:	bf00      	nop
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	e000ed00 	.word	0xe000ed00

0800c024 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800c028:	bf00      	nop
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <_Znwj>:
 800c032:	b510      	push	{r4, lr}
 800c034:	2800      	cmp	r0, #0
 800c036:	bf14      	ite	ne
 800c038:	4604      	movne	r4, r0
 800c03a:	2401      	moveq	r4, #1
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 f905 	bl	800c24c <malloc>
 800c042:	b930      	cbnz	r0, 800c052 <_Znwj+0x20>
 800c044:	f000 f806 	bl	800c054 <_ZSt15get_new_handlerv>
 800c048:	b908      	cbnz	r0, 800c04e <_Znwj+0x1c>
 800c04a:	f000 f8cd 	bl	800c1e8 <abort>
 800c04e:	4780      	blx	r0
 800c050:	e7f4      	b.n	800c03c <_Znwj+0xa>
 800c052:	bd10      	pop	{r4, pc}

0800c054 <_ZSt15get_new_handlerv>:
 800c054:	4b02      	ldr	r3, [pc, #8]	; (800c060 <_ZSt15get_new_handlerv+0xc>)
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	f3bf 8f5b 	dmb	ish
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	2000031c 	.word	0x2000031c

0800c064 <_ZNSaIcEC1Ev>:
 800c064:	4770      	bx	lr

0800c066 <_ZNSaIcED1Ev>:
 800c066:	4770      	bx	lr

0800c068 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800c068:	b10a      	cbz	r2, 800c06e <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800c06a:	f000 b8ff 	b.w	800c26c <memcpy>
 800c06e:	4770      	bx	lr

0800c070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800c070:	b508      	push	{r3, lr}
 800c072:	680b      	ldr	r3, [r1, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da02      	bge.n	800c07e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800c078:	4809      	ldr	r0, [pc, #36]	; (800c0a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800c07a:	f000 f8b2 	bl	800c1e2 <_ZSt20__throw_length_errorPKc>
 800c07e:	4293      	cmp	r3, r2
 800c080:	d908      	bls.n	800c094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800c082:	0052      	lsls	r2, r2, #1
 800c084:	4293      	cmp	r3, r2
 800c086:	d205      	bcs.n	800c094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800c088:	2a00      	cmp	r2, #0
 800c08a:	bfb6      	itet	lt
 800c08c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c090:	600a      	strge	r2, [r1, #0]
 800c092:	600b      	strlt	r3, [r1, #0]
 800c094:	6808      	ldr	r0, [r1, #0]
 800c096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c09a:	3001      	adds	r0, #1
 800c09c:	f7ff bfc9 	b.w	800c032 <_Znwj>
 800c0a0:	0800c5b6 	.word	0x0800c5b6

0800c0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f853 0b08 	ldr.w	r0, [r3], #8
 800c0aa:	4298      	cmp	r0, r3
 800c0ac:	d001      	beq.n	800c0b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800c0ae:	f000 b893 	b.w	800c1d8 <_ZdlPv>
 800c0b2:	4770      	bx	lr

0800c0b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800c0b4:	2a01      	cmp	r2, #1
 800c0b6:	b510      	push	{r4, lr}
 800c0b8:	d102      	bne.n	800c0c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800c0ba:	780a      	ldrb	r2, [r1, #0]
 800c0bc:	7002      	strb	r2, [r0, #0]
 800c0be:	bd10      	pop	{r4, pc}
 800c0c0:	f7ff ffd2 	bl	800c068 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800c0c4:	e7fb      	b.n	800c0be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800c0c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800c0c6:	b508      	push	{r3, lr}
 800c0c8:	1a52      	subs	r2, r2, r1
 800c0ca:	f7ff fff3 	bl	800c0b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800c0ce:	bd08      	pop	{r3, pc}

0800c0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800c0d0:	b508      	push	{r3, lr}
 800c0d2:	1a52      	subs	r2, r2, r1
 800c0d4:	f7ff ffee 	bl	800c0b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800c0d8:	bd08      	pop	{r3, pc}

0800c0da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800c0da:	f100 0208 	add.w	r2, r0, #8
 800c0de:	6002      	str	r2, [r0, #0]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	6042      	str	r2, [r0, #4]
 800c0e4:	7202      	strb	r2, [r0, #8]
 800c0e6:	4770      	bx	lr

0800c0e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	f7ff ffda 	bl	800c0a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	bd10      	pop	{r4, pc}

0800c0f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800c0f4:	6840      	ldr	r0, [r0, #4]
 800c0f6:	4770      	bx	lr

0800c0f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800c0f8:	6800      	ldr	r0, [r0, #0]
 800c0fa:	4408      	add	r0, r1
 800c0fc:	4770      	bx	lr
	...

0800c100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800c100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c102:	4604      	mov	r4, r0
 800c104:	4616      	mov	r6, r2
 800c106:	460d      	mov	r5, r1
 800c108:	b919      	cbnz	r1, 800c112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800c10a:	b112      	cbz	r2, 800c112 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800c10c:	480d      	ldr	r0, [pc, #52]	; (800c144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800c10e:	f000 f865 	bl	800c1dc <_ZSt19__throw_logic_errorPKc>
 800c112:	1b73      	subs	r3, r6, r5
 800c114:	2b0f      	cmp	r3, #15
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	d907      	bls.n	800c12a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800c11a:	2200      	movs	r2, #0
 800c11c:	a901      	add	r1, sp, #4
 800c11e:	4620      	mov	r0, r4
 800c120:	f7ff ffa6 	bl	800c070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	6020      	str	r0, [r4, #0]
 800c128:	60a3      	str	r3, [r4, #8]
 800c12a:	4632      	mov	r2, r6
 800c12c:	4629      	mov	r1, r5
 800c12e:	6820      	ldr	r0, [r4, #0]
 800c130:	f7ff ffc9 	bl	800c0c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800c134:	9b01      	ldr	r3, [sp, #4]
 800c136:	6822      	ldr	r2, [r4, #0]
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	2100      	movs	r1, #0
 800c13c:	54d1      	strb	r1, [r2, r3]
 800c13e:	b002      	add	sp, #8
 800c140:	bd70      	pop	{r4, r5, r6, pc}
 800c142:	bf00      	nop
 800c144:	0800c58c 	.word	0x0800c58c

0800c148 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	f100 0208 	add.w	r2, r0, #8
 800c14e:	6002      	str	r2, [r0, #0]
 800c150:	e9d1 1200 	ldrd	r1, r2, [r1]
 800c154:	4604      	mov	r4, r0
 800c156:	f04f 0300 	mov.w	r3, #0
 800c15a:	440a      	add	r2, r1
 800c15c:	f7ff ffd0 	bl	800c100 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800c160:	4620      	mov	r0, r4
 800c162:	bd10      	pop	{r4, pc}

0800c164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800c164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c166:	4604      	mov	r4, r0
 800c168:	4616      	mov	r6, r2
 800c16a:	460d      	mov	r5, r1
 800c16c:	b919      	cbnz	r1, 800c176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800c16e:	b112      	cbz	r2, 800c176 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800c170:	480d      	ldr	r0, [pc, #52]	; (800c1a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800c172:	f000 f833 	bl	800c1dc <_ZSt19__throw_logic_errorPKc>
 800c176:	1b73      	subs	r3, r6, r5
 800c178:	2b0f      	cmp	r3, #15
 800c17a:	9301      	str	r3, [sp, #4]
 800c17c:	d907      	bls.n	800c18e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800c17e:	2200      	movs	r2, #0
 800c180:	a901      	add	r1, sp, #4
 800c182:	4620      	mov	r0, r4
 800c184:	f7ff ff74 	bl	800c070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800c188:	9b01      	ldr	r3, [sp, #4]
 800c18a:	6020      	str	r0, [r4, #0]
 800c18c:	60a3      	str	r3, [r4, #8]
 800c18e:	4632      	mov	r2, r6
 800c190:	4629      	mov	r1, r5
 800c192:	6820      	ldr	r0, [r4, #0]
 800c194:	f7ff ff9c 	bl	800c0d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800c198:	9b01      	ldr	r3, [sp, #4]
 800c19a:	6822      	ldr	r2, [r4, #0]
 800c19c:	6063      	str	r3, [r4, #4]
 800c19e:	2100      	movs	r1, #0
 800c1a0:	54d1      	strb	r1, [r2, r3]
 800c1a2:	b002      	add	sp, #8
 800c1a4:	bd70      	pop	{r4, r5, r6, pc}
 800c1a6:	bf00      	nop
 800c1a8:	0800c58c 	.word	0x0800c58c

0800c1ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	f100 0308 	add.w	r3, r0, #8
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	6003      	str	r3, [r0, #0]
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	b159      	cbz	r1, 800c1d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800c1ba:	4608      	mov	r0, r1
 800c1bc:	f7f4 f806 	bl	80001cc <strlen>
 800c1c0:	182a      	adds	r2, r5, r0
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f04f 0300 	mov.w	r3, #0
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	f7ff ffcb 	bl	800c164 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d6:	e7f4      	b.n	800c1c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800c1d8 <_ZdlPv>:
 800c1d8:	f000 b840 	b.w	800c25c <free>

0800c1dc <_ZSt19__throw_logic_errorPKc>:
 800c1dc:	b508      	push	{r3, lr}
 800c1de:	f000 f803 	bl	800c1e8 <abort>

0800c1e2 <_ZSt20__throw_length_errorPKc>:
 800c1e2:	b508      	push	{r3, lr}
 800c1e4:	f000 f800 	bl	800c1e8 <abort>

0800c1e8 <abort>:
 800c1e8:	b508      	push	{r3, lr}
 800c1ea:	2006      	movs	r0, #6
 800c1ec:	f000 f932 	bl	800c454 <raise>
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	f7f4 fcb7 	bl	8000b64 <_exit>
	...

0800c1f8 <__errno>:
 800c1f8:	4b01      	ldr	r3, [pc, #4]	; (800c200 <__errno+0x8>)
 800c1fa:	6818      	ldr	r0, [r3, #0]
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	20000190 	.word	0x20000190

0800c204 <__libc_init_array>:
 800c204:	b570      	push	{r4, r5, r6, lr}
 800c206:	4e0d      	ldr	r6, [pc, #52]	; (800c23c <__libc_init_array+0x38>)
 800c208:	4c0d      	ldr	r4, [pc, #52]	; (800c240 <__libc_init_array+0x3c>)
 800c20a:	1ba4      	subs	r4, r4, r6
 800c20c:	10a4      	asrs	r4, r4, #2
 800c20e:	2500      	movs	r5, #0
 800c210:	42a5      	cmp	r5, r4
 800c212:	d109      	bne.n	800c228 <__libc_init_array+0x24>
 800c214:	4e0b      	ldr	r6, [pc, #44]	; (800c244 <__libc_init_array+0x40>)
 800c216:	4c0c      	ldr	r4, [pc, #48]	; (800c248 <__libc_init_array+0x44>)
 800c218:	f000 f93a 	bl	800c490 <_init>
 800c21c:	1ba4      	subs	r4, r4, r6
 800c21e:	10a4      	asrs	r4, r4, #2
 800c220:	2500      	movs	r5, #0
 800c222:	42a5      	cmp	r5, r4
 800c224:	d105      	bne.n	800c232 <__libc_init_array+0x2e>
 800c226:	bd70      	pop	{r4, r5, r6, pc}
 800c228:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c22c:	4798      	blx	r3
 800c22e:	3501      	adds	r5, #1
 800c230:	e7ee      	b.n	800c210 <__libc_init_array+0xc>
 800c232:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c236:	4798      	blx	r3
 800c238:	3501      	adds	r5, #1
 800c23a:	e7f2      	b.n	800c222 <__libc_init_array+0x1e>
 800c23c:	0800c5d0 	.word	0x0800c5d0
 800c240:	0800c5d0 	.word	0x0800c5d0
 800c244:	0800c5d0 	.word	0x0800c5d0
 800c248:	0800c5d8 	.word	0x0800c5d8

0800c24c <malloc>:
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <malloc+0xc>)
 800c24e:	4601      	mov	r1, r0
 800c250:	6818      	ldr	r0, [r3, #0]
 800c252:	f000 b86d 	b.w	800c330 <_malloc_r>
 800c256:	bf00      	nop
 800c258:	20000190 	.word	0x20000190

0800c25c <free>:
 800c25c:	4b02      	ldr	r3, [pc, #8]	; (800c268 <free+0xc>)
 800c25e:	4601      	mov	r1, r0
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f000 b817 	b.w	800c294 <_free_r>
 800c266:	bf00      	nop
 800c268:	20000190 	.word	0x20000190

0800c26c <memcpy>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	1e43      	subs	r3, r0, #1
 800c270:	440a      	add	r2, r1
 800c272:	4291      	cmp	r1, r2
 800c274:	d100      	bne.n	800c278 <memcpy+0xc>
 800c276:	bd10      	pop	{r4, pc}
 800c278:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c27c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c280:	e7f7      	b.n	800c272 <memcpy+0x6>

0800c282 <memset>:
 800c282:	4402      	add	r2, r0
 800c284:	4603      	mov	r3, r0
 800c286:	4293      	cmp	r3, r2
 800c288:	d100      	bne.n	800c28c <memset+0xa>
 800c28a:	4770      	bx	lr
 800c28c:	f803 1b01 	strb.w	r1, [r3], #1
 800c290:	e7f9      	b.n	800c286 <memset+0x4>
	...

0800c294 <_free_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4605      	mov	r5, r0
 800c298:	2900      	cmp	r1, #0
 800c29a:	d045      	beq.n	800c328 <_free_r+0x94>
 800c29c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a0:	1f0c      	subs	r4, r1, #4
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	bfb8      	it	lt
 800c2a6:	18e4      	addlt	r4, r4, r3
 800c2a8:	f000 f8f0 	bl	800c48c <__malloc_lock>
 800c2ac:	4a1f      	ldr	r2, [pc, #124]	; (800c32c <_free_r+0x98>)
 800c2ae:	6813      	ldr	r3, [r2, #0]
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	b933      	cbnz	r3, 800c2c2 <_free_r+0x2e>
 800c2b4:	6063      	str	r3, [r4, #4]
 800c2b6:	6014      	str	r4, [r2, #0]
 800c2b8:	4628      	mov	r0, r5
 800c2ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2be:	f000 b8e6 	b.w	800c48e <__malloc_unlock>
 800c2c2:	42a3      	cmp	r3, r4
 800c2c4:	d90c      	bls.n	800c2e0 <_free_r+0x4c>
 800c2c6:	6821      	ldr	r1, [r4, #0]
 800c2c8:	1862      	adds	r2, r4, r1
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	bf04      	itt	eq
 800c2ce:	681a      	ldreq	r2, [r3, #0]
 800c2d0:	685b      	ldreq	r3, [r3, #4]
 800c2d2:	6063      	str	r3, [r4, #4]
 800c2d4:	bf04      	itt	eq
 800c2d6:	1852      	addeq	r2, r2, r1
 800c2d8:	6022      	streq	r2, [r4, #0]
 800c2da:	6004      	str	r4, [r0, #0]
 800c2dc:	e7ec      	b.n	800c2b8 <_free_r+0x24>
 800c2de:	4613      	mov	r3, r2
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	b10a      	cbz	r2, 800c2e8 <_free_r+0x54>
 800c2e4:	42a2      	cmp	r2, r4
 800c2e6:	d9fa      	bls.n	800c2de <_free_r+0x4a>
 800c2e8:	6819      	ldr	r1, [r3, #0]
 800c2ea:	1858      	adds	r0, r3, r1
 800c2ec:	42a0      	cmp	r0, r4
 800c2ee:	d10b      	bne.n	800c308 <_free_r+0x74>
 800c2f0:	6820      	ldr	r0, [r4, #0]
 800c2f2:	4401      	add	r1, r0
 800c2f4:	1858      	adds	r0, r3, r1
 800c2f6:	4282      	cmp	r2, r0
 800c2f8:	6019      	str	r1, [r3, #0]
 800c2fa:	d1dd      	bne.n	800c2b8 <_free_r+0x24>
 800c2fc:	6810      	ldr	r0, [r2, #0]
 800c2fe:	6852      	ldr	r2, [r2, #4]
 800c300:	605a      	str	r2, [r3, #4]
 800c302:	4401      	add	r1, r0
 800c304:	6019      	str	r1, [r3, #0]
 800c306:	e7d7      	b.n	800c2b8 <_free_r+0x24>
 800c308:	d902      	bls.n	800c310 <_free_r+0x7c>
 800c30a:	230c      	movs	r3, #12
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	e7d3      	b.n	800c2b8 <_free_r+0x24>
 800c310:	6820      	ldr	r0, [r4, #0]
 800c312:	1821      	adds	r1, r4, r0
 800c314:	428a      	cmp	r2, r1
 800c316:	bf04      	itt	eq
 800c318:	6811      	ldreq	r1, [r2, #0]
 800c31a:	6852      	ldreq	r2, [r2, #4]
 800c31c:	6062      	str	r2, [r4, #4]
 800c31e:	bf04      	itt	eq
 800c320:	1809      	addeq	r1, r1, r0
 800c322:	6021      	streq	r1, [r4, #0]
 800c324:	605c      	str	r4, [r3, #4]
 800c326:	e7c7      	b.n	800c2b8 <_free_r+0x24>
 800c328:	bd38      	pop	{r3, r4, r5, pc}
 800c32a:	bf00      	nop
 800c32c:	20000320 	.word	0x20000320

0800c330 <_malloc_r>:
 800c330:	b570      	push	{r4, r5, r6, lr}
 800c332:	1ccd      	adds	r5, r1, #3
 800c334:	f025 0503 	bic.w	r5, r5, #3
 800c338:	3508      	adds	r5, #8
 800c33a:	2d0c      	cmp	r5, #12
 800c33c:	bf38      	it	cc
 800c33e:	250c      	movcc	r5, #12
 800c340:	2d00      	cmp	r5, #0
 800c342:	4606      	mov	r6, r0
 800c344:	db01      	blt.n	800c34a <_malloc_r+0x1a>
 800c346:	42a9      	cmp	r1, r5
 800c348:	d903      	bls.n	800c352 <_malloc_r+0x22>
 800c34a:	230c      	movs	r3, #12
 800c34c:	6033      	str	r3, [r6, #0]
 800c34e:	2000      	movs	r0, #0
 800c350:	bd70      	pop	{r4, r5, r6, pc}
 800c352:	f000 f89b 	bl	800c48c <__malloc_lock>
 800c356:	4a21      	ldr	r2, [pc, #132]	; (800c3dc <_malloc_r+0xac>)
 800c358:	6814      	ldr	r4, [r2, #0]
 800c35a:	4621      	mov	r1, r4
 800c35c:	b991      	cbnz	r1, 800c384 <_malloc_r+0x54>
 800c35e:	4c20      	ldr	r4, [pc, #128]	; (800c3e0 <_malloc_r+0xb0>)
 800c360:	6823      	ldr	r3, [r4, #0]
 800c362:	b91b      	cbnz	r3, 800c36c <_malloc_r+0x3c>
 800c364:	4630      	mov	r0, r6
 800c366:	f000 f83d 	bl	800c3e4 <_sbrk_r>
 800c36a:	6020      	str	r0, [r4, #0]
 800c36c:	4629      	mov	r1, r5
 800c36e:	4630      	mov	r0, r6
 800c370:	f000 f838 	bl	800c3e4 <_sbrk_r>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d124      	bne.n	800c3c2 <_malloc_r+0x92>
 800c378:	230c      	movs	r3, #12
 800c37a:	6033      	str	r3, [r6, #0]
 800c37c:	4630      	mov	r0, r6
 800c37e:	f000 f886 	bl	800c48e <__malloc_unlock>
 800c382:	e7e4      	b.n	800c34e <_malloc_r+0x1e>
 800c384:	680b      	ldr	r3, [r1, #0]
 800c386:	1b5b      	subs	r3, r3, r5
 800c388:	d418      	bmi.n	800c3bc <_malloc_r+0x8c>
 800c38a:	2b0b      	cmp	r3, #11
 800c38c:	d90f      	bls.n	800c3ae <_malloc_r+0x7e>
 800c38e:	600b      	str	r3, [r1, #0]
 800c390:	50cd      	str	r5, [r1, r3]
 800c392:	18cc      	adds	r4, r1, r3
 800c394:	4630      	mov	r0, r6
 800c396:	f000 f87a 	bl	800c48e <__malloc_unlock>
 800c39a:	f104 000b 	add.w	r0, r4, #11
 800c39e:	1d23      	adds	r3, r4, #4
 800c3a0:	f020 0007 	bic.w	r0, r0, #7
 800c3a4:	1ac3      	subs	r3, r0, r3
 800c3a6:	d0d3      	beq.n	800c350 <_malloc_r+0x20>
 800c3a8:	425a      	negs	r2, r3
 800c3aa:	50e2      	str	r2, [r4, r3]
 800c3ac:	e7d0      	b.n	800c350 <_malloc_r+0x20>
 800c3ae:	428c      	cmp	r4, r1
 800c3b0:	684b      	ldr	r3, [r1, #4]
 800c3b2:	bf16      	itet	ne
 800c3b4:	6063      	strne	r3, [r4, #4]
 800c3b6:	6013      	streq	r3, [r2, #0]
 800c3b8:	460c      	movne	r4, r1
 800c3ba:	e7eb      	b.n	800c394 <_malloc_r+0x64>
 800c3bc:	460c      	mov	r4, r1
 800c3be:	6849      	ldr	r1, [r1, #4]
 800c3c0:	e7cc      	b.n	800c35c <_malloc_r+0x2c>
 800c3c2:	1cc4      	adds	r4, r0, #3
 800c3c4:	f024 0403 	bic.w	r4, r4, #3
 800c3c8:	42a0      	cmp	r0, r4
 800c3ca:	d005      	beq.n	800c3d8 <_malloc_r+0xa8>
 800c3cc:	1a21      	subs	r1, r4, r0
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f000 f808 	bl	800c3e4 <_sbrk_r>
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	d0cf      	beq.n	800c378 <_malloc_r+0x48>
 800c3d8:	6025      	str	r5, [r4, #0]
 800c3da:	e7db      	b.n	800c394 <_malloc_r+0x64>
 800c3dc:	20000320 	.word	0x20000320
 800c3e0:	20000324 	.word	0x20000324

0800c3e4 <_sbrk_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4c06      	ldr	r4, [pc, #24]	; (800c400 <_sbrk_r+0x1c>)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	f7f4 fbc2 	bl	8000b78 <_sbrk>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_sbrk_r+0x1a>
 800c3f8:	6823      	ldr	r3, [r4, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_sbrk_r+0x1a>
 800c3fc:	602b      	str	r3, [r5, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20001358 	.word	0x20001358

0800c404 <_raise_r>:
 800c404:	291f      	cmp	r1, #31
 800c406:	b538      	push	{r3, r4, r5, lr}
 800c408:	4604      	mov	r4, r0
 800c40a:	460d      	mov	r5, r1
 800c40c:	d904      	bls.n	800c418 <_raise_r+0x14>
 800c40e:	2316      	movs	r3, #22
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	f04f 30ff 	mov.w	r0, #4294967295
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c41a:	b112      	cbz	r2, 800c422 <_raise_r+0x1e>
 800c41c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c420:	b94b      	cbnz	r3, 800c436 <_raise_r+0x32>
 800c422:	4620      	mov	r0, r4
 800c424:	f000 f830 	bl	800c488 <_getpid_r>
 800c428:	462a      	mov	r2, r5
 800c42a:	4601      	mov	r1, r0
 800c42c:	4620      	mov	r0, r4
 800c42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c432:	f000 b817 	b.w	800c464 <_kill_r>
 800c436:	2b01      	cmp	r3, #1
 800c438:	d00a      	beq.n	800c450 <_raise_r+0x4c>
 800c43a:	1c59      	adds	r1, r3, #1
 800c43c:	d103      	bne.n	800c446 <_raise_r+0x42>
 800c43e:	2316      	movs	r3, #22
 800c440:	6003      	str	r3, [r0, #0]
 800c442:	2001      	movs	r0, #1
 800c444:	e7e7      	b.n	800c416 <_raise_r+0x12>
 800c446:	2400      	movs	r4, #0
 800c448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c44c:	4628      	mov	r0, r5
 800c44e:	4798      	blx	r3
 800c450:	2000      	movs	r0, #0
 800c452:	e7e0      	b.n	800c416 <_raise_r+0x12>

0800c454 <raise>:
 800c454:	4b02      	ldr	r3, [pc, #8]	; (800c460 <raise+0xc>)
 800c456:	4601      	mov	r1, r0
 800c458:	6818      	ldr	r0, [r3, #0]
 800c45a:	f7ff bfd3 	b.w	800c404 <_raise_r>
 800c45e:	bf00      	nop
 800c460:	20000190 	.word	0x20000190

0800c464 <_kill_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4c07      	ldr	r4, [pc, #28]	; (800c484 <_kill_r+0x20>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4605      	mov	r5, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	f7f4 fb67 	bl	8000b44 <_kill>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d102      	bne.n	800c480 <_kill_r+0x1c>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	b103      	cbz	r3, 800c480 <_kill_r+0x1c>
 800c47e:	602b      	str	r3, [r5, #0]
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	bf00      	nop
 800c484:	20001358 	.word	0x20001358

0800c488 <_getpid_r>:
 800c488:	f7f4 bb54 	b.w	8000b34 <_getpid>

0800c48c <__malloc_lock>:
 800c48c:	4770      	bx	lr

0800c48e <__malloc_unlock>:
 800c48e:	4770      	bx	lr

0800c490 <_init>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	bf00      	nop
 800c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c496:	bc08      	pop	{r3}
 800c498:	469e      	mov	lr, r3
 800c49a:	4770      	bx	lr

0800c49c <_fini>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	bf00      	nop
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr
