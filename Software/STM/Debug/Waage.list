
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e058  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800e1e4  0800e1e4  0001e1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2b0  0800e2b0  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800e2b0  0800e2b0  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e2b0  0800e2b0  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800e2b0  0800e2b0  0001e2b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2c0  0800e2c0  0001e2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800e2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013d4  20000214  0800e4d8  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e8  0800e4d8  000215e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af46  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007db9  00000000  00000000  0005b18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d70  00000000  00000000  00062f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a48  00000000  00000000  00064cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a99  00000000  00000000  00066700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002989d  00000000  00000000  0008b199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1bf8  00000000  00000000  000b4a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016662e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079dc  00000000  00000000  00166684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000214 	.word	0x20000214
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800e1cc 	.word	0x0800e1cc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000218 	.word	0x20000218
 80001c8:	0800e1cc 	.word	0x0800e1cc

080001cc <_ZN7AppMainC1Ev>:

Time time = Time(&model, &hi2c1);
bool init = false;
uint8_t initCounter = 0;

AppMain::AppMain() {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001de:	601a      	str	r2, [r3, #0]
	lcSettings1.clkPin = CLK_L1_Pin;
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e2:	2220      	movs	r2, #32
 80001e4:	809a      	strh	r2, [r3, #4]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e8:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001ea:	609a      	str	r2, [r3, #8]
	lcSettings1.dataPin = DATA_L1_Pin;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	819a      	strh	r2, [r3, #12]
	lcSettings1.loadCellNr = 1;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	739a      	strb	r2, [r3, #14]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001fc:	601a      	str	r2, [r3, #0]
	lcSettings2.clkPin = CLK_L2_Pin;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000200:	2280      	movs	r2, #128	; 0x80
 8000202:	809a      	strh	r2, [r3, #4]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 8000208:	609a      	str	r2, [r3, #8]
	lcSettings2.dataPin = DATA_L2_Pin;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 800020c:	2240      	movs	r2, #64	; 0x40
 800020e:	819a      	strh	r2, [r3, #12]
	lcSettings2.loadCellNr = 2;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000212:	2202      	movs	r2, #2
 8000214:	739a      	strb	r2, [r3, #14]

}
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	20000230 	.word	0x20000230
 8000228:	48000400 	.word	0x48000400
 800022c:	20000240 	.word	0x20000240

08000230 <_ZN7AppMain4InitEv>:

void AppMain::Init() {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b085      	sub	sp, #20
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]

	HAL_Delay(1000);
 8000238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023c:	f004 fea6 	bl	8004f8c <HAL_Delay>

	loadCell1.InitLoadCell(&model, lcSettings1);
 8000240:	4b25      	ldr	r3, [pc, #148]	; (80002d8 <_ZN7AppMain4InitEv+0xa8>)
 8000242:	466c      	mov	r4, sp
 8000244:	f103 0208 	add.w	r2, r3, #8
 8000248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800024c:	e884 0003 	stmia.w	r4, {r0, r1}
 8000250:	cb0c      	ldmia	r3, {r2, r3}
 8000252:	4922      	ldr	r1, [pc, #136]	; (80002dc <_ZN7AppMain4InitEv+0xac>)
 8000254:	4822      	ldr	r0, [pc, #136]	; (80002e0 <_ZN7AppMain4InitEv+0xb0>)
 8000256:	f001 fbd4 	bl	8001a02 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <_ZN7AppMain4InitEv+0xb4>)
 800025c:	466c      	mov	r4, sp
 800025e:	f103 0208 	add.w	r2, r3, #8
 8000262:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000266:	e884 0003 	stmia.w	r4, {r0, r1}
 800026a:	cb0c      	ldmia	r3, {r2, r3}
 800026c:	491b      	ldr	r1, [pc, #108]	; (80002dc <_ZN7AppMain4InitEv+0xac>)
 800026e:	481e      	ldr	r0, [pc, #120]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 8000270:	f001 fbc7 	bl	8001a02 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	screenControl.InitScreen();
 8000274:	481d      	ldr	r0, [pc, #116]	; (80002ec <_ZN7AppMain4InitEv+0xbc>)
 8000276:	f003 fa9f 	bl	80037b8 <_ZN13ScreenControl10InitScreenEv>
	contrast.setContrast(0x09);
 800027a:	2109      	movs	r1, #9
 800027c:	481c      	ldr	r0, [pc, #112]	; (80002f0 <_ZN7AppMain4InitEv+0xc0>)
 800027e:	f001 f883 	bl	8001388 <_ZN8Kontrast11setContrastEh>
	logBook.init();
 8000282:	481c      	ldr	r0, [pc, #112]	; (80002f4 <_ZN7AppMain4InitEv+0xc4>)
 8000284:	f001 fc54 	bl	8001b30 <_ZN3Log4initEv>
	flash.flashLesen();
 8000288:	481b      	ldr	r0, [pc, #108]	; (80002f8 <_ZN7AppMain4InitEv+0xc8>)
 800028a:	f000 ffb1 	bl	80011f0 <_ZN5Flash10flashLesenEv>

	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2140      	movs	r1, #64	; 0x40
 8000292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000296:	f005 fbaf 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a2:	f005 fba9 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2101      	movs	r1, #1
 80002aa:	4814      	ldr	r0, [pc, #80]	; (80002fc <_ZN7AppMain4InitEv+0xcc>)
 80002ac:	f005 fba4 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2108      	movs	r1, #8
 80002b4:	4811      	ldr	r0, [pc, #68]	; (80002fc <_ZN7AppMain4InitEv+0xcc>)
 80002b6:	f005 fb9f 	bl	80059f8 <HAL_GPIO_WritePin>

	time.UpdateTime();
 80002ba:	4811      	ldr	r0, [pc, #68]	; (8000300 <_ZN7AppMain4InitEv+0xd0>)
 80002bc:	f004 fd4b 	bl	8004d56 <_ZN4Time10UpdateTimeEv>
	timeSynchroCounter = 0;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
	model.setWachstyp(Model::E_PARAFINWACHS);
 80002c6:	2102      	movs	r1, #2
 80002c8:	4804      	ldr	r0, [pc, #16]	; (80002dc <_ZN7AppMain4InitEv+0xac>)
 80002ca:	f002 f890 	bl	80023ee <_ZN5Model11setWachstypENS_6EWACHSE>

}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd90      	pop	{r4, r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000230 	.word	0x20000230
 80002dc:	20000250 	.word	0x20000250
 80002e0:	20000294 	.word	0x20000294
 80002e4:	20000240 	.word	0x20000240
 80002e8:	200002a8 	.word	0x200002a8
 80002ec:	200002c0 	.word	0x200002c0
 80002f0:	200002bc 	.word	0x200002bc
 80002f4:	200002e0 	.word	0x200002e0
 80002f8:	20000290 	.word	0x20000290
 80002fc:	48000400 	.word	0x48000400
 8000300:	200002ec 	.word	0x200002ec

08000304 <_ZN7AppMain5mainFEv>:

void AppMain::mainF() {
 8000304:	b590      	push	{r4, r7, lr}
 8000306:	ed2d 8b02 	vpush	{d8}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	while (true) {
		if (updateEnable){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d062      	beq.n	80003de <_ZN7AppMain5mainFEv+0xda>
			updateEnable = false;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
				loadCell2.Update();
 800031e:	4842      	ldr	r0, [pc, #264]	; (8000428 <_ZN7AppMain5mainFEv+0x124>)
 8000320:	f001 fb89 	bl	8001a36 <_ZN8LoadCell6UpdateEv>
				loadCell1.Update(); //ToDo
 8000324:	4841      	ldr	r0, [pc, #260]	; (800042c <_ZN7AppMain5mainFEv+0x128>)
 8000326:	f001 fb86 	bl	8001a36 <_ZN8LoadCell6UpdateEv>
				int32_t weight1 = (model.getLoadCell1() - model.getLoadCellOffset1())
 800032a:	4841      	ldr	r0, [pc, #260]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 800032c:	f001 fdc8 	bl	8001ec0 <_ZNK5Model12getLoadCell1Ev>
 8000330:	4604      	mov	r4, r0
 8000332:	483f      	ldr	r0, [pc, #252]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000334:	f001 ffde 	bl	80022f4 <_ZNK5Model18getLoadCellOffset1Ev>
 8000338:	4603      	mov	r3, r0
 800033a:	1ae3      	subs	r3, r4, r3
						/ model.getLoadCellGradient1();
 800033c:	ee07 3a90 	vmov	s15, r3
 8000340:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000344:	483a      	ldr	r0, [pc, #232]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000346:	f001 ffa1 	bl	800228c <_ZNK5Model20getLoadCellGradient1Ev>
 800034a:	eeb0 7a40 	vmov.f32	s14, s0
 800034e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000356:	ee17 3a90 	vmov	r3, s15
 800035a:	60fb      	str	r3, [r7, #12]
				int32_t weight2 = (model.getLoadCell2() - model.getLoadCellOffset2())
 800035c:	4834      	ldr	r0, [pc, #208]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 800035e:	f001 fdc9 	bl	8001ef4 <_ZNK5Model12getLoadCell2Ev>
 8000362:	4604      	mov	r4, r0
 8000364:	4832      	ldr	r0, [pc, #200]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000366:	f001 ffdf 	bl	8002328 <_ZNK5Model18getLoadCellOffset2Ev>
 800036a:	4603      	mov	r3, r0
 800036c:	1ae3      	subs	r3, r4, r3
						/ model.getLoadCellGradient2();
 800036e:	ee07 3a90 	vmov	s15, r3
 8000372:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000376:	482e      	ldr	r0, [pc, #184]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000378:	f001 ffa2 	bl	80022c0 <_ZNK5Model20getLoadCellGradient2Ev>
 800037c:	eeb0 7a40 	vmov.f32	s14, s0
 8000380:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000388:	ee17 3a90 	vmov	r3, s15
 800038c:	60bb      	str	r3, [r7, #8]
				model.setWeight(weight1 + weight2);
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	b29a      	uxth	r2, r3
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	b29b      	uxth	r3, r3
 8000396:	4413      	add	r3, r2
 8000398:	b29b      	uxth	r3, r3
 800039a:	b21b      	sxth	r3, r3
 800039c:	4619      	mov	r1, r3
 800039e:	4824      	ldr	r0, [pc, #144]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003a0:	f001 fe26 	bl	8001ff0 <_ZN5Model9setWeightEs>
				screenControl.Update();
 80003a4:	4823      	ldr	r0, [pc, #140]	; (8000434 <_ZN7AppMain5mainFEv+0x130>)
 80003a6:	f003 fa1b 	bl	80037e0 <_ZN13ScreenControl6UpdateEv>

				if (model.isOverrideClock()) {
 80003aa:	4821      	ldr	r0, [pc, #132]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003ac:	f002 f88b 	bl	80024c6 <_ZNK5Model15isOverrideClockEv>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <_ZN7AppMain5mainFEv+0xc0>
					time.SetTime();
 80003b6:	4820      	ldr	r0, [pc, #128]	; (8000438 <_ZN7AppMain5mainFEv+0x134>)
 80003b8:	f004 fc4d 	bl	8004c56 <_ZN4Time7SetTimeEv>
					model.setOverrideClock(false);
 80003bc:	2100      	movs	r1, #0
 80003be:	481c      	ldr	r0, [pc, #112]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003c0:	f002 f8d4 	bl	800256c <_ZN5Model16setOverrideClockEb>
				}

				if(model.isAddEntry()){
 80003c4:	481a      	ldr	r0, [pc, #104]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003c6:	f002 f897 	bl	80024f8 <_ZNK5Model10isAddEntryEv>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <_ZN7AppMain5mainFEv+0xda>
					logBook.addEntriy();
 80003d0:	481a      	ldr	r0, [pc, #104]	; (800043c <_ZN7AppMain5mainFEv+0x138>)
 80003d2:	f001 fbf5 	bl	8001bc0 <_ZN3Log9addEntriyEv>
					model.setAddEntry(false);
 80003d6:	2100      	movs	r1, #0
 80003d8:	4815      	ldr	r0, [pc, #84]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003da:	f002 f89a 	bl	8002512 <_ZN5Model11setAddEntryEb>
				}

		}

		//Waage nullen
		if(!init && initCounter == 100){
 80003de:	4b18      	ldr	r3, [pc, #96]	; (8000440 <_ZN7AppMain5mainFEv+0x13c>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	f083 0301 	eor.w	r3, r3, #1
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d016      	beq.n	800041a <_ZN7AppMain5mainFEv+0x116>
 80003ec:	4b15      	ldr	r3, [pc, #84]	; (8000444 <_ZN7AppMain5mainFEv+0x140>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b64      	cmp	r3, #100	; 0x64
 80003f2:	d112      	bne.n	800041a <_ZN7AppMain5mainFEv+0x116>
			model.setLoadCellOffset1(model.getLoadCell1());
 80003f4:	480e      	ldr	r0, [pc, #56]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 80003f6:	f001 fd63 	bl	8001ec0 <_ZNK5Model12getLoadCell1Ev>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4619      	mov	r1, r3
 80003fe:	480c      	ldr	r0, [pc, #48]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000400:	f001 ff84 	bl	800230c <_ZN5Model18setLoadCellOffset1El>
			model.setLoadCellOffset2(model.getLoadCell2());
 8000404:	480a      	ldr	r0, [pc, #40]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000406:	f001 fd75 	bl	8001ef4 <_ZNK5Model12getLoadCell2Ev>
 800040a:	4603      	mov	r3, r0
 800040c:	4619      	mov	r1, r3
 800040e:	4808      	ldr	r0, [pc, #32]	; (8000430 <_ZN7AppMain5mainFEv+0x12c>)
 8000410:	f002 f82e 	bl	8002470 <_ZN5Model18setLoadCellOffset2El>
			init = true;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <_ZN7AppMain5mainFEv+0x13c>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
		}
		initCounter++;
 800041a:	4b0a      	ldr	r3, [pc, #40]	; (8000444 <_ZN7AppMain5mainFEv+0x140>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	3301      	adds	r3, #1
 8000420:	b2da      	uxtb	r2, r3
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <_ZN7AppMain5mainFEv+0x140>)
 8000424:	701a      	strb	r2, [r3, #0]
	}
 8000426:	e773      	b.n	8000310 <_ZN7AppMain5mainFEv+0xc>
 8000428:	200002a8 	.word	0x200002a8
 800042c:	20000294 	.word	0x20000294
 8000430:	20000250 	.word	0x20000250
 8000434:	200002c0 	.word	0x200002c0
 8000438:	200002ec 	.word	0x200002ec
 800043c:	200002e0 	.word	0x200002e0
 8000440:	200002f4 	.word	0x200002f4
 8000444:	200002f5 	.word	0x200002f5

08000448 <_ZN7AppMain12ButtonUpdateEv>:
}




void AppMain::ButtonUpdate() {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	buttonControl.UpdateButton();
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <_ZN7AppMain12ButtonUpdateEv+0x18>)
 8000452:	f000 fcfb 	bl	8000e4c <_ZN13ButtonControl12UpdateButtonEv>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200002d0 	.word	0x200002d0

08000464 <_ZN7AppMain3ClkEv>:

void AppMain::Clk() {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]

	uint8_t seconds = model.getSeconds();
 800046c:	4874      	ldr	r0, [pc, #464]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 800046e:	f001 fd95 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 8000472:	4603      	mov	r3, r0
 8000474:	73fb      	strb	r3, [r7, #15]
	uint8_t minute = model.getMinute();
 8000476:	4872      	ldr	r0, [pc, #456]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 8000478:	f001 fd56 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 800047c:	4603      	mov	r3, r0
 800047e:	73bb      	strb	r3, [r7, #14]
	uint8_t hours = model.getHour();
 8000480:	486f      	ldr	r0, [pc, #444]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 8000482:	f001 fd00 	bl	8001e86 <_ZNK5Model7getHourEv>
 8000486:	4603      	mov	r3, r0
 8000488:	737b      	strb	r3, [r7, #13]
	uint8_t day = model.getDay();
 800048a:	486d      	ldr	r0, [pc, #436]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 800048c:	f001 fcce 	bl	8001e2c <_ZNK5Model6getDayEv>
 8000490:	4603      	mov	r3, r0
 8000492:	733b      	strb	r3, [r7, #12]
	uint8_t month = model.getMonth();
 8000494:	486a      	ldr	r0, [pc, #424]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 8000496:	f001 fd64 	bl	8001f62 <_ZNK5Model8getMonthEv>
 800049a:	4603      	mov	r3, r0
 800049c:	72fb      	strb	r3, [r7, #11]
	uint8_t year = model.getYear();
 800049e:	4868      	ldr	r0, [pc, #416]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80004a0:	f001 fdb5 	bl	800200e <_ZNK5Model7getYearEv>
 80004a4:	4603      	mov	r3, r0
 80004a6:	72bb      	strb	r3, [r7, #10]
	if (model.getSeconds() < 59) {
 80004a8:	4865      	ldr	r0, [pc, #404]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80004aa:	f001 fd77 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b3a      	cmp	r3, #58	; 0x3a
 80004b2:	bf94      	ite	ls
 80004b4:	2301      	movls	r3, #1
 80004b6:	2300      	movhi	r3, #0
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d003      	beq.n	80004c6 <_ZN7AppMain3ClkEv+0x62>
		seconds++;
 80004be:	7bfb      	ldrb	r3, [r7, #15]
 80004c0:	3301      	adds	r3, #1
 80004c2:	73fb      	strb	r3, [r7, #15]
 80004c4:	e067      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
	} else {
		seconds = 0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	73fb      	strb	r3, [r7, #15]
		if (minute == 59) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	2b3b      	cmp	r3, #59	; 0x3b
 80004ce:	d15f      	bne.n	8000590 <_ZN7AppMain3ClkEv+0x12c>
			minute = 0;
 80004d0:	2300      	movs	r3, #0
 80004d2:	73bb      	strb	r3, [r7, #14]
			if (hours == 23) {
 80004d4:	7b7b      	ldrb	r3, [r7, #13]
 80004d6:	2b17      	cmp	r3, #23
 80004d8:	d156      	bne.n	8000588 <_ZN7AppMain3ClkEv+0x124>
				hours = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	737b      	strb	r3, [r7, #13]
				switch (month) {
 80004de:	7afb      	ldrb	r3, [r7, #11]
 80004e0:	3b01      	subs	r3, #1
 80004e2:	2b0b      	cmp	r3, #11
 80004e4:	d857      	bhi.n	8000596 <_ZN7AppMain3ClkEv+0x132>
 80004e6:	a201      	add	r2, pc, #4	; (adr r2, 80004ec <_ZN7AppMain3ClkEv+0x88>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	0800051d 	.word	0x0800051d
 80004f0:	0800056f 	.word	0x0800056f
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	08000555 	.word	0x08000555
 80004fc:	0800051d 	.word	0x0800051d
 8000500:	08000555 	.word	0x08000555
 8000504:	0800051d 	.word	0x0800051d
 8000508:	0800051d 	.word	0x0800051d
 800050c:	08000555 	.word	0x08000555
 8000510:	0800051d 	.word	0x0800051d
 8000514:	08000555 	.word	0x08000555
 8000518:	08000537 	.word	0x08000537
				case 3:
				case 5:
				case 7:
				case 8:
				case 10:
					if (day == 31) {
 800051c:	7b3b      	ldrb	r3, [r7, #12]
 800051e:	2b1f      	cmp	r3, #31
 8000520:	d105      	bne.n	800052e <_ZN7AppMain3ClkEv+0xca>
						day = 1;
 8000522:	2301      	movs	r3, #1
 8000524:	733b      	strb	r3, [r7, #12]
						month++;
 8000526:	7afb      	ldrb	r3, [r7, #11]
 8000528:	3301      	adds	r3, #1
 800052a:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 800052c:	e033      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
						day++;
 800052e:	7b3b      	ldrb	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	733b      	strb	r3, [r7, #12]
					break;
 8000534:	e02f      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
				case 12:
					if (day == 31) {
 8000536:	7b3b      	ldrb	r3, [r7, #12]
 8000538:	2b1f      	cmp	r3, #31
 800053a:	d107      	bne.n	800054c <_ZN7AppMain3ClkEv+0xe8>
						day = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	733b      	strb	r3, [r7, #12]
						month = 1;
 8000540:	2301      	movs	r3, #1
 8000542:	72fb      	strb	r3, [r7, #11]
						year++;
 8000544:	7abb      	ldrb	r3, [r7, #10]
 8000546:	3301      	adds	r3, #1
 8000548:	72bb      	strb	r3, [r7, #10]
					} else {
						day++;
					}
					break;
 800054a:	e024      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
						day++;
 800054c:	7b3b      	ldrb	r3, [r7, #12]
 800054e:	3301      	adds	r3, #1
 8000550:	733b      	strb	r3, [r7, #12]
					break;
 8000552:	e020      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
				case 4:
				case 6:
				case 9:
				case 11:
					if (day == 30) {
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	2b1e      	cmp	r3, #30
 8000558:	d105      	bne.n	8000566 <_ZN7AppMain3ClkEv+0x102>
						day = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	733b      	strb	r3, [r7, #12]
						month++;
 800055e:	7afb      	ldrb	r3, [r7, #11]
 8000560:	3301      	adds	r3, #1
 8000562:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 8000564:	e017      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
						day++;
 8000566:	7b3b      	ldrb	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	733b      	strb	r3, [r7, #12]
					break;
 800056c:	e013      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
				case 2:
					if (day == 28) {
 800056e:	7b3b      	ldrb	r3, [r7, #12]
 8000570:	2b1c      	cmp	r3, #28
 8000572:	d105      	bne.n	8000580 <_ZN7AppMain3ClkEv+0x11c>
						day = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	733b      	strb	r3, [r7, #12]
						month++;
 8000578:	7afb      	ldrb	r3, [r7, #11]
 800057a:	3301      	adds	r3, #1
 800057c:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 800057e:	e00a      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
						day++;
 8000580:	7b3b      	ldrb	r3, [r7, #12]
 8000582:	3301      	adds	r3, #1
 8000584:	733b      	strb	r3, [r7, #12]
					break;
 8000586:	e006      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
				}
			} else {
				hours++;
 8000588:	7b7b      	ldrb	r3, [r7, #13]
 800058a:	3301      	adds	r3, #1
 800058c:	737b      	strb	r3, [r7, #13]
 800058e:	e002      	b.n	8000596 <_ZN7AppMain3ClkEv+0x132>
			}
		} else {
			minute++;
 8000590:	7bbb      	ldrb	r3, [r7, #14]
 8000592:	3301      	adds	r3, #1
 8000594:	73bb      	strb	r3, [r7, #14]
		}
	}

	if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 8000596:	482b      	ldr	r0, [pc, #172]	; (8000644 <_ZN7AppMain3ClkEv+0x1e0>)
 8000598:	f003 f99c 	bl	80038d4 <_ZN13ScreenControl16getCurrentScreenEv>
 800059c:	4603      	mov	r3, r0
			&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
 800059e:	2b05      	cmp	r3, #5
 80005a0:	d007      	beq.n	80005b2 <_ZN7AppMain3ClkEv+0x14e>
 80005a2:	4828      	ldr	r0, [pc, #160]	; (8000644 <_ZN7AppMain3ClkEv+0x1e0>)
 80005a4:	f003 f996 	bl	80038d4 <_ZN13ScreenControl16getCurrentScreenEv>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b06      	cmp	r3, #6
 80005ac:	d001      	beq.n	80005b2 <_ZN7AppMain3ClkEv+0x14e>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <_ZN7AppMain3ClkEv+0x150>
 80005b2:	2300      	movs	r3, #0
	if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01d      	beq.n	80005f4 <_ZN7AppMain3ClkEv+0x190>
		model.setSeconds(seconds);
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4820      	ldr	r0, [pc, #128]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005be:	f001 fcfa 	bl	8001fb6 <_ZN5Model10setSecondsEh>
		model.setMinute(minute);
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	4619      	mov	r1, r3
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005c8:	f001 fcbb 	bl	8001f42 <_ZN5Model9setMinuteEh>
		model.setHour(hours);
 80005cc:	7b7b      	ldrb	r3, [r7, #13]
 80005ce:	4619      	mov	r1, r3
 80005d0:	481b      	ldr	r0, [pc, #108]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005d2:	f001 fc65 	bl	8001ea0 <_ZN5Model7setHourEh>
		model.setDay(day);
 80005d6:	7b3b      	ldrb	r3, [r7, #12]
 80005d8:	4619      	mov	r1, r3
 80005da:	4819      	ldr	r0, [pc, #100]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005dc:	f001 fc33 	bl	8001e46 <_ZN5Model6setDayEh>
		model.setMonth(month);
 80005e0:	7afb      	ldrb	r3, [r7, #11]
 80005e2:	4619      	mov	r1, r3
 80005e4:	4816      	ldr	r0, [pc, #88]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005e6:	f001 fcc9 	bl	8001f7c <_ZN5Model8setMonthEh>
		model.setYear(year);
 80005ea:	7abb      	ldrb	r3, [r7, #10]
 80005ec:	4619      	mov	r1, r3
 80005ee:	4814      	ldr	r0, [pc, #80]	; (8000640 <_ZN7AppMain3ClkEv+0x1dc>)
 80005f0:	f001 fd1a 	bl	8002028 <_ZN5Model7setYearEh>
	}

	if (timeSynchroCounter < 60) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	2b3b      	cmp	r3, #59	; 0x3b
 80005fa:	d805      	bhi.n	8000608 <_ZN7AppMain3ClkEv+0x1a4>
		timeSynchroCounter++;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	1c5a      	adds	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	605a      	str	r2, [r3, #4]
				&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
			time.UpdateTime();
		}
	}

}
 8000606:	e016      	b.n	8000636 <_ZN7AppMain3ClkEv+0x1d2>
		timeSynchroCounter = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <_ZN7AppMain3ClkEv+0x1e0>)
 8000610:	f003 f960 	bl	80038d4 <_ZN13ScreenControl16getCurrentScreenEv>
 8000614:	4603      	mov	r3, r0
				&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
 8000616:	2b05      	cmp	r3, #5
 8000618:	d007      	beq.n	800062a <_ZN7AppMain3ClkEv+0x1c6>
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <_ZN7AppMain3ClkEv+0x1e0>)
 800061c:	f003 f95a 	bl	80038d4 <_ZN13ScreenControl16getCurrentScreenEv>
 8000620:	4603      	mov	r3, r0
 8000622:	2b06      	cmp	r3, #6
 8000624:	d001      	beq.n	800062a <_ZN7AppMain3ClkEv+0x1c6>
 8000626:	2301      	movs	r3, #1
 8000628:	e000      	b.n	800062c <_ZN7AppMain3ClkEv+0x1c8>
 800062a:	2300      	movs	r3, #0
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <_ZN7AppMain3ClkEv+0x1d2>
			time.UpdateTime();
 8000630:	4805      	ldr	r0, [pc, #20]	; (8000648 <_ZN7AppMain3ClkEv+0x1e4>)
 8000632:	f004 fb90 	bl	8004d56 <_ZN4Time10UpdateTimeEv>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000250 	.word	0x20000250
 8000644:	200002c0 	.word	0x200002c0
 8000648:	200002ec 	.word	0x200002ec

0800064c <_Z41__static_initialization_and_destruction_0ii>:
	}
}

void AppMain::ResetLogBook(){
	logBook.resetAddrPointer();
}
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d127      	bne.n	80006ac <_Z41__static_initialization_and_destruction_0ii+0x60>
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000662:	4293      	cmp	r3, r2
 8000664:	d122      	bne.n	80006ac <_Z41__static_initialization_and_destruction_0ii+0x60>
Model model;
 8000666:	4813      	ldr	r0, [pc, #76]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000668:	f001 fb68 	bl	8001d3c <_ZN5ModelC1Ev>
Flash flash = Flash(&model);
 800066c:	4911      	ldr	r1, [pc, #68]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000670:	f000 fdae 	bl	80011d0 <_ZN5FlashC1EP5Model>
LoadCell loadCell1; // = LoadCell(&model, 1);
 8000674:	4811      	ldr	r0, [pc, #68]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000676:	f001 f9b5 	bl	80019e4 <_ZN8LoadCellC1Ev>
LoadCell loadCell2; // = LoadCell(&model, 2);
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800067c:	f001 f9b2 	bl	80019e4 <_ZN8LoadCellC1Ev>
Kontrast contrast = Kontrast();
 8000680:	4810      	ldr	r0, [pc, #64]	; (80006c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000682:	f000 fe75 	bl	8001370 <_ZN8KontrastC1Ev>
ScreenControl screenControl = ScreenControl(&model, &contrast, &flash);
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800068a:	490a      	ldr	r1, [pc, #40]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800068e:	f003 f811 	bl	80036b4 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash>
ButtonControl buttonControl = ButtonControl(&model);
 8000692:	4908      	ldr	r1, [pc, #32]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000696:	f000 fbbb 	bl	8000e10 <_ZN13ButtonControlC1EP5Model>
Log logBook = Log(&model);
 800069a:	4906      	ldr	r1, [pc, #24]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800069e:	f001 fa35 	bl	8001b0c <_ZN3LogC1EP5Model>
Time time = Time(&model, &hi2c1);
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80006a4:	4903      	ldr	r1, [pc, #12]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80006a6:	480c      	ldr	r0, [pc, #48]	; (80006d8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80006a8:	f004 fac2 	bl	8004c30 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000250 	.word	0x20000250
 80006b8:	20000290 	.word	0x20000290
 80006bc:	20000294 	.word	0x20000294
 80006c0:	200002a8 	.word	0x200002a8
 80006c4:	200002bc 	.word	0x200002bc
 80006c8:	200002c0 	.word	0x200002c0
 80006cc:	200002d0 	.word	0x200002d0
 80006d0:	200002e0 	.word	0x200002e0
 80006d4:	200005a8 	.word	0x200005a8
 80006d8:	200002ec 	.word	0x200002ec

080006dc <_GLOBAL__sub_I_lcSettings1>:
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
 80006e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff ffb1 	bl	800064c <_Z41__static_initialization_and_destruction_0ii>
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b56      	ldr	r3, [pc, #344]	; (800085c <MX_GPIO_Init+0x170>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4a55      	ldr	r2, [pc, #340]	; (800085c <MX_GPIO_Init+0x170>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4b53      	ldr	r3, [pc, #332]	; (800085c <MX_GPIO_Init+0x170>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b50      	ldr	r3, [pc, #320]	; (800085c <MX_GPIO_Init+0x170>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <MX_GPIO_Init+0x170>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4b4d      	ldr	r3, [pc, #308]	; (800085c <MX_GPIO_Init+0x170>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <MX_GPIO_Init+0x170>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a49      	ldr	r2, [pc, #292]	; (800085c <MX_GPIO_Init+0x170>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b47      	ldr	r3, [pc, #284]	; (800085c <MX_GPIO_Init+0x170>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <MX_GPIO_Init+0x170>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a43      	ldr	r2, [pc, #268]	; (800085c <MX_GPIO_Init+0x170>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b41      	ldr	r3, [pc, #260]	; (800085c <MX_GPIO_Init+0x170>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000768:	483d      	ldr	r0, [pc, #244]	; (8000860 <MX_GPIO_Init+0x174>)
 800076a:	f005 f945 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 800076e:	2200      	movs	r2, #0
 8000770:	f248 0157 	movw	r1, #32855	; 0x8057
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f005 f93e 	bl	80059f8 <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	21a9      	movs	r1, #169	; 0xa9
 8000780:	4838      	ldr	r0, [pc, #224]	; (8000864 <MX_GPIO_Init+0x178>)
 8000782:	f005 f939 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	4837      	ldr	r0, [pc, #220]	; (8000868 <MX_GPIO_Init+0x17c>)
 800078c:	f005 f934 	bl	80059f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000790:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	482d      	ldr	r0, [pc, #180]	; (8000860 <MX_GPIO_Init+0x174>)
 80007aa:	f004 ff9b 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 80007ae:	f248 0357 	movw	r3, #32855	; 0x8057
 80007b2:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ca:	f004 ff8b 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 80007ce:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f004 ff7d 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 80007ea:	23a9      	movs	r3, #169	; 0xa9
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_GPIO_Init+0x178>)
 8000802:	f004 ff6f 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 8000806:	2302      	movs	r3, #2
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_GPIO_Init+0x178>)
 800081a:	f004 ff63 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 800081e:	2350      	movs	r3, #80	; 0x50
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <MX_GPIO_Init+0x178>)
 8000832:	f004 ff57 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_GPIO_Init+0x17c>)
 800084e:	f004 ff49 	bl	80056e4 <HAL_GPIO_Init>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	; 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000
 8000860:	48000800 	.word	0x48000800
 8000864:	48000400 	.word	0x48000400
 8000868:	48001c00 	.word	0x48001c00

0800086c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000872:	4a1c      	ldr	r2, [pc, #112]	; (80008e4 <MX_I2C1_Init+0x78>)
 8000874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909EEE;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <MX_I2C1_Init+0x7c>)
 800087a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_I2C1_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000884:	2201      	movs	r2, #1
 8000886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_I2C1_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2C1_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_I2C1_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008a8:	f005 f8be 	bl	8005a28 <HAL_I2C_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b2:	f000 f923 	bl	8000afc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80008b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ba:	4809      	ldr	r0, [pc, #36]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008bc:	f005 fd0e 	bl	80062dc <HAL_I2CEx_ConfigAnalogFilter>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f919 	bl	8000afc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_I2C1_Init+0x74>)
 80008ce:	f005 fd50 	bl	8006372 <HAL_I2CEx_ConfigDigitalFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008d8:	f000 f910 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200005a8 	.word	0x200005a8
 80008e4:	40005400 	.word	0x40005400
 80008e8:	10909eee 	.word	0x10909eee

080008ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b096      	sub	sp, #88	; 0x58
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2234      	movs	r2, #52	; 0x34
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00d fb85 	bl	800e01c <memset>
  if(i2cHandle->Instance==I2C1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <HAL_I2C_MspInit+0xa8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d137      	bne.n	800098c <HAL_I2C_MspInit+0xa0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4618      	mov	r0, r3
 800092a:	f008 f8f1 	bl	8008b10 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f000 f8e2 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_I2C_MspInit+0xac>)
 800093a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093c:	4a16      	ldr	r2, [pc, #88]	; (8000998 <HAL_I2C_MspInit+0xac>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_I2C_MspInit+0xac>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000950:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000956:	2312      	movs	r3, #18
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800095a:	2301      	movs	r3, #1
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095e:	2303      	movs	r3, #3
 8000960:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000962:	2304      	movs	r3, #4
 8000964:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f004 feb8 	bl	80056e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_I2C_MspInit+0xac>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_I2C_MspInit+0xac>)
 800097a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <HAL_I2C_MspInit+0xac>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	; 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40005400 	.word	0x40005400
 8000998:	40021000 	.word	0x40021000

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a0:	f004 fa7f 	bl	8004ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a4:	f000 f81e 	bl	80009e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a8:	f7ff fea0 	bl	80006ec <MX_GPIO_Init>
  MX_I2C1_Init();
 80009ac:	f7ff ff5e 	bl	800086c <MX_I2C1_Init>
  MX_TIM2_Init();
 80009b0:	f000 f9bc 	bl	8000d2c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80009b4:	f00c fd30 	bl	800d418 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


  HAL_I2C_MspInit(&hi2c1);
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <main+0x3c>)
 80009ba:	f7ff ff97 	bl	80008ec <HAL_I2C_MspInit>
  HAL_TIM_Base_MspInit(&htim2);
 80009be:	4807      	ldr	r0, [pc, #28]	; (80009dc <main+0x40>)
 80009c0:	f000 fa02 	bl	8000dc8 <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <main+0x40>)
 80009c6:	f008 fa81 	bl	8008ecc <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN 2 */
  appMain.Init();
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <main+0x44>)
 80009cc:	f7ff fc30 	bl	8000230 <_ZN7AppMain4InitEv>
  appMain.mainF();
 80009d0:	4803      	ldr	r0, [pc, #12]	; (80009e0 <main+0x44>)
 80009d2:	f7ff fc97 	bl	8000304 <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <main+0x3a>
 80009d8:	200005a8 	.word	0x200005a8
 80009dc:	200005f4 	.word	0x200005f4
 80009e0:	200002f8 	.word	0x200002f8

080009e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2244      	movs	r2, #68	; 0x44
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f00d fb12 	bl	800e01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a0a:	f007 f9db 	bl	8007dc4 <HAL_PWREx_ControlVoltageScaling>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	bf14      	ite	ne
 8000a14:	2301      	movne	r3, #1
 8000a16:	2300      	moveq	r3, #0
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000a1e:	f000 f86d 	bl	8000afc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a22:	2312      	movs	r3, #18
 8000a24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2340      	movs	r3, #64	; 0x40
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a38:	23b0      	movs	r3, #176	; 0xb0
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a40:	2302      	movs	r3, #2
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a48:	230a      	movs	r3, #10
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f007 fa19 	bl	8007e90 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000a6e:	f000 f845 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a72:	230f      	movs	r3, #15
 8000a74:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a76:	2303      	movs	r3, #3
 8000a78:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a86:	463b      	mov	r3, r7
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f007 fe66 	bl	800875c <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf14      	ite	ne
 8000a96:	2301      	movne	r3, #1
 8000a98:	2300      	moveq	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8000aa0:	f000 f82c 	bl	8000afc <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3758      	adds	r7, #88	; 0x58
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

uint8_t timeCounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	/*IO_COM Synchronisationstimer*/
	if(htim->Instance == TIM2){
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000abc:	d116      	bne.n	8000aec <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timeCounter == 89){
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b59      	cmp	r3, #89	; 0x59
 8000ac4:	d106      	bne.n	8000ad4 <HAL_TIM_PeriodElapsedCallback+0x28>
			appMain.Clk();
 8000ac6:	480c      	ldr	r0, [pc, #48]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ac8:	f7ff fccc 	bl	8000464 <_ZN7AppMain3ClkEv>
			timeCounter = 0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e005      	b.n	8000ae0 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			timeCounter++;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ade:	701a      	strb	r2, [r3, #0]
		}
		appMain.ButtonUpdate();
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ae2:	f7ff fcb1 	bl	8000448 <_ZN7AppMain12ButtonUpdateEv>
		appMain.updateEnable = true;
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
	}
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000300 	.word	0x20000300
 8000af8:	200002f8 	.word	0x200002f8

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d107      	bne.n	8000b28 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d102      	bne.n	8000b28 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000b22:	4803      	ldr	r0, [pc, #12]	; (8000b30 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b24:	f7ff fb52 	bl	80001cc <_ZN7AppMainC1Ev>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200002f8 	.word	0x200002f8

08000b34 <_GLOBAL__sub_I_appMain>:
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff ffe3 	bl	8000b08 <_Z41__static_initialization_and_destruction_0ii>
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6613      	str	r3, [r2, #96]	; 0x60
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f004 f9b4 	bl	8004f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <TIM2_IRQHandler+0x10>)
 8000bee:	f008 f9c1 	bl	8008f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200005f4 	.word	0x200005f4

08000bfc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <USB_IRQHandler+0x10>)
 8000c02:	f005 fd36 	bl	8006672 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200012e4 	.word	0x200012e4

08000c10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
	return 1;
 8000c14:	2301      	movs	r3, #1
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_kill>:

int _kill(int pid, int sig)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c2a:	f00d f9c5 	bl	800dfb8 <__errno>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2216      	movs	r2, #22
 8000c32:	601a      	str	r2, [r3, #0]
	return -1;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_exit>:

void _exit (int status)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c48:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f7ff ffe7 	bl	8000c20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c52:	e7fe      	b.n	8000c52 <_exit+0x12>

08000c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <_sbrk+0x5c>)
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <_sbrk+0x60>)
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <_sbrk+0x64>)
 8000c72:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <_sbrk+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d207      	bcs.n	8000c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c84:	f00d f998 	bl	800dfb8 <__errno>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	e009      	b.n	8000ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <_sbrk+0x64>)
 8000ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000a000 	.word	0x2000a000
 8000cb4:	00000400 	.word	0x00000400
 8000cb8:	20000304 	.word	0x20000304
 8000cbc:	200015e8 	.word	0x200015e8

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <SystemInit+0x64>)
 8000cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <SystemInit+0x64>)
 8000ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <SystemInit+0x68>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a13      	ldr	r2, [pc, #76]	; (8000d28 <SystemInit+0x68>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <SystemInit+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <SystemInit+0x68>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <SystemInit+0x68>)
 8000cec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cf0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <SystemInit+0x68>)
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <SystemInit+0x68>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <SystemInit+0x68>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <SystemInit+0x68>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SystemInit+0x64>)
 8000d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d16:	609a      	str	r2, [r3, #8]
#endif
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00
 8000d28:	40021000 	.word	0x40021000

08000d2c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0310 	add.w	r3, r7, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d4a:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d54:	2210      	movs	r2, #16
 8000d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d60:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d6e:	2280      	movs	r2, #128	; 0x80
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d74:	f008 f852 	bl	8008e1c <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d7e:	f7ff febd 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000d90:	f008 fa0f 	bl	80091b2 <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d9a:	f7ff feaf 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d9e:	2320      	movs	r3, #32
 8000da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM2_Init+0x98>)
 8000dac:	f008 fbee 	bl	800958c <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000db6:	f7ff fea1 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200005f4 	.word	0x200005f4

08000dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dd8:	d113      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_TIM_Base_MspInit+0x44>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	201c      	movs	r0, #28
 8000df8:	f004 f9c7 	bl	800518a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dfc:	201c      	movs	r0, #28
 8000dfe:	f004 f9e0 	bl	80051c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	683a      	ldr	r2, [r7, #0]
 8000e3c:	60da      	str	r2, [r3, #12]
}
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000e54:	2108      	movs	r1, #8
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f004 fdb5 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	bf14      	ite	ne
 8000e64:	2301      	movne	r3, #1
 8000e66:	2300      	moveq	r3, #0
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	3301      	adds	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d90d      	bls.n	8000e9e <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	795b      	ldrb	r3, [r3, #5]
 8000e86:	2b63      	cmp	r3, #99	; 0x63
 8000e88:	d809      	bhi.n	8000e9e <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8000e8a:	2108      	movs	r1, #8
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f004 fd9a 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d101      	bne.n	8000e9e <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8000e9e:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d008      	beq.n	8000eb6 <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 f8f6 	bl	800209c <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d90f      	bls.n	8000ede <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	f083 0301 	eor.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d008      	beq.n	8000ede <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 f8c5 	bl	8002062 <_ZN5Model9setT1LongEb>
		T1last = true;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2201      	movs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8000ede:	2108      	movs	r1, #8
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f004 fd70 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	bf0c      	ite	eq
 8000eee:	2301      	moveq	r3, #1
 8000ef0:	2300      	movne	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 8000f04:	2120      	movs	r1, #32
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f004 fd5d 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	bf14      	ite	ne
 8000f14:	2301      	movne	r3, #1
 8000f16:	2300      	moveq	r3, #0
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	799b      	ldrb	r3, [r3, #6]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d90d      	bls.n	8000f4e <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	799b      	ldrb	r3, [r3, #6]
 8000f36:	2b63      	cmp	r3, #99	; 0x63
 8000f38:	d809      	bhi.n	8000f4e <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f004 fd42 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <_ZN13ButtonControl12UpdateButtonEv+0x102>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 8000f4e:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d008      	beq.n	8000f66 <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f8d8 	bl	8002110 <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	799b      	ldrb	r3, [r3, #6]
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d90f      	bls.n	8000f8e <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f001 f8a7 	bl	80020d6 <_ZN5Model9setT2LongEb>
		T2last = true;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8000f8e:	2120      	movs	r1, #32
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f004 fd18 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fba:	f004 fd05 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf14      	ite	ne
 8000fc4:	2301      	movne	r3, #1
 8000fc6:	2300      	moveq	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	79db      	ldrb	r3, [r3, #7]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d90d      	bls.n	8000ffe <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	79db      	ldrb	r3, [r3, #7]
 8000fe6:	2b63      	cmp	r3, #99	; 0x63
 8000fe8:	d809      	bhi.n	8000ffe <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff0:	f004 fcea 	bl	80059c8 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8000ffe:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8001000:	2b00      	cmp	r3, #0
 8001002:	d008      	beq.n	8001016 <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2101      	movs	r1, #1
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f8ba 	bl	8002184 <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	79db      	ldrb	r3, [r3, #7]
 800101a:	2b64      	cmp	r3, #100	; 0x64
 800101c:	d90f      	bls.n	800103e <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	789b      	ldrb	r3, [r3, #2]
 8001022:	f083 0301 	eor.w	r3, r3, #1
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d008      	beq.n	800103e <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2101      	movs	r1, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f889 	bl	800214a <_ZN5Model9setT3LongEb>
		T3last = true;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 800103e:	2180      	movs	r1, #128	; 0x80
 8001040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001044:	f004 fcc0 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 8001064:	2102      	movs	r1, #2
 8001066:	4859      	ldr	r0, [pc, #356]	; (80011cc <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001068:	f004 fcae 	bl	80059c8 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	bf14      	ite	ne
 8001072:	2301      	movne	r3, #1
 8001074:	2300      	moveq	r3, #0
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7a1b      	ldrb	r3, [r3, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 800108c:	2b02      	cmp	r3, #2
 800108e:	d90c      	bls.n	80010aa <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	7a1b      	ldrb	r3, [r3, #8]
 8001094:	2b63      	cmp	r3, #99	; 0x63
 8001096:	d808      	bhi.n	80010aa <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 8001098:	2102      	movs	r1, #2
 800109a:	484c      	ldr	r0, [pc, #304]	; (80011cc <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 800109c:	f004 fc94 	bl	80059c8 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <_ZN13ButtonControl12UpdateButtonEv+0x260>
 80010aa:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d008      	beq.n	80010c2 <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2101      	movs	r1, #1
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 f89e 	bl	80021f8 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7a1b      	ldrb	r3, [r3, #8]
 80010c6:	2b64      	cmp	r3, #100	; 0x64
 80010c8:	d90f      	bls.n	80010ea <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	78db      	ldrb	r3, [r3, #3]
 80010ce:	f083 0301 	eor.w	r3, r3, #1
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2101      	movs	r1, #1
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 f86d 	bl	80021be <_ZN5Model9setT4LongEb>
		T4last = true;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 80010ea:	2102      	movs	r1, #2
 80010ec:	4837      	ldr	r0, [pc, #220]	; (80011cc <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 80010ee:	f004 fc6b 	bl	80059c8 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f004 fc57 	bl	80059c8 <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	7a5b      	ldrb	r3, [r3, #9]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 800113a:	2b02      	cmp	r3, #2
 800113c:	d90e      	bls.n	800115c <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7a5b      	ldrb	r3, [r3, #9]
 8001142:	2b63      	cmp	r3, #99	; 0x63
 8001144:	d80a      	bhi.n	800115c <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 8001146:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f004 fc3b 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <_ZN13ButtonControl12UpdateButtonEv+0x310>
 8001158:	2301      	movs	r3, #1
 800115a:	e000      	b.n	800115e <_ZN13ButtonControl12UpdateButtonEv+0x312>
 800115c:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f001 f87f 	bl	800226c <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7a5b      	ldrb	r3, [r3, #9]
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d90f      	bls.n	800119c <_ZN13ButtonControl12UpdateButtonEv+0x350>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	791b      	ldrb	r3, [r3, #4]
 8001180:	f083 0301 	eor.w	r3, r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d008      	beq.n	800119c <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2101      	movs	r1, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f001 f84e 	bl	8002232 <_ZN5Model9setT5LongEb>
		T5last = true;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 800119c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a4:	f004 fc10 	bl	80059c8 <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	725a      	strb	r2, [r3, #9]
	}



}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	48000400 	.word	0x48000400

080011d0 <_ZN5FlashC1EP5Model>:
 *      Author: marcel
 */

#include "Flash.h"

Flash::Flash(Model *model){
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	this->model = model;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	601a      	str	r2, [r3, #0]
}
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <_ZN5Flash10flashLesenEv>:
 * Auslesen vom Flash und speichern in tmpFlashArray
 *
 * @param None
 * @return None
 */
void Flash::flashLesen() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint32_t tmpFlash = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
	tmpFlash = *(uint32_t*) (FLASH_STAR_PAGE_ADDR);
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <_ZN5Flash10flashLesenEv+0x8c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]

	if(tmpFlash / 100000000 != 1){
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <_ZN5Flash10flashLesenEv+0x90>)
 8001206:	4413      	add	r3, r2
 8001208:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <_ZN5Flash10flashLesenEv+0x94>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d831      	bhi.n	8001272 <_ZN5Flash10flashLesenEv+0x82>
		//load default values
	}else{
		//read flash
		uint16_t priceBW = (tmpFlash%10000);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <_ZN5Flash10flashLesenEv+0x98>)
 8001212:	fba3 1302 	umull	r1, r3, r3, r2
 8001216:	0b5b      	lsrs	r3, r3, #13
 8001218:	f242 7110 	movw	r1, #10000	; 0x2710
 800121c:	fb01 f303 	mul.w	r3, r1, r3
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	817b      	strh	r3, [r7, #10]
		uint16_t pricePW = ((tmpFlash/10000)%10000);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4a18      	ldr	r2, [pc, #96]	; (8001288 <_ZN5Flash10flashLesenEv+0x98>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	0b5a      	lsrs	r2, r3, #13
 800122e:	4b16      	ldr	r3, [pc, #88]	; (8001288 <_ZN5Flash10flashLesenEv+0x98>)
 8001230:	fba3 1302 	umull	r1, r3, r3, r2
 8001234:	0b5b      	lsrs	r3, r3, #13
 8001236:	f242 7110 	movw	r1, #10000	; 0x2710
 800123a:	fb01 f303 	mul.w	r3, r1, r3
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	813b      	strh	r3, [r7, #8]

		model->setParafinwachsPreis(pricePW);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	893a      	ldrh	r2, [r7, #8]
 8001248:	ee07 2a90 	vmov	s15, r2
 800124c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001250:	eeb0 0a67 	vmov.f32	s0, s15
 8001254:	4618      	mov	r0, r3
 8001256:	f001 f8a9 	bl	80023ac <_ZN5Model20setParafinwachsPreisEf>
		model->setBienenwachsPreis(priceBW);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	897a      	ldrh	r2, [r7, #10]
 8001260:	ee07 2a90 	vmov	s15, r2
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	4618      	mov	r0, r3
 800126e:	f001 f878 	bl	8002362 <_ZN5Model19setBienenwachsPreisEf>
	}
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	0800f800 	.word	0x0800f800
 8001280:	fa0a1f00 	.word	0xfa0a1f00
 8001284:	05f5e0ff 	.word	0x05f5e0ff
 8001288:	d1b71759 	.word	0xd1b71759

0800128c <_ZN5Flash10WriteFlashEv>:



HAL_StatusTypeDef Flash::WriteFlash(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	uint16_t pricePW = model->getParafinwachsPreis();
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f001 f876 	bl	800238a <_ZNK5Model20getParafinwachsPreisEv>
 800129e:	eef0 7a40 	vmov.f32	s15, s0
 80012a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a6:	ee17 3a90 	vmov	r3, s15
 80012aa:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t priceBW = model->getBienenwachsPreis();
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f845 	bl	8002340 <_ZNK5Model19getBienenwachsPreisEv>
 80012b6:	eef0 7a40 	vmov.f32	s15, s0
 80012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	84bb      	strh	r3, [r7, #36]	; 0x24

	uint32_t tmpFlash = 100000000 + pricePW*10000 + priceBW;
 80012c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80012ca:	fb02 f203 	mul.w	r2, r2, r3
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <_ZN5Flash10WriteFlashEv+0xdc>)
 80012d0:	4413      	add	r3, r2
 80012d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012d4:	4413      	add	r3, r2
 80012d6:	623b      	str	r3, [r7, #32]

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t sectorError = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	if (HAL_FLASH_Unlock() != HAL_OK) {
 80012dc:	f003 fff8 	bl	80052d0 <HAL_FLASH_Unlock>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf14      	ite	ne
 80012e6:	2301      	movne	r3, #1
 80012e8:	2300      	moveq	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <_ZN5Flash10WriteFlashEv+0x6c>
			HAL_FLASH_Lock();
 80012f0:	f004 f810 	bl	8005314 <HAL_FLASH_Lock>
			return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <_ZN5Flash10WriteFlashEv+0xd2>
	}

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Page = 31;
 80012fc:	231f      	movs	r3, #31
 80012fe:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = 1;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Banks = 1;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]



	if (HAL_FLASHEx_Erase(&EraseInitStruct, &sectorError) != HAL_OK) {
 8001308:	f107 020c 	add.w	r2, r7, #12
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f004 f8c2 	bl	800549c <HAL_FLASHEx_Erase>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <_ZN5Flash10WriteFlashEv+0xa4>
		HAL_FLASH_Lock();
 8001328:	f003 fff4 	bl	8005314 <HAL_FLASH_Lock>
		return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e016      	b.n	800135e <_ZN5Flash10WriteFlashEv+0xd2>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FLASH_STAR_PAGE_ADDR, tmpFlash);
 8001330:	6a3b      	ldr	r3, [r7, #32]
 8001332:	461a      	mov	r2, r3
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <_ZN5Flash10WriteFlashEv+0xe0>)
 800133a:	2000      	movs	r0, #0
 800133c:	f003 ff5c 	bl	80051f8 <HAL_FLASH_Program>

	/*Flash Sperren*/
	if (HAL_FLASH_Lock() != HAL_OK) {
 8001340:	f003 ffe8 	bl	8005314 <HAL_FLASH_Lock>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	bf14      	ite	ne
 800134a:	2301      	movne	r3, #1
 800134c:	2300      	moveq	r3, #0
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <_ZN5Flash10WriteFlashEv+0xd0>
		HAL_FLASH_Lock();
 8001354:	f003 ffde 	bl	8005314 <HAL_FLASH_Lock>
		return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <_ZN5Flash10WriteFlashEv+0xd2>
	}

	return HAL_OK;
 800135c:	2300      	movs	r3, #0

}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	05f5e100 	.word	0x05f5e100
 800136c:	0800f800 	.word	0x0800f800

08001370 <_ZN8KontrastC1Ev>:
#include "Kontrast.h"
#include "i2c.h"



Kontrast::Kontrast() {
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_ZN8Kontrast11setContrastEh>:

void Kontrast::setContrast(uint8_t data) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
	uint8_t txData[2];
	txData[0] = 0x00;
 8001394:	2300      	movs	r3, #0
 8001396:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	737b      	strb	r3, [r7, #13]

 HAL_I2C_Master_Transmit(&hi2c1,0x2E<<1, (uint8_t*)txData,2,1000);
 800139c:	f107 020c 	add.w	r2, r7, #12
 80013a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2302      	movs	r3, #2
 80013a8:	215c      	movs	r1, #92	; 0x5c
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_ZN8Kontrast11setContrastEh+0x30>)
 80013ac:	f004 fbcc 	bl	8005b48 <HAL_I2C_Master_Transmit>

}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200005a8 	.word	0x200005a8

080013bc <_ZN3LCDC1Ev>:
#include "main.h"




LCD::LCD() {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

}
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2102      	movs	r1, #2
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f004 fb08 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2104      	movs	r1, #4
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f004 fb02 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2108      	movs	r1, #8
 80013f8:	482d      	ldr	r0, [pc, #180]	; (80014b0 <_ZN3LCD7InitLCDEv+0xdc>)
 80013fa:	f004 fafd 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001408:	f004 faf6 	bl	80059f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001412:	4828      	ldr	r0, [pc, #160]	; (80014b4 <_ZN3LCD7InitLCDEv+0xe0>)
 8001414:	f004 faf0 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141e:	4825      	ldr	r0, [pc, #148]	; (80014b4 <_ZN3LCD7InitLCDEv+0xe0>)
 8001420:	f004 faea 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2101      	movs	r1, #1
 8001428:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142c:	f004 fae4 	bl	80059f8 <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 8001430:	2130      	movs	r1, #48	; 0x30
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f970 	bl	8001718 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f003 fda7 	bl	8004f8c <HAL_Delay>
	WriteCommaandWwakeUp(0x30);
 800143e:	2130      	movs	r1, #48	; 0x30
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f969 	bl	8001718 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f003 fda0 	bl	8004f8c <HAL_Delay>
	WriteCommaandWwakeUp(0x30);
 800144c:	2130      	movs	r1, #48	; 0x30
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f962 	bl	8001718 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 8001454:	2001      	movs	r0, #1
 8001456:	f003 fd99 	bl	8004f8c <HAL_Delay>
	WriteCommaandWwakeUp(0x20);
 800145a:	2120      	movs	r1, #32
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f95b 	bl	8001718 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f003 fd92 	bl	8004f8c <HAL_Delay>
	WriteCommand(0x28);
 8001468:	2128      	movs	r1, #40	; 0x28
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f99e 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f003 fd8b 	bl	8004f8c <HAL_Delay>
	WriteCommand(0x10); //Set cursor
 8001476:	2110      	movs	r1, #16
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f997 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f003 fd84 	bl	8004f8c <HAL_Delay>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 8001484:	210f      	movs	r1, #15
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f990 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 800148c:	2001      	movs	r0, #1
 800148e:	f003 fd7d 	bl	8004f8c <HAL_Delay>
	WriteCommand(0x06);
 8001492:	2106      	movs	r1, #6
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f989 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	HAL_Delay(1);
 800149a:	2001      	movs	r0, #1
 800149c:	f003 fd76 	bl	8004f8c <HAL_Delay>
	WriteCommand(0x01);
 80014a0:	2101      	movs	r1, #1
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f982 	bl	80017ac <_ZN3LCD12WriteCommandEh>

}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	48001c00 	.word	0x48001c00
 80014b4:	48000800 	.word	0x48000800

080014b8 <_ZN3LCD5WriteEPchhS0_hh>:


void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	4611      	mov	r1, r2
 80014c4:	461a      	mov	r2, r3
 80014c6:	460b      	mov	r3, r1
 80014c8:	71fb      	strb	r3, [r7, #7]
 80014ca:	4613      	mov	r3, r2
 80014cc:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f000 f96b 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
 80014da:	7dfa      	ldrb	r2, [r7, #23]
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d207      	bcs.n	80014f2 <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 80014e2:	2110      	movs	r1, #16
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f000 f9ef 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	3301      	adds	r3, #1
 80014ee:	75fb      	strb	r3, [r7, #23]
 80014f0:	e7f3      	b.n	80014da <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 80014f2:	2300      	movs	r3, #0
 80014f4:	75bb      	strb	r3, [r7, #22]
 80014f6:	7dbb      	ldrb	r3, [r7, #22]
 80014f8:	2b0b      	cmp	r3, #11
 80014fa:	d814      	bhi.n	8001526 <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	7dbb      	ldrb	r3, [r7, #22]
 8001500:	429a      	cmp	r2, r3
 8001502:	d908      	bls.n	8001516 <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 8001504:	7dbb      	ldrb	r3, [r7, #22]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f9da 	bl	80018c8 <_ZN3LCD9WriteDataEh>
 8001514:	e003      	b.n	800151e <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 8001516:	2110      	movs	r1, #16
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f9d5 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 800151e:	7dbb      	ldrb	r3, [r7, #22]
 8001520:	3301      	adds	r3, #1
 8001522:	75bb      	strb	r3, [r7, #22]
 8001524:	e7e7      	b.n	80014f6 <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 8001526:	21c0      	movs	r1, #192	; 0xc0
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f93f 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 800152e:	2300      	movs	r3, #0
 8001530:	757b      	strb	r3, [r7, #21]
 8001532:	7d7a      	ldrb	r2, [r7, #21]
 8001534:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001538:	429a      	cmp	r2, r3
 800153a:	d207      	bcs.n	800154c <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 800153c:	2110      	movs	r1, #16
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 f9c2 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001544:	7d7b      	ldrb	r3, [r7, #21]
 8001546:	3301      	adds	r3, #1
 8001548:	757b      	strb	r3, [r7, #21]
 800154a:	e7f2      	b.n	8001532 <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 800154c:	2300      	movs	r3, #0
 800154e:	753b      	strb	r3, [r7, #20]
 8001550:	7d3a      	ldrb	r2, [r7, #20]
 8001552:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001556:	f1c3 030c 	rsb	r3, r3, #12
 800155a:	429a      	cmp	r2, r3
 800155c:	da15      	bge.n	800158a <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 800155e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001562:	7d3b      	ldrb	r3, [r7, #20]
 8001564:	429a      	cmp	r2, r3
 8001566:	d908      	bls.n	800157a <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 8001568:	7d3b      	ldrb	r3, [r7, #20]
 800156a:	6a3a      	ldr	r2, [r7, #32]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f9a8 	bl	80018c8 <_ZN3LCD9WriteDataEh>
 8001578:	e003      	b.n	8001582 <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 800157a:	2110      	movs	r1, #16
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f9a3 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 8001582:	7d3b      	ldrb	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	753b      	strb	r3, [r7, #20]
 8001588:	e7e2      	b.n	8001550 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_ZN3LCD5ClearEv>:

void LCD::Clear(){
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	WriteCommand(0x80);
 800159a:	2180      	movs	r1, #128	; 0x80
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f905 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	uint8_t counter = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
	for(counter= 0; counter<12; counter++){
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	2b0b      	cmp	r3, #11
 80015ae:	d807      	bhi.n	80015c0 <_ZN3LCD5ClearEv+0x2e>
		WriteData(0x10);
 80015b0:	2110      	movs	r1, #16
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f988 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(counter= 0; counter<12; counter++){
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e7f4      	b.n	80015aa <_ZN3LCD5ClearEv+0x18>
	}

	WriteCommand(0xC0);
 80015c0:	21c0      	movs	r1, #192	; 0xc0
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8f2 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	for(counter= 0; counter<12; counter++){
 80015c8:	2300      	movs	r3, #0
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	2b0b      	cmp	r3, #11
 80015d0:	d807      	bhi.n	80015e2 <_ZN3LCD5ClearEv+0x50>
		WriteData(0x10);
 80015d2:	2110      	movs	r1, #16
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f977 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(counter= 0; counter<12; counter++){
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	e7f4      	b.n	80015cc <_ZN3LCD5ClearEv+0x3a>
	}
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_ZN3LCD5WriteEPKchhPchh>:


void LCD::Write(const char* line1, uint8_t lenght1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	4611      	mov	r1, r2
 80015f6:	461a      	mov	r2, r3
 80015f8:	460b      	mov	r3, r1
 80015fa:	71fb      	strb	r3, [r7, #7]
 80015fc:	4613      	mov	r3, r2
 80015fe:	71bb      	strb	r3, [r7, #6]
	WriteCommand(0x80+startl1);
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	3b80      	subs	r3, #128	; 0x80
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4619      	mov	r1, r3
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 f8cf 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
 8001612:	7dfa      	ldrb	r2, [r7, #23]
 8001614:	79bb      	ldrb	r3, [r7, #6]
 8001616:	f1c3 030c 	rsb	r3, r3, #12
 800161a:	429a      	cmp	r2, r3
 800161c:	da14      	bge.n	8001648 <_ZN3LCD5WriteEPKchhPchh+0x5e>
		if(lenght1 > i){
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	429a      	cmp	r2, r3
 8001624:	d908      	bls.n	8001638 <_ZN3LCD5WriteEPKchhPchh+0x4e>
			WriteData(line1[i]);
 8001626:	7dfb      	ldrb	r3, [r7, #23]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 f949 	bl	80018c8 <_ZN3LCD9WriteDataEh>
 8001636:	e003      	b.n	8001640 <_ZN3LCD5WriteEPKchhPchh+0x56>
		}else{
			WriteData(0x10);
 8001638:	2110      	movs	r1, #16
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f944 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	3301      	adds	r3, #1
 8001644:	75fb      	strb	r3, [r7, #23]
 8001646:	e7e4      	b.n	8001612 <_ZN3LCD5WriteEPKchhPchh+0x28>
		}
	}


	WriteCommand(0x80+0x40);
 8001648:	21c0      	movs	r1, #192	; 0xc0
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 f8ae 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001650:	2300      	movs	r3, #0
 8001652:	75bb      	strb	r3, [r7, #22]
 8001654:	7dba      	ldrb	r2, [r7, #22]
 8001656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800165a:	429a      	cmp	r2, r3
 800165c:	d207      	bcs.n	800166e <_ZN3LCD5WriteEPKchhPchh+0x84>
		WriteData(0x10);
 800165e:	2110      	movs	r1, #16
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f931 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001666:	7dbb      	ldrb	r3, [r7, #22]
 8001668:	3301      	adds	r3, #1
 800166a:	75bb      	strb	r3, [r7, #22]
 800166c:	e7f2      	b.n	8001654 <_ZN3LCD5WriteEPKchhPchh+0x6a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 800166e:	2300      	movs	r3, #0
 8001670:	757b      	strb	r3, [r7, #21]
 8001672:	7d7a      	ldrb	r2, [r7, #21]
 8001674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001678:	f1c3 030c 	rsb	r3, r3, #12
 800167c:	429a      	cmp	r2, r3
 800167e:	da15      	bge.n	80016ac <_ZN3LCD5WriteEPKchhPchh+0xc2>
		if(lengthL2 > i){
 8001680:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001684:	7d7b      	ldrb	r3, [r7, #21]
 8001686:	429a      	cmp	r2, r3
 8001688:	d908      	bls.n	800169c <_ZN3LCD5WriteEPKchhPchh+0xb2>
			WriteData(line2[i]);
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	6a3a      	ldr	r2, [r7, #32]
 800168e:	4413      	add	r3, r2
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 f917 	bl	80018c8 <_ZN3LCD9WriteDataEh>
 800169a:	e003      	b.n	80016a4 <_ZN3LCD5WriteEPKchhPchh+0xba>
		}else{
			WriteData(0x10);
 800169c:	2110      	movs	r1, #16
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f912 	bl	80018c8 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80016a4:	7d7b      	ldrb	r3, [r7, #21]
 80016a6:	3301      	adds	r3, #1
 80016a8:	757b      	strb	r3, [r7, #21]
 80016aa:	e7e2      	b.n	8001672 <_ZN3LCD5WriteEPKchhPchh+0x88>
		}
	}


}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70bb      	strb	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d107      	bne.n	80016e4 <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	3b80      	subs	r3, #128	; 0x80
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f865 	bl	80017ac <_ZN3LCD12WriteCommandEh>
 80016e2:	e009      	b.n	80016f8 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 80016e4:	78bb      	ldrb	r3, [r7, #2]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d106      	bne.n	80016f8 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	3b40      	subs	r3, #64	; 0x40
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f85a 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 80016fe:	210f      	movs	r1, #15
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f853 	bl	80017ac <_ZN3LCD12WriteCommandEh>
	}




}
 8001706:	e003      	b.n	8001710 <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001708:	210f      	movs	r1, #15
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f84e 	bl	80017ac <_ZN3LCD12WriteCommandEh>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	111b      	asrs	r3, r3, #4
 8001728:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	2102      	movs	r1, #2
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f004 f95d 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2104      	movs	r1, #4
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f004 f953 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2108      	movs	r1, #8
 800175e:	4812      	ldr	r0, [pc, #72]	; (80017a8 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 8001760:	f004 f94a 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	b2db      	uxtb	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001776:	f004 f93f 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 800177a:	2064      	movs	r0, #100	; 0x64
 800177c:	f001 f896 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2101      	movs	r1, #1
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f004 f936 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 800178c:	2064      	movs	r0, #100	; 0x64
 800178e:	f001 f88d 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2101      	movs	r1, #1
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f004 f92d 	bl	80059f8 <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	48001c00 	.word	0x48001c00

080017ac <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017be:	4840      	ldr	r0, [pc, #256]	; (80018c0 <_ZN3LCD12WriteCommandEh+0x114>)
 80017c0:	f004 f91a 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ca:	483d      	ldr	r0, [pc, #244]	; (80018c0 <_ZN3LCD12WriteCommandEh+0x114>)
 80017cc:	f004 f914 	bl	80059f8 <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	111b      	asrs	r3, r3, #4
 80017d4:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	2102      	movs	r1, #2
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f004 f907 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	461a      	mov	r2, r3
 80017f4:	2104      	movs	r1, #4
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f004 f8fd 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	b2db      	uxtb	r3, r3
 8001806:	461a      	mov	r2, r3
 8001808:	2108      	movs	r1, #8
 800180a:	482e      	ldr	r0, [pc, #184]	; (80018c4 <_ZN3LCD12WriteCommandEh+0x118>)
 800180c:	f004 f8f4 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	b2db      	uxtb	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f004 f8e9 	bl	80059f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2101      	movs	r1, #1
 800182a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182e:	f004 f8e3 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 8001832:	2064      	movs	r0, #100	; 0x64
 8001834:	f001 f83a 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	2101      	movs	r1, #1
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f004 f8da 	bl	80059f8 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	461a      	mov	r2, r3
 800184e:	2102      	movs	r1, #2
 8001850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001854:	f004 f8d0 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001858:	78fb      	ldrb	r3, [r7, #3]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	b2db      	uxtb	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	2104      	movs	r1, #4
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f004 f8c6 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	2108      	movs	r1, #8
 8001878:	4812      	ldr	r0, [pc, #72]	; (80018c4 <_ZN3LCD12WriteCommandEh+0x118>)
 800187a:	f004 f8bd 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	b2db      	uxtb	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800188c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001890:	f004 f8b2 	bl	80059f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	2101      	movs	r1, #1
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f004 f8ac 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80018a0:	2064      	movs	r0, #100	; 0x64
 80018a2:	f001 f803 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2101      	movs	r1, #1
 80018aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ae:	f004 f8a3 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80018b2:	2064      	movs	r0, #100	; 0x64
 80018b4:	f000 fffa 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48001c00 	.word	0x48001c00

080018c8 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018da:	4840      	ldr	r0, [pc, #256]	; (80019dc <_ZN3LCD9WriteDataEh+0x114>)
 80018dc:	f004 f88c 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018e6:	483d      	ldr	r0, [pc, #244]	; (80019dc <_ZN3LCD9WriteDataEh+0x114>)
 80018e8:	f004 f886 	bl	80059f8 <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	111b      	asrs	r3, r3, #4
 80018f0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	2102      	movs	r1, #2
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f004 f879 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	461a      	mov	r2, r3
 8001910:	2104      	movs	r1, #4
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f004 f86f 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	2108      	movs	r1, #8
 8001926:	482e      	ldr	r0, [pc, #184]	; (80019e0 <_ZN3LCD9WriteDataEh+0x118>)
 8001928:	f004 f866 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	b2db      	uxtb	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800193a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193e:	f004 f85b 	bl	80059f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2101      	movs	r1, #1
 8001946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194a:	f004 f855 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f000 ffac 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f004 f84c 	bl	80059f8 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	b2db      	uxtb	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	2102      	movs	r1, #2
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f004 f842 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	2104      	movs	r1, #4
 8001980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001984:	f004 f838 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	b2db      	uxtb	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	2108      	movs	r1, #8
 8001994:	4812      	ldr	r0, [pc, #72]	; (80019e0 <_ZN3LCD9WriteDataEh+0x118>)
 8001996:	f004 f82f 	bl	80059f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f004 f824 	bl	80059f8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80019b0:	2201      	movs	r2, #1
 80019b2:	2101      	movs	r1, #1
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f004 f81e 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f000 ff75 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ca:	f004 f815 	bl	80059f8 <HAL_GPIO_WritePin>
	Tools::DWT_Delay_us(100);
 80019ce:	2064      	movs	r0, #100	; 0x64
 80019d0:	f000 ff6c 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	48000800 	.word	0x48000800
 80019e0:	48001c00 	.word	0x48001c00

080019e4 <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	this->model = model;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	601a      	str	r2, [r3, #0]
}
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 8001a02:	b082      	sub	sp, #8
 8001a04:	b490      	push	{r4, r7}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	f107 0110 	add.w	r1, r7, #16
 8001a12:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1d1c      	adds	r4, r3, #4
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc90      	pop	{r4, r7}
 8001a32:	b002      	add	sp, #8
 8001a34:	4770      	bx	lr

08001a36 <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6858      	ldr	r0, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	891b      	ldrh	r3, [r3, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f003 ffd3 	bl	80059f8 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68da      	ldr	r2, [r3, #12]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	8a1b      	ldrh	r3, [r3, #16]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f003 ffb3 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d048      	beq.n	8001b04 <_ZN8LoadCell6UpdateEv+0xce>
		for(int i = 0; i<25; i++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b18      	cmp	r3, #24
 8001a7a:	dc29      	bgt.n	8001ad0 <_ZN8LoadCell6UpdateEv+0x9a>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6858      	ldr	r0, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	891b      	ldrh	r3, [r3, #8]
 8001a84:	2201      	movs	r2, #1
 8001a86:	4619      	mov	r1, r3
 8001a88:	f003 ffb6 	bl	80059f8 <HAL_GPIO_WritePin>
			Tools::DWT_Delay_us(10);
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f000 ff0d 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6858      	ldr	r0, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	891b      	ldrh	r3, [r3, #8]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f003 ffab 	bl	80059f8 <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8a1b      	ldrh	r3, [r3, #16]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f003 ff8b 	bl	80059c8 <HAL_GPIO_ReadPin>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
			Tools::DWT_Delay_us(10);
 8001ac2:	200a      	movs	r0, #10
 8001ac4:	f000 fef2 	bl	80028ac <_ZN5Tools12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3301      	adds	r3, #1
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	e7d2      	b.n	8001a76 <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7c9b      	ldrb	r3, [r3, #18]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d002      	beq.n	8001ae4 <_ZN8LoadCell6UpdateEv+0xae>
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d008      	beq.n	8001af4 <_ZN8LoadCell6UpdateEv+0xbe>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 8001ae2:	e00f      	b.n	8001b04 <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell1(data);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f000 f9f3 	bl	8001ed8 <_ZN5Model12setLoadCell1El>
			break;
 8001af2:	e007      	b.n	8001b04 <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell2(data);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4611      	mov	r1, r2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fa05 	bl	8001f0c <_ZN5Model12setLoadCell2El>
			break;
 8001b02:	bf00      	nop
		}
	}

}
 8001b04:	bf00      	nop
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN3LogC1EP5Model>:
 *      Author: marcel
 */

#include "Log.h"

Log::Log(Model *model) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	609a      	str	r2, [r3, #8]
	addrPointer = 1;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	605a      	str	r2, [r3, #4]
}
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZN3Log4initEv>:

void Log::init() {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	6078      	str	r0, [r7, #4]

	uint8_t txBuffer[] = { 0x00, 0x00 };
 8001b38:	2300      	movs	r3, #0
 8001b3a:	81bb      	strh	r3, [r7, #12]
	uint8_t rxBuffer[] = { 0, 0,0 };
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	; (8001bb8 <_ZN3Log4initEv+0x88>)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	6812      	ldr	r2, [r2, #0]
 8001b44:	4611      	mov	r1, r2
 8001b46:	8019      	strh	r1, [r3, #0]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	0c12      	lsrs	r2, r2, #16
 8001b4c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR << 1, txBuffer, 2, 100);
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2302      	movs	r3, #2
 8001b58:	21a8      	movs	r1, #168	; 0xa8
 8001b5a:	4818      	ldr	r0, [pc, #96]	; (8001bbc <_ZN3Log4initEv+0x8c>)
 8001b5c:	f003 fff4 	bl	8005b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 3, 100);
 8001b60:	f107 0208 	add.w	r2, r7, #8
 8001b64:	2364      	movs	r3, #100	; 0x64
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2303      	movs	r3, #3
 8001b6a:	21a8      	movs	r1, #168	; 0xa8
 8001b6c:	4813      	ldr	r0, [pc, #76]	; (8001bbc <_ZN3Log4initEv+0x8c>)
 8001b6e:	f004 f8df 	bl	8005d30 <HAL_I2C_Master_Receive>

	if((addrPointer = ((rxBuffer[0]<<16) + (rxBuffer[1]<<8) + (rxBuffer[2]))) == 0){
 8001b72:	7a3b      	ldrb	r3, [r7, #8]
 8001b74:	041a      	lsls	r2, r3, #16
 8001b76:	7a7b      	ldrb	r3, [r7, #9]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	4413      	add	r3, r2
 8001b7c:	7aba      	ldrb	r2, [r7, #10]
 8001b7e:	4413      	add	r3, r2
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <_ZN3Log4initEv+0x6e>
		addrPointer = 1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	605a      	str	r2, [r3, #4]
	}

	model->setAddrPointer(addrPointer);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f000 fccf 	bl	800254e <_ZN5Model14setAddrPointerEt>

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	0800e1e4 	.word	0x0800e1e4
 8001bbc:	200005a8 	.word	0x200005a8

08001bc0 <_ZN3Log9addEntriyEv>:
	}


}

void Log::addEntriy() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]

	uint8_t txBuffer[18];

	uint32_t addrCounter = (addrPointer*16-13);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	3b0d      	subs	r3, #13
 8001bd0:	61fb      	str	r3, [r7, #28]

	uint8_t addr = ((addrCounter)>>16)&0xFF;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	76fb      	strb	r3, [r7, #27]

	txBuffer[0] = ((addrCounter)>>8)&0xFF;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	723b      	strb	r3, [r7, #8]
	txBuffer[1] = (addrCounter)&0xFF;
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	727b      	strb	r3, [r7, #9]
	txBuffer[2] = model->getYear();
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fa0f 	bl	800200e <_ZNK5Model7getYearEv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	72bb      	strb	r3, [r7, #10]
	txBuffer[3] = model->getMonth();
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f9b2 	bl	8001f62 <_ZNK5Model8getMonthEv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	72fb      	strb	r3, [r7, #11]
	txBuffer[4] = model->getDay();
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f910 	bl	8001e2c <_ZNK5Model6getDayEv>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	733b      	strb	r3, [r7, #12]
	txBuffer[5] = model->getHour();
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f936 	bl	8001e86 <_ZNK5Model7getHourEv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	737b      	strb	r3, [r7, #13]
	txBuffer[6] = model->getMinute();
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f980 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73bb      	strb	r3, [r7, #14]
	txBuffer[7] = model->getSeconds();
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 f9b3 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 8001c36:	4603      	mov	r3, r0
 8001c38:	73fb      	strb	r3, [r7, #15]
	txBuffer[8] = ';';
 8001c3a:	233b      	movs	r3, #59	; 0x3b
 8001c3c:	743b      	strb	r3, [r7, #16]
	txBuffer[9] = (model->getWeight() >> 8) & 0xFF;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f9c7 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	121b      	asrs	r3, r3, #8
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	747b      	strb	r3, [r7, #17]
	txBuffer[10] = (model->getWeight()) & 0xFF;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f9be 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	74bb      	strb	r3, [r7, #18]
	txBuffer[11] = ';';
 8001c60:	233b      	movs	r3, #59	; 0x3b
 8001c62:	74fb      	strb	r3, [r7, #19]
	txBuffer[12] = (model->getPrize() >> 16) & 0xFF;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fc39 	bl	80024e0 <_ZNK5Model8getPrizeEv>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	0c1b      	lsrs	r3, r3, #16
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	753b      	strb	r3, [r7, #20]
	txBuffer[13] = (model->getPrize() >> 8) & 0xFF;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fc30 	bl	80024e0 <_ZNK5Model8getPrizeEv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	757b      	strb	r3, [r7, #21]
	txBuffer[14] = (model->getPrize()) & 0xFF;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fc27 	bl	80024e0 <_ZNK5Model8getPrizeEv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	75bb      	strb	r3, [r7, #22]
	txBuffer[15] = ';';
 8001c98:	233b      	movs	r3, #59	; 0x3b
 8001c9a:	75fb      	strb	r3, [r7, #23]
	txBuffer[16] = (uint8_t) model->getWachstyp();
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 fb97 	bl	80023d4 <_ZNK5Model11getWachstypEv>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	763b      	strb	r3, [r7, #24]
	txBuffer[17] = '*';
 8001caa:	232a      	movs	r3, #42	; 0x2a
 8001cac:	767b      	strb	r3, [r7, #25]

	HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR | addr) << 1, txBuffer, 18, 100);
 8001cae:	7efb      	ldrb	r3, [r7, #27]
 8001cb0:	f043 0354 	orr.w	r3, r3, #84	; 0x54
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	f107 0208 	add.w	r2, r7, #8
 8001cc0:	2364      	movs	r3, #100	; 0x64
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	481c      	ldr	r0, [pc, #112]	; (8001d38 <_ZN3Log9addEntriyEv+0x178>)
 8001cc8:	f003 ff3e 	bl	8005b48 <HAL_I2C_Master_Transmit>
	addrPointer++;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	605a      	str	r2, [r3, #4]
	model->setAddrPointer(addrPointer);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f000 fc33 	bl	800254e <_ZN5Model14setAddrPointerEt>

	//Update Addresspointer
	txBuffer[0] = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	723b      	strb	r3, [r7, #8]
	txBuffer[1] = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	727b      	strb	r3, [r7, #9]
	txBuffer[2] = (addrPointer >> 16) & 0x0000FF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	72bb      	strb	r3, [r7, #10]
	txBuffer[3] = (addrPointer>>8)&0x0000FF;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	72fb      	strb	r3, [r7, #11]
	txBuffer[4] = (addrPointer & 0x0000FF);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	733b      	strb	r3, [r7, #12]

	while(HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 5, 100) != HAL_OK);
 8001d0c:	f107 0208 	add.w	r2, r7, #8
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2305      	movs	r3, #5
 8001d16:	21a8      	movs	r1, #168	; 0xa8
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <_ZN3Log9addEntriyEv+0x178>)
 8001d1a:	f003 ff15 	bl	8005b48 <HAL_I2C_Master_Transmit>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d000      	beq.n	8001d30 <_ZN3Log9addEntriyEv+0x170>
 8001d2e:	e7ed      	b.n	8001d0c <_ZN3Log9addEntriyEv+0x14c>

//	HAL_I2C_Master_Transmit(&hi2c1, (EEPROM_ADDR) << 1, txBuffer, 5, 100);
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200005a8 	.word	0x200005a8

08001d3c <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001d56:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001d5e:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <_ZN5ModelC1Ev+0xec>)
 8001d64:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <_ZN5ModelC1Ev+0xec>)
 8001d6a:	615a      	str	r2, [r3, #20]

	 weight = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	831a      	strh	r2, [r3, #24]
	 kontrast = 100;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2264      	movs	r2, #100	; 0x64
 8001d76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 400; //Preis in Rr/100g
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
	 Parafinwachs_Preis = 350;	//Preis in Rr/100g
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28


	 wachstyp = E_UNDEF;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 00;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 month = 01;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	 day = 01;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 dayOfWeek = 0;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	 hour = 0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 minute = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	 seconds = 0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//---------------Taster Status---------------
	 T1Short = false;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 T1Long = false;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 T2Short = false;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 T2Long = false;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	 T3Short = false;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	 T3Long = false;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	 T4Short = false;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 T4Long = false;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	 T5Short = false;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 T5Long = false;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40566666 	.word	0x40566666

08001e2c <_ZNK5Model6getDayEv>:

uint8_t Model::getDay() const {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	return day;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_ZN5Model6setDayEh>:

void Model::setDay(uint8_t day) {
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	70fb      	strb	r3, [r7, #3]
	this->day = day;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	78fa      	ldrb	r2, [r7, #3]
 8001e56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_ZN5Model12setDayOfWeekEh>:

uint8_t Model::getDayOfWeek() const {
	return dayOfWeek;
}

void Model::setDayOfWeek(uint8_t dayOfWeek) {
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	70fb      	strb	r3, [r7, #3]
	this->dayOfWeek = dayOfWeek;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_ZNK5Model7getHourEv>:

uint8_t Model::getHour() const {
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
	return hour;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <_ZN5Model7setHourEh>:

void Model::setHour(uint8_t hour) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
	this->hour = hour;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_ZNK5Model12getLoadCell1Ev>:

int32_t Model::getLoadCell1() const {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	return loadCell1;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	return loadCell2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_ZNK5Model9getMinuteEv>:

uint8_t Model::getMinute() const {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	return minute;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <_ZN5Model9setMinuteEh>:

void Model::setMinute(uint8_t minute) {
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	70fb      	strb	r3, [r7, #3]
	this->minute = minute;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_ZNK5Model8getMonthEv>:

uint8_t Model::getMonth() const {
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	return month;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_ZN5Model8setMonthEh>:

void Model::setMonth(uint8_t month) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
	this->month = month;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZNK5Model10getSecondsEv>:

uint8_t Model::getSeconds() const {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	return seconds;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_ZN5Model10setSecondsEh>:

void Model::setSeconds(uint8_t seconds) {
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
	this->seconds = seconds;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_ZNK5Model9getWeightEv>:

int16_t Model::getWeight() const {
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
	return weight;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	831a      	strh	r2, [r3, #24]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_ZNK5Model7getYearEv>:

uint8_t Model::getYear() const {
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return year;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 800201c:	4618      	mov	r0, r3
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_ZN5Model7setYearEh>:

void Model::setYear(uint8_t year) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
	this->year = year;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_ZNK5Model8isT1LongEv>:

bool Model::isT1Long() const {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
	return T1Long;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	78fa      	ldrb	r2, [r7, #3]
 8002072:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return T1Short;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	return T2Long;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
	return T2Short;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	78fa      	ldrb	r2, [r7, #3]
 8002120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	return T3Long;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	460b      	mov	r3, r1
 8002154:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
	return T3Short;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	return T4Long;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
	return T4Short;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	return T5Long;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	460b      	mov	r3, r1
 800223c:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
	return T5Short;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	edd3 7a04 	vldr	s15, [r3, #16]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	d802      	bhi.n	80022aa <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 80022a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022a8:	e001      	b.n	80022ae <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	ee07 3a90 	vmov	s15, r3
}
 80022b2:	eeb0 0a67 	vmov.f32	s0, s15
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80022ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d6:	d802      	bhi.n	80022de <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 80022d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022dc:	e001      	b.n	80022e2 <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	ee07 3a90 	vmov	s15, r3
}
 80022e6:	eeb0 0a67 	vmov.f32	s0, s15
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	ee07 3a90 	vmov	s15, r3
 8002350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
 800236a:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 800236e:	edd7 7a00 	vldr	s15, [r7]
 8002372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002376:	ee17 2a90 	vmov	r2, s15
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800239e:	eeb0 0a67 	vmov.f32	s0, s15
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZN5Model20setParafinwachsPreisEf>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	ed87 0a00 	vstr	s0, [r7]
	Parafinwachs_Preis = parafinwachsPreis;
 80023b8:	edd7 7a00 	vldr	s15, [r7]
 80023bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023c0:	ee17 2a90 	vmov	r2, s15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_ZNK5Model11getWachstypEv>:

Model::EWACHS Model::getWachstyp() const {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	return wachstyp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	switch(this->wachstyp){
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002408:	2b02      	cmp	r3, #2
 800240a:	d020      	beq.n	800244e <_ZN5Model11setWachstypENS_6EWACHSE+0x60>
 800240c:	2b02      	cmp	r3, #2
 800240e:	dc2b      	bgt.n	8002468 <_ZN5Model11setWachstypENS_6EWACHSE+0x7a>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <_ZN5Model11setWachstypENS_6EWACHSE+0x2c>
 8002414:	2b01      	cmp	r3, #1
 8002416:	d00d      	beq.n	8002434 <_ZN5Model11setWachstypENS_6EWACHSE+0x46>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 8002418:	e026      	b.n	8002468 <_ZN5Model11setWachstypENS_6EWACHSE+0x7a>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 800241a:	2201      	movs	r2, #1
 800241c:	2110      	movs	r1, #16
 800241e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002422:	f003 fae9 	bl	80059f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2140      	movs	r1, #64	; 0x40
 800242a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800242e:	f003 fae3 	bl	80059f8 <HAL_GPIO_WritePin>
		break;
 8002432:	e019      	b.n	8002468 <_ZN5Model11setWachstypENS_6EWACHSE+0x7a>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 8002434:	2200      	movs	r2, #0
 8002436:	2110      	movs	r1, #16
 8002438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243c:	f003 fadc 	bl	80059f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8002440:	2201      	movs	r2, #1
 8002442:	2140      	movs	r1, #64	; 0x40
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f003 fad6 	bl	80059f8 <HAL_GPIO_WritePin>
		break;
 800244c:	e00c      	b.n	8002468 <_ZN5Model11setWachstypENS_6EWACHSE+0x7a>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 800244e:	2201      	movs	r2, #1
 8002450:	2110      	movs	r1, #16
 8002452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002456:	f003 facf 	bl	80059f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	2140      	movs	r1, #64	; 0x40
 800245e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002462:	f003 fac9 	bl	80059f8 <HAL_GPIO_WritePin>
		break;
 8002466:	bf00      	nop
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	60da      	str	r2, [r3, #12]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_ZNK5Model11getKontrastEv>:

uint8_t Model::getKontrast() const {
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	return kontrast;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_ZN5Model11setKontrastEh>:

void Model::setKontrast(uint8_t kontrast) {
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	70fb      	strb	r3, [r7, #3]
	this->kontrast = kontrast;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <_ZNK5Model15isOverrideClockEv>:

bool Model::isOverrideClock() const {
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
	return overrideClock;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <_ZNK5Model8getPrizeEv>:

uint16_t Model::getAddrPointer() const {
	return addrPointer;
}

uint32_t Model::getPrize() const {
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	return prize;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69db      	ldr	r3, [r3, #28]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <_ZNK5Model10isAddEntryEv>:

bool Model::isAddEntry() const {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	return addEntry;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_ZN5Model11setAddEntryEb>:

void Model::setAddEntry(bool addEntry) {
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	70fb      	strb	r3, [r7, #3]
	this->addEntry = addEntry;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	78fa      	ldrb	r2, [r7, #3]
 8002522:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_ZN5Model8setPrizeEm>:

void Model::setPrize(uint32_t prize) {
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
	this->prize = prize;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	61da      	str	r2, [r3, #28]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_ZN5Model14setAddrPointerEt>:

void Model::setAddrPointer(uint16_t addrPointer) {
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	460b      	mov	r3, r1
 8002558:	807b      	strh	r3, [r7, #2]
	this->addrPointer = addrPointer;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	887a      	ldrh	r2, [r7, #2]
 800255e:	841a      	strh	r2, [r3, #32]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_ZN5Model16setOverrideClockEb>:

void Model::setOverrideClock(bool overrideClock) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
	this->overrideClock = overrideClock;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	bfb8      	it	lt
 800259a:	425b      	neglt	r3, r3
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "stdlib.h"


char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff ffe9 	bl	800258c <_ZSt3absl>
 80025ba:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a4a      	ldr	r2, [pc, #296]	; (80026e8 <_ZN5Tools14intToAsciiCharElh+0x140>)
 80025c0:	fb82 1203 	smull	r1, r2, r2, r3
 80025c4:	1312      	asrs	r2, r2, #12
 80025c6:	17db      	asrs	r3, r3, #31
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	3330      	adds	r3, #48	; 0x30
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	4b46      	ldr	r3, [pc, #280]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 80025d2:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a46      	ldr	r2, [pc, #280]	; (80026f0 <_ZN5Tools14intToAsciiCharElh+0x148>)
 80025d8:	fb82 1203 	smull	r1, r2, r2, r3
 80025dc:	1192      	asrs	r2, r2, #6
 80025de:	17db      	asrs	r3, r3, #31
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4940      	ldr	r1, [pc, #256]	; (80026e8 <_ZN5Tools14intToAsciiCharElh+0x140>)
 80025e8:	fb81 0103 	smull	r0, r1, r1, r3
 80025ec:	1309      	asrs	r1, r1, #12
 80025ee:	17db      	asrs	r3, r3, #31
 80025f0:	1a5b      	subs	r3, r3, r1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4619      	mov	r1, r3
 80025f6:	0089      	lsls	r1, r1, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	4413      	add	r3, r2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	3330      	adds	r3, #48	; 0x30
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b39      	ldr	r3, [pc, #228]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002608:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a39      	ldr	r2, [pc, #228]	; (80026f4 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 800260e:	fb82 1203 	smull	r1, r2, r2, r3
 8002612:	1152      	asrs	r2, r2, #5
 8002614:	17db      	asrs	r3, r3, #31
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b2da      	uxtb	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4934      	ldr	r1, [pc, #208]	; (80026f0 <_ZN5Tools14intToAsciiCharElh+0x148>)
 800261e:	fb81 0103 	smull	r0, r1, r1, r3
 8002622:	1189      	asrs	r1, r1, #6
 8002624:	17db      	asrs	r3, r3, #31
 8002626:	1a5b      	subs	r3, r3, r1
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4619      	mov	r1, r3
 800262c:	0089      	lsls	r1, r1, #2
 800262e:	440b      	add	r3, r1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	b2db      	uxtb	r3, r3
 8002634:	4413      	add	r3, r2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	3330      	adds	r3, #48	; 0x30
 800263a:	b2da      	uxtb	r2, r3
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 800263e:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a2d      	ldr	r2, [pc, #180]	; (80026f8 <_ZN5Tools14intToAsciiCharElh+0x150>)
 8002644:	fb82 1203 	smull	r1, r2, r2, r3
 8002648:	1092      	asrs	r2, r2, #2
 800264a:	17db      	asrs	r3, r3, #31
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	b2da      	uxtb	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4928      	ldr	r1, [pc, #160]	; (80026f4 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 8002654:	fb81 0103 	smull	r0, r1, r1, r3
 8002658:	1149      	asrs	r1, r1, #5
 800265a:	17db      	asrs	r3, r3, #31
 800265c:	1a5b      	subs	r3, r3, r1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	0089      	lsls	r1, r1, #2
 8002664:	440b      	add	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4413      	add	r3, r2
 800266c:	b2db      	uxtb	r3, r3
 800266e:	3330      	adds	r3, #48	; 0x30
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002674:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <_ZN5Tools14intToAsciiCharElh+0x150>)
 800267a:	fb83 1302 	smull	r1, r3, r3, r2
 800267e:	1099      	asrs	r1, r3, #2
 8002680:	17d3      	asrs	r3, r2, #31
 8002682:	1ac9      	subs	r1, r1, r3
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	1ad1      	subs	r1, r2, r3
 800268e:	b2cb      	uxtb	r3, r1
 8002690:	3330      	adds	r3, #48	; 0x30
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b15      	ldr	r3, [pc, #84]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002696:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	2300      	movs	r3, #0
 800269e:	73bb      	strb	r3, [r7, #14]
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d81a      	bhi.n	80026dc <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	f1c3 0205 	rsb	r2, r3, #5
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d107      	bne.n	80026c2 <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <_ZN5Tools14intToAsciiCharElh+0x154>)
 80026b6:	212e      	movs	r1, #46	; 0x2e
 80026b8:	54d1      	strb	r1, [r2, r3]
        		j--;
 80026ba:	7bbb      	ldrb	r3, [r7, #14]
 80026bc:	3b01      	subs	r3, #1
 80026be:	73bb      	strb	r3, [r7, #14]
 80026c0:	e005      	b.n	80026ce <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 80026c2:	7bba      	ldrb	r2, [r7, #14]
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	4909      	ldr	r1, [pc, #36]	; (80026ec <_ZN5Tools14intToAsciiCharElh+0x144>)
 80026c8:	5c89      	ldrb	r1, [r1, r2]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	; (80026fc <_ZN5Tools14intToAsciiCharElh+0x154>)
 80026cc:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	3301      	adds	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	3301      	adds	r3, #1
 80026d8:	73bb      	strb	r3, [r7, #14]
 80026da:	e7e1      	b.n	80026a0 <_ZN5Tools14intToAsciiCharElh+0xf8>
        	}
        }
	return result;
 80026dc:	4b07      	ldr	r3, [pc, #28]	; (80026fc <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	68db8bad 	.word	0x68db8bad
 80026ec:	20000308 	.word	0x20000308
 80026f0:	10624dd3 	.word	0x10624dd3
 80026f4:	51eb851f 	.word	0x51eb851f
 80026f8:	66666667 	.word	0x66666667
 80026fc:	20000310 	.word	0x20000310

08002700 <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 8002700:	b480      	push	{r7}
 8002702:	b087      	sub	sp, #28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	int result = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <_ZN5Tools8Round5RpEl+0x60>)
 8002710:	fb83 1302 	smull	r1, r3, r3, r2
 8002714:	1099      	asrs	r1, r3, #2
 8002716:	17d3      	asrs	r3, r2, #31
 8002718:	1ac9      	subs	r1, r1, r3
 800271a:	460b      	mov	r3, r1
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <_ZN5Tools8Round5RpEl+0x60>)
 800272a:	fb82 1203 	smull	r1, r2, r2, r3
 800272e:	1052      	asrs	r2, r2, #1
 8002730:	17db      	asrs	r3, r3, #31
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	1d5a      	adds	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	e003      	b.n	8002750 <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	617b      	str	r3, [r7, #20]
    }
    return result;
 8002750:	697b      	ldr	r3, [r7, #20]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	66666667 	.word	0x66666667

08002764 <_ZN5Tools11byteToAsciiEh>:

char* Tools::byteToAscii(uint8_t data) {;
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
	static char result[3];
	result[0] = data/100 + 0x30;
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4a1e      	ldr	r2, [pc, #120]	; (80027ec <_ZN5Tools11byteToAsciiEh+0x88>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3330      	adds	r3, #48	; 0x30
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <_ZN5Tools11byteToAsciiEh+0x8c>)
 8002780:	701a      	strb	r2, [r3, #0]
	result[1] = data/10 - (data/100)*10 + 0x30;
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	4a1b      	ldr	r2, [pc, #108]	; (80027f4 <_ZN5Tools11byteToAsciiEh+0x90>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	08db      	lsrs	r3, r3, #3
 800278c:	b2da      	uxtb	r2, r3
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	4916      	ldr	r1, [pc, #88]	; (80027ec <_ZN5Tools11byteToAsciiEh+0x88>)
 8002792:	fba1 1303 	umull	r1, r3, r1, r3
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4619      	mov	r1, r3
 800279c:	0149      	lsls	r1, r1, #5
 800279e:	1ac9      	subs	r1, r1, r3
 80027a0:	0089      	lsls	r1, r1, #2
 80027a2:	1acb      	subs	r3, r1, r3
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3330      	adds	r3, #48	; 0x30
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <_ZN5Tools11byteToAsciiEh+0x8c>)
 80027b2:	705a      	strb	r2, [r3, #1]
	result[2] = data - (data/10)*10 + 0x30;
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4a0f      	ldr	r2, [pc, #60]	; (80027f4 <_ZN5Tools11byteToAsciiEh+0x90>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	461a      	mov	r2, r3
 80027c2:	0152      	lsls	r2, r2, #5
 80027c4:	1ad2      	subs	r2, r2, r3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4413      	add	r3, r2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3330      	adds	r3, #48	; 0x30
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <_ZN5Tools11byteToAsciiEh+0x8c>)
 80027da:	709a      	strb	r2, [r3, #2]
    return result;
 80027dc:	4b04      	ldr	r3, [pc, #16]	; (80027f0 <_ZN5Tools11byteToAsciiEh+0x8c>)
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	51eb851f 	.word	0x51eb851f
 80027f0:	20000318 	.word	0x20000318
 80027f4:	cccccccd 	.word	0xcccccccd

080027f8 <_ZN5Tools10BCDDecoderEh>:



uint8_t Tools::BCDDecoder(uint8_t data) {
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = (data & 0xF0)>>4;
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data & 0x0F;
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	73bb      	strb	r3, [r7, #14]

	return TP*10+UP;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	461a      	mov	r2, r3
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	b2da      	uxtb	r2, r3
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	4413      	add	r3, r2
 8002820:	b2db      	uxtb	r3, r3
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <_ZN5Tools10BCDEncoderEh>:

uint8_t Tools::BCDEncoder(uint8_t data) {
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = data/10;
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <_ZN5Tools10BCDEncoderEh+0x44>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	08db      	lsrs	r3, r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data-(TP*10);
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	461a      	mov	r2, r3
 800284a:	0152      	lsls	r2, r2, #5
 800284c:	1ad2      	subs	r2, r2, r3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4413      	add	r3, r2
 800285a:	73bb      	strb	r3, [r7, #14]
	return (TP<<4) + UP;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	b2da      	uxtb	r2, r3
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	4413      	add	r3, r2
 8002866:	b2db      	uxtb	r3, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	cccccccd 	.word	0xcccccccd

08002878 <_ZN5Tools8DWT_InitEv>:
static bool init = false;

/*
 * Mikrosenkunden delay Initialisieren
 */
void Tools::DWT_Init(void) {
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <_ZN5Tools8DWT_InitEv+0x2c>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a08      	ldr	r2, [pc, #32]	; (80028a4 <_ZN5Tools8DWT_InitEv+0x2c>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_ZN5Tools8DWT_InitEv+0x30>)
 800288a:	2200      	movs	r2, #0
 800288c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <_ZN5Tools8DWT_InitEv+0x30>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_ZN5Tools8DWT_InitEv+0x30>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6013      	str	r3, [r2, #0]
}
 800289a:	bf00      	nop
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000edf0 	.word	0xe000edf0
 80028a8:	e0001000 	.word	0xe0001000

080028ac <_ZN5Tools12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Tools::DWT_Delay_us(volatile uint32_t microseconds) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	if(!init){
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <_ZN5Tools12DWT_Delay_usEm+0x60>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d004      	beq.n	80028cc <_ZN5Tools12DWT_Delay_usEm+0x20>
		DWT_Init();
 80028c2:	f7ff ffd9 	bl	8002878 <_ZN5Tools8DWT_InitEv>
		init = true;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <_ZN5Tools12DWT_Delay_usEm+0x60>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
	}
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80028cc:	4b10      	ldr	r3, [pc, #64]	; (8002910 <_ZN5Tools12DWT_Delay_usEm+0x64>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80028d2:	f006 f8b1 	bl	8008a38 <HAL_RCC_GetHCLKFreq>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <_ZN5Tools12DWT_Delay_usEm+0x68>)
 80028da:	fba2 2303 	umull	r2, r3, r2, r3
 80028de:	0c9b      	lsrs	r3, r3, #18
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <_ZN5Tools12DWT_Delay_usEm+0x64>)
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	bf34      	ite	cc
 80028f6:	2301      	movcc	r3, #1
 80028f8:	2300      	movcs	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d000      	beq.n	8002902 <_ZN5Tools12DWT_Delay_usEm+0x56>
 8002900:	e7f2      	b.n	80028e8 <_ZN5Tools12DWT_Delay_usEm+0x3c>
		;
}
 8002902:	bf00      	nop
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000031b 	.word	0x2000031b
 8002910:	e0001000 	.word	0xe0001000
 8002914:	431bde83 	.word	0x431bde83

08002918 <_ZN10BWSettingsC1EP5ModelP3LCDP5Flash>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd, Flash *flash) {
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <_ZN10BWSettingsC1EP5ModelP3LCDP5Flash+0x3c>)
 800292a:	611a      	str	r2, [r3, #16]
	this->model = model;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	601a      	str	r2, [r3, #0]
	this->flash = flash;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	609a      	str	r2, [r3, #8]
	position = 0;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	735a      	strb	r2, [r3, #13]
	init = false;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	739a      	strb	r2, [r3, #14]
}
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	0800e1e8 	.word	0x0800e1e8

08002958 <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 8002958:	b5b0      	push	{r4, r5, r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af04      	add	r7, sp, #16
 800295e:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	731a      	strb	r2, [r3, #12]

	int preis = model->getBienenwachsPreis();
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fce8 	bl	8002340 <_ZNK5Model19getBienenwachsPreisEv>
 8002970:	eef0 7a40 	vmov.f32	s15, s0
 8002974:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002978:	ee17 3a90 	vmov	r3, s15
 800297c:	60fb      	str	r3, [r7, #12]

	if(!init){
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7b9b      	ldrb	r3, [r3, #14]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <_ZN10BWSettings6UpdateEv+0x7a>
		position = 0;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685c      	ldr	r4, [r3, #4]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691d      	ldr	r5, [r3, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4619      	mov	r1, r3
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f974 	bl	8002c8c <_ZN10BWSettings16prizeToCharArrayEm>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2200      	movs	r2, #0
 80029a8:	9202      	str	r2, [sp, #8]
 80029aa:	220c      	movs	r2, #12
 80029ac:	9201      	str	r2, [sp, #4]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2300      	movs	r3, #0
 80029b2:	220b      	movs	r2, #11
 80029b4:	4629      	mov	r1, r5
 80029b6:	4620      	mov	r0, r4
 80029b8:	f7fe fe17 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6858      	ldr	r0, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7b59      	ldrb	r1, [r3, #13]
 80029c4:	2301      	movs	r3, #1
 80029c6:	2202      	movs	r2, #2
 80029c8:	f7fe fe74 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb53 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d025      	beq.n	8002a2e <_ZN10BWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7b5b      	ldrb	r3, [r3, #13]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d903      	bls.n	80029f2 <_ZN10BWSettings6UpdateEv+0x9a>
			position = 0;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	735a      	strb	r2, [r3, #13]
 80029f0:	e00f      	b.n	8002a12 <_ZN10BWSettings6UpdateEv+0xba>
		}else{
			position++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	7b5b      	ldrb	r3, [r3, #13]
 80029f6:	3301      	adds	r3, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b5b      	ldrb	r3, [r3, #13]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d105      	bne.n	8002a12 <_ZN10BWSettings6UpdateEv+0xba>
				position++;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7b5b      	ldrb	r3, [r3, #13]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	735a      	strb	r2, [r3, #13]
			}
		}

		lcd->SetCursorPosition(position, 2,true);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6858      	ldr	r0, [r3, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7b59      	ldrb	r1, [r3, #13]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f7fe fe49 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fb37 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fb08 	bl	8002048 <_ZNK5Model8isT1LongEv>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <_ZN10BWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fb0c 	bl	8002062 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fb51 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 809e 	beq.w	8002b98 <_ZN10BWSettings6UpdateEv+0x240>

		if(position == 0){
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7b5b      	ldrb	r3, [r3, #13]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d110      	bne.n	8002a86 <_ZN10BWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002a6a:	3b28      	subs	r3, #40	; 0x28
 8002a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a70:	d205      	bcs.n	8002a7e <_ZN10BWSettings6UpdateEv+0x126>
				preis -= 9000;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002a78:	3b28      	subs	r3, #40	; 0x28
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e003      	b.n	8002a86 <_ZN10BWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002a84:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7b5b      	ldrb	r3, [r3, #13]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11c      	bne.n	8002ac8 <_ZN10BWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a7b      	ldr	r2, [pc, #492]	; (8002c80 <_ZN10BWSettings6UpdateEv+0x328>)
 8002a92:	fb82 1203 	smull	r1, r2, r2, r3
 8002a96:	1152      	asrs	r2, r2, #5
 8002a98:	17db      	asrs	r3, r3, #31
 8002a9a:	1ad1      	subs	r1, r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <_ZN10BWSettings6UpdateEv+0x32c>)
 8002aa0:	fb82 0203 	smull	r0, r2, r2, r3
 8002aa4:	1192      	asrs	r2, r2, #6
 8002aa6:	17db      	asrs	r3, r3, #31
 8002aa8:	1a9a      	subs	r2, r3, r2
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	440b      	add	r3, r1
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d104      	bne.n	8002ac2 <_ZN10BWSettings6UpdateEv+0x16a>
				preis -= 900;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	e002      	b.n	8002ac8 <_ZN10BWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3364      	adds	r3, #100	; 0x64
 8002ac6:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	7b5b      	ldrb	r3, [r3, #13]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d11b      	bne.n	8002b08 <_ZN10BWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <_ZN10BWSettings6UpdateEv+0x330>)
 8002ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ad8:	1092      	asrs	r2, r2, #2
 8002ada:	17db      	asrs	r3, r3, #31
 8002adc:	1ad1      	subs	r1, r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a67      	ldr	r2, [pc, #412]	; (8002c80 <_ZN10BWSettings6UpdateEv+0x328>)
 8002ae2:	fb82 0203 	smull	r0, r2, r2, r3
 8002ae6:	1152      	asrs	r2, r2, #5
 8002ae8:	17db      	asrs	r3, r3, #31
 8002aea:	1a9a      	subs	r2, r3, r2
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	440b      	add	r3, r1
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d103      	bne.n	8002b02 <_ZN10BWSettings6UpdateEv+0x1aa>
				preis -= 90;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	3b5a      	subs	r3, #90	; 0x5a
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e002      	b.n	8002b08 <_ZN10BWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	330a      	adds	r3, #10
 8002b06:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b5b      	ldrb	r3, [r3, #13]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d114      	bne.n	8002b3a <_ZN10BWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 8002b10:	68f9      	ldr	r1, [r7, #12]
 8002b12:	4b5d      	ldr	r3, [pc, #372]	; (8002c88 <_ZN10BWSettings6UpdateEv+0x330>)
 8002b14:	fb83 2301 	smull	r2, r3, r3, r1
 8002b18:	109a      	asrs	r2, r3, #2
 8002b1a:	17cb      	asrs	r3, r1, #31
 8002b1c:	1ad2      	subs	r2, r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	1aca      	subs	r2, r1, r3
 8002b28:	2a00      	cmp	r2, #0
 8002b2a:	d103      	bne.n	8002b34 <_ZN10BWSettings6UpdateEv+0x1dc>
				preis += 5;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3305      	adds	r3, #5
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e002      	b.n	8002b3a <_ZN10BWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b05      	subs	r3, #5
 8002b38:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setBienenwachsPreis(preis);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	ee07 2a90 	vmov	s15, r2
 8002b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fc08 	bl	8002362 <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685c      	ldr	r4, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691d      	ldr	r5, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f894 	bl	8002c8c <_ZN10BWSettings16prizeToCharArrayEm>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2200      	movs	r2, #0
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	9201      	str	r2, [sp, #4]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	220b      	movs	r2, #11
 8002b74:	4629      	mov	r1, r5
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fe fd37 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6858      	ldr	r0, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7b59      	ldrb	r1, [r3, #13]
 8002b84:	2301      	movs	r3, #1
 8002b86:	2202      	movs	r2, #2
 8002b88:	f7fe fd94 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fabc 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fa8d 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <_ZN10BWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2100      	movs	r1, #0
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fa91 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fad6 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <_ZN10BWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fada 	bl	8002184 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff faab 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <_ZN10BWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff faaf 	bl	800214a <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fad7 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <_ZN10BWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fadb 	bl	80021be <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fae6 	bl	80021de <_ZNK5Model9isT4ShortEv>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <_ZN10BWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff faea 	bl	80021f8 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff faf5 	bl	8002218 <_ZNK5Model8isT5LongEv>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <_ZN10BWSettings6UpdateEv+0x2fe>
		//Neuer Wert speichern
		flash->WriteFlash();
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fb27 	bl	800128c <_ZN5Flash10WriteFlashEv>
		init = false;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2203      	movs	r2, #3
 8002c48:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff faee 	bl	8002232 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff faf9 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <_ZN10BWSettings6UpdateEv+0x31a>
		model->setT5Short(false);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fafd 	bl	800226c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7b1b      	ldrb	r3, [r3, #12]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	51eb851f 	.word	0x51eb851f
 8002c84:	10624dd3 	.word	0x10624dd3
 8002c88:	66666667 	.word	0x66666667

08002c8c <_ZN10BWSettings16prizeToCharArrayEm>:


char* BWSettings::prizeToCharArray(uint32_t prize){
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2102      	movs	r1, #2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fc84 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002ca0:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d80b      	bhi.n	8002cc4 <_ZN10BWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	7811      	ldrb	r1, [r2, #0]
 8002cb8:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cba:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
 8002cc2:	e7f0      	b.n	8002ca6 <_ZN10BWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 8002cca:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002ccc:	2246      	movs	r2, #70	; 0x46
 8002cce:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cd2:	2272      	movs	r2, #114	; 0x72
 8002cd4:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cd8:	222f      	movs	r2, #47	; 0x2f
 8002cda:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cde:	2231      	movs	r2, #49	; 0x31
 8002ce0:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8002ce2:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002ce4:	2230      	movs	r2, #48	; 0x30
 8002ce6:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cea:	2230      	movs	r2, #48	; 0x30
 8002cec:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002cf0:	2267      	movs	r2, #103	; 0x67
 8002cf2:	731a      	strb	r2, [r3, #12]
	return result;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000031c 	.word	0x2000031c

08002d04 <_ZN10MainScreenC1EP5ModelP3LCD>:
uint8_t weightStableCounter = 0;
bool entryAdded = false;
int32_t weight_1 = 0;;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
	this->model = model;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]
	this->screen = Model::E_MAIN_SCRREN;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2203      	movs	r2, #3
 8002d20:	721a      	strb	r2, [r3, #8]
	summeActive = SUMDEACTIVATED;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	729a      	strb	r2, [r3, #10]
	weightSum = 0;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
	prizeSum = 0;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	611a      	str	r2, [r3, #16]
}
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <_ZN10MainScreen6UpdateEv>:
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());

}

Model::ESCREEN MainScreen::Update(){
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	ed2d 8b02 	vpush	{d8}
 8002d4a:	b091      	sub	sp, #68	; 0x44
 8002d4c:	af04      	add	r7, sp, #16
 8002d4e:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	721a      	strb	r2, [r3, #8]

	//------------------Screen Update------------------
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fb3a 	bl	80023d4 <_ZNK5Model11getWachstypEv>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	bf0c      	ite	eq
 8002d66:	2301      	moveq	r3, #1
 8002d68:	2300      	movne	r3, #0
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <_ZN10MainScreen6UpdateEv+0x6e>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis()/100);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f92e 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	ee07 3a90 	vmov	s15, r3
 8002d80:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fad9 	bl	8002340 <_ZNK5Model19getBienenwachsPreisEv>
 8002d8e:	eef0 7a40 	vmov.f32	s15, s0
 8002d92:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002d96:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8003030 <_ZN10MainScreen6UpdateEv+0x2ec>
 8002d9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da2:	ee17 0a90 	vmov	r0, s15
 8002da6:	f7ff fcab 	bl	8002700 <_ZN5Tools8Round5RpEl>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	615a      	str	r2, [r3, #20]
 8002db0:	e030      	b.n	8002e14 <_ZN10MainScreen6UpdateEv+0xd0>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fb0c 	bl	80023d4 <_ZNK5Model11getWachstypEv>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <_ZN10MainScreen6UpdateEv+0xca>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis()/100);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff f900 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fad0 	bl	800238a <_ZNK5Model20getParafinwachsPreisEv>
 8002dea:	eef0 7a40 	vmov.f32	s15, s0
 8002dee:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002df2:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8003030 <_ZN10MainScreen6UpdateEv+0x2ec>
 8002df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dfe:	ee17 0a90 	vmov	r0, s15
 8002e02:	f7ff fc7d 	bl	8002700 <_ZN5Tools8Round5RpEl>
 8002e06:	4602      	mov	r2, r0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	e002      	b.n	8002e14 <_ZN10MainScreen6UpdateEv+0xd0>
	}else{
		prize = 0;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	615a      	str	r2, [r3, #20]
	}
	model->setPrize(prize);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7ff fb87 	bl	8002532 <_ZN5Model8setPrizeEm>

	char asciiWeight[6];
	char asciiPrize[6];


	switch(summeActive){
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7a9b      	ldrb	r3, [r3, #10]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	f200 80f2 	bhi.w	8003012 <_ZN10MainScreen6UpdateEv+0x2ce>
 8002e2e:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <_ZN10MainScreen6UpdateEv+0xf0>)
 8002e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e34:	08002e45 	.word	0x08002e45
 8002e38:	08002e8f 	.word	0x08002e8f
 8002e3c:	08002f67 	.word	0x08002f67
 8002e40:	08002feb 	.word	0x08002feb
	case SUMACTIVATED:
		strncpy(asciiWeight,Tools::intToAsciiChar(model->getWeight(),3),6);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff f8c4 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2103      	movs	r1, #3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff fba8 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002e58:	4601      	mov	r1, r0
 8002e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e5e:	2206      	movs	r2, #6
 8002e60:	4618      	mov	r0, r3
 8002e62:	f00b f991 	bl	800e188 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(0,2),6);
 8002e66:	2102      	movs	r1, #2
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff fb9d 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002e6e:	4601      	mov	r1, r0
 8002e70:	f107 0320 	add.w	r3, r7, #32
 8002e74:	2206      	movs	r2, #6
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00b f986 	bl	800e188 <strncpy>
		entryAdded = false;
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002e82:	2200      	movs	r2, #0
 8002e84:	2101      	movs	r1, #1
 8002e86:	486c      	ldr	r0, [pc, #432]	; (8003038 <_ZN10MainScreen6UpdateEv+0x2f4>)
 8002e88:	f002 fdb6 	bl	80059f8 <HAL_GPIO_WritePin>
		break;
 8002e8c:	e0c1      	b.n	8003012 <_ZN10MainScreen6UpdateEv+0x2ce>
	case SUMDEACTIVATED:
		strncpy(asciiWeight,Tools::intToAsciiChar(model->getWeight(),3),6);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f89f 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2103      	movs	r1, #3
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fb83 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002ea2:	4601      	mov	r1, r0
 8002ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ea8:	2206      	movs	r2, #6
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f00b f96c 	bl	800e188 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(prize,2),6);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fb76 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002ebc:	4601      	mov	r1, r0
 8002ebe:	f107 0320 	add.w	r3, r7, #32
 8002ec2:	2206      	movs	r2, #6
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f00b f95f 	bl	800e188 <strncpy>
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2101      	movs	r1, #1
 8002ece:	485a      	ldr	r0, [pc, #360]	; (8003038 <_ZN10MainScreen6UpdateEv+0x2f4>)
 8002ed0:	f002 fd92 	bl	80059f8 <HAL_GPIO_WritePin>
		if(weightStableCounter < 150){
 8002ed4:	4b59      	ldr	r3, [pc, #356]	; (800303c <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b95      	cmp	r3, #149	; 0x95
 8002eda:	d806      	bhi.n	8002eea <_ZN10MainScreen6UpdateEv+0x1a6>
			weightStableCounter++;
 8002edc:	4b57      	ldr	r3, [pc, #348]	; (800303c <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b55      	ldr	r3, [pc, #340]	; (800303c <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002ee6:	701a      	strb	r2, [r3, #0]
			weightStableCounter = 0;
		}



		break;
 8002ee8:	e093      	b.n	8003012 <_ZN10MainScreen6UpdateEv+0x2ce>
			int16_t actualWeight = model->getWeight();
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f871 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	85fb      	strh	r3, [r7, #46]	; 0x2e
			if(actualWeight < weight_1+5 && actualWeight > weight_1-5 && !entryAdded && actualWeight > 10){
 8002ef8:	4b51      	ldr	r3, [pc, #324]	; (8003040 <_ZN10MainScreen6UpdateEv+0x2fc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f02:	429a      	cmp	r2, r3
 8002f04:	db1b      	blt.n	8002f3e <_ZN10MainScreen6UpdateEv+0x1fa>
 8002f06:	4b4e      	ldr	r3, [pc, #312]	; (8003040 <_ZN10MainScreen6UpdateEv+0x2fc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	1f1a      	subs	r2, r3, #4
 8002f0c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dc14      	bgt.n	8002f3e <_ZN10MainScreen6UpdateEv+0x1fa>
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f083 0301 	eor.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <_ZN10MainScreen6UpdateEv+0x1fa>
 8002f22:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f26:	2b0a      	cmp	r3, #10
 8002f28:	dd09      	ble.n	8002f3e <_ZN10MainScreen6UpdateEv+0x1fa>
				model->setAddEntry(true);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff faee 	bl	8002512 <_ZN5Model11setAddEntryEb>
				entryAdded = true;
 8002f36:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
 8002f3c:	e003      	b.n	8002f46 <_ZN10MainScreen6UpdateEv+0x202>
				weight_1 = actualWeight;
 8002f3e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f42:	4a3f      	ldr	r2, [pc, #252]	; (8003040 <_ZN10MainScreen6UpdateEv+0x2fc>)
 8002f44:	6013      	str	r3, [r2, #0]
			if(actualWeight < 5 && actualWeight > -5){
 8002f46:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	dc07      	bgt.n	8002f5e <_ZN10MainScreen6UpdateEv+0x21a>
 8002f4e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8002f52:	f113 0f04 	cmn.w	r3, #4
 8002f56:	db02      	blt.n	8002f5e <_ZN10MainScreen6UpdateEv+0x21a>
				entryAdded = false;
 8002f58:	4b36      	ldr	r3, [pc, #216]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
			weightStableCounter = 0;
 8002f5e:	4b37      	ldr	r3, [pc, #220]	; (800303c <_ZN10MainScreen6UpdateEv+0x2f8>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
		break;
 8002f64:	e055      	b.n	8003012 <_ZN10MainScreen6UpdateEv+0x2ce>
	case TOTAL:
		strncpy(asciiWeight,Tools::intToAsciiChar(weightSum,3),6);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fb1b 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002f72:	4601      	mov	r1, r0
 8002f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f78:	2206      	movs	r2, #6
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00b f904 	bl	800e188 <strncpy>
		strncpy(asciiPrize,Tools::intToAsciiChar(prizeSum,2),6);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2102      	movs	r1, #2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fb0e 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8002f8c:	4601      	mov	r1, r0
 8002f8e:	f107 0320 	add.w	r3, r7, #32
 8002f92:	2206      	movs	r2, #6
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00b f8f7 	bl	800e188 <strncpy>
		model->setWeight(weightSum);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f7ff f822 	bl	8001ff0 <_ZN5Model9setWeightEs>
		model->setPrize(prizeSum);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f7ff fabb 	bl	8002532 <_ZN5Model8setPrizeEm>
		model->setWachstyp(Model::E_SUMME);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2103      	movs	r1, #3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fa13 	bl	80023ee <_ZN5Model11setWachstypENS_6EWACHSE>
		if(!entryAdded){
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01c      	beq.n	8003010 <_ZN10MainScreen6UpdateEv+0x2cc>
			model->setAddEntry(true);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fa98 	bl	8002512 <_ZN5Model11setAddEntryEb>
			entryAdded = true;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <_ZN10MainScreen6UpdateEv+0x2f0>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
		}

		break;
 8002fe8:	e012      	b.n	8003010 <_ZN10MainScreen6UpdateEv+0x2cc>
	case TOTALEND:
		summeActive = SUMDEACTIVATED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	729a      	strb	r2, [r3, #10]
		summeCounter = 0;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	725a      	strb	r2, [r3, #9]
		prizeSum = 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	611a      	str	r2, [r3, #16]
		weightSum = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	60da      	str	r2, [r3, #12]
		model->setWachstyp(Model::E_PARAFINWACHS);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff f9f0 	bl	80023ee <_ZN5Model11setWachstypENS_6EWACHSE>
		break;
 800300e:	e000      	b.n	8003012 <_ZN10MainScreen6UpdateEv+0x2ce>
		break;
 8003010:	bf00      	nop



	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe ffdd 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 800301c:	4603      	mov	r3, r0
 800301e:	b29b      	uxth	r3, r3
 8003020:	0bdb      	lsrs	r3, r3, #15
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <_ZN10MainScreen6UpdateEv+0x300>
		w[0] = '-';
 8003028:	232d      	movs	r3, #45	; 0x2d
 800302a:	753b      	strb	r3, [r7, #20]
 800302c:	e00c      	b.n	8003048 <_ZN10MainScreen6UpdateEv+0x304>
 800302e:	bf00      	nop
 8003030:	42c80000 	.word	0x42c80000
 8003034:	20000329 	.word	0x20000329
 8003038:	48000400 	.word	0x48000400
 800303c:	20000328 	.word	0x20000328
 8003040:	2000032c 	.word	0x2000032c
	}else{
		w[0] = ' ';
 8003044:	2320      	movs	r3, #32
 8003046:	753b      	strb	r3, [r7, #20]
	}

	w[1] = asciiWeight[0];
 8003048:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800304c:	757b      	strb	r3, [r7, #21]
	w[2] = asciiWeight[1];
 800304e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003052:	75bb      	strb	r3, [r7, #22]
	w[3] = asciiWeight[2];
 8003054:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003058:	75fb      	strb	r3, [r7, #23]
	w[4] = asciiWeight[3];
 800305a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800305e:	763b      	strb	r3, [r7, #24]
	w[5] = asciiWeight[4];
 8003060:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003064:	767b      	strb	r3, [r7, #25]
	w[6] = asciiWeight[5];
 8003066:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800306a:	76bb      	strb	r3, [r7, #26]
	w[7] = ' ';
 800306c:	2320      	movs	r3, #32
 800306e:	76fb      	strb	r3, [r7, #27]
	w[8] = 'k';
 8003070:	236b      	movs	r3, #107	; 0x6b
 8003072:	773b      	strb	r3, [r7, #28]
	w[9] = 'g';
 8003074:	2367      	movs	r3, #103	; 0x67
 8003076:	777b      	strb	r3, [r7, #29]

	p[0] = asciiPrize[0];
 8003078:	f897 3020 	ldrb.w	r3, [r7, #32]
 800307c:	723b      	strb	r3, [r7, #8]
	p[1] = asciiPrize[1];
 800307e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003082:	727b      	strb	r3, [r7, #9]
	p[2] = asciiPrize[2];
 8003084:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003088:	72bb      	strb	r3, [r7, #10]
	p[3] = asciiPrize[3];
 800308a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800308e:	72fb      	strb	r3, [r7, #11]
	p[4] = asciiPrize[4];
 8003090:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003094:	733b      	strb	r3, [r7, #12]
	p[5] = asciiPrize[5];
 8003096:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800309a:	737b      	strb	r3, [r7, #13]
	p[6] = ' ';
 800309c:	2320      	movs	r3, #32
 800309e:	73bb      	strb	r3, [r7, #14]
	p[7] = 'F';
 80030a0:	2346      	movs	r3, #70	; 0x46
 80030a2:	73fb      	strb	r3, [r7, #15]
	p[8] = 'r';
 80030a4:	2372      	movs	r3, #114	; 0x72
 80030a6:	743b      	strb	r3, [r7, #16]


	lcd->Write(w,10,2,p,9,3);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6858      	ldr	r0, [r3, #4]
 80030ac:	f107 0114 	add.w	r1, r7, #20
 80030b0:	2303      	movs	r3, #3
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	2309      	movs	r3, #9
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	f107 0308 	add.w	r3, r7, #8
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2302      	movs	r3, #2
 80030c0:	220a      	movs	r2, #10
 80030c2:	f7fe f9f9 	bl	80014b8 <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe ffd9 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <_ZN10MainScreen6UpdateEv+0x3aa>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f986 	bl	80023ee <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fe ffd7 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fe ffa8 	bl	8002048 <_ZNK5Model8isT1LongEv>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <_ZN10MainScreen6UpdateEv+0x3cc>
		screen = Model::E_BW_SETTINGS;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	721a      	strb	r2, [r3, #8]
		model->setT1Long(false);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe ffa9 	bl	8002062 <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f7fe ffee 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <_ZN10MainScreen6UpdateEv+0x3f4>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2102      	movs	r1, #2
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff f961 	bl	80023ee <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe ffec 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe ffbd 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <_ZN10MainScreen6UpdateEv+0x416>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	721a      	strb	r2, [r3, #8]
		model->setT2Long(false);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe ffbe 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe ffe6 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <_ZN10MainScreen6UpdateEv+0x432>

		model->setT3Long(false);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe ffea 	bl	800214a <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fff5 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d02e      	beq.n	80031e4 <_ZN10MainScreen6UpdateEv+0x4a0>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fff9 	bl	8002184 <_ZN5Model10setT3ShortEb>
			summeCounter++;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7a5b      	ldrb	r3, [r3, #9]
 8003196:	3301      	adds	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	725a      	strb	r2, [r3, #9]
			weightSum = weightSum + model->getWeight();
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68dc      	ldr	r4, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe ff15 	bl	8001fd6 <_ZNK5Model9getWeightEv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	18e2      	adds	r2, r4, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	60da      	str	r2, [r3, #12]
			prizeSum = prizeSum + model->getPrize();
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	461c      	mov	r4, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f98e 	bl	80024e0 <_ZNK5Model8getPrizeEv>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4423      	add	r3, r4
 80031c8:	461a      	mov	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	611a      	str	r2, [r3, #16]
			lcd->Clear();
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f9dd 	bl	8001592 <_ZN3LCD5ClearEv>
			HAL_Delay(100);
 80031d8:	2064      	movs	r0, #100	; 0x64
 80031da:	f001 fed7 	bl	8004f8c <HAL_Delay>

			summeActive = SUMACTIVATED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	729a      	strb	r2, [r3, #10]
	}

	//------------------Total------------------
	if(model->isT4Long()){
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ffdb 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d014      	beq.n	800321e <_ZN10MainScreen6UpdateEv+0x4da>
		model->setT4Long(false);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ffdf 	bl	80021be <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2204      	movs	r2, #4
 8003204:	721a      	strb	r2, [r3, #8]

		summeActive = SUMDEACTIVATED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	729a      	strb	r2, [r3, #10]
		summeCounter = 0;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	725a      	strb	r2, [r3, #9]
		weightSum = 0;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
		prizeSum = 0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
	}
	if(model->isT4Short()){
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fe ffdb 	bl	80021de <_ZNK5Model9isT4ShortEv>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <_ZN10MainScreen6UpdateEv+0x50c>
		model->setT4Short(false);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe ffdf 	bl	80021f8 <_ZN5Model10setT4ShortEb>
		if(summeActive == SUMACTIVATED){
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7a9b      	ldrb	r3, [r3, #10]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <_ZN10MainScreen6UpdateEv+0x506>
			summeActive = TOTAL;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	729a      	strb	r2, [r3, #10]
 8003248:	e002      	b.n	8003250 <_ZN10MainScreen6UpdateEv+0x50c>
		}else{
			summeActive = TOTALEND;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	729a      	strb	r2, [r3, #10]
		}
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ffdf 	bl	8002218 <_ZNK5Model8isT5LongEv>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <_ZN10MainScreen6UpdateEv+0x52e>
		screen = Model::E_TIME_SETTINGS;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2205      	movs	r2, #5
 8003264:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe ffe0 	bl	8002232 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe ffeb 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01d      	beq.n	80032be <_ZN10MainScreen6UpdateEv+0x57a>
		model->setLoadCellOffset1(model->getLoadCell1());
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681c      	ldr	r4, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fe fe18 	bl	8001ec0 <_ZNK5Model12getLoadCell1Ev>
 8003290:	4603      	mov	r3, r0
 8003292:	4619      	mov	r1, r3
 8003294:	4620      	mov	r0, r4
 8003296:	f7ff f839 	bl	800230c <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681c      	ldr	r4, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fe26 	bl	8001ef4 <_ZNK5Model12getLoadCell2Ev>
 80032a8:	4603      	mov	r3, r0
 80032aa:	4619      	mov	r1, r3
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff f8df 	bl	8002470 <_ZN5Model18setLoadCellOffset2El>
		model->setT5Short(false);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fe ffd7 	bl	800226c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7a1b      	ldrb	r3, [r3, #8]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3734      	adds	r7, #52	; 0x34
 80032c6:	46bd      	mov	sp, r7
 80032c8:	ecbd 8b02 	vpop	{d8}
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop

080032d0 <_ZN10PWSettingsC1EP5ModelP3LCDP5Flash>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd, Flash *flash) {
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <_ZN10PWSettingsC1EP5ModelP3LCDP5Flash+0x34>)
 80032e2:	611a      	str	r2, [r3, #16]
	this->model = model;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	601a      	str	r2, [r3, #0]
	this->flash = flash;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	609a      	str	r2, [r3, #8]
	this->lcd = lcd;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	605a      	str	r2, [r3, #4]
}
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	0800e1f4 	.word	0x0800e1f4

08003308 <_ZN10PWSettings6UpdateEv>:



Model::ESCREEN PWSettings::Update(){
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af04      	add	r7, sp, #16
 800330e:	6078      	str	r0, [r7, #4]

	screen = Model::E_PW_SETTINGS;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	731a      	strb	r2, [r3, #12]

	int preis = model->getParafinwachsPreis();
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff f835 	bl	800238a <_ZNK5Model20getParafinwachsPreisEv>
 8003320:	eef0 7a40 	vmov.f32	s15, s0
 8003324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003328:	ee17 3a90 	vmov	r3, s15
 800332c:	60fb      	str	r3, [r7, #12]

	if(!init){
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7b9b      	ldrb	r3, [r3, #14]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d022      	beq.n	8003382 <_ZN10PWSettings6UpdateEv+0x7a>
		position = 0;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685c      	ldr	r4, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691d      	ldr	r5, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f974 	bl	800363c <_ZN10PWSettings16prizeToCharArrayEm>
 8003354:	4603      	mov	r3, r0
 8003356:	2200      	movs	r2, #0
 8003358:	9202      	str	r2, [sp, #8]
 800335a:	220c      	movs	r2, #12
 800335c:	9201      	str	r2, [sp, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	220c      	movs	r2, #12
 8003364:	4629      	mov	r1, r5
 8003366:	4620      	mov	r0, r4
 8003368:	f7fe f93f 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6858      	ldr	r0, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	7b59      	ldrb	r1, [r3, #13]
 8003374:	2301      	movs	r3, #1
 8003376:	2202      	movs	r2, #2
 8003378:	f7fe f99c 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fe7b 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d025      	beq.n	80033de <_ZN10PWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7b5b      	ldrb	r3, [r3, #13]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d903      	bls.n	80033a2 <_ZN10PWSettings6UpdateEv+0x9a>
			position = 0;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	735a      	strb	r2, [r3, #13]
 80033a0:	e00f      	b.n	80033c2 <_ZN10PWSettings6UpdateEv+0xba>
		}else{
			position++;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7b5b      	ldrb	r3, [r3, #13]
 80033a6:	3301      	adds	r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7b5b      	ldrb	r3, [r3, #13]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d105      	bne.n	80033c2 <_ZN10PWSettings6UpdateEv+0xba>
				position++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7b5b      	ldrb	r3, [r3, #13]
 80033ba:	3301      	adds	r3, #1
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	735a      	strb	r2, [r3, #13]
			}
		}


		lcd->SetCursorPosition(position, 2,true);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6858      	ldr	r0, [r3, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	7b59      	ldrb	r1, [r3, #13]
 80033ca:	2301      	movs	r3, #1
 80033cc:	2202      	movs	r2, #2
 80033ce:	f7fe f971 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fe fe5f 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe fe30 	bl	8002048 <_ZNK5Model8isT1LongEv>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <_ZN10PWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2100      	movs	r1, #0
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fe34 	bl	8002062 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fe79 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 809e 	beq.w	8003548 <_ZN10PWSettings6UpdateEv+0x240>

		if(position == 0){
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7b5b      	ldrb	r3, [r3, #13]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d110      	bne.n	8003436 <_ZN10PWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 800341a:	3b28      	subs	r3, #40	; 0x28
 800341c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003420:	d205      	bcs.n	800342e <_ZN10PWSettings6UpdateEv+0x126>
				preis -= 9000;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8003428:	3b28      	subs	r3, #40	; 0x28
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e003      	b.n	8003436 <_ZN10PWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003434:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7b5b      	ldrb	r3, [r3, #13]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d11c      	bne.n	8003478 <_ZN10PWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a7b      	ldr	r2, [pc, #492]	; (8003630 <_ZN10PWSettings6UpdateEv+0x328>)
 8003442:	fb82 1203 	smull	r1, r2, r2, r3
 8003446:	1152      	asrs	r2, r2, #5
 8003448:	17db      	asrs	r3, r3, #31
 800344a:	1ad1      	subs	r1, r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a79      	ldr	r2, [pc, #484]	; (8003634 <_ZN10PWSettings6UpdateEv+0x32c>)
 8003450:	fb82 0203 	smull	r0, r2, r2, r3
 8003454:	1192      	asrs	r2, r2, #6
 8003456:	17db      	asrs	r3, r3, #31
 8003458:	1a9a      	subs	r2, r3, r2
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	440b      	add	r3, r1
 8003464:	2b09      	cmp	r3, #9
 8003466:	d104      	bne.n	8003472 <_ZN10PWSettings6UpdateEv+0x16a>
				preis -= 900;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <_ZN10PWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	3364      	adds	r3, #100	; 0x64
 8003476:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7b5b      	ldrb	r3, [r3, #13]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d11b      	bne.n	80034b8 <_ZN10PWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a6d      	ldr	r2, [pc, #436]	; (8003638 <_ZN10PWSettings6UpdateEv+0x330>)
 8003484:	fb82 1203 	smull	r1, r2, r2, r3
 8003488:	1092      	asrs	r2, r2, #2
 800348a:	17db      	asrs	r3, r3, #31
 800348c:	1ad1      	subs	r1, r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4a67      	ldr	r2, [pc, #412]	; (8003630 <_ZN10PWSettings6UpdateEv+0x328>)
 8003492:	fb82 0203 	smull	r0, r2, r2, r3
 8003496:	1152      	asrs	r2, r2, #5
 8003498:	17db      	asrs	r3, r3, #31
 800349a:	1a9a      	subs	r2, r3, r2
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	440b      	add	r3, r1
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d103      	bne.n	80034b2 <_ZN10PWSettings6UpdateEv+0x1aa>
				preis -= 90;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	3b5a      	subs	r3, #90	; 0x5a
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e002      	b.n	80034b8 <_ZN10PWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	330a      	adds	r3, #10
 80034b6:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	7b5b      	ldrb	r3, [r3, #13]
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d114      	bne.n	80034ea <_ZN10PWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 80034c0:	68f9      	ldr	r1, [r7, #12]
 80034c2:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <_ZN10PWSettings6UpdateEv+0x330>)
 80034c4:	fb83 2301 	smull	r2, r3, r3, r1
 80034c8:	109a      	asrs	r2, r3, #2
 80034ca:	17cb      	asrs	r3, r1, #31
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	1aca      	subs	r2, r1, r3
 80034d8:	2a00      	cmp	r2, #0
 80034da:	d103      	bne.n	80034e4 <_ZN10PWSettings6UpdateEv+0x1dc>
				preis += 5;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3305      	adds	r3, #5
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	e002      	b.n	80034ea <_ZN10PWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3b05      	subs	r3, #5
 80034e8:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setParafinwachsPreis(preis);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	ee07 2a90 	vmov	s15, r2
 80034f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe ff55 	bl	80023ac <_ZN5Model20setParafinwachsPreisEf>
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685c      	ldr	r4, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691d      	ldr	r5, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f894 	bl	800363c <_ZN10PWSettings16prizeToCharArrayEm>
 8003514:	4603      	mov	r3, r0
 8003516:	2200      	movs	r2, #0
 8003518:	9202      	str	r2, [sp, #8]
 800351a:	220c      	movs	r2, #12
 800351c:	9201      	str	r2, [sp, #4]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	2300      	movs	r3, #0
 8003522:	220c      	movs	r2, #12
 8003524:	4629      	mov	r1, r5
 8003526:	4620      	mov	r0, r4
 8003528:	f7fe f85f 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6858      	ldr	r0, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7b59      	ldrb	r1, [r3, #13]
 8003534:	2301      	movs	r3, #1
 8003536:	2202      	movs	r2, #2
 8003538:	f7fe f8bc 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2100      	movs	r1, #0
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fde4 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fdb5 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <_ZN10PWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fdb9 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fdfe 	bl	800216a <_ZNK5Model9isT3ShortEv>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <_ZN10PWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2100      	movs	r1, #0
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fe02 	bl	8002184 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fe fdd3 	bl	8002130 <_ZNK5Model8isT3LongEv>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <_ZN10PWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fdd7 	bl	800214a <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fdff 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <_ZN10PWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fe03 	bl	80021be <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe fe0e 	bl	80021de <_ZNK5Model9isT4ShortEv>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <_ZN10PWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fe12 	bl	80021f8 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7fe fe1d 	bl	8002218 <_ZNK5Model8isT5LongEv>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <_ZN10PWSettings6UpdateEv+0x2fe>
		//Neuer Wert speichern
		flash->WriteFlash();
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fe4f 	bl	800128c <_ZN5Flash10WriteFlashEv>
		init = false;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe fe16 	bl	8002232 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe21 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <_ZN10PWSettings6UpdateEv+0x31a>
		model->setT5Short(false);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe fe25 	bl	800226c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	7b1b      	ldrb	r3, [r3, #12]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bdb0      	pop	{r4, r5, r7, pc}
 800362e:	bf00      	nop
 8003630:	51eb851f 	.word	0x51eb851f
 8003634:	10624dd3 	.word	0x10624dd3
 8003638:	66666667 	.word	0x66666667

0800363c <_ZN10PWSettings16prizeToCharArrayEm>:


char* PWSettings::prizeToCharArray(uint32_t prize){
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2102      	movs	r1, #2
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ffac 	bl	80025a8 <_ZN5Tools14intToAsciiCharElh>
 8003650:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d80b      	bhi.n	8003674 <_ZN10PWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	3301      	adds	r3, #1
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	441a      	add	r2, r3
 8003664:	7bfb      	ldrb	r3, [r7, #15]
 8003666:	7811      	ldrb	r1, [r2, #0]
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800366a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	3301      	adds	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e7f0      	b.n	8003656 <_ZN10PWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8003674:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003676:	2220      	movs	r2, #32
 8003678:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800367c:	2246      	movs	r2, #70	; 0x46
 800367e:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003682:	2272      	movs	r2, #114	; 0x72
 8003684:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003688:	222f      	movs	r2, #47	; 0x2f
 800368a:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800368e:	2231      	movs	r2, #49	; 0x31
 8003690:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003694:	2230      	movs	r2, #48	; 0x30
 8003696:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800369a:	2230      	movs	r2, #48	; 0x30
 800369c:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80036a0:	2267      	movs	r2, #103	; 0x67
 80036a2:	731a      	strb	r2, [r3, #12]
	return result;
 80036a4:	4b02      	ldr	r3, [pc, #8]	; (80036b0 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000330 	.word	0x20000330

080036b4 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash>:
static TimeScreen *timeScreen;
static Contrast *kontrastSettings;



ScreenControl::ScreenControl(Model *model, Kontrast *contrast, Flash *flash) {
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	603b      	str	r3, [r7, #0]
	this->model = model;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	605a      	str	r2, [r3, #4]
	this->flash = flash;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	60da      	str	r2, [r3, #12]
	this->contrast = contrast;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	609a      	str	r2, [r3, #8]
	lcd  = LCD();
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fe6f 	bl	80013bc <_ZN3LCDC1Ev>

	mainScreen = new MainScreen(model, &lcd);
 80036de:	2018      	movs	r0, #24
 80036e0:	f00a fc49 	bl	800df76 <_Znwj>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461c      	mov	r4, r3
 80036e8:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7ff fb09 	bl	8002d04 <_ZN10MainScreenC1EP5ModelP3LCD>
 80036f2:	4b2a      	ldr	r3, [pc, #168]	; (800379c <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe8>)
 80036f4:	601c      	str	r4, [r3, #0]
	pwSettings = new PWSettings(model, &lcd, flash);
 80036f6:	2014      	movs	r0, #20
 80036f8:	f00a fc3d 	bl	800df76 <_Znwj>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461c      	mov	r4, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	4a25      	ldr	r2, [pc, #148]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff fde2 	bl	80032d0 <_ZN10PWSettingsC1EP5ModelP3LCDP5Flash>
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xec>)
 800370e:	601c      	str	r4, [r3, #0]
	bwSettings = new BWSettings(model, &lcd, flash);
 8003710:	2014      	movs	r0, #20
 8003712:	f00a fc30 	bl	800df76 <_Znwj>
 8003716:	4603      	mov	r3, r0
 8003718:	461c      	mov	r4, r3
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4a1e      	ldr	r2, [pc, #120]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff f8f9 	bl	8002918 <_ZN10BWSettingsC1EP5ModelP3LCDP5Flash>
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xf0>)
 8003728:	601c      	str	r4, [r3, #0]
	timeSettings = new TimeSettings(model, &lcd);
 800372a:	2010      	movs	r0, #16
 800372c:	f00a fc23 	bl	800df76 <_Znwj>
 8003730:	4603      	mov	r3, r0
 8003732:	461c      	mov	r4, r3
 8003734:	4a18      	ldr	r2, [pc, #96]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	4620      	mov	r0, r4
 800373a:	f000 ffd7 	bl	80046ec <_ZN12TimeSettingsC1EP5ModelP3LCD>
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xf4>)
 8003740:	601c      	str	r4, [r3, #0]
	dateSettings = new DateSettings(model, &lcd);
 8003742:	2014      	movs	r0, #20
 8003744:	f00a fc17 	bl	800df76 <_Znwj>
 8003748:	4603      	mov	r3, r0
 800374a:	461c      	mov	r4, r3
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	4620      	mov	r0, r4
 8003752:	f000 fc31 	bl	8003fb8 <_ZN12DateSettingsC1EP5ModelP3LCD>
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xf8>)
 8003758:	601c      	str	r4, [r3, #0]
	timeScreen = new TimeScreen(model, &lcd);
 800375a:	200c      	movs	r0, #12
 800375c:	f00a fc0b 	bl	800df76 <_Znwj>
 8003760:	4603      	mov	r3, r0
 8003762:	461c      	mov	r4, r3
 8003764:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	4620      	mov	r0, r4
 800376a:	f000 f8dd 	bl	8003928 <_ZN10TimeScreenC1EP5ModelP3LCD>
 800376e:	4b10      	ldr	r3, [pc, #64]	; (80037b0 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xfc>)
 8003770:	601c      	str	r4, [r3, #0]
	kontrastSettings = new Contrast(model, &lcd, contrast);
 8003772:	2018      	movs	r0, #24
 8003774:	f00a fbff 	bl	800df76 <_Znwj>
 8003778:	4603      	mov	r3, r0
 800377a:	461c      	mov	r4, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a06      	ldr	r2, [pc, #24]	; (8003798 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0xe4>)
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	4620      	mov	r0, r4
 8003784:	f000 fa22 	bl	8003bcc <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <_ZN13ScreenControlC1EP5ModelP8KontrastP5Flash+0x100>)
 800378a:	601c      	str	r4, [r3, #0]
}
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4618      	mov	r0, r3
 8003790:	371c      	adds	r7, #28
 8003792:	46bd      	mov	sp, r7
 8003794:	bd90      	pop	{r4, r7, pc}
 8003796:	bf00      	nop
 8003798:	2000033c 	.word	0x2000033c
 800379c:	20000340 	.word	0x20000340
 80037a0:	20000344 	.word	0x20000344
 80037a4:	20000348 	.word	0x20000348
 80037a8:	2000034c 	.word	0x2000034c
 80037ac:	20000350 	.word	0x20000350
 80037b0:	20000354 	.word	0x20000354
 80037b4:	20000358 	.word	0x20000358

080037b8 <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	lcd.InitLCD();
 80037c0:	4806      	ldr	r0, [pc, #24]	; (80037dc <_ZN13ScreenControl10InitScreenEv+0x24>)
 80037c2:	f7fd fe07 	bl	80013d4 <_ZN3LCD7InitLCDEv>

	currentScreen = Model::E_MAIN_SCRREN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2203      	movs	r2, #3
 80037d0:	705a      	strb	r2, [r3, #1]

}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000033c 	.word	0x2000033c

080037e0 <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	785a      	ldrb	r2, [r3, #1]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d85a      	bhi.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <_ZN13ScreenControl6UpdateEv+0x20>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003835 	.word	0x08003835
 8003804:	08003849 	.word	0x08003849
 8003808:	080038ad 	.word	0x080038ad
 800380c:	08003821 	.word	0x08003821
 8003810:	08003885 	.word	0x08003885
 8003814:	0800385d 	.word	0x0800385d
 8003818:	08003871 	.word	0x08003871
 800381c:	08003899 	.word	0x08003899

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 8003820:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <_ZN13ScreenControl6UpdateEv+0xd8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fa8d 	bl	8002d44 <_ZN10MainScreen6UpdateEv>
 800382a:	4603      	mov	r3, r0
 800382c:	461a      	mov	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	705a      	strb	r2, [r3, #1]
		break;
 8003832:	e03c      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 8003834:	4b21      	ldr	r3, [pc, #132]	; (80038bc <_ZN13ScreenControl6UpdateEv+0xdc>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff f88d 	bl	8002958 <_ZN10BWSettings6UpdateEv>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	705a      	strb	r2, [r3, #1]
		break;
 8003846:	e032      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_PW_SETTINGS:
		nextScreen = pwSettings->Update();
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <_ZN13ScreenControl6UpdateEv+0xe0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff fd5b 	bl	8003308 <_ZN10PWSettings6UpdateEv>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	705a      	strb	r2, [r3, #1]
		break;
 800385a:	e028      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_TIME_SETTINGS:
		nextScreen = timeSettings->Update();
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <_ZN13ScreenControl6UpdateEv+0xe4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f000 ff5b 	bl	800471c <_ZN12TimeSettings6UpdateEv>
 8003866:	4603      	mov	r3, r0
 8003868:	461a      	mov	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	705a      	strb	r2, [r3, #1]
		break;
 800386e:	e01e      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_DATE_SETTINGS:
		nextScreen = dateSettings->Update();
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <_ZN13ScreenControl6UpdateEv+0xe8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fbbb 	bl	8003ff0 <_ZN12DateSettings6UpdateEv>
 800387a:	4603      	mov	r3, r0
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	705a      	strb	r2, [r3, #1]
		break;
 8003882:	e014      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_LOG_BOOK:
		break;
	case Model::E_TIME:
		nextScreen =timeScreen->Update();
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <_ZN13ScreenControl6UpdateEv+0xec>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f861 	bl	8003950 <_ZN10TimeScreen6UpdateEv>
 800388e:	4603      	mov	r3, r0
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	705a      	strb	r2, [r3, #1]
	break;
 8003896:	e00a      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_KONTRAST_SETTINGS:
		nextScreen = kontrastSettings->Update();
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <_ZN13ScreenControl6UpdateEv+0xf0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f9b9 	bl	8003c14 <_ZN8Contrast6UpdateEv>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	705a      	strb	r2, [r3, #1]
		break;
 80038aa:	e000      	b.n	80038ae <_ZN13ScreenControl6UpdateEv+0xce>
		break;
 80038ac:	bf00      	nop
	}
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20000340 	.word	0x20000340
 80038bc:	20000348 	.word	0x20000348
 80038c0:	20000344 	.word	0x20000344
 80038c4:	2000034c 	.word	0x2000034c
 80038c8:	20000350 	.word	0x20000350
 80038cc:	20000354 	.word	0x20000354
 80038d0:	20000358 	.word	0x20000358

080038d4 <_ZN13ScreenControl16getCurrentScreenEv>:


Model::ESCREEN ScreenControl::getCurrentScreen(){
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	return this->currentScreen;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	781b      	ldrb	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <_Z41__static_initialization_and_destruction_0ii>:
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d107      	bne.n	800390c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003902:	4293      	cmp	r3, r2
 8003904:	d102      	bne.n	800390c <_Z41__static_initialization_and_destruction_0ii+0x20>
static LCD lcd;
 8003906:	4803      	ldr	r0, [pc, #12]	; (8003914 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003908:	f7fd fd58 	bl	80013bc <_ZN3LCDC1Ev>
}
 800390c:	bf00      	nop
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000033c 	.word	0x2000033c

08003918 <_GLOBAL__sub_I__ZN13ScreenControlC2EP5ModelP8KontrastP5Flash>:
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
 800391c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003920:	2001      	movs	r0, #1
 8003922:	f7ff ffe3 	bl	80038ec <_Z41__static_initialization_and_destruction_0ii>
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZN10TimeScreenC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "TimeScreen.h"

TimeScreen::TimeScreen(Model *model, LCD *lcd) {
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	this->model= model;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	605a      	str	r2, [r3, #4]

}
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <_ZN10TimeScreen6UpdateEv>:

Model::ESCREEN TimeScreen::Update(){
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	b087      	sub	sp, #28
 8003954:	af04      	add	r7, sp, #16
 8003956:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2204      	movs	r2, #4
 800395c:	721a      	strb	r2, [r3, #8]

	lcd->Write("Zeit",4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685c      	ldr	r4, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f7fe fa8d 	bl	8001e86 <_ZNK5Model7getHourEv>
 800396c:	4603      	mov	r3, r0
 800396e:	461d      	mov	r5, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fad7 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 800397a:	4603      	mov	r3, r0
 800397c:	461e      	mov	r6, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe fb0a 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 8003988:	4603      	mov	r3, r0
 800398a:	4632      	mov	r2, r6
 800398c:	4629      	mov	r1, r5
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f8a4 	bl	8003adc <_ZN10TimeScreen15TimeToCharArrayEhhh>
 8003994:	4603      	mov	r3, r0
 8003996:	2204      	movs	r2, #4
 8003998:	9202      	str	r2, [sp, #8]
 800399a:	2208      	movs	r2, #8
 800399c:	9201      	str	r2, [sp, #4]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	2204      	movs	r2, #4
 80039a4:	494c      	ldr	r1, [pc, #304]	; (8003ad8 <_ZN10TimeScreen6UpdateEv+0x188>)
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7fd fe1f 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>

	//------------------SW_BW------------------
	if(model->isT1Short()){
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fb66 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <_ZN10TimeScreen6UpdateEv+0x78>
		model->setT1Short(false);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fb6a 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fb3b 	bl	8002048 <_ZNK5Model8isT1LongEv>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <_ZN10TimeScreen6UpdateEv+0x94>
		model->setT1Long(false);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2100      	movs	r1, #0
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe fb3f 	bl	8002062 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe fb84 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <_ZN10TimeScreen6UpdateEv+0xb0>
		model->setT2Short(false);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2100      	movs	r1, #0
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fb88 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fb59 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <_ZN10TimeScreen6UpdateEv+0xcc>
		model->setT2Long(false);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2100      	movs	r1, #0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fb5d 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fba2 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <_ZN10TimeScreen6UpdateEv+0xe8>
		//-

		model->setT3Short(false);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fba6 	bl	8002184 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe fb77 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <_ZN10TimeScreen6UpdateEv+0x104>
		model->setT3Long(false);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fb7b 	bl	800214a <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fba3 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <_ZN10TimeScreen6UpdateEv+0x120>
		model->setT4Long(false);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fba7 	bl	80021be <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe fbb2 	bl	80021de <_ZNK5Model9isT4ShortEv>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <_ZN10TimeScreen6UpdateEv+0x13c>
		model->setT4Short(false);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fbb6 	bl	80021f8 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fbc1 	bl	8002218 <_ZNK5Model8isT5LongEv>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <_ZN10TimeScreen6UpdateEv+0x15e>
		screen = Model::E_MAIN_SCRREN;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2203      	movs	r2, #3
 8003aa0:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fbc2 	bl	8002232 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fbcd 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <_ZN10TimeScreen6UpdateEv+0x17a>
		model->setT5Short(false);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe fbd1 	bl	800226c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7a1b      	ldrb	r3, [r3, #8]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	0800e204 	.word	0x0800e204

08003adc <_ZN10TimeScreen15TimeToCharArrayEhhh>:

char* TimeScreen::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	70fb      	strb	r3, [r7, #3]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70bb      	strb	r3, [r7, #2]
 8003af2:	4613      	mov	r3, r2
 8003af4:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	4a32      	ldr	r2, [pc, #200]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	08db      	lsrs	r3, r3, #3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	3330      	adds	r3, #48	; 0x30
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b08:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	4a2d      	ldr	r2, [pc, #180]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	08db      	lsrs	r3, r3, #3
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	0152      	lsls	r2, r2, #5
 8003b1a:	1ad2      	subs	r2, r2, r3
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	4413      	add	r3, r2
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	3330      	adds	r3, #48	; 0x30
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b30:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8003b32:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b34:	223a      	movs	r2, #58	; 0x3a
 8003b36:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 8003b38:	78bb      	ldrb	r3, [r7, #2]
 8003b3a:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	3330      	adds	r3, #48	; 0x30
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b4a:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8003b4c:	78bb      	ldrb	r3, [r7, #2]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	08db      	lsrs	r3, r3, #3
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	461a      	mov	r2, r3
 8003b5a:	0152      	lsls	r2, r2, #5
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	78bb      	ldrb	r3, [r7, #2]
 8003b68:	4413      	add	r3, r2
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3330      	adds	r3, #48	; 0x30
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b72:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b76:	223a      	movs	r2, #58	; 0x3a
 8003b78:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8003b7a:	787b      	ldrb	r3, [r7, #1]
 8003b7c:	4a11      	ldr	r2, [pc, #68]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	08db      	lsrs	r3, r3, #3
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	3330      	adds	r3, #48	; 0x30
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003b8c:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 8003b8e:	787b      	ldrb	r3, [r7, #1]
 8003b90:	4a0c      	ldr	r2, [pc, #48]	; (8003bc4 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	08db      	lsrs	r3, r3, #3
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	0152      	lsls	r2, r2, #5
 8003b9e:	1ad2      	subs	r2, r2, r3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	4413      	add	r3, r2
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3330      	adds	r3, #48	; 0x30
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003bb4:	71da      	strb	r2, [r3, #7]
	return result;
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	cccccccd 	.word	0xcccccccd
 8003bc8:	2000035c 	.word	0x2000035c

08003bcc <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>:
 */

#include "Contrast.h"
#include "../../Model/Tools.h"

Contrast::Contrast(Model *model, LCD *lcd, Kontrast *contrast) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast+0x44>)
 8003bde:	611a      	str	r2, [r3, #16]
	this->model = model;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	609a      	str	r2, [r3, #8]
	this->init = false;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	751a      	strb	r2, [r3, #20]
	this->contrast = contrast;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	60da      	str	r2, [r3, #12]
	kontrast = model->getKontrast();
 8003bf8:	68b8      	ldr	r0, [r7, #8]
 8003bfa:	f7fe fc47 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461a      	mov	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	755a      	strb	r2, [r3, #21]
}
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	0800e20c 	.word	0x0800e20c

08003c14 <_ZN8Contrast6UpdateEv>:

Model::ESCREEN Contrast::Update(void) {
 8003c14:	b5b0      	push	{r4, r5, r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af04      	add	r7, sp, #16
 8003c1a:	6078      	str	r0, [r7, #4]
		screen = Model::E_KONTRAST_SETTINGS;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2207      	movs	r2, #7
 8003c20:	701a      	strb	r2, [r3, #0]


		if(!init){
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7d1b      	ldrb	r3, [r3, #20]
 8003c26:	f083 0301 	eor.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d022      	beq.n	8003c76 <_ZN8Contrast6UpdateEv+0x62>

			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689c      	ldr	r4, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691d      	ldr	r5, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fc25 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fd8d 	bl	8002764 <_ZN5Tools11byteToAsciiEh>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2209      	movs	r2, #9
 8003c4e:	9202      	str	r2, [sp, #8]
 8003c50:	2203      	movs	r2, #3
 8003c52:	9201      	str	r2, [sp, #4]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2300      	movs	r3, #0
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fd fcc4 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6898      	ldr	r0, [r3, #8]
 8003c66:	2301      	movs	r3, #1
 8003c68:	2202      	movs	r2, #2
 8003c6a:	210b      	movs	r1, #11
 8003c6c:	f7fd fd22 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
			init = true;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	751a      	strb	r2, [r3, #20]
		}



		if(HAL_GPIO_ReadPin(SW_PW_GPIO_Port, SW_PW_Pin) == GPIO_PIN_RESET){
 8003c76:	2120      	movs	r1, #32
 8003c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c7c:	f001 fea4 	bl	80059c8 <HAL_GPIO_ReadPin>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <_ZN8Contrast6UpdateEv+0x88>
			model->setT2Long(false);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fa1d 	bl	80020d6 <_ZN5Model9setT2LongEb>
		}
		if(HAL_GPIO_ReadPin(SW_SUM_GPIO_Port, SW_SUM_Pin) == GPIO_PIN_RESET){
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca2:	f001 fe91 	bl	80059c8 <HAL_GPIO_ReadPin>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf0c      	ite	eq
 8003cac:	2301      	moveq	r3, #1
 8003cae:	2300      	movne	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <_ZN8Contrast6UpdateEv+0xae>
			model->setT3Long(false);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2100      	movs	r1, #0
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fa44 	bl	800214a <_ZN5Model9setT3LongEb>
		}

		//------------------SW_BW------------------
		if(model->isT1Short()){
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe f9db 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <_ZN8Contrast6UpdateEv+0xca>
			model->setT1Short(false);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fe f9df 	bl	800209c <_ZN5Model10setT1ShortEb>
		}
		if(model->isT1Long()){
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe f9b0 	bl	8002048 <_ZNK5Model8isT1LongEv>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d005      	beq.n	8003cfa <_ZN8Contrast6UpdateEv+0xe6>
			model->setT1Long(false);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe f9b4 	bl	8002062 <_ZN5Model9setT1LongEb>
		}

		//------------------SW_PW------------------
		if(model->isT2Short()){
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fe f9f9 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d03f      	beq.n	8003d8a <_ZN8Contrast6UpdateEv+0x176>
			if(kontrast < 100){
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	7d5b      	ldrb	r3, [r3, #21]
 8003d0e:	2b63      	cmp	r3, #99	; 0x63
 8003d10:	d835      	bhi.n	8003d7e <_ZN8Contrast6UpdateEv+0x16a>
				model->setKontrast(kontrast++);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6858      	ldr	r0, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7d5b      	ldrb	r3, [r3, #21]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	b2d1      	uxtb	r1, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	7551      	strb	r1, [r2, #21]
 8003d22:	4619      	mov	r1, r3
 8003d24:	f7fe fbbf 	bl	80024a6 <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689c      	ldr	r4, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691d      	ldr	r5, [r3, #16]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fe fba9 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe fd11 	bl	8002764 <_ZN5Tools11byteToAsciiEh>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2209      	movs	r2, #9
 8003d46:	9202      	str	r2, [sp, #8]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	9201      	str	r2, [sp, #4]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2208      	movs	r2, #8
 8003d52:	4629      	mov	r1, r5
 8003d54:	4620      	mov	r0, r4
 8003d56:	f7fd fc48 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6898      	ldr	r0, [r3, #8]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	2202      	movs	r2, #2
 8003d62:	210b      	movs	r1, #11
 8003d64:	f7fd fca6 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	7d5b      	ldrb	r3, [r3, #21]
 8003d70:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	4619      	mov	r1, r3
 8003d78:	4610      	mov	r0, r2
 8003d7a:	f7fd fb05 	bl	8001388 <_ZN8Kontrast11setContrastEh>
			}

			model->setT2Short(false);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f9c3 	bl	8002110 <_ZN5Model10setT2ShortEb>
		}
		if(model->isT2Long()){
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7fe f994 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d039      	beq.n	8003e0e <_ZN8Contrast6UpdateEv+0x1fa>
			if(kontrast < 100){
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	7d5b      	ldrb	r3, [r3, #21]
 8003d9e:	2b63      	cmp	r3, #99	; 0x63
 8003da0:	d835      	bhi.n	8003e0e <_ZN8Contrast6UpdateEv+0x1fa>
				model->setKontrast(kontrast++);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6858      	ldr	r0, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	7d5b      	ldrb	r3, [r3, #21]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	b2d1      	uxtb	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	7551      	strb	r1, [r2, #21]
 8003db2:	4619      	mov	r1, r3
 8003db4:	f7fe fb77 	bl	80024a6 <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689c      	ldr	r4, [r3, #8]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691d      	ldr	r5, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fb61 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe fcc9 	bl	8002764 <_ZN5Tools11byteToAsciiEh>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2209      	movs	r2, #9
 8003dd6:	9202      	str	r2, [sp, #8]
 8003dd8:	2203      	movs	r2, #3
 8003dda:	9201      	str	r2, [sp, #4]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	2300      	movs	r3, #0
 8003de0:	2208      	movs	r2, #8
 8003de2:	4629      	mov	r1, r5
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7fd fc00 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6898      	ldr	r0, [r3, #8]
 8003dee:	2301      	movs	r3, #1
 8003df0:	2202      	movs	r2, #2
 8003df2:	210b      	movs	r1, #11
 8003df4:	f7fd fc5e 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7d5b      	ldrb	r3, [r3, #21]
 8003e00:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fd fabd 	bl	8001388 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Summe------------------
		if(model->isT3Short()){
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe f9a9 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d03f      	beq.n	8003e9e <_ZN8Contrast6UpdateEv+0x28a>
			if(kontrast > 0){
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7d5b      	ldrb	r3, [r3, #21]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d035      	beq.n	8003e92 <_ZN8Contrast6UpdateEv+0x27e>
			model->setKontrast(kontrast--);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6858      	ldr	r0, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	7d5b      	ldrb	r3, [r3, #21]
 8003e2e:	1e5a      	subs	r2, r3, #1
 8003e30:	b2d1      	uxtb	r1, r2
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	7551      	strb	r1, [r2, #21]
 8003e36:	4619      	mov	r1, r3
 8003e38:	f7fe fb35 	bl	80024a6 <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689c      	ldr	r4, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691d      	ldr	r5, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fb1f 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fc87 	bl	8002764 <_ZN5Tools11byteToAsciiEh>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2209      	movs	r2, #9
 8003e5a:	9202      	str	r2, [sp, #8]
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	9201      	str	r2, [sp, #4]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	2208      	movs	r2, #8
 8003e66:	4629      	mov	r1, r5
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f7fd fbbe 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6898      	ldr	r0, [r3, #8]
 8003e72:	2301      	movs	r3, #1
 8003e74:	2202      	movs	r2, #2
 8003e76:	210b      	movs	r1, #11
 8003e78:	f7fd fc1c 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7d5b      	ldrb	r3, [r3, #21]
 8003e84:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f7fd fa7b 	bl	8001388 <_ZN8Kontrast11setContrastEh>
			}
			model->setT3Short(false);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe f973 	bl	8002184 <_ZN5Model10setT3ShortEb>
		}
		if(model->isT3Long()){
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f944 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d039      	beq.n	8003f22 <_ZN8Contrast6UpdateEv+0x30e>
			if(kontrast > 0){
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7d5b      	ldrb	r3, [r3, #21]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d035      	beq.n	8003f22 <_ZN8Contrast6UpdateEv+0x30e>
			model->setKontrast(kontrast--);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6858      	ldr	r0, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7d5b      	ldrb	r3, [r3, #21]
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	b2d1      	uxtb	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	7551      	strb	r1, [r2, #21]
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	f7fe faed 	bl	80024a6 <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689c      	ldr	r4, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691d      	ldr	r5, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fad7 	bl	800248c <_ZNK5Model11getKontrastEv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe fc3f 	bl	8002764 <_ZN5Tools11byteToAsciiEh>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2209      	movs	r2, #9
 8003eea:	9202      	str	r2, [sp, #8]
 8003eec:	2203      	movs	r2, #3
 8003eee:	9201      	str	r2, [sp, #4]
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7fd fb76 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6898      	ldr	r0, [r3, #8]
 8003f02:	2301      	movs	r3, #1
 8003f04:	2202      	movs	r2, #2
 8003f06:	210b      	movs	r1, #11
 8003f08:	f7fd fbd4 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7d5b      	ldrb	r3, [r3, #21]
 8003f14:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	f7fd fa33 	bl	8001388 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Total------------------
		if(model->isT4Short()){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe f959 	bl	80021de <_ZNK5Model9isT4ShortEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <_ZN8Contrast6UpdateEv+0x32a>
			model->setT4Short(false);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f95d 	bl	80021f8 <_ZN5Model10setT4ShortEb>
		}
		if(model->isT4Long()){
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe f92e 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <_ZN8Contrast6UpdateEv+0x346>
			model->setT4Long(false);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f932 	bl	80021be <_ZN5Model9setT4LongEb>
		}

		//------------------SW_Tar------------------
		if(model->isT5Short()){
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe f977 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <_ZN8Contrast6UpdateEv+0x36e>
			screen = Model::E_TIME_SETTINGS;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	701a      	strb	r2, [r3, #0]
			init = false;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	751a      	strb	r2, [r3, #20]
			model->setT5Short(false);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fe f975 	bl	800226c <_ZN5Model10setT5ShortEb>
		}
		if(model->isT5Long()){
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fe f946 	bl	8002218 <_ZNK5Model8isT5LongEv>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <_ZN8Contrast6UpdateEv+0x396>
			//Speichern ToDo
			screen = Model::E_MAIN_SCRREN;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2203      	movs	r2, #3
 8003f96:	701a      	strb	r2, [r3, #0]
			init = false;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	751a      	strb	r2, [r3, #20]
			model->setT5Long(false);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7fe f944 	bl	8002232 <_ZN5Model9setT5LongEb>
		}


		return screen;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	781b      	ldrb	r3, [r3, #0]

}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003fb8 <_ZN12DateSettingsC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "DateSettings.h"

DateSettings::DateSettings(Model *model, LCD *lcd) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <_ZN12DateSettingsC1EP5ModelP3LCD+0x34>)
 8003fc8:	60da      	str	r2, [r3, #12]
	this->model = model;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]
	this->init = false;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	745a      	strb	r2, [r3, #17]
}
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	0800e218 	.word	0x0800e218

08003ff0 <_ZN12DateSettings6UpdateEv>:


Model::ESCREEN DateSettings::Update(){
 8003ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff4:	b088      	sub	sp, #32
 8003ff6:	af04      	add	r7, sp, #16
 8003ff8:	6078      	str	r0, [r7, #4]

	screen = Model::E_DATE_SETTINGS;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2206      	movs	r2, #6
 8003ffe:	721a      	strb	r2, [r3, #8]

	if(!init){
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	7c5b      	ldrb	r3, [r3, #17]
 8004004:	f083 0301 	eor.w	r3, r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d038      	beq.n	8004080 <_ZN12DateSettings6UpdateEv+0x90>
		position = 0;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	741a      	strb	r2, [r3, #16]
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685c      	ldr	r4, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68dd      	ldr	r5, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7fd fff4 	bl	800200e <_ZNK5Model7getYearEv>
 8004026:	4603      	mov	r3, r0
 8004028:	461e      	mov	r6, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd ff97 	bl	8001f62 <_ZNK5Model8getMonthEv>
 8004034:	4603      	mov	r3, r0
 8004036:	4698      	mov	r8, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd fef5 	bl	8001e2c <_ZNK5Model6getDayEv>
 8004042:	4603      	mov	r3, r0
 8004044:	4642      	mov	r2, r8
 8004046:	4631      	mov	r1, r6
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 fad1 	bl	80045f0 <_ZN12DateSettings15DateToCharArrayEhhh>
 800404e:	4603      	mov	r3, r0
 8004050:	2202      	movs	r2, #2
 8004052:	9202      	str	r2, [sp, #8]
 8004054:	220c      	movs	r2, #12
 8004056:	9201      	str	r2, [sp, #4]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	2205      	movs	r2, #5
 800405e:	4629      	mov	r1, r5
 8004060:	4620      	mov	r0, r4
 8004062:	f7fd fac2 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6858      	ldr	r0, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7c1b      	ldrb	r3, [r3, #16]
 800406e:	3302      	adds	r3, #2
 8004070:	b2d9      	uxtb	r1, r3
 8004072:	2301      	movs	r3, #1
 8004074:	2202      	movs	r2, #2
 8004076:	f7fd fb1d 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	745a      	strb	r2, [r3, #17]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fd fffc 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <_ZN12DateSettings6UpdateEv+0x104>
		//Change position
		if(position >= 9){
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7c1b      	ldrb	r3, [r3, #16]
 8004094:	2b08      	cmp	r3, #8
 8004096:	d903      	bls.n	80040a0 <_ZN12DateSettings6UpdateEv+0xb0>
			position = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	741a      	strb	r2, [r3, #16]
 800409e:	e019      	b.n	80040d4 <_ZN12DateSettings6UpdateEv+0xe4>
		}else{
			position++;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	7c1b      	ldrb	r3, [r3, #16]
 80040a4:	3301      	adds	r3, #1
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	741a      	strb	r2, [r3, #16]
			if(position == 2){
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7c1b      	ldrb	r3, [r3, #16]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d105      	bne.n	80040c0 <_ZN12DateSettings6UpdateEv+0xd0>
				position++;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7c1b      	ldrb	r3, [r3, #16]
 80040b8:	3301      	adds	r3, #1
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	741a      	strb	r2, [r3, #16]
			}
			if(position == 5){
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	7c1b      	ldrb	r3, [r3, #16]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d105      	bne.n	80040d4 <_ZN12DateSettings6UpdateEv+0xe4>
				position += 3;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7c1b      	ldrb	r3, [r3, #16]
 80040cc:	3303      	adds	r3, #3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	741a      	strb	r2, [r3, #16]
			}
		}
		lcd->SetCursorPosition(position+2, 2, true);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6858      	ldr	r0, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	7c1b      	ldrb	r3, [r3, #16]
 80040dc:	3302      	adds	r3, #2
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	2301      	movs	r3, #1
 80040e2:	2202      	movs	r2, #2
 80040e4:	f7fd fae6 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2100      	movs	r1, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd ffd4 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd ffa5 	bl	8002048 <_ZNK5Model8isT1LongEv>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <_ZN12DateSettings6UpdateEv+0x120>
		model->setT1Long(false);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2100      	movs	r1, #0
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd ffa9 	bl	8002062 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd ffee 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 81e6 	beq.w	80044ee <_ZN12DateSettings6UpdateEv+0x4fe>
		uint8_t year = model->getYear();
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fd ff71 	bl	800200e <_ZNK5Model7getYearEv>
 800412c:	4603      	mov	r3, r0
 800412e:	73fb      	strb	r3, [r7, #15]
		uint8_t month = model->getMonth();
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4618      	mov	r0, r3
 8004136:	f7fd ff14 	bl	8001f62 <_ZNK5Model8getMonthEv>
 800413a:	4603      	mov	r3, r0
 800413c:	73bb      	strb	r3, [r7, #14]
		uint8_t day = model->getDay();
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fe72 	bl	8001e2c <_ZNK5Model6getDayEv>
 8004148:	4603      	mov	r3, r0
 800414a:	737b      	strb	r3, [r7, #13]
		//Tag
		if(position == 0){
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7c1b      	ldrb	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d16a      	bne.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
			switch(month){
 8004154:	7bbb      	ldrb	r3, [r7, #14]
 8004156:	3b01      	subs	r3, #1
 8004158:	2b0b      	cmp	r3, #11
 800415a:	d863      	bhi.n	8004224 <_ZN12DateSettings6UpdateEv+0x234>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <_ZN12DateSettings6UpdateEv+0x174>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004195 	.word	0x08004195
 8004168:	080041f5 	.word	0x080041f5
 800416c:	08004195 	.word	0x08004195
 8004170:	080041c5 	.word	0x080041c5
 8004174:	08004195 	.word	0x08004195
 8004178:	080041c5 	.word	0x080041c5
 800417c:	08004195 	.word	0x08004195
 8004180:	08004195 	.word	0x08004195
 8004184:	080041c5 	.word	0x080041c5
 8004188:	08004195 	.word	0x08004195
 800418c:	080041c5 	.word	0x080041c5
 8004190:	08004195 	.word	0x08004195
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 21 ){
 8004194:	7b7b      	ldrb	r3, [r7, #13]
 8004196:	2b15      	cmp	r3, #21
 8004198:	d910      	bls.n	80041bc <_ZN12DateSettings6UpdateEv+0x1cc>
					day = (day - (day/10)*10);
 800419a:	7b7b      	ldrb	r3, [r7, #13]
 800419c:	4aaa      	ldr	r2, [pc, #680]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 800419e:	fba2 2303 	umull	r2, r3, r2, r3
 80041a2:	08db      	lsrs	r3, r3, #3
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	0152      	lsls	r2, r2, #5
 80041aa:	1ad2      	subs	r2, r2, r3
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	7b7b      	ldrb	r3, [r7, #13]
 80041b6:	4413      	add	r3, r2
 80041b8:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 80041ba:	e036      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 80041bc:	7b7b      	ldrb	r3, [r7, #13]
 80041be:	330a      	adds	r3, #10
 80041c0:	737b      	strb	r3, [r7, #13]
				break;
 80041c2:	e032      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 ){
 80041c4:	7b7b      	ldrb	r3, [r7, #13]
 80041c6:	2b14      	cmp	r3, #20
 80041c8:	d910      	bls.n	80041ec <_ZN12DateSettings6UpdateEv+0x1fc>
					day = (day - (day/10)*10);
 80041ca:	7b7b      	ldrb	r3, [r7, #13]
 80041cc:	4a9e      	ldr	r2, [pc, #632]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	461a      	mov	r2, r3
 80041d8:	0152      	lsls	r2, r2, #5
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	0092      	lsls	r2, r2, #2
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	7b7b      	ldrb	r3, [r7, #13]
 80041e6:	4413      	add	r3, r2
 80041e8:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 80041ea:	e01e      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 80041ec:	7b7b      	ldrb	r3, [r7, #13]
 80041ee:	330a      	adds	r3, #10
 80041f0:	737b      	strb	r3, [r7, #13]
				break;
 80041f2:	e01a      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
			case 2:
				if(day > 18 ){
 80041f4:	7b7b      	ldrb	r3, [r7, #13]
 80041f6:	2b12      	cmp	r3, #18
 80041f8:	d910      	bls.n	800421c <_ZN12DateSettings6UpdateEv+0x22c>
					day = (day - (day/10)*10);
 80041fa:	7b7b      	ldrb	r3, [r7, #13]
 80041fc:	4a92      	ldr	r2, [pc, #584]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	08db      	lsrs	r3, r3, #3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	461a      	mov	r2, r3
 8004208:	0152      	lsls	r2, r2, #5
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	0092      	lsls	r2, r2, #2
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	7b7b      	ldrb	r3, [r7, #13]
 8004216:	4413      	add	r3, r2
 8004218:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 800421a:	e006      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 800421c:	7b7b      	ldrb	r3, [r7, #13]
 800421e:	330a      	adds	r3, #10
 8004220:	737b      	strb	r3, [r7, #13]
				break;
 8004222:	e002      	b.n	800422a <_ZN12DateSettings6UpdateEv+0x23a>
			default:
				day = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	737b      	strb	r3, [r7, #13]
				break;
 8004228:	bf00      	nop
			}
		}

		if(position == 1){
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	7c1b      	ldrb	r3, [r3, #16]
 800422e:	2b01      	cmp	r3, #1
 8004230:	f040 8085 	bne.w	800433e <_ZN12DateSettings6UpdateEv+0x34e>
			switch(month){
 8004234:	7bbb      	ldrb	r3, [r7, #14]
 8004236:	3b01      	subs	r3, #1
 8004238:	2b0b      	cmp	r3, #11
 800423a:	d87d      	bhi.n	8004338 <_ZN12DateSettings6UpdateEv+0x348>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <_ZN12DateSettings6UpdateEv+0x254>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004275 	.word	0x08004275
 8004248:	0800430b 	.word	0x0800430b
 800424c:	08004275 	.word	0x08004275
 8004250:	080042b1 	.word	0x080042b1
 8004254:	08004275 	.word	0x08004275
 8004258:	080042b1 	.word	0x080042b1
 800425c:	08004275 	.word	0x08004275
 8004260:	08004275 	.word	0x08004275
 8004264:	080042b1 	.word	0x080042b1
 8004268:	08004275 	.word	0x08004275
 800426c:	080042b1 	.word	0x080042b1
 8004270:	08004275 	.word	0x08004275
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 30 ){
 8004274:	7b7b      	ldrb	r3, [r7, #13]
 8004276:	2b1e      	cmp	r3, #30
 8004278:	d903      	bls.n	8004282 <_ZN12DateSettings6UpdateEv+0x292>
					day -= 1;
 800427a:	7b7b      	ldrb	r3, [r7, #13]
 800427c:	3b01      	subs	r3, #1
 800427e:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8004280:	e05d      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 8004282:	7b7a      	ldrb	r2, [r7, #13]
 8004284:	7b7b      	ldrb	r3, [r7, #13]
 8004286:	4970      	ldr	r1, [pc, #448]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 8004288:	fba1 1303 	umull	r1, r3, r1, r3
 800428c:	08db      	lsrs	r3, r3, #3
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4619      	mov	r1, r3
 8004292:	f06f 0309 	mvn.w	r3, #9
 8004296:	fb03 f301 	mul.w	r3, r3, r1
 800429a:	4413      	add	r3, r2
 800429c:	2b08      	cmp	r3, #8
 800429e:	dc03      	bgt.n	80042a8 <_ZN12DateSettings6UpdateEv+0x2b8>
					day+=1;
 80042a0:	7b7b      	ldrb	r3, [r7, #13]
 80042a2:	3301      	adds	r3, #1
 80042a4:	737b      	strb	r3, [r7, #13]
				break;
 80042a6:	e04a      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 80042a8:	7b7b      	ldrb	r3, [r7, #13]
 80042aa:	3b09      	subs	r3, #9
 80042ac:	737b      	strb	r3, [r7, #13]
				break;
 80042ae:	e046      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 && (day - (day/10)*10) > 7 ){
 80042b0:	7b7b      	ldrb	r3, [r7, #13]
 80042b2:	2b14      	cmp	r3, #20
 80042b4:	d912      	bls.n	80042dc <_ZN12DateSettings6UpdateEv+0x2ec>
 80042b6:	7b7a      	ldrb	r2, [r7, #13]
 80042b8:	7b7b      	ldrb	r3, [r7, #13]
 80042ba:	4963      	ldr	r1, [pc, #396]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 80042bc:	fba1 1303 	umull	r1, r3, r1, r3
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	4619      	mov	r1, r3
 80042c6:	f06f 0309 	mvn.w	r3, #9
 80042ca:	fb03 f301 	mul.w	r3, r3, r1
 80042ce:	4413      	add	r3, r2
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	dd03      	ble.n	80042dc <_ZN12DateSettings6UpdateEv+0x2ec>
					day -= 8;
 80042d4:	7b7b      	ldrb	r3, [r7, #13]
 80042d6:	3b08      	subs	r3, #8
 80042d8:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 80042da:	e030      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 80042dc:	7b7a      	ldrb	r2, [r7, #13]
 80042de:	7b7b      	ldrb	r3, [r7, #13]
 80042e0:	4959      	ldr	r1, [pc, #356]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 80042e2:	fba1 1303 	umull	r1, r3, r1, r3
 80042e6:	08db      	lsrs	r3, r3, #3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4619      	mov	r1, r3
 80042ec:	f06f 0309 	mvn.w	r3, #9
 80042f0:	fb03 f301 	mul.w	r3, r3, r1
 80042f4:	4413      	add	r3, r2
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	dc03      	bgt.n	8004302 <_ZN12DateSettings6UpdateEv+0x312>
					day+=1;
 80042fa:	7b7b      	ldrb	r3, [r7, #13]
 80042fc:	3301      	adds	r3, #1
 80042fe:	737b      	strb	r3, [r7, #13]
				break;
 8004300:	e01d      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8004302:	7b7b      	ldrb	r3, [r7, #13]
 8004304:	3b09      	subs	r3, #9
 8004306:	737b      	strb	r3, [r7, #13]
				break;
 8004308:	e019      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
			case 2:
				if((day - (day/10)*10) < 9){
 800430a:	7b7a      	ldrb	r2, [r7, #13]
 800430c:	7b7b      	ldrb	r3, [r7, #13]
 800430e:	494e      	ldr	r1, [pc, #312]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 8004310:	fba1 1303 	umull	r1, r3, r1, r3
 8004314:	08db      	lsrs	r3, r3, #3
 8004316:	b2db      	uxtb	r3, r3
 8004318:	4619      	mov	r1, r3
 800431a:	f06f 0309 	mvn.w	r3, #9
 800431e:	fb03 f301 	mul.w	r3, r3, r1
 8004322:	4413      	add	r3, r2
 8004324:	2b08      	cmp	r3, #8
 8004326:	dc03      	bgt.n	8004330 <_ZN12DateSettings6UpdateEv+0x340>
					day+=1;
 8004328:	7b7b      	ldrb	r3, [r7, #13]
 800432a:	3301      	adds	r3, #1
 800432c:	737b      	strb	r3, [r7, #13]
				}else{
						day -=9;
				}
				break;
 800432e:	e006      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8004330:	7b7b      	ldrb	r3, [r7, #13]
 8004332:	3b09      	subs	r3, #9
 8004334:	737b      	strb	r3, [r7, #13]
				break;
 8004336:	e002      	b.n	800433e <_ZN12DateSettings6UpdateEv+0x34e>
			default:
				day = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	737b      	strb	r3, [r7, #13]
				break;
 800433c:	bf00      	nop
			}
		}

		//Monat
		if(position == 3){
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	7c1b      	ldrb	r3, [r3, #16]
 8004342:	2b03      	cmp	r3, #3
 8004344:	d10c      	bne.n	8004360 <_ZN12DateSettings6UpdateEv+0x370>
			if(month < 3){
 8004346:	7bbb      	ldrb	r3, [r7, #14]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d803      	bhi.n	8004354 <_ZN12DateSettings6UpdateEv+0x364>
				month +=10;
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	330a      	adds	r3, #10
 8004350:	73bb      	strb	r3, [r7, #14]
 8004352:	e005      	b.n	8004360 <_ZN12DateSettings6UpdateEv+0x370>
			}else if(month > 9){
 8004354:	7bbb      	ldrb	r3, [r7, #14]
 8004356:	2b09      	cmp	r3, #9
 8004358:	d902      	bls.n	8004360 <_ZN12DateSettings6UpdateEv+0x370>
				month -= 10;
 800435a:	7bbb      	ldrb	r3, [r7, #14]
 800435c:	3b0a      	subs	r3, #10
 800435e:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7c1b      	ldrb	r3, [r3, #16]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11f      	bne.n	80043a8 <_ZN12DateSettings6UpdateEv+0x3b8>
			if((month - (month/10)*10) < 9 && month < 12){
 8004368:	7bba      	ldrb	r2, [r7, #14]
 800436a:	7bbb      	ldrb	r3, [r7, #14]
 800436c:	4936      	ldr	r1, [pc, #216]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 800436e:	fba1 1303 	umull	r1, r3, r1, r3
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	f06f 0309 	mvn.w	r3, #9
 800437c:	fb03 f301 	mul.w	r3, r3, r1
 8004380:	4413      	add	r3, r2
 8004382:	2b08      	cmp	r3, #8
 8004384:	dc06      	bgt.n	8004394 <_ZN12DateSettings6UpdateEv+0x3a4>
 8004386:	7bbb      	ldrb	r3, [r7, #14]
 8004388:	2b0b      	cmp	r3, #11
 800438a:	d803      	bhi.n	8004394 <_ZN12DateSettings6UpdateEv+0x3a4>
				month +=1;
 800438c:	7bbb      	ldrb	r3, [r7, #14]
 800438e:	3301      	adds	r3, #1
 8004390:	73bb      	strb	r3, [r7, #14]
 8004392:	e009      	b.n	80043a8 <_ZN12DateSettings6UpdateEv+0x3b8>
			}else if(month > 11){
 8004394:	7bbb      	ldrb	r3, [r7, #14]
 8004396:	2b0b      	cmp	r3, #11
 8004398:	d903      	bls.n	80043a2 <_ZN12DateSettings6UpdateEv+0x3b2>
				month = month - 2;
 800439a:	7bbb      	ldrb	r3, [r7, #14]
 800439c:	3b02      	subs	r3, #2
 800439e:	73bb      	strb	r3, [r7, #14]
 80043a0:	e002      	b.n	80043a8 <_ZN12DateSettings6UpdateEv+0x3b8>
			}else{
				month -= 9;
 80043a2:	7bbb      	ldrb	r3, [r7, #14]
 80043a4:	3b09      	subs	r3, #9
 80043a6:	73bb      	strb	r3, [r7, #14]
			}
		}

		switch(month){
 80043a8:	7bbb      	ldrb	r3, [r7, #14]
 80043aa:	3b02      	subs	r3, #2
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d826      	bhi.n	80043fe <_ZN12DateSettings6UpdateEv+0x40e>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <_ZN12DateSettings6UpdateEv+0x3c8>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	080043ed 	.word	0x080043ed
 80043bc:	080043ff 	.word	0x080043ff
 80043c0:	080043e1 	.word	0x080043e1
 80043c4:	080043ff 	.word	0x080043ff
 80043c8:	080043e1 	.word	0x080043e1
 80043cc:	080043ff 	.word	0x080043ff
 80043d0:	080043ff 	.word	0x080043ff
 80043d4:	080043e1 	.word	0x080043e1
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	080043e1 	.word	0x080043e1
					case 4:
					case 6:
					case 9:
					case 11:
						if(day > 30){
 80043e0:	7b7b      	ldrb	r3, [r7, #13]
 80043e2:	2b1e      	cmp	r3, #30
 80043e4:	d908      	bls.n	80043f8 <_ZN12DateSettings6UpdateEv+0x408>
							day = 30;
 80043e6:	231e      	movs	r3, #30
 80043e8:	737b      	strb	r3, [r7, #13]
						}
						break;
 80043ea:	e005      	b.n	80043f8 <_ZN12DateSettings6UpdateEv+0x408>
					case 2:
						if(day > 28){
 80043ec:	7b7b      	ldrb	r3, [r7, #13]
 80043ee:	2b1c      	cmp	r3, #28
 80043f0:	d904      	bls.n	80043fc <_ZN12DateSettings6UpdateEv+0x40c>
							day = 28;
 80043f2:	231c      	movs	r3, #28
 80043f4:	737b      	strb	r3, [r7, #13]
						}
						break;
 80043f6:	e001      	b.n	80043fc <_ZN12DateSettings6UpdateEv+0x40c>
						break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <_ZN12DateSettings6UpdateEv+0x40e>
						break;
 80043fc:	bf00      	nop
					}

		//Jahr
		if(position == 8){
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7c1b      	ldrb	r3, [r3, #16]
 8004402:	2b08      	cmp	r3, #8
 8004404:	d109      	bne.n	800441a <_ZN12DateSettings6UpdateEv+0x42a>
			if((year/10) < 9){
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b59      	cmp	r3, #89	; 0x59
 800440a:	d803      	bhi.n	8004414 <_ZN12DateSettings6UpdateEv+0x424>
				year +=10;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	330a      	adds	r3, #10
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e002      	b.n	800441a <_ZN12DateSettings6UpdateEv+0x42a>
			}else{
				year -= 90;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	3b5a      	subs	r3, #90	; 0x5a
 8004418:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 9){
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	7c1b      	ldrb	r3, [r3, #16]
 800441e:	2b09      	cmp	r3, #9
 8004420:	d117      	bne.n	8004452 <_ZN12DateSettings6UpdateEv+0x462>
			if((year - (year/10)*10) < 9){
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	4908      	ldr	r1, [pc, #32]	; (8004448 <_ZN12DateSettings6UpdateEv+0x458>)
 8004428:	fba1 1303 	umull	r1, r3, r1, r3
 800442c:	08db      	lsrs	r3, r3, #3
 800442e:	b2db      	uxtb	r3, r3
 8004430:	4619      	mov	r1, r3
 8004432:	f06f 0309 	mvn.w	r3, #9
 8004436:	fb03 f301 	mul.w	r3, r3, r1
 800443a:	4413      	add	r3, r2
 800443c:	2b08      	cmp	r3, #8
 800443e:	dc05      	bgt.n	800444c <_ZN12DateSettings6UpdateEv+0x45c>
				year +=1;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	3301      	adds	r3, #1
 8004444:	73fb      	strb	r3, [r7, #15]
 8004446:	e004      	b.n	8004452 <_ZN12DateSettings6UpdateEv+0x462>
 8004448:	cccccccd 	.word	0xcccccccd
			}else{
				year -= 9;
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	3b09      	subs	r3, #9
 8004450:	73fb      	strb	r3, [r7, #15]
			}
		}



		model->setYear(year);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	7bfa      	ldrb	r2, [r7, #15]
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fde4 	bl	8002028 <_ZN5Model7setYearEh>
		model->setMonth(month);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	7bba      	ldrb	r2, [r7, #14]
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f7fd fd87 	bl	8001f7c <_ZN5Model8setMonthEh>
		model->setDay(day);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	7b7a      	ldrb	r2, [r7, #13]
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fce5 	bl	8001e46 <_ZN5Model6setDayEh>
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685c      	ldr	r4, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68dd      	ldr	r5, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f7fd fdc0 	bl	800200e <_ZNK5Model7getYearEv>
 800448e:	4603      	mov	r3, r0
 8004490:	461e      	mov	r6, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd fd63 	bl	8001f62 <_ZNK5Model8getMonthEv>
 800449c:	4603      	mov	r3, r0
 800449e:	4698      	mov	r8, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fd fcc1 	bl	8001e2c <_ZNK5Model6getDayEv>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4642      	mov	r2, r8
 80044ae:	4631      	mov	r1, r6
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f89d 	bl	80045f0 <_ZN12DateSettings15DateToCharArrayEhhh>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2202      	movs	r2, #2
 80044ba:	9202      	str	r2, [sp, #8]
 80044bc:	220c      	movs	r2, #12
 80044be:	9201      	str	r2, [sp, #4]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	2300      	movs	r3, #0
 80044c4:	2205      	movs	r2, #5
 80044c6:	4629      	mov	r1, r5
 80044c8:	4620      	mov	r0, r4
 80044ca:	f7fd f88e 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6858      	ldr	r0, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7c1b      	ldrb	r3, [r3, #16]
 80044d6:	3302      	adds	r3, #2
 80044d8:	b2d9      	uxtb	r1, r3
 80044da:	2301      	movs	r3, #1
 80044dc:	2202      	movs	r2, #2
 80044de:	f7fd f8e9 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fe11 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd fde2 	bl	80020bc <_ZNK5Model8isT2LongEv>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <_ZN12DateSettings6UpdateEv+0x51a>
		model->setT2Long(false);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd fde6 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fd fe2b 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <_ZN12DateSettings6UpdateEv+0x536>
		model->setT3Short(false);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f7fd fe2f 	bl	8002184 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd fe00 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <_ZN12DateSettings6UpdateEv+0x552>
		model->setT3Long(false);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f7fd fe04 	bl	800214a <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fd fe49 	bl	80021de <_ZNK5Model9isT4ShortEv>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d005      	beq.n	800455e <_ZN12DateSettings6UpdateEv+0x56e>
		model->setT4Short(false);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fe4d 	bl	80021f8 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fd fe1e 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <_ZN12DateSettings6UpdateEv+0x58a>
		model->setT4Long(false);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f7fd fe22 	bl	80021be <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7fd fe67 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <_ZN12DateSettings6UpdateEv+0x5be>
		screen = Model::E_KONTRAST_SETTINGS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2207      	movs	r2, #7
 800458e:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	4618      	mov	r0, r3
 8004598:	f7fd ffe8 	bl	800256c <_ZN5Model16setOverrideClockEb>
		init = false;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	745a      	strb	r2, [r3, #17]
		model->setT5Short(false);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2100      	movs	r1, #0
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fd fe5f 	bl	800226c <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fd fe30 	bl	8002218 <_ZNK5Model8isT5LongEv>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d011      	beq.n	80045e2 <_ZN12DateSettings6UpdateEv+0x5f2>
		//Speichern ToDo
		screen = Model::E_MAIN_SCRREN;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2203      	movs	r2, #3
 80045c2:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd ffce 	bl	800256c <_ZN5Model16setOverrideClockEb>
		init = false;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	745a      	strb	r2, [r3, #17]
		model->setT5Long(false);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2100      	movs	r1, #0
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fe28 	bl	8002232 <_ZN5Model9setT5LongEb>
	}


	return screen;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	7a1b      	ldrb	r3, [r3, #8]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080045f0 <_ZN12DateSettings15DateToCharArrayEhhh>:


char* DateSettings::DateToCharArray(uint8_t year, uint8_t month, uint8_t day){
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	70fb      	strb	r3, [r7, #3]
 8004602:	460b      	mov	r3, r1
 8004604:	70bb      	strb	r3, [r7, #2]
 8004606:	4613      	mov	r3, r2
 8004608:	707b      	strb	r3, [r7, #1]
	static char result[10];
	result[0] = day/10 + 0x30;
 800460a:	787b      	ldrb	r3, [r7, #1]
 800460c:	4a35      	ldr	r2, [pc, #212]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800460e:	fba2 2303 	umull	r2, r3, r2, r3
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	3330      	adds	r3, #48	; 0x30
 8004618:	b2da      	uxtb	r2, r3
 800461a:	4b33      	ldr	r3, [pc, #204]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800461c:	701a      	strb	r2, [r3, #0]
	result[1] = day - (day/10)*10 + 0x30;
 800461e:	787b      	ldrb	r3, [r7, #1]
 8004620:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004622:	fba2 2303 	umull	r2, r3, r2, r3
 8004626:	08db      	lsrs	r3, r3, #3
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	0152      	lsls	r2, r2, #5
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	0092      	lsls	r2, r2, #2
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	b2da      	uxtb	r2, r3
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	4413      	add	r3, r2
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3330      	adds	r3, #48	; 0x30
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4b29      	ldr	r3, [pc, #164]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004644:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 8004646:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004648:	222e      	movs	r2, #46	; 0x2e
 800464a:	709a      	strb	r2, [r3, #2]
	result[3] = month/10 + 0x30;
 800464c:	78bb      	ldrb	r3, [r7, #2]
 800464e:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3330      	adds	r3, #48	; 0x30
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b22      	ldr	r3, [pc, #136]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800465e:	70da      	strb	r2, [r3, #3]
	result[4] = month - (month/10)*10 + 0x30;
 8004660:	78bb      	ldrb	r3, [r7, #2]
 8004662:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	08db      	lsrs	r3, r3, #3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	0152      	lsls	r2, r2, #5
 8004670:	1ad2      	subs	r2, r2, r3
 8004672:	0092      	lsls	r2, r2, #2
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	b2da      	uxtb	r2, r3
 800467a:	78bb      	ldrb	r3, [r7, #2]
 800467c:	4413      	add	r3, r2
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3330      	adds	r3, #48	; 0x30
 8004682:	b2da      	uxtb	r2, r3
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004686:	711a      	strb	r2, [r3, #4]
	result[5] = '.';
 8004688:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800468a:	222e      	movs	r2, #46	; 0x2e
 800468c:	715a      	strb	r2, [r3, #5]
	result[6] = '2';
 800468e:	4b16      	ldr	r3, [pc, #88]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004690:	2232      	movs	r2, #50	; 0x32
 8004692:	719a      	strb	r2, [r3, #6]
	result[7] = '0';
 8004694:	4b14      	ldr	r3, [pc, #80]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004696:	2230      	movs	r2, #48	; 0x30
 8004698:	71da      	strb	r2, [r3, #7]
	result[8] = year/10 + 0x30;
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	4a11      	ldr	r2, [pc, #68]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800469e:	fba2 2303 	umull	r2, r3, r2, r3
 80046a2:	08db      	lsrs	r3, r3, #3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	3330      	adds	r3, #48	; 0x30
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80046ac:	721a      	strb	r2, [r3, #8]
	result[9] = year - (year/10)*10 + 0x30;
 80046ae:	78fb      	ldrb	r3, [r7, #3]
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	08db      	lsrs	r3, r3, #3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	461a      	mov	r2, r3
 80046bc:	0152      	lsls	r2, r2, #5
 80046be:	1ad2      	subs	r2, r2, r3
 80046c0:	0092      	lsls	r2, r2, #2
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	4413      	add	r3, r2
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	3330      	adds	r3, #48	; 0x30
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80046d4:	725a      	strb	r2, [r3, #9]
	return result;
 80046d6:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	cccccccd 	.word	0xcccccccd
 80046e8:	20000364 	.word	0x20000364

080046ec <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4a07      	ldr	r2, [pc, #28]	; (8004718 <_ZN12TimeSettingsC1EP5ModelP3LCD+0x2c>)
 80046fc:	60da      	str	r2, [r3, #12]
	this->model = model;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]
}
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	0800e220 	.word	0x0800e220

0800471c <_ZN12TimeSettings6UpdateEv>:




Model::ESCREEN TimeSettings::Update(){
 800471c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004720:	b088      	sub	sp, #32
 8004722:	af04      	add	r7, sp, #16
 8004724:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME_SETTINGS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2205      	movs	r2, #5
 800472a:	721a      	strb	r2, [r3, #8]

	if(!init){
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	7a9b      	ldrb	r3, [r3, #10]
 8004730:	f083 0301 	eor.w	r3, r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d038      	beq.n	80047ac <_ZN12TimeSettings6UpdateEv+0x90>
		position = 0;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685c      	ldr	r4, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68dd      	ldr	r5, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd fb9a 	bl	8001e86 <_ZNK5Model7getHourEv>
 8004752:	4603      	mov	r3, r0
 8004754:	461e      	mov	r6, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd fbe4 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 8004760:	4603      	mov	r3, r0
 8004762:	4698      	mov	r8, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fd fc17 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 800476e:	4603      	mov	r3, r0
 8004770:	4642      	mov	r2, r8
 8004772:	4631      	mov	r1, r6
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f9e3 	bl	8004b40 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 800477a:	4603      	mov	r3, r0
 800477c:	2204      	movs	r2, #4
 800477e:	9202      	str	r2, [sp, #8]
 8004780:	2208      	movs	r2, #8
 8004782:	9201      	str	r2, [sp, #4]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	2300      	movs	r3, #0
 8004788:	2204      	movs	r2, #4
 800478a:	4629      	mov	r1, r5
 800478c:	4620      	mov	r0, r4
 800478e:	f7fc ff2c 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2,true);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6858      	ldr	r0, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7a5b      	ldrb	r3, [r3, #9]
 800479a:	3304      	adds	r3, #4
 800479c:	b2d9      	uxtb	r1, r3
 800479e:	2301      	movs	r3, #1
 80047a0:	2202      	movs	r2, #2
 80047a2:	f7fc ff87 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	729a      	strb	r2, [r3, #10]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fc66 	bl	8002082 <_ZNK5Model9isT1ShortEv>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d02b      	beq.n	8004814 <_ZN12TimeSettings6UpdateEv+0xf8>
		//Change position
		if(position >= 7){
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7a5b      	ldrb	r3, [r3, #9]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d903      	bls.n	80047cc <_ZN12TimeSettings6UpdateEv+0xb0>
			position = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	725a      	strb	r2, [r3, #9]
 80047ca:	e013      	b.n	80047f4 <_ZN12TimeSettings6UpdateEv+0xd8>
		}else{
			position++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7a5b      	ldrb	r3, [r3, #9]
 80047d0:	3301      	adds	r3, #1
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	725a      	strb	r2, [r3, #9]
			if(position == 2 || position == 5){
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7a5b      	ldrb	r3, [r3, #9]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d003      	beq.n	80047e8 <_ZN12TimeSettings6UpdateEv+0xcc>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7a5b      	ldrb	r3, [r3, #9]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d105      	bne.n	80047f4 <_ZN12TimeSettings6UpdateEv+0xd8>
				position++;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7a5b      	ldrb	r3, [r3, #9]
 80047ec:	3301      	adds	r3, #1
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	725a      	strb	r2, [r3, #9]
			}
		}
		lcd->SetCursorPosition(position+4, 2, true);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6858      	ldr	r0, [r3, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7a5b      	ldrb	r3, [r3, #9]
 80047fc:	3304      	adds	r3, #4
 80047fe:	b2d9      	uxtb	r1, r3
 8004800:	2301      	movs	r3, #1
 8004802:	2202      	movs	r2, #2
 8004804:	f7fc ff56 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fc44 	bl	800209c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7fd fc15 	bl	8002048 <_ZNK5Model8isT1LongEv>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <_ZN12TimeSettings6UpdateEv+0x114>
		model->setT1Long(false);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f7fd fc19 	bl	8002062 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fd fc5e 	bl	80020f6 <_ZNK5Model9isT2ShortEv>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80fc 	beq.w	8004a3a <_ZN12TimeSettings6UpdateEv+0x31e>
		uint8_t hour = model->getHour();
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fd fb1d 	bl	8001e86 <_ZNK5Model7getHourEv>
 800484c:	4603      	mov	r3, r0
 800484e:	73fb      	strb	r3, [r7, #15]
		uint8_t minute = model->getMinute();
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd fb67 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 800485a:	4603      	mov	r3, r0
 800485c:	73bb      	strb	r3, [r7, #14]
		uint8_t seconds = model->getSeconds();
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd fb9a 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 8004868:	4603      	mov	r3, r0
 800486a:	737b      	strb	r3, [r7, #13]

		if(position == 0){
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7a5b      	ldrb	r3, [r3, #9]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <_ZN12TimeSettings6UpdateEv+0x17a>
			if(hour < 13){
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d803      	bhi.n	8004882 <_ZN12TimeSettings6UpdateEv+0x166>
				hour += 10;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
 800487c:	330a      	adds	r3, #10
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e009      	b.n	8004896 <_ZN12TimeSettings6UpdateEv+0x17a>
			}else if(hour <= 19){
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b13      	cmp	r3, #19
 8004886:	d803      	bhi.n	8004890 <_ZN12TimeSettings6UpdateEv+0x174>
				hour -= 10;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	3b0a      	subs	r3, #10
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	e002      	b.n	8004896 <_ZN12TimeSettings6UpdateEv+0x17a>
			}else{
				hour -= 20;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	3b14      	subs	r3, #20
 8004894:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 1){
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7a5b      	ldrb	r3, [r3, #9]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d12f      	bne.n	80048fe <_ZN12TimeSettings6UpdateEv+0x1e2>
			if(hour < 20){
 800489e:	7bfb      	ldrb	r3, [r7, #15]
 80048a0:	2b13      	cmp	r3, #19
 80048a2:	d816      	bhi.n	80048d2 <_ZN12TimeSettings6UpdateEv+0x1b6>
				if(hour - (hour/10)*10 < 9){
 80048a4:	7bfa      	ldrb	r2, [r7, #15]
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	49a4      	ldr	r1, [pc, #656]	; (8004b3c <_ZN12TimeSettings6UpdateEv+0x420>)
 80048aa:	fba1 1303 	umull	r1, r3, r1, r3
 80048ae:	08db      	lsrs	r3, r3, #3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	4619      	mov	r1, r3
 80048b4:	f06f 0309 	mvn.w	r3, #9
 80048b8:	fb03 f301 	mul.w	r3, r3, r1
 80048bc:	4413      	add	r3, r2
 80048be:	2b08      	cmp	r3, #8
 80048c0:	dc03      	bgt.n	80048ca <_ZN12TimeSettings6UpdateEv+0x1ae>
					hour+=1;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	3301      	adds	r3, #1
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e019      	b.n	80048fe <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=9;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	3b09      	subs	r3, #9
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e015      	b.n	80048fe <_ZN12TimeSettings6UpdateEv+0x1e2>
				}
			}else{
				if(hour - (hour/10)*10 < 3){
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	4999      	ldr	r1, [pc, #612]	; (8004b3c <_ZN12TimeSettings6UpdateEv+0x420>)
 80048d8:	fba1 1303 	umull	r1, r3, r1, r3
 80048dc:	08db      	lsrs	r3, r3, #3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	4619      	mov	r1, r3
 80048e2:	f06f 0309 	mvn.w	r3, #9
 80048e6:	fb03 f301 	mul.w	r3, r3, r1
 80048ea:	4413      	add	r3, r2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	dc03      	bgt.n	80048f8 <_ZN12TimeSettings6UpdateEv+0x1dc>
					hour+=1;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	3301      	adds	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e002      	b.n	80048fe <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=3;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	3b03      	subs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
			}
		}



		if(position == 3){
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	7a5b      	ldrb	r3, [r3, #9]
 8004902:	2b03      	cmp	r3, #3
 8004904:	d109      	bne.n	800491a <_ZN12TimeSettings6UpdateEv+0x1fe>
			if(minute < 50){
 8004906:	7bbb      	ldrb	r3, [r7, #14]
 8004908:	2b31      	cmp	r3, #49	; 0x31
 800490a:	d803      	bhi.n	8004914 <_ZN12TimeSettings6UpdateEv+0x1f8>
				minute += 10;
 800490c:	7bbb      	ldrb	r3, [r7, #14]
 800490e:	330a      	adds	r3, #10
 8004910:	73bb      	strb	r3, [r7, #14]
 8004912:	e002      	b.n	800491a <_ZN12TimeSettings6UpdateEv+0x1fe>
			}else{
				minute -= 50;
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	3b32      	subs	r3, #50	; 0x32
 8004918:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	7a5b      	ldrb	r3, [r3, #9]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d115      	bne.n	800494e <_ZN12TimeSettings6UpdateEv+0x232>
				if(minute - (minute/10)*10 < 9){
 8004922:	7bba      	ldrb	r2, [r7, #14]
 8004924:	7bbb      	ldrb	r3, [r7, #14]
 8004926:	4985      	ldr	r1, [pc, #532]	; (8004b3c <_ZN12TimeSettings6UpdateEv+0x420>)
 8004928:	fba1 1303 	umull	r1, r3, r1, r3
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	b2db      	uxtb	r3, r3
 8004930:	4619      	mov	r1, r3
 8004932:	f06f 0309 	mvn.w	r3, #9
 8004936:	fb03 f301 	mul.w	r3, r3, r1
 800493a:	4413      	add	r3, r2
 800493c:	2b08      	cmp	r3, #8
 800493e:	dc03      	bgt.n	8004948 <_ZN12TimeSettings6UpdateEv+0x22c>
					minute+=1;
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	3301      	adds	r3, #1
 8004944:	73bb      	strb	r3, [r7, #14]
 8004946:	e002      	b.n	800494e <_ZN12TimeSettings6UpdateEv+0x232>
				}else{
					minute-=9;
 8004948:	7bbb      	ldrb	r3, [r7, #14]
 800494a:	3b09      	subs	r3, #9
 800494c:	73bb      	strb	r3, [r7, #14]
				}
		}


		if(position == 6){
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	7a5b      	ldrb	r3, [r3, #9]
 8004952:	2b06      	cmp	r3, #6
 8004954:	d109      	bne.n	800496a <_ZN12TimeSettings6UpdateEv+0x24e>
			if(seconds < 50){
 8004956:	7b7b      	ldrb	r3, [r7, #13]
 8004958:	2b31      	cmp	r3, #49	; 0x31
 800495a:	d803      	bhi.n	8004964 <_ZN12TimeSettings6UpdateEv+0x248>
				seconds += 10;
 800495c:	7b7b      	ldrb	r3, [r7, #13]
 800495e:	330a      	adds	r3, #10
 8004960:	737b      	strb	r3, [r7, #13]
 8004962:	e002      	b.n	800496a <_ZN12TimeSettings6UpdateEv+0x24e>
			}else{
				seconds -= 50;
 8004964:	7b7b      	ldrb	r3, [r7, #13]
 8004966:	3b32      	subs	r3, #50	; 0x32
 8004968:	737b      	strb	r3, [r7, #13]
			}
		}

		if(position == 7){
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7a5b      	ldrb	r3, [r3, #9]
 800496e:	2b07      	cmp	r3, #7
 8004970:	d115      	bne.n	800499e <_ZN12TimeSettings6UpdateEv+0x282>
				if(seconds - (seconds/10)*10 < 9){
 8004972:	7b7a      	ldrb	r2, [r7, #13]
 8004974:	7b7b      	ldrb	r3, [r7, #13]
 8004976:	4971      	ldr	r1, [pc, #452]	; (8004b3c <_ZN12TimeSettings6UpdateEv+0x420>)
 8004978:	fba1 1303 	umull	r1, r3, r1, r3
 800497c:	08db      	lsrs	r3, r3, #3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4619      	mov	r1, r3
 8004982:	f06f 0309 	mvn.w	r3, #9
 8004986:	fb03 f301 	mul.w	r3, r3, r1
 800498a:	4413      	add	r3, r2
 800498c:	2b08      	cmp	r3, #8
 800498e:	dc03      	bgt.n	8004998 <_ZN12TimeSettings6UpdateEv+0x27c>
					seconds+=1;
 8004990:	7b7b      	ldrb	r3, [r7, #13]
 8004992:	3301      	adds	r3, #1
 8004994:	737b      	strb	r3, [r7, #13]
 8004996:	e002      	b.n	800499e <_ZN12TimeSettings6UpdateEv+0x282>
				}else{
					seconds-=9;
 8004998:	7b7b      	ldrb	r3, [r7, #13]
 800499a:	3b09      	subs	r3, #9
 800499c:	737b      	strb	r3, [r7, #13]
				}
		}


		model->setHour(hour);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	7bfa      	ldrb	r2, [r7, #15]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fa7a 	bl	8001ea0 <_ZN5Model7setHourEh>
		model->setMinute(minute);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	7bba      	ldrb	r2, [r7, #14]
 80049b2:	4611      	mov	r1, r2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fd fac4 	bl	8001f42 <_ZN5Model9setMinuteEh>
		model->setSeconds(seconds);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	7b7a      	ldrb	r2, [r7, #13]
 80049c0:	4611      	mov	r1, r2
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fd faf7 	bl	8001fb6 <_ZN5Model10setSecondsEh>
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685c      	ldr	r4, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68dd      	ldr	r5, [r3, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fd fa56 	bl	8001e86 <_ZNK5Model7getHourEv>
 80049da:	4603      	mov	r3, r0
 80049dc:	461e      	mov	r6, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fd faa0 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 80049e8:	4603      	mov	r3, r0
 80049ea:	4698      	mov	r8, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fd fad3 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4642      	mov	r2, r8
 80049fa:	4631      	mov	r1, r6
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f89f 	bl	8004b40 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2204      	movs	r2, #4
 8004a06:	9202      	str	r2, [sp, #8]
 8004a08:	2208      	movs	r2, #8
 8004a0a:	9201      	str	r2, [sp, #4]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	2204      	movs	r2, #4
 8004a12:	4629      	mov	r1, r5
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7fc fde8 	bl	80015ea <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2, true);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6858      	ldr	r0, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	7a5b      	ldrb	r3, [r3, #9]
 8004a22:	3304      	adds	r3, #4
 8004a24:	b2d9      	uxtb	r1, r3
 8004a26:	2301      	movs	r3, #1
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f7fc fe43 	bl	80016b4 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fb6b 	bl	8002110 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fd fb3c 	bl	80020bc <_ZNK5Model8isT2LongEv>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <_ZN12TimeSettings6UpdateEv+0x33a>
		model->setT2Long(false);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd fb40 	bl	80020d6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd fb85 	bl	800216a <_ZNK5Model9isT3ShortEv>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <_ZN12TimeSettings6UpdateEv+0x356>
		model->setT3Short(false);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fd fb89 	bl	8002184 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fb5a 	bl	8002130 <_ZNK5Model8isT3LongEv>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <_ZN12TimeSettings6UpdateEv+0x372>
		model->setT3Long(false);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2100      	movs	r1, #0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7fd fb5e 	bl	800214a <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fd fba3 	bl	80021de <_ZNK5Model9isT4ShortEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <_ZN12TimeSettings6UpdateEv+0x38e>
		model->setT4Short(false);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd fba7 	bl	80021f8 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd fb78 	bl	80021a4 <_ZNK5Model8isT4LongEv>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <_ZN12TimeSettings6UpdateEv+0x3aa>
		model->setT4Long(false);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fd fb7c 	bl	80021be <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fd fbc1 	bl	8002252 <_ZNK5Model9isT5ShortEv>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <_ZN12TimeSettings6UpdateEv+0x3de>
		screen = Model::E_DATE_SETTINGS;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2206      	movs	r2, #6
 8004ada:	721a      	strb	r2, [r3, #8]
		init = false;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fd fd3f 	bl	800256c <_ZN5Model16setOverrideClockEb>
		model->setT5Short(false);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fd fbb9 	bl	800226c <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fb8a 	bl	8002218 <_ZNK5Model8isT5LongEv>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d011      	beq.n	8004b2e <_ZN12TimeSettings6UpdateEv+0x412>
		screen = Model::E_MAIN_SCRREN;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2203      	movs	r2, #3
 8004b0e:	721a      	strb	r2, [r3, #8]
		init = false;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fd fd25 	bl	800256c <_ZN5Model16setOverrideClockEb>
		model->setT5Long(false);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd fb82 	bl	8002232 <_ZN5Model9setT5LongEb>
	}


	return screen;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7a1b      	ldrb	r3, [r3, #8]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b3c:	cccccccd 	.word	0xcccccccd

08004b40 <_ZN12TimeSettings15TimeToCharArrayEhhh>:




char* TimeSettings::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	4608      	mov	r0, r1
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4603      	mov	r3, r0
 8004b50:	70fb      	strb	r3, [r7, #3]
 8004b52:	460b      	mov	r3, r1
 8004b54:	70bb      	strb	r3, [r7, #2]
 8004b56:	4613      	mov	r3, r2
 8004b58:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	4a32      	ldr	r2, [pc, #200]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b62:	08db      	lsrs	r3, r3, #3
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3330      	adds	r3, #48	; 0x30
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b30      	ldr	r3, [pc, #192]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004b6c:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	08db      	lsrs	r3, r3, #3
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	0152      	lsls	r2, r2, #5
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	78fb      	ldrb	r3, [r7, #3]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	3330      	adds	r3, #48	; 0x30
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004b94:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8004b96:	4b25      	ldr	r3, [pc, #148]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004b98:	223a      	movs	r2, #58	; 0x3a
 8004b9a:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 8004b9c:	78bb      	ldrb	r3, [r7, #2]
 8004b9e:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba4:	08db      	lsrs	r3, r3, #3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3330      	adds	r3, #48	; 0x30
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004bae:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8004bb0:	78bb      	ldrb	r3, [r7, #2]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	08db      	lsrs	r3, r3, #3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	0152      	lsls	r2, r2, #5
 8004bc0:	1ad2      	subs	r2, r2, r3
 8004bc2:	0092      	lsls	r2, r2, #2
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	78bb      	ldrb	r3, [r7, #2]
 8004bcc:	4413      	add	r3, r2
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	3330      	adds	r3, #48	; 0x30
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004bd6:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8004bd8:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004bda:	223a      	movs	r2, #58	; 0x3a
 8004bdc:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8004bde:	787b      	ldrb	r3, [r7, #1]
 8004be0:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004be2:	fba2 2303 	umull	r2, r3, r2, r3
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3330      	adds	r3, #48	; 0x30
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004bf0:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 8004bf2:	787b      	ldrb	r3, [r7, #1]
 8004bf4:	4a0c      	ldr	r2, [pc, #48]	; (8004c28 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	08db      	lsrs	r3, r3, #3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	0152      	lsls	r2, r2, #5
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	787b      	ldrb	r3, [r7, #1]
 8004c0e:	4413      	add	r3, r2
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	3330      	adds	r3, #48	; 0x30
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004c18:	71da      	strb	r2, [r3, #7]
	return result;
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	20000370 	.word	0x20000370

08004c30 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>:
 */

#include "Time.h"


Time::Time(Model *model, I2C_HandleTypeDef *hi2c) {
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
	this->model = model;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	601a      	str	r2, [r3, #0]
	this->hi2c = hi2c;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	605a      	str	r2, [r3, #4]

}
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <_ZN4Time7SetTimeEv>:

void Time::SetTime() {
 8004c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af04      	add	r7, sp, #16
 8004c5e:	6078      	str	r0, [r7, #4]

	SetTime(model->getYear(),model->getMonth(),model->getDay(),model->getHour(),model->getMinute(),model->getSeconds());
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fd f9d2 	bl	800200e <_ZNK5Model7getYearEv>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461e      	mov	r6, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fd f975 	bl	8001f62 <_ZNK5Model8getMonthEv>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4698      	mov	r8, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fd f8d3 	bl	8001e2c <_ZNK5Model6getDayEv>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4699      	mov	r9, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd f8f9 	bl	8001e86 <_ZNK5Model7getHourEv>
 8004c94:	4603      	mov	r3, r0
 8004c96:	461c      	mov	r4, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fd f943 	bl	8001f28 <_ZNK5Model9getMinuteEv>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461d      	mov	r5, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd f976 	bl	8001f9c <_ZNK5Model10getSecondsEv>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	9302      	str	r3, [sp, #8]
 8004cb4:	9501      	str	r5, [sp, #4]
 8004cb6:	9400      	str	r4, [sp, #0]
 8004cb8:	464b      	mov	r3, r9
 8004cba:	4642      	mov	r2, r8
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f805 	bl	8004cce <_ZN4Time7SetTimeEhhhhhh>

}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004cce <_ZN4Time7SetTimeEhhhhhh>:
void Time::InitTimer() {

}


void Time::SetTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour,uint8_t minute, uint8_t seconds) {
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af02      	add	r7, sp, #8
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	4608      	mov	r0, r1
 8004cd8:	4611      	mov	r1, r2
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	70fb      	strb	r3, [r7, #3]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70bb      	strb	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	707b      	strb	r3, [r7, #1]

	uint8_t txData[8];

	txData[0] = 0x02;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	723b      	strb	r3, [r7, #8]
	txData[1] = Tools::BCDEncoder(seconds);
 8004cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fd fd9d 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	727b      	strb	r3, [r7, #9]
	txData[2] = Tools::BCDEncoder(minute);
 8004cfa:	7f3b      	ldrb	r3, [r7, #28]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fd fd97 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004d02:	4603      	mov	r3, r0
 8004d04:	72bb      	strb	r3, [r7, #10]
	txData[3] = Tools::BCDEncoder(hour);
 8004d06:	7e3b      	ldrb	r3, [r7, #24]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fd fd91 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	72fb      	strb	r3, [r7, #11]
	txData[4] = Tools::BCDEncoder(day);
 8004d12:	787b      	ldrb	r3, [r7, #1]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fd fd8b 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	733b      	strb	r3, [r7, #12]
	txData[5] = 0x01;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	737b      	strb	r3, [r7, #13]
	txData[6] = Tools::BCDEncoder(month);
 8004d22:	78bb      	ldrb	r3, [r7, #2]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd fd83 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	73bb      	strb	r3, [r7, #14]
	txData[7] = Tools::BCDEncoder(year);
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd fd7d 	bl	8002830 <_ZN5Tools10BCDEncoderEh>
 8004d36:	4603      	mov	r3, r0
 8004d38:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, TIME_ADDR<<1, txData, sizeof(txData)/sizeof(txData[0]), I2C_TIMEOUT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6858      	ldr	r0, [r3, #4]
 8004d3e:	f107 0208 	add.w	r2, r7, #8
 8004d42:	2364      	movs	r3, #100	; 0x64
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	2308      	movs	r3, #8
 8004d48:	21a2      	movs	r1, #162	; 0xa2
 8004d4a:	f000 fefd 	bl	8005b48 <HAL_I2C_Master_Transmit>

}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <_ZN4Time10UpdateTimeEv>:


void Time::UpdateTime(){
 8004d56:	b590      	push	{r4, r7, lr}
 8004d58:	b089      	sub	sp, #36	; 0x24
 8004d5a:	af02      	add	r7, sp, #8
 8004d5c:	6078      	str	r0, [r7, #4]
	uint8_t rxData[7];
	uint8_t txData[1];
	txData[0] = 0x02;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(hi2c,TIME_ADDR<<1 ,txData , 1, 100);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6858      	ldr	r0, [r3, #4]
 8004d66:	f107 020c 	add.w	r2, r7, #12
 8004d6a:	2364      	movs	r3, #100	; 0x64
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	21a2      	movs	r1, #162	; 0xa2
 8004d72:	f000 fee9 	bl	8005b48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, TIME_ADDR<<1, rxData, 7, 100);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6858      	ldr	r0, [r3, #4]
 8004d7a:	f107 0210 	add.w	r2, r7, #16
 8004d7e:	2364      	movs	r3, #100	; 0x64
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	2307      	movs	r3, #7
 8004d84:	21a2      	movs	r1, #162	; 0xa2
 8004d86:	f000 ffd3 	bl	8005d30 <HAL_I2C_Master_Receive>

	model->setSeconds(Tools::BCDDecoder((rxData[0])&0x7F));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681c      	ldr	r4, [r3, #0]
 8004d8e:	7c3b      	ldrb	r3, [r7, #16]
 8004d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fd fd2e 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7fd f908 	bl	8001fb6 <_ZN5Model10setSecondsEh>
	model->setMinute(Tools::BCDDecoder((rxData[1])&0x7F));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681c      	ldr	r4, [r3, #0]
 8004daa:	7c7b      	ldrb	r3, [r7, #17]
 8004dac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd fd20 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f7fd f8c0 	bl	8001f42 <_ZN5Model9setMinuteEh>
	model->setHour(Tools::BCDDecoder((rxData[2])&0x3F));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681c      	ldr	r4, [r3, #0]
 8004dc6:	7cbb      	ldrb	r3, [r7, #18]
 8004dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd fd12 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f7fd f861 	bl	8001ea0 <_ZN5Model7setHourEh>
	model->setDay(Tools::BCDDecoder((rxData[3])&0x3F));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681c      	ldr	r4, [r3, #0]
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd fd04 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004df0:	4603      	mov	r3, r0
 8004df2:	4619      	mov	r1, r3
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7fd f826 	bl	8001e46 <_ZN5Model6setDayEh>
	model->setDayOfWeek(Tools::BCDDecoder((rxData[4])&0x03));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681c      	ldr	r4, [r3, #0]
 8004dfe:	7d3b      	ldrb	r3, [r7, #20]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd fcf6 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7fd f828 	bl	8001e66 <_ZN5Model12setDayOfWeekEh>
	model->setMonth(Tools::BCDDecoder((rxData[5])&0x1F));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681c      	ldr	r4, [r3, #0]
 8004e1a:	7d7b      	ldrb	r3, [r7, #21]
 8004e1c:	f003 031f 	and.w	r3, r3, #31
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7fd fce8 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7fd f8a5 	bl	8001f7c <_ZN5Model8setMonthEh>
	model->setYear(Tools::BCDDecoder((rxData[6])&0xFF));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681c      	ldr	r4, [r3, #0]
 8004e36:	7dbb      	ldrb	r3, [r7, #22]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fd fcdd 	bl	80027f8 <_ZN5Tools10BCDDecoderEh>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	4619      	mov	r1, r3
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7fd f8f0 	bl	8002028 <_ZN5Model7setYearEh>
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}

08004e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004e54:	f7fb ff34 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004e58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004e5a:	e003      	b.n	8004e64 <LoopCopyDataInit>

08004e5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	; (8004e8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004e5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004e60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004e62:	3104      	adds	r1, #4

08004e64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004e64:	480a      	ldr	r0, [pc, #40]	; (8004e90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004e68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004e6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004e6c:	d3f6      	bcc.n	8004e5c <CopyDataInit>
	ldr	r2, =_sbss
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	; (8004e98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004e70:	e002      	b.n	8004e78 <LoopFillZerobss>

08004e72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004e72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004e74:	f842 3b04 	str.w	r3, [r2], #4

08004e78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <LoopForever+0x16>)
	cmp	r2, r3
 8004e7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004e7c:	d3f9      	bcc.n	8004e72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e7e:	f009 f8a1 	bl	800dfc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e82:	f7fb fd8b 	bl	800099c <main>

08004e86 <LoopForever>:

LoopForever:
    b LoopForever
 8004e86:	e7fe      	b.n	8004e86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e88:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004e8c:	0800e2c4 	.word	0x0800e2c4
	ldr	r0, =_sdata
 8004e90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004e94:	20000214 	.word	0x20000214
	ldr	r2, =_sbss
 8004e98:	20000214 	.word	0x20000214
	ldr	r3, = _ebss
 8004e9c:	200015e8 	.word	0x200015e8

08004ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ea0:	e7fe      	b.n	8004ea0 <ADC1_2_IRQHandler>

08004ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eac:	2003      	movs	r0, #3
 8004eae:	f000 f961 	bl	8005174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	f000 f80e 	bl	8004ed4 <HAL_InitTick>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	e001      	b.n	8004ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ec4:	f7fb fe3e 	bl	8000b44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3708      	adds	r7, #8
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_InitTick+0x6c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ee8:	4b16      	ldr	r3, [pc, #88]	; (8004f44 <HAL_InitTick+0x70>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <HAL_InitTick+0x6c>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f96d 	bl	80051de <HAL_SYSTICK_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10f      	bne.n	8004f2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d809      	bhi.n	8004f24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f10:	2200      	movs	r2, #0
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	f000 f937 	bl	800518a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f1c:	4a0a      	ldr	r2, [pc, #40]	; (8004f48 <HAL_InitTick+0x74>)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	e007      	b.n	8004f34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e004      	b.n	8004f34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e001      	b.n	8004f34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000008 	.word	0x20000008
 8004f44:	20000000 	.word	0x20000000
 8004f48:	20000004 	.word	0x20000004

08004f4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_IncTick+0x20>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <HAL_IncTick+0x24>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	4a04      	ldr	r2, [pc, #16]	; (8004f70 <HAL_IncTick+0x24>)
 8004f5e:	6013      	str	r3, [r2, #0]
}
 8004f60:	bf00      	nop
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000008 	.word	0x20000008
 8004f70:	20000640 	.word	0x20000640

08004f74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return uwTick;
 8004f78:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <HAL_GetTick+0x14>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000640 	.word	0x20000640

08004f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f94:	f7ff ffee 	bl	8004f74 <HAL_GetTick>
 8004f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa4:	d005      	beq.n	8004fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_Delay+0x44>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fb2:	bf00      	nop
 8004fb4:	f7ff ffde 	bl	8004f74 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d8f7      	bhi.n	8004fb4 <HAL_Delay+0x28>
  {
  }
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000008 	.word	0x20000008

08004fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fe4:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005006:	4a04      	ldr	r2, [pc, #16]	; (8005018 <__NVIC_SetPriorityGrouping+0x44>)
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	60d3      	str	r3, [r2, #12]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <__NVIC_GetPriorityGrouping+0x18>)
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	0a1b      	lsrs	r3, r3, #8
 8005026:	f003 0307 	and.w	r3, r3, #7
}
 800502a:	4618      	mov	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005046:	2b00      	cmp	r3, #0
 8005048:	db0b      	blt.n	8005062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	4907      	ldr	r1, [pc, #28]	; (8005070 <__NVIC_EnableIRQ+0x38>)
 8005052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2001      	movs	r0, #1
 800505a:	fa00 f202 	lsl.w	r2, r0, r2
 800505e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e100 	.word	0xe000e100

08005074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	6039      	str	r1, [r7, #0]
 800507e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	db0a      	blt.n	800509e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	490c      	ldr	r1, [pc, #48]	; (80050c0 <__NVIC_SetPriority+0x4c>)
 800508e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005092:	0112      	lsls	r2, r2, #4
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	440b      	add	r3, r1
 8005098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800509c:	e00a      	b.n	80050b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4908      	ldr	r1, [pc, #32]	; (80050c4 <__NVIC_SetPriority+0x50>)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	3b04      	subs	r3, #4
 80050ac:	0112      	lsls	r2, r2, #4
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	440b      	add	r3, r1
 80050b2:	761a      	strb	r2, [r3, #24]
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	e000e100 	.word	0xe000e100
 80050c4:	e000ed00 	.word	0xe000ed00

080050c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b089      	sub	sp, #36	; 0x24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f1c3 0307 	rsb	r3, r3, #7
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	bf28      	it	cs
 80050e6:	2304      	movcs	r3, #4
 80050e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3304      	adds	r3, #4
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d902      	bls.n	80050f8 <NVIC_EncodePriority+0x30>
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3b03      	subs	r3, #3
 80050f6:	e000      	b.n	80050fa <NVIC_EncodePriority+0x32>
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	fa02 f303 	lsl.w	r3, r2, r3
 8005106:	43da      	mvns	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	401a      	ands	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005110:	f04f 31ff 	mov.w	r1, #4294967295
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	fa01 f303 	lsl.w	r3, r1, r3
 800511a:	43d9      	mvns	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005120:	4313      	orrs	r3, r2
         );
}
 8005122:	4618      	mov	r0, r3
 8005124:	3724      	adds	r7, #36	; 0x24
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3b01      	subs	r3, #1
 800513c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005140:	d301      	bcc.n	8005146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005142:	2301      	movs	r3, #1
 8005144:	e00f      	b.n	8005166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005146:	4a0a      	ldr	r2, [pc, #40]	; (8005170 <SysTick_Config+0x40>)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3b01      	subs	r3, #1
 800514c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800514e:	210f      	movs	r1, #15
 8005150:	f04f 30ff 	mov.w	r0, #4294967295
 8005154:	f7ff ff8e 	bl	8005074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <SysTick_Config+0x40>)
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <SysTick_Config+0x40>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	e000e010 	.word	0xe000e010

08005174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ff29 	bl	8004fd4 <__NVIC_SetPriorityGrouping>
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	4603      	mov	r3, r0
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800519c:	f7ff ff3e 	bl	800501c <__NVIC_GetPriorityGrouping>
 80051a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f7ff ff8e 	bl	80050c8 <NVIC_EncodePriority>
 80051ac:	4602      	mov	r2, r0
 80051ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ff5d 	bl	8005074 <__NVIC_SetPriority>
}
 80051ba:	bf00      	nop
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b082      	sub	sp, #8
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	4603      	mov	r3, r0
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff ff31 	bl	8005038 <__NVIC_EnableIRQ>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff ffa2 	bl	8005130 <SysTick_Config>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800520a:	4b2f      	ldr	r3, [pc, #188]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d101      	bne.n	8005216 <HAL_FLASH_Program+0x1e>
 8005212:	2302      	movs	r3, #2
 8005214:	e053      	b.n	80052be <HAL_FLASH_Program+0xc6>
 8005216:	4b2c      	ldr	r3, [pc, #176]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800521c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005220:	f000 f888 	bl	8005334 <FLASH_WaitForLastOperation>
 8005224:	4603      	mov	r3, r0
 8005226:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d143      	bne.n	80052b6 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800522e:	4b26      	ldr	r3, [pc, #152]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 8005230:	2200      	movs	r2, #0
 8005232:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <HAL_FLASH_Program+0xd4>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d009      	beq.n	8005254 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <HAL_FLASH_Program+0xd4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_FLASH_Program+0xd4>)
 8005246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800524c:	4b1e      	ldr	r3, [pc, #120]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 800524e:	2202      	movs	r2, #2
 8005250:	771a      	strb	r2, [r3, #28]
 8005252:	e002      	b.n	800525a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005254:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 8005256:	2200      	movs	r2, #0
 8005258:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d107      	bne.n	8005270 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005264:	68b8      	ldr	r0, [r7, #8]
 8005266:	f000 f8bd 	bl	80053e4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800526a:	2301      	movs	r3, #1
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e010      	b.n	8005292 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d002      	beq.n	800527c <HAL_FLASH_Program+0x84>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2b02      	cmp	r3, #2
 800527a:	d10a      	bne.n	8005292 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	68b8      	ldr	r0, [r7, #8]
 8005282:	f000 f8d5 	bl	8005430 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d102      	bne.n	8005292 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800528c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005290:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005292:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005296:	f000 f84d 	bl	8005334 <FLASH_WaitForLastOperation>
 800529a:	4603      	mov	r3, r0
 800529c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d006      	beq.n	80052b2 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80052a4:	4b09      	ldr	r3, [pc, #36]	; (80052cc <HAL_FLASH_Program+0xd4>)
 80052a6:	695a      	ldr	r2, [r3, #20]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	43db      	mvns	r3, r3
 80052ac:	4907      	ldr	r1, [pc, #28]	; (80052cc <HAL_FLASH_Program+0xd4>)
 80052ae:	4013      	ands	r3, r2
 80052b0:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80052b2:	f000 f9d3 	bl	800565c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <HAL_FLASH_Program+0xd0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]

  return status;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	2000000c 	.word	0x2000000c
 80052cc:	40022000 	.word	0x40022000

080052d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_FLASH_Unlock+0x38>)
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da0b      	bge.n	80052fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_FLASH_Unlock+0x38>)
 80052e4:	4a09      	ldr	r2, [pc, #36]	; (800530c <HAL_FLASH_Unlock+0x3c>)
 80052e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <HAL_FLASH_Unlock+0x38>)
 80052ea:	4a09      	ldr	r2, [pc, #36]	; (8005310 <HAL_FLASH_Unlock+0x40>)
 80052ec:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <HAL_FLASH_Unlock+0x38>)
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da01      	bge.n	80052fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80052fa:	79fb      	ldrb	r3, [r7, #7]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40022000 	.word	0x40022000
 800530c:	45670123 	.word	0x45670123
 8005310:	cdef89ab 	.word	0xcdef89ab

08005314 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_FLASH_Lock+0x1c>)
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	4a04      	ldr	r2, [pc, #16]	; (8005330 <HAL_FLASH_Lock+0x1c>)
 800531e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005322:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	40022000 	.word	0x40022000

08005334 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800533c:	f7ff fe1a 	bl	8004f74 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005342:	e00d      	b.n	8005360 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534a:	d009      	beq.n	8005360 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800534c:	f7ff fe12 	bl	8004f74 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d801      	bhi.n	8005360 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e036      	b.n	80053ce <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1eb      	bne.n	8005344 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <FLASH_WaitForLastOperation+0xa8>)
 8005372:	4013      	ands	r3, r2
 8005374:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01e      	beq.n	80053ba <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <FLASH_WaitForLastOperation+0xac>)
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4313      	orrs	r3, r2
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <FLASH_WaitForLastOperation+0xac>)
 8005386:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <FLASH_WaitForLastOperation+0x6e>
 8005392:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	618b      	str	r3, [r1, #24]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <FLASH_WaitForLastOperation+0x82>
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80053b4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e009      	b.n	80053ce <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80053ba:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80053c6:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <FLASH_WaitForLastOperation+0xa4>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40022000 	.word	0x40022000
 80053dc:	0002c3fa 	.word	0x0002c3fa
 80053e0:	2000000c 	.word	0x2000000c

080053e4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <FLASH_Program_DoubleWord+0x48>)
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	4a0d      	ldr	r2, [pc, #52]	; (800542c <FLASH_Program_DoubleWord+0x48>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005402:	f3bf 8f6f 	isb	sy
}
 8005406:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	000a      	movs	r2, r1
 8005416:	2300      	movs	r3, #0
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	3104      	adds	r1, #4
 800541c:	4613      	mov	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
}
 8005420:	bf00      	nop
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	40022000 	.word	0x40022000

08005430 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <FLASH_Program_Fast+0x68>)
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <FLASH_Program_Fast+0x68>)
 800544c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005450:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005452:	f3ef 8310 	mrs	r3, PRIMASK
 8005456:	60fb      	str	r3, [r7, #12]
  return(result);
 8005458:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800545a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800545c:	b672      	cpsid	i
}
 800545e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	3304      	adds	r3, #4
 800546c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3304      	adds	r3, #4
 8005472:	617b      	str	r3, [r7, #20]
    row_index--;
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	3b01      	subs	r3, #1
 8005478:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800547a:	7ffb      	ldrb	r3, [r7, #31]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ef      	bne.n	8005460 <FLASH_Program_Fast+0x30>
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800548c:	bf00      	nop
 800548e:	3724      	adds	r7, #36	; 0x24
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40022000 	.word	0x40022000

0800549c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80054a6:	4b4a      	ldr	r3, [pc, #296]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_FLASHEx_Erase+0x16>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e089      	b.n	80055c6 <HAL_FLASHEx_Erase+0x12a>
 80054b2:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80054b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80054bc:	f7ff ff3a 	bl	8005334 <FLASH_WaitForLastOperation>
 80054c0:	4603      	mov	r3, r0
 80054c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d179      	bne.n	80055be <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80054ca:	4b41      	ldr	r3, [pc, #260]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80054d0:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d019      	beq.n	8005510 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e6:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80054e8:	4b3a      	ldr	r3, [pc, #232]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a36      	ldr	r2, [pc, #216]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fe:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005500:	4b33      	ldr	r3, [pc, #204]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 8005502:	2203      	movs	r2, #3
 8005504:	771a      	strb	r2, [r3, #28]
 8005506:	e016      	b.n	8005536 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005508:	4b31      	ldr	r3, [pc, #196]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 800550a:	2201      	movs	r2, #1
 800550c:	771a      	strb	r2, [r3, #28]
 800550e:	e012      	b.n	8005536 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005510:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800551c:	4b2d      	ldr	r3, [pc, #180]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 8005522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005526:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005528:	4b29      	ldr	r3, [pc, #164]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 800552a:	2202      	movs	r2, #2
 800552c:	771a      	strb	r2, [r3, #28]
 800552e:	e002      	b.n	8005536 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005530:	4b27      	ldr	r3, [pc, #156]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 8005532:	2200      	movs	r2, #0
 8005534:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d111      	bne.n	8005562 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f848 	bl	80055d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005548:	f24c 3050 	movw	r0, #50000	; 0xc350
 800554c:	f7ff fef2 	bl	8005334 <FLASH_WaitForLastOperation>
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8005554:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	4a1e      	ldr	r2, [pc, #120]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 800555a:	f023 0304 	bic.w	r3, r3, #4
 800555e:	6153      	str	r3, [r2, #20]
 8005560:	e02b      	b.n	80055ba <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	e01b      	b.n	80055aa <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4619      	mov	r1, r3
 8005578:	68b8      	ldr	r0, [r7, #8]
 800557a:	f000 f84b 	bl	8005614 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800557e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005582:	f7ff fed7 	bl	8005334 <FLASH_WaitForLastOperation>
 8005586:	4603      	mov	r3, r0
 8005588:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800558a:	4b12      	ldr	r3, [pc, #72]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	4a11      	ldr	r2, [pc, #68]	; (80055d4 <HAL_FLASHEx_Erase+0x138>)
 8005590:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8005594:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	601a      	str	r2, [r3, #0]
          break;
 80055a2:	e00a      	b.n	80055ba <HAL_FLASHEx_Erase+0x11e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	3301      	adds	r3, #1
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689a      	ldr	r2, [r3, #8]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d3db      	bcc.n	8005572 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80055ba:	f000 f84f 	bl	800565c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80055be:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <HAL_FLASHEx_Erase+0x134>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]

  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	2000000c 	.word	0x2000000c
 80055d4:	40022000 	.word	0x40022000

080055d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <FLASH_MassErase+0x38>)
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4a08      	ldr	r2, [pc, #32]	; (8005610 <FLASH_MassErase+0x38>)
 80055f0:	f043 0304 	orr.w	r3, r3, #4
 80055f4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80055f6:	4b06      	ldr	r3, [pc, #24]	; (8005610 <FLASH_MassErase+0x38>)
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	4a05      	ldr	r2, [pc, #20]	; (8005610 <FLASH_MassErase+0x38>)
 80055fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005600:	6153      	str	r3, [r2, #20]
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40022000 	.word	0x40022000

08005614 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <FLASH_PageErase+0x44>)
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800562e:	490a      	ldr	r1, [pc, #40]	; (8005658 <FLASH_PageErase+0x44>)
 8005630:	4313      	orrs	r3, r2
 8005632:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005634:	4b08      	ldr	r3, [pc, #32]	; (8005658 <FLASH_PageErase+0x44>)
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	4a07      	ldr	r2, [pc, #28]	; (8005658 <FLASH_PageErase+0x44>)
 800563a:	f043 0302 	orr.w	r3, r3, #2
 800563e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <FLASH_PageErase+0x44>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	4a04      	ldr	r2, [pc, #16]	; (8005658 <FLASH_PageErase+0x44>)
 8005646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564a:	6153      	str	r3, [r2, #20]
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	40022000 	.word	0x40022000

0800565c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <FLASH_FlushCaches+0x80>)
 8005664:	7f1b      	ldrb	r3, [r3, #28]
 8005666:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d002      	beq.n	8005674 <FLASH_FlushCaches+0x18>
 800566e:	79fb      	ldrb	r3, [r7, #7]
 8005670:	2b03      	cmp	r3, #3
 8005672:	d111      	bne.n	8005698 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005674:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <FLASH_FlushCaches+0x84>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <FLASH_FlushCaches+0x84>)
 800567a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <FLASH_FlushCaches+0x84>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <FLASH_FlushCaches+0x84>)
 8005686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800568a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800568c:	4b14      	ldr	r3, [pc, #80]	; (80056e0 <FLASH_FlushCaches+0x84>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <FLASH_FlushCaches+0x84>)
 8005692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005696:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d002      	beq.n	80056a4 <FLASH_FlushCaches+0x48>
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d111      	bne.n	80056c8 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0d      	ldr	r2, [pc, #52]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80056bc:	4b08      	ldr	r3, [pc, #32]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a07      	ldr	r2, [pc, #28]	; (80056e0 <FLASH_FlushCaches+0x84>)
 80056c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80056c8:	4b04      	ldr	r3, [pc, #16]	; (80056dc <FLASH_FlushCaches+0x80>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	771a      	strb	r2, [r3, #28]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	2000000c 	.word	0x2000000c
 80056e0:	40022000 	.word	0x40022000

080056e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056f2:	e14e      	b.n	8005992 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2101      	movs	r1, #1
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8140 	beq.w	800598c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b01      	cmp	r3, #1
 8005712:	d00b      	beq.n	800572c <HAL_GPIO_Init+0x48>
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d007      	beq.n	800572c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005720:	2b11      	cmp	r3, #17
 8005722:	d003      	beq.n	800572c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b12      	cmp	r3, #18
 800572a:	d130      	bne.n	800578e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	2203      	movs	r2, #3
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	4013      	ands	r3, r2
 8005742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005762:	2201      	movs	r2, #1
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	fa02 f303 	lsl.w	r3, r2, r3
 800576a:	43db      	mvns	r3, r3
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4013      	ands	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 0201 	and.w	r2, r3, #1
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	fa02 f303 	lsl.w	r3, r2, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	2203      	movs	r2, #3
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4013      	ands	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d003      	beq.n	80057ce <HAL_GPIO_Init+0xea>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b12      	cmp	r3, #18
 80057cc:	d123      	bne.n	8005816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	08da      	lsrs	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3208      	adds	r2, #8
 80057d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	220f      	movs	r2, #15
 80057e6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ea:	43db      	mvns	r3, r3
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4013      	ands	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	691a      	ldr	r2, [r3, #16]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f003 0307 	and.w	r3, r3, #7
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	08da      	lsrs	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3208      	adds	r2, #8
 8005810:	6939      	ldr	r1, [r7, #16]
 8005812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	2203      	movs	r2, #3
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	43db      	mvns	r3, r3
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4013      	ands	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f003 0203 	and.w	r2, r3, #3
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 809a 	beq.w	800598c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005858:	4b55      	ldr	r3, [pc, #340]	; (80059b0 <HAL_GPIO_Init+0x2cc>)
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	4a54      	ldr	r2, [pc, #336]	; (80059b0 <HAL_GPIO_Init+0x2cc>)
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	6613      	str	r3, [r2, #96]	; 0x60
 8005864:	4b52      	ldr	r3, [pc, #328]	; (80059b0 <HAL_GPIO_Init+0x2cc>)
 8005866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	60bb      	str	r3, [r7, #8]
 800586e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005870:	4a50      	ldr	r2, [pc, #320]	; (80059b4 <HAL_GPIO_Init+0x2d0>)
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	089b      	lsrs	r3, r3, #2
 8005876:	3302      	adds	r3, #2
 8005878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800587c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	220f      	movs	r2, #15
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	43db      	mvns	r3, r3
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4013      	ands	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800589a:	d013      	beq.n	80058c4 <HAL_GPIO_Init+0x1e0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a46      	ldr	r2, [pc, #280]	; (80059b8 <HAL_GPIO_Init+0x2d4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00d      	beq.n	80058c0 <HAL_GPIO_Init+0x1dc>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a45      	ldr	r2, [pc, #276]	; (80059bc <HAL_GPIO_Init+0x2d8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d007      	beq.n	80058bc <HAL_GPIO_Init+0x1d8>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a44      	ldr	r2, [pc, #272]	; (80059c0 <HAL_GPIO_Init+0x2dc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d101      	bne.n	80058b8 <HAL_GPIO_Init+0x1d4>
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <HAL_GPIO_Init+0x1e2>
 80058b8:	2307      	movs	r3, #7
 80058ba:	e004      	b.n	80058c6 <HAL_GPIO_Init+0x1e2>
 80058bc:	2302      	movs	r3, #2
 80058be:	e002      	b.n	80058c6 <HAL_GPIO_Init+0x1e2>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_GPIO_Init+0x1e2>
 80058c4:	2300      	movs	r3, #0
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	f002 0203 	and.w	r2, r2, #3
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	4093      	lsls	r3, r2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058d6:	4937      	ldr	r1, [pc, #220]	; (80059b4 <HAL_GPIO_Init+0x2d0>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80058e4:	4b37      	ldr	r3, [pc, #220]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4013      	ands	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005908:	4a2e      	ldr	r2, [pc, #184]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800590e:	4b2d      	ldr	r3, [pc, #180]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	43db      	mvns	r3, r3
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005932:	4a24      	ldr	r2, [pc, #144]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005938:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	43db      	mvns	r3, r3
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	43db      	mvns	r3, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4013      	ands	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <HAL_GPIO_Init+0x2e0>)
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	3301      	adds	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	fa22 f303 	lsr.w	r3, r2, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f47f aea9 	bne.w	80056f4 <HAL_GPIO_Init+0x10>
  }
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40010000 	.word	0x40010000
 80059b8:	48000400 	.word	0x48000400
 80059bc:	48000800 	.word	0x48000800
 80059c0:	48000c00 	.word	0x48000c00
 80059c4:	40010400 	.word	0x40010400

080059c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	887b      	ldrh	r3, [r7, #2]
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e001      	b.n	80059ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
 8005a04:	4613      	mov	r3, r2
 8005a06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a08:	787b      	ldrb	r3, [r7, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005a0e:	887a      	ldrh	r2, [r7, #2]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005a14:	e002      	b.n	8005a1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005a16:	887a      	ldrh	r2, [r7, #2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e081      	b.n	8005b3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fa ff4c 	bl	80008ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0201 	bic.w	r2, r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a9e:	609a      	str	r2, [r3, #8]
 8005aa0:	e006      	b.n	8005ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d104      	bne.n	8005ac2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ac0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6812      	ldr	r2, [r2, #0]
 8005acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ad4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ae4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691a      	ldr	r2, [r3, #16]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	ea42 0103 	orr.w	r1, r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	021a      	lsls	r2, r3, #8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69d9      	ldr	r1, [r3, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af02      	add	r7, sp, #8
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	461a      	mov	r2, r3
 8005b54:	460b      	mov	r3, r1
 8005b56:	817b      	strh	r3, [r7, #10]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	f040 80da 	bne.w	8005d1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_I2C_Master_Transmit+0x30>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e0d3      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b80:	f7ff f9f8 	bl	8004f74 <HAL_GetTick>
 8005b84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	2319      	movs	r3, #25
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f9e6 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e0be      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2221      	movs	r2, #33	; 0x21
 8005ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2210      	movs	r2, #16
 8005bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	893a      	ldrh	r2, [r7, #8]
 8005bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2bff      	cmp	r3, #255	; 0xff
 8005bd2:	d90e      	bls.n	8005bf2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	22ff      	movs	r2, #255	; 0xff
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	8979      	ldrh	r1, [r7, #10]
 8005be2:	4b51      	ldr	r3, [pc, #324]	; (8005d28 <HAL_I2C_Master_Transmit+0x1e0>)
 8005be4:	9300      	str	r3, [sp, #0]
 8005be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 fb48 	bl	8006280 <I2C_TransferConfig>
 8005bf0:	e06c      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	8979      	ldrh	r1, [r7, #10]
 8005c04:	4b48      	ldr	r3, [pc, #288]	; (8005d28 <HAL_I2C_Master_Transmit+0x1e0>)
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fb37 	bl	8006280 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005c12:	e05b      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	6a39      	ldr	r1, [r7, #32]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f9e3 	bl	8005fe4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d001      	beq.n	8005c28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e07b      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	781a      	ldrb	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d034      	beq.n	8005ccc <HAL_I2C_Master_Transmit+0x184>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d130      	bne.n	8005ccc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f975 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e04d      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2bff      	cmp	r3, #255	; 0xff
 8005c8c:	d90e      	bls.n	8005cac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	22ff      	movs	r2, #255	; 0xff
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	8979      	ldrh	r1, [r7, #10]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 faeb 	bl	8006280 <I2C_TransferConfig>
 8005caa:	e00f      	b.n	8005ccc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 fada 	bl	8006280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d19e      	bne.n	8005c14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	6a39      	ldr	r1, [r7, #32]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f9c2 	bl	8006064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e01a      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_I2C_Master_Transmit+0x1e4>)
 8005cfe:	400b      	ands	r3, r1
 8005d00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e000      	b.n	8005d20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005d1e:	2302      	movs	r3, #2
  }
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	80002000 	.word	0x80002000
 8005d2c:	fe00e800 	.word	0xfe00e800

08005d30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	607a      	str	r2, [r7, #4]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	817b      	strh	r3, [r7, #10]
 8005d40:	4613      	mov	r3, r2
 8005d42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	f040 80db 	bne.w	8005f08 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_I2C_Master_Receive+0x30>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0d4      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005d68:	f7ff f904 	bl	8004f74 <HAL_GetTick>
 8005d6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	9300      	str	r3, [sp, #0]
 8005d72:	2319      	movs	r3, #25
 8005d74:	2201      	movs	r2, #1
 8005d76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f8f2 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e0bf      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2222      	movs	r2, #34	; 0x22
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2210      	movs	r2, #16
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2bff      	cmp	r3, #255	; 0xff
 8005dba:	d90e      	bls.n	8005dda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	22ff      	movs	r2, #255	; 0xff
 8005dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	8979      	ldrh	r1, [r7, #10]
 8005dca:	4b52      	ldr	r3, [pc, #328]	; (8005f14 <HAL_I2C_Master_Receive+0x1e4>)
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fa54 	bl	8006280 <I2C_TransferConfig>
 8005dd8:	e06d      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	8979      	ldrh	r1, [r7, #10]
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <HAL_I2C_Master_Receive+0x1e4>)
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fa43 	bl	8006280 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005dfa:	e05c      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	6a39      	ldr	r1, [r7, #32]
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f96b 	bl	80060dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e07c      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d034      	beq.n	8005eb6 <HAL_I2C_Master_Receive+0x186>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d130      	bne.n	8005eb6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	6a3b      	ldr	r3, [r7, #32]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2180      	movs	r1, #128	; 0x80
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f880 	bl	8005f64 <I2C_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d001      	beq.n	8005e6e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e04d      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2bff      	cmp	r3, #255	; 0xff
 8005e76:	d90e      	bls.n	8005e96 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	8979      	ldrh	r1, [r7, #10]
 8005e86:	2300      	movs	r3, #0
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	f000 f9f6 	bl	8006280 <I2C_TransferConfig>
 8005e94:	e00f      	b.n	8005eb6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	8979      	ldrh	r1, [r7, #10]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f9e5 	bl	8006280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d19d      	bne.n	8005dfc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	6a39      	ldr	r1, [r7, #32]
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f8cd 	bl	8006064 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e01a      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <HAL_I2C_Master_Receive+0x1e8>)
 8005ee8:	400b      	ands	r3, r1
 8005eea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e000      	b.n	8005f0a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
  }
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	80002400 	.word	0x80002400
 8005f18:	fe00e800 	.word	0xfe00e800

08005f1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d007      	beq.n	8005f58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699a      	ldr	r2, [r3, #24]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	619a      	str	r2, [r3, #24]
  }
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	603b      	str	r3, [r7, #0]
 8005f70:	4613      	mov	r3, r2
 8005f72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f74:	e022      	b.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d01e      	beq.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7e:	f7fe fff9 	bl	8004f74 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d302      	bcc.n	8005f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d113      	bne.n	8005fbc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e00f      	b.n	8005fdc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d0cd      	beq.n	8005f76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ff0:	e02c      	b.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 f8dc 	bl	80061b4 <I2C_IsAcknowledgeFailed>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d001      	beq.n	8006006 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e02a      	b.n	800605c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600c:	d01e      	beq.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600e:	f7fe ffb1 	bl	8004f74 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	429a      	cmp	r2, r3
 800601c:	d302      	bcc.n	8006024 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d113      	bne.n	800604c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006028:	f043 0220 	orr.w	r2, r3, #32
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e007      	b.n	800605c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b02      	cmp	r3, #2
 8006058:	d1cb      	bne.n	8005ff2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006070:	e028      	b.n	80060c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 f89c 	bl	80061b4 <I2C_IsAcknowledgeFailed>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e026      	b.n	80060d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fe ff75 	bl	8004f74 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d113      	bne.n	80060c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a0:	f043 0220 	orr.w	r2, r3, #32
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e007      	b.n	80060d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d1cf      	bne.n	8006072 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e8:	e055      	b.n	8006196 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	68b9      	ldr	r1, [r7, #8]
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 f860 	bl	80061b4 <I2C_IsAcknowledgeFailed>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e053      	b.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b20      	cmp	r3, #32
 800610a:	d129      	bne.n	8006160 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	2b04      	cmp	r3, #4
 8006118:	d105      	bne.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e03f      	b.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2220      	movs	r2, #32
 800612c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6859      	ldr	r1, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800613a:	400b      	ands	r3, r1
 800613c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e022      	b.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006160:	f7fe ff08 	bl	8004f74 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	d302      	bcc.n	8006176 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617a:	f043 0220 	orr.w	r2, r3, #32
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e007      	b.n	80061a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d1a2      	bne.n	80060ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	fe00e800 	.word	0xfe00e800

080061b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b10      	cmp	r3, #16
 80061cc:	d151      	bne.n	8006272 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ce:	e022      	b.n	8006216 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d01e      	beq.n	8006216 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d8:	f7fe fecc 	bl	8004f74 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d302      	bcc.n	80061ee <I2C_IsAcknowledgeFailed+0x3a>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d113      	bne.n	8006216 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f043 0220 	orr.w	r2, r3, #32
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e02e      	b.n	8006274 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b20      	cmp	r3, #32
 8006222:	d1d5      	bne.n	80061d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2220      	movs	r2, #32
 8006232:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fe71 	bl	8005f1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b0d      	ldr	r3, [pc, #52]	; (800627c <I2C_IsAcknowledgeFailed+0xc8>)
 8006246:	400b      	ands	r3, r1
 8006248:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	f043 0204 	orr.w	r2, r3, #4
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2220      	movs	r2, #32
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fe00e800 	.word	0xfe00e800

08006280 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	817b      	strh	r3, [r7, #10]
 800628e:	4613      	mov	r3, r2
 8006290:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	0d5b      	lsrs	r3, r3, #21
 800629c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80062a0:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <I2C_TransferConfig+0x58>)
 80062a2:	430b      	orrs	r3, r1
 80062a4:	43db      	mvns	r3, r3
 80062a6:	ea02 0103 	and.w	r1, r2, r3
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062b0:	7a7b      	ldrb	r3, [r7, #9]
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80062b8:	431a      	orrs	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	431a      	orrs	r2, r3
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	03ff63ff 	.word	0x03ff63ff

080062dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d138      	bne.n	8006364 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e032      	b.n	8006366 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2224      	movs	r2, #36	; 0x24
 800630c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0201 	bic.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800632e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e000      	b.n	8006366 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006364:	2302      	movs	r3, #2
  }
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b20      	cmp	r3, #32
 8006386:	d139      	bne.n	80063fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800638e:	2b01      	cmp	r3, #1
 8006390:	d101      	bne.n	8006396 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006392:	2302      	movs	r3, #2
 8006394:	e033      	b.n	80063fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2224      	movs	r2, #36	; 0x24
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0201 	bic.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	e000      	b.n	80063fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063fc:	2302      	movs	r3, #2
  }
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800640a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640c:	b08b      	sub	sp, #44	; 0x2c
 800640e:	af06      	add	r7, sp, #24
 8006410:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e104      	b.n	8006626 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f007 f9e3 	bl	800d7fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2203      	movs	r2, #3
 800643a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f003 f94e 	bl	80096e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	687e      	ldr	r6, [r7, #4]
 8006450:	466d      	mov	r5, sp
 8006452:	f106 0410 	add.w	r4, r6, #16
 8006456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	1d33      	adds	r3, r6, #4
 8006460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f003 f916 	bl	8009694 <USB_CoreInit>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e0d5      	b.n	8006626 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2100      	movs	r1, #0
 8006480:	4618      	mov	r0, r3
 8006482:	f003 f94a 	bl	800971a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
 800648a:	e04c      	b.n	8006526 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	3301      	adds	r3, #1
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064a2:	7bfb      	ldrb	r3, [r7, #15]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	440b      	add	r3, r1
 80064b2:	7bfa      	ldrb	r2, [r7, #15]
 80064b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064b6:	7bfa      	ldrb	r2, [r7, #15]
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	b298      	uxth	r0, r3
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	440b      	add	r3, r1
 80064c8:	3336      	adds	r3, #54	; 0x36
 80064ca:	4602      	mov	r2, r0
 80064cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	3303      	adds	r3, #3
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80064e4:	7bfa      	ldrb	r2, [r7, #15]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	00db      	lsls	r3, r3, #3
 80064f0:	440b      	add	r3, r1
 80064f2:	3338      	adds	r3, #56	; 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80064f8:	7bfa      	ldrb	r2, [r7, #15]
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	440b      	add	r3, r1
 8006506:	333c      	adds	r3, #60	; 0x3c
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800650c:	7bfa      	ldrb	r2, [r7, #15]
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	440b      	add	r3, r1
 800651a:	3340      	adds	r3, #64	; 0x40
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	3301      	adds	r3, #1
 8006524:	73fb      	strb	r3, [r7, #15]
 8006526:	7bfa      	ldrb	r2, [r7, #15]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d3ad      	bcc.n	800648c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
 8006534:	e044      	b.n	80065c0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006536:	7bfa      	ldrb	r2, [r7, #15]
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	440b      	add	r3, r1
 8006544:	f203 1369 	addw	r3, r3, #361	; 0x169
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800654c:	7bfa      	ldrb	r2, [r7, #15]
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	440b      	add	r3, r1
 800655a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800655e:	7bfa      	ldrb	r2, [r7, #15]
 8006560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	440b      	add	r3, r1
 8006570:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800658e:	7bfa      	ldrb	r2, [r7, #15]
 8006590:	6879      	ldr	r1, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	00db      	lsls	r3, r3, #3
 800659a:	440b      	add	r3, r1
 800659c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065a4:	7bfa      	ldrb	r2, [r7, #15]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	440b      	add	r3, r1
 80065b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ba:	7bfb      	ldrb	r3, [r7, #15]
 80065bc:	3301      	adds	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
 80065c0:	7bfa      	ldrb	r2, [r7, #15]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3b5      	bcc.n	8006536 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	687e      	ldr	r6, [r7, #4]
 80065d2:	466d      	mov	r5, sp
 80065d4:	f106 0410 	add.w	r4, r6, #16
 80065d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065dc:	6823      	ldr	r3, [r4, #0]
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	1d33      	adds	r3, r6, #4
 80065e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065e4:	6838      	ldr	r0, [r7, #0]
 80065e6:	f003 f8a5 	bl	8009734 <USB_DevInit>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2202      	movs	r2, #2
 80065f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e014      	b.n	8006626 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d102      	bne.n	800661a <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 fb9d 	bl	8007d54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f005 fa26 	bl	800ba70 <USB_DevDisconnect>

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800662e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_PCD_Start+0x16>
 8006640:	2302      	movs	r3, #2
 8006642:	e012      	b.n	800666a <HAL_PCD_Start+0x3c>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f003 f830 	bl	80096b6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f005 f9f1 	bl	800ba42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f005 fa0b 	bl	800ba9a <USB_ReadInterrupts>
 8006684:	4603      	mov	r3, r0
 8006686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800668a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668e:	d102      	bne.n	8006696 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fb5b 	bl	8006d4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f005 f9fd 	bl	800ba9a <USB_ReadInterrupts>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d112      	bne.n	80066d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066be:	b292      	uxth	r2, r2
 80066c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f007 f950 	bl	800d96a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80066ca:	2100      	movs	r1, #0
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f91e 	bl	800690e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f005 f9df 	bl	800ba9a <USB_ReadInterrupts>
 80066dc:	4603      	mov	r3, r0
 80066de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066e6:	d10b      	bne.n	8006700 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066fa:	b292      	uxth	r2, r2
 80066fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4618      	mov	r0, r3
 8006706:	f005 f9c8 	bl	800ba9a <USB_ReadInterrupts>
 800670a:	4603      	mov	r3, r0
 800670c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006714:	d10b      	bne.n	800672e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800671e:	b29a      	uxth	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006728:	b292      	uxth	r2, r2
 800672a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f005 f9b1 	bl	800ba9a <USB_ReadInterrupts>
 8006738:	4603      	mov	r3, r0
 800673a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006742:	d133      	bne.n	80067ac <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800674c:	b29a      	uxth	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f022 0204 	bic.w	r2, r2, #4
 8006756:	b292      	uxth	r2, r2
 8006758:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0208 	bic.w	r2, r2, #8
 800676e:	b292      	uxth	r2, r2
 8006770:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f007 fb9f 	bl	800decc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f007 f924 	bl	800d9dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067a6:	b292      	uxth	r2, r2
 80067a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f005 f972 	bl	800ba9a <USB_ReadInterrupts>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d126      	bne.n	8006810 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f042 0208 	orr.w	r2, r2, #8
 80067d4:	b292      	uxth	r2, r2
 80067d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ec:	b292      	uxth	r2, r2
 80067ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0204 	orr.w	r2, r2, #4
 8006804:	b292      	uxth	r2, r2
 8006806:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f007 f8cc 	bl	800d9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f005 f940 	bl	800ba9a <USB_ReadInterrupts>
 800681a:	4603      	mov	r3, r0
 800681c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006820:	2b80      	cmp	r3, #128	; 0x80
 8006822:	d13f      	bne.n	80068a4 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800682c:	b29a      	uxth	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006836:	b292      	uxth	r2, r2
 8006838:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d12b      	bne.n	800689e <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0204 	orr.w	r2, r2, #4
 8006858:	b292      	uxth	r2, r2
 800685a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0208 	orr.w	r2, r2, #8
 8006870:	b292      	uxth	r2, r2
 8006872:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006886:	b29b      	uxth	r3, r3
 8006888:	089b      	lsrs	r3, r3, #2
 800688a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006894:	2101      	movs	r1, #1
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f007 fb18 	bl	800decc <HAL_PCDEx_LPM_Callback>
 800689c:	e002      	b.n	80068a4 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f007 f882 	bl	800d9a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4618      	mov	r0, r3
 80068aa:	f005 f8f6 	bl	800ba9a <USB_ReadInterrupts>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b8:	d10e      	bne.n	80068d8 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80068cc:	b292      	uxth	r2, r2
 80068ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f007 f83b 	bl	800d94e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4618      	mov	r0, r3
 80068de:	f005 f8dc 	bl	800ba9a <USB_ReadInterrupts>
 80068e2:	4603      	mov	r3, r0
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ec:	d10b      	bne.n	8006906 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006900:	b292      	uxth	r2, r2
 8006902:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	460b      	mov	r3, r1
 8006918:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_PCD_SetAddress+0x1a>
 8006924:	2302      	movs	r3, #2
 8006926:	e013      	b.n	8006950 <HAL_PCD_SetAddress+0x42>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	4611      	mov	r1, r2
 8006940:	4618      	mov	r0, r3
 8006942:	f005 f86a 	bl	800ba1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	4608      	mov	r0, r1
 8006962:	4611      	mov	r1, r2
 8006964:	461a      	mov	r2, r3
 8006966:	4603      	mov	r3, r0
 8006968:	70fb      	strb	r3, [r7, #3]
 800696a:	460b      	mov	r3, r1
 800696c:	803b      	strh	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800697a:	2b00      	cmp	r3, #0
 800697c:	da0e      	bge.n	800699c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800697e:	78fb      	ldrb	r3, [r7, #3]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	4613      	mov	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	705a      	strb	r2, [r3, #1]
 800699a:	e00e      	b.n	80069ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	f003 0207 	and.w	r2, r3, #7
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4413      	add	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069c6:	883a      	ldrh	r2, [r7, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	78ba      	ldrb	r2, [r7, #2]
 80069d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d004      	beq.n	80069e4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	b29a      	uxth	r2, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069e4:	78bb      	ldrb	r3, [r7, #2]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d102      	bne.n	80069f0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_PCD_EP_Open+0xa6>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e00e      	b.n	8006a1c <HAL_PCD_EP_Open+0xc4>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68f9      	ldr	r1, [r7, #12]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 feb3 	bl	8009778 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	da0e      	bge.n	8006a56 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2201      	movs	r2, #1
 8006a52:	705a      	strb	r2, [r3, #1]
 8006a54:	e00e      	b.n	8006a74 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	f003 0207 	and.w	r2, r3, #7
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	f003 0307 	and.w	r3, r3, #7
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_PCD_EP_Close+0x6a>
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e00e      	b.n	8006aac <HAL_PCD_EP_Close+0x88>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f003 f9d9 	bl	8009e54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b086      	sub	sp, #24
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	f003 0207 	and.w	r2, r3, #7
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	00db      	lsls	r3, r3, #3
 8006ad2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4413      	add	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2200      	movs	r2, #0
 8006aec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2200      	movs	r2, #0
 8006af2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006af4:	7afb      	ldrb	r3, [r7, #11]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6979      	ldr	r1, [r7, #20]
 8006b10:	4618      	mov	r0, r3
 8006b12:	f003 fb8c 	bl	800a22e <USB_EPStartXfer>
 8006b16:	e005      	b.n	8006b24 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6979      	ldr	r1, [r7, #20]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f003 fb85 	bl	800a22e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	f003 0207 	and.w	r2, r3, #7
 8006b40:	6879      	ldr	r1, [r7, #4]
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	00db      	lsls	r3, r3, #3
 8006b4a:	440b      	add	r3, r1
 8006b4c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006b50:	681b      	ldr	r3, [r3, #0]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	4413      	add	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006baa:	7afb      	ldrb	r3, [r7, #11]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f003 fb31 	bl	800a22e <USB_EPStartXfer>
 8006bcc:	e005      	b.n	8006bda <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f003 fb2a 	bl	800a22e <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	460b      	mov	r3, r1
 8006bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	f003 0207 	and.w	r2, r3, #7
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d901      	bls.n	8006c02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e04c      	b.n	8006c9c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da0e      	bge.n	8006c28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c0a:	78fb      	ldrb	r3, [r7, #3]
 8006c0c:	f003 0307 	and.w	r3, r3, #7
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2201      	movs	r2, #1
 8006c24:	705a      	strb	r2, [r3, #1]
 8006c26:	e00c      	b.n	8006c42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c28:	78fa      	ldrb	r2, [r7, #3]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	4413      	add	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c48:	78fb      	ldrb	r3, [r7, #3]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	b2da      	uxtb	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_PCD_EP_SetStall+0x7e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e01c      	b.n	8006c9c <HAL_PCD_EP_SetStall+0xb8>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68f9      	ldr	r1, [r7, #12]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f004 fdd3 	bl	800b81c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c76:	78fb      	ldrb	r3, [r7, #3]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d108      	bne.n	8006c92 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f004 ff14 	bl	800baba <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d901      	bls.n	8006cc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e040      	b.n	8006d44 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da0e      	bge.n	8006ce8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	705a      	strb	r2, [r3, #1]
 8006ce6:	e00e      	b.n	8006d06 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	f003 0207 	and.w	r2, r3, #7
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_PCD_EP_ClrStall+0x82>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e00e      	b.n	8006d44 <HAL_PCD_EP_ClrStall+0xa0>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f004 fdc2 	bl	800b8be <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08e      	sub	sp, #56	; 0x38
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d54:	e2d6      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8006d6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f040 815b 	bne.w	800702c <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d150      	bne.n	8006e22 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	81fb      	strh	r3, [r7, #14]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	89fb      	ldrh	r3, [r7, #14]
 8006d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3328      	adds	r3, #40	; 0x28
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dc8:	881b      	ldrh	r3, [r3, #0]
 8006dca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	441a      	add	r2, r3
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006de0:	2100      	movs	r1, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f006 fd99 	bl	800d91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8287 	beq.w	8007304 <PCD_EP_ISR_Handler+0x5b8>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 8282 	bne.w	8007304 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	b292      	uxth	r2, r2
 8006e14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e20:	e270      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	881b      	ldrh	r3, [r3, #0]
 8006e30:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d032      	beq.n	8006ea2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	4413      	add	r3, r2
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e70:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e74:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	f004 fe6d 	bl	800bb56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e88:	4013      	ands	r3, r2
 8006e8a:	823b      	strh	r3, [r7, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	8a3a      	ldrh	r2, [r7, #16]
 8006e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e96:	b292      	uxth	r2, r2
 8006e98:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f006 fd10 	bl	800d8c0 <HAL_PCD_SetupStageCallback>
 8006ea0:	e230      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006ea2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	f280 822c 	bge.w	8007304 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006eb8:	4013      	ands	r3, r2
 8006eba:	83bb      	strh	r3, [r7, #28]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	8bba      	ldrh	r2, [r7, #28]
 8006ec2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d019      	beq.n	8006f2e <PCD_EP_ISR_Handler+0x1e2>
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d015      	beq.n	8006f2e <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	6959      	ldr	r1, [r3, #20]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f004 fe1f 	bl	800bb56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1a:	695a      	ldr	r2, [r3, #20]
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	441a      	add	r2, r3
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006f26:	2100      	movs	r1, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f006 fcdb 	bl	800d8e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 81e2 	bne.w	8007304 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	4413      	add	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d112      	bne.n	8006f8e <PCD_EP_ISR_Handler+0x242>
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	801a      	strh	r2, [r3, #0]
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	801a      	strh	r2, [r3, #0]
 8006f8c:	e02f      	b.n	8006fee <PCD_EP_ISR_Handler+0x2a2>
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b3e      	cmp	r3, #62	; 0x3e
 8006f94:	d813      	bhi.n	8006fbe <PCD_EP_ISR_Handler+0x272>
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <PCD_EP_ISR_Handler+0x264>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	3301      	adds	r3, #1
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	029b      	lsls	r3, r3, #10
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	801a      	strh	r2, [r3, #0]
 8006fbc:	e017      	b.n	8006fee <PCD_EP_ISR_Handler+0x2a2>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <PCD_EP_ISR_Handler+0x28c>
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	827b      	strh	r3, [r7, #18]
 8007000:	8a7b      	ldrh	r3, [r7, #18]
 8007002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007006:	827b      	strh	r3, [r7, #18]
 8007008:	8a7b      	ldrh	r3, [r7, #18]
 800700a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800700e:	827b      	strh	r3, [r7, #18]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	8a7b      	ldrh	r3, [r7, #18]
 8007016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800701a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007026:	b29b      	uxth	r3, r3
 8007028:	8013      	strh	r3, [r2, #0]
 800702a:	e16b      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800703e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8007042:	2b00      	cmp	r3, #0
 8007044:	f280 80e4 	bge.w	8007210 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29a      	uxth	r2, r3
 800705a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800705e:	4013      	ands	r3, r2
 8007060:	853b      	strh	r3, [r7, #40]	; 0x28
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007076:	b292      	uxth	r2, r2
 8007078:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800707a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800707e:	4613      	mov	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4413      	add	r3, r2
 800708e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	7b1b      	ldrb	r3, [r3, #12]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d120      	bne.n	80070da <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	4413      	add	r3, r2
 80070b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070bc:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80070be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8083 	beq.w	80071cc <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	6959      	ldr	r1, [r3, #20]
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	88da      	ldrh	r2, [r3, #6]
 80070d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80070d4:	f004 fd3f 	bl	800bb56 <USB_ReadPMA>
 80070d8:	e078      	b.n	80071cc <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	78db      	ldrb	r3, [r3, #3]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d108      	bne.n	80070f4 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80070e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80070e4:	461a      	mov	r2, r3
 80070e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f919 	bl	8007320 <HAL_PCD_EP_DB_Receive>
 80070ee:	4603      	mov	r3, r0
 80070f0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80070f2:	e06b      	b.n	80071cc <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800710e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	461a      	mov	r2, r3
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	b29b      	uxth	r3, r3
 8007146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d01f      	beq.n	800718e <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007156:	b29b      	uxth	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	4413      	add	r3, r2
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6812      	ldr	r2, [r2, #0]
 8007166:	4413      	add	r3, r2
 8007168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007172:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8007174:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007176:	2b00      	cmp	r3, #0
 8007178:	d028      	beq.n	80071cc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6818      	ldr	r0, [r3, #0]
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	6959      	ldr	r1, [r3, #20]
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	891a      	ldrh	r2, [r3, #8]
 8007186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007188:	f004 fce5 	bl	800bb56 <USB_ReadPMA>
 800718c:	e01e      	b.n	80071cc <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007196:	b29b      	uxth	r3, r3
 8007198:	461a      	mov	r2, r3
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071ac:	881b      	ldrh	r3, [r3, #0]
 80071ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80071b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d008      	beq.n	80071cc <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	6959      	ldr	r1, [r3, #20]
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	895a      	ldrh	r2, [r3, #10]
 80071c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071c8:	f004 fcc5 	bl	800bb56 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071d2:	441a      	add	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80071de:	441a      	add	r2, r3
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <PCD_EP_ISR_Handler+0x4aa>
 80071ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d206      	bcs.n	8007204 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f006 fb71 	bl	800d8e4 <HAL_PCD_DataOutStageCallback>
 8007202:	e005      	b.n	8007210 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f003 f80f 	bl	800a22e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007210:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d074      	beq.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800721a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	4613      	mov	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	4413      	add	r3, r2
 800722c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007248:	843b      	strh	r3, [r7, #32]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	441a      	add	r2, r3
 8007258:	8c3b      	ldrh	r3, [r7, #32]
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29b      	uxth	r3, r3
 8007264:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	78db      	ldrb	r3, [r3, #3]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d144      	bne.n	80072f8 <PCD_EP_ISR_Handler+0x5ac>
 800726e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d13f      	bne.n	80072f8 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007280:	b29b      	uxth	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4413      	add	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6812      	ldr	r2, [r2, #0]
 8007290:	4413      	add	r3, r2
 8007292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007296:	881b      	ldrh	r3, [r3, #0]
 8007298:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800729c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	699a      	ldr	r2, [r3, #24]
 80072a2:	8bfb      	ldrh	r3, [r7, #30]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d906      	bls.n	80072b6 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	8bfb      	ldrh	r3, [r7, #30]
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b2:	619a      	str	r2, [r3, #24]
 80072b4:	e002      	b.n	80072bc <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	2200      	movs	r2, #0
 80072ba:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f006 fb25 	bl	800d91a <HAL_PCD_DataInStageCallback>
 80072d0:	e018      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	695a      	ldr	r2, [r3, #20]
 80072d6:	8bfb      	ldrh	r3, [r7, #30]
 80072d8:	441a      	add	r2, r3
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	8bfb      	ldrh	r3, [r7, #30]
 80072e4:	441a      	add	r2, r3
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 ff9c 	bl	800a22e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80072f6:	e005      	b.n	8007304 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80072f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80072fa:	461a      	mov	r2, r3
 80072fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f917 	bl	8007532 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800730c:	b29b      	uxth	r3, r3
 800730e:	b21b      	sxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	f6ff ad20 	blt.w	8006d56 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3738      	adds	r7, #56	; 0x38
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4613      	mov	r3, r2
 800732c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d07c      	beq.n	8007432 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007340:	b29b      	uxth	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	4413      	add	r3, r2
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	4413      	add	r3, r2
 8007352:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800735c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	8b7b      	ldrh	r3, [r7, #26]
 8007364:	429a      	cmp	r2, r3
 8007366:	d306      	bcc.n	8007376 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	8b7b      	ldrh	r3, [r7, #26]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	619a      	str	r2, [r3, #24]
 8007374:	e002      	b.n	800737c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2200      	movs	r2, #0
 800737a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d123      	bne.n	80073cc <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	881b      	ldrh	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	833b      	strh	r3, [r7, #24]
 80073a0:	8b3b      	ldrh	r3, [r7, #24]
 80073a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073a6:	833b      	strh	r3, [r7, #24]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	461a      	mov	r2, r3
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	441a      	add	r2, r3
 80073b6:	8b3b      	ldrh	r3, [r7, #24]
 80073b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01f      	beq.n	8007416 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	881b      	ldrh	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f0:	82fb      	strh	r3, [r7, #22]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	441a      	add	r2, r3
 8007400:	8afb      	ldrh	r3, [r7, #22]
 8007402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800740a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800740e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007412:	b29b      	uxth	r3, r3
 8007414:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007416:	8b7b      	ldrh	r3, [r7, #26]
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 8085 	beq.w	8007528 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6818      	ldr	r0, [r3, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6959      	ldr	r1, [r3, #20]
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	891a      	ldrh	r2, [r3, #8]
 800742a:	8b7b      	ldrh	r3, [r7, #26]
 800742c:	f004 fb93 	bl	800bb56 <USB_ReadPMA>
 8007430:	e07a      	b.n	8007528 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800743a:	b29b      	uxth	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	6812      	ldr	r2, [r2, #0]
 800744a:	4413      	add	r3, r2
 800744c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007456:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	699a      	ldr	r2, [r3, #24]
 800745c:	8b7b      	ldrh	r3, [r7, #26]
 800745e:	429a      	cmp	r2, r3
 8007460:	d306      	bcc.n	8007470 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	8b7b      	ldrh	r3, [r7, #26]
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	619a      	str	r2, [r3, #24]
 800746e:	e002      	b.n	8007476 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2200      	movs	r2, #0
 8007474:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d123      	bne.n	80074c6 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	881b      	ldrh	r3, [r3, #0]
 800748e:	b29b      	uxth	r3, r3
 8007490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007498:	83fb      	strh	r3, [r7, #30]
 800749a:	8bfb      	ldrh	r3, [r7, #30]
 800749c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074a0:	83fb      	strh	r3, [r7, #30]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	441a      	add	r2, r3
 80074b0:	8bfb      	ldrh	r3, [r7, #30]
 80074b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80074c6:	88fb      	ldrh	r3, [r7, #6]
 80074c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d11f      	bne.n	8007510 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4413      	add	r3, r2
 80074de:	881b      	ldrh	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	83bb      	strh	r3, [r7, #28]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	461a      	mov	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	441a      	add	r2, r3
 80074fa:	8bbb      	ldrh	r3, [r7, #28]
 80074fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800750c:	b29b      	uxth	r3, r3
 800750e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007510:	8b7b      	ldrh	r3, [r7, #26]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d008      	beq.n	8007528 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6959      	ldr	r1, [r3, #20]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	895a      	ldrh	r2, [r3, #10]
 8007522:	8b7b      	ldrh	r3, [r7, #26]
 8007524:	f004 fb17 	bl	800bb56 <USB_ReadPMA>
    }
  }

  return count;
 8007528:	8b7b      	ldrh	r3, [r7, #26]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3720      	adds	r7, #32
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b0a2      	sub	sp, #136	; 0x88
 8007536:	af00      	add	r7, sp, #0
 8007538:	60f8      	str	r0, [r7, #12]
 800753a:	60b9      	str	r1, [r7, #8]
 800753c:	4613      	mov	r3, r2
 800753e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 81c5 	beq.w	80078d6 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	4413      	add	r3, r2
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	6812      	ldr	r2, [r2, #0]
 8007564:	4413      	add	r3, r2
 8007566:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007570:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	699a      	ldr	r2, [r3, #24]
 8007578:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800757c:	429a      	cmp	r2, r3
 800757e:	d907      	bls.n	8007590 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007588:	1ad2      	subs	r2, r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	619a      	str	r2, [r3, #24]
 800758e:	e002      	b.n	8007596 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2200      	movs	r2, #0
 8007594:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f040 80b9 	bne.w	8007712 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	785b      	ldrb	r3, [r3, #1]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d126      	bne.n	80075f6 <HAL_PCD_EP_DB_Transmit+0xc4>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	4413      	add	r3, r2
 80075be:	62bb      	str	r3, [r7, #40]	; 0x28
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	00da      	lsls	r2, r3, #3
 80075c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c8:	4413      	add	r3, r2
 80075ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
 80075d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075da:	b29a      	uxth	r2, r3
 80075dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075de:	801a      	strh	r2, [r3, #0]
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e01a      	b.n	800762c <HAL_PCD_EP_DB_Transmit+0xfa>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	785b      	ldrb	r3, [r3, #1]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d116      	bne.n	800762c <HAL_PCD_EP_DB_Transmit+0xfa>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	633b      	str	r3, [r7, #48]	; 0x30
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800760c:	b29b      	uxth	r3, r3
 800760e:	461a      	mov	r2, r3
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	4413      	add	r3, r2
 8007614:	633b      	str	r3, [r7, #48]	; 0x30
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	00da      	lsls	r2, r3, #3
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	4413      	add	r3, r2
 8007620:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007624:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007628:	2200      	movs	r2, #0
 800762a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d126      	bne.n	8007688 <HAL_PCD_EP_DB_Transmit+0x156>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	4413      	add	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	00da      	lsls	r2, r3, #3
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	4413      	add	r3, r2
 800765c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800766c:	b29a      	uxth	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	b29b      	uxth	r3, r3
 8007678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800767c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007680:	b29a      	uxth	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	801a      	strh	r2, [r3, #0]
 8007686:	e017      	b.n	80076b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	785b      	ldrb	r3, [r3, #1]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d113      	bne.n	80076b8 <HAL_PCD_EP_DB_Transmit+0x186>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007698:	b29b      	uxth	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	4413      	add	r3, r2
 80076a0:	623b      	str	r3, [r7, #32]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	00da      	lsls	r2, r3, #3
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	4413      	add	r3, r2
 80076ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076b0:	61fb      	str	r3, [r7, #28]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	2200      	movs	r2, #0
 80076b6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f006 f92b 	bl	800d91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80076c4:	88fb      	ldrh	r3, [r7, #6]
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 82d2 	beq.w	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ea:	827b      	strh	r3, [r7, #18]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	441a      	add	r2, r3
 80076fa:	8a7b      	ldrh	r3, [r7, #18]
 80076fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800770c:	b29b      	uxth	r3, r3
 800770e:	8013      	strh	r3, [r2, #0]
 8007710:	e2b0      	b.n	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d021      	beq.n	8007760 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	b29b      	uxth	r3, r3
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	461a      	mov	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	441a      	add	r2, r3
 8007748:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800774c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007754:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800775c:	b29b      	uxth	r3, r3
 800775e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007766:	2b01      	cmp	r3, #1
 8007768:	f040 8284 	bne.w	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007774:	441a      	add	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007782:	441a      	add	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	6a1a      	ldr	r2, [r3, #32]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	429a      	cmp	r2, r3
 8007792:	d309      	bcc.n	80077a8 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077a0:	1ad2      	subs	r2, r2, r3
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	621a      	str	r2, [r3, #32]
 80077a6:	e015      	b.n	80077d4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d107      	bne.n	80077c0 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 80077b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80077b4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80077be:	e009      	b.n	80077d4 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2200      	movs	r2, #0
 80077d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d155      	bne.n	8007888 <HAL_PCD_EP_DB_Transmit+0x356>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	4413      	add	r3, r2
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	00da      	lsls	r2, r3, #3
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007806:	2b00      	cmp	r3, #0
 8007808:	d112      	bne.n	8007830 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800780a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b29b      	uxth	r3, r3
 8007810:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007814:	b29a      	uxth	r2, r3
 8007816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29b      	uxth	r3, r3
 8007820:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007824:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007828:	b29a      	uxth	r2, r3
 800782a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782c:	801a      	strh	r2, [r3, #0]
 800782e:	e047      	b.n	80078c0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007832:	2b3e      	cmp	r3, #62	; 0x3e
 8007834:	d811      	bhi.n	800785a <HAL_PCD_EP_DB_Transmit+0x328>
 8007836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007838:	085b      	lsrs	r3, r3, #1
 800783a:	64bb      	str	r3, [r7, #72]	; 0x48
 800783c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <HAL_PCD_EP_DB_Transmit+0x31a>
 8007846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007848:	3301      	adds	r3, #1
 800784a:	64bb      	str	r3, [r7, #72]	; 0x48
 800784c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800784e:	b29b      	uxth	r3, r3
 8007850:	029b      	lsls	r3, r3, #10
 8007852:	b29a      	uxth	r2, r3
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	e032      	b.n	80078c0 <HAL_PCD_EP_DB_Transmit+0x38e>
 800785a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <HAL_PCD_EP_DB_Transmit+0x33e>
 800786a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786c:	3b01      	subs	r3, #1
 800786e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007872:	b29b      	uxth	r3, r3
 8007874:	029b      	lsls	r3, r3, #10
 8007876:	b29b      	uxth	r3, r3
 8007878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800787c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007880:	b29a      	uxth	r2, r3
 8007882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	e01b      	b.n	80078c0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	785b      	ldrb	r3, [r3, #1]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d117      	bne.n	80078c0 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	643b      	str	r3, [r7, #64]	; 0x40
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800789e:	b29b      	uxth	r3, r3
 80078a0:	461a      	mov	r2, r3
 80078a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078a4:	4413      	add	r3, r2
 80078a6:	643b      	str	r3, [r7, #64]	; 0x40
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	00da      	lsls	r2, r3, #3
 80078ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b0:	4413      	add	r3, r2
 80078b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6959      	ldr	r1, [r3, #20]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	891a      	ldrh	r2, [r3, #8]
 80078cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f004 f8ff 	bl	800bad2 <USB_WritePMA>
 80078d4:	e1ce      	b.n	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	4413      	add	r3, r2
 80078f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007906:	429a      	cmp	r2, r3
 8007908:	d307      	bcc.n	800791a <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007912:	1ad2      	subs	r2, r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	619a      	str	r2, [r3, #24]
 8007918:	e002      	b.n	8007920 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2200      	movs	r2, #0
 800791e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 80c4 	bne.w	8007ab2 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d126      	bne.n	8007980 <HAL_PCD_EP_DB_Transmit+0x44e>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007946:	4413      	add	r3, r2
 8007948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	00da      	lsls	r2, r3, #3
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	4413      	add	r3, r2
 8007954:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007958:	66bb      	str	r3, [r7, #104]	; 0x68
 800795a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007964:	b29a      	uxth	r2, r3
 8007966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800797c:	801a      	strh	r2, [r3, #0]
 800797e:	e01a      	b.n	80079b6 <HAL_PCD_EP_DB_Transmit+0x484>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	785b      	ldrb	r3, [r3, #1]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d116      	bne.n	80079b6 <HAL_PCD_EP_DB_Transmit+0x484>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	677b      	str	r3, [r7, #116]	; 0x74
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007996:	b29b      	uxth	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800799c:	4413      	add	r3, r2
 800799e:	677b      	str	r3, [r7, #116]	; 0x74
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	00da      	lsls	r2, r3, #3
 80079a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a8:	4413      	add	r3, r2
 80079aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ae:	673b      	str	r3, [r7, #112]	; 0x70
 80079b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079b2:	2200      	movs	r2, #0
 80079b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d12f      	bne.n	8007a24 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079dc:	4413      	add	r3, r2
 80079de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	00da      	lsls	r2, r3, #3
 80079e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079ec:	4413      	add	r3, r2
 80079ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80079f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a08:	801a      	strh	r2, [r3, #0]
 8007a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	e017      	b.n	8007a54 <HAL_PCD_EP_DB_Transmit+0x522>
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	785b      	ldrb	r3, [r3, #1]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d113      	bne.n	8007a54 <HAL_PCD_EP_DB_Transmit+0x522>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3a:	4413      	add	r3, r2
 8007a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	00da      	lsls	r2, r3, #3
 8007a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a46:	4413      	add	r3, r2
 8007a48:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007a4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007a50:	2200      	movs	r2, #0
 8007a52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f005 ff5d 	bl	800d91a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a60:	88fb      	ldrh	r3, [r7, #6]
 8007a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f040 8104 	bne.w	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	441a      	add	r2, r3
 8007a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	8013      	strh	r3, [r2, #0]
 8007ab0:	e0e0      	b.n	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007ab2:	88fb      	ldrh	r3, [r7, #6]
 8007ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d121      	bne.n	8007b00 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	441a      	add	r2, r3
 8007ae8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007af4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	f040 80b4 	bne.w	8007c74 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b14:	441a      	add	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	69da      	ldr	r2, [r3, #28]
 8007b1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b22:	441a      	add	r2, r3
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6a1a      	ldr	r2, [r3, #32]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d309      	bcc.n	8007b48 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6a1a      	ldr	r2, [r3, #32]
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b40:	1ad2      	subs	r2, r2, r3
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	621a      	str	r2, [r3, #32]
 8007b46:	e015      	b.n	8007b74 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8007b50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007b5e:	e009      	b.n	8007b74 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	667b      	str	r3, [r7, #100]	; 0x64
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	785b      	ldrb	r3, [r3, #1]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d155      	bne.n	8007c2e <HAL_PCD_EP_DB_Transmit+0x6fc>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b96:	4413      	add	r3, r2
 8007b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	00da      	lsls	r2, r3, #3
 8007ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d112      	bne.n	8007bd6 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8007bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bba:	b29a      	uxth	r2, r3
 8007bbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bbe:	801a      	strh	r2, [r3, #0]
 8007bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc2:	881b      	ldrh	r3, [r3, #0]
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	e044      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8007bda:	d811      	bhi.n	8007c00 <HAL_PCD_EP_DB_Transmit+0x6ce>
 8007bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	657b      	str	r3, [r7, #84]	; 0x54
 8007be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_PCD_EP_DB_Transmit+0x6c0>
 8007bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bee:	3301      	adds	r3, #1
 8007bf0:	657b      	str	r3, [r7, #84]	; 0x54
 8007bf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	029b      	lsls	r3, r3, #10
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bfc:	801a      	strh	r2, [r3, #0]
 8007bfe:	e02f      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c02:	095b      	lsrs	r3, r3, #5
 8007c04:	657b      	str	r3, [r7, #84]	; 0x54
 8007c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c08:	f003 031f 	and.w	r3, r3, #31
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d102      	bne.n	8007c16 <HAL_PCD_EP_DB_Transmit+0x6e4>
 8007c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c12:	3b01      	subs	r3, #1
 8007c14:	657b      	str	r3, [r7, #84]	; 0x54
 8007c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	029b      	lsls	r3, r3, #10
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	e018      	b.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d114      	bne.n	8007c60 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c44:	4413      	add	r3, r2
 8007c46:	667b      	str	r3, [r7, #100]	; 0x64
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	00da      	lsls	r2, r3, #3
 8007c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c56:	663b      	str	r3, [r7, #96]	; 0x60
 8007c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	6959      	ldr	r1, [r3, #20]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	895a      	ldrh	r2, [r3, #10]
 8007c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f003 ff2f 	bl	800bad2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	881b      	ldrh	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8e:	823b      	strh	r3, [r7, #16]
 8007c90:	8a3b      	ldrh	r3, [r7, #16]
 8007c92:	f083 0310 	eor.w	r3, r3, #16
 8007c96:	823b      	strh	r3, [r7, #16]
 8007c98:	8a3b      	ldrh	r3, [r7, #16]
 8007c9a:	f083 0320 	eor.w	r3, r3, #32
 8007c9e:	823b      	strh	r3, [r7, #16]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	441a      	add	r2, r3
 8007cae:	8a3b      	ldrh	r3, [r7, #16]
 8007cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3788      	adds	r7, #136	; 0x88
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b087      	sub	sp, #28
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	817b      	strh	r3, [r7, #10]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007ce0:	897b      	ldrh	r3, [r7, #10]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d00b      	beq.n	8007d04 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cec:	897b      	ldrh	r3, [r7, #10]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	00db      	lsls	r3, r3, #3
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]
 8007d02:	e009      	b.n	8007d18 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d04:	897a      	ldrh	r2, [r7, #10]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007d18:	893b      	ldrh	r3, [r7, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d107      	bne.n	8007d2e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2200      	movs	r2, #0
 8007d22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	80da      	strh	r2, [r3, #6]
 8007d2c:	e00b      	b.n	8007d46 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	2201      	movs	r2, #1
 8007d32:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	b29a      	uxth	r2, r3
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	371c      	adds	r7, #28
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f043 0302 	orr.w	r3, r3, #2
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40007000 	.word	0x40007000

08007dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dd2:	d130      	bne.n	8007e36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ddc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007de0:	d038      	beq.n	8007e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007de2:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007dea:	4a1e      	ldr	r2, [pc, #120]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007dec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007df0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2232      	movs	r2, #50	; 0x32
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	4a1b      	ldr	r2, [pc, #108]	; (8007e6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8007e02:	0c9b      	lsrs	r3, r3, #18
 8007e04:	3301      	adds	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e08:	e002      	b.n	8007e10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e10:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1c:	d102      	bne.n	8007e24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1f2      	bne.n	8007e0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e30:	d110      	bne.n	8007e54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e00f      	b.n	8007e56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e42:	d007      	beq.n	8007e54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e44:	4b07      	ldr	r3, [pc, #28]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e4c:	4a05      	ldr	r2, [pc, #20]	; (8007e64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3714      	adds	r7, #20
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	40007000 	.word	0x40007000
 8007e68:	20000000 	.word	0x20000000
 8007e6c:	431bde83 	.word	0x431bde83

08007e70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007e74:	4b05      	ldr	r3, [pc, #20]	; (8007e8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4a04      	ldr	r2, [pc, #16]	; (8007e8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e7e:	6053      	str	r3, [r2, #4]
}
 8007e80:	bf00      	nop
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40007000 	.word	0x40007000

08007e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08a      	sub	sp, #40	; 0x28
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d102      	bne.n	8007ea4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f000 bc56 	b.w	8008750 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ea4:	4ba1      	ldr	r3, [pc, #644]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 030c 	and.w	r3, r3, #12
 8007eac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eae:	4b9f      	ldr	r3, [pc, #636]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f003 0303 	and.w	r3, r3, #3
 8007eb6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80e6 	beq.w	8008092 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <HAL_RCC_OscConfig+0x4c>
 8007ecc:	6a3b      	ldr	r3, [r7, #32]
 8007ece:	2b0c      	cmp	r3, #12
 8007ed0:	f040 808d 	bne.w	8007fee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	f040 8089 	bne.w	8007fee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007edc:	4b93      	ldr	r3, [pc, #588]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0302 	and.w	r3, r3, #2
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d006      	beq.n	8007ef6 <HAL_RCC_OscConfig+0x66>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	f000 bc2d 	b.w	8008750 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efa:	4b8c      	ldr	r3, [pc, #560]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0308 	and.w	r3, r3, #8
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <HAL_RCC_OscConfig+0x80>
 8007f06:	4b89      	ldr	r3, [pc, #548]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f0e:	e005      	b.n	8007f1c <HAL_RCC_OscConfig+0x8c>
 8007f10:	4b86      	ldr	r3, [pc, #536]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f16:	091b      	lsrs	r3, r3, #4
 8007f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d224      	bcs.n	8007f6a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fd93 	bl	8008a50 <RCC_SetFlashLatencyFromMSIRange>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	f000 bc0d 	b.w	8008750 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f36:	4b7d      	ldr	r3, [pc, #500]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a7c      	ldr	r2, [pc, #496]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f3c:	f043 0308 	orr.w	r3, r3, #8
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	4b7a      	ldr	r3, [pc, #488]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	4977      	ldr	r1, [pc, #476]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f54:	4b75      	ldr	r3, [pc, #468]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	021b      	lsls	r3, r3, #8
 8007f62:	4972      	ldr	r1, [pc, #456]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	604b      	str	r3, [r1, #4]
 8007f68:	e025      	b.n	8007fb6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f6a:	4b70      	ldr	r3, [pc, #448]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6f      	ldr	r2, [pc, #444]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f70:	f043 0308 	orr.w	r3, r3, #8
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4b6d      	ldr	r3, [pc, #436]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	496a      	ldr	r1, [pc, #424]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f84:	4313      	orrs	r3, r2
 8007f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f88:	4b68      	ldr	r3, [pc, #416]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	4965      	ldr	r1, [pc, #404]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f000 fd52 	bl	8008a50 <RCC_SetFlashLatencyFromMSIRange>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e3cc      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007fb6:	f000 fcb3 	bl	8008920 <HAL_RCC_GetSysClockFreq>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	4b5b      	ldr	r3, [pc, #364]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	091b      	lsrs	r3, r3, #4
 8007fc2:	f003 030f 	and.w	r3, r3, #15
 8007fc6:	495a      	ldr	r1, [pc, #360]	; (8008130 <HAL_RCC_OscConfig+0x2a0>)
 8007fc8:	5ccb      	ldrb	r3, [r1, r3]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd2:	4a58      	ldr	r2, [pc, #352]	; (8008134 <HAL_RCC_OscConfig+0x2a4>)
 8007fd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007fd6:	4b58      	ldr	r3, [pc, #352]	; (8008138 <HAL_RCC_OscConfig+0x2a8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc ff7a 	bl	8004ed4 <HAL_InitTick>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d052      	beq.n	8008090 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	e3b0      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d032      	beq.n	800805c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ff6:	4b4d      	ldr	r3, [pc, #308]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a4c      	ldr	r2, [pc, #304]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008002:	f7fc ffb7 	bl	8004f74 <HAL_GetTick>
 8008006:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008008:	e008      	b.n	800801c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800800a:	f7fc ffb3 	bl	8004f74 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b02      	cmp	r3, #2
 8008016:	d901      	bls.n	800801c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e399      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800801c:	4b43      	ldr	r3, [pc, #268]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d0f0      	beq.n	800800a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008028:	4b40      	ldr	r3, [pc, #256]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a3f      	ldr	r2, [pc, #252]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800802e:	f043 0308 	orr.w	r3, r3, #8
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	4b3d      	ldr	r3, [pc, #244]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	493a      	ldr	r1, [pc, #232]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008046:	4b39      	ldr	r3, [pc, #228]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	4935      	ldr	r1, [pc, #212]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008056:	4313      	orrs	r3, r2
 8008058:	604b      	str	r3, [r1, #4]
 800805a:	e01a      	b.n	8008092 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800805c:	4b33      	ldr	r3, [pc, #204]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a32      	ldr	r2, [pc, #200]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008068:	f7fc ff84 	bl	8004f74 <HAL_GetTick>
 800806c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008070:	f7fc ff80 	bl	8004f74 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e366      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008082:	4b2a      	ldr	r3, [pc, #168]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0302 	and.w	r3, r3, #2
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f0      	bne.n	8008070 <HAL_RCC_OscConfig+0x1e0>
 800808e:	e000      	b.n	8008092 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008090:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d073      	beq.n	8008186 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d005      	beq.n	80080b0 <HAL_RCC_OscConfig+0x220>
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b0c      	cmp	r3, #12
 80080a8:	d10e      	bne.n	80080c8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d10b      	bne.n	80080c8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b0:	4b1e      	ldr	r3, [pc, #120]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d063      	beq.n	8008184 <HAL_RCC_OscConfig+0x2f4>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d15f      	bne.n	8008184 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e343      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d0:	d106      	bne.n	80080e0 <HAL_RCC_OscConfig+0x250>
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a15      	ldr	r2, [pc, #84]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080dc:	6013      	str	r3, [r2, #0]
 80080de:	e01d      	b.n	800811c <HAL_RCC_OscConfig+0x28c>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80080e8:	d10c      	bne.n	8008104 <HAL_RCC_OscConfig+0x274>
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a0f      	ldr	r2, [pc, #60]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080f4:	6013      	str	r3, [r2, #0]
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a0c      	ldr	r2, [pc, #48]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 80080fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	e00b      	b.n	800811c <HAL_RCC_OscConfig+0x28c>
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a08      	ldr	r2, [pc, #32]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 800810a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800810e:	6013      	str	r3, [r2, #0]
 8008110:	4b06      	ldr	r3, [pc, #24]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a05      	ldr	r2, [pc, #20]	; (800812c <HAL_RCC_OscConfig+0x29c>)
 8008116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800811a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d01b      	beq.n	800815c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008124:	f7fc ff26 	bl	8004f74 <HAL_GetTick>
 8008128:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800812a:	e010      	b.n	800814e <HAL_RCC_OscConfig+0x2be>
 800812c:	40021000 	.word	0x40021000
 8008130:	0800e270 	.word	0x0800e270
 8008134:	20000000 	.word	0x20000000
 8008138:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800813c:	f7fc ff1a 	bl	8004f74 <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b64      	cmp	r3, #100	; 0x64
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e300      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800814e:	4ba0      	ldr	r3, [pc, #640]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0f0      	beq.n	800813c <HAL_RCC_OscConfig+0x2ac>
 800815a:	e014      	b.n	8008186 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc ff0a 	bl	8004f74 <HAL_GetTick>
 8008160:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008164:	f7fc ff06 	bl	8004f74 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b64      	cmp	r3, #100	; 0x64
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e2ec      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008176:	4b96      	ldr	r3, [pc, #600]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x2d4>
 8008182:	e000      	b.n	8008186 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d060      	beq.n	8008254 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	2b04      	cmp	r3, #4
 8008196:	d005      	beq.n	80081a4 <HAL_RCC_OscConfig+0x314>
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	2b0c      	cmp	r3, #12
 800819c:	d119      	bne.n	80081d2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d116      	bne.n	80081d2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a4:	4b8a      	ldr	r3, [pc, #552]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d005      	beq.n	80081bc <HAL_RCC_OscConfig+0x32c>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e2c9      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081bc:	4b84      	ldr	r3, [pc, #528]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	061b      	lsls	r3, r3, #24
 80081ca:	4981      	ldr	r1, [pc, #516]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081d0:	e040      	b.n	8008254 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d023      	beq.n	8008222 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081da:	4b7d      	ldr	r3, [pc, #500]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a7c      	ldr	r2, [pc, #496]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e6:	f7fc fec5 	bl	8004f74 <HAL_GetTick>
 80081ea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ee:	f7fc fec1 	bl	8004f74 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e2a7      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008200:	4b73      	ldr	r3, [pc, #460]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820c:	4b70      	ldr	r3, [pc, #448]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	061b      	lsls	r3, r3, #24
 800821a:	496d      	ldr	r1, [pc, #436]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800821c:	4313      	orrs	r3, r2
 800821e:	604b      	str	r3, [r1, #4]
 8008220:	e018      	b.n	8008254 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008222:	4b6b      	ldr	r3, [pc, #428]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a6a      	ldr	r2, [pc, #424]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800822c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800822e:	f7fc fea1 	bl	8004f74 <HAL_GetTick>
 8008232:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008234:	e008      	b.n	8008248 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008236:	f7fc fe9d 	bl	8004f74 <HAL_GetTick>
 800823a:	4602      	mov	r2, r0
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	1ad3      	subs	r3, r2, r3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d901      	bls.n	8008248 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8008244:	2303      	movs	r3, #3
 8008246:	e283      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008248:	4b61      	ldr	r3, [pc, #388]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f0      	bne.n	8008236 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b00      	cmp	r3, #0
 800825e:	d07f      	beq.n	8008360 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	695b      	ldr	r3, [r3, #20]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d05f      	beq.n	8008328 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8008268:	4b59      	ldr	r3, [pc, #356]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800826a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800826e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699a      	ldr	r2, [r3, #24]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f003 0310 	and.w	r3, r3, #16
 800827a:	429a      	cmp	r2, r3
 800827c:	d037      	beq.n	80082ee <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f003 0302 	and.w	r3, r3, #2
 8008284:	2b00      	cmp	r3, #0
 8008286:	d006      	beq.n	8008296 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e25c      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01b      	beq.n	80082d8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80082a0:	4b4b      	ldr	r3, [pc, #300]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082a6:	4a4a      	ldr	r2, [pc, #296]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082b0:	f7fc fe60 	bl	8004f74 <HAL_GetTick>
 80082b4:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082b6:	e008      	b.n	80082ca <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b8:	f7fc fe5c 	bl	8004f74 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	2b11      	cmp	r3, #17
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e242      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80082ca:	4b41      	ldr	r3, [pc, #260]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1ef      	bne.n	80082b8 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80082d8:	4b3d      	ldr	r3, [pc, #244]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082de:	f023 0210 	bic.w	r2, r3, #16
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	493a      	ldr	r1, [pc, #232]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082ee:	4b38      	ldr	r3, [pc, #224]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082f4:	4a36      	ldr	r2, [pc, #216]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 80082f6:	f043 0301 	orr.w	r3, r3, #1
 80082fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082fe:	f7fc fe39 	bl	8004f74 <HAL_GetTick>
 8008302:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008304:	e008      	b.n	8008318 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008306:	f7fc fe35 	bl	8004f74 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b11      	cmp	r3, #17
 8008312:	d901      	bls.n	8008318 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e21b      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008318:	4b2d      	ldr	r3, [pc, #180]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800831a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0ef      	beq.n	8008306 <HAL_RCC_OscConfig+0x476>
 8008326:	e01b      	b.n	8008360 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008328:	4b29      	ldr	r3, [pc, #164]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832e:	4a28      	ldr	r2, [pc, #160]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008330:	f023 0301 	bic.w	r3, r3, #1
 8008334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fc fe1c 	bl	8004f74 <HAL_GetTick>
 800833c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800833e:	e008      	b.n	8008352 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008340:	f7fc fe18 	bl	8004f74 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b11      	cmp	r3, #17
 800834c:	d901      	bls.n	8008352 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e1fe      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008352:	4b1f      	ldr	r3, [pc, #124]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1ef      	bne.n	8008340 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80c1 	beq.w	80084f0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800836e:	2300      	movs	r3, #0
 8008370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10e      	bne.n	800839e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008380:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008384:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 8008386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838a:	6593      	str	r3, [r2, #88]	; 0x58
 800838c:	4b10      	ldr	r3, [pc, #64]	; (80083d0 <HAL_RCC_OscConfig+0x540>)
 800838e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <HAL_RCC_OscConfig+0x544>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d11c      	bne.n	80083e4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083aa:	4b0a      	ldr	r3, [pc, #40]	; (80083d4 <HAL_RCC_OscConfig+0x544>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <HAL_RCC_OscConfig+0x544>)
 80083b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083b6:	f7fc fddd 	bl	8004f74 <HAL_GetTick>
 80083ba:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083bc:	e00c      	b.n	80083d8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083be:	f7fc fdd9 	bl	8004f74 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d905      	bls.n	80083d8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e1bf      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
 80083d0:	40021000 	.word	0x40021000
 80083d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083d8:	4bb1      	ldr	r3, [pc, #708]	; (80086a0 <HAL_RCC_OscConfig+0x810>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0ec      	beq.n	80083be <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d02c      	beq.n	800844a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80083f0:	4bac      	ldr	r3, [pc, #688]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	49a8      	ldr	r1, [pc, #672]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008404:	4313      	orrs	r3, r2
 8008406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d010      	beq.n	8008438 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008416:	4ba3      	ldr	r3, [pc, #652]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841c:	4aa1      	ldr	r2, [pc, #644]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800841e:	f043 0304 	orr.w	r3, r3, #4
 8008422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008426:	4b9f      	ldr	r3, [pc, #636]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842c:	4a9d      	ldr	r2, [pc, #628]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008436:	e018      	b.n	800846a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008438:	4b9a      	ldr	r3, [pc, #616]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800843a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843e:	4a99      	ldr	r2, [pc, #612]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008440:	f043 0301 	orr.w	r3, r3, #1
 8008444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008448:	e00f      	b.n	800846a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800844a:	4b96      	ldr	r3, [pc, #600]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800844c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008450:	4a94      	ldr	r2, [pc, #592]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008452:	f023 0301 	bic.w	r3, r3, #1
 8008456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800845a:	4b92      	ldr	r3, [pc, #584]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800845c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008460:	4a90      	ldr	r2, [pc, #576]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008462:	f023 0304 	bic.w	r3, r3, #4
 8008466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d016      	beq.n	80084a0 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008472:	f7fc fd7f 	bl	8004f74 <HAL_GetTick>
 8008476:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008478:	e00a      	b.n	8008490 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800847a:	f7fc fd7b 	bl	8004f74 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	f241 3288 	movw	r2, #5000	; 0x1388
 8008488:	4293      	cmp	r3, r2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e15f      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008490:	4b84      	ldr	r3, [pc, #528]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0ed      	beq.n	800847a <HAL_RCC_OscConfig+0x5ea>
 800849e:	e01d      	b.n	80084dc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084a0:	f7fc fd68 	bl	8004f74 <HAL_GetTick>
 80084a4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084a6:	e00a      	b.n	80084be <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a8:	f7fc fd64 	bl	8004f74 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e148      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80084be:	4b79      	ldr	r3, [pc, #484]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80084c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1ed      	bne.n	80084a8 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80084cc:	4b75      	ldr	r3, [pc, #468]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d2:	4a74      	ldr	r2, [pc, #464]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80084d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d105      	bne.n	80084f0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084e4:	4b6f      	ldr	r3, [pc, #444]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	4a6e      	ldr	r2, [pc, #440]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80084ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0320 	and.w	r3, r3, #32
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d03c      	beq.n	8008576 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	2b00      	cmp	r3, #0
 8008502:	d01c      	beq.n	800853e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008504:	4b67      	ldr	r3, [pc, #412]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800850a:	4a66      	ldr	r2, [pc, #408]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008514:	f7fc fd2e 	bl	8004f74 <HAL_GetTick>
 8008518:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800851a:	e008      	b.n	800852e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800851c:	f7fc fd2a 	bl	8004f74 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e110      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800852e:	4b5d      	ldr	r3, [pc, #372]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008534:	f003 0302 	and.w	r3, r3, #2
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0ef      	beq.n	800851c <HAL_RCC_OscConfig+0x68c>
 800853c:	e01b      	b.n	8008576 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800853e:	4b59      	ldr	r3, [pc, #356]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008540:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008544:	4a57      	ldr	r2, [pc, #348]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854e:	f7fc fd11 	bl	8004f74 <HAL_GetTick>
 8008552:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008556:	f7fc fd0d 	bl	8004f74 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e0f3      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008568:	4b4e      	ldr	r3, [pc, #312]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800856a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1ef      	bne.n	8008556 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 80e7 	beq.w	800874e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	2b02      	cmp	r3, #2
 8008586:	f040 80b7 	bne.w	80086f8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800858a:	4b46      	ldr	r3, [pc, #280]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	f003 0203 	and.w	r2, r3, #3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	429a      	cmp	r2, r3
 800859c:	d124      	bne.n	80085e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	3b01      	subs	r3, #1
 80085aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d11b      	bne.n	80085e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80085bc:	429a      	cmp	r2, r3
 80085be:	d113      	bne.n	80085e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	085b      	lsrs	r3, r3, #1
 80085cc:	3b01      	subs	r3, #1
 80085ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d109      	bne.n	80085e8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	3b01      	subs	r3, #1
 80085e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d061      	beq.n	80086ac <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	2b0c      	cmp	r3, #12
 80085ec:	d056      	beq.n	800869c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80085ee:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 80085f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80085fa:	f7fc fcbb 	bl	8004f74 <HAL_GetTick>
 80085fe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008600:	e008      	b.n	8008614 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008602:	f7fc fcb7 	bl	8004f74 <HAL_GetTick>
 8008606:	4602      	mov	r2, r0
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	1ad3      	subs	r3, r2, r3
 800860c:	2b02      	cmp	r3, #2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e09d      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008614:	4b23      	ldr	r3, [pc, #140]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1f0      	bne.n	8008602 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008620:	4b20      	ldr	r3, [pc, #128]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <HAL_RCC_OscConfig+0x818>)
 8008626:	4013      	ands	r3, r2
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008630:	3a01      	subs	r2, #1
 8008632:	0112      	lsls	r2, r2, #4
 8008634:	4311      	orrs	r1, r2
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800863a:	0212      	lsls	r2, r2, #8
 800863c:	4311      	orrs	r1, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008642:	0852      	lsrs	r2, r2, #1
 8008644:	3a01      	subs	r2, #1
 8008646:	0552      	lsls	r2, r2, #21
 8008648:	4311      	orrs	r1, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800864e:	0852      	lsrs	r2, r2, #1
 8008650:	3a01      	subs	r2, #1
 8008652:	0652      	lsls	r2, r2, #25
 8008654:	430a      	orrs	r2, r1
 8008656:	4913      	ldr	r1, [pc, #76]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008658:	4313      	orrs	r3, r2
 800865a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800865c:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008666:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	4a0d      	ldr	r2, [pc, #52]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 800866e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008672:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008674:	f7fc fc7e 	bl	8004f74 <HAL_GetTick>
 8008678:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800867c:	f7fc fc7a 	bl	8004f74 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e060      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800868e:	4b05      	ldr	r3, [pc, #20]	; (80086a4 <HAL_RCC_OscConfig+0x814>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f0      	beq.n	800867c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800869a:	e058      	b.n	800874e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e057      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
 80086a0:	40007000 	.word	0x40007000
 80086a4:	40021000 	.word	0x40021000
 80086a8:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086ac:	4b2a      	ldr	r3, [pc, #168]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d14a      	bne.n	800874e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80086b8:	4b27      	ldr	r3, [pc, #156]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a26      	ldr	r2, [pc, #152]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80086c4:	4b24      	ldr	r3, [pc, #144]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	4a23      	ldr	r2, [pc, #140]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086d0:	f7fc fc50 	bl	8004f74 <HAL_GetTick>
 80086d4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086d8:	f7fc fc4c 	bl	8004f74 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e032      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0f0      	beq.n	80086d8 <HAL_RCC_OscConfig+0x848>
 80086f6:	e02a      	b.n	800874e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	2b0c      	cmp	r3, #12
 80086fc:	d025      	beq.n	800874a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086fe:	4b16      	ldr	r3, [pc, #88]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a15      	ldr	r2, [pc, #84]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 8008704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008708:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800870a:	4b13      	ldr	r3, [pc, #76]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	4a12      	ldr	r2, [pc, #72]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 8008710:	f023 0303 	bic.w	r3, r3, #3
 8008714:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	4a0f      	ldr	r2, [pc, #60]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 800871c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008720:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008722:	f7fc fc27 	bl	8004f74 <HAL_GetTick>
 8008726:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008728:	e008      	b.n	800873c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800872a:	f7fc fc23 	bl	8004f74 <HAL_GetTick>
 800872e:	4602      	mov	r2, r0
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	2b02      	cmp	r3, #2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e009      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <HAL_RCC_OscConfig+0x8c8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f0      	bne.n	800872a <HAL_RCC_OscConfig+0x89a>
 8008748:	e001      	b.n	800874e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40021000 	.word	0x40021000

0800875c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	e0c8      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008770:	4b66      	ldr	r3, [pc, #408]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0307 	and.w	r3, r3, #7
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d910      	bls.n	80087a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800877e:	4b63      	ldr	r3, [pc, #396]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f023 0207 	bic.w	r2, r3, #7
 8008786:	4961      	ldr	r1, [pc, #388]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	4313      	orrs	r3, r2
 800878c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800878e:	4b5f      	ldr	r3, [pc, #380]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	429a      	cmp	r2, r3
 800879a:	d001      	beq.n	80087a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e0b0      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d04c      	beq.n	8008846 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	2b03      	cmp	r3, #3
 80087b2:	d107      	bne.n	80087c4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087b4:	4b56      	ldr	r3, [pc, #344]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d121      	bne.n	8008804 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e09e      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d107      	bne.n	80087dc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087cc:	4b50      	ldr	r3, [pc, #320]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d115      	bne.n	8008804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e092      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087e4:	4b4a      	ldr	r3, [pc, #296]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d109      	bne.n	8008804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e086      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80087f4:	4b46      	ldr	r3, [pc, #280]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d101      	bne.n	8008804 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e07e      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008804:	4b42      	ldr	r3, [pc, #264]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f023 0203 	bic.w	r2, r3, #3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	493f      	ldr	r1, [pc, #252]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 8008812:	4313      	orrs	r3, r2
 8008814:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008816:	f7fc fbad 	bl	8004f74 <HAL_GetTick>
 800881a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800881c:	e00a      	b.n	8008834 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800881e:	f7fc fba9 	bl	8004f74 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f241 3288 	movw	r2, #5000	; 0x1388
 800882c:	4293      	cmp	r3, r2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e066      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 020c 	and.w	r2, r3, #12
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	429a      	cmp	r2, r3
 8008844:	d1eb      	bne.n	800881e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b00      	cmp	r3, #0
 8008850:	d008      	beq.n	8008864 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008852:	4b2f      	ldr	r3, [pc, #188]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	492c      	ldr	r1, [pc, #176]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 8008860:	4313      	orrs	r3, r2
 8008862:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008864:	4b29      	ldr	r3, [pc, #164]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d210      	bcs.n	8008894 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008872:	4b26      	ldr	r3, [pc, #152]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f023 0207 	bic.w	r2, r3, #7
 800887a:	4924      	ldr	r1, [pc, #144]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	4313      	orrs	r3, r2
 8008880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <HAL_RCC_ClockConfig+0x1b0>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	429a      	cmp	r2, r3
 800888e:	d001      	beq.n	8008894 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e036      	b.n	8008902 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0304 	and.w	r3, r3, #4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d008      	beq.n	80088b2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088a0:	4b1b      	ldr	r3, [pc, #108]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	4918      	ldr	r1, [pc, #96]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0308 	and.w	r3, r3, #8
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088be:	4b14      	ldr	r3, [pc, #80]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	00db      	lsls	r3, r3, #3
 80088cc:	4910      	ldr	r1, [pc, #64]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80088d2:	f000 f825 	bl	8008920 <HAL_RCC_GetSysClockFreq>
 80088d6:	4602      	mov	r2, r0
 80088d8:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <HAL_RCC_ClockConfig+0x1b4>)
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	091b      	lsrs	r3, r3, #4
 80088de:	f003 030f 	and.w	r3, r3, #15
 80088e2:	490c      	ldr	r1, [pc, #48]	; (8008914 <HAL_RCC_ClockConfig+0x1b8>)
 80088e4:	5ccb      	ldrb	r3, [r1, r3]
 80088e6:	f003 031f 	and.w	r3, r3, #31
 80088ea:	fa22 f303 	lsr.w	r3, r2, r3
 80088ee:	4a0a      	ldr	r2, [pc, #40]	; (8008918 <HAL_RCC_ClockConfig+0x1bc>)
 80088f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <HAL_RCC_ClockConfig+0x1c0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fc faec 	bl	8004ed4 <HAL_InitTick>
 80088fc:	4603      	mov	r3, r0
 80088fe:	72fb      	strb	r3, [r7, #11]

  return status;
 8008900:	7afb      	ldrb	r3, [r7, #11]
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40022000 	.word	0x40022000
 8008910:	40021000 	.word	0x40021000
 8008914:	0800e270 	.word	0x0800e270
 8008918:	20000000 	.word	0x20000000
 800891c:	20000004 	.word	0x20000004

08008920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	; 0x24
 8008924:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	2300      	movs	r3, #0
 800892c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800892e:	4b3e      	ldr	r3, [pc, #248]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 030c 	and.w	r3, r3, #12
 8008936:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008938:	4b3b      	ldr	r3, [pc, #236]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f003 0303 	and.w	r3, r3, #3
 8008940:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d005      	beq.n	8008954 <HAL_RCC_GetSysClockFreq+0x34>
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	2b0c      	cmp	r3, #12
 800894c:	d121      	bne.n	8008992 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d11e      	bne.n	8008992 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008954:	4b34      	ldr	r3, [pc, #208]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0308 	and.w	r3, r3, #8
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008960:	4b31      	ldr	r3, [pc, #196]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008966:	0a1b      	lsrs	r3, r3, #8
 8008968:	f003 030f 	and.w	r3, r3, #15
 800896c:	61fb      	str	r3, [r7, #28]
 800896e:	e005      	b.n	800897c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008970:	4b2d      	ldr	r3, [pc, #180]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	f003 030f 	and.w	r3, r3, #15
 800897a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800897c:	4a2b      	ldr	r2, [pc, #172]	; (8008a2c <HAL_RCC_GetSysClockFreq+0x10c>)
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008984:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10d      	bne.n	80089a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008990:	e00a      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b04      	cmp	r3, #4
 8008996:	d102      	bne.n	800899e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008998:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x110>)
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e004      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	2b08      	cmp	r3, #8
 80089a2:	d101      	bne.n	80089a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80089a4:	4b23      	ldr	r3, [pc, #140]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80089a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	2b0c      	cmp	r3, #12
 80089ac:	d134      	bne.n	8008a18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80089ae:	4b1e      	ldr	r3, [pc, #120]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d003      	beq.n	80089c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b03      	cmp	r3, #3
 80089c2:	d003      	beq.n	80089cc <HAL_RCC_GetSysClockFreq+0xac>
 80089c4:	e005      	b.n	80089d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80089c6:	4b1a      	ldr	r3, [pc, #104]	; (8008a30 <HAL_RCC_GetSysClockFreq+0x110>)
 80089c8:	617b      	str	r3, [r7, #20]
      break;
 80089ca:	e005      	b.n	80089d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80089cc:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <HAL_RCC_GetSysClockFreq+0x114>)
 80089ce:	617b      	str	r3, [r7, #20]
      break;
 80089d0:	e002      	b.n	80089d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	617b      	str	r3, [r7, #20]
      break;
 80089d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80089d8:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	091b      	lsrs	r3, r3, #4
 80089de:	f003 0307 	and.w	r3, r3, #7
 80089e2:	3301      	adds	r3, #1
 80089e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80089e6:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	0a1b      	lsrs	r3, r3, #8
 80089ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	fb02 f203 	mul.w	r2, r2, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	0e5b      	lsrs	r3, r3, #25
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	3301      	adds	r3, #1
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008a18:	69bb      	ldr	r3, [r7, #24]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3724      	adds	r7, #36	; 0x24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40021000 	.word	0x40021000
 8008a2c:	0800e280 	.word	0x0800e280
 8008a30:	00f42400 	.word	0x00f42400
 8008a34:	007a1200 	.word	0x007a1200

08008a38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008a3c:	4b03      	ldr	r3, [pc, #12]	; (8008a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	20000000 	.word	0x20000000

08008a50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008a5c:	4b2a      	ldr	r3, [pc, #168]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008a68:	f7ff f99e 	bl	8007da8 <HAL_PWREx_GetVoltageRange>
 8008a6c:	6178      	str	r0, [r7, #20]
 8008a6e:	e014      	b.n	8008a9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a74:	4a24      	ldr	r2, [pc, #144]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a7c:	4b22      	ldr	r3, [pc, #136]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008a88:	f7ff f98e 	bl	8007da8 <HAL_PWREx_GetVoltageRange>
 8008a8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008a8e:	4b1e      	ldr	r3, [pc, #120]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a92:	4a1d      	ldr	r2, [pc, #116]	; (8008b08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa0:	d10b      	bne.n	8008aba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b80      	cmp	r3, #128	; 0x80
 8008aa6:	d919      	bls.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2ba0      	cmp	r3, #160	; 0xa0
 8008aac:	d902      	bls.n	8008ab4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008aae:	2302      	movs	r3, #2
 8008ab0:	613b      	str	r3, [r7, #16]
 8008ab2:	e013      	b.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	613b      	str	r3, [r7, #16]
 8008ab8:	e010      	b.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b80      	cmp	r3, #128	; 0x80
 8008abe:	d902      	bls.n	8008ac6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	e00a      	b.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2b80      	cmp	r3, #128	; 0x80
 8008aca:	d102      	bne.n	8008ad2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008acc:	2302      	movs	r3, #2
 8008ace:	613b      	str	r3, [r7, #16]
 8008ad0:	e004      	b.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b70      	cmp	r3, #112	; 0x70
 8008ad6:	d101      	bne.n	8008adc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ad8:	2301      	movs	r3, #1
 8008ada:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008adc:	4b0b      	ldr	r3, [pc, #44]	; (8008b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f023 0207 	bic.w	r2, r3, #7
 8008ae4:	4909      	ldr	r1, [pc, #36]	; (8008b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008aec:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0307 	and.w	r3, r3, #7
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d001      	beq.n	8008afe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e000      	b.n	8008b00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	40021000 	.word	0x40021000
 8008b0c:	40022000 	.word	0x40022000

08008b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008b18:	2300      	movs	r3, #0
 8008b1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 809e 	beq.w	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b32:	4b46      	ldr	r3, [pc, #280]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e000      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8008b42:	2300      	movs	r3, #0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00d      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b48:	4b40      	ldr	r3, [pc, #256]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4c:	4a3f      	ldr	r2, [pc, #252]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b52:	6593      	str	r3, [r2, #88]	; 0x58
 8008b54:	4b3d      	ldr	r3, [pc, #244]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b60:	2301      	movs	r3, #1
 8008b62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b64:	4b3a      	ldr	r3, [pc, #232]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a39      	ldr	r2, [pc, #228]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b70:	f7fc fa00 	bl	8004f74 <HAL_GetTick>
 8008b74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b76:	e009      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b78:	f7fc f9fc 	bl	8004f74 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d902      	bls.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	74fb      	strb	r3, [r7, #19]
        break;
 8008b8a:	e005      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b8c:	4b30      	ldr	r3, [pc, #192]	; (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0ef      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8008b98:	7cfb      	ldrb	r3, [r7, #19]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d15a      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b9e:	4b2b      	ldr	r3, [pc, #172]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ba8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d01e      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d019      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008bba:	4b24      	ldr	r3, [pc, #144]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bc6:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bcc:	4a1f      	ldr	r2, [pc, #124]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bdc:	4a1b      	ldr	r2, [pc, #108]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008be6:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d016      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fc f9bc 	bl	8004f74 <HAL_GetTick>
 8008bfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bfe:	e00b      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c00:	f7fc f9b8 	bl	8004f74 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d902      	bls.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	74fb      	strb	r3, [r7, #19]
            break;
 8008c16:	e006      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0ec      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10b      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c2c:	4b07      	ldr	r3, [pc, #28]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	4904      	ldr	r1, [pc, #16]	; (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008c42:	e009      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c44:	7cfb      	ldrb	r3, [r7, #19]
 8008c46:	74bb      	strb	r3, [r7, #18]
 8008c48:	e006      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8008c4a:	bf00      	nop
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	7cfb      	ldrb	r3, [r7, #19]
 8008c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c58:	7c7b      	ldrb	r3, [r7, #17]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d105      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c5e:	4b6e      	ldr	r3, [pc, #440]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c62:	4a6d      	ldr	r2, [pc, #436]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c76:	4b68      	ldr	r3, [pc, #416]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7c:	f023 0203 	bic.w	r2, r3, #3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4964      	ldr	r1, [pc, #400]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c98:	4b5f      	ldr	r3, [pc, #380]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9e:	f023 020c 	bic.w	r2, r3, #12
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	495c      	ldr	r1, [pc, #368]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cba:	4b57      	ldr	r3, [pc, #348]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	4953      	ldr	r1, [pc, #332]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0320 	and.w	r3, r3, #32
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cdc:	4b4e      	ldr	r3, [pc, #312]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ce2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	494b      	ldr	r1, [pc, #300]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cfe:	4b46      	ldr	r3, [pc, #280]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	4942      	ldr	r1, [pc, #264]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d20:	4b3d      	ldr	r3, [pc, #244]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	493a      	ldr	r1, [pc, #232]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d42:	4b35      	ldr	r3, [pc, #212]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	695b      	ldr	r3, [r3, #20]
 8008d50:	4931      	ldr	r1, [pc, #196]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d64:	4b2c      	ldr	r3, [pc, #176]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	4929      	ldr	r1, [pc, #164]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d86:	4b24      	ldr	r3, [pc, #144]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	4920      	ldr	r1, [pc, #128]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d015      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008da8:	4b1b      	ldr	r3, [pc, #108]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db6:	4918      	ldr	r1, [pc, #96]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dc6:	d105      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dc8:	4b13      	ldr	r3, [pc, #76]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008dce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d015      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008de0:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	490a      	ldr	r1, [pc, #40]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dfe:	d105      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	4a04      	ldr	r2, [pc, #16]	; (8008e18 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008e0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3718      	adds	r7, #24
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40021000 	.word	0x40021000

08008e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e049      	b.n	8008ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d106      	bne.n	8008e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7f7 ffc0 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4610      	mov	r0, r2
 8008e5c:	f000 fa98 	bl	8009390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d001      	beq.n	8008ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e03b      	b.n	8008f5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0201 	orr.w	r2, r2, #1
 8008efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a19      	ldr	r2, [pc, #100]	; (8008f68 <HAL_TIM_Base_Start_IT+0x9c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d009      	beq.n	8008f1a <HAL_TIM_Base_Start_IT+0x4e>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0e:	d004      	beq.n	8008f1a <HAL_TIM_Base_Start_IT+0x4e>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <HAL_TIM_Base_Start_IT+0xa0>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d115      	bne.n	8008f46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <HAL_TIM_Base_Start_IT+0xa4>)
 8008f22:	4013      	ands	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b06      	cmp	r3, #6
 8008f2a:	d015      	beq.n	8008f58 <HAL_TIM_Base_Start_IT+0x8c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f32:	d011      	beq.n	8008f58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f44:	e008      	b.n	8008f58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 0201 	orr.w	r2, r2, #1
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e000      	b.n	8008f5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40014000 	.word	0x40014000
 8008f70:	00010007 	.word	0x00010007

08008f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d122      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d11b      	bne.n	8008fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0202 	mvn.w	r2, #2
 8008fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f9cb 	bl	8009352 <HAL_TIM_IC_CaptureCallback>
 8008fbc:	e005      	b.n	8008fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f9bd 	bl	800933e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f9ce 	bl	8009366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	691b      	ldr	r3, [r3, #16]
 8008fd6:	f003 0304 	and.w	r3, r3, #4
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	d122      	bne.n	8009024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f003 0304 	and.w	r3, r3, #4
 8008fe8:	2b04      	cmp	r3, #4
 8008fea:	d11b      	bne.n	8009024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0204 	mvn.w	r2, #4
 8008ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9a1 	bl	8009352 <HAL_TIM_IC_CaptureCallback>
 8009010:	e005      	b.n	800901e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f993 	bl	800933e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f9a4 	bl	8009366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b08      	cmp	r3, #8
 8009030:	d122      	bne.n	8009078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	f003 0308 	and.w	r3, r3, #8
 800903c:	2b08      	cmp	r3, #8
 800903e:	d11b      	bne.n	8009078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f06f 0208 	mvn.w	r2, #8
 8009048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2204      	movs	r2, #4
 800904e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f003 0303 	and.w	r3, r3, #3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f977 	bl	8009352 <HAL_TIM_IC_CaptureCallback>
 8009064:	e005      	b.n	8009072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f969 	bl	800933e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f97a 	bl	8009366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	f003 0310 	and.w	r3, r3, #16
 8009082:	2b10      	cmp	r3, #16
 8009084:	d122      	bne.n	80090cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	f003 0310 	and.w	r3, r3, #16
 8009090:	2b10      	cmp	r3, #16
 8009092:	d11b      	bne.n	80090cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0210 	mvn.w	r2, #16
 800909c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2208      	movs	r2, #8
 80090a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d003      	beq.n	80090ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f94d 	bl	8009352 <HAL_TIM_IC_CaptureCallback>
 80090b8:	e005      	b.n	80090c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f93f 	bl	800933e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f000 f950 	bl	8009366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	f003 0301 	and.w	r3, r3, #1
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10e      	bne.n	80090f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d107      	bne.n	80090f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f06f 0201 	mvn.w	r2, #1
 80090f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f7f7 fcda 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009102:	2b80      	cmp	r3, #128	; 0x80
 8009104:	d10e      	bne.n	8009124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	2b80      	cmp	r3, #128	; 0x80
 8009112:	d107      	bne.n	8009124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800911c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 faa4 	bl	800966c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009132:	d10e      	bne.n	8009152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913e:	2b80      	cmp	r3, #128	; 0x80
 8009140:	d107      	bne.n	8009152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800914a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa97 	bl	8009680 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b40      	cmp	r3, #64	; 0x40
 800915e:	d10e      	bne.n	800917e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b40      	cmp	r3, #64	; 0x40
 800916c:	d107      	bne.n	800917e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 f8fe 	bl	800937a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b20      	cmp	r3, #32
 800918a:	d10e      	bne.n	80091aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b20      	cmp	r3, #32
 8009198:	d107      	bne.n	80091aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f06f 0220 	mvn.w	r2, #32
 80091a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fa57 	bl	8009658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_TIM_ConfigClockSource+0x18>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e0b5      	b.n	8009336 <HAL_TIM_ConfigClockSource+0x184>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2202      	movs	r2, #2
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	d03e      	beq.n	8009286 <HAL_TIM_ConfigClockSource+0xd4>
 8009208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800920c:	f200 8087 	bhi.w	800931e <HAL_TIM_ConfigClockSource+0x16c>
 8009210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009214:	f000 8085 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x170>
 8009218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800921c:	d87f      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 800921e:	2b70      	cmp	r3, #112	; 0x70
 8009220:	d01a      	beq.n	8009258 <HAL_TIM_ConfigClockSource+0xa6>
 8009222:	2b70      	cmp	r3, #112	; 0x70
 8009224:	d87b      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 8009226:	2b60      	cmp	r3, #96	; 0x60
 8009228:	d050      	beq.n	80092cc <HAL_TIM_ConfigClockSource+0x11a>
 800922a:	2b60      	cmp	r3, #96	; 0x60
 800922c:	d877      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 800922e:	2b50      	cmp	r3, #80	; 0x50
 8009230:	d03c      	beq.n	80092ac <HAL_TIM_ConfigClockSource+0xfa>
 8009232:	2b50      	cmp	r3, #80	; 0x50
 8009234:	d873      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d058      	beq.n	80092ec <HAL_TIM_ConfigClockSource+0x13a>
 800923a:	2b40      	cmp	r3, #64	; 0x40
 800923c:	d86f      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 800923e:	2b30      	cmp	r3, #48	; 0x30
 8009240:	d064      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x15a>
 8009242:	2b30      	cmp	r3, #48	; 0x30
 8009244:	d86b      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 8009246:	2b20      	cmp	r3, #32
 8009248:	d060      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x15a>
 800924a:	2b20      	cmp	r3, #32
 800924c:	d867      	bhi.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d05c      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x15a>
 8009252:	2b10      	cmp	r3, #16
 8009254:	d05a      	beq.n	800930c <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009256:	e062      	b.n	800931e <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	6899      	ldr	r1, [r3, #8]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f000 f970 	bl	800954c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800927a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	609a      	str	r2, [r3, #8]
      break;
 8009284:	e04e      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	6899      	ldr	r1, [r3, #8]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	f000 f959 	bl	800954c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	689a      	ldr	r2, [r3, #8]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a8:	609a      	str	r2, [r3, #8]
      break;
 80092aa:	e03b      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6818      	ldr	r0, [r3, #0]
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	6859      	ldr	r1, [r3, #4]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	461a      	mov	r2, r3
 80092ba:	f000 f8cd 	bl	8009458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2150      	movs	r1, #80	; 0x50
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 f926 	bl	8009516 <TIM_ITRx_SetConfig>
      break;
 80092ca:	e02b      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	6859      	ldr	r1, [r3, #4]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	68db      	ldr	r3, [r3, #12]
 80092d8:	461a      	mov	r2, r3
 80092da:	f000 f8ec 	bl	80094b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2160      	movs	r1, #96	; 0x60
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 f916 	bl	8009516 <TIM_ITRx_SetConfig>
      break;
 80092ea:	e01b      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6818      	ldr	r0, [r3, #0]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	6859      	ldr	r1, [r3, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	461a      	mov	r2, r3
 80092fa:	f000 f8ad 	bl	8009458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2140      	movs	r1, #64	; 0x40
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f906 	bl	8009516 <TIM_ITRx_SetConfig>
      break;
 800930a:	e00b      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4619      	mov	r1, r3
 8009316:	4610      	mov	r0, r2
 8009318:	f000 f8fd 	bl	8009516 <TIM_ITRx_SetConfig>
        break;
 800931c:	e002      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      break;
 800931e:	bf00      	nop
 8009320:	e000      	b.n	8009324 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8009322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800933e:	b480      	push	{r7}
 8009340:	b083      	sub	sp, #12
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009346:	bf00      	nop
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800935a:	bf00      	nop
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800936e:	bf00      	nop
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009382:	bf00      	nop
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
	...

08009390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a2a      	ldr	r2, [pc, #168]	; (800944c <TIM_Base_SetConfig+0xbc>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d003      	beq.n	80093b0 <TIM_Base_SetConfig+0x20>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ae:	d108      	bne.n	80093c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4313      	orrs	r3, r2
 80093c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a21      	ldr	r2, [pc, #132]	; (800944c <TIM_Base_SetConfig+0xbc>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d00b      	beq.n	80093e2 <TIM_Base_SetConfig+0x52>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d0:	d007      	beq.n	80093e2 <TIM_Base_SetConfig+0x52>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a1e      	ldr	r2, [pc, #120]	; (8009450 <TIM_Base_SetConfig+0xc0>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d003      	beq.n	80093e2 <TIM_Base_SetConfig+0x52>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a1d      	ldr	r2, [pc, #116]	; (8009454 <TIM_Base_SetConfig+0xc4>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d108      	bne.n	80093f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a0c      	ldr	r2, [pc, #48]	; (800944c <TIM_Base_SetConfig+0xbc>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d007      	beq.n	8009430 <TIM_Base_SetConfig+0xa0>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a0b      	ldr	r2, [pc, #44]	; (8009450 <TIM_Base_SetConfig+0xc0>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d003      	beq.n	8009430 <TIM_Base_SetConfig+0xa0>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a0a      	ldr	r2, [pc, #40]	; (8009454 <TIM_Base_SetConfig+0xc4>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d103      	bne.n	8009438 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	615a      	str	r2, [r3, #20]
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40012c00 	.word	0x40012c00
 8009450:	40014000 	.word	0x40014000
 8009454:	40014400 	.word	0x40014400

08009458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	f023 0201 	bic.w	r2, r3, #1
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	4313      	orrs	r3, r2
 800948c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	f023 030a 	bic.w	r3, r3, #10
 8009494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4313      	orrs	r3, r2
 800949c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	621a      	str	r2, [r3, #32]
}
 80094aa:	bf00      	nop
 80094ac:	371c      	adds	r7, #28
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b087      	sub	sp, #28
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a1b      	ldr	r3, [r3, #32]
 80094c6:	f023 0210 	bic.w	r2, r3, #16
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	031b      	lsls	r3, r3, #12
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	621a      	str	r2, [r3, #32]
}
 800950a:	bf00      	nop
 800950c:	371c      	adds	r7, #28
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr

08009516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009516:	b480      	push	{r7}
 8009518:	b085      	sub	sp, #20
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
 800951e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800952c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	f043 0307 	orr.w	r3, r3, #7
 8009538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	609a      	str	r2, [r3, #8]
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	021a      	lsls	r2, r3, #8
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	431a      	orrs	r2, r3
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	4313      	orrs	r3, r2
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	4313      	orrs	r3, r2
 8009578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	697a      	ldr	r2, [r7, #20]
 800957e:	609a      	str	r2, [r3, #8]
}
 8009580:	bf00      	nop
 8009582:	371c      	adds	r7, #28
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e04f      	b.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a21      	ldr	r2, [pc, #132]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d108      	bne.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	4313      	orrs	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a14      	ldr	r2, [pc, #80]	; (8009650 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d009      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800960c:	d004      	beq.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a10      	ldr	r2, [pc, #64]	; (8009654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d10c      	bne.n	8009632 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800961e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	40012c00 	.word	0x40012c00
 8009654:	40014000 	.word	0x40014000

08009658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009694:	b084      	sub	sp, #16
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	f107 0014 	add.w	r0, r7, #20
 80096a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	b004      	add	sp, #16
 80096b4:	4770      	bx	lr

080096b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b085      	sub	sp, #20
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096c6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80096ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	b29a      	uxth	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80096f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	b29b      	uxth	r3, r3
 8009702:	4013      	ands	r3, r2
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009734:	b084      	sub	sp, #16
 8009736:	b480      	push	{r7}
 8009738:	b083      	sub	sp, #12
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	f107 0014 	add.w	r0, r7, #20
 8009742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	b004      	add	sp, #16
 8009774:	4770      	bx	lr
	...

08009778 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009778:	b480      	push	{r7}
 800977a:	b09b      	sub	sp, #108	; 0x6c
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	881b      	ldrh	r3, [r3, #0]
 8009794:	b29b      	uxth	r3, r3
 8009796:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800979a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800979e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d81f      	bhi.n	80097ea <USB_ActivateEndpoint+0x72>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <USB_ActivateEndpoint+0x38>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	080097c1 	.word	0x080097c1
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097f3 	.word	0x080097f3
 80097bc:	080097cf 	.word	0x080097cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80097c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80097c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80097cc:	e012      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80097ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80097d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80097d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80097da:	e00b      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80097dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80097e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80097e8:	e004      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80097f0:	e000      	b.n	80097f4 <USB_ActivateEndpoint+0x7c>
      break;
 80097f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	441a      	add	r2, r3
 80097fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009802:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009806:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800980a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009812:	b29b      	uxth	r3, r3
 8009814:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	b21b      	sxth	r3, r3
 8009826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800982a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982e:	b21a      	sxth	r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b21b      	sxth	r3, r3
 8009836:	4313      	orrs	r3, r2
 8009838:	b21b      	sxth	r3, r3
 800983a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	441a      	add	r2, r3
 8009848:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800984c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800985c:	b29b      	uxth	r3, r3
 800985e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	7b1b      	ldrb	r3, [r3, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	f040 8149 	bne.w	8009afc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	785b      	ldrb	r3, [r3, #1]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 8084 	beq.w	800997c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	617b      	str	r3, [r7, #20]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	4413      	add	r3, r2
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	00da      	lsls	r2, r3, #3
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009896:	613b      	str	r3, [r7, #16]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	81fb      	strh	r3, [r7, #14]
 80098b6:	89fb      	ldrh	r3, [r7, #14]
 80098b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d01b      	beq.n	80098f8 <USB_ActivateEndpoint+0x180>
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d6:	81bb      	strh	r3, [r7, #12]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	441a      	add	r2, r3
 80098e2:	89bb      	ldrh	r3, [r7, #12]
 80098e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	78db      	ldrb	r3, [r3, #3]
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d020      	beq.n	8009942 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	881b      	ldrh	r3, [r3, #0]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009916:	813b      	strh	r3, [r7, #8]
 8009918:	893b      	ldrh	r3, [r7, #8]
 800991a:	f083 0320 	eor.w	r3, r3, #32
 800991e:	813b      	strh	r3, [r7, #8]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	441a      	add	r2, r3
 800992a:	893b      	ldrh	r3, [r7, #8]
 800992c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009934:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	b29b      	uxth	r3, r3
 800993e:	8013      	strh	r3, [r2, #0]
 8009940:	e27f      	b.n	8009e42 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	881b      	ldrh	r3, [r3, #0]
 800994e:	b29b      	uxth	r3, r3
 8009950:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009958:	817b      	strh	r3, [r7, #10]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	441a      	add	r2, r3
 8009964:	897b      	ldrh	r3, [r7, #10]
 8009966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800996e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009976:	b29b      	uxth	r3, r3
 8009978:	8013      	strh	r3, [r2, #0]
 800997a:	e262      	b.n	8009e42 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009986:	b29b      	uxth	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998c:	4413      	add	r3, r2
 800998e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	00da      	lsls	r2, r3, #3
 8009996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009998:	4413      	add	r3, r2
 800999a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	88db      	ldrh	r3, [r3, #6]
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	627b      	str	r3, [r7, #36]	; 0x24
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	4413      	add	r3, r2
 80099c2:	627b      	str	r3, [r7, #36]	; 0x24
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	00da      	lsls	r2, r3, #3
 80099ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099cc:	4413      	add	r3, r2
 80099ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099d2:	623b      	str	r3, [r7, #32]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d112      	bne.n	8009a02 <USB_ActivateEndpoint+0x28a>
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	881b      	ldrh	r3, [r3, #0]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	801a      	strh	r2, [r3, #0]
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	e02f      	b.n	8009a62 <USB_ActivateEndpoint+0x2ea>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b3e      	cmp	r3, #62	; 0x3e
 8009a08:	d813      	bhi.n	8009a32 <USB_ActivateEndpoint+0x2ba>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	085b      	lsrs	r3, r3, #1
 8009a10:	663b      	str	r3, [r7, #96]	; 0x60
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <USB_ActivateEndpoint+0x2ac>
 8009a1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a20:	3301      	adds	r3, #1
 8009a22:	663b      	str	r3, [r7, #96]	; 0x60
 8009a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	029b      	lsls	r3, r3, #10
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	801a      	strh	r2, [r3, #0]
 8009a30:	e017      	b.n	8009a62 <USB_ActivateEndpoint+0x2ea>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	095b      	lsrs	r3, r3, #5
 8009a38:	663b      	str	r3, [r7, #96]	; 0x60
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 031f 	and.w	r3, r3, #31
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <USB_ActivateEndpoint+0x2d4>
 8009a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8009a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	029b      	lsls	r3, r3, #10
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	83fb      	strh	r3, [r7, #30]
 8009a70:	8bfb      	ldrh	r3, [r7, #30]
 8009a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d01b      	beq.n	8009ab2 <USB_ActivateEndpoint+0x33a>
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a90:	83bb      	strh	r3, [r7, #28]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	441a      	add	r2, r3
 8009a9c:	8bbb      	ldrh	r3, [r7, #28]
 8009a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac8:	837b      	strh	r3, [r7, #26]
 8009aca:	8b7b      	ldrh	r3, [r7, #26]
 8009acc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ad0:	837b      	strh	r3, [r7, #26]
 8009ad2:	8b7b      	ldrh	r3, [r7, #26]
 8009ad4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ad8:	837b      	strh	r3, [r7, #26]
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	441a      	add	r2, r3
 8009ae4:	8b7b      	ldrh	r3, [r7, #26]
 8009ae6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	8013      	strh	r3, [r2, #0]
 8009afa:	e1a2      	b.n	8009e42 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	881b      	ldrh	r3, [r3, #0]
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b12:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	441a      	add	r2, r3
 8009b20:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b2c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b48:	4413      	add	r3, r2
 8009b4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	00da      	lsls	r2, r3, #3
 8009b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	891b      	ldrh	r3, [r3, #8]
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b6a:	801a      	strh	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	461a      	mov	r2, r3
 8009b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b7c:	4413      	add	r3, r2
 8009b7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	00da      	lsls	r2, r3, #3
 8009b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b88:	4413      	add	r3, r2
 8009b8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	895b      	ldrh	r3, [r3, #10]
 8009b94:	085b      	lsrs	r3, r3, #1
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	005b      	lsls	r3, r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	785b      	ldrb	r3, [r3, #1]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f040 8091 	bne.w	8009ccc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	881b      	ldrh	r3, [r3, #0]
 8009bb6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009bb8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d01b      	beq.n	8009bfa <USB_ActivateEndpoint+0x482>
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	441a      	add	r2, r3
 8009be4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	881b      	ldrh	r3, [r3, #0]
 8009c06:	873b      	strh	r3, [r7, #56]	; 0x38
 8009c08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d01b      	beq.n	8009c4a <USB_ActivateEndpoint+0x4d2>
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	881b      	ldrh	r3, [r3, #0]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c28:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	441a      	add	r2, r3
 8009c34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009c62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009c6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	441a      	add	r2, r3
 8009c7c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	4413      	add	r3, r2
 8009c9c:	881b      	ldrh	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca8:	867b      	strh	r3, [r7, #50]	; 0x32
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	441a      	add	r2, r3
 8009cb4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	8013      	strh	r3, [r2, #0]
 8009cca:	e0ba      	b.n	8009e42 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009cdc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009ce0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d01d      	beq.n	8009d24 <USB_ActivateEndpoint+0x5ac>
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	441a      	add	r2, r3
 8009d0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009d34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01d      	beq.n	8009d7c <USB_ActivateEndpoint+0x604>
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	881b      	ldrh	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	441a      	add	r2, r3
 8009d64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	78db      	ldrb	r3, [r3, #3]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d024      	beq.n	8009dce <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009d9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009da2:	f083 0320 	eor.w	r3, r3, #32
 8009da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	441a      	add	r2, r3
 8009db4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	8013      	strh	r3, [r2, #0]
 8009dcc:	e01d      	b.n	8009e0a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009de4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	441a      	add	r2, r3
 8009df2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e20:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	781b      	ldrb	r3, [r3, #0]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	441a      	add	r2, r3
 8009e2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009e42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	376c      	adds	r7, #108	; 0x6c
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b08d      	sub	sp, #52	; 0x34
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	7b1b      	ldrb	r3, [r3, #12]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f040 808e 	bne.w	8009f84 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	785b      	ldrb	r3, [r3, #1]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d044      	beq.n	8009efa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	81bb      	strh	r3, [r7, #12]
 8009e7e:	89bb      	ldrh	r3, [r7, #12]
 8009e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d01b      	beq.n	8009ec0 <USB_DeactivateEndpoint+0x6c>
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e9e:	817b      	strh	r3, [r7, #10]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	441a      	add	r2, r3
 8009eaa:	897b      	ldrh	r3, [r7, #10]
 8009eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	4413      	add	r3, r2
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ed6:	813b      	strh	r3, [r7, #8]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	441a      	add	r2, r3
 8009ee2:	893b      	ldrh	r3, [r7, #8]
 8009ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	8013      	strh	r3, [r2, #0]
 8009ef8:	e192      	b.n	800a220 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	827b      	strh	r3, [r7, #18]
 8009f08:	8a7b      	ldrh	r3, [r7, #18]
 8009f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d01b      	beq.n	8009f4a <USB_DeactivateEndpoint+0xf6>
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4413      	add	r3, r2
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f28:	823b      	strh	r3, [r7, #16]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	441a      	add	r2, r3
 8009f34:	8a3b      	ldrh	r3, [r7, #16]
 8009f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f60:	81fb      	strh	r3, [r7, #14]
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	441a      	add	r2, r3
 8009f6c:	89fb      	ldrh	r3, [r7, #14]
 8009f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	8013      	strh	r3, [r2, #0]
 8009f82:	e14d      	b.n	800a220 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	785b      	ldrb	r3, [r3, #1]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f040 80a5 	bne.w	800a0d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	843b      	strh	r3, [r7, #32]
 8009f9c:	8c3b      	ldrh	r3, [r7, #32]
 8009f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01b      	beq.n	8009fde <USB_DeactivateEndpoint+0x18a>
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fbc:	83fb      	strh	r3, [r7, #30]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	441a      	add	r2, r3
 8009fc8:	8bfb      	ldrh	r3, [r7, #30]
 8009fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	83bb      	strh	r3, [r7, #28]
 8009fec:	8bbb      	ldrh	r3, [r7, #28]
 8009fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d01b      	beq.n	800a02e <USB_DeactivateEndpoint+0x1da>
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	b29b      	uxth	r3, r3
 800a004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00c:	837b      	strh	r3, [r7, #26]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	441a      	add	r2, r3
 800a018:	8b7b      	ldrh	r3, [r7, #26]
 800a01a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a01e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a026:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a044:	833b      	strh	r3, [r7, #24]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	441a      	add	r2, r3
 800a050:	8b3b      	ldrh	r3, [r7, #24]
 800a052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a05a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a05e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a062:	b29b      	uxth	r3, r3
 800a064:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	b29b      	uxth	r3, r3
 800a074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07c:	82fb      	strh	r3, [r7, #22]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	441a      	add	r2, r3
 800a088:	8afb      	ldrh	r3, [r7, #22]
 800a08a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a08e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	881b      	ldrh	r3, [r3, #0]
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0b4:	82bb      	strh	r3, [r7, #20]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	441a      	add	r2, r3
 800a0c0:	8abb      	ldrh	r3, [r7, #20]
 800a0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	8013      	strh	r3, [r2, #0]
 800a0d6:	e0a3      	b.n	800a220 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a0e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d01b      	beq.n	800a128 <USB_DeactivateEndpoint+0x2d4>
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a106:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	441a      	add	r2, r3
 800a112:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a11c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a124:	b29b      	uxth	r3, r3
 800a126:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a128:	687a      	ldr	r2, [r7, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a136:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01b      	beq.n	800a178 <USB_DeactivateEndpoint+0x324>
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a156:	853b      	strh	r3, [r7, #40]	; 0x28
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	441a      	add	r2, r3
 800a162:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a16c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a170:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a174:	b29b      	uxth	r3, r3
 800a176:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a18a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	441a      	add	r2, r3
 800a19a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	009b      	lsls	r3, r3, #2
 800a1b8:	4413      	add	r3, r2
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	781b      	ldrb	r3, [r3, #0]
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	441a      	add	r2, r3
 800a1d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1e8:	687a      	ldr	r2, [r7, #4]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fe:	847b      	strh	r3, [r7, #34]	; 0x22
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	441a      	add	r2, r3
 800a20a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a20c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3734      	adds	r7, #52	; 0x34
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b0cc      	sub	sp, #304	; 0x130
 800a232:	af00      	add	r7, sp, #0
 800a234:	1d3b      	adds	r3, r7, #4
 800a236:	6018      	str	r0, [r3, #0]
 800a238:	463b      	mov	r3, r7
 800a23a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a23c:	463b      	mov	r3, r7
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	785b      	ldrb	r3, [r3, #1]
 800a242:	2b01      	cmp	r3, #1
 800a244:	f040 872e 	bne.w	800b0a4 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a248:	463b      	mov	r3, r7
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	699a      	ldr	r2, [r3, #24]
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	429a      	cmp	r2, r3
 800a256:	d905      	bls.n	800a264 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800a258:	463b      	mov	r3, r7
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	691b      	ldr	r3, [r3, #16]
 800a25e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a262:	e004      	b.n	800a26e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800a264:	463b      	mov	r3, r7
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699b      	ldr	r3, [r3, #24]
 800a26a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a26e:	463b      	mov	r3, r7
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	7b1b      	ldrb	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d134      	bne.n	800a2e2 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a278:	463b      	mov	r3, r7
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	6959      	ldr	r1, [r3, #20]
 800a27e:	463b      	mov	r3, r7
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	88da      	ldrh	r2, [r3, #6]
 800a284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a288:	b29b      	uxth	r3, r3
 800a28a:	1d38      	adds	r0, r7, #4
 800a28c:	6800      	ldr	r0, [r0, #0]
 800a28e:	f001 fc20 	bl	800bad2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a292:	f107 0310 	add.w	r3, r7, #16
 800a296:	1d3a      	adds	r2, r7, #4
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	601a      	str	r2, [r3, #0]
 800a29c:	1d3b      	adds	r3, r7, #4
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	f107 0310 	add.w	r3, r7, #16
 800a2ac:	f107 0210 	add.w	r2, r7, #16
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	00da      	lsls	r2, r3, #3
 800a2be:	f107 0310 	add.w	r3, r7, #16
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800a2ca:	f107 030c 	add.w	r3, r7, #12
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	f107 030c 	add.w	r3, r7, #12
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	801a      	strh	r2, [r3, #0]
 800a2de:	f000 beac 	b.w	800b03a <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a2e2:	463b      	mov	r3, r7
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	78db      	ldrb	r3, [r3, #3]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	f040 838c 	bne.w	800aa06 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a2ee:	463b      	mov	r3, r7
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	463b      	mov	r3, r7
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	f240 8330 	bls.w	800a960 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a300:	1d3b      	adds	r3, r7, #4
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	463b      	mov	r3, r7
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a31a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a31e:	1d3b      	adds	r3, r7, #4
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	463b      	mov	r3, r7
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	441a      	add	r2, r3
 800a32c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a338:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	b29b      	uxth	r3, r3
 800a342:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a344:	463b      	mov	r3, r7
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	463b      	mov	r3, r7
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a356:	1d3b      	adds	r3, r7, #4
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	463b      	mov	r3, r7
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29b      	uxth	r3, r3
 800a368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 819e 	beq.w	800a6ae <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a372:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a376:	1d3a      	adds	r2, r7, #4
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	463b      	mov	r3, r7
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	785b      	ldrb	r3, [r3, #1]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d17a      	bne.n	800a47c <USB_EPStartXfer+0x24e>
 800a386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a38a:	1d3a      	adds	r2, r7, #4
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	601a      	str	r2, [r3, #0]
 800a390:	1d3b      	adds	r3, r7, #4
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a398:	b29b      	uxth	r3, r3
 800a39a:	4619      	mov	r1, r3
 800a39c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a3a4:	6812      	ldr	r2, [r2, #0]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	601a      	str	r2, [r3, #0]
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	00da      	lsls	r2, r3, #3
 800a3b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800a3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d11a      	bne.n	800a402 <USB_EPStartXfer+0x1d4>
 800a3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	801a      	strh	r2, [r3, #0]
 800a400:	e062      	b.n	800a4c8 <USB_EPStartXfer+0x29a>
 800a402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a406:	2b3e      	cmp	r3, #62	; 0x3e
 800a408:	d819      	bhi.n	800a43e <USB_EPStartXfer+0x210>
 800a40a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a40e:	085b      	lsrs	r3, r3, #1
 800a410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d004      	beq.n	800a42a <USB_EPStartXfer+0x1fc>
 800a420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a424:	3301      	adds	r3, #1
 800a426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a42a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a42e:	b29b      	uxth	r3, r3
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	b29a      	uxth	r2, r3
 800a434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	801a      	strh	r2, [r3, #0]
 800a43c:	e044      	b.n	800a4c8 <USB_EPStartXfer+0x29a>
 800a43e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a442:	095b      	lsrs	r3, r3, #5
 800a444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a44c:	f003 031f 	and.w	r3, r3, #31
 800a450:	2b00      	cmp	r3, #0
 800a452:	d104      	bne.n	800a45e <USB_EPStartXfer+0x230>
 800a454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a458:	3b01      	subs	r3, #1
 800a45a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a45e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a462:	b29b      	uxth	r3, r3
 800a464:	029b      	lsls	r3, r3, #10
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a46c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a470:	b29a      	uxth	r2, r3
 800a472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	e025      	b.n	800a4c8 <USB_EPStartXfer+0x29a>
 800a47c:	463b      	mov	r3, r7
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d120      	bne.n	800a4c8 <USB_EPStartXfer+0x29a>
 800a486:	1d3b      	adds	r3, r7, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	4619      	mov	r1, r3
 800a492:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a496:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800a49a:	6812      	ldr	r2, [r2, #0]
 800a49c:	440a      	add	r2, r1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	463b      	mov	r3, r7
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	00da      	lsls	r2, r3, #3
 800a4a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f203 4206 	addw	r2, r3, #1030	; 0x406
 800a4b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4c8:	463b      	mov	r3, r7
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	895b      	ldrh	r3, [r3, #10]
 800a4ce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6959      	ldr	r1, [r3, #20]
 800a4d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a4e2:	1d38      	adds	r0, r7, #4
 800a4e4:	6800      	ldr	r0, [r0, #0]
 800a4e6:	f001 faf4 	bl	800bad2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a4ea:	463b      	mov	r3, r7
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	695a      	ldr	r2, [r3, #20]
 800a4f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4f4:	441a      	add	r2, r3
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a4fc:	463b      	mov	r3, r7
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6a1a      	ldr	r2, [r3, #32]
 800a502:	463b      	mov	r3, r7
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d909      	bls.n	800a520 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 800a50c:	463b      	mov	r3, r7
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6a1a      	ldr	r2, [r3, #32]
 800a512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a516:	1ad2      	subs	r2, r2, r3
 800a518:	463b      	mov	r3, r7
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	621a      	str	r2, [r3, #32]
 800a51e:	e008      	b.n	800a532 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800a520:	463b      	mov	r3, r7
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a52a:	463b      	mov	r3, r7
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2200      	movs	r2, #0
 800a530:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a532:	463b      	mov	r3, r7
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	785b      	ldrb	r3, [r3, #1]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d17a      	bne.n	800a632 <USB_EPStartXfer+0x404>
 800a53c:	f107 0318 	add.w	r3, r7, #24
 800a540:	1d3a      	adds	r2, r7, #4
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	1d3b      	adds	r3, r7, #4
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a54e:	b29b      	uxth	r3, r3
 800a550:	4619      	mov	r1, r3
 800a552:	f107 0318 	add.w	r3, r7, #24
 800a556:	f107 0218 	add.w	r2, r7, #24
 800a55a:	6812      	ldr	r2, [r2, #0]
 800a55c:	440a      	add	r2, r1
 800a55e:	601a      	str	r2, [r3, #0]
 800a560:	463b      	mov	r3, r7
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	00da      	lsls	r2, r3, #3
 800a568:	f107 0318 	add.w	r3, r7, #24
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4413      	add	r3, r2
 800a570:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800a574:	f107 0314 	add.w	r3, r7, #20
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d11a      	bne.n	800a5b8 <USB_EPStartXfer+0x38a>
 800a582:	f107 0314 	add.w	r3, r7, #20
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a590:	b29a      	uxth	r2, r3
 800a592:	f107 0314 	add.w	r3, r7, #20
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	801a      	strh	r2, [r3, #0]
 800a59a:	f107 0314 	add.w	r3, r7, #20
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	881b      	ldrh	r3, [r3, #0]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f107 0314 	add.w	r3, r7, #20
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	801a      	strh	r2, [r3, #0]
 800a5b6:	e067      	b.n	800a688 <USB_EPStartXfer+0x45a>
 800a5b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a5be:	d819      	bhi.n	800a5f4 <USB_EPStartXfer+0x3c6>
 800a5c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a5ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d004      	beq.n	800a5e0 <USB_EPStartXfer+0x3b2>
 800a5d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a5da:	3301      	adds	r3, #1
 800a5dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a5e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	029b      	lsls	r3, r3, #10
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	f107 0314 	add.w	r3, r7, #20
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	801a      	strh	r2, [r3, #0]
 800a5f2:	e049      	b.n	800a688 <USB_EPStartXfer+0x45a>
 800a5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5f8:	095b      	lsrs	r3, r3, #5
 800a5fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a602:	f003 031f 	and.w	r3, r3, #31
 800a606:	2b00      	cmp	r3, #0
 800a608:	d104      	bne.n	800a614 <USB_EPStartXfer+0x3e6>
 800a60a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a60e:	3b01      	subs	r3, #1
 800a610:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a614:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a618:	b29b      	uxth	r3, r3
 800a61a:	029b      	lsls	r3, r3, #10
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a626:	b29a      	uxth	r2, r3
 800a628:	f107 0314 	add.w	r3, r7, #20
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	e02a      	b.n	800a688 <USB_EPStartXfer+0x45a>
 800a632:	463b      	mov	r3, r7
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d125      	bne.n	800a688 <USB_EPStartXfer+0x45a>
 800a63c:	f107 0320 	add.w	r3, r7, #32
 800a640:	1d3a      	adds	r2, r7, #4
 800a642:	6812      	ldr	r2, [r2, #0]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	1d3b      	adds	r3, r7, #4
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a64e:	b29b      	uxth	r3, r3
 800a650:	4619      	mov	r1, r3
 800a652:	f107 0320 	add.w	r3, r7, #32
 800a656:	f107 0220 	add.w	r2, r7, #32
 800a65a:	6812      	ldr	r2, [r2, #0]
 800a65c:	440a      	add	r2, r1
 800a65e:	601a      	str	r2, [r3, #0]
 800a660:	463b      	mov	r3, r7
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	00da      	lsls	r2, r3, #3
 800a668:	f107 0320 	add.w	r3, r7, #32
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4413      	add	r3, r2
 800a670:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800a674:	f107 031c 	add.w	r3, r7, #28
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a67e:	b29a      	uxth	r2, r3
 800a680:	f107 031c 	add.w	r3, r7, #28
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a688:	463b      	mov	r3, r7
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	891b      	ldrh	r3, [r3, #8]
 800a68e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a692:	463b      	mov	r3, r7
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	6959      	ldr	r1, [r3, #20]
 800a698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a6a2:	1d38      	adds	r0, r7, #4
 800a6a4:	6800      	ldr	r0, [r0, #0]
 800a6a6:	f001 fa14 	bl	800bad2 <USB_WritePMA>
 800a6aa:	f000 bcc6 	b.w	800b03a <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6ae:	463b      	mov	r3, r7
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	785b      	ldrb	r3, [r3, #1]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d164      	bne.n	800a782 <USB_EPStartXfer+0x554>
 800a6b8:	1d3b      	adds	r3, r7, #4
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6be:	1d3b      	adds	r3, r7, #4
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6cc:	4413      	add	r3, r2
 800a6ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6d0:	463b      	mov	r3, r7
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	00da      	lsls	r2, r3, #3
 800a6d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6da:	4413      	add	r3, r2
 800a6dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a6e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d112      	bne.n	800a710 <USB_EPStartXfer+0x4e2>
 800a6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fc:	881b      	ldrh	r3, [r3, #0]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a708:	b29a      	uxth	r2, r3
 800a70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a70c:	801a      	strh	r2, [r3, #0]
 800a70e:	e057      	b.n	800a7c0 <USB_EPStartXfer+0x592>
 800a710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a714:	2b3e      	cmp	r3, #62	; 0x3e
 800a716:	d817      	bhi.n	800a748 <USB_EPStartXfer+0x51a>
 800a718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a71c:	085b      	lsrs	r3, r3, #1
 800a71e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a726:	f003 0301 	and.w	r3, r3, #1
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d004      	beq.n	800a738 <USB_EPStartXfer+0x50a>
 800a72e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a732:	3301      	adds	r3, #1
 800a734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a738:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	029b      	lsls	r3, r3, #10
 800a740:	b29a      	uxth	r2, r3
 800a742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a744:	801a      	strh	r2, [r3, #0]
 800a746:	e03b      	b.n	800a7c0 <USB_EPStartXfer+0x592>
 800a748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a74c:	095b      	lsrs	r3, r3, #5
 800a74e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a756:	f003 031f 	and.w	r3, r3, #31
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d104      	bne.n	800a768 <USB_EPStartXfer+0x53a>
 800a75e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a762:	3b01      	subs	r3, #1
 800a764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a768:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	029b      	lsls	r3, r3, #10
 800a770:	b29b      	uxth	r3, r3
 800a772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a77e:	801a      	strh	r2, [r3, #0]
 800a780:	e01e      	b.n	800a7c0 <USB_EPStartXfer+0x592>
 800a782:	463b      	mov	r3, r7
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d119      	bne.n	800a7c0 <USB_EPStartXfer+0x592>
 800a78c:	1d3b      	adds	r3, r7, #4
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	653b      	str	r3, [r7, #80]	; 0x50
 800a792:	1d3b      	adds	r3, r7, #4
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	461a      	mov	r2, r3
 800a79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7a0:	4413      	add	r3, r2
 800a7a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a7a4:	463b      	mov	r3, r7
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	00da      	lsls	r2, r3, #3
 800a7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ba:	b29a      	uxth	r2, r3
 800a7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7c0:	463b      	mov	r3, r7
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	891b      	ldrh	r3, [r3, #8]
 800a7c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7ca:	463b      	mov	r3, r7
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	6959      	ldr	r1, [r3, #20]
 800a7d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a7da:	1d38      	adds	r0, r7, #4
 800a7dc:	6800      	ldr	r0, [r0, #0]
 800a7de:	f001 f978 	bl	800bad2 <USB_WritePMA>
            ep->xfer_buff += len;
 800a7e2:	463b      	mov	r3, r7
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ec:	441a      	add	r2, r3
 800a7ee:	463b      	mov	r3, r7
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a7f4:	463b      	mov	r3, r7
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6a1a      	ldr	r2, [r3, #32]
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	429a      	cmp	r2, r3
 800a802:	d909      	bls.n	800a818 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 800a804:	463b      	mov	r3, r7
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6a1a      	ldr	r2, [r3, #32]
 800a80a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	463b      	mov	r3, r7
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	621a      	str	r2, [r3, #32]
 800a816:	e008      	b.n	800a82a <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800a818:	463b      	mov	r3, r7
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a822:	463b      	mov	r3, r7
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2200      	movs	r2, #0
 800a828:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a82a:	1d3b      	adds	r3, r7, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	643b      	str	r3, [r7, #64]	; 0x40
 800a830:	463b      	mov	r3, r7
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d164      	bne.n	800a904 <USB_EPStartXfer+0x6d6>
 800a83a:	1d3b      	adds	r3, r7, #4
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a840:	1d3b      	adds	r3, r7, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a848:	b29b      	uxth	r3, r3
 800a84a:	461a      	mov	r2, r3
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	4413      	add	r3, r2
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
 800a852:	463b      	mov	r3, r7
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	00da      	lsls	r2, r3, #3
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	4413      	add	r3, r2
 800a85e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
 800a864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d112      	bne.n	800a892 <USB_EPStartXfer+0x664>
 800a86c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86e:	881b      	ldrh	r3, [r3, #0]
 800a870:	b29b      	uxth	r3, r3
 800a872:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a876:	b29a      	uxth	r2, r3
 800a878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87a:	801a      	strh	r2, [r3, #0]
 800a87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a87e:	881b      	ldrh	r3, [r3, #0]
 800a880:	b29b      	uxth	r3, r3
 800a882:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a886:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	801a      	strh	r2, [r3, #0]
 800a890:	e054      	b.n	800a93c <USB_EPStartXfer+0x70e>
 800a892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a896:	2b3e      	cmp	r3, #62	; 0x3e
 800a898:	d817      	bhi.n	800a8ca <USB_EPStartXfer+0x69c>
 800a89a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89e:	085b      	lsrs	r3, r3, #1
 800a8a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8a8:	f003 0301 	and.w	r3, r3, #1
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d004      	beq.n	800a8ba <USB_EPStartXfer+0x68c>
 800a8b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8be:	b29b      	uxth	r3, r3
 800a8c0:	029b      	lsls	r3, r3, #10
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c6:	801a      	strh	r2, [r3, #0]
 800a8c8:	e038      	b.n	800a93c <USB_EPStartXfer+0x70e>
 800a8ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ce:	095b      	lsrs	r3, r3, #5
 800a8d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8d8:	f003 031f 	and.w	r3, r3, #31
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d104      	bne.n	800a8ea <USB_EPStartXfer+0x6bc>
 800a8e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a8ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	029b      	lsls	r3, r3, #10
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a900:	801a      	strh	r2, [r3, #0]
 800a902:	e01b      	b.n	800a93c <USB_EPStartXfer+0x70e>
 800a904:	463b      	mov	r3, r7
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d116      	bne.n	800a93c <USB_EPStartXfer+0x70e>
 800a90e:	1d3b      	adds	r3, r7, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91c:	4413      	add	r3, r2
 800a91e:	643b      	str	r3, [r7, #64]	; 0x40
 800a920:	463b      	mov	r3, r7
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	00da      	lsls	r2, r3, #3
 800a928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a92a:	4413      	add	r3, r2
 800a92c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a936:	b29a      	uxth	r2, r3
 800a938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a93c:	463b      	mov	r3, r7
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	895b      	ldrh	r3, [r3, #10]
 800a942:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a946:	463b      	mov	r3, r7
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6959      	ldr	r1, [r3, #20]
 800a94c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a950:	b29b      	uxth	r3, r3
 800a952:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a956:	1d38      	adds	r0, r7, #4
 800a958:	6800      	ldr	r0, [r0, #0]
 800a95a:	f001 f8ba 	bl	800bad2 <USB_WritePMA>
 800a95e:	e36c      	b.n	800b03a <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a960:	463b      	mov	r3, r7
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6a1b      	ldr	r3, [r3, #32]
 800a966:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a96a:	1d3b      	adds	r3, r7, #4
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	463b      	mov	r3, r7
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	4413      	add	r3, r2
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a984:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a988:	1d3b      	adds	r3, r7, #4
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	463b      	mov	r3, r7
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	009b      	lsls	r3, r3, #2
 800a994:	441a      	add	r2, r3
 800a996:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a99a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a99e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a9ae:	1d3b      	adds	r3, r7, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9b4:	1d3b      	adds	r3, r7, #4
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9c2:	4413      	add	r3, r2
 800a9c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9c6:	463b      	mov	r3, r7
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	00da      	lsls	r2, r3, #3
 800a9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9e0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9ec:	463b      	mov	r3, r7
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6959      	ldr	r1, [r3, #20]
 800a9f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a9fc:	1d38      	adds	r0, r7, #4
 800a9fe:	6800      	ldr	r0, [r0, #0]
 800aa00:	f001 f867 	bl	800bad2 <USB_WritePMA>
 800aa04:	e319      	b.n	800b03a <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800aa06:	1d3b      	adds	r3, r7, #4
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	463b      	mov	r3, r7
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	4413      	add	r3, r2
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa20:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800aa24:	1d3b      	adds	r3, r7, #4
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	463b      	mov	r3, r7
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	441a      	add	r2, r3
 800aa32:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800aa36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa3e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800aa42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6a1a      	ldr	r2, [r3, #32]
 800aa50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	463b      	mov	r3, r7
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aa5c:	1d3b      	adds	r3, r7, #4
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	463b      	mov	r3, r7
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	4413      	add	r3, r2
 800aa6a:	881b      	ldrh	r3, [r3, #0]
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8162 	beq.w	800ad3c <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa78:	1d3b      	adds	r3, r7, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa80:	463b      	mov	r3, r7
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d164      	bne.n	800ab54 <USB_EPStartXfer+0x926>
 800aa8a:	1d3b      	adds	r3, r7, #4
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa90:	1d3b      	adds	r3, r7, #4
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9e:	4413      	add	r3, r2
 800aaa0:	67bb      	str	r3, [r7, #120]	; 0x78
 800aaa2:	463b      	mov	r3, r7
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	00da      	lsls	r2, r3, #3
 800aaaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaac:	4413      	add	r3, r2
 800aaae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aab2:	677b      	str	r3, [r7, #116]	; 0x74
 800aab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d112      	bne.n	800aae2 <USB_EPStartXfer+0x8b4>
 800aabc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaca:	801a      	strh	r2, [r3, #0]
 800aacc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aace:	881b      	ldrh	r3, [r3, #0]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aada:	b29a      	uxth	r2, r3
 800aadc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aade:	801a      	strh	r2, [r3, #0]
 800aae0:	e057      	b.n	800ab92 <USB_EPStartXfer+0x964>
 800aae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae6:	2b3e      	cmp	r3, #62	; 0x3e
 800aae8:	d817      	bhi.n	800ab1a <USB_EPStartXfer+0x8ec>
 800aaea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaee:	085b      	lsrs	r3, r3, #1
 800aaf0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aaf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d004      	beq.n	800ab0a <USB_EPStartXfer+0x8dc>
 800ab00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab04:	3301      	adds	r3, #1
 800ab06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ab0a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	029b      	lsls	r3, r3, #10
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab16:	801a      	strh	r2, [r3, #0]
 800ab18:	e03b      	b.n	800ab92 <USB_EPStartXfer+0x964>
 800ab1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ab24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab28:	f003 031f 	and.w	r3, r3, #31
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d104      	bne.n	800ab3a <USB_EPStartXfer+0x90c>
 800ab30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab34:	3b01      	subs	r3, #1
 800ab36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ab3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	029b      	lsls	r3, r3, #10
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	e01e      	b.n	800ab92 <USB_EPStartXfer+0x964>
 800ab54:	463b      	mov	r3, r7
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	785b      	ldrb	r3, [r3, #1]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d119      	bne.n	800ab92 <USB_EPStartXfer+0x964>
 800ab5e:	1d3b      	adds	r3, r7, #4
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab66:	b29b      	uxth	r3, r3
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab6e:	4413      	add	r3, r2
 800ab70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab74:	463b      	mov	r3, r7
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	00da      	lsls	r2, r3, #3
 800ab7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab80:	4413      	add	r3, r2
 800ab82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab86:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab8c:	b29a      	uxth	r2, r3
 800ab8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab90:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ab92:	463b      	mov	r3, r7
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	895b      	ldrh	r3, [r3, #10]
 800ab98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab9c:	463b      	mov	r3, r7
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	6959      	ldr	r1, [r3, #20]
 800aba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800abac:	1d38      	adds	r0, r7, #4
 800abae:	6800      	ldr	r0, [r0, #0]
 800abb0:	f000 ff8f 	bl	800bad2 <USB_WritePMA>
          ep->xfer_buff += len;
 800abb4:	463b      	mov	r3, r7
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695a      	ldr	r2, [r3, #20]
 800abba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abbe:	441a      	add	r2, r3
 800abc0:	463b      	mov	r3, r7
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800abc6:	463b      	mov	r3, r7
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6a1a      	ldr	r2, [r3, #32]
 800abcc:	463b      	mov	r3, r7
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d909      	bls.n	800abea <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 800abd6:	463b      	mov	r3, r7
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6a1a      	ldr	r2, [r3, #32]
 800abdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe0:	1ad2      	subs	r2, r2, r3
 800abe2:	463b      	mov	r3, r7
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	621a      	str	r2, [r3, #32]
 800abe8:	e008      	b.n	800abfc <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 800abea:	463b      	mov	r3, r7
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6a1b      	ldr	r3, [r3, #32]
 800abf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800abf4:	463b      	mov	r3, r7
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2200      	movs	r2, #0
 800abfa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800abfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 821a 	beq.w	800b03a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac06:	463b      	mov	r3, r7
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d164      	bne.n	800acda <USB_EPStartXfer+0xaac>
 800ac10:	1d3b      	adds	r3, r7, #4
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac16:	1d3b      	adds	r3, r7, #4
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac24:	4413      	add	r3, r2
 800ac26:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac28:	463b      	mov	r3, r7
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	00da      	lsls	r2, r3, #3
 800ac30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac32:	4413      	add	r3, r2
 800ac34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ac38:	667b      	str	r3, [r7, #100]	; 0x64
 800ac3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d112      	bne.n	800ac68 <USB_EPStartXfer+0xa3a>
 800ac42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac44:	881b      	ldrh	r3, [r3, #0]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac50:	801a      	strh	r2, [r3, #0]
 800ac52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac64:	801a      	strh	r2, [r3, #0]
 800ac66:	e057      	b.n	800ad18 <USB_EPStartXfer+0xaea>
 800ac68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac6c:	2b3e      	cmp	r3, #62	; 0x3e
 800ac6e:	d817      	bhi.n	800aca0 <USB_EPStartXfer+0xa72>
 800ac70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d004      	beq.n	800ac90 <USB_EPStartXfer+0xa62>
 800ac86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800ac90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	029b      	lsls	r3, r3, #10
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac9c:	801a      	strh	r2, [r3, #0]
 800ac9e:	e03b      	b.n	800ad18 <USB_EPStartXfer+0xaea>
 800aca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca4:	095b      	lsrs	r3, r3, #5
 800aca6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acae:	f003 031f 	and.w	r3, r3, #31
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d104      	bne.n	800acc0 <USB_EPStartXfer+0xa92>
 800acb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acba:	3b01      	subs	r3, #1
 800acbc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	029b      	lsls	r3, r3, #10
 800acc8:	b29b      	uxth	r3, r3
 800acca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd6:	801a      	strh	r2, [r3, #0]
 800acd8:	e01e      	b.n	800ad18 <USB_EPStartXfer+0xaea>
 800acda:	463b      	mov	r3, r7
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d119      	bne.n	800ad18 <USB_EPStartXfer+0xaea>
 800ace4:	1d3b      	adds	r3, r7, #4
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	673b      	str	r3, [r7, #112]	; 0x70
 800acea:	1d3b      	adds	r3, r7, #4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acf8:	4413      	add	r3, r2
 800acfa:	673b      	str	r3, [r7, #112]	; 0x70
 800acfc:	463b      	mov	r3, r7
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	00da      	lsls	r2, r3, #3
 800ad04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad06:	4413      	add	r3, r2
 800ad08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad16:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad18:	463b      	mov	r3, r7
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	891b      	ldrh	r3, [r3, #8]
 800ad1e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad22:	463b      	mov	r3, r7
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6959      	ldr	r1, [r3, #20]
 800ad28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ad32:	1d38      	adds	r0, r7, #4
 800ad34:	6800      	ldr	r0, [r0, #0]
 800ad36:	f000 fecc 	bl	800bad2 <USB_WritePMA>
 800ad3a:	e17e      	b.n	800b03a <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad3c:	463b      	mov	r3, r7
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d16f      	bne.n	800ae26 <USB_EPStartXfer+0xbf8>
 800ad46:	1d3b      	adds	r3, r7, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad4e:	1d3b      	adds	r3, r7, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	461a      	mov	r2, r3
 800ad5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad5e:	4413      	add	r3, r2
 800ad60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad64:	463b      	mov	r3, r7
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	00da      	lsls	r2, r3, #3
 800ad6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad70:	4413      	add	r3, r2
 800ad72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ad76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d116      	bne.n	800adb0 <USB_EPStartXfer+0xb82>
 800ad82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad8e:	b29a      	uxth	r2, r3
 800ad90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad94:	801a      	strh	r2, [r3, #0]
 800ad96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ada2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adac:	801a      	strh	r2, [r3, #0]
 800adae:	e05f      	b.n	800ae70 <USB_EPStartXfer+0xc42>
 800adb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adb4:	2b3e      	cmp	r3, #62	; 0x3e
 800adb6:	d818      	bhi.n	800adea <USB_EPStartXfer+0xbbc>
 800adb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adbc:	085b      	lsrs	r3, r3, #1
 800adbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800adc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc6:	f003 0301 	and.w	r3, r3, #1
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d004      	beq.n	800add8 <USB_EPStartXfer+0xbaa>
 800adce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800add2:	3301      	adds	r3, #1
 800add4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800add8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800addc:	b29b      	uxth	r3, r3
 800adde:	029b      	lsls	r3, r3, #10
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ade6:	801a      	strh	r2, [r3, #0]
 800ade8:	e042      	b.n	800ae70 <USB_EPStartXfer+0xc42>
 800adea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adee:	095b      	lsrs	r3, r3, #5
 800adf0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800adf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf8:	f003 031f 	and.w	r3, r3, #31
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <USB_EPStartXfer+0xbdc>
 800ae00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae04:	3b01      	subs	r3, #1
 800ae06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	029b      	lsls	r3, r3, #10
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae22:	801a      	strh	r2, [r3, #0]
 800ae24:	e024      	b.n	800ae70 <USB_EPStartXfer+0xc42>
 800ae26:	463b      	mov	r3, r7
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	785b      	ldrb	r3, [r3, #1]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d11f      	bne.n	800ae70 <USB_EPStartXfer+0xc42>
 800ae30:	1d3b      	adds	r3, r7, #4
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae38:	1d3b      	adds	r3, r7, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	461a      	mov	r2, r3
 800ae44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae48:	4413      	add	r3, r2
 800ae4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae4e:	463b      	mov	r3, r7
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	00da      	lsls	r2, r3, #3
 800ae56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ae64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae70:	463b      	mov	r3, r7
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	891b      	ldrh	r3, [r3, #8]
 800ae76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae7a:	463b      	mov	r3, r7
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6959      	ldr	r1, [r3, #20]
 800ae80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ae8a:	1d38      	adds	r0, r7, #4
 800ae8c:	6800      	ldr	r0, [r0, #0]
 800ae8e:	f000 fe20 	bl	800bad2 <USB_WritePMA>
          ep->xfer_buff += len;
 800ae92:	463b      	mov	r3, r7
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	695a      	ldr	r2, [r3, #20]
 800ae98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae9c:	441a      	add	r2, r3
 800ae9e:	463b      	mov	r3, r7
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800aea4:	463b      	mov	r3, r7
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	6a1a      	ldr	r2, [r3, #32]
 800aeaa:	463b      	mov	r3, r7
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d909      	bls.n	800aec8 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800aeb4:	463b      	mov	r3, r7
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6a1a      	ldr	r2, [r3, #32]
 800aeba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aebe:	1ad2      	subs	r2, r2, r3
 800aec0:	463b      	mov	r3, r7
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	621a      	str	r2, [r3, #32]
 800aec6:	e008      	b.n	800aeda <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800aec8:	463b      	mov	r3, r7
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6a1b      	ldr	r3, [r3, #32]
 800aece:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800aed2:	463b      	mov	r3, r7
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	2200      	movs	r2, #0
 800aed8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800aeda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 80ab 	beq.w	800b03a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aee4:	1d3b      	adds	r3, r7, #4
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aeec:	463b      	mov	r3, r7
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d16f      	bne.n	800afd6 <USB_EPStartXfer+0xda8>
 800aef6:	1d3b      	adds	r3, r7, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aefe:	1d3b      	adds	r3, r7, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af06:	b29b      	uxth	r3, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af0e:	4413      	add	r3, r2
 800af10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800af14:	463b      	mov	r3, r7
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	00da      	lsls	r2, r3, #3
 800af1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af20:	4413      	add	r3, r2
 800af22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800af2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d116      	bne.n	800af60 <USB_EPStartXfer+0xd32>
 800af32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800af3e:	b29a      	uxth	r2, r3
 800af40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af44:	801a      	strh	r2, [r3, #0]
 800af46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af56:	b29a      	uxth	r2, r3
 800af58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af5c:	801a      	strh	r2, [r3, #0]
 800af5e:	e05b      	b.n	800b018 <USB_EPStartXfer+0xdea>
 800af60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af64:	2b3e      	cmp	r3, #62	; 0x3e
 800af66:	d818      	bhi.n	800af9a <USB_EPStartXfer+0xd6c>
 800af68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af6c:	085b      	lsrs	r3, r3, #1
 800af6e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800af72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <USB_EPStartXfer+0xd5a>
 800af7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af82:	3301      	adds	r3, #1
 800af84:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800af88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	029b      	lsls	r3, r3, #10
 800af90:	b29a      	uxth	r2, r3
 800af92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af96:	801a      	strh	r2, [r3, #0]
 800af98:	e03e      	b.n	800b018 <USB_EPStartXfer+0xdea>
 800af9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af9e:	095b      	lsrs	r3, r3, #5
 800afa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800afa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afa8:	f003 031f 	and.w	r3, r3, #31
 800afac:	2b00      	cmp	r3, #0
 800afae:	d104      	bne.n	800afba <USB_EPStartXfer+0xd8c>
 800afb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afb4:	3b01      	subs	r3, #1
 800afb6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800afba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	029b      	lsls	r3, r3, #10
 800afc2:	b29b      	uxth	r3, r3
 800afc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afcc:	b29a      	uxth	r2, r3
 800afce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800afd2:	801a      	strh	r2, [r3, #0]
 800afd4:	e020      	b.n	800b018 <USB_EPStartXfer+0xdea>
 800afd6:	463b      	mov	r3, r7
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11b      	bne.n	800b018 <USB_EPStartXfer+0xdea>
 800afe0:	1d3b      	adds	r3, r7, #4
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afe8:	b29b      	uxth	r3, r3
 800afea:	461a      	mov	r2, r3
 800afec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aff0:	4413      	add	r3, r2
 800aff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aff6:	463b      	mov	r3, r7
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	00da      	lsls	r2, r3, #3
 800affe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b002:	4413      	add	r3, r2
 800b004:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b008:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b00c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b010:	b29a      	uxth	r2, r3
 800b012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b016:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b018:	463b      	mov	r3, r7
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	895b      	ldrh	r3, [r3, #10]
 800b01e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b022:	463b      	mov	r3, r7
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6959      	ldr	r1, [r3, #20]
 800b028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b032:	1d38      	adds	r0, r7, #4
 800b034:	6800      	ldr	r0, [r0, #0]
 800b036:	f000 fd4c 	bl	800bad2 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b03a:	1d3b      	adds	r3, r7, #4
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	463b      	mov	r3, r7
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f107 020a 	add.w	r2, r7, #10
 800b050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b058:	8013      	strh	r3, [r2, #0]
 800b05a:	f107 030a 	add.w	r3, r7, #10
 800b05e:	f107 020a 	add.w	r2, r7, #10
 800b062:	8812      	ldrh	r2, [r2, #0]
 800b064:	f082 0210 	eor.w	r2, r2, #16
 800b068:	801a      	strh	r2, [r3, #0]
 800b06a:	f107 030a 	add.w	r3, r7, #10
 800b06e:	f107 020a 	add.w	r2, r7, #10
 800b072:	8812      	ldrh	r2, [r2, #0]
 800b074:	f082 0220 	eor.w	r2, r2, #32
 800b078:	801a      	strh	r2, [r3, #0]
 800b07a:	1d3b      	adds	r3, r7, #4
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	463b      	mov	r3, r7
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	441a      	add	r2, r3
 800b088:	f107 030a 	add.w	r3, r7, #10
 800b08c:	881b      	ldrh	r3, [r3, #0]
 800b08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	8013      	strh	r3, [r2, #0]
 800b0a2:	e3b5      	b.n	800b810 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b0a4:	463b      	mov	r3, r7
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	7b1b      	ldrb	r3, [r3, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 8090 	bne.w	800b1d0 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b0b0:	463b      	mov	r3, r7
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699a      	ldr	r2, [r3, #24]
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d90e      	bls.n	800b0de <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 800b0c0:	463b      	mov	r3, r7
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	691b      	ldr	r3, [r3, #16]
 800b0c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b0ca:	463b      	mov	r3, r7
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699a      	ldr	r2, [r3, #24]
 800b0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0d4:	1ad2      	subs	r2, r2, r3
 800b0d6:	463b      	mov	r3, r7
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	619a      	str	r2, [r3, #24]
 800b0dc:	e008      	b.n	800b0f0 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 800b0de:	463b      	mov	r3, r7
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b0e8:	463b      	mov	r3, r7
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0f0:	1d3b      	adds	r3, r7, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0f8:	1d3b      	adds	r3, r7, #4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b100:	b29b      	uxth	r3, r3
 800b102:	461a      	mov	r2, r3
 800b104:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b108:	4413      	add	r3, r2
 800b10a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b10e:	463b      	mov	r3, r7
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	00da      	lsls	r2, r3, #3
 800b116:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b11a:	4413      	add	r3, r2
 800b11c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d116      	bne.n	800b15a <USB_EPStartXfer+0xf2c>
 800b12c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b130:	881b      	ldrh	r3, [r3, #0]
 800b132:	b29b      	uxth	r3, r3
 800b134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b138:	b29a      	uxth	r2, r3
 800b13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b13e:	801a      	strh	r2, [r3, #0]
 800b140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	b29b      	uxth	r3, r3
 800b148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b150:	b29a      	uxth	r2, r3
 800b152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b156:	801a      	strh	r2, [r3, #0]
 800b158:	e32c      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b15e:	2b3e      	cmp	r3, #62	; 0x3e
 800b160:	d818      	bhi.n	800b194 <USB_EPStartXfer+0xf66>
 800b162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b166:	085b      	lsrs	r3, r3, #1
 800b168:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b16c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	d004      	beq.n	800b182 <USB_EPStartXfer+0xf54>
 800b178:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b17c:	3301      	adds	r3, #1
 800b17e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b182:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b186:	b29b      	uxth	r3, r3
 800b188:	029b      	lsls	r3, r3, #10
 800b18a:	b29a      	uxth	r2, r3
 800b18c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	e30f      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b198:	095b      	lsrs	r3, r3, #5
 800b19a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b19e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a2:	f003 031f 	and.w	r3, r3, #31
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d104      	bne.n	800b1b4 <USB_EPStartXfer+0xf86>
 800b1aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b1b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	029b      	lsls	r3, r3, #10
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c6:	b29a      	uxth	r2, r3
 800b1c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	e2f1      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b1d0:	463b      	mov	r3, r7
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	78db      	ldrb	r3, [r3, #3]
 800b1d6:	2b02      	cmp	r3, #2
 800b1d8:	f040 818f 	bne.w	800b4fa <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b1dc:	463b      	mov	r3, r7
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d175      	bne.n	800b2d2 <USB_EPStartXfer+0x10a4>
 800b1e6:	1d3b      	adds	r3, r7, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1ee:	1d3b      	adds	r3, r7, #4
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1fe:	4413      	add	r3, r2
 800b200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b204:	463b      	mov	r3, r7
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	00da      	lsls	r2, r3, #3
 800b20c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b210:	4413      	add	r3, r2
 800b212:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b216:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b21a:	463b      	mov	r3, r7
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d116      	bne.n	800b252 <USB_EPStartXfer+0x1024>
 800b224:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b230:	b29a      	uxth	r2, r3
 800b232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b236:	801a      	strh	r2, [r3, #0]
 800b238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b23c:	881b      	ldrh	r3, [r3, #0]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b248:	b29a      	uxth	r2, r3
 800b24a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b24e:	801a      	strh	r2, [r3, #0]
 800b250:	e065      	b.n	800b31e <USB_EPStartXfer+0x10f0>
 800b252:	463b      	mov	r3, r7
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	2b3e      	cmp	r3, #62	; 0x3e
 800b25a:	d81a      	bhi.n	800b292 <USB_EPStartXfer+0x1064>
 800b25c:	463b      	mov	r3, r7
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691b      	ldr	r3, [r3, #16]
 800b262:	085b      	lsrs	r3, r3, #1
 800b264:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b268:	463b      	mov	r3, r7
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	691b      	ldr	r3, [r3, #16]
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	2b00      	cmp	r3, #0
 800b274:	d004      	beq.n	800b280 <USB_EPStartXfer+0x1052>
 800b276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27a:	3301      	adds	r3, #1
 800b27c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	b29b      	uxth	r3, r3
 800b286:	029b      	lsls	r3, r3, #10
 800b288:	b29a      	uxth	r2, r3
 800b28a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b28e:	801a      	strh	r2, [r3, #0]
 800b290:	e045      	b.n	800b31e <USB_EPStartXfer+0x10f0>
 800b292:	463b      	mov	r3, r7
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691b      	ldr	r3, [r3, #16]
 800b298:	095b      	lsrs	r3, r3, #5
 800b29a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b29e:	463b      	mov	r3, r7
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	f003 031f 	and.w	r3, r3, #31
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d104      	bne.n	800b2b6 <USB_EPStartXfer+0x1088>
 800b2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	029b      	lsls	r3, r3, #10
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b2ce:	801a      	strh	r2, [r3, #0]
 800b2d0:	e025      	b.n	800b31e <USB_EPStartXfer+0x10f0>
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d120      	bne.n	800b31e <USB_EPStartXfer+0x10f0>
 800b2dc:	1d3b      	adds	r3, r7, #4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2e4:	1d3b      	adds	r3, r7, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2fa:	463b      	mov	r3, r7
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	00da      	lsls	r2, r3, #3
 800b302:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b306:	4413      	add	r3, r2
 800b308:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b30c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b310:	463b      	mov	r3, r7
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	b29a      	uxth	r2, r3
 800b318:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b31c:	801a      	strh	r2, [r3, #0]
 800b31e:	1d3b      	adds	r3, r7, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b326:	463b      	mov	r3, r7
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	785b      	ldrb	r3, [r3, #1]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d175      	bne.n	800b41c <USB_EPStartXfer+0x11ee>
 800b330:	1d3b      	adds	r3, r7, #4
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b338:	1d3b      	adds	r3, r7, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b340:	b29b      	uxth	r3, r3
 800b342:	461a      	mov	r2, r3
 800b344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b348:	4413      	add	r3, r2
 800b34a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b34e:	463b      	mov	r3, r7
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	00da      	lsls	r2, r3, #3
 800b356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b35a:	4413      	add	r3, r2
 800b35c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b364:	463b      	mov	r3, r7
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d116      	bne.n	800b39c <USB_EPStartXfer+0x116e>
 800b36e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b29b      	uxth	r3, r3
 800b376:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b380:	801a      	strh	r2, [r3, #0]
 800b382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b38e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b392:	b29a      	uxth	r2, r3
 800b394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b398:	801a      	strh	r2, [r3, #0]
 800b39a:	e061      	b.n	800b460 <USB_EPStartXfer+0x1232>
 800b39c:	463b      	mov	r3, r7
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	2b3e      	cmp	r3, #62	; 0x3e
 800b3a4:	d81a      	bhi.n	800b3dc <USB_EPStartXfer+0x11ae>
 800b3a6:	463b      	mov	r3, r7
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	085b      	lsrs	r3, r3, #1
 800b3ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <USB_EPStartXfer+0x119c>
 800b3c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	029b      	lsls	r3, r3, #10
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3d8:	801a      	strh	r2, [r3, #0]
 800b3da:	e041      	b.n	800b460 <USB_EPStartXfer+0x1232>
 800b3dc:	463b      	mov	r3, r7
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	f003 031f 	and.w	r3, r3, #31
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d104      	bne.n	800b400 <USB_EPStartXfer+0x11d2>
 800b3f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b3fa:	3b01      	subs	r3, #1
 800b3fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b400:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b404:	b29b      	uxth	r3, r3
 800b406:	029b      	lsls	r3, r3, #10
 800b408:	b29b      	uxth	r3, r3
 800b40a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b40e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b412:	b29a      	uxth	r2, r3
 800b414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b418:	801a      	strh	r2, [r3, #0]
 800b41a:	e021      	b.n	800b460 <USB_EPStartXfer+0x1232>
 800b41c:	463b      	mov	r3, r7
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	785b      	ldrb	r3, [r3, #1]
 800b422:	2b01      	cmp	r3, #1
 800b424:	d11c      	bne.n	800b460 <USB_EPStartXfer+0x1232>
 800b426:	1d3b      	adds	r3, r7, #4
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b42e:	b29b      	uxth	r3, r3
 800b430:	461a      	mov	r2, r3
 800b432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b436:	4413      	add	r3, r2
 800b438:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b43c:	463b      	mov	r3, r7
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	00da      	lsls	r2, r3, #3
 800b444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b448:	4413      	add	r3, r2
 800b44a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b44e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b452:	463b      	mov	r3, r7
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	b29a      	uxth	r2, r3
 800b45a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b45e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b460:	463b      	mov	r3, r7
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 81a4 	beq.w	800b7b4 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b46c:	1d3b      	adds	r3, r7, #4
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	463b      	mov	r3, r7
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b480:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <USB_EPStartXfer+0x126a>
 800b48c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10d      	bne.n	800b4b4 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b498:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b49c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f040 8187 	bne.w	800b7b4 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b4a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f040 8180 	bne.w	800b7b4 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b4b4:	1d3b      	adds	r3, r7, #4
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ce:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b4d2:	1d3b      	adds	r3, r7, #4
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	441a      	add	r2, r3
 800b4e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b4e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	8013      	strh	r3, [r2, #0]
 800b4f8:	e15c      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	78db      	ldrb	r3, [r3, #3]
 800b500:	2b01      	cmp	r3, #1
 800b502:	f040 8155 	bne.w	800b7b0 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b506:	463b      	mov	r3, r7
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	699a      	ldr	r2, [r3, #24]
 800b50c:	463b      	mov	r3, r7
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	429a      	cmp	r2, r3
 800b514:	d90e      	bls.n	800b534 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800b516:	463b      	mov	r3, r7
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800b520:	463b      	mov	r3, r7
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	699a      	ldr	r2, [r3, #24]
 800b526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b52a:	1ad2      	subs	r2, r2, r3
 800b52c:	463b      	mov	r3, r7
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	619a      	str	r2, [r3, #24]
 800b532:	e008      	b.n	800b546 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800b534:	463b      	mov	r3, r7
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800b53e:	463b      	mov	r3, r7
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2200      	movs	r2, #0
 800b544:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b546:	463b      	mov	r3, r7
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d16f      	bne.n	800b630 <USB_EPStartXfer+0x1402>
 800b550:	1d3b      	adds	r3, r7, #4
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b558:	1d3b      	adds	r3, r7, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b560:	b29b      	uxth	r3, r3
 800b562:	461a      	mov	r2, r3
 800b564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b568:	4413      	add	r3, r2
 800b56a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b56e:	463b      	mov	r3, r7
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	00da      	lsls	r2, r3, #3
 800b576:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b57a:	4413      	add	r3, r2
 800b57c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d116      	bne.n	800b5ba <USB_EPStartXfer+0x138c>
 800b58c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	b29b      	uxth	r3, r3
 800b594:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b598:	b29a      	uxth	r2, r3
 800b59a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b59e:	801a      	strh	r2, [r3, #0]
 800b5a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b5a4:	881b      	ldrh	r3, [r3, #0]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b5b6:	801a      	strh	r2, [r3, #0]
 800b5b8:	e05f      	b.n	800b67a <USB_EPStartXfer+0x144c>
 800b5ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5be:	2b3e      	cmp	r3, #62	; 0x3e
 800b5c0:	d818      	bhi.n	800b5f4 <USB_EPStartXfer+0x13c6>
 800b5c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5c6:	085b      	lsrs	r3, r3, #1
 800b5c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d004      	beq.n	800b5e2 <USB_EPStartXfer+0x13b4>
 800b5d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5dc:	3301      	adds	r3, #1
 800b5de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	029b      	lsls	r3, r3, #10
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b5f0:	801a      	strh	r2, [r3, #0]
 800b5f2:	e042      	b.n	800b67a <USB_EPStartXfer+0x144c>
 800b5f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b5f8:	095b      	lsrs	r3, r3, #5
 800b5fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b602:	f003 031f 	and.w	r3, r3, #31
 800b606:	2b00      	cmp	r3, #0
 800b608:	d104      	bne.n	800b614 <USB_EPStartXfer+0x13e6>
 800b60a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b60e:	3b01      	subs	r3, #1
 800b610:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b618:	b29b      	uxth	r3, r3
 800b61a:	029b      	lsls	r3, r3, #10
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b626:	b29a      	uxth	r2, r3
 800b628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	e024      	b.n	800b67a <USB_EPStartXfer+0x144c>
 800b630:	463b      	mov	r3, r7
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d11f      	bne.n	800b67a <USB_EPStartXfer+0x144c>
 800b63a:	1d3b      	adds	r3, r7, #4
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b642:	1d3b      	adds	r3, r7, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b652:	4413      	add	r3, r2
 800b654:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b658:	463b      	mov	r3, r7
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	00da      	lsls	r2, r3, #3
 800b660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b664:	4413      	add	r3, r2
 800b666:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b66a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b66e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b672:	b29a      	uxth	r2, r3
 800b674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b678:	801a      	strh	r2, [r3, #0]
 800b67a:	1d3b      	adds	r3, r7, #4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b682:	463b      	mov	r3, r7
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	785b      	ldrb	r3, [r3, #1]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d16f      	bne.n	800b76c <USB_EPStartXfer+0x153e>
 800b68c:	1d3b      	adds	r3, r7, #4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b694:	1d3b      	adds	r3, r7, #4
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6aa:	463b      	mov	r3, r7
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	00da      	lsls	r2, r3, #3
 800b6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d116      	bne.n	800b6f6 <USB_EPStartXfer+0x14c8>
 800b6c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6da:	801a      	strh	r2, [r3, #0]
 800b6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6f2:	801a      	strh	r2, [r3, #0]
 800b6f4:	e05e      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b6f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b6fa:	2b3e      	cmp	r3, #62	; 0x3e
 800b6fc:	d818      	bhi.n	800b730 <USB_EPStartXfer+0x1502>
 800b6fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b702:	085b      	lsrs	r3, r3, #1
 800b704:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <USB_EPStartXfer+0x14f0>
 800b714:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b718:	3301      	adds	r3, #1
 800b71a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b71e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b722:	b29b      	uxth	r3, r3
 800b724:	029b      	lsls	r3, r3, #10
 800b726:	b29a      	uxth	r2, r3
 800b728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b72c:	801a      	strh	r2, [r3, #0]
 800b72e:	e041      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b734:	095b      	lsrs	r3, r3, #5
 800b736:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b73a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b73e:	f003 031f 	and.w	r3, r3, #31
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <USB_EPStartXfer+0x1522>
 800b746:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b74a:	3b01      	subs	r3, #1
 800b74c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b750:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b754:	b29b      	uxth	r3, r3
 800b756:	029b      	lsls	r3, r3, #10
 800b758:	b29b      	uxth	r3, r3
 800b75a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b75e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b762:	b29a      	uxth	r2, r3
 800b764:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b768:	801a      	strh	r2, [r3, #0]
 800b76a:	e023      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b76c:	463b      	mov	r3, r7
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	785b      	ldrb	r3, [r3, #1]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d11e      	bne.n	800b7b4 <USB_EPStartXfer+0x1586>
 800b776:	1d3b      	adds	r3, r7, #4
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b77e:	b29b      	uxth	r3, r3
 800b780:	461a      	mov	r2, r3
 800b782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b786:	4413      	add	r3, r2
 800b788:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b78c:	463b      	mov	r3, r7
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	00da      	lsls	r2, r3, #3
 800b794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b798:	4413      	add	r3, r2
 800b79a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b79e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7ac:	801a      	strh	r2, [r3, #0]
 800b7ae:	e001      	b.n	800b7b4 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e02e      	b.n	800b812 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b7b4:	1d3b      	adds	r3, r7, #4
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b7d2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b7d6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b7da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b7de:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b7e2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b7e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800b7ea:	1d3b      	adds	r3, r7, #4
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	441a      	add	r2, r3
 800b7f8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b7fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d020      	beq.n	800b870 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b844:	81bb      	strh	r3, [r7, #12]
 800b846:	89bb      	ldrh	r3, [r7, #12]
 800b848:	f083 0310 	eor.w	r3, r3, #16
 800b84c:	81bb      	strh	r3, [r7, #12]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	009b      	lsls	r3, r3, #2
 800b856:	441a      	add	r2, r3
 800b858:	89bb      	ldrh	r3, [r7, #12]
 800b85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	8013      	strh	r3, [r2, #0]
 800b86e:	e01f      	b.n	800b8b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	4413      	add	r3, r2
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b886:	81fb      	strh	r3, [r7, #14]
 800b888:	89fb      	ldrh	r3, [r7, #14]
 800b88a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b88e:	81fb      	strh	r3, [r7, #14]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	441a      	add	r2, r3
 800b89a:	89fb      	ldrh	r3, [r7, #14]
 800b89c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b087      	sub	sp, #28
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	7b1b      	ldrb	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f040 809d 	bne.w	800ba0c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	785b      	ldrb	r3, [r3, #1]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d04c      	beq.n	800b974 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	4413      	add	r3, r2
 800b8e4:	881b      	ldrh	r3, [r3, #0]
 800b8e6:	823b      	strh	r3, [r7, #16]
 800b8e8:	8a3b      	ldrh	r3, [r7, #16]
 800b8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01b      	beq.n	800b92a <USB_EPClearStall+0x6c>
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	881b      	ldrh	r3, [r3, #0]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b908:	81fb      	strh	r3, [r7, #14]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	441a      	add	r2, r3
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b91a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b91e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b926:	b29b      	uxth	r3, r3
 800b928:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	78db      	ldrb	r3, [r3, #3]
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d06c      	beq.n	800ba0c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	b29b      	uxth	r3, r3
 800b940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b948:	81bb      	strh	r3, [r7, #12]
 800b94a:	89bb      	ldrh	r3, [r7, #12]
 800b94c:	f083 0320 	eor.w	r3, r3, #32
 800b950:	81bb      	strh	r3, [r7, #12]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	441a      	add	r2, r3
 800b95c:	89bb      	ldrh	r3, [r7, #12]
 800b95e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b96e:	b29b      	uxth	r3, r3
 800b970:	8013      	strh	r3, [r2, #0]
 800b972:	e04b      	b.n	800ba0c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	82fb      	strh	r3, [r7, #22]
 800b982:	8afb      	ldrh	r3, [r7, #22]
 800b984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01b      	beq.n	800b9c4 <USB_EPClearStall+0x106>
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	009b      	lsls	r3, r3, #2
 800b994:	4413      	add	r3, r2
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a2:	82bb      	strh	r3, [r7, #20]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	441a      	add	r2, r3
 800b9ae:	8abb      	ldrh	r3, [r7, #20]
 800b9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4413      	add	r3, r2
 800b9ce:	881b      	ldrh	r3, [r3, #0]
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9da:	827b      	strh	r3, [r7, #18]
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b9e2:	827b      	strh	r3, [r7, #18]
 800b9e4:	8a7b      	ldrh	r3, [r7, #18]
 800b9e6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b9ea:	827b      	strh	r3, [r7, #18]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	441a      	add	r2, r3
 800b9f6:	8a7b      	ldrh	r3, [r7, #18]
 800b9f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	371c      	adds	r7, #28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b083      	sub	sp, #12
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ba26:	78fb      	ldrb	r3, [r7, #3]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d103      	bne.n	800ba34 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2280      	movs	r2, #128	; 0x80
 800ba30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ba42:	b480      	push	{r7}
 800ba44:	b083      	sub	sp, #12
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba7e:	b29b      	uxth	r3, r3
 800ba80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ba84:	b29a      	uxth	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	370c      	adds	r7, #12
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b085      	sub	sp, #20
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800baac:	68fb      	ldr	r3, [r7, #12]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3714      	adds	r7, #20
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b08d      	sub	sp, #52	; 0x34
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	60f8      	str	r0, [r7, #12]
 800bada:	60b9      	str	r1, [r7, #8]
 800badc:	4611      	mov	r1, r2
 800bade:	461a      	mov	r2, r3
 800bae0:	460b      	mov	r3, r1
 800bae2:	80fb      	strh	r3, [r7, #6]
 800bae4:	4613      	mov	r3, r2
 800bae6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bae8:	88bb      	ldrh	r3, [r7, #4]
 800baea:	3301      	adds	r3, #1
 800baec:	085b      	lsrs	r3, r3, #1
 800baee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb02:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bb04:	6a3b      	ldr	r3, [r7, #32]
 800bb06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb08:	e01b      	b.n	800bb42 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bb10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb12:	3301      	adds	r3, #1
 800bb14:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	461a      	mov	r2, r3
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb32:	3302      	adds	r3, #2
 800bb34:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	3301      	adds	r3, #1
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1e0      	bne.n	800bb0a <USB_WritePMA+0x38>
  }
}
 800bb48:	bf00      	nop
 800bb4a:	bf00      	nop
 800bb4c:	3734      	adds	r7, #52	; 0x34
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr

0800bb56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bb56:	b480      	push	{r7}
 800bb58:	b08b      	sub	sp, #44	; 0x2c
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	4611      	mov	r1, r2
 800bb62:	461a      	mov	r2, r3
 800bb64:	460b      	mov	r3, r1
 800bb66:	80fb      	strh	r3, [r7, #6]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bb6c:	88bb      	ldrh	r3, [r7, #4]
 800bb6e:	085b      	lsrs	r3, r3, #1
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bb7c:	88fa      	ldrh	r2, [r7, #6]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	4413      	add	r3, r2
 800bb82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb86:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	627b      	str	r3, [r7, #36]	; 0x24
 800bb8c:	e018      	b.n	800bbc0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bb96:	6a3b      	ldr	r3, [r7, #32]
 800bb98:	3302      	adds	r3, #2
 800bb9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	3301      	adds	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	0a1b      	lsrs	r3, r3, #8
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1e3      	bne.n	800bb8e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800bbc6:	88bb      	ldrh	r3, [r7, #4]
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	b29b      	uxth	r3, r3
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d007      	beq.n	800bbe2 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	701a      	strb	r2, [r3, #0]
  }
}
 800bbe2:	bf00      	nop
 800bbe4:	372c      	adds	r7, #44	; 0x2c
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b084      	sub	sp, #16
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bbfa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bbfe:	f002 f99b 	bl	800df38 <USBD_static_malloc>
 800bc02:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d105      	bne.n	800bc16 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bc12:	2302      	movs	r3, #2
 800bc14:	e066      	b.n	800bce4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7c1b      	ldrb	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d119      	bne.n	800bc5a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc2a:	2202      	movs	r2, #2
 800bc2c:	2181      	movs	r1, #129	; 0x81
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 ff84 	bl	800db3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc3e:	2202      	movs	r2, #2
 800bc40:	2101      	movs	r1, #1
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f001 ff7a 	bl	800db3c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2210      	movs	r2, #16
 800bc54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bc58:	e016      	b.n	800bc88 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc5a:	2340      	movs	r3, #64	; 0x40
 800bc5c:	2202      	movs	r2, #2
 800bc5e:	2181      	movs	r1, #129	; 0x81
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f001 ff6b 	bl	800db3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc6c:	2340      	movs	r3, #64	; 0x40
 800bc6e:	2202      	movs	r2, #2
 800bc70:	2101      	movs	r1, #1
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 ff62 	bl	800db3c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2210      	movs	r2, #16
 800bc84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc88:	2308      	movs	r3, #8
 800bc8a:	2203      	movs	r2, #3
 800bc8c:	2182      	movs	r1, #130	; 0x82
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f001 ff54 	bl	800db3c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7c1b      	ldrb	r3, [r3, #16]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d109      	bne.n	800bcd2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcc8:	2101      	movs	r1, #1
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f002 f8b2 	bl	800de34 <USBD_LL_PrepareReceive>
 800bcd0:	e007      	b.n	800bce2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcd8:	2340      	movs	r3, #64	; 0x40
 800bcda:	2101      	movs	r1, #1
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f002 f8a9 	bl	800de34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bce2:	2300      	movs	r3, #0
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3710      	adds	r7, #16
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bcf8:	2181      	movs	r1, #129	; 0x81
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f001 ff5c 	bl	800dbb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd06:	2101      	movs	r1, #1
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f001 ff55 	bl	800dbb8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd16:	2182      	movs	r1, #130	; 0x82
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 ff4d 	bl	800dbb8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00e      	beq.n	800bd56 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f002 f903 	bl	800df54 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b086      	sub	sp, #24
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bd72:	2300      	movs	r3, #0
 800bd74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e0af      	b.n	800bee8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d03f      	beq.n	800be14 <USBD_CDC_Setup+0xb4>
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	f040 809f 	bne.w	800bed8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	88db      	ldrh	r3, [r3, #6]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d02e      	beq.n	800be00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	b25b      	sxtb	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	da16      	bge.n	800bdda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bdb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	88d2      	ldrh	r2, [r2, #6]
 800bdbe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	88db      	ldrh	r3, [r3, #6]
 800bdc4:	2b07      	cmp	r3, #7
 800bdc6:	bf28      	it	cs
 800bdc8:	2307      	movcs	r3, #7
 800bdca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	89fa      	ldrh	r2, [r7, #14]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f001 fa9f 	bl	800d316 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800bdd8:	e085      	b.n	800bee6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	785a      	ldrb	r2, [r3, #1]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	88db      	ldrh	r3, [r3, #6]
 800bde8:	b2da      	uxtb	r2, r3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800bdf0:	6939      	ldr	r1, [r7, #16]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	88db      	ldrh	r3, [r3, #6]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f001 fab8 	bl	800d36e <USBD_CtlPrepareRx>
      break;
 800bdfe:	e072      	b.n	800bee6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	7850      	ldrb	r0, [r2, #1]
 800be0c:	2200      	movs	r2, #0
 800be0e:	6839      	ldr	r1, [r7, #0]
 800be10:	4798      	blx	r3
      break;
 800be12:	e068      	b.n	800bee6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	785b      	ldrb	r3, [r3, #1]
 800be18:	2b0b      	cmp	r3, #11
 800be1a:	d852      	bhi.n	800bec2 <USBD_CDC_Setup+0x162>
 800be1c:	a201      	add	r2, pc, #4	; (adr r2, 800be24 <USBD_CDC_Setup+0xc4>)
 800be1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be22:	bf00      	nop
 800be24:	0800be55 	.word	0x0800be55
 800be28:	0800bed1 	.word	0x0800bed1
 800be2c:	0800bec3 	.word	0x0800bec3
 800be30:	0800bec3 	.word	0x0800bec3
 800be34:	0800bec3 	.word	0x0800bec3
 800be38:	0800bec3 	.word	0x0800bec3
 800be3c:	0800bec3 	.word	0x0800bec3
 800be40:	0800bec3 	.word	0x0800bec3
 800be44:	0800bec3 	.word	0x0800bec3
 800be48:	0800bec3 	.word	0x0800bec3
 800be4c:	0800be7f 	.word	0x0800be7f
 800be50:	0800bea9 	.word	0x0800bea9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	d107      	bne.n	800be70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be60:	f107 030a 	add.w	r3, r7, #10
 800be64:	2202      	movs	r2, #2
 800be66:	4619      	mov	r1, r3
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f001 fa54 	bl	800d316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be6e:	e032      	b.n	800bed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f001 f9de 	bl	800d234 <USBD_CtlError>
            ret = USBD_FAIL;
 800be78:	2303      	movs	r3, #3
 800be7a:	75fb      	strb	r3, [r7, #23]
          break;
 800be7c:	e02b      	b.n	800bed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be84:	b2db      	uxtb	r3, r3
 800be86:	2b03      	cmp	r3, #3
 800be88:	d107      	bne.n	800be9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be8a:	f107 030d 	add.w	r3, r7, #13
 800be8e:	2201      	movs	r2, #1
 800be90:	4619      	mov	r1, r3
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f001 fa3f 	bl	800d316 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be98:	e01d      	b.n	800bed6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f001 f9c9 	bl	800d234 <USBD_CtlError>
            ret = USBD_FAIL;
 800bea2:	2303      	movs	r3, #3
 800bea4:	75fb      	strb	r3, [r7, #23]
          break;
 800bea6:	e016      	b.n	800bed6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b03      	cmp	r3, #3
 800beb2:	d00f      	beq.n	800bed4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f001 f9bc 	bl	800d234 <USBD_CtlError>
            ret = USBD_FAIL;
 800bebc:	2303      	movs	r3, #3
 800bebe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bec0:	e008      	b.n	800bed4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f001 f9b5 	bl	800d234 <USBD_CtlError>
          ret = USBD_FAIL;
 800beca:	2303      	movs	r3, #3
 800becc:	75fb      	strb	r3, [r7, #23]
          break;
 800bece:	e002      	b.n	800bed6 <USBD_CDC_Setup+0x176>
          break;
 800bed0:	bf00      	nop
 800bed2:	e008      	b.n	800bee6 <USBD_CDC_Setup+0x186>
          break;
 800bed4:	bf00      	nop
      }
      break;
 800bed6:	e006      	b.n	800bee6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f001 f9aa 	bl	800d234 <USBD_CtlError>
      ret = USBD_FAIL;
 800bee0:	2303      	movs	r3, #3
 800bee2:	75fb      	strb	r3, [r7, #23]
      break;
 800bee4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}

0800bef0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	460b      	mov	r3, r1
 800befa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d101      	bne.n	800bf12 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf0e:	2303      	movs	r3, #3
 800bf10:	e04f      	b.n	800bfb2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf1a:	78fa      	ldrb	r2, [r7, #3]
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	440b      	add	r3, r1
 800bf28:	3318      	adds	r3, #24
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d029      	beq.n	800bf84 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bf30:	78fa      	ldrb	r2, [r7, #3]
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	4613      	mov	r3, r2
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	440b      	add	r3, r1
 800bf3e:	3318      	adds	r3, #24
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	78f9      	ldrb	r1, [r7, #3]
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	460b      	mov	r3, r1
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	00db      	lsls	r3, r3, #3
 800bf4e:	4403      	add	r3, r0
 800bf50:	3338      	adds	r3, #56	; 0x38
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf58:	fb03 f301 	mul.w	r3, r3, r1
 800bf5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d110      	bne.n	800bf84 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bf62:	78fa      	ldrb	r2, [r7, #3]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	4613      	mov	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	3318      	adds	r3, #24
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf76:	78f9      	ldrb	r1, [r7, #3]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f001 ff21 	bl	800ddc4 <USBD_LL_Transmit>
 800bf82:	e015      	b.n	800bfb0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00b      	beq.n	800bfb0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bfac:	78fa      	ldrb	r2, [r7, #3]
 800bfae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bfb0:	2300      	movs	r3, #0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b084      	sub	sp, #16
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfcc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d101      	bne.n	800bfdc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e015      	b.n	800c008 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bfdc:	78fb      	ldrb	r3, [r7, #3]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f001 ff5f 	bl	800dea4 <USBD_LL_GetRxDataSize>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c002:	4611      	mov	r1, r2
 800c004:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c01e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	e01b      	b.n	800c062 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d015      	beq.n	800c060 <USBD_CDC_EP0_RxReady+0x50>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c03a:	2bff      	cmp	r3, #255	; 0xff
 800c03c:	d010      	beq.n	800c060 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c04c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c054:	b292      	uxth	r2, r2
 800c056:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	22ff      	movs	r2, #255	; 0xff
 800c05c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2243      	movs	r2, #67	; 0x43
 800c078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c07a:	4b03      	ldr	r3, [pc, #12]	; (800c088 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	200000b4 	.word	0x200000b4

0800c08c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2243      	movs	r2, #67	; 0x43
 800c098:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c09a:	4b03      	ldr	r3, [pc, #12]	; (800c0a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	20000070 	.word	0x20000070

0800c0ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2243      	movs	r2, #67	; 0x43
 800c0b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c0ba:	4b03      	ldr	r3, [pc, #12]	; (800c0c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	200000f8 	.word	0x200000f8

0800c0cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	220a      	movs	r2, #10
 800c0d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c0da:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr
 800c0e8:	2000002c 	.word	0x2000002c

0800c0ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d101      	bne.n	800c100 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e004      	b.n	800c10a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c114:	4770      	bx	lr

0800c116 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c116:	b480      	push	{r7}
 800c118:	b087      	sub	sp, #28
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c128:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c130:	2303      	movs	r3, #3
 800c132:	e008      	b.n	800c146 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c144:	2300      	movs	r3, #0
}
 800c146:	4618      	mov	r0, r3
 800c148:	371c      	adds	r7, #28
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c152:	b480      	push	{r7}
 800c154:	b085      	sub	sp, #20
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c162:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d101      	bne.n	800c16e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c16a:	2303      	movs	r3, #3
 800c16c:	e004      	b.n	800c178 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3714      	adds	r7, #20
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr

0800c184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e016      	b.n	800c1d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	7c1b      	ldrb	r3, [r3, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d109      	bne.n	800c1be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1b4:	2101      	movs	r1, #1
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 fe3c 	bl	800de34 <USBD_LL_PrepareReceive>
 800c1bc:	e007      	b.n	800c1ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c1c4:	2340      	movs	r3, #64	; 0x40
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f001 fe33 	bl	800de34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d101      	bne.n	800c1f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e01f      	b.n	800c230 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2201      	movs	r2, #1
 800c21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	79fa      	ldrb	r2, [r7, #7]
 800c222:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f001 fbf5 	bl	800da14 <USBD_LL_Init>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c24c:	2303      	movs	r3, #3
 800c24e:	e016      	b.n	800c27e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	683a      	ldr	r2, [r7, #0]
 800c254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00b      	beq.n	800c27c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26c:	f107 020e 	add.w	r2, r7, #14
 800c270:	4610      	mov	r0, r2
 800c272:	4798      	blx	r3
 800c274:	4602      	mov	r2, r0
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c27c:	2300      	movs	r3, #0
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3710      	adds	r7, #16
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f001 fc22 	bl	800dad8 <USBD_LL_Start>
 800c294:	4603      	mov	r3, r0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d009      	beq.n	800c2e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	78fa      	ldrb	r2, [r7, #3]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	4798      	blx	r3
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d007      	beq.n	800c312 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	78fa      	ldrb	r2, [r7, #3]
 800c30c:	4611      	mov	r1, r2
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	4798      	blx	r3
  }

  return USBD_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 ff46 	bl	800d1c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c342:	461a      	mov	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c350:	f003 031f 	and.w	r3, r3, #31
 800c354:	2b02      	cmp	r3, #2
 800c356:	d01a      	beq.n	800c38e <USBD_LL_SetupStage+0x72>
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d822      	bhi.n	800c3a2 <USBD_LL_SetupStage+0x86>
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d002      	beq.n	800c366 <USBD_LL_SetupStage+0x4a>
 800c360:	2b01      	cmp	r3, #1
 800c362:	d00a      	beq.n	800c37a <USBD_LL_SetupStage+0x5e>
 800c364:	e01d      	b.n	800c3a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 f9ee 	bl	800c750 <USBD_StdDevReq>
 800c374:	4603      	mov	r3, r0
 800c376:	73fb      	strb	r3, [r7, #15]
      break;
 800c378:	e020      	b.n	800c3bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fa52 	bl	800c82c <USBD_StdItfReq>
 800c388:	4603      	mov	r3, r0
 800c38a:	73fb      	strb	r3, [r7, #15]
      break;
 800c38c:	e016      	b.n	800c3bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c394:	4619      	mov	r1, r3
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fa91 	bl	800c8be <USBD_StdEPReq>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]
      break;
 800c3a0:	e00c      	b.n	800c3bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3ac:	b2db      	uxtb	r3, r3
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f001 fc37 	bl	800dc24 <USBD_LL_StallEP>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c3ba:	bf00      	nop
  }

  return ret;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b086      	sub	sp, #24
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	607a      	str	r2, [r7, #4]
 800c3d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c3d4:	7afb      	ldrb	r3, [r7, #11]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d138      	bne.n	800c44c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c3e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d14a      	bne.n	800c482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	689a      	ldr	r2, [r3, #8]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	68db      	ldr	r3, [r3, #12]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d913      	bls.n	800c420 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	689a      	ldr	r2, [r3, #8]
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	1ad2      	subs	r2, r2, r3
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	68da      	ldr	r2, [r3, #12]
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	4293      	cmp	r3, r2
 800c410:	bf28      	it	cs
 800c412:	4613      	movcs	r3, r2
 800c414:	461a      	mov	r2, r3
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 ffc5 	bl	800d3a8 <USBD_CtlContinueRx>
 800c41e:	e030      	b.n	800c482 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b03      	cmp	r3, #3
 800c42a:	d10b      	bne.n	800c444 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d005      	beq.n	800c444 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f000 ffc0 	bl	800d3ca <USBD_CtlSendStatus>
 800c44a:	e01a      	b.n	800c482 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c452:	b2db      	uxtb	r3, r3
 800c454:	2b03      	cmp	r3, #3
 800c456:	d114      	bne.n	800c482 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45e:	699b      	ldr	r3, [r3, #24]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00e      	beq.n	800c482 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	7afa      	ldrb	r2, [r7, #11]
 800c46e:	4611      	mov	r1, r2
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	4798      	blx	r3
 800c474:	4603      	mov	r3, r0
 800c476:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d001      	beq.n	800c482 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	e000      	b.n	800c484 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3718      	adds	r7, #24
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b086      	sub	sp, #24
 800c490:	af00      	add	r7, sp, #0
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	460b      	mov	r3, r1
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c49a:	7afb      	ldrb	r3, [r7, #11]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d16b      	bne.n	800c578 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3314      	adds	r3, #20
 800c4a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ac:	2b02      	cmp	r3, #2
 800c4ae:	d156      	bne.n	800c55e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	68db      	ldr	r3, [r3, #12]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d914      	bls.n	800c4e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	1ad2      	subs	r2, r2, r3
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	6879      	ldr	r1, [r7, #4]
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 ff3a 	bl	800d34c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4d8:	2300      	movs	r3, #0
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2100      	movs	r1, #0
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f001 fca8 	bl	800de34 <USBD_LL_PrepareReceive>
 800c4e4:	e03b      	b.n	800c55e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	68da      	ldr	r2, [r3, #12]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d11c      	bne.n	800c52c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	685a      	ldr	r2, [r3, #4]
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d316      	bcc.n	800c52c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	685a      	ldr	r2, [r3, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c508:	429a      	cmp	r2, r3
 800c50a:	d20f      	bcs.n	800c52c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c50c:	2200      	movs	r2, #0
 800c50e:	2100      	movs	r1, #0
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f000 ff1b 	bl	800d34c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c51e:	2300      	movs	r3, #0
 800c520:	2200      	movs	r2, #0
 800c522:	2100      	movs	r1, #0
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f001 fc85 	bl	800de34 <USBD_LL_PrepareReceive>
 800c52a:	e018      	b.n	800c55e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b03      	cmp	r3, #3
 800c536:	d10b      	bne.n	800c550 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d005      	beq.n	800c550 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	68f8      	ldr	r0, [r7, #12]
 800c54e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c550:	2180      	movs	r1, #128	; 0x80
 800c552:	68f8      	ldr	r0, [r7, #12]
 800c554:	f001 fb66 	bl	800dc24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f000 ff49 	bl	800d3f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c564:	2b01      	cmp	r3, #1
 800c566:	d122      	bne.n	800c5ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7ff fe98 	bl	800c29e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2200      	movs	r2, #0
 800c572:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c576:	e01a      	b.n	800c5ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b03      	cmp	r3, #3
 800c582:	d114      	bne.n	800c5ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c58a:	695b      	ldr	r3, [r3, #20]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00e      	beq.n	800c5ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	7afa      	ldrb	r2, [r7, #11]
 800c59a:	4611      	mov	r1, r2
 800c59c:	68f8      	ldr	r0, [r7, #12]
 800c59e:	4798      	blx	r3
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d001      	beq.n	800c5ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	e000      	b.n	800c5b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3718      	adds	r7, #24
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e02f      	b.n	800c64c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00f      	beq.n	800c616 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d009      	beq.n	800c616 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	6852      	ldr	r2, [r2, #4]
 800c60e:	b2d2      	uxtb	r2, r2
 800c610:	4611      	mov	r1, r2
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c616:	2340      	movs	r3, #64	; 0x40
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f001 fa8d 	bl	800db3c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2240      	movs	r2, #64	; 0x40
 800c62e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c632:	2340      	movs	r3, #64	; 0x40
 800c634:	2200      	movs	r2, #0
 800c636:	2180      	movs	r1, #128	; 0x80
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f001 fa7f 	bl	800db3c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2240      	movs	r2, #64	; 0x40
 800c648:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	460b      	mov	r3, r1
 800c65e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c682:	b2da      	uxtb	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2204      	movs	r2, #4
 800c68e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d106      	bne.n	800c6c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d101      	bne.n	800c6e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c6e2:	2303      	movs	r3, #3
 800c6e4:	e012      	b.n	800c70c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d10b      	bne.n	800c70a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d005      	beq.n	800c70a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c714:	b480      	push	{r7}
 800c716:	b087      	sub	sp, #28
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	3301      	adds	r3, #1
 800c72a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c732:	8a3b      	ldrh	r3, [r7, #16]
 800c734:	021b      	lsls	r3, r3, #8
 800c736:	b21a      	sxth	r2, r3
 800c738:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c73c:	4313      	orrs	r3, r2
 800c73e:	b21b      	sxth	r3, r3
 800c740:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c742:	89fb      	ldrh	r3, [r7, #14]
}
 800c744:	4618      	mov	r0, r3
 800c746:	371c      	adds	r7, #28
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr

0800c750 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c75a:	2300      	movs	r3, #0
 800c75c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c766:	2b40      	cmp	r3, #64	; 0x40
 800c768:	d005      	beq.n	800c776 <USBD_StdDevReq+0x26>
 800c76a:	2b40      	cmp	r3, #64	; 0x40
 800c76c:	d853      	bhi.n	800c816 <USBD_StdDevReq+0xc6>
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00b      	beq.n	800c78a <USBD_StdDevReq+0x3a>
 800c772:	2b20      	cmp	r3, #32
 800c774:	d14f      	bne.n	800c816 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	4798      	blx	r3
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]
      break;
 800c788:	e04a      	b.n	800c820 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b09      	cmp	r3, #9
 800c790:	d83b      	bhi.n	800c80a <USBD_StdDevReq+0xba>
 800c792:	a201      	add	r2, pc, #4	; (adr r2, 800c798 <USBD_StdDevReq+0x48>)
 800c794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c798:	0800c7ed 	.word	0x0800c7ed
 800c79c:	0800c801 	.word	0x0800c801
 800c7a0:	0800c80b 	.word	0x0800c80b
 800c7a4:	0800c7f7 	.word	0x0800c7f7
 800c7a8:	0800c80b 	.word	0x0800c80b
 800c7ac:	0800c7cb 	.word	0x0800c7cb
 800c7b0:	0800c7c1 	.word	0x0800c7c1
 800c7b4:	0800c80b 	.word	0x0800c80b
 800c7b8:	0800c7e3 	.word	0x0800c7e3
 800c7bc:	0800c7d5 	.word	0x0800c7d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c7c0:	6839      	ldr	r1, [r7, #0]
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f9de 	bl	800cb84 <USBD_GetDescriptor>
          break;
 800c7c8:	e024      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c7ca:	6839      	ldr	r1, [r7, #0]
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 fb6d 	bl	800ceac <USBD_SetAddress>
          break;
 800c7d2:	e01f      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 fbac 	bl	800cf34 <USBD_SetConfig>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73fb      	strb	r3, [r7, #15]
          break;
 800c7e0:	e018      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fc4b 	bl	800d080 <USBD_GetConfig>
          break;
 800c7ea:	e013      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 fc7c 	bl	800d0ec <USBD_GetStatus>
          break;
 800c7f4:	e00e      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c7f6:	6839      	ldr	r1, [r7, #0]
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 fcab 	bl	800d154 <USBD_SetFeature>
          break;
 800c7fe:	e009      	b.n	800c814 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fcba 	bl	800d17c <USBD_ClrFeature>
          break;
 800c808:	e004      	b.n	800c814 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fd11 	bl	800d234 <USBD_CtlError>
          break;
 800c812:	bf00      	nop
      }
      break;
 800c814:	e004      	b.n	800c820 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c816:	6839      	ldr	r1, [r7, #0]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fd0b 	bl	800d234 <USBD_CtlError>
      break;
 800c81e:	bf00      	nop
  }

  return ret;
 800c820:	7bfb      	ldrb	r3, [r7, #15]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop

0800c82c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c842:	2b40      	cmp	r3, #64	; 0x40
 800c844:	d005      	beq.n	800c852 <USBD_StdItfReq+0x26>
 800c846:	2b40      	cmp	r3, #64	; 0x40
 800c848:	d82f      	bhi.n	800c8aa <USBD_StdItfReq+0x7e>
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <USBD_StdItfReq+0x26>
 800c84e:	2b20      	cmp	r3, #32
 800c850:	d12b      	bne.n	800c8aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	3b01      	subs	r3, #1
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d81d      	bhi.n	800c89c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	889b      	ldrh	r3, [r3, #4]
 800c864:	b2db      	uxtb	r3, r3
 800c866:	2b01      	cmp	r3, #1
 800c868:	d813      	bhi.n	800c892 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	4798      	blx	r3
 800c878:	4603      	mov	r3, r0
 800c87a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	88db      	ldrh	r3, [r3, #6]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d110      	bne.n	800c8a6 <USBD_StdItfReq+0x7a>
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10d      	bne.n	800c8a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 fd9d 	bl	800d3ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c890:	e009      	b.n	800c8a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 fccd 	bl	800d234 <USBD_CtlError>
          break;
 800c89a:	e004      	b.n	800c8a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fcc8 	bl	800d234 <USBD_CtlError>
          break;
 800c8a4:	e000      	b.n	800c8a8 <USBD_StdItfReq+0x7c>
          break;
 800c8a6:	bf00      	nop
      }
      break;
 800c8a8:	e004      	b.n	800c8b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800c8aa:	6839      	ldr	r1, [r7, #0]
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fcc1 	bl	800d234 <USBD_CtlError>
      break;
 800c8b2:	bf00      	nop
  }

  return ret;
 800c8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
 800c8c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	889b      	ldrh	r3, [r3, #4]
 800c8d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8da:	2b40      	cmp	r3, #64	; 0x40
 800c8dc:	d007      	beq.n	800c8ee <USBD_StdEPReq+0x30>
 800c8de:	2b40      	cmp	r3, #64	; 0x40
 800c8e0:	f200 8145 	bhi.w	800cb6e <USBD_StdEPReq+0x2b0>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00c      	beq.n	800c902 <USBD_StdEPReq+0x44>
 800c8e8:	2b20      	cmp	r3, #32
 800c8ea:	f040 8140 	bne.w	800cb6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	4798      	blx	r3
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]
      break;
 800c900:	e13a      	b.n	800cb78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	785b      	ldrb	r3, [r3, #1]
 800c906:	2b03      	cmp	r3, #3
 800c908:	d007      	beq.n	800c91a <USBD_StdEPReq+0x5c>
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	f300 8129 	bgt.w	800cb62 <USBD_StdEPReq+0x2a4>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d07f      	beq.n	800ca14 <USBD_StdEPReq+0x156>
 800c914:	2b01      	cmp	r3, #1
 800c916:	d03c      	beq.n	800c992 <USBD_StdEPReq+0xd4>
 800c918:	e123      	b.n	800cb62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b02      	cmp	r3, #2
 800c924:	d002      	beq.n	800c92c <USBD_StdEPReq+0x6e>
 800c926:	2b03      	cmp	r3, #3
 800c928:	d016      	beq.n	800c958 <USBD_StdEPReq+0x9a>
 800c92a:	e02c      	b.n	800c986 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c92c:	7bbb      	ldrb	r3, [r7, #14]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00d      	beq.n	800c94e <USBD_StdEPReq+0x90>
 800c932:	7bbb      	ldrb	r3, [r7, #14]
 800c934:	2b80      	cmp	r3, #128	; 0x80
 800c936:	d00a      	beq.n	800c94e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c938:	7bbb      	ldrb	r3, [r7, #14]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f001 f971 	bl	800dc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c942:	2180      	movs	r1, #128	; 0x80
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 f96d 	bl	800dc24 <USBD_LL_StallEP>
 800c94a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c94c:	e020      	b.n	800c990 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 fc6f 	bl	800d234 <USBD_CtlError>
              break;
 800c956:	e01b      	b.n	800c990 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	885b      	ldrh	r3, [r3, #2]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10e      	bne.n	800c97e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c960:	7bbb      	ldrb	r3, [r7, #14]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d00b      	beq.n	800c97e <USBD_StdEPReq+0xc0>
 800c966:	7bbb      	ldrb	r3, [r7, #14]
 800c968:	2b80      	cmp	r3, #128	; 0x80
 800c96a:	d008      	beq.n	800c97e <USBD_StdEPReq+0xc0>
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	88db      	ldrh	r3, [r3, #6]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d104      	bne.n	800c97e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c974:	7bbb      	ldrb	r3, [r7, #14]
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 f953 	bl	800dc24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 fd23 	bl	800d3ca <USBD_CtlSendStatus>

              break;
 800c984:	e004      	b.n	800c990 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c986:	6839      	ldr	r1, [r7, #0]
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fc53 	bl	800d234 <USBD_CtlError>
              break;
 800c98e:	bf00      	nop
          }
          break;
 800c990:	e0ec      	b.n	800cb6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d002      	beq.n	800c9a4 <USBD_StdEPReq+0xe6>
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d016      	beq.n	800c9d0 <USBD_StdEPReq+0x112>
 800c9a2:	e030      	b.n	800ca06 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d00d      	beq.n	800c9c6 <USBD_StdEPReq+0x108>
 800c9aa:	7bbb      	ldrb	r3, [r7, #14]
 800c9ac:	2b80      	cmp	r3, #128	; 0x80
 800c9ae:	d00a      	beq.n	800c9c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f001 f935 	bl	800dc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9ba:	2180      	movs	r1, #128	; 0x80
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 f931 	bl	800dc24 <USBD_LL_StallEP>
 800c9c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c9c4:	e025      	b.n	800ca12 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c9c6:	6839      	ldr	r1, [r7, #0]
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fc33 	bl	800d234 <USBD_CtlError>
              break;
 800c9ce:	e020      	b.n	800ca12 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	885b      	ldrh	r3, [r3, #2]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d11b      	bne.n	800ca10 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c9d8:	7bbb      	ldrb	r3, [r7, #14]
 800c9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d004      	beq.n	800c9ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f001 f952 	bl	800dc90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 fcec 	bl	800d3ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	4798      	blx	r3
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ca04:	e004      	b.n	800ca10 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ca06:	6839      	ldr	r1, [r7, #0]
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f000 fc13 	bl	800d234 <USBD_CtlError>
              break;
 800ca0e:	e000      	b.n	800ca12 <USBD_StdEPReq+0x154>
              break;
 800ca10:	bf00      	nop
          }
          break;
 800ca12:	e0ab      	b.n	800cb6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca1a:	b2db      	uxtb	r3, r3
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d002      	beq.n	800ca26 <USBD_StdEPReq+0x168>
 800ca20:	2b03      	cmp	r3, #3
 800ca22:	d032      	beq.n	800ca8a <USBD_StdEPReq+0x1cc>
 800ca24:	e097      	b.n	800cb56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ca26:	7bbb      	ldrb	r3, [r7, #14]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <USBD_StdEPReq+0x17e>
 800ca2c:	7bbb      	ldrb	r3, [r7, #14]
 800ca2e:	2b80      	cmp	r3, #128	; 0x80
 800ca30:	d004      	beq.n	800ca3c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ca32:	6839      	ldr	r1, [r7, #0]
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fbfd 	bl	800d234 <USBD_CtlError>
                break;
 800ca3a:	e091      	b.n	800cb60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	da0b      	bge.n	800ca5c <USBD_StdEPReq+0x19e>
 800ca44:	7bbb      	ldrb	r3, [r7, #14]
 800ca46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	3310      	adds	r3, #16
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	4413      	add	r3, r2
 800ca58:	3304      	adds	r3, #4
 800ca5a:	e00b      	b.n	800ca74 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ca5c:	7bbb      	ldrb	r3, [r7, #14]
 800ca5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ca62:	4613      	mov	r3, r2
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	4413      	add	r3, r2
 800ca72:	3304      	adds	r3, #4
 800ca74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	4619      	mov	r1, r3
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fc47 	bl	800d316 <USBD_CtlSendData>
              break;
 800ca88:	e06a      	b.n	800cb60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ca8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	da11      	bge.n	800cab6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ca92:	7bbb      	ldrb	r3, [r7, #14]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	3324      	adds	r3, #36	; 0x24
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d117      	bne.n	800cadc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800caac:	6839      	ldr	r1, [r7, #0]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fbc0 	bl	800d234 <USBD_CtlError>
                  break;
 800cab4:	e054      	b.n	800cb60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cab6:	7bbb      	ldrb	r3, [r7, #14]
 800cab8:	f003 020f 	and.w	r2, r3, #15
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	440b      	add	r3, r1
 800cac8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cacc:	881b      	ldrh	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d104      	bne.n	800cadc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f000 fbad 	bl	800d234 <USBD_CtlError>
                  break;
 800cada:	e041      	b.n	800cb60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cadc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	da0b      	bge.n	800cafc <USBD_StdEPReq+0x23e>
 800cae4:	7bbb      	ldrb	r3, [r7, #14]
 800cae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	3310      	adds	r3, #16
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	4413      	add	r3, r2
 800caf8:	3304      	adds	r3, #4
 800cafa:	e00b      	b.n	800cb14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cafc:	7bbb      	ldrb	r3, [r7, #14]
 800cafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cb02:	4613      	mov	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	4413      	add	r3, r2
 800cb12:	3304      	adds	r3, #4
 800cb14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cb16:	7bbb      	ldrb	r3, [r7, #14]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <USBD_StdEPReq+0x264>
 800cb1c:	7bbb      	ldrb	r3, [r7, #14]
 800cb1e:	2b80      	cmp	r3, #128	; 0x80
 800cb20:	d103      	bne.n	800cb2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	e00e      	b.n	800cb48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f001 f8e4 	bl	800dcfc <USBD_LL_IsStallEP>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d003      	beq.n	800cb42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	e002      	b.n	800cb48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	2200      	movs	r2, #0
 800cb46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	2202      	movs	r2, #2
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fbe1 	bl	800d316 <USBD_CtlSendData>
              break;
 800cb54:	e004      	b.n	800cb60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cb56:	6839      	ldr	r1, [r7, #0]
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fb6b 	bl	800d234 <USBD_CtlError>
              break;
 800cb5e:	bf00      	nop
          }
          break;
 800cb60:	e004      	b.n	800cb6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fb65 	bl	800d234 <USBD_CtlError>
          break;
 800cb6a:	bf00      	nop
      }
      break;
 800cb6c:	e004      	b.n	800cb78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cb6e:	6839      	ldr	r1, [r7, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fb5f 	bl	800d234 <USBD_CtlError>
      break;
 800cb76:	bf00      	nop
  }

  return ret;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
	...

0800cb84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	885b      	ldrh	r3, [r3, #2]
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	3b01      	subs	r3, #1
 800cba4:	2b0e      	cmp	r3, #14
 800cba6:	f200 8152 	bhi.w	800ce4e <USBD_GetDescriptor+0x2ca>
 800cbaa:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <USBD_GetDescriptor+0x2c>)
 800cbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb0:	0800cc21 	.word	0x0800cc21
 800cbb4:	0800cc39 	.word	0x0800cc39
 800cbb8:	0800cc79 	.word	0x0800cc79
 800cbbc:	0800ce4f 	.word	0x0800ce4f
 800cbc0:	0800ce4f 	.word	0x0800ce4f
 800cbc4:	0800cdef 	.word	0x0800cdef
 800cbc8:	0800ce1b 	.word	0x0800ce1b
 800cbcc:	0800ce4f 	.word	0x0800ce4f
 800cbd0:	0800ce4f 	.word	0x0800ce4f
 800cbd4:	0800ce4f 	.word	0x0800ce4f
 800cbd8:	0800ce4f 	.word	0x0800ce4f
 800cbdc:	0800ce4f 	.word	0x0800ce4f
 800cbe0:	0800ce4f 	.word	0x0800ce4f
 800cbe4:	0800ce4f 	.word	0x0800ce4f
 800cbe8:	0800cbed 	.word	0x0800cbed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbf2:	69db      	ldr	r3, [r3, #28]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d00b      	beq.n	800cc10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	7c12      	ldrb	r2, [r2, #16]
 800cc04:	f107 0108 	add.w	r1, r7, #8
 800cc08:	4610      	mov	r0, r2
 800cc0a:	4798      	blx	r3
 800cc0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cc0e:	e126      	b.n	800ce5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cc10:	6839      	ldr	r1, [r7, #0]
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 fb0e 	bl	800d234 <USBD_CtlError>
        err++;
 800cc18:	7afb      	ldrb	r3, [r7, #11]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	72fb      	strb	r3, [r7, #11]
      break;
 800cc1e:	e11e      	b.n	800ce5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	7c12      	ldrb	r2, [r2, #16]
 800cc2c:	f107 0108 	add.w	r1, r7, #8
 800cc30:	4610      	mov	r0, r2
 800cc32:	4798      	blx	r3
 800cc34:	60f8      	str	r0, [r7, #12]
      break;
 800cc36:	e112      	b.n	800ce5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	7c1b      	ldrb	r3, [r3, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10d      	bne.n	800cc5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc48:	f107 0208 	add.w	r2, r7, #8
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
 800cc50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	3301      	adds	r3, #1
 800cc56:	2202      	movs	r2, #2
 800cc58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cc5a:	e100      	b.n	800ce5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc64:	f107 0208 	add.w	r2, r7, #8
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
 800cc6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3301      	adds	r3, #1
 800cc72:	2202      	movs	r2, #2
 800cc74:	701a      	strb	r2, [r3, #0]
      break;
 800cc76:	e0f2      	b.n	800ce5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	885b      	ldrh	r3, [r3, #2]
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	2b05      	cmp	r3, #5
 800cc80:	f200 80ac 	bhi.w	800cddc <USBD_GetDescriptor+0x258>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <USBD_GetDescriptor+0x108>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800cca5 	.word	0x0800cca5
 800cc90:	0800ccd9 	.word	0x0800ccd9
 800cc94:	0800cd0d 	.word	0x0800cd0d
 800cc98:	0800cd41 	.word	0x0800cd41
 800cc9c:	0800cd75 	.word	0x0800cd75
 800cca0:	0800cda9 	.word	0x0800cda9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d00b      	beq.n	800ccc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	687a      	ldr	r2, [r7, #4]
 800ccba:	7c12      	ldrb	r2, [r2, #16]
 800ccbc:	f107 0108 	add.w	r1, r7, #8
 800ccc0:	4610      	mov	r0, r2
 800ccc2:	4798      	blx	r3
 800ccc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccc6:	e091      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 fab2 	bl	800d234 <USBD_CtlError>
            err++;
 800ccd0:	7afb      	ldrb	r3, [r7, #11]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	72fb      	strb	r3, [r7, #11]
          break;
 800ccd6:	e089      	b.n	800cdec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00b      	beq.n	800ccfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ccea:	689b      	ldr	r3, [r3, #8]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	7c12      	ldrb	r2, [r2, #16]
 800ccf0:	f107 0108 	add.w	r1, r7, #8
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	4798      	blx	r3
 800ccf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ccfa:	e077      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f000 fa98 	bl	800d234 <USBD_CtlError>
            err++;
 800cd04:	7afb      	ldrb	r3, [r7, #11]
 800cd06:	3301      	adds	r3, #1
 800cd08:	72fb      	strb	r3, [r7, #11]
          break;
 800cd0a:	e06f      	b.n	800cdec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00b      	beq.n	800cd30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	7c12      	ldrb	r2, [r2, #16]
 800cd24:	f107 0108 	add.w	r1, r7, #8
 800cd28:	4610      	mov	r0, r2
 800cd2a:	4798      	blx	r3
 800cd2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd2e:	e05d      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f000 fa7e 	bl	800d234 <USBD_CtlError>
            err++;
 800cd38:	7afb      	ldrb	r3, [r7, #11]
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	72fb      	strb	r3, [r7, #11]
          break;
 800cd3e:	e055      	b.n	800cdec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00b      	beq.n	800cd64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd52:	691b      	ldr	r3, [r3, #16]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	7c12      	ldrb	r2, [r2, #16]
 800cd58:	f107 0108 	add.w	r1, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd62:	e043      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa64 	bl	800d234 <USBD_CtlError>
            err++;
 800cd6c:	7afb      	ldrb	r3, [r7, #11]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	72fb      	strb	r3, [r7, #11]
          break;
 800cd72:	e03b      	b.n	800cdec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd7a:	695b      	ldr	r3, [r3, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00b      	beq.n	800cd98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	7c12      	ldrb	r2, [r2, #16]
 800cd8c:	f107 0108 	add.w	r1, r7, #8
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
 800cd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cd96:	e029      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cd98:	6839      	ldr	r1, [r7, #0]
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 fa4a 	bl	800d234 <USBD_CtlError>
            err++;
 800cda0:	7afb      	ldrb	r3, [r7, #11]
 800cda2:	3301      	adds	r3, #1
 800cda4:	72fb      	strb	r3, [r7, #11]
          break;
 800cda6:	e021      	b.n	800cdec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00b      	beq.n	800cdcc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdba:	699b      	ldr	r3, [r3, #24]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	7c12      	ldrb	r2, [r2, #16]
 800cdc0:	f107 0108 	add.w	r1, r7, #8
 800cdc4:	4610      	mov	r0, r2
 800cdc6:	4798      	blx	r3
 800cdc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdca:	e00f      	b.n	800cdec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 fa30 	bl	800d234 <USBD_CtlError>
            err++;
 800cdd4:	7afb      	ldrb	r3, [r7, #11]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	72fb      	strb	r3, [r7, #11]
          break;
 800cdda:	e007      	b.n	800cdec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fa28 	bl	800d234 <USBD_CtlError>
          err++;
 800cde4:	7afb      	ldrb	r3, [r7, #11]
 800cde6:	3301      	adds	r3, #1
 800cde8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cdea:	bf00      	nop
      }
      break;
 800cdec:	e037      	b.n	800ce5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	7c1b      	ldrb	r3, [r3, #16]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d109      	bne.n	800ce0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdfe:	f107 0208 	add.w	r2, r7, #8
 800ce02:	4610      	mov	r0, r2
 800ce04:	4798      	blx	r3
 800ce06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce08:	e029      	b.n	800ce5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce0a:	6839      	ldr	r1, [r7, #0]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 fa11 	bl	800d234 <USBD_CtlError>
        err++;
 800ce12:	7afb      	ldrb	r3, [r7, #11]
 800ce14:	3301      	adds	r3, #1
 800ce16:	72fb      	strb	r3, [r7, #11]
      break;
 800ce18:	e021      	b.n	800ce5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7c1b      	ldrb	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10d      	bne.n	800ce3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2a:	f107 0208 	add.w	r2, r7, #8
 800ce2e:	4610      	mov	r0, r2
 800ce30:	4798      	blx	r3
 800ce32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	3301      	adds	r3, #1
 800ce38:	2207      	movs	r2, #7
 800ce3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ce3c:	e00f      	b.n	800ce5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ce3e:	6839      	ldr	r1, [r7, #0]
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 f9f7 	bl	800d234 <USBD_CtlError>
        err++;
 800ce46:	7afb      	ldrb	r3, [r7, #11]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce4c:	e007      	b.n	800ce5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 f9ef 	bl	800d234 <USBD_CtlError>
      err++;
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ce5c:	bf00      	nop
  }

  if (err != 0U)
 800ce5e:	7afb      	ldrb	r3, [r7, #11]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d11e      	bne.n	800cea2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	88db      	ldrh	r3, [r3, #6]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d016      	beq.n	800ce9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ce6c:	893b      	ldrh	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00e      	beq.n	800ce90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	88da      	ldrh	r2, [r3, #6]
 800ce76:	893b      	ldrh	r3, [r7, #8]
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	bf28      	it	cs
 800ce7c:	4613      	movcs	r3, r2
 800ce7e:	b29b      	uxth	r3, r3
 800ce80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ce82:	893b      	ldrh	r3, [r7, #8]
 800ce84:	461a      	mov	r2, r3
 800ce86:	68f9      	ldr	r1, [r7, #12]
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 fa44 	bl	800d316 <USBD_CtlSendData>
 800ce8e:	e009      	b.n	800cea4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f9ce 	bl	800d234 <USBD_CtlError>
 800ce98:	e004      	b.n	800cea4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 fa95 	bl	800d3ca <USBD_CtlSendStatus>
 800cea0:	e000      	b.n	800cea4 <USBD_GetDescriptor+0x320>
    return;
 800cea2:	bf00      	nop
  }
}
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop

0800ceac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	889b      	ldrh	r3, [r3, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d131      	bne.n	800cf22 <USBD_SetAddress+0x76>
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	88db      	ldrh	r3, [r3, #6]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d12d      	bne.n	800cf22 <USBD_SetAddress+0x76>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	885b      	ldrh	r3, [r3, #2]
 800ceca:	2b7f      	cmp	r3, #127	; 0x7f
 800cecc:	d829      	bhi.n	800cf22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	885b      	ldrh	r3, [r3, #2]
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ced8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cee0:	b2db      	uxtb	r3, r3
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	d104      	bne.n	800cef0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f9a3 	bl	800d234 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceee:	e01d      	b.n	800cf2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7bfa      	ldrb	r2, [r7, #15]
 800cef4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 ff2b 	bl	800dd58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f000 fa61 	bl	800d3ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2202      	movs	r2, #2
 800cf12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf16:	e009      	b.n	800cf2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf20:	e004      	b.n	800cf2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 f985 	bl	800d234 <USBD_CtlError>
  }
}
 800cf2a:	bf00      	nop
 800cf2c:	bf00      	nop
 800cf2e:	3710      	adds	r7, #16
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	885b      	ldrh	r3, [r3, #2]
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	4b4c      	ldr	r3, [pc, #304]	; (800d07c <USBD_SetConfig+0x148>)
 800cf4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cf4c:	4b4b      	ldr	r3, [pc, #300]	; (800d07c <USBD_SetConfig+0x148>)
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d905      	bls.n	800cf60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cf54:	6839      	ldr	r1, [r7, #0]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 f96c 	bl	800d234 <USBD_CtlError>
    return USBD_FAIL;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e088      	b.n	800d072 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d002      	beq.n	800cf72 <USBD_SetConfig+0x3e>
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d025      	beq.n	800cfbc <USBD_SetConfig+0x88>
 800cf70:	e071      	b.n	800d056 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cf72:	4b42      	ldr	r3, [pc, #264]	; (800d07c <USBD_SetConfig+0x148>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d01c      	beq.n	800cfb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800cf7a:	4b40      	ldr	r3, [pc, #256]	; (800d07c <USBD_SetConfig+0x148>)
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	461a      	mov	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cf84:	4b3d      	ldr	r3, [pc, #244]	; (800d07c <USBD_SetConfig+0x148>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7ff f992 	bl	800c2b4 <USBD_SetClassConfig>
 800cf90:	4603      	mov	r3, r0
 800cf92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cf94:	7bfb      	ldrb	r3, [r7, #15]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f949 	bl	800d234 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfa2:	e065      	b.n	800d070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fa10 	bl	800d3ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2203      	movs	r2, #3
 800cfae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800cfb2:	e05d      	b.n	800d070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa08 	bl	800d3ca <USBD_CtlSendStatus>
      break;
 800cfba:	e059      	b.n	800d070 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cfbc:	4b2f      	ldr	r3, [pc, #188]	; (800d07c <USBD_SetConfig+0x148>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d112      	bne.n	800cfea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2202      	movs	r2, #2
 800cfc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800cfcc:	4b2b      	ldr	r3, [pc, #172]	; (800d07c <USBD_SetConfig+0x148>)
 800cfce:	781b      	ldrb	r3, [r3, #0]
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cfd6:	4b29      	ldr	r3, [pc, #164]	; (800d07c <USBD_SetConfig+0x148>)
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f7ff f985 	bl	800c2ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f9f1 	bl	800d3ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cfe8:	e042      	b.n	800d070 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800cfea:	4b24      	ldr	r3, [pc, #144]	; (800d07c <USBD_SetConfig+0x148>)
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	461a      	mov	r2, r3
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d02a      	beq.n	800d04e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	4619      	mov	r1, r3
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7ff f973 	bl	800c2ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d006:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <USBD_SetConfig+0x148>)
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d010:	4b1a      	ldr	r3, [pc, #104]	; (800d07c <USBD_SetConfig+0x148>)
 800d012:	781b      	ldrb	r3, [r3, #0]
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f7ff f94c 	bl	800c2b4 <USBD_SetClassConfig>
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d020:	7bfb      	ldrb	r3, [r7, #15]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00f      	beq.n	800d046 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f903 	bl	800d234 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	b2db      	uxtb	r3, r3
 800d034:	4619      	mov	r1, r3
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f7ff f958 	bl	800c2ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2202      	movs	r2, #2
 800d040:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d044:	e014      	b.n	800d070 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 f9bf 	bl	800d3ca <USBD_CtlSendStatus>
      break;
 800d04c:	e010      	b.n	800d070 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f9bb 	bl	800d3ca <USBD_CtlSendStatus>
      break;
 800d054:	e00c      	b.n	800d070 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 f8eb 	bl	800d234 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d05e:	4b07      	ldr	r3, [pc, #28]	; (800d07c <USBD_SetConfig+0x148>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7ff f941 	bl	800c2ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d06a:	2303      	movs	r3, #3
 800d06c:	73fb      	strb	r3, [r7, #15]
      break;
 800d06e:	bf00      	nop
  }

  return ret;
 800d070:	7bfb      	ldrb	r3, [r7, #15]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3710      	adds	r7, #16
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	20000378 	.word	0x20000378

0800d080 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	88db      	ldrh	r3, [r3, #6]
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d004      	beq.n	800d09c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f8cd 	bl	800d234 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d09a:	e023      	b.n	800d0e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	dc02      	bgt.n	800d0ae <USBD_GetConfig+0x2e>
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dc03      	bgt.n	800d0b4 <USBD_GetConfig+0x34>
 800d0ac:	e015      	b.n	800d0da <USBD_GetConfig+0x5a>
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d00b      	beq.n	800d0ca <USBD_GetConfig+0x4a>
 800d0b2:	e012      	b.n	800d0da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	3308      	adds	r3, #8
 800d0be:	2201      	movs	r2, #1
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f927 	bl	800d316 <USBD_CtlSendData>
        break;
 800d0c8:	e00c      	b.n	800d0e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f91f 	bl	800d316 <USBD_CtlSendData>
        break;
 800d0d8:	e004      	b.n	800d0e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f8a9 	bl	800d234 <USBD_CtlError>
        break;
 800d0e2:	bf00      	nop
}
 800d0e4:	bf00      	nop
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	3b01      	subs	r3, #1
 800d100:	2b02      	cmp	r3, #2
 800d102:	d81e      	bhi.n	800d142 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	88db      	ldrh	r3, [r3, #6]
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d004      	beq.n	800d116 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f890 	bl	800d234 <USBD_CtlError>
        break;
 800d114:	e01a      	b.n	800d14c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2201      	movs	r2, #1
 800d11a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d122:	2b00      	cmp	r3, #0
 800d124:	d005      	beq.n	800d132 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	f043 0202 	orr.w	r2, r3, #2
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	330c      	adds	r3, #12
 800d136:	2202      	movs	r2, #2
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f8eb 	bl	800d316 <USBD_CtlSendData>
      break;
 800d140:	e004      	b.n	800d14c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d142:	6839      	ldr	r1, [r7, #0]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f875 	bl	800d234 <USBD_CtlError>
      break;
 800d14a:	bf00      	nop
  }
}
 800d14c:	bf00      	nop
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	885b      	ldrh	r3, [r3, #2]
 800d162:	2b01      	cmp	r3, #1
 800d164:	d106      	bne.n	800d174 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2201      	movs	r2, #1
 800d16a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 f92b 	bl	800d3ca <USBD_CtlSendStatus>
  }
}
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	3b01      	subs	r3, #1
 800d190:	2b02      	cmp	r3, #2
 800d192:	d80b      	bhi.n	800d1ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	885b      	ldrh	r3, [r3, #2]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d10c      	bne.n	800d1b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 f910 	bl	800d3ca <USBD_CtlSendStatus>
      }
      break;
 800d1aa:	e004      	b.n	800d1b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f840 	bl	800d234 <USBD_CtlError>
      break;
 800d1b4:	e000      	b.n	800d1b8 <USBD_ClrFeature+0x3c>
      break;
 800d1b6:	bf00      	nop
  }
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	781a      	ldrb	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d1ea:	68f8      	ldr	r0, [r7, #12]
 800d1ec:	f7ff fa92 	bl	800c714 <SWAPBYTE>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3301      	adds	r3, #1
 800d202:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d204:	68f8      	ldr	r0, [r7, #12]
 800d206:	f7ff fa85 	bl	800c714 <SWAPBYTE>
 800d20a:	4603      	mov	r3, r0
 800d20c:	461a      	mov	r2, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3301      	adds	r3, #1
 800d216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	3301      	adds	r3, #1
 800d21c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7ff fa78 	bl	800c714 <SWAPBYTE>
 800d224:	4603      	mov	r3, r0
 800d226:	461a      	mov	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	80da      	strh	r2, [r3, #6]
}
 800d22c:	bf00      	nop
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d23e:	2180      	movs	r1, #128	; 0x80
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fcef 	bl	800dc24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d246:	2100      	movs	r1, #0
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fceb 	bl	800dc24 <USBD_LL_StallEP>
}
 800d24e:	bf00      	nop
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b086      	sub	sp, #24
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	60b9      	str	r1, [r7, #8]
 800d260:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d036      	beq.n	800d2da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d270:	6938      	ldr	r0, [r7, #16]
 800d272:	f000 f836 	bl	800d2e2 <USBD_GetLen>
 800d276:	4603      	mov	r3, r0
 800d278:	3301      	adds	r3, #1
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	005b      	lsls	r3, r3, #1
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d284:	7dfb      	ldrb	r3, [r7, #23]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	4413      	add	r3, r2
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	7812      	ldrb	r2, [r2, #0]
 800d28e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d290:	7dfb      	ldrb	r3, [r7, #23]
 800d292:	3301      	adds	r3, #1
 800d294:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	68ba      	ldr	r2, [r7, #8]
 800d29a:	4413      	add	r3, r2
 800d29c:	2203      	movs	r2, #3
 800d29e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d2a0:	7dfb      	ldrb	r3, [r7, #23]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d2a6:	e013      	b.n	800d2d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d2a8:	7dfb      	ldrb	r3, [r7, #23]
 800d2aa:	68ba      	ldr	r2, [r7, #8]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	7812      	ldrb	r2, [r2, #0]
 800d2b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	613b      	str	r3, [r7, #16]
    idx++;
 800d2ba:	7dfb      	ldrb	r3, [r7, #23]
 800d2bc:	3301      	adds	r3, #1
 800d2be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	701a      	strb	r2, [r3, #0]
    idx++;
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e7      	bne.n	800d2a8 <USBD_GetString+0x52>
 800d2d8:	e000      	b.n	800d2dc <USBD_GetString+0x86>
    return;
 800d2da:	bf00      	nop
  }
}
 800d2dc:	3718      	adds	r7, #24
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b085      	sub	sp, #20
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d2f2:	e005      	b.n	800d300 <USBD_GetLen+0x1e>
  {
    len++;
 800d2f4:	7bfb      	ldrb	r3, [r7, #15]
 800d2f6:	3301      	adds	r3, #1
 800d2f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f5      	bne.n	800d2f4 <USBD_GetLen+0x12>
  }

  return len;
 800d308:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3714      	adds	r7, #20
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b084      	sub	sp, #16
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2202      	movs	r2, #2
 800d326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	2100      	movs	r1, #0
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 fd41 	bl	800ddc4 <USBD_LL_Transmit>

  return USBD_OK;
 800d342:	2300      	movs	r3, #0
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	2100      	movs	r1, #0
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 fd30 	bl	800ddc4 <USBD_LL_Transmit>

  return USBD_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	60f8      	str	r0, [r7, #12]
 800d376:	60b9      	str	r1, [r7, #8]
 800d378:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2203      	movs	r2, #3
 800d37e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	2100      	movs	r1, #0
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f000 fd4b 	bl	800de34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 fd3a 	bl	800de34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b082      	sub	sp, #8
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2204      	movs	r2, #4
 800d3d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d3da:	2300      	movs	r3, #0
 800d3dc:	2200      	movs	r2, #0
 800d3de:	2100      	movs	r1, #0
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 fcef 	bl	800ddc4 <USBD_LL_Transmit>

  return USBD_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2205      	movs	r2, #5
 800d3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d400:	2300      	movs	r3, #0
 800d402:	2200      	movs	r2, #0
 800d404:	2100      	movs	r1, #0
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fd14 	bl	800de34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d41c:	2200      	movs	r2, #0
 800d41e:	4912      	ldr	r1, [pc, #72]	; (800d468 <MX_USB_DEVICE_Init+0x50>)
 800d420:	4812      	ldr	r0, [pc, #72]	; (800d46c <MX_USB_DEVICE_Init+0x54>)
 800d422:	f7fe fed9 	bl	800c1d8 <USBD_Init>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d001      	beq.n	800d430 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d42c:	f7f3 fb66 	bl	8000afc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d430:	490f      	ldr	r1, [pc, #60]	; (800d470 <MX_USB_DEVICE_Init+0x58>)
 800d432:	480e      	ldr	r0, [pc, #56]	; (800d46c <MX_USB_DEVICE_Init+0x54>)
 800d434:	f7fe ff00 	bl	800c238 <USBD_RegisterClass>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d43e:	f7f3 fb5d 	bl	8000afc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d442:	490c      	ldr	r1, [pc, #48]	; (800d474 <MX_USB_DEVICE_Init+0x5c>)
 800d444:	4809      	ldr	r0, [pc, #36]	; (800d46c <MX_USB_DEVICE_Init+0x54>)
 800d446:	f7fe fe51 	bl	800c0ec <USBD_CDC_RegisterInterface>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d001      	beq.n	800d454 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d450:	f7f3 fb54 	bl	8000afc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d454:	4805      	ldr	r0, [pc, #20]	; (800d46c <MX_USB_DEVICE_Init+0x54>)
 800d456:	f7fe ff16 	bl	800c286 <USBD_Start>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d460:	f7f3 fb4c 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d464:	bf00      	nop
 800d466:	bd80      	pop	{r7, pc}
 800d468:	20000150 	.word	0x20000150
 800d46c:	20000644 	.word	0x20000644
 800d470:	20000038 	.word	0x20000038
 800d474:	2000013c 	.word	0x2000013c

0800d478 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d47c:	2200      	movs	r2, #0
 800d47e:	4905      	ldr	r1, [pc, #20]	; (800d494 <CDC_Init_FS+0x1c>)
 800d480:	4805      	ldr	r0, [pc, #20]	; (800d498 <CDC_Init_FS+0x20>)
 800d482:	f7fe fe48 	bl	800c116 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d486:	4905      	ldr	r1, [pc, #20]	; (800d49c <CDC_Init_FS+0x24>)
 800d488:	4803      	ldr	r0, [pc, #12]	; (800d498 <CDC_Init_FS+0x20>)
 800d48a:	f7fe fe62 	bl	800c152 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d48e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d490:	4618      	mov	r0, r3
 800d492:	bd80      	pop	{r7, pc}
 800d494:	20000cfc 	.word	0x20000cfc
 800d498:	20000644 	.word	0x20000644
 800d49c:	20000914 	.word	0x20000914

0800d4a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d4a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	6039      	str	r1, [r7, #0]
 800d4ba:	71fb      	strb	r3, [r7, #7]
 800d4bc:	4613      	mov	r3, r2
 800d4be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d4c0:	79fb      	ldrb	r3, [r7, #7]
 800d4c2:	2b23      	cmp	r3, #35	; 0x23
 800d4c4:	d84a      	bhi.n	800d55c <CDC_Control_FS+0xac>
 800d4c6:	a201      	add	r2, pc, #4	; (adr r2, 800d4cc <CDC_Control_FS+0x1c>)
 800d4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4cc:	0800d55d 	.word	0x0800d55d
 800d4d0:	0800d55d 	.word	0x0800d55d
 800d4d4:	0800d55d 	.word	0x0800d55d
 800d4d8:	0800d55d 	.word	0x0800d55d
 800d4dc:	0800d55d 	.word	0x0800d55d
 800d4e0:	0800d55d 	.word	0x0800d55d
 800d4e4:	0800d55d 	.word	0x0800d55d
 800d4e8:	0800d55d 	.word	0x0800d55d
 800d4ec:	0800d55d 	.word	0x0800d55d
 800d4f0:	0800d55d 	.word	0x0800d55d
 800d4f4:	0800d55d 	.word	0x0800d55d
 800d4f8:	0800d55d 	.word	0x0800d55d
 800d4fc:	0800d55d 	.word	0x0800d55d
 800d500:	0800d55d 	.word	0x0800d55d
 800d504:	0800d55d 	.word	0x0800d55d
 800d508:	0800d55d 	.word	0x0800d55d
 800d50c:	0800d55d 	.word	0x0800d55d
 800d510:	0800d55d 	.word	0x0800d55d
 800d514:	0800d55d 	.word	0x0800d55d
 800d518:	0800d55d 	.word	0x0800d55d
 800d51c:	0800d55d 	.word	0x0800d55d
 800d520:	0800d55d 	.word	0x0800d55d
 800d524:	0800d55d 	.word	0x0800d55d
 800d528:	0800d55d 	.word	0x0800d55d
 800d52c:	0800d55d 	.word	0x0800d55d
 800d530:	0800d55d 	.word	0x0800d55d
 800d534:	0800d55d 	.word	0x0800d55d
 800d538:	0800d55d 	.word	0x0800d55d
 800d53c:	0800d55d 	.word	0x0800d55d
 800d540:	0800d55d 	.word	0x0800d55d
 800d544:	0800d55d 	.word	0x0800d55d
 800d548:	0800d55d 	.word	0x0800d55d
 800d54c:	0800d55d 	.word	0x0800d55d
 800d550:	0800d55d 	.word	0x0800d55d
 800d554:	0800d55d 	.word	0x0800d55d
 800d558:	0800d55d 	.word	0x0800d55d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d55c:	bf00      	nop
  }

  return (USBD_OK);
 800d55e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d560:	4618      	mov	r0, r3
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d576:	6879      	ldr	r1, [r7, #4]
 800d578:	4805      	ldr	r0, [pc, #20]	; (800d590 <CDC_Receive_FS+0x24>)
 800d57a:	f7fe fdea 	bl	800c152 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d57e:	4804      	ldr	r0, [pc, #16]	; (800d590 <CDC_Receive_FS+0x24>)
 800d580:	f7fe fe00 	bl	800c184 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d584:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d586:	4618      	mov	r0, r3
 800d588:	3708      	adds	r7, #8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20000644 	.word	0x20000644

0800d594 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d594:	b480      	push	{r7}
 800d596:	b087      	sub	sp, #28
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d5a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	371c      	adds	r7, #28
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	4603      	mov	r3, r0
 800d5c0:	6039      	str	r1, [r7, #0]
 800d5c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2212      	movs	r2, #18
 800d5c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d5ca:	4b03      	ldr	r3, [pc, #12]	; (800d5d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	20000170 	.word	0x20000170

0800d5dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	6039      	str	r1, [r7, #0]
 800d5e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2204      	movs	r2, #4
 800d5ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5ee:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	20000190 	.word	0x20000190

0800d600 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	6039      	str	r1, [r7, #0]
 800d60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d105      	bne.n	800d61e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	4907      	ldr	r1, [pc, #28]	; (800d634 <USBD_FS_ProductStrDescriptor+0x34>)
 800d616:	4808      	ldr	r0, [pc, #32]	; (800d638 <USBD_FS_ProductStrDescriptor+0x38>)
 800d618:	f7ff fe1d 	bl	800d256 <USBD_GetString>
 800d61c:	e004      	b.n	800d628 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d61e:	683a      	ldr	r2, [r7, #0]
 800d620:	4904      	ldr	r1, [pc, #16]	; (800d634 <USBD_FS_ProductStrDescriptor+0x34>)
 800d622:	4805      	ldr	r0, [pc, #20]	; (800d638 <USBD_FS_ProductStrDescriptor+0x38>)
 800d624:	f7ff fe17 	bl	800d256 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d628:	4b02      	ldr	r3, [pc, #8]	; (800d634 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	200010e4 	.word	0x200010e4
 800d638:	0800e228 	.word	0x0800e228

0800d63c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	4603      	mov	r3, r0
 800d644:	6039      	str	r1, [r7, #0]
 800d646:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d648:	683a      	ldr	r2, [r7, #0]
 800d64a:	4904      	ldr	r1, [pc, #16]	; (800d65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d64c:	4804      	ldr	r0, [pc, #16]	; (800d660 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d64e:	f7ff fe02 	bl	800d256 <USBD_GetString>
  return USBD_StrDesc;
 800d652:	4b02      	ldr	r3, [pc, #8]	; (800d65c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d654:	4618      	mov	r0, r3
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	200010e4 	.word	0x200010e4
 800d660:	0800e240 	.word	0x0800e240

0800d664 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	4603      	mov	r3, r0
 800d66c:	6039      	str	r1, [r7, #0]
 800d66e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	221a      	movs	r2, #26
 800d674:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d676:	f000 f855 	bl	800d724 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d67a:	4b02      	ldr	r3, [pc, #8]	; (800d684 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20000194 	.word	0x20000194

0800d688 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	6039      	str	r1, [r7, #0]
 800d692:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d105      	bne.n	800d6a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	4907      	ldr	r1, [pc, #28]	; (800d6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d69e:	4808      	ldr	r0, [pc, #32]	; (800d6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6a0:	f7ff fdd9 	bl	800d256 <USBD_GetString>
 800d6a4:	e004      	b.n	800d6b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	4904      	ldr	r1, [pc, #16]	; (800d6bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d6aa:	4805      	ldr	r0, [pc, #20]	; (800d6c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d6ac:	f7ff fdd3 	bl	800d256 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6b0:	4b02      	ldr	r3, [pc, #8]	; (800d6bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	200010e4 	.word	0x200010e4
 800d6c0:	0800e254 	.word	0x0800e254

0800d6c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	6039      	str	r1, [r7, #0]
 800d6ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d105      	bne.n	800d6e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	4907      	ldr	r1, [pc, #28]	; (800d6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6da:	4808      	ldr	r0, [pc, #32]	; (800d6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6dc:	f7ff fdbb 	bl	800d256 <USBD_GetString>
 800d6e0:	e004      	b.n	800d6ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d6e2:	683a      	ldr	r2, [r7, #0]
 800d6e4:	4904      	ldr	r1, [pc, #16]	; (800d6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d6e6:	4805      	ldr	r0, [pc, #20]	; (800d6fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d6e8:	f7ff fdb5 	bl	800d256 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6ec:	4b02      	ldr	r3, [pc, #8]	; (800d6f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	200010e4 	.word	0x200010e4
 800d6fc:	0800e260 	.word	0x0800e260

0800d700 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	4603      	mov	r3, r0
 800d708:	6039      	str	r1, [r7, #0]
 800d70a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	220c      	movs	r2, #12
 800d710:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d712:	4b03      	ldr	r3, [pc, #12]	; (800d720 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d714:	4618      	mov	r0, r3
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr
 800d720:	20000184 	.word	0x20000184

0800d724 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d72a:	4b0f      	ldr	r3, [pc, #60]	; (800d768 <Get_SerialNum+0x44>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d730:	4b0e      	ldr	r3, [pc, #56]	; (800d76c <Get_SerialNum+0x48>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d736:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <Get_SerialNum+0x4c>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d73c:	68fa      	ldr	r2, [r7, #12]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4413      	add	r3, r2
 800d742:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d009      	beq.n	800d75e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d74a:	2208      	movs	r2, #8
 800d74c:	4909      	ldr	r1, [pc, #36]	; (800d774 <Get_SerialNum+0x50>)
 800d74e:	68f8      	ldr	r0, [r7, #12]
 800d750:	f000 f814 	bl	800d77c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d754:	2204      	movs	r2, #4
 800d756:	4908      	ldr	r1, [pc, #32]	; (800d778 <Get_SerialNum+0x54>)
 800d758:	68b8      	ldr	r0, [r7, #8]
 800d75a:	f000 f80f 	bl	800d77c <IntToUnicode>
  }
}
 800d75e:	bf00      	nop
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	1fff7590 	.word	0x1fff7590
 800d76c:	1fff7594 	.word	0x1fff7594
 800d770:	1fff7598 	.word	0x1fff7598
 800d774:	20000196 	.word	0x20000196
 800d778:	200001a6 	.word	0x200001a6

0800d77c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b087      	sub	sp, #28
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	4613      	mov	r3, r2
 800d788:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d78e:	2300      	movs	r3, #0
 800d790:	75fb      	strb	r3, [r7, #23]
 800d792:	e027      	b.n	800d7e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	0f1b      	lsrs	r3, r3, #28
 800d798:	2b09      	cmp	r3, #9
 800d79a:	d80b      	bhi.n	800d7b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	0f1b      	lsrs	r3, r3, #28
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	005b      	lsls	r3, r3, #1
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	440b      	add	r3, r1
 800d7ac:	3230      	adds	r2, #48	; 0x30
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	701a      	strb	r2, [r3, #0]
 800d7b2:	e00a      	b.n	800d7ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	0f1b      	lsrs	r3, r3, #28
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	7dfb      	ldrb	r3, [r7, #23]
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	4619      	mov	r1, r3
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	440b      	add	r3, r1
 800d7c4:	3237      	adds	r2, #55	; 0x37
 800d7c6:	b2d2      	uxtb	r2, r2
 800d7c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	011b      	lsls	r3, r3, #4
 800d7ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	4413      	add	r3, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7de:	7dfb      	ldrb	r3, [r7, #23]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	75fb      	strb	r3, [r7, #23]
 800d7e4:	7dfa      	ldrb	r2, [r7, #23]
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d3d3      	bcc.n	800d794 <IntToUnicode+0x18>
  }
}
 800d7ec:	bf00      	nop
 800d7ee:	bf00      	nop
 800d7f0:	371c      	adds	r7, #28
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
	...

0800d7fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b096      	sub	sp, #88	; 0x58
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d804:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d808:	2200      	movs	r2, #0
 800d80a:	601a      	str	r2, [r3, #0]
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	609a      	str	r2, [r3, #8]
 800d810:	60da      	str	r2, [r3, #12]
 800d812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d814:	f107 0310 	add.w	r3, r7, #16
 800d818:	2234      	movs	r2, #52	; 0x34
 800d81a:	2100      	movs	r1, #0
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 fbfd 	bl	800e01c <memset>
  if(pcdHandle->Instance==USB)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4a24      	ldr	r2, [pc, #144]	; (800d8b8 <HAL_PCD_MspInit+0xbc>)
 800d828:	4293      	cmp	r3, r2
 800d82a:	d141      	bne.n	800d8b0 <HAL_PCD_MspInit+0xb4>
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d82c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800d832:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800d836:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d838:	f107 0310 	add.w	r3, r7, #16
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fb f967 	bl	8008b10 <HAL_RCCEx_PeriphCLKConfig>
 800d842:	4603      	mov	r3, r0
 800d844:	2b00      	cmp	r3, #0
 800d846:	d001      	beq.n	800d84c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d848:	f7f3 f958 	bl	8000afc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d84c:	4b1b      	ldr	r3, [pc, #108]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d84e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d850:	4a1a      	ldr	r2, [pc, #104]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d852:	f043 0301 	orr.w	r3, r3, #1
 800d856:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d858:	4b18      	ldr	r3, [pc, #96]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d85a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d85c:	f003 0301 	and.w	r3, r3, #1
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d864:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d868:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d86a:	2302      	movs	r3, #2
 800d86c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d872:	2303      	movs	r3, #3
 800d874:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800d876:	230a      	movs	r3, #10
 800d878:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d87a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d87e:	4619      	mov	r1, r3
 800d880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800d884:	f7f7 ff2e 	bl	80056e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d888:	4b0c      	ldr	r3, [pc, #48]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d88a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d88c:	4a0b      	ldr	r2, [pc, #44]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d88e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d892:	6593      	str	r3, [r2, #88]	; 0x58
 800d894:	4b09      	ldr	r3, [pc, #36]	; (800d8bc <HAL_PCD_MspInit+0xc0>)
 800d896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d89c:	60bb      	str	r3, [r7, #8]
 800d89e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	2043      	movs	r0, #67	; 0x43
 800d8a6:	f7f7 fc70 	bl	800518a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d8aa:	2043      	movs	r0, #67	; 0x43
 800d8ac:	f7f7 fc89 	bl	80051c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	3758      	adds	r7, #88	; 0x58
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	40006800 	.word	0x40006800
 800d8bc:	40021000 	.word	0x40021000

0800d8c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	4610      	mov	r0, r2
 800d8d8:	f7fe fd20 	bl	800c31c <USBD_LL_SetupStage>
}
 800d8dc:	bf00      	nop
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	00db      	lsls	r3, r3, #3
 800d902:	440b      	add	r3, r1
 800d904:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	4619      	mov	r1, r3
 800d90e:	f7fe fd5a 	bl	800c3c6 <USBD_LL_DataOutStage>
}
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
 800d922:	460b      	mov	r3, r1
 800d924:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d92c:	78fa      	ldrb	r2, [r7, #3]
 800d92e:	6879      	ldr	r1, [r7, #4]
 800d930:	4613      	mov	r3, r2
 800d932:	009b      	lsls	r3, r3, #2
 800d934:	4413      	add	r3, r2
 800d936:	00db      	lsls	r3, r3, #3
 800d938:	440b      	add	r3, r1
 800d93a:	333c      	adds	r3, #60	; 0x3c
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	78fb      	ldrb	r3, [r7, #3]
 800d940:	4619      	mov	r1, r3
 800d942:	f7fe fda3 	bl	800c48c <USBD_LL_DataInStage>
}
 800d946:	bf00      	nop
 800d948:	3708      	adds	r7, #8
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fe feb7 	bl	800c6d0 <USBD_LL_SOF>
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}

0800d96a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d96a:	b580      	push	{r7, lr}
 800d96c:	b084      	sub	sp, #16
 800d96e:	af00      	add	r7, sp, #0
 800d970:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d972:	2301      	movs	r3, #1
 800d974:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d001      	beq.n	800d982 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d97e:	f7f3 f8bd 	bl	8000afc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d988:	7bfa      	ldrb	r2, [r7, #15]
 800d98a:	4611      	mov	r1, r2
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe fe61 	bl	800c654 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d998:	4618      	mov	r0, r3
 800d99a:	f7fe fe0d 	bl	800c5b8 <USBD_LL_Reset>
}
 800d99e:	bf00      	nop
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fe fe5c 	bl	800c674 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d005      	beq.n	800d9d0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9c4:	4b04      	ldr	r3, [pc, #16]	; (800d9d8 <HAL_PCD_SuspendCallback+0x30>)
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	4a03      	ldr	r2, [pc, #12]	; (800d9d8 <HAL_PCD_SuspendCallback+0x30>)
 800d9ca:	f043 0306 	orr.w	r3, r3, #6
 800d9ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	e000ed00 	.word	0xe000ed00

0800d9dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	699b      	ldr	r3, [r3, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d007      	beq.n	800d9fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ec:	4b08      	ldr	r3, [pc, #32]	; (800da10 <HAL_PCD_ResumeCallback+0x34>)
 800d9ee:	691b      	ldr	r3, [r3, #16]
 800d9f0:	4a07      	ldr	r2, [pc, #28]	; (800da10 <HAL_PCD_ResumeCallback+0x34>)
 800d9f2:	f023 0306 	bic.w	r3, r3, #6
 800d9f6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d9f8:	f000 fab6 	bl	800df68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fe4c 	bl	800c6a0 <USBD_LL_Resume>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	e000ed00 	.word	0xe000ed00

0800da14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b082      	sub	sp, #8
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800da1c:	f7fa fa28 	bl	8007e70 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800da20:	4a2b      	ldr	r2, [pc, #172]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	4a29      	ldr	r2, [pc, #164]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800da30:	4b27      	ldr	r3, [pc, #156]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da32:	4a28      	ldr	r2, [pc, #160]	; (800dad4 <USBD_LL_Init+0xc0>)
 800da34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800da36:	4b26      	ldr	r3, [pc, #152]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da38:	2208      	movs	r2, #8
 800da3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800da3c:	4b24      	ldr	r3, [pc, #144]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da3e:	2202      	movs	r2, #2
 800da40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800da42:	4b23      	ldr	r3, [pc, #140]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da44:	2202      	movs	r2, #2
 800da46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800da48:	4b21      	ldr	r3, [pc, #132]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800da4e:	4b20      	ldr	r3, [pc, #128]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da50:	2200      	movs	r2, #0
 800da52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800da54:	4b1e      	ldr	r3, [pc, #120]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da56:	2200      	movs	r2, #0
 800da58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800da5a:	4b1d      	ldr	r3, [pc, #116]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da5c:	2200      	movs	r2, #0
 800da5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800da60:	481b      	ldr	r0, [pc, #108]	; (800dad0 <USBD_LL_Init+0xbc>)
 800da62:	f7f8 fcd2 	bl	800640a <HAL_PCD_Init>
 800da66:	4603      	mov	r3, r0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d001      	beq.n	800da70 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800da6c:	f7f3 f846 	bl	8000afc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da76:	2318      	movs	r3, #24
 800da78:	2200      	movs	r2, #0
 800da7a:	2100      	movs	r1, #0
 800da7c:	f7fa f927 	bl	8007cce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da86:	2358      	movs	r3, #88	; 0x58
 800da88:	2200      	movs	r2, #0
 800da8a:	2180      	movs	r1, #128	; 0x80
 800da8c:	f7fa f91f 	bl	8007cce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800da96:	23c0      	movs	r3, #192	; 0xc0
 800da98:	2200      	movs	r2, #0
 800da9a:	2181      	movs	r1, #129	; 0x81
 800da9c:	f7fa f917 	bl	8007cce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800daa6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800daaa:	2200      	movs	r2, #0
 800daac:	2101      	movs	r1, #1
 800daae:	f7fa f90e 	bl	8007cce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dabc:	2200      	movs	r2, #0
 800dabe:	2182      	movs	r1, #130	; 0x82
 800dac0:	f7fa f905 	bl	8007cce <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	200012e4 	.word	0x200012e4
 800dad4:	40006800 	.word	0x40006800

0800dad8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dae0:	2300      	movs	r3, #0
 800dae2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800daee:	4618      	mov	r0, r3
 800daf0:	f7f8 fd9d 	bl	800662e <HAL_PCD_Start>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d816      	bhi.n	800db2c <USBD_LL_Start+0x54>
 800dafe:	a201      	add	r2, pc, #4	; (adr r2, 800db04 <USBD_LL_Start+0x2c>)
 800db00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db04:	0800db15 	.word	0x0800db15
 800db08:	0800db1b 	.word	0x0800db1b
 800db0c:	0800db21 	.word	0x0800db21
 800db10:	0800db27 	.word	0x0800db27
    case HAL_OK :
      usb_status = USBD_OK;
 800db14:	2300      	movs	r3, #0
 800db16:	73fb      	strb	r3, [r7, #15]
    break;
 800db18:	e00b      	b.n	800db32 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db1a:	2303      	movs	r3, #3
 800db1c:	73fb      	strb	r3, [r7, #15]
    break;
 800db1e:	e008      	b.n	800db32 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db20:	2301      	movs	r3, #1
 800db22:	73fb      	strb	r3, [r7, #15]
    break;
 800db24:	e005      	b.n	800db32 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db26:	2303      	movs	r3, #3
 800db28:	73fb      	strb	r3, [r7, #15]
    break;
 800db2a:	e002      	b.n	800db32 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800db2c:	2303      	movs	r3, #3
 800db2e:	73fb      	strb	r3, [r7, #15]
    break;
 800db30:	bf00      	nop
  }
  return usb_status;
 800db32:	7bfb      	ldrb	r3, [r7, #15]
}
 800db34:	4618      	mov	r0, r3
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	4608      	mov	r0, r1
 800db46:	4611      	mov	r1, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	4603      	mov	r3, r0
 800db4c:	70fb      	strb	r3, [r7, #3]
 800db4e:	460b      	mov	r3, r1
 800db50:	70bb      	strb	r3, [r7, #2]
 800db52:	4613      	mov	r3, r2
 800db54:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800db64:	78bb      	ldrb	r3, [r7, #2]
 800db66:	883a      	ldrh	r2, [r7, #0]
 800db68:	78f9      	ldrb	r1, [r7, #3]
 800db6a:	f7f8 fef5 	bl	8006958 <HAL_PCD_EP_Open>
 800db6e:	4603      	mov	r3, r0
 800db70:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800db72:	7bbb      	ldrb	r3, [r7, #14]
 800db74:	2b03      	cmp	r3, #3
 800db76:	d817      	bhi.n	800dba8 <USBD_LL_OpenEP+0x6c>
 800db78:	a201      	add	r2, pc, #4	; (adr r2, 800db80 <USBD_LL_OpenEP+0x44>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800db91 	.word	0x0800db91
 800db84:	0800db97 	.word	0x0800db97
 800db88:	0800db9d 	.word	0x0800db9d
 800db8c:	0800dba3 	.word	0x0800dba3
    case HAL_OK :
      usb_status = USBD_OK;
 800db90:	2300      	movs	r3, #0
 800db92:	73fb      	strb	r3, [r7, #15]
    break;
 800db94:	e00b      	b.n	800dbae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db96:	2303      	movs	r3, #3
 800db98:	73fb      	strb	r3, [r7, #15]
    break;
 800db9a:	e008      	b.n	800dbae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db9c:	2301      	movs	r3, #1
 800db9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dba0:	e005      	b.n	800dbae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dba2:	2303      	movs	r3, #3
 800dba4:	73fb      	strb	r3, [r7, #15]
    break;
 800dba6:	e002      	b.n	800dbae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800dbac:	bf00      	nop
  }
  return usb_status;
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dbd2:	78fa      	ldrb	r2, [r7, #3]
 800dbd4:	4611      	mov	r1, r2
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7f8 ff24 	bl	8006a24 <HAL_PCD_EP_Close>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dbe0:	7bbb      	ldrb	r3, [r7, #14]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d816      	bhi.n	800dc14 <USBD_LL_CloseEP+0x5c>
 800dbe6:	a201      	add	r2, pc, #4	; (adr r2, 800dbec <USBD_LL_CloseEP+0x34>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dbfd 	.word	0x0800dbfd
 800dbf0:	0800dc03 	.word	0x0800dc03
 800dbf4:	0800dc09 	.word	0x0800dc09
 800dbf8:	0800dc0f 	.word	0x0800dc0f
    case HAL_OK :
      usb_status = USBD_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800dc00:	e00b      	b.n	800dc1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	73fb      	strb	r3, [r7, #15]
    break;
 800dc06:	e008      	b.n	800dc1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc0c:	e005      	b.n	800dc1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc0e:	2303      	movs	r3, #3
 800dc10:	73fb      	strb	r3, [r7, #15]
    break;
 800dc12:	e002      	b.n	800dc1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc14:	2303      	movs	r3, #3
 800dc16:	73fb      	strb	r3, [r7, #15]
    break;
 800dc18:	bf00      	nop
  }
  return usb_status;
 800dc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dc3e:	78fa      	ldrb	r2, [r7, #3]
 800dc40:	4611      	mov	r1, r2
 800dc42:	4618      	mov	r0, r3
 800dc44:	f7f8 ffce 	bl	8006be4 <HAL_PCD_EP_SetStall>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dc4c:	7bbb      	ldrb	r3, [r7, #14]
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	d816      	bhi.n	800dc80 <USBD_LL_StallEP+0x5c>
 800dc52:	a201      	add	r2, pc, #4	; (adr r2, 800dc58 <USBD_LL_StallEP+0x34>)
 800dc54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc58:	0800dc69 	.word	0x0800dc69
 800dc5c:	0800dc6f 	.word	0x0800dc6f
 800dc60:	0800dc75 	.word	0x0800dc75
 800dc64:	0800dc7b 	.word	0x0800dc7b
    case HAL_OK :
      usb_status = USBD_OK;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc6c:	e00b      	b.n	800dc86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dc6e:	2303      	movs	r3, #3
 800dc70:	73fb      	strb	r3, [r7, #15]
    break;
 800dc72:	e008      	b.n	800dc86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dc74:	2301      	movs	r3, #1
 800dc76:	73fb      	strb	r3, [r7, #15]
    break;
 800dc78:	e005      	b.n	800dc86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800dc7e:	e002      	b.n	800dc86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dc80:	2303      	movs	r3, #3
 800dc82:	73fb      	strb	r3, [r7, #15]
    break;
 800dc84:	bf00      	nop
  }
  return usb_status;
 800dc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca0:	2300      	movs	r3, #0
 800dca2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dcaa:	78fa      	ldrb	r2, [r7, #3]
 800dcac:	4611      	mov	r1, r2
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7f8 fff8 	bl	8006ca4 <HAL_PCD_EP_ClrStall>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dcb8:	7bbb      	ldrb	r3, [r7, #14]
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d816      	bhi.n	800dcec <USBD_LL_ClearStallEP+0x5c>
 800dcbe:	a201      	add	r2, pc, #4	; (adr r2, 800dcc4 <USBD_LL_ClearStallEP+0x34>)
 800dcc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dcdb 	.word	0x0800dcdb
 800dccc:	0800dce1 	.word	0x0800dce1
 800dcd0:	0800dce7 	.word	0x0800dce7
    case HAL_OK :
      usb_status = USBD_OK;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73fb      	strb	r3, [r7, #15]
    break;
 800dcd8:	e00b      	b.n	800dcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	73fb      	strb	r3, [r7, #15]
    break;
 800dcde:	e008      	b.n	800dcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dce0:	2301      	movs	r3, #1
 800dce2:	73fb      	strb	r3, [r7, #15]
    break;
 800dce4:	e005      	b.n	800dcf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dce6:	2303      	movs	r3, #3
 800dce8:	73fb      	strb	r3, [r7, #15]
    break;
 800dcea:	e002      	b.n	800dcf2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dcec:	2303      	movs	r3, #3
 800dcee:	73fb      	strb	r3, [r7, #15]
    break;
 800dcf0:	bf00      	nop
  }
  return usb_status;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	460b      	mov	r3, r1
 800dd06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dd10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	da0c      	bge.n	800dd32 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dd18:	78fb      	ldrb	r3, [r7, #3]
 800dd1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd1e:	68f9      	ldr	r1, [r7, #12]
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	4613      	mov	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	4413      	add	r3, r2
 800dd28:	00db      	lsls	r3, r3, #3
 800dd2a:	440b      	add	r3, r1
 800dd2c:	3302      	adds	r3, #2
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	e00b      	b.n	800dd4a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dd32:	78fb      	ldrb	r3, [r7, #3]
 800dd34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd38:	68f9      	ldr	r1, [r7, #12]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	440b      	add	r3, r1
 800dd44:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800dd48:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
	...

0800dd58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	460b      	mov	r3, r1
 800dd62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dd72:	78fa      	ldrb	r2, [r7, #3]
 800dd74:	4611      	mov	r1, r2
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7f8 fdc9 	bl	800690e <HAL_PCD_SetAddress>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dd80:	7bbb      	ldrb	r3, [r7, #14]
 800dd82:	2b03      	cmp	r3, #3
 800dd84:	d816      	bhi.n	800ddb4 <USBD_LL_SetUSBAddress+0x5c>
 800dd86:	a201      	add	r2, pc, #4	; (adr r2, 800dd8c <USBD_LL_SetUSBAddress+0x34>)
 800dd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd8c:	0800dd9d 	.word	0x0800dd9d
 800dd90:	0800dda3 	.word	0x0800dda3
 800dd94:	0800dda9 	.word	0x0800dda9
 800dd98:	0800ddaf 	.word	0x0800ddaf
    case HAL_OK :
      usb_status = USBD_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	73fb      	strb	r3, [r7, #15]
    break;
 800dda0:	e00b      	b.n	800ddba <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dda2:	2303      	movs	r3, #3
 800dda4:	73fb      	strb	r3, [r7, #15]
    break;
 800dda6:	e008      	b.n	800ddba <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	73fb      	strb	r3, [r7, #15]
    break;
 800ddac:	e005      	b.n	800ddba <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	73fb      	strb	r3, [r7, #15]
    break;
 800ddb2:	e002      	b.n	800ddba <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddb8:	bf00      	nop
  }
  return usb_status;
 800ddba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3710      	adds	r7, #16
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dde2:	7af9      	ldrb	r1, [r7, #11]
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	f7f8 feb9 	bl	8006b5e <HAL_PCD_EP_Transmit>
 800ddec:	4603      	mov	r3, r0
 800ddee:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ddf0:	7dbb      	ldrb	r3, [r7, #22]
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	d816      	bhi.n	800de24 <USBD_LL_Transmit+0x60>
 800ddf6:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <USBD_LL_Transmit+0x38>)
 800ddf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfc:	0800de0d 	.word	0x0800de0d
 800de00:	0800de13 	.word	0x0800de13
 800de04:	0800de19 	.word	0x0800de19
 800de08:	0800de1f 	.word	0x0800de1f
    case HAL_OK :
      usb_status = USBD_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	75fb      	strb	r3, [r7, #23]
    break;
 800de10:	e00b      	b.n	800de2a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de12:	2303      	movs	r3, #3
 800de14:	75fb      	strb	r3, [r7, #23]
    break;
 800de16:	e008      	b.n	800de2a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de18:	2301      	movs	r3, #1
 800de1a:	75fb      	strb	r3, [r7, #23]
    break;
 800de1c:	e005      	b.n	800de2a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de1e:	2303      	movs	r3, #3
 800de20:	75fb      	strb	r3, [r7, #23]
    break;
 800de22:	e002      	b.n	800de2a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800de24:	2303      	movs	r3, #3
 800de26:	75fb      	strb	r3, [r7, #23]
    break;
 800de28:	bf00      	nop
  }
  return usb_status;
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	607a      	str	r2, [r7, #4]
 800de3e:	603b      	str	r3, [r7, #0]
 800de40:	460b      	mov	r3, r1
 800de42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de44:	2300      	movs	r3, #0
 800de46:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de52:	7af9      	ldrb	r1, [r7, #11]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	f7f8 fe2c 	bl	8006ab4 <HAL_PCD_EP_Receive>
 800de5c:	4603      	mov	r3, r0
 800de5e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800de60:	7dbb      	ldrb	r3, [r7, #22]
 800de62:	2b03      	cmp	r3, #3
 800de64:	d816      	bhi.n	800de94 <USBD_LL_PrepareReceive+0x60>
 800de66:	a201      	add	r2, pc, #4	; (adr r2, 800de6c <USBD_LL_PrepareReceive+0x38>)
 800de68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de6c:	0800de7d 	.word	0x0800de7d
 800de70:	0800de83 	.word	0x0800de83
 800de74:	0800de89 	.word	0x0800de89
 800de78:	0800de8f 	.word	0x0800de8f
    case HAL_OK :
      usb_status = USBD_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	75fb      	strb	r3, [r7, #23]
    break;
 800de80:	e00b      	b.n	800de9a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800de82:	2303      	movs	r3, #3
 800de84:	75fb      	strb	r3, [r7, #23]
    break;
 800de86:	e008      	b.n	800de9a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800de88:	2301      	movs	r3, #1
 800de8a:	75fb      	strb	r3, [r7, #23]
    break;
 800de8c:	e005      	b.n	800de9a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800de8e:	2303      	movs	r3, #3
 800de90:	75fb      	strb	r3, [r7, #23]
    break;
 800de92:	e002      	b.n	800de9a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800de94:	2303      	movs	r3, #3
 800de96:	75fb      	strb	r3, [r7, #23]
    break;
 800de98:	bf00      	nop
  }
  return usb_status;
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	460b      	mov	r3, r1
 800deae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800deb6:	78fa      	ldrb	r2, [r7, #3]
 800deb8:	4611      	mov	r1, r2
 800deba:	4618      	mov	r0, r3
 800debc:	f7f8 fe37 	bl	8006b2e <HAL_PCD_EP_GetRxCount>
 800dec0:	4603      	mov	r3, r0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
	...

0800decc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	460b      	mov	r3, r1
 800ded6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ded8:	78fb      	ldrb	r3, [r7, #3]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <HAL_PCDEx_LPM_Callback+0x18>
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d013      	beq.n	800df0a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dee2:	e023      	b.n	800df2c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d007      	beq.n	800defc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800deec:	f000 f83c 	bl	800df68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800def0:	4b10      	ldr	r3, [pc, #64]	; (800df34 <HAL_PCDEx_LPM_Callback+0x68>)
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	4a0f      	ldr	r2, [pc, #60]	; (800df34 <HAL_PCDEx_LPM_Callback+0x68>)
 800def6:	f023 0306 	bic.w	r3, r3, #6
 800defa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800df02:	4618      	mov	r0, r3
 800df04:	f7fe fbcc 	bl	800c6a0 <USBD_LL_Resume>
    break;
 800df08:	e010      	b.n	800df2c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800df10:	4618      	mov	r0, r3
 800df12:	f7fe fbaf 	bl	800c674 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d005      	beq.n	800df2a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <HAL_PCDEx_LPM_Callback+0x68>)
 800df20:	691b      	ldr	r3, [r3, #16]
 800df22:	4a04      	ldr	r2, [pc, #16]	; (800df34 <HAL_PCDEx_LPM_Callback+0x68>)
 800df24:	f043 0306 	orr.w	r3, r3, #6
 800df28:	6113      	str	r3, [r2, #16]
    break;
 800df2a:	bf00      	nop
}
 800df2c:	bf00      	nop
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	e000ed00 	.word	0xe000ed00

0800df38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800df40:	4b03      	ldr	r3, [pc, #12]	; (800df50 <USBD_static_malloc+0x18>)
}
 800df42:	4618      	mov	r0, r3
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	2000037c 	.word	0x2000037c

0800df54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]

}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800df68:	b480      	push	{r7}
 800df6a:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800df6c:	bf00      	nop
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <_Znwj>:
 800df76:	2801      	cmp	r0, #1
 800df78:	bf38      	it	cc
 800df7a:	2001      	movcc	r0, #1
 800df7c:	b510      	push	{r4, lr}
 800df7e:	4604      	mov	r4, r0
 800df80:	4620      	mov	r0, r4
 800df82:	f000 f843 	bl	800e00c <malloc>
 800df86:	b930      	cbnz	r0, 800df96 <_Znwj+0x20>
 800df88:	f000 f806 	bl	800df98 <_ZSt15get_new_handlerv>
 800df8c:	b908      	cbnz	r0, 800df92 <_Znwj+0x1c>
 800df8e:	f000 f80b 	bl	800dfa8 <abort>
 800df92:	4780      	blx	r0
 800df94:	e7f4      	b.n	800df80 <_Znwj+0xa>
 800df96:	bd10      	pop	{r4, pc}

0800df98 <_ZSt15get_new_handlerv>:
 800df98:	4b02      	ldr	r3, [pc, #8]	; (800dfa4 <_ZSt15get_new_handlerv+0xc>)
 800df9a:	6818      	ldr	r0, [r3, #0]
 800df9c:	f3bf 8f5b 	dmb	ish
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	2000059c 	.word	0x2000059c

0800dfa8 <abort>:
 800dfa8:	b508      	push	{r3, lr}
 800dfaa:	2006      	movs	r0, #6
 800dfac:	f000 f8d0 	bl	800e150 <raise>
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	f7f2 fe45 	bl	8000c40 <_exit>
	...

0800dfb8 <__errno>:
 800dfb8:	4b01      	ldr	r3, [pc, #4]	; (800dfc0 <__errno+0x8>)
 800dfba:	6818      	ldr	r0, [r3, #0]
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	200001b0 	.word	0x200001b0

0800dfc4 <__libc_init_array>:
 800dfc4:	b570      	push	{r4, r5, r6, lr}
 800dfc6:	4d0d      	ldr	r5, [pc, #52]	; (800dffc <__libc_init_array+0x38>)
 800dfc8:	4c0d      	ldr	r4, [pc, #52]	; (800e000 <__libc_init_array+0x3c>)
 800dfca:	1b64      	subs	r4, r4, r5
 800dfcc:	10a4      	asrs	r4, r4, #2
 800dfce:	2600      	movs	r6, #0
 800dfd0:	42a6      	cmp	r6, r4
 800dfd2:	d109      	bne.n	800dfe8 <__libc_init_array+0x24>
 800dfd4:	4d0b      	ldr	r5, [pc, #44]	; (800e004 <__libc_init_array+0x40>)
 800dfd6:	4c0c      	ldr	r4, [pc, #48]	; (800e008 <__libc_init_array+0x44>)
 800dfd8:	f000 f8f8 	bl	800e1cc <_init>
 800dfdc:	1b64      	subs	r4, r4, r5
 800dfde:	10a4      	asrs	r4, r4, #2
 800dfe0:	2600      	movs	r6, #0
 800dfe2:	42a6      	cmp	r6, r4
 800dfe4:	d105      	bne.n	800dff2 <__libc_init_array+0x2e>
 800dfe6:	bd70      	pop	{r4, r5, r6, pc}
 800dfe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfec:	4798      	blx	r3
 800dfee:	3601      	adds	r6, #1
 800dff0:	e7ee      	b.n	800dfd0 <__libc_init_array+0xc>
 800dff2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dff6:	4798      	blx	r3
 800dff8:	3601      	adds	r6, #1
 800dffa:	e7f2      	b.n	800dfe2 <__libc_init_array+0x1e>
 800dffc:	0800e2b0 	.word	0x0800e2b0
 800e000:	0800e2b0 	.word	0x0800e2b0
 800e004:	0800e2b0 	.word	0x0800e2b0
 800e008:	0800e2c0 	.word	0x0800e2c0

0800e00c <malloc>:
 800e00c:	4b02      	ldr	r3, [pc, #8]	; (800e018 <malloc+0xc>)
 800e00e:	4601      	mov	r1, r0
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	f000 b80b 	b.w	800e02c <_malloc_r>
 800e016:	bf00      	nop
 800e018:	200001b0 	.word	0x200001b0

0800e01c <memset>:
 800e01c:	4402      	add	r2, r0
 800e01e:	4603      	mov	r3, r0
 800e020:	4293      	cmp	r3, r2
 800e022:	d100      	bne.n	800e026 <memset+0xa>
 800e024:	4770      	bx	lr
 800e026:	f803 1b01 	strb.w	r1, [r3], #1
 800e02a:	e7f9      	b.n	800e020 <memset+0x4>

0800e02c <_malloc_r>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	1ccd      	adds	r5, r1, #3
 800e030:	f025 0503 	bic.w	r5, r5, #3
 800e034:	3508      	adds	r5, #8
 800e036:	2d0c      	cmp	r5, #12
 800e038:	bf38      	it	cc
 800e03a:	250c      	movcc	r5, #12
 800e03c:	2d00      	cmp	r5, #0
 800e03e:	4606      	mov	r6, r0
 800e040:	db01      	blt.n	800e046 <_malloc_r+0x1a>
 800e042:	42a9      	cmp	r1, r5
 800e044:	d903      	bls.n	800e04e <_malloc_r+0x22>
 800e046:	230c      	movs	r3, #12
 800e048:	6033      	str	r3, [r6, #0]
 800e04a:	2000      	movs	r0, #0
 800e04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e04e:	f000 f8af 	bl	800e1b0 <__malloc_lock>
 800e052:	4921      	ldr	r1, [pc, #132]	; (800e0d8 <_malloc_r+0xac>)
 800e054:	680a      	ldr	r2, [r1, #0]
 800e056:	4614      	mov	r4, r2
 800e058:	b99c      	cbnz	r4, 800e082 <_malloc_r+0x56>
 800e05a:	4f20      	ldr	r7, [pc, #128]	; (800e0dc <_malloc_r+0xb0>)
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	b923      	cbnz	r3, 800e06a <_malloc_r+0x3e>
 800e060:	4621      	mov	r1, r4
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f83c 	bl	800e0e0 <_sbrk_r>
 800e068:	6038      	str	r0, [r7, #0]
 800e06a:	4629      	mov	r1, r5
 800e06c:	4630      	mov	r0, r6
 800e06e:	f000 f837 	bl	800e0e0 <_sbrk_r>
 800e072:	1c43      	adds	r3, r0, #1
 800e074:	d123      	bne.n	800e0be <_malloc_r+0x92>
 800e076:	230c      	movs	r3, #12
 800e078:	6033      	str	r3, [r6, #0]
 800e07a:	4630      	mov	r0, r6
 800e07c:	f000 f89e 	bl	800e1bc <__malloc_unlock>
 800e080:	e7e3      	b.n	800e04a <_malloc_r+0x1e>
 800e082:	6823      	ldr	r3, [r4, #0]
 800e084:	1b5b      	subs	r3, r3, r5
 800e086:	d417      	bmi.n	800e0b8 <_malloc_r+0x8c>
 800e088:	2b0b      	cmp	r3, #11
 800e08a:	d903      	bls.n	800e094 <_malloc_r+0x68>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	441c      	add	r4, r3
 800e090:	6025      	str	r5, [r4, #0]
 800e092:	e004      	b.n	800e09e <_malloc_r+0x72>
 800e094:	6863      	ldr	r3, [r4, #4]
 800e096:	42a2      	cmp	r2, r4
 800e098:	bf0c      	ite	eq
 800e09a:	600b      	streq	r3, [r1, #0]
 800e09c:	6053      	strne	r3, [r2, #4]
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f000 f88c 	bl	800e1bc <__malloc_unlock>
 800e0a4:	f104 000b 	add.w	r0, r4, #11
 800e0a8:	1d23      	adds	r3, r4, #4
 800e0aa:	f020 0007 	bic.w	r0, r0, #7
 800e0ae:	1ac2      	subs	r2, r0, r3
 800e0b0:	d0cc      	beq.n	800e04c <_malloc_r+0x20>
 800e0b2:	1a1b      	subs	r3, r3, r0
 800e0b4:	50a3      	str	r3, [r4, r2]
 800e0b6:	e7c9      	b.n	800e04c <_malloc_r+0x20>
 800e0b8:	4622      	mov	r2, r4
 800e0ba:	6864      	ldr	r4, [r4, #4]
 800e0bc:	e7cc      	b.n	800e058 <_malloc_r+0x2c>
 800e0be:	1cc4      	adds	r4, r0, #3
 800e0c0:	f024 0403 	bic.w	r4, r4, #3
 800e0c4:	42a0      	cmp	r0, r4
 800e0c6:	d0e3      	beq.n	800e090 <_malloc_r+0x64>
 800e0c8:	1a21      	subs	r1, r4, r0
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	f000 f808 	bl	800e0e0 <_sbrk_r>
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	d1dd      	bne.n	800e090 <_malloc_r+0x64>
 800e0d4:	e7cf      	b.n	800e076 <_malloc_r+0x4a>
 800e0d6:	bf00      	nop
 800e0d8:	200005a0 	.word	0x200005a0
 800e0dc:	200005a4 	.word	0x200005a4

0800e0e0 <_sbrk_r>:
 800e0e0:	b538      	push	{r3, r4, r5, lr}
 800e0e2:	4d06      	ldr	r5, [pc, #24]	; (800e0fc <_sbrk_r+0x1c>)
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4608      	mov	r0, r1
 800e0ea:	602b      	str	r3, [r5, #0]
 800e0ec:	f7f2 fdb2 	bl	8000c54 <_sbrk>
 800e0f0:	1c43      	adds	r3, r0, #1
 800e0f2:	d102      	bne.n	800e0fa <_sbrk_r+0x1a>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	b103      	cbz	r3, 800e0fa <_sbrk_r+0x1a>
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	200015d8 	.word	0x200015d8

0800e100 <_raise_r>:
 800e100:	291f      	cmp	r1, #31
 800e102:	b538      	push	{r3, r4, r5, lr}
 800e104:	4604      	mov	r4, r0
 800e106:	460d      	mov	r5, r1
 800e108:	d904      	bls.n	800e114 <_raise_r+0x14>
 800e10a:	2316      	movs	r3, #22
 800e10c:	6003      	str	r3, [r0, #0]
 800e10e:	f04f 30ff 	mov.w	r0, #4294967295
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e116:	b112      	cbz	r2, 800e11e <_raise_r+0x1e>
 800e118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e11c:	b94b      	cbnz	r3, 800e132 <_raise_r+0x32>
 800e11e:	4620      	mov	r0, r4
 800e120:	f000 f830 	bl	800e184 <_getpid_r>
 800e124:	462a      	mov	r2, r5
 800e126:	4601      	mov	r1, r0
 800e128:	4620      	mov	r0, r4
 800e12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e12e:	f000 b817 	b.w	800e160 <_kill_r>
 800e132:	2b01      	cmp	r3, #1
 800e134:	d00a      	beq.n	800e14c <_raise_r+0x4c>
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	d103      	bne.n	800e142 <_raise_r+0x42>
 800e13a:	2316      	movs	r3, #22
 800e13c:	6003      	str	r3, [r0, #0]
 800e13e:	2001      	movs	r0, #1
 800e140:	e7e7      	b.n	800e112 <_raise_r+0x12>
 800e142:	2400      	movs	r4, #0
 800e144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e148:	4628      	mov	r0, r5
 800e14a:	4798      	blx	r3
 800e14c:	2000      	movs	r0, #0
 800e14e:	e7e0      	b.n	800e112 <_raise_r+0x12>

0800e150 <raise>:
 800e150:	4b02      	ldr	r3, [pc, #8]	; (800e15c <raise+0xc>)
 800e152:	4601      	mov	r1, r0
 800e154:	6818      	ldr	r0, [r3, #0]
 800e156:	f7ff bfd3 	b.w	800e100 <_raise_r>
 800e15a:	bf00      	nop
 800e15c:	200001b0 	.word	0x200001b0

0800e160 <_kill_r>:
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4d07      	ldr	r5, [pc, #28]	; (800e180 <_kill_r+0x20>)
 800e164:	2300      	movs	r3, #0
 800e166:	4604      	mov	r4, r0
 800e168:	4608      	mov	r0, r1
 800e16a:	4611      	mov	r1, r2
 800e16c:	602b      	str	r3, [r5, #0]
 800e16e:	f7f2 fd57 	bl	8000c20 <_kill>
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	d102      	bne.n	800e17c <_kill_r+0x1c>
 800e176:	682b      	ldr	r3, [r5, #0]
 800e178:	b103      	cbz	r3, 800e17c <_kill_r+0x1c>
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	bd38      	pop	{r3, r4, r5, pc}
 800e17e:	bf00      	nop
 800e180:	200015d8 	.word	0x200015d8

0800e184 <_getpid_r>:
 800e184:	f7f2 bd44 	b.w	8000c10 <_getpid>

0800e188 <strncpy>:
 800e188:	b510      	push	{r4, lr}
 800e18a:	3901      	subs	r1, #1
 800e18c:	4603      	mov	r3, r0
 800e18e:	b132      	cbz	r2, 800e19e <strncpy+0x16>
 800e190:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e194:	f803 4b01 	strb.w	r4, [r3], #1
 800e198:	3a01      	subs	r2, #1
 800e19a:	2c00      	cmp	r4, #0
 800e19c:	d1f7      	bne.n	800e18e <strncpy+0x6>
 800e19e:	441a      	add	r2, r3
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d100      	bne.n	800e1a8 <strncpy+0x20>
 800e1a6:	bd10      	pop	{r4, pc}
 800e1a8:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ac:	e7f9      	b.n	800e1a2 <strncpy+0x1a>
	...

0800e1b0 <__malloc_lock>:
 800e1b0:	4801      	ldr	r0, [pc, #4]	; (800e1b8 <__malloc_lock+0x8>)
 800e1b2:	f000 b809 	b.w	800e1c8 <__retarget_lock_acquire_recursive>
 800e1b6:	bf00      	nop
 800e1b8:	200015e0 	.word	0x200015e0

0800e1bc <__malloc_unlock>:
 800e1bc:	4801      	ldr	r0, [pc, #4]	; (800e1c4 <__malloc_unlock+0x8>)
 800e1be:	f000 b804 	b.w	800e1ca <__retarget_lock_release_recursive>
 800e1c2:	bf00      	nop
 800e1c4:	200015e0 	.word	0x200015e0

0800e1c8 <__retarget_lock_acquire_recursive>:
 800e1c8:	4770      	bx	lr

0800e1ca <__retarget_lock_release_recursive>:
 800e1ca:	4770      	bx	lr

0800e1cc <_init>:
 800e1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ce:	bf00      	nop
 800e1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1d2:	bc08      	pop	{r3}
 800e1d4:	469e      	mov	lr, r3
 800e1d6:	4770      	bx	lr

0800e1d8 <_fini>:
 800e1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1da:	bf00      	nop
 800e1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1de:	bc08      	pop	{r3}
 800e1e0:	469e      	mov	lr, r3
 800e1e2:	4770      	bx	lr
