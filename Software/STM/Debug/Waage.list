
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf9c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d128  0800d128  0001d128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1f0  0800d1f0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d1f0  0800d1f0  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d1f0  0800d1f0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800d1f0  0800d1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d200  0800d200  0001d200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dbc  200001f4  0800d3f8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb0  0800d3f8  00020fb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034474  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006b8d  00000000  00000000  00054698  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  0005b228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001928  00000000  00000000  0005ce48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023fbf  00000000  00000000  0005e770  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fcb2  00000000  00000000  0008272f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b0cf4  00000000  00000000  000a23e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001530d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000745c  00000000  00000000  00153150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d110 	.word	0x0800d110

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	0800d110 	.word	0x0800d110

080001cc <_ZN7AppMainC1Ev>:
Log logBook = Log(&model);

Time time = Time(&model, &hi2c1);


AppMain::AppMain() {
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 80001da:	4b12      	ldr	r3, [pc, #72]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001dc:	4a12      	ldr	r2, [pc, #72]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001de:	601a      	str	r2, [r3, #0]
	lcSettings1.clkPin = CLK_L1_Pin;
 80001e0:	4b10      	ldr	r3, [pc, #64]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e2:	2220      	movs	r2, #32
 80001e4:	809a      	strh	r2, [r3, #4]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001e8:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001ea:	609a      	str	r2, [r3, #8]
	lcSettings1.dataPin = DATA_L1_Pin;
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001ee:	2210      	movs	r2, #16
 80001f0:	819a      	strh	r2, [r3, #12]
	lcSettings1.loadCellNr = 1;
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <_ZN7AppMainC1Ev+0x58>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	739a      	strb	r2, [r3, #14]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 80001fa:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 80001fc:	601a      	str	r2, [r3, #0]
	lcSettings2.clkPin = CLK_L2_Pin;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000200:	2280      	movs	r2, #128	; 0x80
 8000202:	809a      	strh	r2, [r3, #4]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000206:	4a08      	ldr	r2, [pc, #32]	; (8000228 <_ZN7AppMainC1Ev+0x5c>)
 8000208:	609a      	str	r2, [r3, #8]
	lcSettings2.dataPin = DATA_L2_Pin;
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 800020c:	2240      	movs	r2, #64	; 0x40
 800020e:	819a      	strh	r2, [r3, #12]
	lcSettings2.loadCellNr = 2;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <_ZN7AppMainC1Ev+0x60>)
 8000212:	2202      	movs	r2, #2
 8000214:	739a      	strb	r2, [r3, #14]

}
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	20000210 	.word	0x20000210
 8000228:	48000400 	.word	0x48000400
 800022c:	20000220 	.word	0x20000220

08000230 <_ZN7AppMain4InitEv>:

void AppMain::Init() {
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b085      	sub	sp, #20
 8000234:	af02      	add	r7, sp, #8
 8000236:	6078      	str	r0, [r7, #4]
	loadCell1.InitLoadCell(&model, lcSettings1);
 8000238:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <_ZN7AppMain4InitEv+0xa0>)
 800023a:	466c      	mov	r4, sp
 800023c:	f103 0208 	add.w	r2, r3, #8
 8000240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000244:	e884 0003 	stmia.w	r4, {r0, r1}
 8000248:	cb0c      	ldmia	r3, {r2, r3}
 800024a:	4922      	ldr	r1, [pc, #136]	; (80002d4 <_ZN7AppMain4InitEv+0xa4>)
 800024c:	4822      	ldr	r0, [pc, #136]	; (80002d8 <_ZN7AppMain4InitEv+0xa8>)
 800024e:	f001 fade 	bl	800180e <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 8000252:	4b22      	ldr	r3, [pc, #136]	; (80002dc <_ZN7AppMain4InitEv+0xac>)
 8000254:	466c      	mov	r4, sp
 8000256:	f103 0208 	add.w	r2, r3, #8
 800025a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800025e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000262:	cb0c      	ldmia	r3, {r2, r3}
 8000264:	491b      	ldr	r1, [pc, #108]	; (80002d4 <_ZN7AppMain4InitEv+0xa4>)
 8000266:	481e      	ldr	r0, [pc, #120]	; (80002e0 <_ZN7AppMain4InitEv+0xb0>)
 8000268:	f001 fad1 	bl	800180e <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 800026c:	2201      	movs	r2, #1
 800026e:	2140      	movs	r1, #64	; 0x40
 8000270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000274:	f004 fe62 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	2110      	movs	r1, #16
 800027c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000280:	f004 fe5c 	bl	8004f3c <HAL_GPIO_WritePin>
	screenControl.InitScreen();
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <_ZN7AppMain4InitEv+0xb4>)
 8000286:	f002 ffb1 	bl	80031ec <_ZN13ScreenControl10InitScreenEv>
	timeSynchroCounter = 0;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2108      	movs	r1, #8
 8000294:	4814      	ldr	r0, [pc, #80]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 8000296:	f004 fe51 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800029a:	20c8      	movs	r0, #200	; 0xc8
 800029c:	f004 fb90 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2108      	movs	r1, #8
 80002a4:	4810      	ldr	r0, [pc, #64]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 80002a6:	f004 fe49 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80002aa:	20c8      	movs	r0, #200	; 0xc8
 80002ac:	f004 fb88 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2108      	movs	r1, #8
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <_ZN7AppMain4InitEv+0xb8>)
 80002b6:	f004 fe41 	bl	8004f3c <HAL_GPIO_WritePin>
	contrast.setContrast(0x09);
 80002ba:	2109      	movs	r1, #9
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <_ZN7AppMain4InitEv+0xbc>)
 80002be:	f000 ffad 	bl	800121c <_ZN8Kontrast11setContrastEh>
	logBook.init();
 80002c2:	480b      	ldr	r0, [pc, #44]	; (80002f0 <_ZN7AppMain4InitEv+0xc0>)
 80002c4:	f001 fb3a 	bl	800193c <_ZN3Log4initEv>
}
 80002c8:	bf00      	nop
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd90      	pop	{r4, r7, pc}
 80002d0:	20000210 	.word	0x20000210
 80002d4:	20000230 	.word	0x20000230
 80002d8:	20000270 	.word	0x20000270
 80002dc:	20000220 	.word	0x20000220
 80002e0:	20000284 	.word	0x20000284
 80002e4:	2000029c 	.word	0x2000029c
 80002e8:	48000400 	.word	0x48000400
 80002ec:	20000298 	.word	0x20000298
 80002f0:	200002b8 	.word	0x200002b8

080002f4 <_ZN7AppMain5mainFEv>:

void AppMain::mainF() {
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	ed2d 8b02 	vpush	{d8}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	while (true) {
		if (updateEnable)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <_ZN7AppMain5mainFEv+0x1a>
			updateEnable = false;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
		//loadCell2.Update();
		loadCell1.Update(); //ToDo
 800030e:	482b      	ldr	r0, [pc, #172]	; (80003bc <_ZN7AppMain5mainFEv+0xc8>)
 8000310:	f001 fa97 	bl	8001842 <_ZN8LoadCell6UpdateEv>
		int32_t weight1 = (model.getLoadCell1() - model.getLoadCellOffset1())
 8000314:	482a      	ldr	r0, [pc, #168]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000316:	f001 fc41 	bl	8001b9c <_ZNK5Model12getLoadCell1Ev>
 800031a:	4604      	mov	r4, r0
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 800031e:	f001 fe57 	bl	8001fd0 <_ZNK5Model18getLoadCellOffset1Ev>
 8000322:	4603      	mov	r3, r0
 8000324:	1ae3      	subs	r3, r4, r3
				/ model.getLoadCellGradient1();
 8000326:	ee07 3a90 	vmov	s15, r3
 800032a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800032e:	4824      	ldr	r0, [pc, #144]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000330:	f001 fe1a 	bl	8001f68 <_ZNK5Model20getLoadCellGradient1Ev>
 8000334:	eeb0 7a40 	vmov.f32	s14, s0
 8000338:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800033c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000340:	ee17 3a90 	vmov	r3, s15
 8000344:	60fb      	str	r3, [r7, #12]
		int32_t weight2 = (model.getLoadCell2() - model.getLoadCellOffset2())
 8000346:	481e      	ldr	r0, [pc, #120]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000348:	f001 fc42 	bl	8001bd0 <_ZNK5Model12getLoadCell2Ev>
 800034c:	4604      	mov	r4, r0
 800034e:	481c      	ldr	r0, [pc, #112]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000350:	f001 fe58 	bl	8002004 <_ZNK5Model18getLoadCellOffset2Ev>
 8000354:	4603      	mov	r3, r0
 8000356:	1ae3      	subs	r3, r4, r3
				/ model.getLoadCellGradient2();
 8000358:	ee07 3a90 	vmov	s15, r3
 800035c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000360:	4817      	ldr	r0, [pc, #92]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000362:	f001 fe1b 	bl	8001f9c <_ZNK5Model20getLoadCellGradient2Ev>
 8000366:	eeb0 7a40 	vmov.f32	s14, s0
 800036a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800036e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000372:	ee17 3a90 	vmov	r3, s15
 8000376:	60bb      	str	r3, [r7, #8]
		model.setWeight(weight1);
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	b21b      	sxth	r3, r3
 800037c:	4619      	mov	r1, r3
 800037e:	4810      	ldr	r0, [pc, #64]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000380:	f001 fca4 	bl	8001ccc <_ZN5Model9setWeightEs>
		model.setWeight(weight1 + weight2);
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	b29a      	uxth	r2, r3
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	b29b      	uxth	r3, r3
 800038c:	4413      	add	r3, r2
 800038e:	b29b      	uxth	r3, r3
 8000390:	b21b      	sxth	r3, r3
 8000392:	4619      	mov	r1, r3
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 8000396:	f001 fc99 	bl	8001ccc <_ZN5Model9setWeightEs>
		screenControl.Update();
 800039a:	480a      	ldr	r0, [pc, #40]	; (80003c4 <_ZN7AppMain5mainFEv+0xd0>)
 800039c:	f002 ff3a 	bl	8003214 <_ZN13ScreenControl6UpdateEv>

		if (model.isOverrideClock()) {
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 80003a2:	f001 fefc 	bl	800219e <_ZNK5Model15isOverrideClockEv>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d0a9      	beq.n	8000300 <_ZN7AppMain5mainFEv+0xc>
			time.SetTime();
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <_ZN7AppMain5mainFEv+0xd4>)
 80003ae:	f004 f96c 	bl	800468a <_ZN4Time7SetTimeEv>
			model.setOverrideClock(false);
 80003b2:	2100      	movs	r1, #0
 80003b4:	4802      	ldr	r0, [pc, #8]	; (80003c0 <_ZN7AppMain5mainFEv+0xcc>)
 80003b6:	f001 ff28 	bl	800220a <_ZN5Model16setOverrideClockEb>
		}
	}
 80003ba:	e7a1      	b.n	8000300 <_ZN7AppMain5mainFEv+0xc>
 80003bc:	20000270 	.word	0x20000270
 80003c0:	20000230 	.word	0x20000230
 80003c4:	2000029c 	.word	0x2000029c
 80003c8:	200002c4 	.word	0x200002c4

080003cc <_ZN7AppMain11usbTransmitEPhh>:

}



bool AppMain::usbTransmit(uint8_t *data, uint8_t size){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	4613      	mov	r3, r2
 80003d8:	71fb      	strb	r3, [r7, #7]
	uint16_t counter = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	82fb      	strh	r3, [r7, #22]
	while(CDC_Transmit_FS((uint8_t*) data, size) != USBD_OK){
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	4619      	mov	r1, r3
 80003e4:	68b8      	ldr	r0, [r7, #8]
 80003e6:	f00c f84b 	bl	800c480 <CDC_Transmit_FS>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf14      	ite	ne
 80003f0:	2301      	movne	r3, #1
 80003f2:	2300      	moveq	r3, #0
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d00a      	beq.n	8000410 <_ZN7AppMain11usbTransmitEPhh+0x44>
		counter++;
 80003fa:	8afb      	ldrh	r3, [r7, #22]
 80003fc:	3301      	adds	r3, #1
 80003fe:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(1);
 8000400:	2001      	movs	r0, #1
 8000402:	f004 fadd 	bl	80049c0 <HAL_Delay>
		if(counter >= 200){
 8000406:	8afb      	ldrh	r3, [r7, #22]
 8000408:	2bc7      	cmp	r3, #199	; 0xc7
 800040a:	d9e8      	bls.n	80003de <_ZN7AppMain11usbTransmitEPhh+0x12>
			return false;	//Trasmit faild
 800040c:	2300      	movs	r3, #0
 800040e:	e000      	b.n	8000412 <_ZN7AppMain11usbTransmitEPhh+0x46>
		}
	}
	return true;	//Transmit successful
 8000410:	2301      	movs	r3, #1
}
 8000412:	4618      	mov	r0, r3
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <_ZN7AppMain12ButtonUpdateEv>:




void AppMain::ButtonUpdate() {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	buttonControl.UpdateButton();
 8000424:	4803      	ldr	r0, [pc, #12]	; (8000434 <_ZN7AppMain12ButtonUpdateEv+0x18>)
 8000426:	f000 fd2b 	bl	8000e80 <_ZN13ButtonControl12UpdateButtonEv>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200002a8 	.word	0x200002a8

08000438 <_ZN7AppMain3ClkEv>:

void AppMain::Clk() {
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]

	uint8_t seconds = model.getSeconds();
 8000440:	486c      	ldr	r0, [pc, #432]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 8000442:	f001 fc19 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 8000446:	4603      	mov	r3, r0
 8000448:	73fb      	strb	r3, [r7, #15]
	uint8_t minute = model.getMinute();
 800044a:	486a      	ldr	r0, [pc, #424]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 800044c:	f001 fbda 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 8000450:	4603      	mov	r3, r0
 8000452:	73bb      	strb	r3, [r7, #14]
	uint8_t hours = model.getHour();
 8000454:	4867      	ldr	r0, [pc, #412]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 8000456:	f001 fb84 	bl	8001b62 <_ZNK5Model7getHourEv>
 800045a:	4603      	mov	r3, r0
 800045c:	737b      	strb	r3, [r7, #13]
	uint8_t day = model.getDay();
 800045e:	4865      	ldr	r0, [pc, #404]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 8000460:	f001 fb52 	bl	8001b08 <_ZNK5Model6getDayEv>
 8000464:	4603      	mov	r3, r0
 8000466:	733b      	strb	r3, [r7, #12]
	uint8_t month = model.getMonth();
 8000468:	4862      	ldr	r0, [pc, #392]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 800046a:	f001 fbe8 	bl	8001c3e <_ZNK5Model8getMonthEv>
 800046e:	4603      	mov	r3, r0
 8000470:	72fb      	strb	r3, [r7, #11]
	uint8_t year = model.getYear();
 8000472:	4860      	ldr	r0, [pc, #384]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 8000474:	f001 fc39 	bl	8001cea <_ZNK5Model7getYearEv>
 8000478:	4603      	mov	r3, r0
 800047a:	72bb      	strb	r3, [r7, #10]
	if (model.getSeconds() < 59) {
 800047c:	485d      	ldr	r0, [pc, #372]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 800047e:	f001 fbfb 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 8000482:	4603      	mov	r3, r0
 8000484:	2b3a      	cmp	r3, #58	; 0x3a
 8000486:	bf94      	ite	ls
 8000488:	2301      	movls	r3, #1
 800048a:	2300      	movhi	r3, #0
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d003      	beq.n	800049a <_ZN7AppMain3ClkEv+0x62>
		seconds++;
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	3301      	adds	r3, #1
 8000496:	73fb      	strb	r3, [r7, #15]
 8000498:	e068      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
	} else {
		seconds = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]
		if (minute == 59) {
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	2b3b      	cmp	r3, #59	; 0x3b
 80004a2:	d160      	bne.n	8000566 <_ZN7AppMain3ClkEv+0x12e>
			minute = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	73bb      	strb	r3, [r7, #14]
			if (hours == 23) {
 80004a8:	7b7b      	ldrb	r3, [r7, #13]
 80004aa:	2b17      	cmp	r3, #23
 80004ac:	d157      	bne.n	800055e <_ZN7AppMain3ClkEv+0x126>
				hours = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	737b      	strb	r3, [r7, #13]
				switch (month) {
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	3b01      	subs	r3, #1
 80004b6:	2b0b      	cmp	r3, #11
 80004b8:	d858      	bhi.n	800056c <_ZN7AppMain3ClkEv+0x134>
 80004ba:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <_ZN7AppMain3ClkEv+0x88>)
 80004bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c0:	080004f1 	.word	0x080004f1
 80004c4:	08000543 	.word	0x08000543
 80004c8:	080004f1 	.word	0x080004f1
 80004cc:	08000529 	.word	0x08000529
 80004d0:	080004f1 	.word	0x080004f1
 80004d4:	08000529 	.word	0x08000529
 80004d8:	080004f1 	.word	0x080004f1
 80004dc:	080004f1 	.word	0x080004f1
 80004e0:	08000529 	.word	0x08000529
 80004e4:	080004f1 	.word	0x080004f1
 80004e8:	08000529 	.word	0x08000529
 80004ec:	0800050b 	.word	0x0800050b
				case 3:
				case 5:
				case 7:
				case 8:
				case 10:
					if (day == 31) {
 80004f0:	7b3b      	ldrb	r3, [r7, #12]
 80004f2:	2b1f      	cmp	r3, #31
 80004f4:	d105      	bne.n	8000502 <_ZN7AppMain3ClkEv+0xca>
						day = 1;
 80004f6:	2301      	movs	r3, #1
 80004f8:	733b      	strb	r3, [r7, #12]
						month++;
 80004fa:	7afb      	ldrb	r3, [r7, #11]
 80004fc:	3301      	adds	r3, #1
 80004fe:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 8000500:	e034      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
						day++;
 8000502:	7b3b      	ldrb	r3, [r7, #12]
 8000504:	3301      	adds	r3, #1
 8000506:	733b      	strb	r3, [r7, #12]
					break;
 8000508:	e030      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
				case 12:
					if (day == 31) {
 800050a:	7b3b      	ldrb	r3, [r7, #12]
 800050c:	2b1f      	cmp	r3, #31
 800050e:	d107      	bne.n	8000520 <_ZN7AppMain3ClkEv+0xe8>
						day = 1;
 8000510:	2301      	movs	r3, #1
 8000512:	733b      	strb	r3, [r7, #12]
						month = 1;
 8000514:	2301      	movs	r3, #1
 8000516:	72fb      	strb	r3, [r7, #11]
						year++;
 8000518:	7abb      	ldrb	r3, [r7, #10]
 800051a:	3301      	adds	r3, #1
 800051c:	72bb      	strb	r3, [r7, #10]
					} else {
						day++;
					}
					break;
 800051e:	e025      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
						day++;
 8000520:	7b3b      	ldrb	r3, [r7, #12]
 8000522:	3301      	adds	r3, #1
 8000524:	733b      	strb	r3, [r7, #12]
					break;
 8000526:	e021      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
				case 4:
				case 6:
				case 9:
				case 11:
					if (day == 30) {
 8000528:	7b3b      	ldrb	r3, [r7, #12]
 800052a:	2b1e      	cmp	r3, #30
 800052c:	d105      	bne.n	800053a <_ZN7AppMain3ClkEv+0x102>
						day = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	733b      	strb	r3, [r7, #12]
						month++;
 8000532:	7afb      	ldrb	r3, [r7, #11]
 8000534:	3301      	adds	r3, #1
 8000536:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 8000538:	e018      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
						day++;
 800053a:	7b3b      	ldrb	r3, [r7, #12]
 800053c:	3301      	adds	r3, #1
 800053e:	733b      	strb	r3, [r7, #12]
					break;
 8000540:	e014      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
				case 2:
					if (day == 28) {
 8000542:	7b3b      	ldrb	r3, [r7, #12]
 8000544:	2b1c      	cmp	r3, #28
 8000546:	d105      	bne.n	8000554 <_ZN7AppMain3ClkEv+0x11c>
						day = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	733b      	strb	r3, [r7, #12]
						month++;
 800054c:	7afb      	ldrb	r3, [r7, #11]
 800054e:	3301      	adds	r3, #1
 8000550:	72fb      	strb	r3, [r7, #11]
					} else {
						day++;
					}
					break;
 8000552:	e00b      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
						day++;
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
					break;
 800055a:	bf00      	nop
 800055c:	e006      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
				}
			} else {
				hours++;
 800055e:	7b7b      	ldrb	r3, [r7, #13]
 8000560:	3301      	adds	r3, #1
 8000562:	737b      	strb	r3, [r7, #13]
 8000564:	e002      	b.n	800056c <_ZN7AppMain3ClkEv+0x134>
			}
		} else {
			minute++;
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	3301      	adds	r3, #1
 800056a:	73bb      	strb	r3, [r7, #14]
		}
	}

	if (timeSynchroCounter == 1800) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000574:	d105      	bne.n	8000582 <_ZN7AppMain3ClkEv+0x14a>
		timeSynchroCounter++;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
			time.UpdateTime();

		}
	}

}
 8000580:	e034      	b.n	80005ec <_ZN7AppMain3ClkEv+0x1b4>
		timeSynchroCounter = 0;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <_ZN7AppMain3ClkEv+0x1c0>)
 800058a:	f002 febd 	bl	8003308 <_ZN13ScreenControl16getCurrentScreenEv>
 800058e:	4603      	mov	r3, r0
				&& screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS) {
 8000590:	2b05      	cmp	r3, #5
 8000592:	d007      	beq.n	80005a4 <_ZN7AppMain3ClkEv+0x16c>
 8000594:	4818      	ldr	r0, [pc, #96]	; (80005f8 <_ZN7AppMain3ClkEv+0x1c0>)
 8000596:	f002 feb7 	bl	8003308 <_ZN13ScreenControl16getCurrentScreenEv>
 800059a:	4603      	mov	r3, r0
 800059c:	2b06      	cmp	r3, #6
 800059e:	d001      	beq.n	80005a4 <_ZN7AppMain3ClkEv+0x16c>
 80005a0:	2301      	movs	r3, #1
 80005a2:	e000      	b.n	80005a6 <_ZN7AppMain3ClkEv+0x16e>
 80005a4:	2300      	movs	r3, #0
		if (screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d020      	beq.n	80005ec <_ZN7AppMain3ClkEv+0x1b4>
			model.setSeconds(seconds);
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005b0:	f001 fb6f 	bl	8001c92 <_ZN5Model10setSecondsEh>
			model.setMinute(minute);
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	4619      	mov	r1, r3
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005ba:	f001 fb30 	bl	8001c1e <_ZN5Model9setMinuteEh>
			model.setHour(hours);
 80005be:	7b7b      	ldrb	r3, [r7, #13]
 80005c0:	4619      	mov	r1, r3
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005c4:	f001 fada 	bl	8001b7c <_ZN5Model7setHourEh>
			model.setDay(day);
 80005c8:	7b3b      	ldrb	r3, [r7, #12]
 80005ca:	4619      	mov	r1, r3
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005ce:	f001 faa8 	bl	8001b22 <_ZN5Model6setDayEh>
			model.setMonth(month);
 80005d2:	7afb      	ldrb	r3, [r7, #11]
 80005d4:	4619      	mov	r1, r3
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005d8:	f001 fb3e 	bl	8001c58 <_ZN5Model8setMonthEh>
			model.setYear(year);
 80005dc:	7abb      	ldrb	r3, [r7, #10]
 80005de:	4619      	mov	r1, r3
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <_ZN7AppMain3ClkEv+0x1bc>)
 80005e2:	f001 fb8f 	bl	8001d04 <_ZN5Model7setYearEh>
			time.UpdateTime();
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <_ZN7AppMain3ClkEv+0x1c4>)
 80005e8:	f004 f8cf 	bl	800478a <_ZN4Time10UpdateTimeEv>
}
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000230 	.word	0x20000230
 80005f8:	2000029c 	.word	0x2000029c
 80005fc:	200002c4 	.word	0x200002c4

08000600 <_ZN7AppMain11ReadLogbookEv>:

void AppMain::ReadLogbook() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	uint32_t size = model.getAddrPointer();
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <_ZN7AppMain11ReadLogbookEv+0x48>)
 800060a:	f001 fdd5 	bl	80021b8 <_ZNK5Model14getAddrPointerEv>
 800060e:	4603      	mov	r3, r0
 8000610:	613b      	str	r3, [r7, #16]
	for(uint32_t i = 1; i<10;i++){
 8000612:	2301      	movs	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b09      	cmp	r3, #9
 800061a:	d811      	bhi.n	8000640 <_ZN7AppMain11ReadLogbookEv+0x40>
		uint8_t *txBuffer = logBook.getLogBookEntry(i);
 800061c:	6979      	ldr	r1, [r7, #20]
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <_ZN7AppMain11ReadLogbookEv+0x4c>)
 8000620:	f001 f9cc 	bl	80019bc <_ZN3Log15getLogBookEntryEm>
 8000624:	60f8      	str	r0, [r7, #12]
		usbTransmit(txBuffer, 16);
 8000626:	2210      	movs	r2, #16
 8000628:	68f9      	ldr	r1, [r7, #12]
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fece 	bl	80003cc <_ZN7AppMain11usbTransmitEPhh>
		HAL_Delay(1000);
 8000630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000634:	f004 f9c4 	bl	80049c0 <HAL_Delay>
	for(uint32_t i = 1; i<10;i++){
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e7ea      	b.n	8000616 <_ZN7AppMain11ReadLogbookEv+0x16>
	}

}
 8000640:	bf00      	nop
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000230 	.word	0x20000230
 800064c:	200002b8 	.word	0x200002b8

08000650 <_Z41__static_initialization_and_destruction_0ii>:
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d122      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x56>
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	4293      	cmp	r3, r2
 8000668:	d11d      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x56>
Model model;
 800066a:	4811      	ldr	r0, [pc, #68]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800066c:	f001 f9d4 	bl	8001a18 <_ZN5ModelC1Ev>
LoadCell loadCell1; // = LoadCell(&model, 1);
 8000670:	4810      	ldr	r0, [pc, #64]	; (80006b4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000672:	f001 f8bd 	bl	80017f0 <_ZN8LoadCellC1Ev>
LoadCell loadCell2; // = LoadCell(&model, 2);
 8000676:	4810      	ldr	r0, [pc, #64]	; (80006b8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000678:	f001 f8ba 	bl	80017f0 <_ZN8LoadCellC1Ev>
Kontrast contrast = Kontrast();
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800067e:	f000 fdc1 	bl	8001204 <_ZN8KontrastC1Ev>
ScreenControl screenControl = ScreenControl(&model, &contrast);
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000688:	f002 fd3a 	bl	8003100 <_ZN13ScreenControlC1EP5ModelP8Kontrast>
ButtonControl buttonControl = ButtonControl(&model);
 800068c:	4908      	ldr	r1, [pc, #32]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000690:	f000 fbd8 	bl	8000e44 <_ZN13ButtonControlC1EP5Model>
Log logBook = Log(&model);
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8000696:	480c      	ldr	r0, [pc, #48]	; (80006c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8000698:	f001 f93e 	bl	8001918 <_ZN3LogC1EP5Model>
Time time = Time(&model, &hi2c1);
 800069c:	4a0b      	ldr	r2, [pc, #44]	; (80006cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800069e:	4904      	ldr	r1, [pc, #16]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80006a2:	f003 ffdf 	bl	8004664 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000230 	.word	0x20000230
 80006b4:	20000270 	.word	0x20000270
 80006b8:	20000284 	.word	0x20000284
 80006bc:	20000298 	.word	0x20000298
 80006c0:	2000029c 	.word	0x2000029c
 80006c4:	200002a8 	.word	0x200002a8
 80006c8:	200002b8 	.word	0x200002b8
 80006cc:	20000364 	.word	0x20000364
 80006d0:	200002c4 	.word	0x200002c4

080006d4 <_GLOBAL__sub_I_lcSettings1>:
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff ffb7 	bl	8000650 <_Z41__static_initialization_and_destruction_0ii>
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b56      	ldr	r3, [pc, #344]	; (8000854 <MX_GPIO_Init+0x170>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a55      	ldr	r2, [pc, #340]	; (8000854 <MX_GPIO_Init+0x170>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b53      	ldr	r3, [pc, #332]	; (8000854 <MX_GPIO_Init+0x170>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <MX_GPIO_Init+0x170>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a4f      	ldr	r2, [pc, #316]	; (8000854 <MX_GPIO_Init+0x170>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <MX_GPIO_Init+0x170>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b4a      	ldr	r3, [pc, #296]	; (8000854 <MX_GPIO_Init+0x170>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a49      	ldr	r2, [pc, #292]	; (8000854 <MX_GPIO_Init+0x170>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <MX_GPIO_Init+0x170>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b44      	ldr	r3, [pc, #272]	; (8000854 <MX_GPIO_Init+0x170>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a43      	ldr	r2, [pc, #268]	; (8000854 <MX_GPIO_Init+0x170>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <MX_GPIO_Init+0x170>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000760:	483d      	ldr	r0, [pc, #244]	; (8000858 <MX_GPIO_Init+0x174>)
 8000762:	f004 fbeb 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000766:	2200      	movs	r2, #0
 8000768:	f248 0157 	movw	r1, #32855	; 0x8057
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f004 fbe4 	bl	8004f3c <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	21a9      	movs	r1, #169	; 0xa9
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <MX_GPIO_Init+0x178>)
 800077a:	f004 fbdf 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2108      	movs	r1, #8
 8000782:	4837      	ldr	r0, [pc, #220]	; (8000860 <MX_GPIO_Init+0x17c>)
 8000784:	f004 fbda 	bl	8004f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000788:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <MX_GPIO_Init+0x174>)
 80007a2:	f004 fa41 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 80007a6:	f248 0357 	movw	r3, #32855	; 0x8057
 80007aa:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c2:	f004 fa31 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 80007c6:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d0:	2302      	movs	r3, #2
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f004 fa23 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 80007e2:	23a9      	movs	r3, #169	; 0xa9
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <MX_GPIO_Init+0x178>)
 80007fa:	f004 fa15 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 80007fe:	2302      	movs	r3, #2
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000806:	2302      	movs	r3, #2
 8000808:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <MX_GPIO_Init+0x178>)
 8000812:	f004 fa09 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 8000816:	2350      	movs	r3, #80	; 0x50
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_GPIO_Init+0x178>)
 800082a:	f004 f9fd 	bl	8004c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4806      	ldr	r0, [pc, #24]	; (8000860 <MX_GPIO_Init+0x17c>)
 8000846:	f004 f9ef 	bl	8004c28 <HAL_GPIO_Init>

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	48000800 	.word	0x48000800
 800085c:	48000400 	.word	0x48000400
 8000860:	48001c00 	.word	0x48001c00

08000864 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_I2C1_Init+0x74>)
 800086a:	4a1c      	ldr	r2, [pc, #112]	; (80008dc <MX_I2C1_Init+0x78>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909EEE;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000870:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <MX_I2C1_Init+0x7c>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_I2C1_Init+0x74>)
 800087c:	2201      	movs	r2, #1
 800087e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800089e:	480e      	ldr	r0, [pc, #56]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008a0:	f004 fb64 	bl	8004f6c <HAL_I2C_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008aa:	f000 f93f 	bl	8000b2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008b4:	f004 ffb4 	bl	8005820 <HAL_I2CEx_ConfigAnalogFilter>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80008be:	f000 f935 	bl	8000b2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c2:	2100      	movs	r1, #0
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_I2C1_Init+0x74>)
 80008c6:	f004 fff6 	bl	80058b6 <HAL_I2CEx_ConfigDigitalFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 f92c 	bl	8000b2c <Error_Handler>
  }

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000364 	.word	0x20000364
 80008dc:	40005400 	.word	0x40005400
 80008e0:	10909eee 	.word	0x10909eee

080008e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a18      	ldr	r2, [pc, #96]	; (8000964 <HAL_I2C_MspInit+0x80>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d129      	bne.n	800095a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_I2C_MspInit+0x84>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_I2C_MspInit+0x84>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_I2C_MspInit+0x84>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800091e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000928:	2301      	movs	r3, #1
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000930:	2304      	movs	r3, #4
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f004 f973 	bl	8004c28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_I2C_MspInit+0x84>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x84>)
 8000948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094c:	6593      	str	r3, [r2, #88]	; 0x58
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_I2C_MspInit+0x84>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095a:	bf00      	nop
 800095c:	3728      	adds	r7, #40	; 0x28
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40005400 	.word	0x40005400
 8000968:	40021000 	.word	0x40021000

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000970:	f003 ffb1 	bl	80048d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000974:	f000 f81e 	bl	80009b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000978:	f7ff feb4 	bl	80006e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800097c:	f7ff ff72 	bl	8000864 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000980:	f000 f9ee 	bl	8000d60 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000984:	f00b fcbc 	bl	800c300 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <main+0x3c>)
 800098a:	f7ff ffab 	bl	80008e4 <HAL_I2C_MspInit>
  HAL_TIM_Base_MspInit(&htim2);
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <main+0x40>)
 8000990:	f000 fa34 	bl	8000dfc <HAL_TIM_Base_MspInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <main+0x40>)
 8000996:	f007 fbff 	bl	8008198 <HAL_TIM_Base_Start_IT>

  appMain.Init();
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <main+0x44>)
 800099c:	f7ff fc48 	bl	8000230 <_ZN7AppMain4InitEv>
  appMain.mainF();
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <main+0x44>)
 80009a2:	f7ff fca7 	bl	80002f4 <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <main+0x3a>
 80009a8:	20000364 	.word	0x20000364
 80009ac:	200003b0 	.word	0x200003b0
 80009b0:	200002cc 	.word	0x200002cc

080009b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0a4      	sub	sp, #144	; 0x90
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009be:	2244      	movs	r2, #68	; 0x44
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00c fa9e 	bl	800cf04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2234      	movs	r2, #52	; 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f00c fa90 	bl	800cf04 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009e4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009e8:	f006 fb54 	bl	8007094 <HAL_PWREx_ControlVoltageScaling>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bf14      	ite	ne
 80009f2:	2301      	movne	r3, #1
 80009f4:	2300      	moveq	r3, #0
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 80009fc:	f000 f896 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000a00:	2312      	movs	r3, #18
 8000a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000a16:	23b0      	movs	r3, #176	; 0xb0
 8000a18:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f006 fb8e 	bl	8007160 <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	bf14      	ite	ne
 8000a4a:	2301      	movne	r3, #1
 8000a4c:	2300      	moveq	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000a54:	f000 f86a 	bl	8000b2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a58:	230f      	movs	r3, #15
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2104      	movs	r1, #4
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 ffda 	bl	8007a2c <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000a88:	f000 f850 	bl	8000b2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000a8c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a90:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000a96:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f007 f99c 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	bf14      	ite	ne
 8000aaa:	2301      	movne	r3, #1
 8000aac:	2300      	moveq	r3, #0
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000ab4:	f000 f83a 	bl	8000b2c <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3790      	adds	r7, #144	; 0x90
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

uint8_t timeCounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	/*IO_COM Synchronisationstimer*/
	if(htim->Instance == TIM2){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad0:	d116      	bne.n	8000b00 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timeCounter == 99){
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b63      	cmp	r3, #99	; 0x63
 8000ad8:	d106      	bne.n	8000ae8 <HAL_TIM_PeriodElapsedCallback+0x28>
			appMain.Clk();
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000adc:	f7ff fcac 	bl	8000438 <_ZN7AppMain3ClkEv>
			timeCounter = 0;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	701a      	strb	r2, [r3, #0]
 8000ae6:	e005      	b.n	8000af4 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			timeCounter++;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000af2:	701a      	strb	r2, [r3, #0]
		}
		appMain.ButtonUpdate();
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000af6:	f7ff fc91 	bl	800041c <_ZN7AppMain12ButtonUpdateEv>
		appMain.updateEnable = true;
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200002d4 	.word	0x200002d4
 8000b0c:	200002cc 	.word	0x200002cc

08000b10 <USBReceive>:



void USBReceive(uint8_t *buf){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

		appMain.ReadLogbook();
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <USBReceive+0x18>)
 8000b1a:	f7ff fd71 	bl	8000600 <_ZN7AppMain11ReadLogbookEv>


}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200002cc 	.word	0x200002cc

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_Z41__static_initialization_and_destruction_0ii>:
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d107      	bne.n	8000b5c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d102      	bne.n	8000b5c <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000b56:	4803      	ldr	r0, [pc, #12]	; (8000b64 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000b58:	f7ff fb38 	bl	80001cc <_ZN7AppMainC1Ev>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200002cc 	.word	0x200002cc

08000b68 <_GLOBAL__sub_I_appMain>:
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff ffe3 	bl	8000b3c <_Z41__static_initialization_and_destruction_0ii>
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_MspInit+0x44>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_MspInit+0x44>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <HAL_MspInit+0x44>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <HAL_MspInit+0x44>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9a:	4a08      	ldr	r2, [pc, #32]	; (8000bbc <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_MspInit+0x44>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	370c      	adds	r7, #12
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f003 feb4 	bl	8004980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM2_IRQHandler+0x10>)
 8000c22:	f007 fb0d 	bl	8008240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200003b0 	.word	0x200003b0

08000c30 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <USB_IRQHandler+0x10>)
 8000c36:	f004 ffbe 	bl	8005bb6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000cb8 	.word	0x20000cb8

08000c44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
	return 1;
 8000c48:	2301      	movs	r3, #1
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_kill>:

int _kill(int pid, int sig)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c5e:	f00c f917 	bl	800ce90 <__errno>
 8000c62:	4602      	mov	r2, r0
 8000c64:	2316      	movs	r3, #22
 8000c66:	6013      	str	r3, [r2, #0]
	return -1;
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_exit>:

void _exit (int status)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff ffe7 	bl	8000c54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c86:	e7fe      	b.n	8000c86 <_exit+0x12>

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f00c f8ea 	bl	800ce90 <__errno>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000a000 	.word	0x2000a000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	200002d8 	.word	0x200002d8
 8000cf0:	20000fb0 	.word	0x20000fb0

08000cf4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <SystemInit+0x64>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <SystemInit+0x64>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <SystemInit+0x68>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <SystemInit+0x68>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <SystemInit+0x68>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <SystemInit+0x68>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <SystemInit+0x68>)
 8000d20:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d24:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <SystemInit+0x68>)
 8000d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d30:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <SystemInit+0x68>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <SystemInit+0x68>)
 8000d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	; (8000d5c <SystemInit+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SystemInit+0x64>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	40021000 	.word	0x40021000

08000d60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d88:	2210      	movs	r2, #16
 8000d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d94:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000da2:	2280      	movs	r2, #128	; 0x80
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000da8:	f007 f99e 	bl	80080e8 <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000db2:	f7ff febb 	bl	8000b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000dc4:	f007 fb5b 	bl	800847e <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dce:	f7ff fead 	bl	8000b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_TIM2_Init+0x98>)
 8000de0:	f007 fd2c 	bl	800883c <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dea:	f7ff fe9f 	bl	8000b2c <Error_Handler>
  }

}
 8000dee:	bf00      	nop
 8000df0:	3720      	adds	r7, #32
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200003b0 	.word	0x200003b0

08000dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e0c:	d113      	bne.n	8000e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6593      	str	r3, [r2, #88]	; 0x58
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_Base_MspInit+0x44>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201c      	movs	r0, #28
 8000e2c:	f003 fec5 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e30:	201c      	movs	r0, #28
 8000e32:	f003 fede 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40021000 	.word	0x40021000

08000e44 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	60da      	str	r2, [r3, #12]
}
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000e88:	2108      	movs	r1, #8
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f004 f83d 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d005      	beq.n	8000eae <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	795b      	ldrb	r3, [r3, #5]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d90d      	bls.n	8000ed2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795b      	ldrb	r3, [r3, #5]
 8000eba:	2b63      	cmp	r3, #99	; 0x63
 8000ebc:	d809      	bhi.n	8000ed2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec4:	f004 f822 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8000ed2:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d008      	beq.n	8000eea <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 ff4a 	bl	8001d78 <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	795b      	ldrb	r3, [r3, #5]
 8000eee:	2b64      	cmp	r3, #100	; 0x64
 8000ef0:	d90f      	bls.n	8000f12 <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f083 0301 	eor.w	r3, r3, #1
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d008      	beq.n	8000f12 <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	2101      	movs	r1, #1
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff19 	bl	8001d3e <_ZN5Model9setT1LongEb>
		T1last = true;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8000f12:	2108      	movs	r1, #8
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f18:	f003 fff8 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 8000f38:	2120      	movs	r1, #32
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f003 ffe5 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	bf14      	ite	ne
 8000f48:	2301      	movne	r3, #1
 8000f4a:	2300      	moveq	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	799b      	ldrb	r3, [r3, #6]
 8000f56:	3301      	adds	r3, #1
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d90d      	bls.n	8000f82 <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	799b      	ldrb	r3, [r3, #6]
 8000f6a:	2b63      	cmp	r3, #99	; 0x63
 8000f6c:	d809      	bhi.n	8000f82 <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 8000f6e:	2120      	movs	r1, #32
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f003 ffca 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <_ZN13ButtonControl12UpdateButtonEv+0x102>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 8000f82:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d008      	beq.n	8000f9a <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 ff2c 	bl	8001dec <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d90f      	bls.n	8000fc2 <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	f083 0301 	eor.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d008      	beq.n	8000fc2 <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fefb 	bl	8001db2 <_ZN5Model9setT2LongEb>
		T2last = true;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f003 ffa0 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bf0c      	ite	eq
 8000fd2:	2301      	moveq	r3, #1
 8000fd4:	2300      	movne	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f003 ff8d 	bl	8004f0c <HAL_GPIO_ReadPin>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	79db      	ldrb	r3, [r3, #7]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8001012:	2b02      	cmp	r3, #2
 8001014:	d90d      	bls.n	8001032 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	79db      	ldrb	r3, [r3, #7]
 800101a:	2b63      	cmp	r3, #99	; 0x63
 800101c:	d809      	bhi.n	8001032 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001024:	f003 ff72 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8001032:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8001034:	2b00      	cmp	r3, #0
 8001036:	d008      	beq.n	800104a <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	2101      	movs	r1, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f000 ff0e 	bl	8001e60 <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	79db      	ldrb	r3, [r3, #7]
 800104e:	2b64      	cmp	r3, #100	; 0x64
 8001050:	d90f      	bls.n	8001072 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d008      	beq.n	8001072 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	2101      	movs	r1, #1
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fedd 	bl	8001e26 <_ZN5Model9setT3LongEb>
		T3last = true;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 8001072:	2180      	movs	r1, #128	; 0x80
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f003 ff48 	bl	8004f0c <HAL_GPIO_ReadPin>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf0c      	ite	eq
 8001082:	2301      	moveq	r3, #1
 8001084:	2300      	movne	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 8001098:	2102      	movs	r1, #2
 800109a:	4859      	ldr	r0, [pc, #356]	; (8001200 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 800109c:	f003 ff36 	bl	8004f0c <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	7a1b      	ldrb	r3, [r3, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d90c      	bls.n	80010de <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	2b63      	cmp	r3, #99	; 0x63
 80010ca:	d808      	bhi.n	80010de <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 80010cc:	2102      	movs	r1, #2
 80010ce:	484c      	ldr	r0, [pc, #304]	; (8001200 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 80010d0:	f003 ff1c 	bl	8004f0c <HAL_GPIO_ReadPin>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <_ZN13ButtonControl12UpdateButtonEv+0x260>
 80010de:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fef2 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7a1b      	ldrb	r3, [r3, #8]
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d90f      	bls.n	800111e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	78db      	ldrb	r3, [r3, #3]
 8001102:	f083 0301 	eor.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fec1 	bl	8001e9a <_ZN5Model9setT4LongEb>
		T4last = true;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 800111e:	2102      	movs	r1, #2
 8001120:	4837      	ldr	r0, [pc, #220]	; (8001200 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001122:	f003 fef3 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f003 fedf 	bl	8004f0c <HAL_GPIO_ReadPin>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf14      	ite	ne
 8001154:	2301      	movne	r3, #1
 8001156:	2300      	moveq	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	7a5b      	ldrb	r3, [r3, #9]
 8001162:	3301      	adds	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 800116e:	2b02      	cmp	r3, #2
 8001170:	d90e      	bls.n	8001190 <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7a5b      	ldrb	r3, [r3, #9]
 8001176:	2b63      	cmp	r3, #99	; 0x63
 8001178:	d80a      	bhi.n	8001190 <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 800117a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001182:	f003 fec3 	bl	8004f0c <HAL_GPIO_ReadPin>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <_ZN13ButtonControl12UpdateButtonEv+0x310>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <_ZN13ButtonControl12UpdateButtonEv+0x312>
 8001190:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8001192:	2b00      	cmp	r3, #0
 8001194:	d008      	beq.n	80011a8 <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2101      	movs	r1, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f000 fed3 	bl	8001f48 <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7a5b      	ldrb	r3, [r3, #9]
 80011ac:	2b64      	cmp	r3, #100	; 0x64
 80011ae:	d90f      	bls.n	80011d0 <_ZN13ButtonControl12UpdateButtonEv+0x350>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	791b      	ldrb	r3, [r3, #4]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 fea2 	bl	8001f0e <_ZN5Model9setT5LongEb>
		T5last = true;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 80011d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d8:	f003 fe98 	bl	8004f0c <HAL_GPIO_ReadPin>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf0c      	ite	eq
 80011e2:	2301      	moveq	r3, #1
 80011e4:	2300      	movne	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	725a      	strb	r2, [r3, #9]
	}



}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	48000400 	.word	0x48000400

08001204 <_ZN8KontrastC1Ev>:
#include "Kontrast.h"
#include "i2c.h"



Kontrast::Kontrast() {
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <_ZN8Kontrast11setContrastEh>:

void Kontrast::setContrast(uint8_t data) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af02      	add	r7, sp, #8
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	70fb      	strb	r3, [r7, #3]
	uint8_t txData[2];
	txData[0] = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	737b      	strb	r3, [r7, #13]

 HAL_I2C_Master_Transmit(&hi2c1,0x2E<<1, (uint8_t*)txData,2,1000);
 8001230:	f107 020c 	add.w	r2, r7, #12
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2302      	movs	r3, #2
 800123c:	215c      	movs	r1, #92	; 0x5c
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <_ZN8Kontrast11setContrastEh+0x30>)
 8001240:	f003 ff24 	bl	800508c <HAL_I2C_Master_Transmit>

}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000364 	.word	0x20000364

08001250 <_ZN3LCDC1Ev>:
#include "main.h"




LCD::LCD() {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

}
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2102      	movs	r1, #2
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f003 fe60 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2104      	movs	r1, #4
 8001280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001284:	f003 fe5a 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2108      	movs	r1, #8
 800128c:	4821      	ldr	r0, [pc, #132]	; (8001314 <_ZN3LCD7InitLCDEv+0xac>)
 800128e:	f003 fe55 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f003 fe4e 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a6:	481c      	ldr	r0, [pc, #112]	; (8001318 <_ZN3LCD7InitLCDEv+0xb0>)
 80012a8:	f003 fe48 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <_ZN3LCD7InitLCDEv+0xb0>)
 80012b4:	f003 fe42 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2101      	movs	r1, #1
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f003 fe3c 	bl	8004f3c <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 80012c4:	2130      	movs	r1, #48	; 0x30
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f92c 	bl	8001524 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 80012cc:	2130      	movs	r1, #48	; 0x30
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f928 	bl	8001524 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 80012d4:	2130      	movs	r1, #48	; 0x30
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f924 	bl	8001524 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x20);
 80012dc:	2120      	movs	r1, #32
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f920 	bl	8001524 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommand(0x28);
 80012e4:	2128      	movs	r1, #40	; 0x28
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 f966 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x10); //Set cursor
 80012ec:	2110      	movs	r1, #16
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f962 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 80012f4:	210f      	movs	r1, #15
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f95e 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x06);
 80012fc:	2106      	movs	r1, #6
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f95a 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x01);
 8001304:	2101      	movs	r1, #1
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f956 	bl	80015b8 <_ZN3LCD12WriteCommandEh>

}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	48001c00 	.word	0x48001c00
 8001318:	48000800 	.word	0x48000800

0800131c <_ZN3LCD5WriteEPchhS0_hh>:


void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	4611      	mov	r1, r2
 8001328:	461a      	mov	r2, r3
 800132a:	460b      	mov	r3, r1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	4613      	mov	r3, r2
 8001330:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 8001332:	2180      	movs	r1, #128	; 0x80
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f93f 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
 800133e:	7dfa      	ldrb	r2, [r7, #23]
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	429a      	cmp	r2, r3
 8001344:	d207      	bcs.n	8001356 <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 8001346:	2110      	movs	r1, #16
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f9c3 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	3301      	adds	r3, #1
 8001352:	75fb      	strb	r3, [r7, #23]
 8001354:	e7f3      	b.n	800133e <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 8001356:	2300      	movs	r3, #0
 8001358:	75bb      	strb	r3, [r7, #22]
 800135a:	7dbb      	ldrb	r3, [r7, #22]
 800135c:	2b0b      	cmp	r3, #11
 800135e:	d814      	bhi.n	800138a <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	7dbb      	ldrb	r3, [r7, #22]
 8001364:	429a      	cmp	r2, r3
 8001366:	d908      	bls.n	800137a <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 8001368:	7dbb      	ldrb	r3, [r7, #22]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f9ae 	bl	80016d4 <_ZN3LCD9WriteDataEh>
 8001378:	e003      	b.n	8001382 <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 800137a:	2110      	movs	r1, #16
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f000 f9a9 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	3301      	adds	r3, #1
 8001386:	75bb      	strb	r3, [r7, #22]
 8001388:	e7e7      	b.n	800135a <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 800138a:	21c0      	movs	r1, #192	; 0xc0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f913 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001392:	2300      	movs	r3, #0
 8001394:	757b      	strb	r3, [r7, #21]
 8001396:	7d7a      	ldrb	r2, [r7, #21]
 8001398:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800139c:	429a      	cmp	r2, r3
 800139e:	d207      	bcs.n	80013b0 <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 80013a0:	2110      	movs	r1, #16
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f996 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 80013a8:	7d7b      	ldrb	r3, [r7, #21]
 80013aa:	3301      	adds	r3, #1
 80013ac:	757b      	strb	r3, [r7, #21]
 80013ae:	e7f2      	b.n	8001396 <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 80013b0:	2300      	movs	r3, #0
 80013b2:	753b      	strb	r3, [r7, #20]
 80013b4:	7d3a      	ldrb	r2, [r7, #20]
 80013b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ba:	f1c3 030c 	rsb	r3, r3, #12
 80013be:	429a      	cmp	r2, r3
 80013c0:	da15      	bge.n	80013ee <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 80013c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013c6:	7d3b      	ldrb	r3, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d908      	bls.n	80013de <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 80013cc:	7d3b      	ldrb	r3, [r7, #20]
 80013ce:	6a3a      	ldr	r2, [r7, #32]
 80013d0:	4413      	add	r3, r2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f97c 	bl	80016d4 <_ZN3LCD9WriteDataEh>
 80013dc:	e003      	b.n	80013e6 <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 80013de:	2110      	movs	r1, #16
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 f977 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80013e6:	7d3b      	ldrb	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	753b      	strb	r3, [r7, #20]
 80013ec:	e7e2      	b.n	80013b4 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZN3LCD5WriteEPKchhPchh>:


void LCD::Write(const char* line1, uint8_t lenght1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	4611      	mov	r1, r2
 8001402:	461a      	mov	r2, r3
 8001404:	460b      	mov	r3, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
	WriteCommand(0x80+startl1);
 800140c:	79bb      	ldrb	r3, [r7, #6]
 800140e:	3b80      	subs	r3, #128	; 0x80
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4619      	mov	r1, r3
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f8cf 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 800141a:	2300      	movs	r3, #0
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	7dfa      	ldrb	r2, [r7, #23]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	f1c3 030c 	rsb	r3, r3, #12
 8001426:	429a      	cmp	r2, r3
 8001428:	da14      	bge.n	8001454 <_ZN3LCD5WriteEPKchhPchh+0x5e>
		if(lenght1 > i){
 800142a:	79fa      	ldrb	r2, [r7, #7]
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	429a      	cmp	r2, r3
 8001430:	d908      	bls.n	8001444 <_ZN3LCD5WriteEPKchhPchh+0x4e>
			WriteData(line1[i]);
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f949 	bl	80016d4 <_ZN3LCD9WriteDataEh>
 8001442:	e003      	b.n	800144c <_ZN3LCD5WriteEPKchhPchh+0x56>
		}else{
			WriteData(0x10);
 8001444:	2110      	movs	r1, #16
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 f944 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	3301      	adds	r3, #1
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	e7e4      	b.n	800141e <_ZN3LCD5WriteEPKchhPchh+0x28>
		}
	}


	WriteCommand(0x80+0x40);
 8001454:	21c0      	movs	r1, #192	; 0xc0
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f8ae 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 800145c:	2300      	movs	r3, #0
 800145e:	75bb      	strb	r3, [r7, #22]
 8001460:	7dba      	ldrb	r2, [r7, #22]
 8001462:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001466:	429a      	cmp	r2, r3
 8001468:	d207      	bcs.n	800147a <_ZN3LCD5WriteEPKchhPchh+0x84>
		WriteData(0x10);
 800146a:	2110      	movs	r1, #16
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f931 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001472:	7dbb      	ldrb	r3, [r7, #22]
 8001474:	3301      	adds	r3, #1
 8001476:	75bb      	strb	r3, [r7, #22]
 8001478:	e7f2      	b.n	8001460 <_ZN3LCD5WriteEPKchhPchh+0x6a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 800147a:	2300      	movs	r3, #0
 800147c:	757b      	strb	r3, [r7, #21]
 800147e:	7d7a      	ldrb	r2, [r7, #21]
 8001480:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001484:	f1c3 030c 	rsb	r3, r3, #12
 8001488:	429a      	cmp	r2, r3
 800148a:	da15      	bge.n	80014b8 <_ZN3LCD5WriteEPKchhPchh+0xc2>
		if(lengthL2 > i){
 800148c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001490:	7d7b      	ldrb	r3, [r7, #21]
 8001492:	429a      	cmp	r2, r3
 8001494:	d908      	bls.n	80014a8 <_ZN3LCD5WriteEPKchhPchh+0xb2>
			WriteData(line2[i]);
 8001496:	7d7b      	ldrb	r3, [r7, #21]
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f917 	bl	80016d4 <_ZN3LCD9WriteDataEh>
 80014a6:	e003      	b.n	80014b0 <_ZN3LCD5WriteEPKchhPchh+0xba>
		}else{
			WriteData(0x10);
 80014a8:	2110      	movs	r1, #16
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f000 f912 	bl	80016d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80014b0:	7d7b      	ldrb	r3, [r7, #21]
 80014b2:	3301      	adds	r3, #1
 80014b4:	757b      	strb	r3, [r7, #21]
 80014b6:	e7e2      	b.n	800147e <_ZN3LCD5WriteEPKchhPchh+0x88>
		}
	}


}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	70fb      	strb	r3, [r7, #3]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70bb      	strb	r3, [r7, #2]
 80014d6:	4613      	mov	r3, r2
 80014d8:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 80014da:	78bb      	ldrb	r3, [r7, #2]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	3b80      	subs	r3, #128	; 0x80
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	4619      	mov	r1, r3
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f865 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
 80014ee:	e009      	b.n	8001504 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 80014f0:	78bb      	ldrb	r3, [r7, #2]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d106      	bne.n	8001504 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	3b40      	subs	r3, #64	; 0x40
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f85a 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 8001504:	787b      	ldrb	r3, [r7, #1]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 800150a:	210f      	movs	r1, #15
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f853 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
	}




}
 8001512:	e003      	b.n	800151c <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001514:	210f      	movs	r1, #15
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f84e 	bl	80015b8 <_ZN3LCD12WriteCommandEh>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	111b      	asrs	r3, r3, #4
 8001534:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	2102      	movs	r1, #2
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f003 fcf9 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	2104      	movs	r1, #4
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f003 fcef 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
 8001568:	2108      	movs	r1, #8
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 800156c:	f003 fce6 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	b2db      	uxtb	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001582:	f003 fcdb 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f003 fa1a 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001594:	f003 fcd2 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001598:	2001      	movs	r0, #1
 800159a:	f003 fa11 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2101      	movs	r1, #1
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f003 fcc9 	bl	8004f3c <HAL_GPIO_WritePin>
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	48001c00 	.word	0x48001c00

080015b8 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	4840      	ldr	r0, [pc, #256]	; (80016cc <_ZN3LCD12WriteCommandEh+0x114>)
 80015cc:	f003 fcb6 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	483d      	ldr	r0, [pc, #244]	; (80016cc <_ZN3LCD12WriteCommandEh+0x114>)
 80015d8:	f003 fcb0 	bl	8004f3c <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 80015dc:	78fb      	ldrb	r3, [r7, #3]
 80015de:	111b      	asrs	r3, r3, #4
 80015e0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	2102      	movs	r1, #2
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f2:	f003 fca3 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	2104      	movs	r1, #4
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f003 fc99 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	2108      	movs	r1, #8
 8001616:	482e      	ldr	r0, [pc, #184]	; (80016d0 <_ZN3LCD12WriteCommandEh+0x118>)
 8001618:	f003 fc90 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f003 fc85 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2101      	movs	r1, #1
 8001636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163a:	f003 fc7f 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f003 f9be 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f003 fc76 	bl	8004f3c <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001650:	78fb      	ldrb	r3, [r7, #3]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	2102      	movs	r1, #2
 800165c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001660:	f003 fc6c 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	2104      	movs	r1, #4
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f003 fc62 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	b2db      	uxtb	r3, r3
 8001680:	461a      	mov	r2, r3
 8001682:	2108      	movs	r1, #8
 8001684:	4812      	ldr	r0, [pc, #72]	; (80016d0 <_ZN3LCD12WriteCommandEh+0x118>)
 8001686:	f003 fc59 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 800168a:	78fb      	ldrb	r3, [r7, #3]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f003 fc4e 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80016a0:	2201      	movs	r2, #1
 80016a2:	2101      	movs	r1, #1
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f003 fc48 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016ac:	2001      	movs	r0, #1
 80016ae:	f003 f987 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ba:	f003 fc3f 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f003 f97e 	bl	80049c0 <HAL_Delay>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48001c00 	.word	0x48001c00

080016d4 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	4840      	ldr	r0, [pc, #256]	; (80017e8 <_ZN3LCD9WriteDataEh+0x114>)
 80016e8:	f003 fc28 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f2:	483d      	ldr	r0, [pc, #244]	; (80017e8 <_ZN3LCD9WriteDataEh+0x114>)
 80016f4:	f003 fc22 	bl	8004f3c <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	111b      	asrs	r3, r3, #4
 80016fc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	2102      	movs	r1, #2
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f003 fc15 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	b2db      	uxtb	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	2104      	movs	r1, #4
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f003 fc0b 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	2108      	movs	r1, #8
 8001732:	482e      	ldr	r0, [pc, #184]	; (80017ec <_ZN3LCD9WriteDataEh+0x118>)
 8001734:	f003 fc02 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f003 fbf7 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800174e:	2201      	movs	r2, #1
 8001750:	2101      	movs	r1, #1
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f003 fbf1 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f003 f930 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2101      	movs	r1, #1
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f003 fbe8 	bl	8004f3c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	2102      	movs	r1, #2
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f003 fbde 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	b2db      	uxtb	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	2104      	movs	r1, #4
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f003 fbd4 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001794:	78fb      	ldrb	r3, [r7, #3]
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	b2db      	uxtb	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	2108      	movs	r1, #8
 80017a0:	4812      	ldr	r0, [pc, #72]	; (80017ec <_ZN3LCD9WriteDataEh+0x118>)
 80017a2:	f003 fbcb 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	461a      	mov	r2, r3
 80017b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b8:	f003 fbc0 	bl	8004f3c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2101      	movs	r1, #1
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f003 fbba 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f003 f8f9 	bl	80049c0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2101      	movs	r1, #1
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f003 fbb1 	bl	8004f3c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80017da:	2001      	movs	r0, #1
 80017dc:	f003 f8f0 	bl	80049c0 <HAL_Delay>
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48001c00 	.word	0x48001c00

080017f0 <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	this->model = model;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
}
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 800180e:	b082      	sub	sp, #8
 8001810:	b490      	push	{r4, r7}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	f107 0110 	add.w	r1, r7, #16
 800181e:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	1d1c      	adds	r4, r3, #4
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001832:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bc90      	pop	{r4, r7}
 800183e:	b002      	add	sp, #8
 8001840:	4770      	bx	lr

08001842 <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6858      	ldr	r0, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	891b      	ldrh	r3, [r3, #8]
 8001856:	2200      	movs	r2, #0
 8001858:	4619      	mov	r1, r3
 800185a:	f003 fb6f 	bl	8004f3c <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	8a1b      	ldrh	r3, [r3, #16]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f003 fb4f 	bl	8004f0c <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d048      	beq.n	8001910 <_ZN8LoadCell6UpdateEv+0xce>
		for(int i = 0; i<25; i++){
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	2b18      	cmp	r3, #24
 8001886:	dc29      	bgt.n	80018dc <_ZN8LoadCell6UpdateEv+0x9a>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6858      	ldr	r0, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	891b      	ldrh	r3, [r3, #8]
 8001890:	2201      	movs	r2, #1
 8001892:	4619      	mov	r1, r3
 8001894:	f003 fb52 	bl	8004f3c <HAL_GPIO_WritePin>
			Tools::DWT_Delay_us(10);
 8001898:	200a      	movs	r0, #10
 800189a:	f000 fe57 	bl	800254c <_ZN5Tools12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6858      	ldr	r0, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	891b      	ldrh	r3, [r3, #8]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	f003 fb47 	bl	8004f3c <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	8a1b      	ldrh	r3, [r3, #16]
 80018b6:	4619      	mov	r1, r3
 80018b8:	4610      	mov	r0, r2
 80018ba:	f003 fb27 	bl	8004f0c <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	60fb      	str	r3, [r7, #12]
			Tools::DWT_Delay_us(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f000 fe3c 	bl	800254c <_ZN5Tools12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	3301      	adds	r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	e7d2      	b.n	8001882 <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7c9b      	ldrb	r3, [r3, #18]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <_ZN8LoadCell6UpdateEv+0xae>
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d008      	beq.n	8001900 <_ZN8LoadCell6UpdateEv+0xbe>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 80018ee:	e00f      	b.n	8001910 <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell1(data);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 f95b 	bl	8001bb4 <_ZN5Model12setLoadCell1El>
			break;
 80018fe:	e007      	b.n	8001910 <_ZN8LoadCell6UpdateEv+0xce>
			model->setLoadCell2(data);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f96d 	bl	8001be8 <_ZN5Model12setLoadCell2El>
			break;
 800190e:	bf00      	nop
		}
	}

}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_ZN3LogC1EP5Model>:
 *      Author: marcel
 */

#include "Log.h"

Log::Log(Model *model) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
	this->model = model;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	609a      	str	r2, [r3, #8]
	addrPointer = 0;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
}
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_ZN3Log4initEv>:

void Log::init() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af02      	add	r7, sp, #8
 8001942:	6078      	str	r0, [r7, #4]

	uint8_t txBuffer[] = { 0x00, 0x00 };
 8001944:	2300      	movs	r3, #0
 8001946:	733b      	strb	r3, [r7, #12]
 8001948:	2300      	movs	r3, #0
 800194a:	737b      	strb	r3, [r7, #13]
	uint8_t rxBuffer[] = { 0, 0 };
 800194c:	2300      	movs	r3, #0
 800194e:	723b      	strb	r3, [r7, #8]
 8001950:	2300      	movs	r3, #0
 8001952:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR << 1, txBuffer, 2, 100);
 8001954:	f107 020c 	add.w	r2, r7, #12
 8001958:	2364      	movs	r3, #100	; 0x64
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2302      	movs	r3, #2
 800195e:	21a8      	movs	r1, #168	; 0xa8
 8001960:	4815      	ldr	r0, [pc, #84]	; (80019b8 <_ZN3Log4initEv+0x7c>)
 8001962:	f003 fb93 	bl	800508c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 2, 100);
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	2364      	movs	r3, #100	; 0x64
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2302      	movs	r3, #2
 8001970:	21a8      	movs	r1, #168	; 0xa8
 8001972:	4811      	ldr	r0, [pc, #68]	; (80019b8 <_ZN3Log4initEv+0x7c>)
 8001974:	f003 fc7e 	bl	8005274 <HAL_I2C_Master_Receive>
	if((addrPointer = ((rxBuffer[0] << 8) + rxBuffer[1])) < 1){
 8001978:	7a3b      	ldrb	r3, [r7, #8]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	7a7a      	ldrb	r2, [r7, #9]
 800197e:	4413      	add	r3, r2
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <_ZN3Log4initEv+0x62>
		addrPointer = 1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	605a      	str	r2, [r3, #4]
	}

	model->setAddrPointer(addrPointer);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	4610      	mov	r0, r2
 80019ac:	f000 fc1e 	bl	80021ec <_ZN5Model14setAddrPointerEt>

}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000364 	.word	0x20000364

080019bc <_ZN3Log15getLogBookEntryEm>:

uint8_t* Log::getLogBookEntry(uint32_t addr) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]

	addr = addr*16;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	603b      	str	r3, [r7, #0]
	uint8_t txBuffer[2];

	txBuffer[0] = (addr>>16)&0xFF;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	733b      	strb	r3, [r7, #12]
	txBuffer[1] = (addr>>8)&0xFF;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	737b      	strb	r3, [r7, #13]
	txBuffer[2] = addr&0xFF;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	73bb      	strb	r3, [r7, #14]

	static uint8_t rxBuffer[16];

	HAL_I2C_Master_Transmit(&hi2c1, EEPROM_ADDR << 1, txBuffer, 2, 100);
 80019e2:	f107 020c 	add.w	r2, r7, #12
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	21a8      	movs	r1, #168	; 0xa8
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <_ZN3Log15getLogBookEntryEm+0x54>)
 80019f0:	f003 fb4c 	bl	800508c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, EEPROM_ADDR << 1, rxBuffer, 16, 100);
 80019f4:	2364      	movs	r3, #100	; 0x64
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2310      	movs	r3, #16
 80019fa:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <_ZN3Log15getLogBookEntryEm+0x58>)
 80019fc:	21a8      	movs	r1, #168	; 0xa8
 80019fe:	4804      	ldr	r0, [pc, #16]	; (8001a10 <_ZN3Log15getLogBookEntryEm+0x54>)
 8001a00:	f003 fc38 	bl	8005274 <HAL_I2C_Master_Receive>
	return rxBuffer;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <_ZN3Log15getLogBookEntryEm+0x58>)
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000364 	.word	0x20000364
 8001a14:	200002dc 	.word	0x200002dc

08001a18 <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001a32:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001a3a:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a31      	ldr	r2, [pc, #196]	; (8001b04 <_ZN5ModelC1Ev+0xec>)
 8001a40:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a2f      	ldr	r2, [pc, #188]	; (8001b04 <_ZN5ModelC1Ev+0xec>)
 8001a46:	615a      	str	r2, [r3, #20]

	 weight = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	831a      	strh	r2, [r3, #24]
	 kontrast = 100;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2264      	movs	r2, #100	; 0x64
 8001a52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 400; //Preis in Rr/100g
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
	 Parafinwachs_Preis = 350;	//Preis in Rr/100g
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28


	 wachstyp = E_UNDEF;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 00;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 month = 01;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	 day = 01;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 dayOfWeek = 0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	 hour = 0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 minute = 0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	 seconds = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//---------------Taster Status---------------
	 T1Short = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 T1Long = false;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 T2Short = false;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 T2Long = false;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	 T3Short = false;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	 T3Long = false;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b

	 T4Short = false;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 T4Long = false;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	 T5Short = false;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 T5Long = false;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

}
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40566666 	.word	0x40566666

08001b08 <_ZNK5Model6getDayEv>:

uint8_t Model::getDay() const {
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	return day;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_ZN5Model6setDayEh>:

void Model::setDay(uint8_t day) {
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	70fb      	strb	r3, [r7, #3]
	this->day = day;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_ZN5Model12setDayOfWeekEh>:

uint8_t Model::getDayOfWeek() const {
	return dayOfWeek;
}

void Model::setDayOfWeek(uint8_t dayOfWeek) {
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	70fb      	strb	r3, [r7, #3]
	this->dayOfWeek = dayOfWeek;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	78fa      	ldrb	r2, [r7, #3]
 8001b52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_ZNK5Model7getHourEv>:

uint8_t Model::getHour() const {
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
	return hour;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_ZN5Model7setHourEh>:

void Model::setHour(uint8_t hour) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
	this->hour = hour;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	78fa      	ldrb	r2, [r7, #3]
 8001b8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZNK5Model12getLoadCell1Ev>:

int32_t Model::getLoadCell1() const {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	return loadCell1;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	return loadCell2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	605a      	str	r2, [r3, #4]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_ZNK5Model9getMinuteEv>:

uint8_t Model::getMinute() const {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	return minute;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_ZN5Model9setMinuteEh>:

void Model::setMinute(uint8_t minute) {
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	70fb      	strb	r3, [r7, #3]
	this->minute = minute;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_ZNK5Model8getMonthEv>:

uint8_t Model::getMonth() const {
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
	return month;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZN5Model8setMonthEh>:

void Model::setMonth(uint8_t month) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	70fb      	strb	r3, [r7, #3]
	this->month = month;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	78fa      	ldrb	r2, [r7, #3]
 8001c68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_ZNK5Model10getSecondsEv>:

uint8_t Model::getSeconds() const {
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	return seconds;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_ZN5Model10setSecondsEh>:

void Model::setSeconds(uint8_t seconds) {
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	70fb      	strb	r3, [r7, #3]
	this->seconds = seconds;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_ZNK5Model9getWeightEv>:

int16_t Model::getWeight() const {
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	return weight;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	831a      	strh	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_ZNK5Model7getYearEv>:

uint8_t Model::getYear() const {
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	return year;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_ZN5Model7setYearEh>:

void Model::setYear(uint8_t year) {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
	this->year = year;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_ZNK5Model8isT1LongEv>:

bool Model::isT1Long() const {
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	return T1Long;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return T1Short;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	return T2Long;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	460b      	mov	r3, r1
 8001dbc:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	78fa      	ldrb	r2, [r7, #3]
 8001dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
	return T2Short;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	78fa      	ldrb	r2, [r7, #3]
 8001dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return T3Long;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 8001e26:	b480      	push	{r7}
 8001e28:	b083      	sub	sp, #12
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
	return T3Short;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	return T4Long;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
	return T4Short;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	return T5Long;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return T5Short;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	d802      	bhi.n	8001f86 <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 8001f80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f84:	e001      	b.n	8001f8a <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	ee07 3a90 	vmov	s15, r3
}
 8001f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001faa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d802      	bhi.n	8001fba <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 8001fb4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fb8:	e001      	b.n	8001fbe <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	ee07 3a90 	vmov	s15, r3
}
 8001fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002030:	eeb0 0a67 	vmov.f32	s0, s15
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 800204a:	edd7 7a00 	vldr	s15, [r7]
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 2a90 	vmov	r2, s15
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800207a:	eeb0 0a67 	vmov.f32	s0, s15
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_ZN5Model20setParafinwachsPreisEf>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	ed87 0a00 	vstr	s0, [r7]
	Parafinwachs_Preis = parafinwachsPreis;
 8002094:	edd7 7a00 	vldr	s15, [r7]
 8002098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209c:	ee17 2a90 	vmov	r2, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_ZNK5Model11getWachstypEv>:

Model::EWACHS Model::getWachstyp() const {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	return wachstyp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	switch(this->wachstyp){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d011      	beq.n	800210c <_ZN5Model11setWachstypENS_6EWACHSE+0x42>
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d01c      	beq.n	8002126 <_ZN5Model11setWachstypENS_6EWACHSE+0x5c>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d000      	beq.n	80020f2 <_ZN5Model11setWachstypENS_6EWACHSE+0x28>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 80020f0:	e026      	b.n	8002140 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80020f2:	2201      	movs	r2, #1
 80020f4:	2110      	movs	r1, #16
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020fa:	f002 ff1f 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002106:	f002 ff19 	bl	8004f3c <HAL_GPIO_WritePin>
		break;
 800210a:	e019      	b.n	8002140 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 800210c:	2200      	movs	r2, #0
 800210e:	2110      	movs	r1, #16
 8002110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002114:	f002 ff12 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	2140      	movs	r1, #64	; 0x40
 800211c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002120:	f002 ff0c 	bl	8004f3c <HAL_GPIO_WritePin>
		break;
 8002124:	e00c      	b.n	8002140 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	2110      	movs	r1, #16
 800212a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212e:	f002 ff05 	bl	8004f3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	2140      	movs	r1, #64	; 0x40
 8002136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800213a:	f002 feff 	bl	8004f3c <HAL_GPIO_WritePin>
		break;
 800213e:	bf00      	nop
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	60da      	str	r2, [r3, #12]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZNK5Model11getKontrastEv>:

uint8_t Model::getKontrast() const {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	return kontrast;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <_ZN5Model11setKontrastEh>:

void Model::setKontrast(uint8_t kontrast) {
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	70fb      	strb	r3, [r7, #3]
	this->kontrast = kontrast;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_ZNK5Model15isOverrideClockEv>:

bool Model::isOverrideClock() const {
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
	return overrideClock;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_ZNK5Model14getAddrPointerEv>:

uint16_t Model::getAddrPointer() const {
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return addrPointer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	8c1b      	ldrh	r3, [r3, #32]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_ZN5Model8setPrizeEm>:

uint32_t Model::getPrize() const {
	return prize;
}

void Model::setPrize(uint32_t prize) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	this->prize = prize;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	61da      	str	r2, [r3, #28]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_ZN5Model14setAddrPointerEt>:

void Model::setAddrPointer(uint16_t addrPointer) {
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
	this->addrPointer = addrPointer;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	841a      	strh	r2, [r3, #32]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_ZN5Model16setOverrideClockEb>:

void Model::setOverrideClock(bool overrideClock) {
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
	this->overrideClock = overrideClock;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	bfb8      	it	lt
 8002238:	425b      	neglt	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "stdlib.h"


char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ffe8 	bl	800222a <_ZSt3absl>
 800225a:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4a      	ldr	r2, [pc, #296]	; (8002388 <_ZN5Tools14intToAsciiCharElh+0x140>)
 8002260:	fb82 1203 	smull	r1, r2, r2, r3
 8002264:	1312      	asrs	r2, r2, #12
 8002266:	17db      	asrs	r3, r3, #31
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3330      	adds	r3, #48	; 0x30
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002272:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a46      	ldr	r2, [pc, #280]	; (8002390 <_ZN5Tools14intToAsciiCharElh+0x148>)
 8002278:	fb82 1203 	smull	r1, r2, r2, r3
 800227c:	1192      	asrs	r2, r2, #6
 800227e:	17db      	asrs	r3, r3, #31
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	b2da      	uxtb	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4940      	ldr	r1, [pc, #256]	; (8002388 <_ZN5Tools14intToAsciiCharElh+0x140>)
 8002288:	fb81 0103 	smull	r0, r1, r1, r3
 800228c:	1309      	asrs	r1, r1, #12
 800228e:	17db      	asrs	r3, r3, #31
 8002290:	1a5b      	subs	r3, r3, r1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	4619      	mov	r1, r3
 8002296:	0089      	lsls	r1, r1, #2
 8002298:	440b      	add	r3, r1
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	4413      	add	r3, r2
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	3330      	adds	r3, #48	; 0x30
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	4b39      	ldr	r3, [pc, #228]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 80022a8:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a39      	ldr	r2, [pc, #228]	; (8002394 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 80022ae:	fb82 1203 	smull	r1, r2, r2, r3
 80022b2:	1152      	asrs	r2, r2, #5
 80022b4:	17db      	asrs	r3, r3, #31
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4934      	ldr	r1, [pc, #208]	; (8002390 <_ZN5Tools14intToAsciiCharElh+0x148>)
 80022be:	fb81 0103 	smull	r0, r1, r1, r3
 80022c2:	1189      	asrs	r1, r1, #6
 80022c4:	17db      	asrs	r3, r3, #31
 80022c6:	1a5b      	subs	r3, r3, r1
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	0089      	lsls	r1, r1, #2
 80022ce:	440b      	add	r3, r1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4413      	add	r3, r2
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3330      	adds	r3, #48	; 0x30
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b2b      	ldr	r3, [pc, #172]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 80022de:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2d      	ldr	r2, [pc, #180]	; (8002398 <_ZN5Tools14intToAsciiCharElh+0x150>)
 80022e4:	fb82 1203 	smull	r1, r2, r2, r3
 80022e8:	1092      	asrs	r2, r2, #2
 80022ea:	17db      	asrs	r3, r3, #31
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4928      	ldr	r1, [pc, #160]	; (8002394 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 80022f4:	fb81 0103 	smull	r0, r1, r1, r3
 80022f8:	1149      	asrs	r1, r1, #5
 80022fa:	17db      	asrs	r3, r3, #31
 80022fc:	1a5b      	subs	r3, r3, r1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	0089      	lsls	r1, r1, #2
 8002304:	440b      	add	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	4413      	add	r3, r2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3330      	adds	r3, #48	; 0x30
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002314:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <_ZN5Tools14intToAsciiCharElh+0x150>)
 800231a:	fb83 1302 	smull	r1, r3, r3, r2
 800231e:	1099      	asrs	r1, r3, #2
 8002320:	17d3      	asrs	r3, r2, #31
 8002322:	1ac9      	subs	r1, r1, r3
 8002324:	460b      	mov	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	1ad1      	subs	r1, r2, r3
 800232e:	b2cb      	uxtb	r3, r1
 8002330:	3330      	adds	r3, #48	; 0x30
 8002332:	b2da      	uxtb	r2, r3
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002336:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	2300      	movs	r3, #0
 800233e:	73bb      	strb	r3, [r7, #14]
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d81a      	bhi.n	800237c <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	f1c3 0205 	rsb	r2, r3, #5
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	429a      	cmp	r2, r3
 8002350:	d107      	bne.n	8002362 <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4a11      	ldr	r2, [pc, #68]	; (800239c <_ZN5Tools14intToAsciiCharElh+0x154>)
 8002356:	212e      	movs	r1, #46	; 0x2e
 8002358:	54d1      	strb	r1, [r2, r3]
        		j--;
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	3b01      	subs	r3, #1
 800235e:	73bb      	strb	r3, [r7, #14]
 8002360:	e005      	b.n	800236e <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 8002362:	7bba      	ldrb	r2, [r7, #14]
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	4909      	ldr	r1, [pc, #36]	; (800238c <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002368:	5c89      	ldrb	r1, [r1, r2]
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <_ZN5Tools14intToAsciiCharElh+0x154>)
 800236c:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	3301      	adds	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	7bbb      	ldrb	r3, [r7, #14]
 8002376:	3301      	adds	r3, #1
 8002378:	73bb      	strb	r3, [r7, #14]
 800237a:	e7e1      	b.n	8002340 <_ZN5Tools14intToAsciiCharElh+0xf8>
        	}
        }
	return result;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	68db8bad 	.word	0x68db8bad
 800238c:	200002ec 	.word	0x200002ec
 8002390:	10624dd3 	.word	0x10624dd3
 8002394:	51eb851f 	.word	0x51eb851f
 8002398:	66666667 	.word	0x66666667
 800239c:	200002f4 	.word	0x200002f4

080023a0 <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	int result = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <_ZN5Tools8Round5RpEl+0x60>)
 80023b0:	fb83 1302 	smull	r1, r3, r3, r2
 80023b4:	1099      	asrs	r1, r3, #2
 80023b6:	17d3      	asrs	r3, r2, #31
 80023b8:	1ac9      	subs	r1, r1, r3
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <_ZN5Tools8Round5RpEl+0x60>)
 80023ca:	fb82 1203 	smull	r1, r2, r2, r3
 80023ce:	1052      	asrs	r2, r2, #1
 80023d0:	17db      	asrs	r3, r3, #31
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d105      	bne.n	80023e8 <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1d5a      	adds	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e003      	b.n	80023f0 <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
    }
    return result;
 80023f0:	697b      	ldr	r3, [r7, #20]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	66666667 	.word	0x66666667

08002404 <_ZN5Tools11byteToAsciiEh>:

char* Tools::byteToAscii(uint8_t data) {;
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
	static char result[3];
	result[0] = data/100 + 0x30;
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <_ZN5Tools11byteToAsciiEh+0x88>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	b2db      	uxtb	r3, r3
 800241a:	3330      	adds	r3, #48	; 0x30
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <_ZN5Tools11byteToAsciiEh+0x8c>)
 8002420:	701a      	strb	r2, [r3, #0]
	result[1] = data/10 - (data/100)*10 + 0x30;
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	4a1b      	ldr	r2, [pc, #108]	; (8002494 <_ZN5Tools11byteToAsciiEh+0x90>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	08db      	lsrs	r3, r3, #3
 800242c:	b2da      	uxtb	r2, r3
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	4916      	ldr	r1, [pc, #88]	; (800248c <_ZN5Tools11byteToAsciiEh+0x88>)
 8002432:	fba1 1303 	umull	r1, r3, r1, r3
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
 800243c:	0149      	lsls	r1, r1, #5
 800243e:	1ac9      	subs	r1, r1, r3
 8002440:	0089      	lsls	r1, r1, #2
 8002442:	1acb      	subs	r3, r1, r3
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	4413      	add	r3, r2
 800244a:	b2db      	uxtb	r3, r3
 800244c:	3330      	adds	r3, #48	; 0x30
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <_ZN5Tools11byteToAsciiEh+0x8c>)
 8002452:	705a      	strb	r2, [r3, #1]
	result[2] = data - (data/10)*10 + 0x30;
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4a0f      	ldr	r2, [pc, #60]	; (8002494 <_ZN5Tools11byteToAsciiEh+0x90>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
 8002462:	0152      	lsls	r2, r2, #5
 8002464:	1ad2      	subs	r2, r2, r3
 8002466:	0092      	lsls	r2, r2, #2
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	b2da      	uxtb	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	4413      	add	r3, r2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	3330      	adds	r3, #48	; 0x30
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <_ZN5Tools11byteToAsciiEh+0x8c>)
 800247a:	709a      	strb	r2, [r3, #2]
    return result;
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <_ZN5Tools11byteToAsciiEh+0x8c>)
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	51eb851f 	.word	0x51eb851f
 8002490:	200002fc 	.word	0x200002fc
 8002494:	cccccccd 	.word	0xcccccccd

08002498 <_ZN5Tools10BCDDecoderEh>:



uint8_t Tools::BCDDecoder(uint8_t data) {
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = (data & 0xF0)>>4;
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data & 0x0F;
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	73bb      	strb	r3, [r7, #14]

	return TP*10+UP;
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	461a      	mov	r2, r3
 80024b4:	0092      	lsls	r2, r2, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	4413      	add	r3, r2
 80024c0:	b2db      	uxtb	r3, r3
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
	...

080024d0 <_ZN5Tools10BCDEncoderEh>:

uint8_t Tools::BCDEncoder(uint8_t data) {
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	uint8_t TP = data/10;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <_ZN5Tools10BCDEncoderEh+0x44>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	73fb      	strb	r3, [r7, #15]
	uint8_t UP = data-(TP*10);
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	461a      	mov	r2, r3
 80024ea:	0152      	lsls	r2, r2, #5
 80024ec:	1ad2      	subs	r2, r2, r3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	4413      	add	r3, r2
 80024fa:	73bb      	strb	r3, [r7, #14]
	return (TP<<4) + UP;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	b2da      	uxtb	r2, r3
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	4413      	add	r3, r2
 8002506:	b2db      	uxtb	r3, r3
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	cccccccd 	.word	0xcccccccd

08002518 <_ZN5Tools8DWT_InitEv>:
static bool init = false;

/*
 * Mikrosenkunden delay Initialisieren
 */
void Tools::DWT_Init(void) {
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <_ZN5Tools8DWT_InitEv+0x2c>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <_ZN5Tools8DWT_InitEv+0x2c>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8002528:	4b07      	ldr	r3, [pc, #28]	; (8002548 <_ZN5Tools8DWT_InitEv+0x30>)
 800252a:	2200      	movs	r2, #0
 800252c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <_ZN5Tools8DWT_InitEv+0x30>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a05      	ldr	r2, [pc, #20]	; (8002548 <_ZN5Tools8DWT_InitEv+0x30>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000edf0 	.word	0xe000edf0
 8002548:	e0001000 	.word	0xe0001000

0800254c <_ZN5Tools12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void Tools::DWT_Delay_us(volatile uint32_t microseconds) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
	if(!init){
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <_ZN5Tools12DWT_Delay_usEm+0x60>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	f083 0301 	eor.w	r3, r3, #1
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <_ZN5Tools12DWT_Delay_usEm+0x20>
		DWT_Init();
 8002562:	f7ff ffd9 	bl	8002518 <_ZN5Tools8DWT_InitEv>
		init = true;
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <_ZN5Tools12DWT_Delay_usEm+0x60>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
	}
	uint32_t clk_cycle_start = DWT->CYCCNT;
 800256c:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <_ZN5Tools12DWT_Delay_usEm+0x64>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8002572:	f005 fbc7 	bl	8007d04 <HAL_RCC_GetHCLKFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <_ZN5Tools12DWT_Delay_usEm+0x68>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	0c9b      	lsrs	r3, r3, #18
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	607b      	str	r3, [r7, #4]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <_ZN5Tools12DWT_Delay_usEm+0x64>)
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad2      	subs	r2, r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	429a      	cmp	r2, r3
 8002594:	bf34      	ite	cc
 8002596:	2301      	movcc	r3, #1
 8002598:	2300      	movcs	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d000      	beq.n	80025a2 <_ZN5Tools12DWT_Delay_usEm+0x56>
 80025a0:	e7f2      	b.n	8002588 <_ZN5Tools12DWT_Delay_usEm+0x3c>
		;
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200002ff 	.word	0x200002ff
 80025b0:	e0001000 	.word	0xe0001000
 80025b4:	431bde83 	.word	0x431bde83

080025b8 <_ZN10BWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd) {
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <_ZN10BWSettingsC1EP5ModelP3LCD+0x34>)
 80025c8:	60da      	str	r2, [r3, #12]
	this->model = model;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	601a      	str	r2, [r3, #0]
	position = 0;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	725a      	strb	r2, [r3, #9]
	init = false;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	729a      	strb	r2, [r3, #10]
}
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	0800d128 	.word	0x0800d128

080025f0 <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 80025f0:	b5b0      	push	{r4, r5, r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af04      	add	r7, sp, #16
 80025f6:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	721a      	strb	r2, [r3, #8]

	int preis = model->getBienenwachsPreis();
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fd0a 	bl	800201c <_ZNK5Model19getBienenwachsPreisEv>
 8002608:	eef0 7a40 	vmov.f32	s15, s0
 800260c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002610:	ee17 3a90 	vmov	r3, s15
 8002614:	60fb      	str	r3, [r7, #12]

	if(!init){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7a9b      	ldrb	r3, [r3, #10]
 800261a:	f083 0301 	eor.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d022      	beq.n	800266a <_ZN10BWSettings6UpdateEv+0x7a>
		position = 0;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685c      	ldr	r4, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68dd      	ldr	r5, [r3, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f96e 	bl	8002918 <_ZN10BWSettings16prizeToCharArrayEm>
 800263c:	4602      	mov	r2, r0
 800263e:	2300      	movs	r3, #0
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	230c      	movs	r3, #12
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	9200      	str	r2, [sp, #0]
 8002648:	2300      	movs	r3, #0
 800264a:	220b      	movs	r2, #11
 800264c:	4629      	mov	r1, r5
 800264e:	4620      	mov	r0, r4
 8002650:	f7fe fed1 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6858      	ldr	r0, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7a59      	ldrb	r1, [r3, #9]
 800265c:	2301      	movs	r3, #1
 800265e:	2202      	movs	r2, #2
 8002660:	f7fe ff2e 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	729a      	strb	r2, [r3, #10]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fb75 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d025      	beq.n	80026c6 <_ZN10BWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	7a5b      	ldrb	r3, [r3, #9]
 800267e:	2b03      	cmp	r3, #3
 8002680:	d903      	bls.n	800268a <_ZN10BWSettings6UpdateEv+0x9a>
			position = 0;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	725a      	strb	r2, [r3, #9]
 8002688:	e00f      	b.n	80026aa <_ZN10BWSettings6UpdateEv+0xba>
		}else{
			position++;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	7a5b      	ldrb	r3, [r3, #9]
 800268e:	3301      	adds	r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	725a      	strb	r2, [r3, #9]
			if(position == 2){
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7a5b      	ldrb	r3, [r3, #9]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d105      	bne.n	80026aa <_ZN10BWSettings6UpdateEv+0xba>
				position++;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7a5b      	ldrb	r3, [r3, #9]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	725a      	strb	r2, [r3, #9]
			}
		}

		lcd->SetCursorPosition(position, 2,true);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6858      	ldr	r0, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7a59      	ldrb	r1, [r3, #9]
 80026b2:	2301      	movs	r3, #1
 80026b4:	2202      	movs	r2, #2
 80026b6:	f7fe ff03 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb59 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fb2a 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <_ZN10BWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fb2e 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fb73 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 809e 	beq.w	8002830 <_ZN10BWSettings6UpdateEv+0x240>

		if(position == 0){
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7a5b      	ldrb	r3, [r3, #9]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d110      	bne.n	800271e <_ZN10BWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002702:	3b28      	subs	r3, #40	; 0x28
 8002704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002708:	d205      	bcs.n	8002716 <_ZN10BWSettings6UpdateEv+0x126>
				preis -= 9000;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002710:	3b28      	subs	r3, #40	; 0x28
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e003      	b.n	800271e <_ZN10BWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800271c:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7a5b      	ldrb	r3, [r3, #9]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11c      	bne.n	8002760 <_ZN10BWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a78      	ldr	r2, [pc, #480]	; (800290c <_ZN10BWSettings6UpdateEv+0x31c>)
 800272a:	fb82 1203 	smull	r1, r2, r2, r3
 800272e:	1152      	asrs	r2, r2, #5
 8002730:	17db      	asrs	r3, r3, #31
 8002732:	1ad1      	subs	r1, r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a76      	ldr	r2, [pc, #472]	; (8002910 <_ZN10BWSettings6UpdateEv+0x320>)
 8002738:	fb82 0203 	smull	r0, r2, r2, r3
 800273c:	1192      	asrs	r2, r2, #6
 800273e:	17db      	asrs	r3, r3, #31
 8002740:	1a9a      	subs	r2, r3, r2
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	440b      	add	r3, r1
 800274c:	2b09      	cmp	r3, #9
 800274e:	d104      	bne.n	800275a <_ZN10BWSettings6UpdateEv+0x16a>
				preis -= 900;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <_ZN10BWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3364      	adds	r3, #100	; 0x64
 800275e:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7a5b      	ldrb	r3, [r3, #9]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d11b      	bne.n	80027a0 <_ZN10BWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <_ZN10BWSettings6UpdateEv+0x324>)
 800276c:	fb82 1203 	smull	r1, r2, r2, r3
 8002770:	1092      	asrs	r2, r2, #2
 8002772:	17db      	asrs	r3, r3, #31
 8002774:	1ad1      	subs	r1, r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a64      	ldr	r2, [pc, #400]	; (800290c <_ZN10BWSettings6UpdateEv+0x31c>)
 800277a:	fb82 0203 	smull	r0, r2, r2, r3
 800277e:	1152      	asrs	r2, r2, #5
 8002780:	17db      	asrs	r3, r3, #31
 8002782:	1a9a      	subs	r2, r3, r2
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	2b09      	cmp	r3, #9
 8002790:	d103      	bne.n	800279a <_ZN10BWSettings6UpdateEv+0x1aa>
				preis -= 90;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b5a      	subs	r3, #90	; 0x5a
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e002      	b.n	80027a0 <_ZN10BWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	330a      	adds	r3, #10
 800279e:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	7a5b      	ldrb	r3, [r3, #9]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d114      	bne.n	80027d2 <_ZN10BWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <_ZN10BWSettings6UpdateEv+0x324>)
 80027ac:	fb83 2301 	smull	r2, r3, r3, r1
 80027b0:	109a      	asrs	r2, r3, #2
 80027b2:	17cb      	asrs	r3, r1, #31
 80027b4:	1ad2      	subs	r2, r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	1aca      	subs	r2, r1, r3
 80027c0:	2a00      	cmp	r2, #0
 80027c2:	d103      	bne.n	80027cc <_ZN10BWSettings6UpdateEv+0x1dc>
				preis += 5;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3305      	adds	r3, #5
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e002      	b.n	80027d2 <_ZN10BWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3b05      	subs	r3, #5
 80027d0:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setBienenwachsPreis(preis);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	ee07 2a90 	vmov	s15, r2
 80027dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e0:	eeb0 0a67 	vmov.f32	s0, s15
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fc2a 	bl	800203e <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,11,0,prizeToCharArray(preis),12,0);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685c      	ldr	r4, [r3, #4]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68dd      	ldr	r5, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f88e 	bl	8002918 <_ZN10BWSettings16prizeToCharArrayEm>
 80027fc:	4602      	mov	r2, r0
 80027fe:	2300      	movs	r3, #0
 8002800:	9302      	str	r3, [sp, #8]
 8002802:	230c      	movs	r3, #12
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	9200      	str	r2, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	220b      	movs	r2, #11
 800280c:	4629      	mov	r1, r5
 800280e:	4620      	mov	r0, r4
 8002810:	f7fe fdf1 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6858      	ldr	r0, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7a59      	ldrb	r1, [r3, #9]
 800281c:	2301      	movs	r3, #1
 800281e:	2202      	movs	r2, #2
 8002820:	f7fe fe4e 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2100      	movs	r1, #0
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fade 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff faaf 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <_ZN10BWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fab3 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff faf8 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <_ZN10BWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fafc 	bl	8001e60 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff facd 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <_ZN10BWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fad1 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff faf9 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <_ZN10BWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2100      	movs	r1, #0
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fafd 	bl	8001e9a <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fb08 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <_ZN10BWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fb0c 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fb17 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <_ZN10BWSettings6UpdateEv+0x2f4>
		//Neuer Wert speichern
		init = false;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	729a      	strb	r2, [r3, #10]
		screen = Model::E_MAIN_SCRREN;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2203      	movs	r2, #3
 80028d6:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fb15 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fb20 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <_ZN10BWSettings6UpdateEv+0x310>
		model->setT5Short(false);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2100      	movs	r1, #0
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fb24 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7a1b      	ldrb	r3, [r3, #8]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bdb0      	pop	{r4, r5, r7, pc}
 800290c:	51eb851f 	.word	0x51eb851f
 8002910:	10624dd3 	.word	0x10624dd3
 8002914:	66666667 	.word	0x66666667

08002918 <_ZN10BWSettings16prizeToCharArrayEm>:


char* BWSettings::prizeToCharArray(uint32_t prize){
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2102      	movs	r1, #2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fc8e 	bl	8002248 <_ZN5Tools14intToAsciiCharElh>
 800292c:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 800292e:	2300      	movs	r3, #0
 8002930:	73fb      	strb	r3, [r7, #15]
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d80b      	bhi.n	8002950 <_ZN10BWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	3301      	adds	r3, #1
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	441a      	add	r2, r3
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	7811      	ldrb	r1, [r2, #0]
 8002944:	4a11      	ldr	r2, [pc, #68]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002946:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	3301      	adds	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e7f0      	b.n	8002932 <_ZN10BWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002952:	2220      	movs	r2, #32
 8002954:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002958:	2246      	movs	r2, #70	; 0x46
 800295a:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800295e:	2272      	movs	r2, #114	; 0x72
 8002960:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002964:	222f      	movs	r2, #47	; 0x2f
 8002966:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800296a:	2231      	movs	r2, #49	; 0x31
 800296c:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002970:	2230      	movs	r2, #48	; 0x30
 8002972:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 8002976:	2230      	movs	r2, #48	; 0x30
 8002978:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 800297c:	2267      	movs	r2, #103	; 0x67
 800297e:	731a      	strb	r2, [r3, #12]
	return result;
 8002980:	4b02      	ldr	r3, [pc, #8]	; (800298c <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000300 	.word	0x20000300

08002990 <_ZN10MainScreenC1EP5ModelP3LCD>:
#include "MainScreen.h"

using namespace std;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
	this->model = model;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	605a      	str	r2, [r3, #4]
	this->screen = Model::E_MAIN_SCRREN;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2203      	movs	r2, #3
 80029ac:	721a      	strb	r2, [r3, #8]
}
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <_ZN10MainScreen6UpdateEv>:
void MainScreen::Init(){
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());
}

Model::ESCREEN MainScreen::Update(){
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	ed2d 8b02 	vpush	{d8}
 80029c2:	b08f      	sub	sp, #60	; 0x3c
 80029c4:	af04      	add	r7, sp, #16
 80029c6:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2203      	movs	r2, #3
 80029cc:	721a      	strb	r2, [r3, #8]

	//------------------Screen Update------------------
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fb6c 	bl	80020b0 <_ZNK5Model11getWachstypEv>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b01      	cmp	r3, #1
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d020      	beq.n	8002a2a <_ZN10MainScreen6UpdateEv+0x6e>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis()/100);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f960 	bl	8001cb2 <_ZNK5Model9getWeightEv>
 80029f2:	4603      	mov	r3, r0
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fb0b 	bl	800201c <_ZNK5Model19getBienenwachsPreisEv>
 8002a06:	eef0 7a40 	vmov.f32	s15, s0
 8002a0a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002a0e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8002c40 <_ZN10MainScreen6UpdateEv+0x284>
 8002a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1a:	ee17 0a90 	vmov	r0, s15
 8002a1e:	f7ff fcbf 	bl	80023a0 <_ZN5Tools8Round5RpEl>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
 8002a28:	e030      	b.n	8002a8c <_ZN10MainScreen6UpdateEv+0xd0>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fb3e 	bl	80020b0 <_ZNK5Model11getWachstypEv>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d020      	beq.n	8002a86 <_ZN10MainScreen6UpdateEv+0xca>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis()/100);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f932 	bl	8001cb2 <_ZNK5Model9getWeightEv>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fb02 	bl	8002066 <_ZNK5Model20getParafinwachsPreisEv>
 8002a62:	eef0 7a40 	vmov.f32	s15, s0
 8002a66:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002a6a:	eddf 6a75 	vldr	s13, [pc, #468]	; 8002c40 <_ZN10MainScreen6UpdateEv+0x284>
 8002a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a76:	ee17 0a90 	vmov	r0, s15
 8002a7a:	f7ff fc91 	bl	80023a0 <_ZN5Tools8Round5RpEl>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
 8002a84:	e002      	b.n	8002a8c <_ZN10MainScreen6UpdateEv+0xd0>
	}else{
		prize = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	60da      	str	r2, [r3, #12]
	}
	model->setPrize(prize);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f7ff fb9a 	bl	80021d0 <_ZN5Model8setPrizeEm>


	char *asciiWeight = {Tools::intToAsciiChar(model->getWeight(),3)};
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f906 	bl	8001cb2 <_ZNK5Model9getWeightEv>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fbcc 	bl	8002248 <_ZN5Tools14intToAsciiCharElh>
 8002ab0:	6278      	str	r0, [r7, #36]	; 0x24

	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff f8fb 	bl	8001cb2 <_ZNK5Model9getWeightEv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	0bdb      	lsrs	r3, r3, #15
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d002      	beq.n	8002ace <_ZN10MainScreen6UpdateEv+0x112>
		w[0] = '-';
 8002ac8:	232d      	movs	r3, #45	; 0x2d
 8002aca:	753b      	strb	r3, [r7, #20]
 8002acc:	e001      	b.n	8002ad2 <_ZN10MainScreen6UpdateEv+0x116>
	}else{
		w[0] = ' ';
 8002ace:	2320      	movs	r3, #32
 8002ad0:	753b      	strb	r3, [r7, #20]
	}

	w[1] = asciiWeight[0];
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	757b      	strb	r3, [r7, #21]
	w[2] = asciiWeight[1];
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	75bb      	strb	r3, [r7, #22]
	w[3] = asciiWeight[2];
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	789b      	ldrb	r3, [r3, #2]
 8002ae2:	75fb      	strb	r3, [r7, #23]
	w[4] = asciiWeight[3];
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	78db      	ldrb	r3, [r3, #3]
 8002ae8:	763b      	strb	r3, [r7, #24]
	w[5] = asciiWeight[4];
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	767b      	strb	r3, [r7, #25]
	w[6] = asciiWeight[5];
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	795b      	ldrb	r3, [r3, #5]
 8002af4:	76bb      	strb	r3, [r7, #26]
	w[7] = ' ';
 8002af6:	2320      	movs	r3, #32
 8002af8:	76fb      	strb	r3, [r7, #27]
	w[8] = 'k';
 8002afa:	236b      	movs	r3, #107	; 0x6b
 8002afc:	773b      	strb	r3, [r7, #28]
	w[9] = 'g';
 8002afe:	2367      	movs	r3, #103	; 0x67
 8002b00:	777b      	strb	r3, [r7, #29]


	char* asciiPrize = {Tools::intToAsciiChar(prize, 2)};
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2102      	movs	r1, #2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff fb9d 	bl	8002248 <_ZN5Tools14intToAsciiCharElh>
 8002b0e:	6238      	str	r0, [r7, #32]
	p[0] = asciiPrize[0];
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	723b      	strb	r3, [r7, #8]
	p[1] = asciiPrize[1];
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	785b      	ldrb	r3, [r3, #1]
 8002b1a:	727b      	strb	r3, [r7, #9]
	p[2] = asciiPrize[2];
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	789b      	ldrb	r3, [r3, #2]
 8002b20:	72bb      	strb	r3, [r7, #10]
	p[3] = asciiPrize[3];
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	72fb      	strb	r3, [r7, #11]
	p[4] = asciiPrize[4];
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	733b      	strb	r3, [r7, #12]
	p[5] = asciiPrize[5];
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	795b      	ldrb	r3, [r3, #5]
 8002b32:	737b      	strb	r3, [r7, #13]
	p[6] = ' ';
 8002b34:	2320      	movs	r3, #32
 8002b36:	73bb      	strb	r3, [r7, #14]
	p[7] = 'F';
 8002b38:	2346      	movs	r3, #70	; 0x46
 8002b3a:	73fb      	strb	r3, [r7, #15]
	p[8] = 'r';
 8002b3c:	2372      	movs	r3, #114	; 0x72
 8002b3e:	743b      	strb	r3, [r7, #16]



	lcd->Write(w,10,2,p,9,3);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6858      	ldr	r0, [r3, #4]
 8002b44:	f107 0114 	add.w	r1, r7, #20
 8002b48:	2303      	movs	r3, #3
 8002b4a:	9302      	str	r3, [sp, #8]
 8002b4c:	2309      	movs	r3, #9
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	f107 0308 	add.w	r3, r7, #8
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2302      	movs	r3, #2
 8002b58:	220a      	movs	r2, #10
 8002b5a:	f7fe fbdf 	bl	800131c <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f8fb 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <_ZN10MainScreen6UpdateEv+0x1ca>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff faa8 	bl	80020ca <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2100      	movs	r1, #0
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f8f9 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff f8ca 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <_ZN10MainScreen6UpdateEv+0x1ec>
		screen = Model::E_BW_SETTINGS;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	721a      	strb	r2, [r3, #8]
		model->setT1Long(false);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f8cb 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f910 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <_ZN10MainScreen6UpdateEv+0x214>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fa83 	bl	80020ca <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f90e 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f8df 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <_ZN10MainScreen6UpdateEv+0x236>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	721a      	strb	r2, [r3, #8]
		model->setT2Long(false);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2100      	movs	r1, #0
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff f8e0 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f908 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <_ZN10MainScreen6UpdateEv+0x252>

		model->setT3Long(false);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f90c 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff f917 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01d      	beq.n	8002c5a <_ZN10MainScreen6UpdateEv+0x29e>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2100      	movs	r1, #0
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff f91b 	bl	8001e60 <_ZN5Model10setT3ShortEb>
		if(summeActive){
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	7a9b      	ldrb	r3, [r3, #10]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <_ZN10MainScreen6UpdateEv+0x288>
			//lcd->Write("            ", "            ");
			summeCounter++;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7a5b      	ldrb	r3, [r3, #9]
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	725a      	strb	r2, [r3, #9]
 8002c3e:	e00c      	b.n	8002c5a <_ZN10MainScreen6UpdateEv+0x29e>
 8002c40:	42c80000 	.word	0x42c80000
		}else{
			summeActive = true;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	729a      	strb	r2, [r3, #10]
			summeCounter= 1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	725a      	strb	r2, [r3, #9]
			//lcd->Write("            ", "            ");
			HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002c50:	2200      	movs	r2, #0
 8002c52:	2101      	movs	r1, #1
 8002c54:	4835      	ldr	r0, [pc, #212]	; (8002d2c <_ZN10MainScreen6UpdateEv+0x370>)
 8002c56:	f002 f971 	bl	8004f3c <HAL_GPIO_WritePin>
		}
	}

	//------------------Total------------------
	if(model->isT4Long()){
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f90e 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <_ZN10MainScreen6UpdateEv+0x2c0>
		model->setT4Long(false);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff f912 	bl	8001e9a <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	721a      	strb	r2, [r3, #8]
	}
	if(model->isT4Short()){
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f91a 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <_ZN10MainScreen6UpdateEv+0x2f2>
		model->setT4Short(false);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2100      	movs	r1, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff f91e 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
		summeActive = false;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	729a      	strb	r2, [r3, #10]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	4822      	ldr	r0, [pc, #136]	; (8002d2c <_ZN10MainScreen6UpdateEv+0x370>)
 8002ca4:	f002 f94a 	bl	8004f3c <HAL_GPIO_WritePin>
		summeCounter = 0;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	725a      	strb	r2, [r3, #9]
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff f91e 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <_ZN10MainScreen6UpdateEv+0x314>
		screen = Model::E_TIME_SETTINGS;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f91f 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f92a 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01d      	beq.n	8002d1c <_ZN10MainScreen6UpdateEv+0x360>
		model->setLoadCellOffset1(model->getLoadCell1());
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681c      	ldr	r4, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe ff57 	bl	8001b9c <_ZNK5Model12getLoadCell1Ev>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff f978 	bl	8001fe8 <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681c      	ldr	r4, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ff65 	bl	8001bd0 <_ZNK5Model12getLoadCell2Ev>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff fa1c 	bl	8002148 <_ZN5Model18setLoadCellOffset2El>
		model->setT5Short(false);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2100      	movs	r1, #0
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f916 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7a1b      	ldrb	r3, [r3, #8]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	372c      	adds	r7, #44	; 0x2c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	ecbd 8b02 	vpop	{d8}
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	48000400 	.word	0x48000400

08002d30 <_ZN10PWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd) {
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <_ZN10PWSettingsC1EP5ModelP3LCD+0x2c>)
 8002d40:	60da      	str	r2, [r3, #12]
	this->model = model;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]
}
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	0800d134 	.word	0x0800d134

08002d60 <_ZN10PWSettings6UpdateEv>:



Model::ESCREEN PWSettings::Update(){
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	6078      	str	r0, [r7, #4]

	screen = Model::E_PW_SETTINGS;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	721a      	strb	r2, [r3, #8]

	int preis = model->getParafinwachsPreis();
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f977 	bl	8002066 <_ZNK5Model20getParafinwachsPreisEv>
 8002d78:	eef0 7a40 	vmov.f32	s15, s0
 8002d7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d80:	ee17 3a90 	vmov	r3, s15
 8002d84:	60fb      	str	r3, [r7, #12]

	if(!init){
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	7a9b      	ldrb	r3, [r3, #10]
 8002d8a:	f083 0301 	eor.w	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <_ZN10PWSettings6UpdateEv+0x7a>
		position = 0;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685c      	ldr	r4, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68dd      	ldr	r5, [r3, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f96e 	bl	8003088 <_ZN10PWSettings16prizeToCharArrayEm>
 8002dac:	4602      	mov	r2, r0
 8002dae:	2300      	movs	r3, #0
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	230c      	movs	r3, #12
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	9200      	str	r2, [sp, #0]
 8002db8:	2300      	movs	r3, #0
 8002dba:	220c      	movs	r2, #12
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	f7fe fb19 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6858      	ldr	r0, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7a59      	ldrb	r1, [r3, #9]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f7fe fb76 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	729a      	strb	r2, [r3, #10]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fe ffbd 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d025      	beq.n	8002e36 <_ZN10PWSettings6UpdateEv+0xd6>
		//Change position
		if(position >= 4){
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7a5b      	ldrb	r3, [r3, #9]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d903      	bls.n	8002dfa <_ZN10PWSettings6UpdateEv+0x9a>
			position = 0;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	725a      	strb	r2, [r3, #9]
 8002df8:	e00f      	b.n	8002e1a <_ZN10PWSettings6UpdateEv+0xba>
		}else{
			position++;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	7a5b      	ldrb	r3, [r3, #9]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	725a      	strb	r2, [r3, #9]
			if(position == 2){
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7a5b      	ldrb	r3, [r3, #9]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d105      	bne.n	8002e1a <_ZN10PWSettings6UpdateEv+0xba>
				position++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7a5b      	ldrb	r3, [r3, #9]
 8002e12:	3301      	adds	r3, #1
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	725a      	strb	r2, [r3, #9]
			}
		}


		lcd->SetCursorPosition(position, 2,true);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6858      	ldr	r0, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	7a59      	ldrb	r1, [r3, #9]
 8002e22:	2301      	movs	r3, #1
 8002e24:	2202      	movs	r2, #2
 8002e26:	f7fe fb4b 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe ffa1 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe ff72 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <_ZN10PWSettings6UpdateEv+0xf2>
		model->setT1Long(false);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe ff76 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe ffbb 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 809e 	beq.w	8002fa0 <_ZN10PWSettings6UpdateEv+0x240>

		if(position == 0){
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7a5b      	ldrb	r3, [r3, #9]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d110      	bne.n	8002e8e <_ZN10PWSettings6UpdateEv+0x12e>
			if(preis/1000 == 9){
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002e72:	3b28      	subs	r3, #40	; 0x28
 8002e74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e78:	d205      	bcs.n	8002e86 <_ZN10PWSettings6UpdateEv+0x126>
				preis -= 9000;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002e80:	3b28      	subs	r3, #40	; 0x28
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e003      	b.n	8002e8e <_ZN10PWSettings6UpdateEv+0x12e>
			}else{
				preis += 1000;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e8c:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 1){
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7a5b      	ldrb	r3, [r3, #9]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d11c      	bne.n	8002ed0 <_ZN10PWSettings6UpdateEv+0x170>
			if((preis/100 - (preis/1000)*10) == 9){
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a78      	ldr	r2, [pc, #480]	; (800307c <_ZN10PWSettings6UpdateEv+0x31c>)
 8002e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8002e9e:	1152      	asrs	r2, r2, #5
 8002ea0:	17db      	asrs	r3, r3, #31
 8002ea2:	1ad1      	subs	r1, r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4a76      	ldr	r2, [pc, #472]	; (8003080 <_ZN10PWSettings6UpdateEv+0x320>)
 8002ea8:	fb82 0203 	smull	r0, r2, r2, r3
 8002eac:	1192      	asrs	r2, r2, #6
 8002eae:	17db      	asrs	r3, r3, #31
 8002eb0:	1a9a      	subs	r2, r3, r2
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	d104      	bne.n	8002eca <_ZN10PWSettings6UpdateEv+0x16a>
				preis -= 900;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	e002      	b.n	8002ed0 <_ZN10PWSettings6UpdateEv+0x170>
			}else{
				preis += 100;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	3364      	adds	r3, #100	; 0x64
 8002ece:	60fb      	str	r3, [r7, #12]
			}
		}

		if(position == 3){
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	7a5b      	ldrb	r3, [r3, #9]
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d11b      	bne.n	8002f10 <_ZN10PWSettings6UpdateEv+0x1b0>
			if((preis/10 - (preis/100)*10) == 9){
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a6a      	ldr	r2, [pc, #424]	; (8003084 <_ZN10PWSettings6UpdateEv+0x324>)
 8002edc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee0:	1092      	asrs	r2, r2, #2
 8002ee2:	17db      	asrs	r3, r3, #31
 8002ee4:	1ad1      	subs	r1, r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a64      	ldr	r2, [pc, #400]	; (800307c <_ZN10PWSettings6UpdateEv+0x31c>)
 8002eea:	fb82 0203 	smull	r0, r2, r2, r3
 8002eee:	1152      	asrs	r2, r2, #5
 8002ef0:	17db      	asrs	r3, r3, #31
 8002ef2:	1a9a      	subs	r2, r3, r2
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	2b09      	cmp	r3, #9
 8002f00:	d103      	bne.n	8002f0a <_ZN10PWSettings6UpdateEv+0x1aa>
				preis -= 90;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b5a      	subs	r3, #90	; 0x5a
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e002      	b.n	8002f10 <_ZN10PWSettings6UpdateEv+0x1b0>
			}else{
				preis += 10;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	330a      	adds	r3, #10
 8002f0e:	60fb      	str	r3, [r7, #12]
			}
		}


		if(position == 4){
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7a5b      	ldrb	r3, [r3, #9]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d114      	bne.n	8002f42 <_ZN10PWSettings6UpdateEv+0x1e2>
			if((preis - (preis/10)*10 ) == 0){
 8002f18:	68f9      	ldr	r1, [r7, #12]
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	; (8003084 <_ZN10PWSettings6UpdateEv+0x324>)
 8002f1c:	fb83 2301 	smull	r2, r3, r3, r1
 8002f20:	109a      	asrs	r2, r3, #2
 8002f22:	17cb      	asrs	r3, r1, #31
 8002f24:	1ad2      	subs	r2, r2, r3
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	1aca      	subs	r2, r1, r3
 8002f30:	2a00      	cmp	r2, #0
 8002f32:	d103      	bne.n	8002f3c <_ZN10PWSettings6UpdateEv+0x1dc>
				preis += 5;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	3305      	adds	r3, #5
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	e002      	b.n	8002f42 <_ZN10PWSettings6UpdateEv+0x1e2>
			}else{
				preis -= 5;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b05      	subs	r3, #5
 8002f40:	60fb      	str	r3, [r7, #12]
			}
		}
		model->setParafinwachsPreis(preis);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	ee07 2a90 	vmov	s15, r2
 8002f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f50:	eeb0 0a67 	vmov.f32	s0, s15
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff f897 	bl	8002088 <_ZN5Model20setParafinwachsPreisEf>
		lcd->Write(line1,12,0,prizeToCharArray(preis),12,0);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685c      	ldr	r4, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68dd      	ldr	r5, [r3, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4619      	mov	r1, r3
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f88e 	bl	8003088 <_ZN10PWSettings16prizeToCharArrayEm>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	2300      	movs	r3, #0
 8002f70:	9302      	str	r3, [sp, #8]
 8002f72:	230c      	movs	r3, #12
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	9200      	str	r2, [sp, #0]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	4620      	mov	r0, r4
 8002f80:	f7fe fa39 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position, 2,true);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6858      	ldr	r0, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7a59      	ldrb	r1, [r3, #9]
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f7fe fa96 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fe ff26 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fef7 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <_ZN10PWSettings6UpdateEv+0x25c>
		model->setT2Long(false);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe fefb 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe ff40 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <_ZN10PWSettings6UpdateEv+0x278>
		//-

		model->setT3Short(false);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe ff44 	bl	8001e60 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe ff15 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <_ZN10PWSettings6UpdateEv+0x294>
		model->setT3Long(false);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2100      	movs	r1, #0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe ff19 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7fe ff41 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <_ZN10PWSettings6UpdateEv+0x2b0>
		model->setT4Long(false);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe ff45 	bl	8001e9a <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe ff50 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d005      	beq.n	800302c <_ZN10PWSettings6UpdateEv+0x2cc>
		model->setT4Short(false);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe ff54 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ff5f 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <_ZN10PWSettings6UpdateEv+0x2f4>
		//Neuer Wert speichern
		init = false;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	729a      	strb	r2, [r3, #10]
		screen = Model::E_MAIN_SCRREN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2100      	movs	r1, #0
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe ff5d 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe ff68 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <_ZN10PWSettings6UpdateEv+0x310>
		model->setT5Short(false);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff6c 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	7a1b      	ldrb	r3, [r3, #8]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bdb0      	pop	{r4, r5, r7, pc}
 800307c:	51eb851f 	.word	0x51eb851f
 8003080:	10624dd3 	.word	0x10624dd3
 8003084:	66666667 	.word	0x66666667

08003088 <_ZN10PWSettings16prizeToCharArrayEm>:


char* PWSettings::prizeToCharArray(uint32_t prize){
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff f8d6 	bl	8002248 <_ZN5Tools14intToAsciiCharElh>
 800309c:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 800309e:	2300      	movs	r3, #0
 80030a0:	73fb      	strb	r3, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d80b      	bhi.n	80030c0 <_ZN10PWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	441a      	add	r2, r3
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	7811      	ldrb	r1, [r2, #0]
 80030b4:	4a11      	ldr	r2, [pc, #68]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030b6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	e7f0      	b.n	80030a2 <_ZN10PWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030c2:	2220      	movs	r2, #32
 80030c4:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030c8:	2246      	movs	r2, #70	; 0x46
 80030ca:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030ce:	2272      	movs	r2, #114	; 0x72
 80030d0:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030d4:	222f      	movs	r2, #47	; 0x2f
 80030d6:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 80030d8:	4b08      	ldr	r3, [pc, #32]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030da:	2231      	movs	r2, #49	; 0x31
 80030dc:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030e0:	2230      	movs	r2, #48	; 0x30
 80030e2:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030e6:	2230      	movs	r2, #48	; 0x30
 80030e8:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030ec:	2267      	movs	r2, #103	; 0x67
 80030ee:	731a      	strb	r2, [r3, #12]
	return result;
 80030f0:	4b02      	ldr	r3, [pc, #8]	; (80030fc <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000030c 	.word	0x2000030c

08003100 <_ZN13ScreenControlC1EP5ModelP8Kontrast>:
static TimeScreen *timeScreen;
static Contrast *kontrastSettings;



ScreenControl::ScreenControl(Model *model, Kontrast *contrast) {
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	model = model;
	contrast = contrast;
	lcd  = LCD();
 800310c:	f107 0314 	add.w	r3, r7, #20
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe f89d 	bl	8001250 <_ZN3LCDC1Ev>
	mainScreen = new MainScreen(model, &lcd);
 8003116:	2010      	movs	r0, #16
 8003118:	f009 fe99 	bl	800ce4e <_Znwj>
 800311c:	4603      	mov	r3, r0
 800311e:	461c      	mov	r4, r3
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	4620      	mov	r0, r4
 8003126:	f7ff fc33 	bl	8002990 <_ZN10MainScreenC1EP5ModelP3LCD>
 800312a:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd0>)
 800312c:	601c      	str	r4, [r3, #0]
	pwSettings = new PWSettings(model, &lcd);
 800312e:	2010      	movs	r0, #16
 8003130:	f009 fe8d 	bl	800ce4e <_Znwj>
 8003134:	4603      	mov	r3, r0
 8003136:	461c      	mov	r4, r3
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 800313a:	68b9      	ldr	r1, [r7, #8]
 800313c:	4620      	mov	r0, r4
 800313e:	f7ff fdf7 	bl	8002d30 <_ZN10PWSettingsC1EP5ModelP3LCD>
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd4>)
 8003144:	601c      	str	r4, [r3, #0]
	bwSettings = new BWSettings(model, &lcd);
 8003146:	2010      	movs	r0, #16
 8003148:	f009 fe81 	bl	800ce4e <_Znwj>
 800314c:	4603      	mov	r3, r0
 800314e:	461c      	mov	r4, r3
 8003150:	4a1e      	ldr	r2, [pc, #120]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff fa2f 	bl	80025b8 <_ZN10BWSettingsC1EP5ModelP3LCD>
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xd8>)
 800315c:	601c      	str	r4, [r3, #0]
	timeSettings = new TimeSettings(model, &lcd);
 800315e:	2010      	movs	r0, #16
 8003160:	f009 fe75 	bl	800ce4e <_Znwj>
 8003164:	4603      	mov	r3, r0
 8003166:	461c      	mov	r4, r3
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	4620      	mov	r0, r4
 800316e:	f000 ffd7 	bl	8004120 <_ZN12TimeSettingsC1EP5ModelP3LCD>
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xdc>)
 8003174:	601c      	str	r4, [r3, #0]
	dateSettings = new DateSettings(model, &lcd);
 8003176:	2014      	movs	r0, #20
 8003178:	f009 fe69 	bl	800ce4e <_Znwj>
 800317c:	4603      	mov	r3, r0
 800317e:	461c      	mov	r4, r3
 8003180:	4a12      	ldr	r2, [pc, #72]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4620      	mov	r0, r4
 8003186:	f000 fc31 	bl	80039ec <_ZN12DateSettingsC1EP5ModelP3LCD>
 800318a:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe0>)
 800318c:	601c      	str	r4, [r3, #0]
	timeScreen = new TimeScreen(model, &lcd);
 800318e:	200c      	movs	r0, #12
 8003190:	f009 fe5d 	bl	800ce4e <_Znwj>
 8003194:	4603      	mov	r3, r0
 8003196:	461c      	mov	r4, r3
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	4620      	mov	r0, r4
 800319e:	f000 f8dd 	bl	800335c <_ZN10TimeScreenC1EP5ModelP3LCD>
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe4>)
 80031a4:	601c      	str	r4, [r3, #0]
	kontrastSettings = new Contrast(model, &lcd, contrast);
 80031a6:	2018      	movs	r0, #24
 80031a8:	f009 fe51 	bl	800ce4e <_Znwj>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461c      	mov	r4, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a06      	ldr	r2, [pc, #24]	; (80031cc <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xcc>)
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 fa22 	bl	8003600 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <_ZN13ScreenControlC1EP5ModelP8Kontrast+0xe8>)
 80031be:	601c      	str	r4, [r3, #0]
}
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4618      	mov	r0, r3
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000318 	.word	0x20000318
 80031d0:	2000031c 	.word	0x2000031c
 80031d4:	20000320 	.word	0x20000320
 80031d8:	20000324 	.word	0x20000324
 80031dc:	20000328 	.word	0x20000328
 80031e0:	2000032c 	.word	0x2000032c
 80031e4:	20000330 	.word	0x20000330
 80031e8:	20000334 	.word	0x20000334

080031ec <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	lcd.InitLCD();
 80031f4:	4806      	ldr	r0, [pc, #24]	; (8003210 <_ZN13ScreenControl10InitScreenEv+0x24>)
 80031f6:	f7fe f837 	bl	8001268 <_ZN3LCD7InitLCDEv>

	currentScreen = Model::E_MAIN_SCRREN;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2203      	movs	r2, #3
 80031fe:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	705a      	strb	r2, [r3, #1]

}
 8003206:	bf00      	nop
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000318 	.word	0x20000318

08003214 <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	785a      	ldrb	r2, [r3, #1]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b07      	cmp	r3, #7
 800322a:	d85a      	bhi.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <_ZN13ScreenControl6UpdateEv+0x20>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	0800327d 	.word	0x0800327d
 800323c:	080032e1 	.word	0x080032e1
 8003240:	08003255 	.word	0x08003255
 8003244:	080032b9 	.word	0x080032b9
 8003248:	08003291 	.word	0x08003291
 800324c:	080032a5 	.word	0x080032a5
 8003250:	080032cd 	.word	0x080032cd

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <_ZN13ScreenControl6UpdateEv+0xd8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fbaf 	bl	80029bc <_ZN10MainScreen6UpdateEv>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	705a      	strb	r2, [r3, #1]
		break;
 8003266:	e03c      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 8003268:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <_ZN13ScreenControl6UpdateEv+0xdc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff f9bf 	bl	80025f0 <_ZN10BWSettings6UpdateEv>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	705a      	strb	r2, [r3, #1]
		break;
 800327a:	e032      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_PW_SETTINGS:
		nextScreen = pwSettings->Update();
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <_ZN13ScreenControl6UpdateEv+0xe0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fd6d 	bl	8002d60 <_ZN10PWSettings6UpdateEv>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	705a      	strb	r2, [r3, #1]
		break;
 800328e:	e028      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_TIME_SETTINGS:
		nextScreen = timeSettings->Update();
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <_ZN13ScreenControl6UpdateEv+0xe4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 ff5b 	bl	8004150 <_ZN12TimeSettings6UpdateEv>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	705a      	strb	r2, [r3, #1]
		break;
 80032a2:	e01e      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_DATE_SETTINGS:
		nextScreen = dateSettings->Update();
 80032a4:	4b15      	ldr	r3, [pc, #84]	; (80032fc <_ZN13ScreenControl6UpdateEv+0xe8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fbbb 	bl	8003a24 <_ZN12DateSettings6UpdateEv>
 80032ae:	4603      	mov	r3, r0
 80032b0:	461a      	mov	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	705a      	strb	r2, [r3, #1]
		break;
 80032b6:	e014      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_LOG_BOOK:
		break;
	case Model::E_TIME:
		nextScreen =timeScreen->Update();
 80032b8:	4b11      	ldr	r3, [pc, #68]	; (8003300 <_ZN13ScreenControl6UpdateEv+0xec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f861 	bl	8003384 <_ZN10TimeScreen6UpdateEv>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	705a      	strb	r2, [r3, #1]
	break;
 80032ca:	e00a      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_KONTRAST_SETTINGS:
		nextScreen = kontrastSettings->Update();
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <_ZN13ScreenControl6UpdateEv+0xf0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f9b9 	bl	8003648 <_ZN8Contrast6UpdateEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	705a      	strb	r2, [r3, #1]
		break;
 80032de:	e000      	b.n	80032e2 <_ZN13ScreenControl6UpdateEv+0xce>
		break;
 80032e0:	bf00      	nop
	}
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000031c 	.word	0x2000031c
 80032f0:	20000324 	.word	0x20000324
 80032f4:	20000320 	.word	0x20000320
 80032f8:	20000328 	.word	0x20000328
 80032fc:	2000032c 	.word	0x2000032c
 8003300:	20000330 	.word	0x20000330
 8003304:	20000334 	.word	0x20000334

08003308 <_ZN13ScreenControl16getCurrentScreenEv>:


Model::ESCREEN ScreenControl::getCurrentScreen(){
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	return this->currentScreen;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	781b      	ldrb	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <_Z41__static_initialization_and_destruction_0ii>:
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003336:	4293      	cmp	r3, r2
 8003338:	d102      	bne.n	8003340 <_Z41__static_initialization_and_destruction_0ii+0x20>
static LCD lcd;
 800333a:	4803      	ldr	r0, [pc, #12]	; (8003348 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800333c:	f7fd ff88 	bl	8001250 <_ZN3LCDC1Ev>
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000318 	.word	0x20000318

0800334c <_GLOBAL__sub_I__ZN13ScreenControlC2EP5ModelP8Kontrast>:
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
 8003350:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003354:	2001      	movs	r0, #1
 8003356:	f7ff ffe3 	bl	8003320 <_Z41__static_initialization_and_destruction_0ii>
 800335a:	bd80      	pop	{r7, pc}

0800335c <_ZN10TimeScreenC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "TimeScreen.h"

TimeScreen::TimeScreen(Model *model, LCD *lcd) {
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
	this->model= model;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	605a      	str	r2, [r3, #4]

}
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4618      	mov	r0, r3
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN10TimeScreen6UpdateEv>:

Model::ESCREEN TimeScreen::Update(){
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af04      	add	r7, sp, #16
 800338a:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2204      	movs	r2, #4
 8003390:	721a      	strb	r2, [r3, #8]

	lcd->Write("Zeit",4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685c      	ldr	r4, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe fbe1 	bl	8001b62 <_ZNK5Model7getHourEv>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461d      	mov	r5, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fe fc2b 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461e      	mov	r6, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fc5e 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 80033bc:	4603      	mov	r3, r0
 80033be:	4632      	mov	r2, r6
 80033c0:	4629      	mov	r1, r5
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 f8a4 	bl	8003510 <_ZN10TimeScreen15TimeToCharArrayEhhh>
 80033c8:	4602      	mov	r2, r0
 80033ca:	2304      	movs	r3, #4
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	2308      	movs	r3, #8
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	9200      	str	r2, [sp, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	2204      	movs	r2, #4
 80033d8:	494c      	ldr	r1, [pc, #304]	; (800350c <_ZN10TimeScreen6UpdateEv+0x188>)
 80033da:	4620      	mov	r0, r4
 80033dc:	f7fe f80b 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>

	//------------------SW_BW------------------
	if(model->isT1Short()){
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fcba 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <_ZN10TimeScreen6UpdateEv+0x78>
		model->setT1Short(false);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fcbe 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fc8f 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <_ZN10TimeScreen6UpdateEv+0x94>
		model->setT1Long(false);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe fc93 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fcd8 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <_ZN10TimeScreen6UpdateEv+0xb0>
		model->setT2Short(false);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fcdc 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fcad 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <_ZN10TimeScreen6UpdateEv+0xcc>
		model->setT2Long(false);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2100      	movs	r1, #0
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe fcb1 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fcf6 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <_ZN10TimeScreen6UpdateEv+0xe8>
		//-

		model->setT3Short(false);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fcfa 	bl	8001e60 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fccb 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <_ZN10TimeScreen6UpdateEv+0x104>
		model->setT3Long(false);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f7fe fccf 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fcf7 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <_ZN10TimeScreen6UpdateEv+0x120>
		model->setT4Long(false);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe fcfb 	bl	8001e9a <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fd06 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <_ZN10TimeScreen6UpdateEv+0x13c>
		model->setT4Short(false);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fd0a 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fd15 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <_ZN10TimeScreen6UpdateEv+0x15e>
		screen = Model::E_MAIN_SCRREN;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2203      	movs	r2, #3
 80034d4:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe fd16 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f7fe fd21 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <_ZN10TimeScreen6UpdateEv+0x17a>
		model->setT5Short(false);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fe fd25 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7a1b      	ldrb	r3, [r3, #8]
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350a:	bf00      	nop
 800350c:	0800d144 	.word	0x0800d144

08003510 <_ZN10TimeScreen15TimeToCharArrayEhhh>:

char* TimeScreen::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	4608      	mov	r0, r1
 800351a:	4611      	mov	r1, r2
 800351c:	461a      	mov	r2, r3
 800351e:	4603      	mov	r3, r0
 8003520:	70fb      	strb	r3, [r7, #3]
 8003522:	460b      	mov	r3, r1
 8003524:	70bb      	strb	r3, [r7, #2]
 8003526:	4613      	mov	r3, r2
 8003528:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 800352a:	78fb      	ldrb	r3, [r7, #3]
 800352c:	4a32      	ldr	r2, [pc, #200]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	3330      	adds	r3, #48	; 0x30
 8003538:	b2da      	uxtb	r2, r3
 800353a:	4b30      	ldr	r3, [pc, #192]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 800353c:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	08db      	lsrs	r3, r3, #3
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	0152      	lsls	r2, r2, #5
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	0092      	lsls	r2, r2, #2
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	b2da      	uxtb	r2, r3
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	4413      	add	r3, r2
 800355c:	b2db      	uxtb	r3, r3
 800355e:	3330      	adds	r3, #48	; 0x30
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b26      	ldr	r3, [pc, #152]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003564:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003568:	223a      	movs	r2, #58	; 0x3a
 800356a:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 800356c:	78bb      	ldrb	r3, [r7, #2]
 800356e:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3330      	adds	r3, #48	; 0x30
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 800357e:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 8003580:	78bb      	ldrb	r3, [r7, #2]
 8003582:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	0152      	lsls	r2, r2, #5
 8003590:	1ad2      	subs	r2, r2, r3
 8003592:	0092      	lsls	r2, r2, #2
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	b2da      	uxtb	r2, r3
 800359a:	78bb      	ldrb	r3, [r7, #2]
 800359c:	4413      	add	r3, r2
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3330      	adds	r3, #48	; 0x30
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	4b15      	ldr	r3, [pc, #84]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035a6:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035aa:	223a      	movs	r2, #58	; 0x3a
 80035ac:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 80035ae:	787b      	ldrb	r3, [r7, #1]
 80035b0:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	08db      	lsrs	r3, r3, #3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3330      	adds	r3, #48	; 0x30
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035c0:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 80035c2:	787b      	ldrb	r3, [r7, #1]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	08db      	lsrs	r3, r3, #3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	0152      	lsls	r2, r2, #5
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	0092      	lsls	r2, r2, #2
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	787b      	ldrb	r3, [r7, #1]
 80035de:	4413      	add	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	3330      	adds	r3, #48	; 0x30
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	4b05      	ldr	r3, [pc, #20]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035e8:	71da      	strb	r2, [r3, #7]
	return result;
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	cccccccd 	.word	0xcccccccd
 80035fc:	20000338 	.word	0x20000338

08003600 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>:
 */

#include "Contrast.h"
#include "../../Model/Tools.h"

Contrast::Contrast(Model *model, LCD *lcd, Kontrast *contrast) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast+0x44>)
 8003612:	611a      	str	r2, [r3, #16]
	this->model = model;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	609a      	str	r2, [r3, #8]
	this->init = false;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	751a      	strb	r2, [r3, #20]
	this->contrast = contrast;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	60da      	str	r2, [r3, #12]
	kontrast = model->getKontrast();
 800362c:	68b8      	ldr	r0, [r7, #8]
 800362e:	f7fe fd99 	bl	8002164 <_ZNK5Model11getKontrastEv>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	755a      	strb	r2, [r3, #21]
}
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0800d14c 	.word	0x0800d14c

08003648 <_ZN8Contrast6UpdateEv>:

Model::ESCREEN Contrast::Update(void) {
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af04      	add	r7, sp, #16
 800364e:	6078      	str	r0, [r7, #4]
		screen = Model::E_KONTRAST_SETTINGS;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2207      	movs	r2, #7
 8003654:	701a      	strb	r2, [r3, #0]


		if(!init){
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7d1b      	ldrb	r3, [r3, #20]
 800365a:	f083 0301 	eor.w	r3, r3, #1
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <_ZN8Contrast6UpdateEv+0x62>

			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689c      	ldr	r4, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691d      	ldr	r5, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fe fd77 	bl	8002164 <_ZNK5Model11getKontrastEv>
 8003676:	4603      	mov	r3, r0
 8003678:	4618      	mov	r0, r3
 800367a:	f7fe fec3 	bl	8002404 <_ZN5Tools11byteToAsciiEh>
 800367e:	4602      	mov	r2, r0
 8003680:	2309      	movs	r3, #9
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	2303      	movs	r3, #3
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	9200      	str	r2, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	2208      	movs	r2, #8
 800368e:	4629      	mov	r1, r5
 8003690:	4620      	mov	r0, r4
 8003692:	f7fd feb0 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6898      	ldr	r0, [r3, #8]
 800369a:	2301      	movs	r3, #1
 800369c:	2202      	movs	r2, #2
 800369e:	210b      	movs	r1, #11
 80036a0:	f7fd ff0e 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
			init = true;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	751a      	strb	r2, [r3, #20]
		}



		if(HAL_GPIO_ReadPin(SW_PW_GPIO_Port, SW_PW_Pin) == GPIO_PIN_RESET){
 80036aa:	2120      	movs	r1, #32
 80036ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036b0:	f001 fc2c 	bl	8004f0c <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bf0c      	ite	eq
 80036ba:	2301      	moveq	r3, #1
 80036bc:	2300      	movne	r3, #0
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d005      	beq.n	80036d0 <_ZN8Contrast6UpdateEv+0x88>
			model->setT2Long(false);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fb71 	bl	8001db2 <_ZN5Model9setT2LongEb>
		}
		if(HAL_GPIO_ReadPin(SW_SUM_GPIO_Port, SW_SUM_Pin) == GPIO_PIN_RESET){
 80036d0:	2180      	movs	r1, #128	; 0x80
 80036d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d6:	f001 fc19 	bl	8004f0c <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <_ZN8Contrast6UpdateEv+0xae>
			model->setT3Long(false);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe fb98 	bl	8001e26 <_ZN5Model9setT3LongEb>
		}

		//------------------SW_BW------------------
		if(model->isT1Short()){
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe fb2f 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <_ZN8Contrast6UpdateEv+0xca>
			model->setT1Short(false);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2100      	movs	r1, #0
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fb33 	bl	8001d78 <_ZN5Model10setT1ShortEb>
		}
		if(model->isT1Long()){
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe fb04 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d005      	beq.n	800372e <_ZN8Contrast6UpdateEv+0xe6>
			model->setT1Long(false);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f7fe fb08 	bl	8001d3e <_ZN5Model9setT1LongEb>
		}

		//------------------SW_PW------------------
		if(model->isT2Short()){
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fb4d 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d03f      	beq.n	80037be <_ZN8Contrast6UpdateEv+0x176>
			if(kontrast < 100){
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	7d5b      	ldrb	r3, [r3, #21]
 8003742:	2b63      	cmp	r3, #99	; 0x63
 8003744:	d835      	bhi.n	80037b2 <_ZN8Contrast6UpdateEv+0x16a>
				model->setKontrast(kontrast++);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6858      	ldr	r0, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7d5b      	ldrb	r3, [r3, #21]
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	b2d1      	uxtb	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	7551      	strb	r1, [r2, #21]
 8003756:	4619      	mov	r1, r3
 8003758:	f7fe fd11 	bl	800217e <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689c      	ldr	r4, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691d      	ldr	r5, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4618      	mov	r0, r3
 800376a:	f7fe fcfb 	bl	8002164 <_ZNK5Model11getKontrastEv>
 800376e:	4603      	mov	r3, r0
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe fe47 	bl	8002404 <_ZN5Tools11byteToAsciiEh>
 8003776:	4602      	mov	r2, r0
 8003778:	2309      	movs	r3, #9
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	2303      	movs	r3, #3
 800377e:	9301      	str	r3, [sp, #4]
 8003780:	9200      	str	r2, [sp, #0]
 8003782:	2300      	movs	r3, #0
 8003784:	2208      	movs	r2, #8
 8003786:	4629      	mov	r1, r5
 8003788:	4620      	mov	r0, r4
 800378a:	f7fd fe34 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6898      	ldr	r0, [r3, #8]
 8003792:	2301      	movs	r3, #1
 8003794:	2202      	movs	r2, #2
 8003796:	210b      	movs	r1, #11
 8003798:	f7fd fe92 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	7d5b      	ldrb	r3, [r3, #21]
 80037a4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	4610      	mov	r0, r2
 80037ae:	f7fd fd35 	bl	800121c <_ZN8Kontrast11setContrastEh>
			}

			model->setT2Short(false);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2100      	movs	r1, #0
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fb17 	bl	8001dec <_ZN5Model10setT2ShortEb>
		}
		if(model->isT2Long()){
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fae8 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d039      	beq.n	8003842 <_ZN8Contrast6UpdateEv+0x1fa>
			if(kontrast < 100){
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7d5b      	ldrb	r3, [r3, #21]
 80037d2:	2b63      	cmp	r3, #99	; 0x63
 80037d4:	d835      	bhi.n	8003842 <_ZN8Contrast6UpdateEv+0x1fa>
				model->setKontrast(kontrast++);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6858      	ldr	r0, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7d5b      	ldrb	r3, [r3, #21]
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	b2d1      	uxtb	r1, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	7551      	strb	r1, [r2, #21]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fe fcc9 	bl	800217e <_ZN5Model11setKontrastEh>
				lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689c      	ldr	r4, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691d      	ldr	r5, [r3, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fe fcb3 	bl	8002164 <_ZNK5Model11getKontrastEv>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fdff 	bl	8002404 <_ZN5Tools11byteToAsciiEh>
 8003806:	4602      	mov	r2, r0
 8003808:	2309      	movs	r3, #9
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	2303      	movs	r3, #3
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	9200      	str	r2, [sp, #0]
 8003812:	2300      	movs	r3, #0
 8003814:	2208      	movs	r2, #8
 8003816:	4629      	mov	r1, r5
 8003818:	4620      	mov	r0, r4
 800381a:	f7fd fdec 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
				lcd->SetCursorPosition(11, 2,true);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6898      	ldr	r0, [r3, #8]
 8003822:	2301      	movs	r3, #1
 8003824:	2202      	movs	r2, #2
 8003826:	210b      	movs	r1, #11
 8003828:	f7fd fe4a 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7d5b      	ldrb	r3, [r3, #21]
 8003834:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003838:	b2db      	uxtb	r3, r3
 800383a:	4619      	mov	r1, r3
 800383c:	4610      	mov	r0, r2
 800383e:	f7fd fced 	bl	800121c <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Summe------------------
		if(model->isT3Short()){
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fafd 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d03f      	beq.n	80038d2 <_ZN8Contrast6UpdateEv+0x28a>
			if(kontrast > 0){
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7d5b      	ldrb	r3, [r3, #21]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d035      	beq.n	80038c6 <_ZN8Contrast6UpdateEv+0x27e>
			model->setKontrast(kontrast--);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6858      	ldr	r0, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7d5b      	ldrb	r3, [r3, #21]
 8003862:	1e5a      	subs	r2, r3, #1
 8003864:	b2d1      	uxtb	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	7551      	strb	r1, [r2, #21]
 800386a:	4619      	mov	r1, r3
 800386c:	f7fe fc87 	bl	800217e <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689c      	ldr	r4, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691d      	ldr	r5, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fc71 	bl	8002164 <_ZNK5Model11getKontrastEv>
 8003882:	4603      	mov	r3, r0
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fdbd 	bl	8002404 <_ZN5Tools11byteToAsciiEh>
 800388a:	4602      	mov	r2, r0
 800388c:	2309      	movs	r3, #9
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	2303      	movs	r3, #3
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	2300      	movs	r3, #0
 8003898:	2208      	movs	r2, #8
 800389a:	4629      	mov	r1, r5
 800389c:	4620      	mov	r0, r4
 800389e:	f7fd fdaa 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6898      	ldr	r0, [r3, #8]
 80038a6:	2301      	movs	r3, #1
 80038a8:	2202      	movs	r2, #2
 80038aa:	210b      	movs	r1, #11
 80038ac:	f7fd fe08 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7d5b      	ldrb	r3, [r3, #21]
 80038b8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fd fcab 	bl	800121c <_ZN8Kontrast11setContrastEh>
			}
			model->setT3Short(false);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2100      	movs	r1, #0
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fac7 	bl	8001e60 <_ZN5Model10setT3ShortEb>
		}
		if(model->isT3Long()){
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe fa98 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d039      	beq.n	8003956 <_ZN8Contrast6UpdateEv+0x30e>
			if(kontrast > 0){
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	7d5b      	ldrb	r3, [r3, #21]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d035      	beq.n	8003956 <_ZN8Contrast6UpdateEv+0x30e>
			model->setKontrast(kontrast--);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6858      	ldr	r0, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	7d5b      	ldrb	r3, [r3, #21]
 80038f2:	1e5a      	subs	r2, r3, #1
 80038f4:	b2d1      	uxtb	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	7551      	strb	r1, [r2, #21]
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7fe fc3f 	bl	800217e <_ZN5Model11setKontrastEh>
			lcd->Write(line1,8,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689c      	ldr	r4, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691d      	ldr	r5, [r3, #16]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fc29 	bl	8002164 <_ZNK5Model11getKontrastEv>
 8003912:	4603      	mov	r3, r0
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fd75 	bl	8002404 <_ZN5Tools11byteToAsciiEh>
 800391a:	4602      	mov	r2, r0
 800391c:	2309      	movs	r3, #9
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	2303      	movs	r3, #3
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	2300      	movs	r3, #0
 8003928:	2208      	movs	r2, #8
 800392a:	4629      	mov	r1, r5
 800392c:	4620      	mov	r0, r4
 800392e:	f7fd fd62 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
			lcd->SetCursorPosition(11, 2,true);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6898      	ldr	r0, [r3, #8]
 8003936:	2301      	movs	r3, #1
 8003938:	2202      	movs	r2, #2
 800393a:	210b      	movs	r1, #11
 800393c:	f7fd fdc0 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	7d5b      	ldrb	r3, [r3, #21]
 8003948:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800394c:	b2db      	uxtb	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	4610      	mov	r0, r2
 8003952:	f7fd fc63 	bl	800121c <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Total------------------
		if(model->isT4Short()){
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe faad 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <_ZN8Contrast6UpdateEv+0x32a>
			model->setT4Short(false);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2100      	movs	r1, #0
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fab1 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
		}
		if(model->isT4Long()){
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe fa82 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <_ZN8Contrast6UpdateEv+0x346>
			model->setT4Long(false);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2100      	movs	r1, #0
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fa86 	bl	8001e9a <_ZN5Model9setT4LongEb>
		}

		//------------------SW_Tar------------------
		if(model->isT5Short()){
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe facb 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <_ZN8Contrast6UpdateEv+0x36e>
			screen = Model::E_TIME_SETTINGS;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2205      	movs	r2, #5
 80039a2:	701a      	strb	r2, [r3, #0]
			init = false;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	751a      	strb	r2, [r3, #20]
			model->setT5Short(false);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fe fac9 	bl	8001f48 <_ZN5Model10setT5ShortEb>
		}
		if(model->isT5Long()){
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe fa9a 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <_ZN8Contrast6UpdateEv+0x396>
			//Speichern ToDo
			screen = Model::E_MAIN_SCRREN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2203      	movs	r2, #3
 80039ca:	701a      	strb	r2, [r3, #0]
			init = false;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	751a      	strb	r2, [r3, #20]
			model->setT5Long(false);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fa98 	bl	8001f0e <_ZN5Model9setT5LongEb>
		}


		return screen;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	781b      	ldrb	r3, [r3, #0]

}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080039ec <_ZN12DateSettingsC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "DateSettings.h"

DateSettings::DateSettings(Model *model, LCD *lcd) {
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <_ZN12DateSettingsC1EP5ModelP3LCD+0x34>)
 80039fc:	60da      	str	r2, [r3, #12]
	this->model = model;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	605a      	str	r2, [r3, #4]
	this->init = false;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	745a      	strb	r2, [r3, #17]
}
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	0800d158 	.word	0x0800d158

08003a24 <_ZN12DateSettings6UpdateEv>:


Model::ESCREEN DateSettings::Update(){
 8003a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af04      	add	r7, sp, #16
 8003a2c:	6078      	str	r0, [r7, #4]

	screen = Model::E_DATE_SETTINGS;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2206      	movs	r2, #6
 8003a32:	721a      	strb	r2, [r3, #8]

	if(!init){
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	7c5b      	ldrb	r3, [r3, #17]
 8003a38:	f083 0301 	eor.w	r3, r3, #1
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d038      	beq.n	8003ab4 <_ZN12DateSettings6UpdateEv+0x90>
		position = 0;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	741a      	strb	r2, [r3, #16]
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685c      	ldr	r4, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68dd      	ldr	r5, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe f948 	bl	8001cea <_ZNK5Model7getYearEv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	461e      	mov	r6, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe f8eb 	bl	8001c3e <_ZNK5Model8getMonthEv>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe f849 	bl	8001b08 <_ZNK5Model6getDayEv>
 8003a76:	4603      	mov	r3, r0
 8003a78:	4642      	mov	r2, r8
 8003a7a:	4631      	mov	r1, r6
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fad1 	bl	8004024 <_ZN12DateSettings15DateToCharArrayEhhh>
 8003a82:	4602      	mov	r2, r0
 8003a84:	2302      	movs	r3, #2
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	230c      	movs	r3, #12
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	9200      	str	r2, [sp, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2205      	movs	r2, #5
 8003a92:	4629      	mov	r1, r5
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7fd fcae 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6858      	ldr	r0, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	7c1b      	ldrb	r3, [r3, #16]
 8003aa2:	3302      	adds	r3, #2
 8003aa4:	b2d9      	uxtb	r1, r3
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f7fd fd09 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	745a      	strb	r2, [r3, #17]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fe f950 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d031      	beq.n	8003b28 <_ZN12DateSettings6UpdateEv+0x104>
		//Change position
		if(position >= 9){
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7c1b      	ldrb	r3, [r3, #16]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d903      	bls.n	8003ad4 <_ZN12DateSettings6UpdateEv+0xb0>
			position = 0;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	741a      	strb	r2, [r3, #16]
 8003ad2:	e019      	b.n	8003b08 <_ZN12DateSettings6UpdateEv+0xe4>
		}else{
			position++;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7c1b      	ldrb	r3, [r3, #16]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	741a      	strb	r2, [r3, #16]
			if(position == 2){
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7c1b      	ldrb	r3, [r3, #16]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d105      	bne.n	8003af4 <_ZN12DateSettings6UpdateEv+0xd0>
				position++;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7c1b      	ldrb	r3, [r3, #16]
 8003aec:	3301      	adds	r3, #1
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	741a      	strb	r2, [r3, #16]
			}
			if(position == 5){
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	7c1b      	ldrb	r3, [r3, #16]
 8003af8:	2b05      	cmp	r3, #5
 8003afa:	d105      	bne.n	8003b08 <_ZN12DateSettings6UpdateEv+0xe4>
				position += 3;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7c1b      	ldrb	r3, [r3, #16]
 8003b00:	3303      	adds	r3, #3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	741a      	strb	r2, [r3, #16]
			}
		}
		lcd->SetCursorPosition(position+2, 2, true);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6858      	ldr	r0, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7c1b      	ldrb	r3, [r3, #16]
 8003b10:	3302      	adds	r3, #2
 8003b12:	b2d9      	uxtb	r1, r3
 8003b14:	2301      	movs	r3, #1
 8003b16:	2202      	movs	r2, #2
 8003b18:	f7fd fcd2 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2100      	movs	r1, #0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe f928 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe f8f9 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <_ZN12DateSettings6UpdateEv+0x120>
		model->setT1Long(false);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fe f8fd 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe f942 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 81e6 	beq.w	8003f22 <_ZN12DateSettings6UpdateEv+0x4fe>
		uint8_t year = model->getYear();
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe f8c5 	bl	8001cea <_ZNK5Model7getYearEv>
 8003b60:	4603      	mov	r3, r0
 8003b62:	73fb      	strb	r3, [r7, #15]
		uint8_t month = model->getMonth();
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fe f868 	bl	8001c3e <_ZNK5Model8getMonthEv>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	73bb      	strb	r3, [r7, #14]
		uint8_t day = model->getDay();
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fd ffc6 	bl	8001b08 <_ZNK5Model6getDayEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	737b      	strb	r3, [r7, #13]
		//Tag
		if(position == 0){
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	7c1b      	ldrb	r3, [r3, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d16a      	bne.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
			switch(month){
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2b0b      	cmp	r3, #11
 8003b8e:	d863      	bhi.n	8003c58 <_ZN12DateSettings6UpdateEv+0x234>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <_ZN12DateSettings6UpdateEv+0x174>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003c29 	.word	0x08003c29
 8003ba0:	08003bc9 	.word	0x08003bc9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003bc9 	.word	0x08003bc9
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003bc9 	.word	0x08003bc9
 8003bb4:	08003bc9 	.word	0x08003bc9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003bc9 	.word	0x08003bc9
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003bc9 	.word	0x08003bc9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 21 ){
 8003bc8:	7b7b      	ldrb	r3, [r7, #13]
 8003bca:	2b15      	cmp	r3, #21
 8003bcc:	d910      	bls.n	8003bf0 <_ZN12DateSettings6UpdateEv+0x1cc>
					day = (day - (day/10)*10);
 8003bce:	7b7b      	ldrb	r3, [r7, #13]
 8003bd0:	4aaa      	ldr	r2, [pc, #680]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	08db      	lsrs	r3, r3, #3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	0152      	lsls	r2, r2, #5
 8003bde:	1ad2      	subs	r2, r2, r3
 8003be0:	0092      	lsls	r2, r2, #2
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	7b7b      	ldrb	r3, [r7, #13]
 8003bea:	4413      	add	r3, r2
 8003bec:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 8003bee:	e036      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 8003bf0:	7b7b      	ldrb	r3, [r7, #13]
 8003bf2:	330a      	adds	r3, #10
 8003bf4:	737b      	strb	r3, [r7, #13]
				break;
 8003bf6:	e032      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 ){
 8003bf8:	7b7b      	ldrb	r3, [r7, #13]
 8003bfa:	2b14      	cmp	r3, #20
 8003bfc:	d910      	bls.n	8003c20 <_ZN12DateSettings6UpdateEv+0x1fc>
					day = (day - (day/10)*10);
 8003bfe:	7b7b      	ldrb	r3, [r7, #13]
 8003c00:	4a9e      	ldr	r2, [pc, #632]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003c02:	fba2 2303 	umull	r2, r3, r2, r3
 8003c06:	08db      	lsrs	r3, r3, #3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	0152      	lsls	r2, r2, #5
 8003c0e:	1ad2      	subs	r2, r2, r3
 8003c10:	0092      	lsls	r2, r2, #2
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	7b7b      	ldrb	r3, [r7, #13]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 8003c1e:	e01e      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 8003c20:	7b7b      	ldrb	r3, [r7, #13]
 8003c22:	330a      	adds	r3, #10
 8003c24:	737b      	strb	r3, [r7, #13]
				break;
 8003c26:	e01a      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
			case 2:
				if(day > 18 ){
 8003c28:	7b7b      	ldrb	r3, [r7, #13]
 8003c2a:	2b12      	cmp	r3, #18
 8003c2c:	d910      	bls.n	8003c50 <_ZN12DateSettings6UpdateEv+0x22c>
					day = (day - (day/10)*10);
 8003c2e:	7b7b      	ldrb	r3, [r7, #13]
 8003c30:	4a92      	ldr	r2, [pc, #584]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003c32:	fba2 2303 	umull	r2, r3, r2, r3
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	0152      	lsls	r2, r2, #5
 8003c3e:	1ad2      	subs	r2, r2, r3
 8003c40:	0092      	lsls	r2, r2, #2
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	7b7b      	ldrb	r3, [r7, #13]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	737b      	strb	r3, [r7, #13]
				}else{
					day+=10;
				}
				break;
 8003c4e:	e006      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
					day+=10;
 8003c50:	7b7b      	ldrb	r3, [r7, #13]
 8003c52:	330a      	adds	r3, #10
 8003c54:	737b      	strb	r3, [r7, #13]
				break;
 8003c56:	e002      	b.n	8003c5e <_ZN12DateSettings6UpdateEv+0x23a>
			default:
				day = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	737b      	strb	r3, [r7, #13]
				break;
 8003c5c:	bf00      	nop
			}
		}

		if(position == 1){
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7c1b      	ldrb	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	f040 8085 	bne.w	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
			switch(month){
 8003c68:	7bbb      	ldrb	r3, [r7, #14]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	2b0b      	cmp	r3, #11
 8003c6e:	d87d      	bhi.n	8003d6c <_ZN12DateSettings6UpdateEv+0x348>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <_ZN12DateSettings6UpdateEv+0x254>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003ca9 	.word	0x08003ca9
 8003c7c:	08003d3f 	.word	0x08003d3f
 8003c80:	08003ca9 	.word	0x08003ca9
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003ca9 	.word	0x08003ca9
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003ca9 	.word	0x08003ca9
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003ca9 	.word	0x08003ca9
 8003ca0:	08003ce5 	.word	0x08003ce5
 8003ca4:	08003ca9 	.word	0x08003ca9
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 30 ){
 8003ca8:	7b7b      	ldrb	r3, [r7, #13]
 8003caa:	2b1e      	cmp	r3, #30
 8003cac:	d903      	bls.n	8003cb6 <_ZN12DateSettings6UpdateEv+0x292>
					day -= 1;
 8003cae:	7b7b      	ldrb	r3, [r7, #13]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8003cb4:	e05d      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 8003cb6:	7b7a      	ldrb	r2, [r7, #13]
 8003cb8:	7b7b      	ldrb	r3, [r7, #13]
 8003cba:	4970      	ldr	r1, [pc, #448]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003cbc:	fba1 1303 	umull	r1, r3, r1, r3
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	f06f 0309 	mvn.w	r3, #9
 8003cca:	fb03 f301 	mul.w	r3, r3, r1
 8003cce:	4413      	add	r3, r2
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	dc03      	bgt.n	8003cdc <_ZN12DateSettings6UpdateEv+0x2b8>
					day+=1;
 8003cd4:	7b7b      	ldrb	r3, [r7, #13]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	737b      	strb	r3, [r7, #13]
				break;
 8003cda:	e04a      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8003cdc:	7b7b      	ldrb	r3, [r7, #13]
 8003cde:	3b09      	subs	r3, #9
 8003ce0:	737b      	strb	r3, [r7, #13]
				break;
 8003ce2:	e046      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 && (day - (day/10)*10) > 7 ){
 8003ce4:	7b7b      	ldrb	r3, [r7, #13]
 8003ce6:	2b14      	cmp	r3, #20
 8003ce8:	d912      	bls.n	8003d10 <_ZN12DateSettings6UpdateEv+0x2ec>
 8003cea:	7b7a      	ldrb	r2, [r7, #13]
 8003cec:	7b7b      	ldrb	r3, [r7, #13]
 8003cee:	4963      	ldr	r1, [pc, #396]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003cf0:	fba1 1303 	umull	r1, r3, r1, r3
 8003cf4:	08db      	lsrs	r3, r3, #3
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f06f 0309 	mvn.w	r3, #9
 8003cfe:	fb03 f301 	mul.w	r3, r3, r1
 8003d02:	4413      	add	r3, r2
 8003d04:	2b07      	cmp	r3, #7
 8003d06:	dd03      	ble.n	8003d10 <_ZN12DateSettings6UpdateEv+0x2ec>
					day -= 8;
 8003d08:	7b7b      	ldrb	r3, [r7, #13]
 8003d0a:	3b08      	subs	r3, #8
 8003d0c:	737b      	strb	r3, [r7, #13]
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8003d0e:	e030      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
				}else if((day - (day/10)*10) < 9){
 8003d10:	7b7a      	ldrb	r2, [r7, #13]
 8003d12:	7b7b      	ldrb	r3, [r7, #13]
 8003d14:	4959      	ldr	r1, [pc, #356]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003d16:	fba1 1303 	umull	r1, r3, r1, r3
 8003d1a:	08db      	lsrs	r3, r3, #3
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f06f 0309 	mvn.w	r3, #9
 8003d24:	fb03 f301 	mul.w	r3, r3, r1
 8003d28:	4413      	add	r3, r2
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	dc03      	bgt.n	8003d36 <_ZN12DateSettings6UpdateEv+0x312>
					day+=1;
 8003d2e:	7b7b      	ldrb	r3, [r7, #13]
 8003d30:	3301      	adds	r3, #1
 8003d32:	737b      	strb	r3, [r7, #13]
				break;
 8003d34:	e01d      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8003d36:	7b7b      	ldrb	r3, [r7, #13]
 8003d38:	3b09      	subs	r3, #9
 8003d3a:	737b      	strb	r3, [r7, #13]
				break;
 8003d3c:	e019      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
			case 2:
				if((day - (day/10)*10) < 9){
 8003d3e:	7b7a      	ldrb	r2, [r7, #13]
 8003d40:	7b7b      	ldrb	r3, [r7, #13]
 8003d42:	494e      	ldr	r1, [pc, #312]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003d44:	fba1 1303 	umull	r1, r3, r1, r3
 8003d48:	08db      	lsrs	r3, r3, #3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f06f 0309 	mvn.w	r3, #9
 8003d52:	fb03 f301 	mul.w	r3, r3, r1
 8003d56:	4413      	add	r3, r2
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	dc03      	bgt.n	8003d64 <_ZN12DateSettings6UpdateEv+0x340>
					day+=1;
 8003d5c:	7b7b      	ldrb	r3, [r7, #13]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	737b      	strb	r3, [r7, #13]
				}else{
						day -=9;
				}
				break;
 8003d62:	e006      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
						day -=9;
 8003d64:	7b7b      	ldrb	r3, [r7, #13]
 8003d66:	3b09      	subs	r3, #9
 8003d68:	737b      	strb	r3, [r7, #13]
				break;
 8003d6a:	e002      	b.n	8003d72 <_ZN12DateSettings6UpdateEv+0x34e>
			default:
				day = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	737b      	strb	r3, [r7, #13]
				break;
 8003d70:	bf00      	nop
			}
		}

		//Monat
		if(position == 3){
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7c1b      	ldrb	r3, [r3, #16]
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d10c      	bne.n	8003d94 <_ZN12DateSettings6UpdateEv+0x370>
			if(month < 3){
 8003d7a:	7bbb      	ldrb	r3, [r7, #14]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d803      	bhi.n	8003d88 <_ZN12DateSettings6UpdateEv+0x364>
				month +=10;
 8003d80:	7bbb      	ldrb	r3, [r7, #14]
 8003d82:	330a      	adds	r3, #10
 8003d84:	73bb      	strb	r3, [r7, #14]
 8003d86:	e005      	b.n	8003d94 <_ZN12DateSettings6UpdateEv+0x370>
			}else if(month > 9){
 8003d88:	7bbb      	ldrb	r3, [r7, #14]
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d902      	bls.n	8003d94 <_ZN12DateSettings6UpdateEv+0x370>
				month -= 10;
 8003d8e:	7bbb      	ldrb	r3, [r7, #14]
 8003d90:	3b0a      	subs	r3, #10
 8003d92:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	7c1b      	ldrb	r3, [r3, #16]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d11f      	bne.n	8003ddc <_ZN12DateSettings6UpdateEv+0x3b8>
			if((month - (month/10)*10) < 9 && month < 12){
 8003d9c:	7bba      	ldrb	r2, [r7, #14]
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	4936      	ldr	r1, [pc, #216]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003da2:	fba1 1303 	umull	r1, r3, r1, r3
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	f06f 0309 	mvn.w	r3, #9
 8003db0:	fb03 f301 	mul.w	r3, r3, r1
 8003db4:	4413      	add	r3, r2
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	dc06      	bgt.n	8003dc8 <_ZN12DateSettings6UpdateEv+0x3a4>
 8003dba:	7bbb      	ldrb	r3, [r7, #14]
 8003dbc:	2b0b      	cmp	r3, #11
 8003dbe:	d803      	bhi.n	8003dc8 <_ZN12DateSettings6UpdateEv+0x3a4>
				month +=1;
 8003dc0:	7bbb      	ldrb	r3, [r7, #14]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	73bb      	strb	r3, [r7, #14]
 8003dc6:	e009      	b.n	8003ddc <_ZN12DateSettings6UpdateEv+0x3b8>
			}else if(month > 11){
 8003dc8:	7bbb      	ldrb	r3, [r7, #14]
 8003dca:	2b0b      	cmp	r3, #11
 8003dcc:	d903      	bls.n	8003dd6 <_ZN12DateSettings6UpdateEv+0x3b2>
				month = month - 2;
 8003dce:	7bbb      	ldrb	r3, [r7, #14]
 8003dd0:	3b02      	subs	r3, #2
 8003dd2:	73bb      	strb	r3, [r7, #14]
 8003dd4:	e002      	b.n	8003ddc <_ZN12DateSettings6UpdateEv+0x3b8>
			}else{
				month -= 9;
 8003dd6:	7bbb      	ldrb	r3, [r7, #14]
 8003dd8:	3b09      	subs	r3, #9
 8003dda:	73bb      	strb	r3, [r7, #14]
			}
		}

		switch(month){
 8003ddc:	7bbb      	ldrb	r3, [r7, #14]
 8003dde:	3b02      	subs	r3, #2
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d826      	bhi.n	8003e32 <_ZN12DateSettings6UpdateEv+0x40e>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <_ZN12DateSettings6UpdateEv+0x3c8>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e33 	.word	0x08003e33
 8003df4:	08003e15 	.word	0x08003e15
 8003df8:	08003e33 	.word	0x08003e33
 8003dfc:	08003e15 	.word	0x08003e15
 8003e00:	08003e33 	.word	0x08003e33
 8003e04:	08003e33 	.word	0x08003e33
 8003e08:	08003e15 	.word	0x08003e15
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e15 	.word	0x08003e15
					case 4:
					case 6:
					case 9:
					case 11:
						if(day > 30){
 8003e14:	7b7b      	ldrb	r3, [r7, #13]
 8003e16:	2b1e      	cmp	r3, #30
 8003e18:	d908      	bls.n	8003e2c <_ZN12DateSettings6UpdateEv+0x408>
							day = 30;
 8003e1a:	231e      	movs	r3, #30
 8003e1c:	737b      	strb	r3, [r7, #13]
						}
						break;
 8003e1e:	e005      	b.n	8003e2c <_ZN12DateSettings6UpdateEv+0x408>
					case 2:
						if(day > 28){
 8003e20:	7b7b      	ldrb	r3, [r7, #13]
 8003e22:	2b1c      	cmp	r3, #28
 8003e24:	d904      	bls.n	8003e30 <_ZN12DateSettings6UpdateEv+0x40c>
							day = 28;
 8003e26:	231c      	movs	r3, #28
 8003e28:	737b      	strb	r3, [r7, #13]
						}
						break;
 8003e2a:	e001      	b.n	8003e30 <_ZN12DateSettings6UpdateEv+0x40c>
						break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <_ZN12DateSettings6UpdateEv+0x40e>
						break;
 8003e30:	bf00      	nop
					}

		//Jahr
		if(position == 8){
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	7c1b      	ldrb	r3, [r3, #16]
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d109      	bne.n	8003e4e <_ZN12DateSettings6UpdateEv+0x42a>
			if((year/10) < 9){
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b59      	cmp	r3, #89	; 0x59
 8003e3e:	d803      	bhi.n	8003e48 <_ZN12DateSettings6UpdateEv+0x424>
				year +=10;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	330a      	adds	r3, #10
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e002      	b.n	8003e4e <_ZN12DateSettings6UpdateEv+0x42a>
			}else{
				year -= 90;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3b5a      	subs	r3, #90	; 0x5a
 8003e4c:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 9){
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7c1b      	ldrb	r3, [r3, #16]
 8003e52:	2b09      	cmp	r3, #9
 8003e54:	d117      	bne.n	8003e86 <_ZN12DateSettings6UpdateEv+0x462>
			if((year - (year/10)*10) < 9){
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	4908      	ldr	r1, [pc, #32]	; (8003e7c <_ZN12DateSettings6UpdateEv+0x458>)
 8003e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e60:	08db      	lsrs	r3, r3, #3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	4619      	mov	r1, r3
 8003e66:	f06f 0309 	mvn.w	r3, #9
 8003e6a:	fb03 f301 	mul.w	r3, r3, r1
 8003e6e:	4413      	add	r3, r2
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	dc05      	bgt.n	8003e80 <_ZN12DateSettings6UpdateEv+0x45c>
				year +=1;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	3301      	adds	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	e004      	b.n	8003e86 <_ZN12DateSettings6UpdateEv+0x462>
 8003e7c:	cccccccd 	.word	0xcccccccd
			}else{
				year -= 9;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3b09      	subs	r3, #9
 8003e84:	73fb      	strb	r3, [r7, #15]
			}
		}



		model->setYear(year);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd ff38 	bl	8001d04 <_ZN5Model7setYearEh>
		model->setMonth(month);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	7bba      	ldrb	r2, [r7, #14]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fd fedb 	bl	8001c58 <_ZN5Model8setMonthEh>
		model->setDay(day);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	7b7a      	ldrb	r2, [r7, #13]
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fe39 	bl	8001b22 <_ZN5Model6setDayEh>
		lcd->Write(line1,5,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685c      	ldr	r4, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68dd      	ldr	r5, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fd ff14 	bl	8001cea <_ZNK5Model7getYearEv>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461e      	mov	r6, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fd feb7 	bl	8001c3e <_ZNK5Model8getMonthEv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fd fe15 	bl	8001b08 <_ZNK5Model6getDayEv>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	4631      	mov	r1, r6
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f000 f89d 	bl	8004024 <_ZN12DateSettings15DateToCharArrayEhhh>
 8003eea:	4602      	mov	r2, r0
 8003eec:	2302      	movs	r3, #2
 8003eee:	9302      	str	r3, [sp, #8]
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	9200      	str	r2, [sp, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	2205      	movs	r2, #5
 8003efa:	4629      	mov	r1, r5
 8003efc:	4620      	mov	r0, r4
 8003efe:	f7fd fa7a 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+2, 2,true);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6858      	ldr	r0, [r3, #4]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7c1b      	ldrb	r3, [r3, #16]
 8003f0a:	3302      	adds	r3, #2
 8003f0c:	b2d9      	uxtb	r1, r3
 8003f0e:	2301      	movs	r3, #1
 8003f10:	2202      	movs	r2, #2
 8003f12:	f7fd fad5 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd ff65 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd ff36 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <_ZN12DateSettings6UpdateEv+0x51a>
		model->setT2Long(false);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd ff3a 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd ff7f 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <_ZN12DateSettings6UpdateEv+0x536>
		model->setT3Short(false);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2100      	movs	r1, #0
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd ff83 	bl	8001e60 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd ff54 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <_ZN12DateSettings6UpdateEv+0x552>
		model->setT3Long(false);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fd ff58 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fd ff9d 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d005      	beq.n	8003f92 <_ZN12DateSettings6UpdateEv+0x56e>
		model->setT4Short(false);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd ffa1 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd ff72 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <_ZN12DateSettings6UpdateEv+0x58a>
		model->setT4Long(false);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fd ff76 	bl	8001e9a <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fd ffbb 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <_ZN12DateSettings6UpdateEv+0x5be>
		screen = Model::E_KONTRAST_SETTINGS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe f91d 	bl	800220a <_ZN5Model16setOverrideClockEb>
		init = false;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	745a      	strb	r2, [r3, #17]
		model->setT5Short(false);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fd ffb3 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd ff84 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d011      	beq.n	8004016 <_ZN12DateSettings6UpdateEv+0x5f2>
		//Speichern ToDo
		screen = Model::E_MAIN_SCRREN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	721a      	strb	r2, [r3, #8]
		model->setOverrideClock(true);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe f903 	bl	800220a <_ZN5Model16setOverrideClockEb>
		init = false;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	745a      	strb	r2, [r3, #17]
		model->setT5Long(false);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f7fd ff7c 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}


	return screen;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7a1b      	ldrb	r3, [r3, #8]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004024 <_ZN12DateSettings15DateToCharArrayEhhh>:


char* DateSettings::DateToCharArray(uint8_t year, uint8_t month, uint8_t day){
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4603      	mov	r3, r0
 8004034:	70fb      	strb	r3, [r7, #3]
 8004036:	460b      	mov	r3, r1
 8004038:	70bb      	strb	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	707b      	strb	r3, [r7, #1]
	static char result[10];
	result[0] = day/10 + 0x30;
 800403e:	787b      	ldrb	r3, [r7, #1]
 8004040:	4a35      	ldr	r2, [pc, #212]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	3330      	adds	r3, #48	; 0x30
 800404c:	b2da      	uxtb	r2, r3
 800404e:	4b33      	ldr	r3, [pc, #204]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004050:	701a      	strb	r2, [r3, #0]
	result[1] = day - (day/10)*10 + 0x30;
 8004052:	787b      	ldrb	r3, [r7, #1]
 8004054:	4a30      	ldr	r2, [pc, #192]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	0152      	lsls	r2, r2, #5
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	0092      	lsls	r2, r2, #2
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	b2da      	uxtb	r2, r3
 800406c:	787b      	ldrb	r3, [r7, #1]
 800406e:	4413      	add	r3, r2
 8004070:	b2db      	uxtb	r3, r3
 8004072:	3330      	adds	r3, #48	; 0x30
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004078:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 800407c:	222e      	movs	r2, #46	; 0x2e
 800407e:	709a      	strb	r2, [r3, #2]
	result[3] = month/10 + 0x30;
 8004080:	78bb      	ldrb	r3, [r7, #2]
 8004082:	4a25      	ldr	r2, [pc, #148]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004084:	fba2 2303 	umull	r2, r3, r2, r3
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	b2db      	uxtb	r3, r3
 800408c:	3330      	adds	r3, #48	; 0x30
 800408e:	b2da      	uxtb	r2, r3
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004092:	70da      	strb	r2, [r3, #3]
	result[4] = month - (month/10)*10 + 0x30;
 8004094:	78bb      	ldrb	r3, [r7, #2]
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	08db      	lsrs	r3, r3, #3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	0152      	lsls	r2, r2, #5
 80040a4:	1ad2      	subs	r2, r2, r3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	78bb      	ldrb	r3, [r7, #2]
 80040b0:	4413      	add	r3, r2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3330      	adds	r3, #48	; 0x30
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80040ba:	711a      	strb	r2, [r3, #4]
	result[5] = '.';
 80040bc:	4b17      	ldr	r3, [pc, #92]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80040be:	222e      	movs	r2, #46	; 0x2e
 80040c0:	715a      	strb	r2, [r3, #5]
	result[6] = '2';
 80040c2:	4b16      	ldr	r3, [pc, #88]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80040c4:	2232      	movs	r2, #50	; 0x32
 80040c6:	719a      	strb	r2, [r3, #6]
	result[7] = '0';
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80040ca:	2230      	movs	r2, #48	; 0x30
 80040cc:	71da      	strb	r2, [r3, #7]
	result[8] = year/10 + 0x30;
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	4a11      	ldr	r2, [pc, #68]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80040d2:	fba2 2303 	umull	r2, r3, r2, r3
 80040d6:	08db      	lsrs	r3, r3, #3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3330      	adds	r3, #48	; 0x30
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80040e0:	721a      	strb	r2, [r3, #8]
	result[9] = year - (year/10)*10 + 0x30;
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	08db      	lsrs	r3, r3, #3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	0152      	lsls	r2, r2, #5
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4413      	add	r3, r2
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3330      	adds	r3, #48	; 0x30
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004108:	725a      	strb	r2, [r3, #9]
	return result;
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	cccccccd 	.word	0xcccccccd
 800411c:	20000340 	.word	0x20000340

08004120 <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) {
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4a07      	ldr	r2, [pc, #28]	; (800414c <_ZN12TimeSettingsC1EP5ModelP3LCD+0x2c>)
 8004130:	60da      	str	r2, [r3, #12]
	this->model = model;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	605a      	str	r2, [r3, #4]
}
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	0800d160 	.word	0x0800d160

08004150 <_ZN12TimeSettings6UpdateEv>:




Model::ESCREEN TimeSettings::Update(){
 8004150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af04      	add	r7, sp, #16
 8004158:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME_SETTINGS;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2205      	movs	r2, #5
 800415e:	721a      	strb	r2, [r3, #8]

	if(!init){
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7a9b      	ldrb	r3, [r3, #10]
 8004164:	f083 0301 	eor.w	r3, r3, #1
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d038      	beq.n	80041e0 <_ZN12TimeSettings6UpdateEv+0x90>
		position = 0;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685c      	ldr	r4, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68dd      	ldr	r5, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fd fcee 	bl	8001b62 <_ZNK5Model7getHourEv>
 8004186:	4603      	mov	r3, r0
 8004188:	461e      	mov	r6, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fd38 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 8004194:	4603      	mov	r3, r0
 8004196:	4698      	mov	r8, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd fd6b 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	4631      	mov	r1, r6
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f9e3 	bl	8004574 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 80041ae:	4602      	mov	r2, r0
 80041b0:	2304      	movs	r3, #4
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	2308      	movs	r3, #8
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	2300      	movs	r3, #0
 80041bc:	2204      	movs	r2, #4
 80041be:	4629      	mov	r1, r5
 80041c0:	4620      	mov	r0, r4
 80041c2:	f7fd f918 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2,true);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6858      	ldr	r0, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	7a5b      	ldrb	r3, [r3, #9]
 80041ce:	3304      	adds	r3, #4
 80041d0:	b2d9      	uxtb	r1, r3
 80041d2:	2301      	movs	r3, #1
 80041d4:	2202      	movs	r2, #2
 80041d6:	f7fd f973 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	729a      	strb	r2, [r3, #10]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fd fdba 	bl	8001d5e <_ZNK5Model9isT1ShortEv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d02b      	beq.n	8004248 <_ZN12TimeSettings6UpdateEv+0xf8>
		//Change position
		if(position >= 7){
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	7a5b      	ldrb	r3, [r3, #9]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d903      	bls.n	8004200 <_ZN12TimeSettings6UpdateEv+0xb0>
			position = 0;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	725a      	strb	r2, [r3, #9]
 80041fe:	e013      	b.n	8004228 <_ZN12TimeSettings6UpdateEv+0xd8>
		}else{
			position++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7a5b      	ldrb	r3, [r3, #9]
 8004204:	3301      	adds	r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	725a      	strb	r2, [r3, #9]
			if(position == 2 || position == 5){
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7a5b      	ldrb	r3, [r3, #9]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d003      	beq.n	800421c <_ZN12TimeSettings6UpdateEv+0xcc>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	7a5b      	ldrb	r3, [r3, #9]
 8004218:	2b05      	cmp	r3, #5
 800421a:	d105      	bne.n	8004228 <_ZN12TimeSettings6UpdateEv+0xd8>
				position++;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	7a5b      	ldrb	r3, [r3, #9]
 8004220:	3301      	adds	r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	725a      	strb	r2, [r3, #9]
			}
		}
		lcd->SetCursorPosition(position+4, 2, true);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6858      	ldr	r0, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	7a5b      	ldrb	r3, [r3, #9]
 8004230:	3304      	adds	r3, #4
 8004232:	b2d9      	uxtb	r1, r3
 8004234:	2301      	movs	r3, #1
 8004236:	2202      	movs	r2, #2
 8004238:	f7fd f942 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2100      	movs	r1, #0
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd fd98 	bl	8001d78 <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fd fd69 	bl	8001d24 <_ZNK5Model8isT1LongEv>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d005      	beq.n	8004264 <_ZN12TimeSettings6UpdateEv+0x114>
		model->setT1Long(false);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2100      	movs	r1, #0
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd fd6d 	bl	8001d3e <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7fd fdb2 	bl	8001dd2 <_ZNK5Model9isT2ShortEv>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 80fc 	beq.w	800446e <_ZN12TimeSettings6UpdateEv+0x31e>
		uint8_t hour = model->getHour();
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f7fd fc71 	bl	8001b62 <_ZNK5Model7getHourEv>
 8004280:	4603      	mov	r3, r0
 8004282:	73fb      	strb	r3, [r7, #15]
		uint8_t minute = model->getMinute();
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd fcbb 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 800428e:	4603      	mov	r3, r0
 8004290:	73bb      	strb	r3, [r7, #14]
		uint8_t seconds = model->getSeconds();
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fcee 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 800429c:	4603      	mov	r3, r0
 800429e:	737b      	strb	r3, [r7, #13]

		if(position == 0){
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	7a5b      	ldrb	r3, [r3, #9]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d110      	bne.n	80042ca <_ZN12TimeSettings6UpdateEv+0x17a>
			if(hour < 13){
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b0c      	cmp	r3, #12
 80042ac:	d803      	bhi.n	80042b6 <_ZN12TimeSettings6UpdateEv+0x166>
				hour += 10;
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	330a      	adds	r3, #10
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e009      	b.n	80042ca <_ZN12TimeSettings6UpdateEv+0x17a>
			}else if(hour <= 19){
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b13      	cmp	r3, #19
 80042ba:	d803      	bhi.n	80042c4 <_ZN12TimeSettings6UpdateEv+0x174>
				hour -= 10;
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3b0a      	subs	r3, #10
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	e002      	b.n	80042ca <_ZN12TimeSettings6UpdateEv+0x17a>
			}else{
				hour -= 20;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	3b14      	subs	r3, #20
 80042c8:	73fb      	strb	r3, [r7, #15]
			}
		}

		if(position == 1){
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	7a5b      	ldrb	r3, [r3, #9]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d12f      	bne.n	8004332 <_ZN12TimeSettings6UpdateEv+0x1e2>
			if(hour < 20){
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b13      	cmp	r3, #19
 80042d6:	d816      	bhi.n	8004306 <_ZN12TimeSettings6UpdateEv+0x1b6>
				if(hour - (hour/10)*10 < 9){
 80042d8:	7bfa      	ldrb	r2, [r7, #15]
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	49a4      	ldr	r1, [pc, #656]	; (8004570 <_ZN12TimeSettings6UpdateEv+0x420>)
 80042de:	fba1 1303 	umull	r1, r3, r1, r3
 80042e2:	08db      	lsrs	r3, r3, #3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	4619      	mov	r1, r3
 80042e8:	f06f 0309 	mvn.w	r3, #9
 80042ec:	fb03 f301 	mul.w	r3, r3, r1
 80042f0:	4413      	add	r3, r2
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	dc03      	bgt.n	80042fe <_ZN12TimeSettings6UpdateEv+0x1ae>
					hour+=1;
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	3301      	adds	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e019      	b.n	8004332 <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=9;
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	3b09      	subs	r3, #9
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e015      	b.n	8004332 <_ZN12TimeSettings6UpdateEv+0x1e2>
				}
			}else{
				if(hour - (hour/10)*10 < 3){
 8004306:	7bfa      	ldrb	r2, [r7, #15]
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	4999      	ldr	r1, [pc, #612]	; (8004570 <_ZN12TimeSettings6UpdateEv+0x420>)
 800430c:	fba1 1303 	umull	r1, r3, r1, r3
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	4619      	mov	r1, r3
 8004316:	f06f 0309 	mvn.w	r3, #9
 800431a:	fb03 f301 	mul.w	r3, r3, r1
 800431e:	4413      	add	r3, r2
 8004320:	2b02      	cmp	r3, #2
 8004322:	dc03      	bgt.n	800432c <_ZN12TimeSettings6UpdateEv+0x1dc>
					hour+=1;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	e002      	b.n	8004332 <_ZN12TimeSettings6UpdateEv+0x1e2>
				}else{
					hour-=3;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	3b03      	subs	r3, #3
 8004330:	73fb      	strb	r3, [r7, #15]
			}
		}



		if(position == 3){
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7a5b      	ldrb	r3, [r3, #9]
 8004336:	2b03      	cmp	r3, #3
 8004338:	d109      	bne.n	800434e <_ZN12TimeSettings6UpdateEv+0x1fe>
			if(minute < 50){
 800433a:	7bbb      	ldrb	r3, [r7, #14]
 800433c:	2b31      	cmp	r3, #49	; 0x31
 800433e:	d803      	bhi.n	8004348 <_ZN12TimeSettings6UpdateEv+0x1f8>
				minute += 10;
 8004340:	7bbb      	ldrb	r3, [r7, #14]
 8004342:	330a      	adds	r3, #10
 8004344:	73bb      	strb	r3, [r7, #14]
 8004346:	e002      	b.n	800434e <_ZN12TimeSettings6UpdateEv+0x1fe>
			}else{
				minute -= 50;
 8004348:	7bbb      	ldrb	r3, [r7, #14]
 800434a:	3b32      	subs	r3, #50	; 0x32
 800434c:	73bb      	strb	r3, [r7, #14]
			}
		}

		if(position == 4){
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7a5b      	ldrb	r3, [r3, #9]
 8004352:	2b04      	cmp	r3, #4
 8004354:	d115      	bne.n	8004382 <_ZN12TimeSettings6UpdateEv+0x232>
				if(minute - (minute/10)*10 < 9){
 8004356:	7bba      	ldrb	r2, [r7, #14]
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	4985      	ldr	r1, [pc, #532]	; (8004570 <_ZN12TimeSettings6UpdateEv+0x420>)
 800435c:	fba1 1303 	umull	r1, r3, r1, r3
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	b2db      	uxtb	r3, r3
 8004364:	4619      	mov	r1, r3
 8004366:	f06f 0309 	mvn.w	r3, #9
 800436a:	fb03 f301 	mul.w	r3, r3, r1
 800436e:	4413      	add	r3, r2
 8004370:	2b08      	cmp	r3, #8
 8004372:	dc03      	bgt.n	800437c <_ZN12TimeSettings6UpdateEv+0x22c>
					minute+=1;
 8004374:	7bbb      	ldrb	r3, [r7, #14]
 8004376:	3301      	adds	r3, #1
 8004378:	73bb      	strb	r3, [r7, #14]
 800437a:	e002      	b.n	8004382 <_ZN12TimeSettings6UpdateEv+0x232>
				}else{
					minute-=9;
 800437c:	7bbb      	ldrb	r3, [r7, #14]
 800437e:	3b09      	subs	r3, #9
 8004380:	73bb      	strb	r3, [r7, #14]
				}
		}


		if(position == 6){
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	7a5b      	ldrb	r3, [r3, #9]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d109      	bne.n	800439e <_ZN12TimeSettings6UpdateEv+0x24e>
			if(seconds < 50){
 800438a:	7b7b      	ldrb	r3, [r7, #13]
 800438c:	2b31      	cmp	r3, #49	; 0x31
 800438e:	d803      	bhi.n	8004398 <_ZN12TimeSettings6UpdateEv+0x248>
				seconds += 10;
 8004390:	7b7b      	ldrb	r3, [r7, #13]
 8004392:	330a      	adds	r3, #10
 8004394:	737b      	strb	r3, [r7, #13]
 8004396:	e002      	b.n	800439e <_ZN12TimeSettings6UpdateEv+0x24e>
			}else{
				seconds -= 50;
 8004398:	7b7b      	ldrb	r3, [r7, #13]
 800439a:	3b32      	subs	r3, #50	; 0x32
 800439c:	737b      	strb	r3, [r7, #13]
			}
		}

		if(position == 7){
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7a5b      	ldrb	r3, [r3, #9]
 80043a2:	2b07      	cmp	r3, #7
 80043a4:	d115      	bne.n	80043d2 <_ZN12TimeSettings6UpdateEv+0x282>
				if(seconds - (seconds/10)*10 < 9){
 80043a6:	7b7a      	ldrb	r2, [r7, #13]
 80043a8:	7b7b      	ldrb	r3, [r7, #13]
 80043aa:	4971      	ldr	r1, [pc, #452]	; (8004570 <_ZN12TimeSettings6UpdateEv+0x420>)
 80043ac:	fba1 1303 	umull	r1, r3, r1, r3
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	f06f 0309 	mvn.w	r3, #9
 80043ba:	fb03 f301 	mul.w	r3, r3, r1
 80043be:	4413      	add	r3, r2
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	dc03      	bgt.n	80043cc <_ZN12TimeSettings6UpdateEv+0x27c>
					seconds+=1;
 80043c4:	7b7b      	ldrb	r3, [r7, #13]
 80043c6:	3301      	adds	r3, #1
 80043c8:	737b      	strb	r3, [r7, #13]
 80043ca:	e002      	b.n	80043d2 <_ZN12TimeSettings6UpdateEv+0x282>
				}else{
					seconds-=9;
 80043cc:	7b7b      	ldrb	r3, [r7, #13]
 80043ce:	3b09      	subs	r3, #9
 80043d0:	737b      	strb	r3, [r7, #13]
				}
		}


		model->setHour(hour);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd fbce 	bl	8001b7c <_ZN5Model7setHourEh>
		model->setMinute(minute);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	7bba      	ldrb	r2, [r7, #14]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fc18 	bl	8001c1e <_ZN5Model9setMinuteEh>
		model->setSeconds(seconds);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	7b7a      	ldrb	r2, [r7, #13]
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fd fc4b 	bl	8001c92 <_ZN5Model10setSecondsEh>
		lcd->Write(line1,4,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685c      	ldr	r4, [r3, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68dd      	ldr	r5, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd fbaa 	bl	8001b62 <_ZNK5Model7getHourEv>
 800440e:	4603      	mov	r3, r0
 8004410:	461e      	mov	r6, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fbf4 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 800441c:	4603      	mov	r3, r0
 800441e:	4698      	mov	r8, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd fc27 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 800442a:	4603      	mov	r3, r0
 800442c:	4642      	mov	r2, r8
 800442e:	4631      	mov	r1, r6
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f89f 	bl	8004574 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004436:	4602      	mov	r2, r0
 8004438:	2304      	movs	r3, #4
 800443a:	9302      	str	r3, [sp, #8]
 800443c:	2308      	movs	r3, #8
 800443e:	9301      	str	r3, [sp, #4]
 8004440:	9200      	str	r2, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	2204      	movs	r2, #4
 8004446:	4629      	mov	r1, r5
 8004448:	4620      	mov	r0, r4
 800444a:	f7fc ffd4 	bl	80013f6 <_ZN3LCD5WriteEPKchhPchh>
		lcd->SetCursorPosition(position+4, 2, true);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6858      	ldr	r0, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7a5b      	ldrb	r3, [r3, #9]
 8004456:	3304      	adds	r3, #4
 8004458:	b2d9      	uxtb	r1, r3
 800445a:	2301      	movs	r3, #1
 800445c:	2202      	movs	r2, #2
 800445e:	f7fd f82f 	bl	80014c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2100      	movs	r1, #0
 8004468:	4618      	mov	r0, r3
 800446a:	f7fd fcbf 	bl	8001dec <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fc90 	bl	8001d98 <_ZNK5Model8isT2LongEv>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d005      	beq.n	800448a <_ZN12TimeSettings6UpdateEv+0x33a>
		model->setT2Long(false);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd fc94 	bl	8001db2 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fd fcd9 	bl	8001e46 <_ZNK5Model9isT3ShortEv>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <_ZN12TimeSettings6UpdateEv+0x356>
		model->setT3Short(false);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd fcdd 	bl	8001e60 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fd fcae 	bl	8001e0c <_ZNK5Model8isT3LongEv>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <_ZN12TimeSettings6UpdateEv+0x372>
		model->setT3Long(false);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd fcb2 	bl	8001e26 <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fcf7 	bl	8001eba <_ZNK5Model9isT4ShortEv>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <_ZN12TimeSettings6UpdateEv+0x38e>
		model->setT4Short(false);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fd fcfb 	bl	8001ed4 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fd fccc 	bl	8001e80 <_ZNK5Model8isT4LongEv>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <_ZN12TimeSettings6UpdateEv+0x3aa>
		model->setT4Long(false);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fd fcd0 	bl	8001e9a <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fd15 	bl	8001f2e <_ZNK5Model9isT5ShortEv>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <_ZN12TimeSettings6UpdateEv+0x3de>
		screen = Model::E_DATE_SETTINGS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2206      	movs	r2, #6
 800450e:	721a      	strb	r2, [r3, #8]
		init = false;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2101      	movs	r1, #1
 800451c:	4618      	mov	r0, r3
 800451e:	f7fd fe74 	bl	800220a <_ZN5Model16setOverrideClockEb>
		model->setT5Short(false);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2100      	movs	r1, #0
 8004528:	4618      	mov	r0, r3
 800452a:	f7fd fd0d 	bl	8001f48 <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fd fcde 	bl	8001ef4 <_ZNK5Model8isT5LongEv>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d011      	beq.n	8004562 <_ZN12TimeSettings6UpdateEv+0x412>
		screen = Model::E_MAIN_SCRREN;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	721a      	strb	r2, [r3, #8]
		init = false;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	729a      	strb	r2, [r3, #10]
		model->setOverrideClock(true);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2101      	movs	r1, #1
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fe5a 	bl	800220a <_ZN5Model16setOverrideClockEb>
		model->setT5Long(false);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f7fd fcd6 	bl	8001f0e <_ZN5Model9setT5LongEb>
	}


	return screen;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7a1b      	ldrb	r3, [r3, #8]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004570:	cccccccd 	.word	0xcccccccd

08004574 <_ZN12TimeSettings15TimeToCharArrayEhhh>:




char* TimeSettings::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	70fb      	strb	r3, [r7, #3]
 8004586:	460b      	mov	r3, r1
 8004588:	70bb      	strb	r3, [r7, #2]
 800458a:	4613      	mov	r3, r2
 800458c:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	4a32      	ldr	r2, [pc, #200]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3330      	adds	r3, #48	; 0x30
 800459c:	b2da      	uxtb	r2, r3
 800459e:	4b30      	ldr	r3, [pc, #192]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80045a0:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80045a6:	fba2 2303 	umull	r2, r3, r2, r3
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	0152      	lsls	r2, r2, #5
 80045b2:	1ad2      	subs	r2, r2, r3
 80045b4:	0092      	lsls	r2, r2, #2
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	4413      	add	r3, r2
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	3330      	adds	r3, #48	; 0x30
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	4b26      	ldr	r3, [pc, #152]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80045c8:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80045cc:	223a      	movs	r2, #58	; 0x3a
 80045ce:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 80045d0:	78bb      	ldrb	r3, [r7, #2]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	08db      	lsrs	r3, r3, #3
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	3330      	adds	r3, #48	; 0x30
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80045e2:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 80045e4:	78bb      	ldrb	r3, [r7, #2]
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	0152      	lsls	r2, r2, #5
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	0092      	lsls	r2, r2, #2
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	78bb      	ldrb	r3, [r7, #2]
 8004600:	4413      	add	r3, r2
 8004602:	b2db      	uxtb	r3, r3
 8004604:	3330      	adds	r3, #48	; 0x30
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b15      	ldr	r3, [pc, #84]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800460a:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 800460c:	4b14      	ldr	r3, [pc, #80]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800460e:	223a      	movs	r2, #58	; 0x3a
 8004610:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 8004612:	787b      	ldrb	r3, [r7, #1]
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004616:	fba2 2303 	umull	r2, r3, r2, r3
 800461a:	08db      	lsrs	r3, r3, #3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	3330      	adds	r3, #48	; 0x30
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004624:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 8004626:	787b      	ldrb	r3, [r7, #1]
 8004628:	4a0c      	ldr	r2, [pc, #48]	; (800465c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	b2db      	uxtb	r3, r3
 8004632:	461a      	mov	r2, r3
 8004634:	0152      	lsls	r2, r2, #5
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	0092      	lsls	r2, r2, #2
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	b2da      	uxtb	r2, r3
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	4413      	add	r3, r2
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3330      	adds	r3, #48	; 0x30
 8004648:	b2da      	uxtb	r2, r3
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800464c:	71da      	strb	r2, [r3, #7]
	return result;
 800464e:	4b04      	ldr	r3, [pc, #16]	; (8004660 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	2000034c 	.word	0x2000034c

08004664 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>:
 */

#include "Time.h"


Time::Time(Model *model, I2C_HandleTypeDef *hi2c) {
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	this->model = model;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	601a      	str	r2, [r3, #0]
	this->hi2c = hi2c;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	605a      	str	r2, [r3, #4]

}
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_ZN4Time7SetTimeEv>:

void Time::SetTime() {
 800468a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800468e:	b087      	sub	sp, #28
 8004690:	af04      	add	r7, sp, #16
 8004692:	6078      	str	r0, [r7, #4]

	SetTime(model->getYear(),model->getMonth(),model->getDay(),model->getHour(),model->getMinute(),model->getSeconds());
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7fd fb26 	bl	8001cea <_ZNK5Model7getYearEv>
 800469e:	4603      	mov	r3, r0
 80046a0:	461e      	mov	r6, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fac9 	bl	8001c3e <_ZNK5Model8getMonthEv>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4698      	mov	r8, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fd fa27 	bl	8001b08 <_ZNK5Model6getDayEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4699      	mov	r9, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fd fa4d 	bl	8001b62 <_ZNK5Model7getHourEv>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461c      	mov	r4, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fd fa97 	bl	8001c04 <_ZNK5Model9getMinuteEv>
 80046d6:	4603      	mov	r3, r0
 80046d8:	461d      	mov	r5, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fd faca 	bl	8001c78 <_ZNK5Model10getSecondsEv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	9501      	str	r5, [sp, #4]
 80046ea:	9400      	str	r4, [sp, #0]
 80046ec:	464b      	mov	r3, r9
 80046ee:	4642      	mov	r2, r8
 80046f0:	4631      	mov	r1, r6
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f805 	bl	8004702 <_ZN4Time7SetTimeEhhhhhh>

}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004702 <_ZN4Time7SetTimeEhhhhhh>:
void Time::InitTimer() {

}


void Time::SetTime(uint8_t year, uint8_t month, uint8_t day, uint8_t hour,uint8_t minute, uint8_t seconds) {
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af02      	add	r7, sp, #8
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	4608      	mov	r0, r1
 800470c:	4611      	mov	r1, r2
 800470e:	461a      	mov	r2, r3
 8004710:	4603      	mov	r3, r0
 8004712:	70fb      	strb	r3, [r7, #3]
 8004714:	460b      	mov	r3, r1
 8004716:	70bb      	strb	r3, [r7, #2]
 8004718:	4613      	mov	r3, r2
 800471a:	707b      	strb	r3, [r7, #1]

	uint8_t txData[8];

	txData[0] = 0x02;
 800471c:	2302      	movs	r3, #2
 800471e:	723b      	strb	r3, [r7, #8]
	txData[1] = Tools::BCDEncoder(seconds);
 8004720:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004724:	4618      	mov	r0, r3
 8004726:	f7fd fed3 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 800472a:	4603      	mov	r3, r0
 800472c:	727b      	strb	r3, [r7, #9]
	txData[2] = Tools::BCDEncoder(minute);
 800472e:	7f3b      	ldrb	r3, [r7, #28]
 8004730:	4618      	mov	r0, r3
 8004732:	f7fd fecd 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 8004736:	4603      	mov	r3, r0
 8004738:	72bb      	strb	r3, [r7, #10]
	txData[3] = Tools::BCDEncoder(hour);
 800473a:	7e3b      	ldrb	r3, [r7, #24]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fd fec7 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 8004742:	4603      	mov	r3, r0
 8004744:	72fb      	strb	r3, [r7, #11]
	txData[4] = Tools::BCDEncoder(day);
 8004746:	787b      	ldrb	r3, [r7, #1]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fd fec1 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 800474e:	4603      	mov	r3, r0
 8004750:	733b      	strb	r3, [r7, #12]
	txData[5] = 0x01;
 8004752:	2301      	movs	r3, #1
 8004754:	737b      	strb	r3, [r7, #13]
	txData[6] = Tools::BCDEncoder(month);
 8004756:	78bb      	ldrb	r3, [r7, #2]
 8004758:	4618      	mov	r0, r3
 800475a:	f7fd feb9 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 800475e:	4603      	mov	r3, r0
 8004760:	73bb      	strb	r3, [r7, #14]
	txData[7] = Tools::BCDEncoder(year);
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	4618      	mov	r0, r3
 8004766:	f7fd feb3 	bl	80024d0 <_ZN5Tools10BCDEncoderEh>
 800476a:	4603      	mov	r3, r0
 800476c:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(hi2c, TIME_ADDR<<1, txData, sizeof(txData)/sizeof(txData[0]), I2C_TIMEOUT);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6858      	ldr	r0, [r3, #4]
 8004772:	f107 0208 	add.w	r2, r7, #8
 8004776:	2364      	movs	r3, #100	; 0x64
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2308      	movs	r3, #8
 800477c:	21a2      	movs	r1, #162	; 0xa2
 800477e:	f000 fc85 	bl	800508c <HAL_I2C_Master_Transmit>

}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <_ZN4Time10UpdateTimeEv>:


void Time::UpdateTime(){
 800478a:	b590      	push	{r4, r7, lr}
 800478c:	b089      	sub	sp, #36	; 0x24
 800478e:	af02      	add	r7, sp, #8
 8004790:	6078      	str	r0, [r7, #4]
	uint8_t rxData[7];
	uint8_t txData[1];
	txData[0] = 0x02;
 8004792:	2302      	movs	r3, #2
 8004794:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(hi2c,TIME_ADDR<<1 ,txData , 1, 100);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6858      	ldr	r0, [r3, #4]
 800479a:	f107 020c 	add.w	r2, r7, #12
 800479e:	2364      	movs	r3, #100	; 0x64
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2301      	movs	r3, #1
 80047a4:	21a2      	movs	r1, #162	; 0xa2
 80047a6:	f000 fc71 	bl	800508c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(hi2c, TIME_ADDR<<1, rxData, 7, 100);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6858      	ldr	r0, [r3, #4]
 80047ae:	f107 0210 	add.w	r2, r7, #16
 80047b2:	2364      	movs	r3, #100	; 0x64
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	2307      	movs	r3, #7
 80047b8:	21a2      	movs	r1, #162	; 0xa2
 80047ba:	f000 fd5b 	bl	8005274 <HAL_I2C_Master_Receive>

	model->setSeconds(Tools::BCDDecoder((rxData[0])&0x7F));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681c      	ldr	r4, [r3, #0]
 80047c2:	7c3b      	ldrb	r3, [r7, #16]
 80047c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fe64 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4619      	mov	r1, r3
 80047d4:	4620      	mov	r0, r4
 80047d6:	f7fd fa5c 	bl	8001c92 <_ZN5Model10setSecondsEh>
	model->setMinute(Tools::BCDDecoder((rxData[1])&0x7F));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681c      	ldr	r4, [r3, #0]
 80047de:	7c7b      	ldrb	r3, [r7, #17]
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fe56 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4619      	mov	r1, r3
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7fd fa14 	bl	8001c1e <_ZN5Model9setMinuteEh>
	model->setHour(Tools::BCDDecoder((rxData[2])&0x3F));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681c      	ldr	r4, [r3, #0]
 80047fa:	7cbb      	ldrb	r3, [r7, #18]
 80047fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4618      	mov	r0, r3
 8004804:	f7fd fe48 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 8004808:	4603      	mov	r3, r0
 800480a:	4619      	mov	r1, r3
 800480c:	4620      	mov	r0, r4
 800480e:	f7fd f9b5 	bl	8001b7c <_ZN5Model7setHourEh>
	model->setDay(Tools::BCDDecoder((rxData[3])&0x3F));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681c      	ldr	r4, [r3, #0]
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	b2db      	uxtb	r3, r3
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd fe3a 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	4620      	mov	r0, r4
 800482a:	f7fd f97a 	bl	8001b22 <_ZN5Model6setDayEh>
	model->setDayOfWeek(Tools::BCDDecoder((rxData[4])&0x03));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681c      	ldr	r4, [r3, #0]
 8004832:	7d3b      	ldrb	r3, [r7, #20]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4618      	mov	r0, r3
 800483c:	f7fd fe2c 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 8004840:	4603      	mov	r3, r0
 8004842:	4619      	mov	r1, r3
 8004844:	4620      	mov	r0, r4
 8004846:	f7fd f97c 	bl	8001b42 <_ZN5Model12setDayOfWeekEh>
	model->setMonth(Tools::BCDDecoder((rxData[5])&0x1F));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681c      	ldr	r4, [r3, #0]
 800484e:	7d7b      	ldrb	r3, [r7, #21]
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fe1e 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 800485c:	4603      	mov	r3, r0
 800485e:	4619      	mov	r1, r3
 8004860:	4620      	mov	r0, r4
 8004862:	f7fd f9f9 	bl	8001c58 <_ZN5Model8setMonthEh>
	model->setYear(Tools::BCDDecoder((rxData[6])&0xFF));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681c      	ldr	r4, [r3, #0]
 800486a:	7dbb      	ldrb	r3, [r7, #22]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fd fe13 	bl	8002498 <_ZN5Tools10BCDDecoderEh>
 8004872:	4603      	mov	r3, r0
 8004874:	4619      	mov	r1, r3
 8004876:	4620      	mov	r0, r4
 8004878:	f7fd fa44 	bl	8001d04 <_ZN5Model7setYearEh>
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}

08004884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004888:	f7fc fa34 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800488c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800488e:	e003      	b.n	8004898 <LoopCopyDataInit>

08004890 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004892:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004894:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004896:	3104      	adds	r1, #4

08004898 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004898:	480a      	ldr	r0, [pc, #40]	; (80048c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800489a:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800489c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800489e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048a0:	d3f6      	bcc.n	8004890 <CopyDataInit>
	ldr	r2, =_sbss
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80048a4:	e002      	b.n	80048ac <LoopFillZerobss>

080048a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80048a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80048a8:	f842 3b04 	str.w	r3, [r2], #4

080048ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80048ac:	4b08      	ldr	r3, [pc, #32]	; (80048d0 <LoopForever+0x16>)
	cmp	r2, r3
 80048ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80048b0:	d3f9      	bcc.n	80048a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048b2:	f008 faf3 	bl	800ce9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048b6:	f7fc f859 	bl	800096c <main>

080048ba <LoopForever>:

LoopForever:
    b LoopForever
 80048ba:	e7fe      	b.n	80048ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80048bc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80048c0:	0800d204 	.word	0x0800d204
	ldr	r0, =_sdata
 80048c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048c8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80048cc:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80048d0:	20000fb0 	.word	0x20000fb0

080048d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048d4:	e7fe      	b.n	80048d4 <ADC1_2_IRQHandler>

080048d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b082      	sub	sp, #8
 80048da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048e0:	2003      	movs	r0, #3
 80048e2:	f000 f95f 	bl	8004ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048e6:	2000      	movs	r0, #0
 80048e8:	f000 f80e 	bl	8004908 <HAL_InitTick>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	71fb      	strb	r3, [r7, #7]
 80048f6:	e001      	b.n	80048fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80048f8:	f7fc f93e 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80048fc:	79fb      	ldrb	r3, [r7, #7]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004914:	4b17      	ldr	r3, [pc, #92]	; (8004974 <HAL_InitTick+0x6c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d023      	beq.n	8004964 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800491c:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_InitTick+0x70>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_InitTick+0x6c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4619      	mov	r1, r3
 8004926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800492a:	fbb3 f3f1 	udiv	r3, r3, r1
 800492e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f96b 	bl	8004c0e <HAL_SYSTICK_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b0f      	cmp	r3, #15
 8004942:	d809      	bhi.n	8004958 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004944:	2200      	movs	r2, #0
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	f04f 30ff 	mov.w	r0, #4294967295
 800494c:	f000 f935 	bl	8004bba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004950:	4a0a      	ldr	r2, [pc, #40]	; (800497c <HAL_InitTick+0x74>)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e007      	b.n	8004968 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	e004      	b.n	8004968 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	73fb      	strb	r3, [r7, #15]
 8004962:	e001      	b.n	8004968 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000008 	.word	0x20000008
 8004978:	20000000 	.word	0x20000000
 800497c:	20000004 	.word	0x20000004

08004980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_IncTick+0x20>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_IncTick+0x24>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4413      	add	r3, r2
 8004990:	4a04      	ldr	r2, [pc, #16]	; (80049a4 <HAL_IncTick+0x24>)
 8004992:	6013      	str	r3, [r2, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000008 	.word	0x20000008
 80049a4:	200003fc 	.word	0x200003fc

080049a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return uwTick;
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_GetTick+0x14>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	200003fc 	.word	0x200003fc

080049c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7ff ffee 	bl	80049a8 <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d005      	beq.n	80049e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80049da:	4b09      	ldr	r3, [pc, #36]	; (8004a00 <HAL_Delay+0x40>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049e6:	bf00      	nop
 80049e8:	f7ff ffde 	bl	80049a8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d8f7      	bhi.n	80049e8 <HAL_Delay+0x28>
  {
  }
}
 80049f8:	bf00      	nop
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20000008 	.word	0x20000008

08004a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a20:	4013      	ands	r3, r2
 8004a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a36:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <__NVIC_SetPriorityGrouping+0x44>)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	60d3      	str	r3, [r2, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000ed00 	.word	0xe000ed00

08004a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <__NVIC_GetPriorityGrouping+0x18>)
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	f003 0307 	and.w	r3, r3, #7
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000ed00 	.word	0xe000ed00

08004a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	db0b      	blt.n	8004a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	f003 021f 	and.w	r2, r3, #31
 8004a80:	4907      	ldr	r1, [pc, #28]	; (8004aa0 <__NVIC_EnableIRQ+0x38>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2001      	movs	r0, #1
 8004a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	e000e100 	.word	0xe000e100

08004aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	6039      	str	r1, [r7, #0]
 8004aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db0a      	blt.n	8004ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	490c      	ldr	r1, [pc, #48]	; (8004af0 <__NVIC_SetPriority+0x4c>)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004acc:	e00a      	b.n	8004ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	4908      	ldr	r1, [pc, #32]	; (8004af4 <__NVIC_SetPriority+0x50>)
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	3b04      	subs	r3, #4
 8004adc:	0112      	lsls	r2, r2, #4
 8004ade:	b2d2      	uxtb	r2, r2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	761a      	strb	r2, [r3, #24]
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	e000e100 	.word	0xe000e100
 8004af4:	e000ed00 	.word	0xe000ed00

08004af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b089      	sub	sp, #36	; 0x24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f1c3 0307 	rsb	r3, r3, #7
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	bf28      	it	cs
 8004b16:	2304      	movcs	r3, #4
 8004b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	2b06      	cmp	r3, #6
 8004b20:	d902      	bls.n	8004b28 <NVIC_EncodePriority+0x30>
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3b03      	subs	r3, #3
 8004b26:	e000      	b.n	8004b2a <NVIC_EncodePriority+0x32>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43da      	mvns	r2, r3
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b40:	f04f 31ff 	mov.w	r1, #4294967295
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4a:	43d9      	mvns	r1, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b50:	4313      	orrs	r3, r2
         );
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3724      	adds	r7, #36	; 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b70:	d301      	bcc.n	8004b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b72:	2301      	movs	r3, #1
 8004b74:	e00f      	b.n	8004b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b76:	4a0a      	ldr	r2, [pc, #40]	; (8004ba0 <SysTick_Config+0x40>)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b7e:	210f      	movs	r1, #15
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	f7ff ff8e 	bl	8004aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <SysTick_Config+0x40>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b8e:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <SysTick_Config+0x40>)
 8004b90:	2207      	movs	r2, #7
 8004b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	e000e010 	.word	0xe000e010

08004ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ff29 	bl	8004a04 <__NVIC_SetPriorityGrouping>
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bcc:	f7ff ff3e 	bl	8004a4c <__NVIC_GetPriorityGrouping>
 8004bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f7ff ff8e 	bl	8004af8 <NVIC_EncodePriority>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff ff5d 	bl	8004aa4 <__NVIC_SetPriority>
}
 8004bea:	bf00      	nop
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff31 	bl	8004a68 <__NVIC_EnableIRQ>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff ffa2 	bl	8004b60 <SysTick_Config>
 8004c1c:	4603      	mov	r3, r0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c36:	e14e      	b.n	8004ed6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	fa01 f303 	lsl.w	r3, r1, r3
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8140 	beq.w	8004ed0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d00b      	beq.n	8004c70 <HAL_GPIO_Init+0x48>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d007      	beq.n	8004c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c64:	2b11      	cmp	r3, #17
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b12      	cmp	r3, #18
 8004c6e:	d130      	bne.n	8004cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43db      	mvns	r3, r3
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4013      	ands	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	091b      	lsrs	r3, r3, #4
 8004cbc:	f003 0201 	and.w	r2, r3, #1
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	2203      	movs	r2, #3
 8004cde:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_Init+0xea>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b12      	cmp	r3, #18
 8004d10:	d123      	bne.n	8004d5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	08da      	lsrs	r2, r3, #3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3208      	adds	r2, #8
 8004d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	220f      	movs	r2, #15
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4013      	ands	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	08da      	lsrs	r2, r3, #3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3208      	adds	r2, #8
 8004d54:	6939      	ldr	r1, [r7, #16]
 8004d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f003 0203 	and.w	r2, r3, #3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 809a 	beq.w	8004ed0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d9c:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <HAL_GPIO_Init+0x2cc>)
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da0:	4a54      	ldr	r2, [pc, #336]	; (8004ef4 <HAL_GPIO_Init+0x2cc>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6613      	str	r3, [r2, #96]	; 0x60
 8004da8:	4b52      	ldr	r3, [pc, #328]	; (8004ef4 <HAL_GPIO_Init+0x2cc>)
 8004daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004db4:	4a50      	ldr	r2, [pc, #320]	; (8004ef8 <HAL_GPIO_Init+0x2d0>)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	089b      	lsrs	r3, r3, #2
 8004dba:	3302      	adds	r3, #2
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	220f      	movs	r2, #15
 8004dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dde:	d013      	beq.n	8004e08 <HAL_GPIO_Init+0x1e0>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a46      	ldr	r2, [pc, #280]	; (8004efc <HAL_GPIO_Init+0x2d4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00d      	beq.n	8004e04 <HAL_GPIO_Init+0x1dc>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a45      	ldr	r2, [pc, #276]	; (8004f00 <HAL_GPIO_Init+0x2d8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <HAL_GPIO_Init+0x1d8>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a44      	ldr	r2, [pc, #272]	; (8004f04 <HAL_GPIO_Init+0x2dc>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d101      	bne.n	8004dfc <HAL_GPIO_Init+0x1d4>
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e006      	b.n	8004e0a <HAL_GPIO_Init+0x1e2>
 8004dfc:	2307      	movs	r3, #7
 8004dfe:	e004      	b.n	8004e0a <HAL_GPIO_Init+0x1e2>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e002      	b.n	8004e0a <HAL_GPIO_Init+0x1e2>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_GPIO_Init+0x1e2>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	f002 0203 	and.w	r2, r2, #3
 8004e10:	0092      	lsls	r2, r2, #2
 8004e12:	4093      	lsls	r3, r2
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e1a:	4937      	ldr	r1, [pc, #220]	; (8004ef8 <HAL_GPIO_Init+0x2d0>)
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	3302      	adds	r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e28:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	43db      	mvns	r3, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e4c:	4a2e      	ldr	r2, [pc, #184]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004e52:	4b2d      	ldr	r3, [pc, #180]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e76:	4a24      	ldr	r2, [pc, #144]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e7c:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ea0:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ea6:	4b18      	ldr	r3, [pc, #96]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004eca:	4a0f      	ldr	r2, [pc, #60]	; (8004f08 <HAL_GPIO_Init+0x2e0>)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f aea9 	bne.w	8004c38 <HAL_GPIO_Init+0x10>
  }
}
 8004ee6:	bf00      	nop
 8004ee8:	371c      	adds	r7, #28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	40010000 	.word	0x40010000
 8004efc:	48000400 	.word	0x48000400
 8004f00:	48000800 	.word	0x48000800
 8004f04:	48000c00 	.word	0x48000c00
 8004f08:	40010400 	.word	0x40010400

08004f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691a      	ldr	r2, [r3, #16]
 8004f1c:	887b      	ldrh	r3, [r7, #2]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
 8004f28:	e001      	b.n	8004f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3714      	adds	r7, #20
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	460b      	mov	r3, r1
 8004f46:	807b      	strh	r3, [r7, #2]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f4c:	787b      	ldrb	r3, [r7, #1]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f58:	e002      	b.n	8004f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f5a:	887a      	ldrh	r2, [r7, #2]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e081      	b.n	8005082 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fb fca6 	bl	80008e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2224      	movs	r2, #36	; 0x24
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004fcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	e006      	b.n	8004ff4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689a      	ldr	r2, [r3, #8]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d104      	bne.n	8005006 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005004:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	ea42 0103 	orr.w	r1, r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	69d9      	ldr	r1, [r3, #28]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	460b      	mov	r3, r1
 800509a:	817b      	strh	r3, [r7, #10]
 800509c:	4613      	mov	r3, r2
 800509e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	f040 80da 	bne.w	8005262 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_I2C_Master_Transmit+0x30>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e0d3      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80050c4:	f7ff fc70 	bl	80049a8 <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	2319      	movs	r3, #25
 80050d0:	2201      	movs	r2, #1
 80050d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f9e6 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e0be      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2221      	movs	r2, #33	; 0x21
 80050ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	893a      	ldrh	r2, [r7, #8]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005112:	b29b      	uxth	r3, r3
 8005114:	2bff      	cmp	r3, #255	; 0xff
 8005116:	d90e      	bls.n	8005136 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	b2da      	uxtb	r2, r3
 8005124:	8979      	ldrh	r1, [r7, #10]
 8005126:	4b51      	ldr	r3, [pc, #324]	; (800526c <HAL_I2C_Master_Transmit+0x1e0>)
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 fb48 	bl	80057c4 <I2C_TransferConfig>
 8005134:	e06c      	b.n	8005210 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005144:	b2da      	uxtb	r2, r3
 8005146:	8979      	ldrh	r1, [r7, #10]
 8005148:	4b48      	ldr	r3, [pc, #288]	; (800526c <HAL_I2C_Master_Transmit+0x1e0>)
 800514a:	9300      	str	r3, [sp, #0]
 800514c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fb37 	bl	80057c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005156:	e05b      	b.n	8005210 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	6a39      	ldr	r1, [r7, #32]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f9e3 	bl	8005528 <I2C_WaitOnTXISFlagUntilTimeout>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e07b      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	781a      	ldrb	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d034      	beq.n	8005210 <HAL_I2C_Master_Transmit+0x184>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d130      	bne.n	8005210 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 f975 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e04d      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2bff      	cmp	r3, #255	; 0xff
 80051d0:	d90e      	bls.n	80051f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	22ff      	movs	r2, #255	; 0xff
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	8979      	ldrh	r1, [r7, #10]
 80051e0:	2300      	movs	r3, #0
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 faeb 	bl	80057c4 <I2C_TransferConfig>
 80051ee:	e00f      	b.n	8005210 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	8979      	ldrh	r1, [r7, #10]
 8005202:	2300      	movs	r3, #0
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fada 	bl	80057c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d19e      	bne.n	8005158 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	6a39      	ldr	r1, [r7, #32]
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f000 f9c2 	bl	80055a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e01a      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2220      	movs	r2, #32
 8005234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6859      	ldr	r1, [r3, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_I2C_Master_Transmit+0x1e4>)
 8005242:	400b      	ands	r3, r1
 8005244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	80002000 	.word	0x80002000
 8005270:	fe00e800 	.word	0xfe00e800

08005274 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	460b      	mov	r3, r1
 8005282:	817b      	strh	r3, [r7, #10]
 8005284:	4613      	mov	r3, r2
 8005286:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b20      	cmp	r3, #32
 8005292:	f040 80db 	bne.w	800544c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_I2C_Master_Receive+0x30>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0d4      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052ac:	f7ff fb7c 	bl	80049a8 <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	2319      	movs	r3, #25
 80052b8:	2201      	movs	r2, #1
 80052ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f8f2 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0bf      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2222      	movs	r2, #34	; 0x22
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2210      	movs	r2, #16
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	893a      	ldrh	r2, [r7, #8]
 80052ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2bff      	cmp	r3, #255	; 0xff
 80052fe:	d90e      	bls.n	800531e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	22ff      	movs	r2, #255	; 0xff
 8005304:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	b2da      	uxtb	r2, r3
 800530c:	8979      	ldrh	r1, [r7, #10]
 800530e:	4b52      	ldr	r3, [pc, #328]	; (8005458 <HAL_I2C_Master_Receive+0x1e4>)
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fa54 	bl	80057c4 <I2C_TransferConfig>
 800531c:	e06d      	b.n	80053fa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005322:	b29a      	uxth	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532c:	b2da      	uxtb	r2, r3
 800532e:	8979      	ldrh	r1, [r7, #10]
 8005330:	4b49      	ldr	r3, [pc, #292]	; (8005458 <HAL_I2C_Master_Receive+0x1e4>)
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fa43 	bl	80057c4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800533e:	e05c      	b.n	80053fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f96b 	bl	8005620 <I2C_WaitOnRXNEFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e07c      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d034      	beq.n	80053fa <HAL_I2C_Master_Receive+0x186>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005394:	2b00      	cmp	r3, #0
 8005396:	d130      	bne.n	80053fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2200      	movs	r2, #0
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 f880 	bl	80054a8 <I2C_WaitOnFlagUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e04d      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2bff      	cmp	r3, #255	; 0xff
 80053ba:	d90e      	bls.n	80053da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	8979      	ldrh	r1, [r7, #10]
 80053ca:	2300      	movs	r3, #0
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 f9f6 	bl	80057c4 <I2C_TransferConfig>
 80053d8:	e00f      	b.n	80053fa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f9e5 	bl	80057c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d19d      	bne.n	8005340 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	6a39      	ldr	r1, [r7, #32]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f8cd 	bl	80055a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e01a      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2220      	movs	r2, #32
 800541e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b0c      	ldr	r3, [pc, #48]	; (800545c <HAL_I2C_Master_Receive+0x1e8>)
 800542c:	400b      	ands	r3, r1
 800542e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	e000      	b.n	800544e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	80002400 	.word	0x80002400
 800545c:	fe00e800 	.word	0xfe00e800

08005460 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b02      	cmp	r3, #2
 8005474:	d103      	bne.n	800547e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2200      	movs	r2, #0
 800547c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b01      	cmp	r3, #1
 800548a:	d007      	beq.n	800549c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	619a      	str	r2, [r3, #24]
  }
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054b8:	e022      	b.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d01e      	beq.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7ff fa71 	bl	80049a8 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d113      	bne.n	8005500 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e00f      	b.n	8005520 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	4013      	ands	r3, r2
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	429a      	cmp	r2, r3
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	429a      	cmp	r2, r3
 800551c:	d0cd      	beq.n	80054ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005534:	e02c      	b.n	8005590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 f8dc 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e02a      	b.n	80055a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d01e      	beq.n	8005590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7ff fa29 	bl	80049a8 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d113      	bne.n	8005590 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2220      	movs	r2, #32
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e007      	b.n	80055a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d1cb      	bne.n	8005536 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b4:	e028      	b.n	8005608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	68b9      	ldr	r1, [r7, #8]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f89c 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e026      	b.n	8005618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7ff f9ed 	bl	80049a8 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d113      	bne.n	8005608 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e007      	b.n	8005618 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	f003 0320 	and.w	r3, r3, #32
 8005612:	2b20      	cmp	r3, #32
 8005614:	d1cf      	bne.n	80055b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800562c:	e055      	b.n	80056da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f860 	bl	80056f8 <I2C_IsAcknowledgeFailed>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e053      	b.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b20      	cmp	r3, #32
 800564e:	d129      	bne.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0304 	and.w	r3, r3, #4
 800565a:	2b04      	cmp	r3, #4
 800565c:	d105      	bne.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e03f      	b.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2220      	movs	r2, #32
 8005670:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6859      	ldr	r1, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800567e:	400b      	ands	r3, r1
 8005680:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e022      	b.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a4:	f7ff f980 	bl	80049a8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d302      	bcc.n	80056ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10f      	bne.n	80056da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e007      	b.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d1a2      	bne.n	800562e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	fe00e800 	.word	0xfe00e800

080056f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b10      	cmp	r3, #16
 8005710:	d151      	bne.n	80057b6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005712:	e022      	b.n	800575a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d01e      	beq.n	800575a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800571c:	f7ff f944 	bl	80049a8 <HAL_GetTick>
 8005720:	4602      	mov	r2, r0
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <I2C_IsAcknowledgeFailed+0x3a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d113      	bne.n	800575a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f043 0220 	orr.w	r2, r3, #32
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e02e      	b.n	80057b8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b20      	cmp	r3, #32
 8005766:	d1d5      	bne.n	8005714 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2210      	movs	r2, #16
 800576e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2220      	movs	r2, #32
 8005776:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fe71 	bl	8005460 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <I2C_IsAcknowledgeFailed+0xc8>)
 800578a:	400b      	ands	r3, r1
 800578c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f043 0204 	orr.w	r2, r3, #4
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	fe00e800 	.word	0xfe00e800

080057c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	460b      	mov	r3, r1
 80057d0:	817b      	strh	r3, [r7, #10]
 80057d2:	4613      	mov	r3, r2
 80057d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	0d5b      	lsrs	r3, r3, #21
 80057e0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <I2C_TransferConfig+0x58>)
 80057e6:	430b      	orrs	r3, r1
 80057e8:	43db      	mvns	r3, r3
 80057ea:	ea02 0103 	and.w	r1, r2, r3
 80057ee:	897b      	ldrh	r3, [r7, #10]
 80057f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057f4:	7a7b      	ldrb	r3, [r7, #9]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	431a      	orrs	r2, r3
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	431a      	orrs	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	03ff63ff 	.word	0x03ff63ff

08005820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	d138      	bne.n	80058a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005840:	2302      	movs	r3, #2
 8005842:	e032      	b.n	80058aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2224      	movs	r2, #36	; 0x24
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d139      	bne.n	8005940 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e033      	b.n	8005942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2224      	movs	r2, #36	; 0x24
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005908:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f042 0201 	orr.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800594e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005950:	b08b      	sub	sp, #44	; 0x2c
 8005952:	af06      	add	r7, sp, #24
 8005954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e104      	b.n	8005b6a <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f006 fedb 	bl	800c730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2203      	movs	r2, #3
 800597e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f003 f804 	bl	8008994 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	603b      	str	r3, [r7, #0]
 8005992:	687e      	ldr	r6, [r7, #4]
 8005994:	466d      	mov	r5, sp
 8005996:	f106 0410 	add.w	r4, r6, #16
 800599a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800599c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	602b      	str	r3, [r5, #0]
 80059a2:	1d33      	adds	r3, r6, #4
 80059a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059a6:	6838      	ldr	r0, [r7, #0]
 80059a8:	f002 ffcc 	bl	8008944 <USB_CoreInit>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2202      	movs	r2, #2
 80059b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0d5      	b.n	8005b6a <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f003 f800 	bl	80089ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
 80059ce:	e04c      	b.n	8005a6a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	3301      	adds	r3, #1
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	7bfa      	ldrb	r2, [r7, #15]
 80059f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80059fa:	7bfa      	ldrb	r2, [r7, #15]
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	b298      	uxth	r0, r3
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3336      	adds	r3, #54	; 0x36
 8005a0e:	4602      	mov	r2, r0
 8005a10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	6879      	ldr	r1, [r7, #4]
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	3303      	adds	r3, #3
 8005a24:	2200      	movs	r2, #0
 8005a26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a28:	7bfa      	ldrb	r2, [r7, #15]
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	440b      	add	r3, r1
 8005a36:	3338      	adds	r3, #56	; 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a3c:	7bfa      	ldrb	r2, [r7, #15]
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	333c      	adds	r3, #60	; 0x3c
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a50:	7bfa      	ldrb	r2, [r7, #15]
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3340      	adds	r3, #64	; 0x40
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
 8005a66:	3301      	adds	r3, #1
 8005a68:	73fb      	strb	r3, [r7, #15]
 8005a6a:	7bfa      	ldrb	r2, [r7, #15]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d3ad      	bcc.n	80059d0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	e044      	b.n	8005b04 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005aa2:	7bfa      	ldrb	r2, [r7, #15]
 8005aa4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ad2:	7bfa      	ldrb	r2, [r7, #15]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	440b      	add	r3, r1
 8005ae0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ae8:	7bfa      	ldrb	r2, [r7, #15]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	3301      	adds	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
 8005b04:	7bfa      	ldrb	r2, [r7, #15]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d3b5      	bcc.n	8005a7a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	687e      	ldr	r6, [r7, #4]
 8005b16:	466d      	mov	r5, sp
 8005b18:	f106 0410 	add.w	r4, r6, #16
 8005b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	1d33      	adds	r3, r6, #4
 8005b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b28:	6838      	ldr	r0, [r7, #0]
 8005b2a:	f002 ff5b 	bl	80089e4 <USB_DevInit>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2202      	movs	r2, #2
 8005b38:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e014      	b.n	8005b6a <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d102      	bne.n	8005b5e <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fa63 	bl	8007024 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f004 ff14 	bl	800a990 <USB_DevDisconnect>

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_PCD_Start+0x16>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e012      	b.n	8005bae <HAL_PCD_Start+0x3c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f002 fee6 	bl	8008966 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f004 fedf 	bl	800a962 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f004 fef9 	bl	800a9ba <USB_ReadInterrupts>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd2:	d102      	bne.n	8005bda <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb5b 	bl	8006290 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f004 feeb 	bl	800a9ba <USB_ReadInterrupts>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d112      	bne.n	8005c16 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c02:	b292      	uxth	r2, r2
 8005c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f006 fe32 	bl	800c872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c0e:	2100      	movs	r1, #0
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f91e 	bl	8005e52 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 fecd 	bl	800a9ba <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c2a:	d10b      	bne.n	8005c44 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c3e:	b292      	uxth	r2, r2
 8005c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 feb6 	bl	800a9ba <USB_ReadInterrupts>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c58:	d10b      	bne.n	8005c72 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f004 fe9f 	bl	800a9ba <USB_ReadInterrupts>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c86:	d133      	bne.n	8005cf0 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0204 	bic.w	r2, r2, #4
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0208 	bic.w	r2, r2, #8
 8005cb2:	b292      	uxth	r2, r2
 8005cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d107      	bne.n	8005cd2 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cca:	2100      	movs	r1, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f007 f881 	bl	800cdd4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f006 fe06 	bl	800c8e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cea:	b292      	uxth	r2, r2
 8005cec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f004 fe60 	bl	800a9ba <USB_ReadInterrupts>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d04:	d126      	bne.n	8005d54 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0208 	orr.w	r2, r2, #8
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d30:	b292      	uxth	r2, r2
 8005d32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 0204 	orr.w	r2, r2, #4
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f006 fdae 	bl	800c8b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f004 fe2e 	bl	800a9ba <USB_ReadInterrupts>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d64:	2b80      	cmp	r3, #128	; 0x80
 8005d66:	d13f      	bne.n	8005de8 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d7a:	b292      	uxth	r2, r2
 8005d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d12b      	bne.n	8005de2 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0204 	orr.w	r2, r2, #4
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f042 0208 	orr.w	r2, r2, #8
 8005db4:	b292      	uxth	r2, r2
 8005db6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005dd8:	2101      	movs	r1, #1
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f006 fffa 	bl	800cdd4 <HAL_PCDEx_LPM_Callback>
 8005de0:	e002      	b.n	8005de8 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f006 fd64 	bl	800c8b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f004 fde4 	bl	800a9ba <USB_ReadInterrupts>
 8005df2:	4603      	mov	r3, r0
 8005df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfc:	d10e      	bne.n	8005e1c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e10:	b292      	uxth	r2, r2
 8005e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f006 fd1d 	bl	800c856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f004 fdca 	bl	800a9ba <USB_ReadInterrupts>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e30:	d10b      	bne.n	8005e4a <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e44:	b292      	uxth	r2, r2
 8005e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d101      	bne.n	8005e6c <HAL_PCD_SetAddress+0x1a>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e013      	b.n	8005e94 <HAL_PCD_SetAddress+0x42>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f004 fd58 	bl	800a93a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	4608      	mov	r0, r1
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	70fb      	strb	r3, [r7, #3]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	803b      	strh	r3, [r7, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da0e      	bge.n	8005ee0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2201      	movs	r2, #1
 8005edc:	705a      	strb	r2, [r3, #1]
 8005ede:	e00e      	b.n	8005efe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 0207 	and.w	r2, r3, #7
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f0a:	883a      	ldrh	r2, [r7, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	78ba      	ldrb	r2, [r7, #2]
 8005f14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	785b      	ldrb	r3, [r3, #1]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f28:	78bb      	ldrb	r3, [r7, #2]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d102      	bne.n	8005f34 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_PCD_EP_Open+0xa6>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e00e      	b.n	8005f60 <HAL_PCD_EP_Open+0xc4>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 fd69 	bl	8008a28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	da0e      	bge.n	8005f9a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	705a      	strb	r2, [r3, #1]
 8005f98:	e00e      	b.n	8005fb8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 0207 	and.w	r2, r3, #7
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	00db      	lsls	r3, r3, #3
 8005fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_PCD_EP_Close+0x6a>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e00e      	b.n	8005ff0 <HAL_PCD_EP_Close+0x88>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68f9      	ldr	r1, [r7, #12]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f003 f88f 	bl	8009104 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	607a      	str	r2, [r7, #4]
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	460b      	mov	r3, r1
 8006006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006008:	7afb      	ldrb	r3, [r7, #11]
 800600a:	f003 0207 	and.w	r2, r3, #7
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	00db      	lsls	r3, r3, #3
 8006016:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	4413      	add	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006038:	7afb      	ldrb	r3, [r7, #11]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	b2da      	uxtb	r2, r3
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6979      	ldr	r1, [r7, #20]
 8006054:	4618      	mov	r0, r3
 8006056:	f003 fa42 	bl	80094de <USB_EPStartXfer>
 800605a:	e005      	b.n	8006068 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	4618      	mov	r0, r3
 8006064:	f003 fa3b 	bl	80094de <USB_EPStartXfer>
  }

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3718      	adds	r7, #24
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	460b      	mov	r3, r1
 800607c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 0207 	and.w	r2, r3, #7
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	440b      	add	r3, r1
 8006090:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006094:	681b      	ldr	r3, [r3, #0]
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b086      	sub	sp, #24
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	60f8      	str	r0, [r7, #12]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	460b      	mov	r3, r1
 80060b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	2201      	movs	r2, #1
 80060ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ee:	7afb      	ldrb	r3, [r7, #11]
 80060f0:	f003 0307 	and.w	r3, r3, #7
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060fa:	7afb      	ldrb	r3, [r7, #11]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6979      	ldr	r1, [r7, #20]
 800610a:	4618      	mov	r0, r3
 800610c:	f003 f9e7 	bl	80094de <USB_EPStartXfer>
 8006110:	e005      	b.n	800611e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6979      	ldr	r1, [r7, #20]
 8006118:	4618      	mov	r0, r3
 800611a:	f003 f9e0 	bl	80094de <USB_EPStartXfer>
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f003 0207 	and.w	r2, r3, #7
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	429a      	cmp	r2, r3
 8006140:	d901      	bls.n	8006146 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e04c      	b.n	80061e0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da0e      	bge.n	800616c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	4613      	mov	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	705a      	strb	r2, [r3, #1]
 800616a:	e00c      	b.n	8006186 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	b2da      	uxtb	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_PCD_EP_SetStall+0x7e>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e01c      	b.n	80061e0 <HAL_PCD_EP_SetStall+0xb8>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f004 fac1 	bl	800a73c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	f003 0307 	and.w	r3, r3, #7
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f004 fc02 	bl	800a9da <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d901      	bls.n	8006206 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e040      	b.n	8006288 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800620a:	2b00      	cmp	r3, #0
 800620c:	da0e      	bge.n	800622c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800620e:	78fb      	ldrb	r3, [r7, #3]
 8006210:	f003 0307 	and.w	r3, r3, #7
 8006214:	1c5a      	adds	r2, r3, #1
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	4413      	add	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	705a      	strb	r2, [r3, #1]
 800622a:	e00e      	b.n	800624a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	f003 0207 	and.w	r2, r3, #7
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	4413      	add	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	b2da      	uxtb	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_PCD_EP_ClrStall+0x82>
 8006266:	2302      	movs	r3, #2
 8006268:	e00e      	b.n	8006288 <HAL_PCD_EP_ClrStall+0xa0>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68f9      	ldr	r1, [r7, #12]
 8006278:	4618      	mov	r0, r3
 800627a:	f004 fab0 	bl	800a7de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08e      	sub	sp, #56	; 0x38
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006298:	e2d1      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80062a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80062b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 8152 	bne.w	800655e <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80062ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d150      	bne.n	8006366 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80062d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d4:	81fb      	strh	r3, [r7, #14]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	89fb      	ldrh	r3, [r7, #14]
 80062dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3328      	adds	r3, #40	; 0x28
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	6812      	ldr	r2, [r2, #0]
 8006306:	4413      	add	r3, r2
 8006308:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	441a      	add	r2, r3
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006324:	2100      	movs	r1, #0
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f006 fa7b 	bl	800c822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 8282 	beq.w	800683e <PCD_EP_ISR_Handler+0x5ae>
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f040 827d 	bne.w	800683e <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006350:	b2da      	uxtb	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	b292      	uxth	r2, r2
 8006358:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006364:	e26b      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800637c:	2b00      	cmp	r3, #0
 800637e:	d032      	beq.n	80063e6 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006388:	b29b      	uxth	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	4413      	add	r3, r2
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	4413      	add	r3, r2
 800639a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800639e:	881b      	ldrh	r3, [r3, #0]
 80063a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f004 fb5a 	bl	800aa74 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063cc:	4013      	ands	r3, r2
 80063ce:	823b      	strh	r3, [r7, #16]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	8a3a      	ldrh	r2, [r7, #16]
 80063d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063da:	b292      	uxth	r2, r2
 80063dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f006 f9f2 	bl	800c7c8 <HAL_PCD_SetupStageCallback>
 80063e4:	e22b      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f280 8227 	bge.w	800683e <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063fc:	4013      	ands	r3, r2
 80063fe:	83bb      	strh	r3, [r7, #28]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	8bba      	ldrh	r2, [r7, #28]
 8006406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800640a:	b292      	uxth	r2, r2
 800640c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006416:	b29b      	uxth	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6812      	ldr	r2, [r2, #0]
 8006426:	4413      	add	r3, r2
 8006428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d019      	beq.n	8006472 <PCD_EP_ISR_Handler+0x1e2>
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d015      	beq.n	8006472 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	6959      	ldr	r1, [r3, #20]
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006456:	b29b      	uxth	r3, r3
 8006458:	f004 fb0c 	bl	800aa74 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	441a      	add	r2, r3
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800646a:	2100      	movs	r1, #0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f006 f9bd 	bl	800c7ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006480:	b29b      	uxth	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	4413      	add	r3, r2
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d112      	bne.n	80064c0 <PCD_EP_ISR_Handler+0x230>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	801a      	strh	r2, [r3, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	801a      	strh	r2, [r3, #0]
 80064be:	e02f      	b.n	8006520 <PCD_EP_ISR_Handler+0x290>
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b3e      	cmp	r3, #62	; 0x3e
 80064c6:	d813      	bhi.n	80064f0 <PCD_EP_ISR_Handler+0x260>
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	633b      	str	r3, [r7, #48]	; 0x30
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <PCD_EP_ISR_Handler+0x252>
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	3301      	adds	r3, #1
 80064e0:	633b      	str	r3, [r7, #48]	; 0x30
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	801a      	strh	r2, [r3, #0]
 80064ee:	e017      	b.n	8006520 <PCD_EP_ISR_Handler+0x290>
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	095b      	lsrs	r3, r3, #5
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2b00      	cmp	r3, #0
 8006502:	d102      	bne.n	800650a <PCD_EP_ISR_Handler+0x27a>
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	3b01      	subs	r3, #1
 8006508:	633b      	str	r3, [r7, #48]	; 0x30
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651a:	b29a      	uxth	r2, r3
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	b29b      	uxth	r3, r3
 8006528:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800652c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006530:	827b      	strh	r3, [r7, #18]
 8006532:	8a7b      	ldrh	r3, [r7, #18]
 8006534:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006538:	827b      	strh	r3, [r7, #18]
 800653a:	8a7b      	ldrh	r3, [r7, #18]
 800653c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006540:	827b      	strh	r3, [r7, #18]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	8a7b      	ldrh	r3, [r7, #18]
 8006548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006558:	b29b      	uxth	r3, r3
 800655a:	8013      	strh	r3, [r2, #0]
 800655c:	e16f      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006570:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006574:	2b00      	cmp	r3, #0
 8006576:	f280 80e4 	bge.w	8006742 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29a      	uxth	r2, r3
 800658c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006590:	4013      	ands	r3, r2
 8006592:	853b      	strh	r3, [r7, #40]	; 0x28
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80065a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065a8:	b292      	uxth	r2, r2
 80065aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065ac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	7b1b      	ldrb	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d120      	bne.n	800660c <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ee:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80065f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8083 	beq.w	80066fe <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	6959      	ldr	r1, [r3, #20]
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	88da      	ldrh	r2, [r3, #6]
 8006604:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006606:	f004 fa35 	bl	800aa74 <USB_ReadPMA>
 800660a:	e078      	b.n	80066fe <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	78db      	ldrb	r3, [r3, #3]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d108      	bne.n	8006626 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006614:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006616:	461a      	mov	r2, r3
 8006618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f91d 	bl	800685a <HAL_PCD_EP_DB_Receive>
 8006620:	4603      	mov	r3, r0
 8006622:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006624:	e06b      	b.n	80066fe <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006640:	847b      	strh	r3, [r7, #34]	; 0x22
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	441a      	add	r2, r3
 8006650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01f      	beq.n	80066c0 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006688:	b29b      	uxth	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6812      	ldr	r2, [r2, #0]
 8006698:	4413      	add	r3, r2
 800669a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800669e:	881b      	ldrh	r3, [r3, #0]
 80066a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80066a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d028      	beq.n	80066fe <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6818      	ldr	r0, [r3, #0]
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	6959      	ldr	r1, [r3, #20]
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	891a      	ldrh	r2, [r3, #8]
 80066b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066ba:	f004 f9db 	bl	800aa74 <USB_ReadPMA>
 80066be:	e01e      	b.n	80066fe <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	6812      	ldr	r2, [r2, #0]
 80066d8:	4413      	add	r3, r2
 80066da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80066e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	6959      	ldr	r1, [r3, #20]
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	895a      	ldrh	r2, [r3, #10]
 80066f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066fa:	f004 f9bb 	bl	800aa74 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	69da      	ldr	r2, [r3, #28]
 8006702:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006704:	441a      	add	r2, r3
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006710:	441a      	add	r2, r3
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d004      	beq.n	8006728 <PCD_EP_ISR_Handler+0x498>
 800671e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	429a      	cmp	r2, r3
 8006726:	d206      	bcs.n	8006736 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f006 f85c 	bl	800c7ec <HAL_PCD_DataOutStageCallback>
 8006734:	e005      	b.n	8006742 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673c:	4618      	mov	r0, r3
 800673e:	f002 fece 	bl	80094de <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006742:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006748:	2b00      	cmp	r3, #0
 800674a:	d078      	beq.n	800683e <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 800674c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	4613      	mov	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	b29b      	uxth	r3, r3
 8006772:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	843b      	strh	r3, [r7, #32]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	461a      	mov	r2, r3
 8006782:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	441a      	add	r2, r3
 800678a:	8c3b      	ldrh	r3, [r7, #32]
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29b      	uxth	r3, r3
 8006796:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	78db      	ldrb	r3, [r3, #3]
 800679c:	2b02      	cmp	r3, #2
 800679e:	d108      	bne.n	80067b2 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d144      	bne.n	8006832 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80067a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d13f      	bne.n	8006832 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	461a      	mov	r2, r3
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4413      	add	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	4413      	add	r3, r2
 80067cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067d6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	699a      	ldr	r2, [r3, #24]
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d906      	bls.n	80067f0 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	8bfb      	ldrh	r3, [r7, #30]
 80067e8:	1ad2      	subs	r2, r2, r3
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	619a      	str	r2, [r3, #24]
 80067ee:	e002      	b.n	80067f6 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	2200      	movs	r2, #0
 80067f4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f006 f80c 	bl	800c822 <HAL_PCD_DataInStageCallback>
 800680a:	e018      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	8bfb      	ldrh	r3, [r7, #30]
 8006812:	441a      	add	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	8bfb      	ldrh	r3, [r7, #30]
 800681e:	441a      	add	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800682a:	4618      	mov	r0, r3
 800682c:	f002 fe57 	bl	80094de <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006830:	e005      	b.n	800683e <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006832:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006834:	461a      	mov	r2, r3
 8006836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f917 	bl	8006a6c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006846:	b29b      	uxth	r3, r3
 8006848:	b21b      	sxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	f6ff ad25 	blt.w	800629a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3738      	adds	r7, #56	; 0x38
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b088      	sub	sp, #32
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	60b9      	str	r1, [r7, #8]
 8006864:	4613      	mov	r3, r2
 8006866:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006868:	88fb      	ldrh	r3, [r7, #6]
 800686a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d07c      	beq.n	800696c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687a:	b29b      	uxth	r3, r3
 800687c:	461a      	mov	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	4413      	add	r3, r2
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	6812      	ldr	r2, [r2, #0]
 800688a:	4413      	add	r3, r2
 800688c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006896:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	8b7b      	ldrh	r3, [r7, #26]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d306      	bcc.n	80068b0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	8b7b      	ldrh	r3, [r7, #26]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	619a      	str	r2, [r3, #24]
 80068ae:	e002      	b.n	80068b6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d123      	bne.n	8006906 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d8:	833b      	strh	r3, [r7, #24]
 80068da:	8b3b      	ldrh	r3, [r7, #24]
 80068dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068e0:	833b      	strh	r3, [r7, #24]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	461a      	mov	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8b3b      	ldrh	r3, [r7, #24]
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d01f      	beq.n	8006950 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	82fb      	strh	r3, [r7, #22]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	461a      	mov	r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	441a      	add	r2, r3
 800693a:	8afb      	ldrh	r3, [r7, #22]
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006948:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006950:	8b7b      	ldrh	r3, [r7, #26]
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8085 	beq.w	8006a62 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6959      	ldr	r1, [r3, #20]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	891a      	ldrh	r2, [r3, #8]
 8006964:	8b7b      	ldrh	r3, [r7, #26]
 8006966:	f004 f885 	bl	800aa74 <USB_ReadPMA>
 800696a:	e07a      	b.n	8006a62 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006974:	b29b      	uxth	r3, r3
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	6812      	ldr	r2, [r2, #0]
 8006984:	4413      	add	r3, r2
 8006986:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006990:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	8b7b      	ldrh	r3, [r7, #26]
 8006998:	429a      	cmp	r2, r3
 800699a:	d306      	bcc.n	80069aa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	8b7b      	ldrh	r3, [r7, #26]
 80069a2:	1ad2      	subs	r2, r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	619a      	str	r2, [r3, #24]
 80069a8:	e002      	b.n	80069b0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d123      	bne.n	8006a00 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	881b      	ldrh	r3, [r3, #0]
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	83fb      	strh	r3, [r7, #30]
 80069d4:	8bfb      	ldrh	r3, [r7, #30]
 80069d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069da:	83fb      	strh	r3, [r7, #30]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	8bfb      	ldrh	r3, [r7, #30]
 80069ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11f      	bne.n	8006a4a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	83bb      	strh	r3, [r7, #28]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	8bbb      	ldrh	r3, [r7, #28]
 8006a36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a42:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a4a:	8b7b      	ldrh	r3, [r7, #26]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d008      	beq.n	8006a62 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	6959      	ldr	r1, [r3, #20]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	895a      	ldrh	r2, [r3, #10]
 8006a5c:	8b7b      	ldrh	r3, [r7, #26]
 8006a5e:	f004 f809 	bl	800aa74 <USB_ReadPMA>
    }
  }

  return count;
 8006a62:	8b7b      	ldrh	r3, [r7, #26]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b092      	sub	sp, #72	; 0x48
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8130 	beq.w	8006ce6 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	00db      	lsls	r3, r3, #3
 8006a98:	4413      	add	r3, r2
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aaa:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	699a      	ldr	r2, [r3, #24]
 8006ab0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d906      	bls.n	8006ac4 <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	619a      	str	r2, [r3, #24]
 8006ac2:	e002      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d12c      	bne.n	8006b2c <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f005 fea2 	bl	800c822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 822d 	beq.w	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b04:	827b      	strh	r3, [r7, #18]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	441a      	add	r2, r3
 8006b14:	8a7b      	ldrh	r3, [r7, #18]
 8006b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	8013      	strh	r3, [r2, #0]
 8006b2a:	e20b      	b.n	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d01f      	beq.n	8006b76 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	441a      	add	r2, r3
 8006b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	f040 81e1 	bne.w	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b88:	441a      	add	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	69da      	ldr	r2, [r3, #28]
 8006b92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b94:	441a      	add	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	6a1a      	ldr	r2, [r3, #32]
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d309      	bcc.n	8006bba <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6a1a      	ldr	r2, [r3, #32]
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	621a      	str	r2, [r3, #32]
 8006bb8:	e014      	b.n	8006be4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8006bc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006bc4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bce:	e009      	b.n	8006be4 <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2200      	movs	r2, #0
 8006be2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	785b      	ldrb	r3, [r3, #1]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d155      	bne.n	8006c98 <HAL_PCD_EP_DB_Transmit+0x22c>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	4413      	add	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	00da      	lsls	r2, r3, #3
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c12:	617b      	str	r3, [r7, #20]
 8006c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d112      	bne.n	8006c40 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	881b      	ldrh	r3, [r3, #0]
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	801a      	strh	r2, [r3, #0]
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	801a      	strh	r2, [r3, #0]
 8006c3e:	e047      	b.n	8006cd0 <HAL_PCD_EP_DB_Transmit+0x264>
 8006c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c42:	2b3e      	cmp	r3, #62	; 0x3e
 8006c44:	d811      	bhi.n	8006c6a <HAL_PCD_EP_DB_Transmit+0x1fe>
 8006c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_PCD_EP_DB_Transmit+0x1f0>
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	3301      	adds	r3, #1
 8006c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	029b      	lsls	r3, r3, #10
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	801a      	strh	r2, [r3, #0]
 8006c68:	e032      	b.n	8006cd0 <HAL_PCD_EP_DB_Transmit+0x264>
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	f003 031f 	and.w	r3, r3, #31
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <HAL_PCD_EP_DB_Transmit+0x214>
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	801a      	strh	r2, [r3, #0]
 8006c96:	e01b      	b.n	8006cd0 <HAL_PCD_EP_DB_Transmit+0x264>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d117      	bne.n	8006cd0 <HAL_PCD_EP_DB_Transmit+0x264>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	623b      	str	r3, [r7, #32]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	00da      	lsls	r2, r3, #3
 8006cbe:	6a3b      	ldr	r3, [r7, #32]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	6959      	ldr	r1, [r3, #20]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	891a      	ldrh	r2, [r3, #8]
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f003 fe87 	bl	800a9f2 <USB_WritePMA>
 8006ce4:	e12e      	b.n	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4413      	add	r3, r2
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	699a      	ldr	r2, [r3, #24]
 8006d10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d306      	bcc.n	8006d24 <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d1c:	1ad2      	subs	r2, r2, r3
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	619a      	str	r2, [r3, #24]
 8006d22:	e002      	b.n	8006d2a <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2200      	movs	r2, #0
 8006d28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d12c      	bne.n	8006d8c <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	4619      	mov	r1, r3
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f005 fd72 	bl	800c822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 80fd 	bne.w	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	8013      	strh	r3, [r2, #0]
 8006d8a:	e0db      	b.n	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d11f      	bne.n	8006dd6 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	441a      	add	r2, r3
 8006dc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	f040 80b1 	bne.w	8006f44 <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006de8:	441a      	add	r2, r3
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	69da      	ldr	r2, [r3, #28]
 8006df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006df4:	441a      	add	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d309      	bcc.n	8006e1a <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6a1a      	ldr	r2, [r3, #32]
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	621a      	str	r2, [r3, #32]
 8006e18:	e014      	b.n	8006e44 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8006e22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006e2e:	e009      	b.n	8006e44 <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d155      	bne.n	8006efe <HAL_PCD_EP_DB_Transmit+0x492>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	647b      	str	r3, [r7, #68]	; 0x44
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e66:	4413      	add	r3, r2
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e78:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d112      	bne.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x43a>
 8006e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea2:	801a      	strh	r2, [r3, #0]
 8006ea4:	e044      	b.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eaa:	d811      	bhi.n	8006ed0 <HAL_PCD_EP_DB_Transmit+0x464>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <HAL_PCD_EP_DB_Transmit+0x456>
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	029b      	lsls	r3, r3, #10
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ecc:	801a      	strh	r2, [r3, #0]
 8006ece:	e02f      	b.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e018      	b.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	785b      	ldrb	r3, [r3, #1]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d114      	bne.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f14:	4413      	add	r3, r2
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	00da      	lsls	r2, r3, #3
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	4413      	add	r3, r2
 8006f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f26:	633b      	str	r3, [r7, #48]	; 0x30
 8006f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6959      	ldr	r1, [r3, #20]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	895a      	ldrh	r2, [r3, #10]
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f003 fd57 	bl	800a9f2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	823b      	strh	r3, [r7, #16]
 8006f60:	8a3b      	ldrh	r3, [r7, #16]
 8006f62:	f083 0310 	eor.w	r3, r3, #16
 8006f66:	823b      	strh	r3, [r7, #16]
 8006f68:	8a3b      	ldrh	r3, [r7, #16]
 8006f6a:	f083 0320 	eor.w	r3, r3, #32
 8006f6e:	823b      	strh	r3, [r7, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	441a      	add	r2, r3
 8006f7e:	8a3b      	ldrh	r3, [r7, #16]
 8006f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3748      	adds	r7, #72	; 0x48
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b087      	sub	sp, #28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	607b      	str	r3, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	817b      	strh	r3, [r7, #10]
 8006fac:	4613      	mov	r3, r2
 8006fae:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006fb0:	897b      	ldrh	r3, [r7, #10]
 8006fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00b      	beq.n	8006fd4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fbc:	897b      	ldrh	r3, [r7, #10]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	e009      	b.n	8006fe8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006fd4:	897a      	ldrh	r2, [r7, #10]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006fe8:	893b      	ldrh	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	80da      	strh	r2, [r3, #6]
 8006ffc:	e00b      	b.n	8007016 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2201      	movs	r2, #1
 8007002:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	b29a      	uxth	r2, r3
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	b29a      	uxth	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	371c      	adds	r7, #28
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007048:	b29b      	uxth	r3, r3
 800704a:	f043 0301 	orr.w	r3, r3, #1
 800704e:	b29a      	uxth	r2, r3
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800705c:	b29b      	uxth	r3, r3
 800705e:	f043 0302 	orr.w	r3, r3, #2
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007078:	b480      	push	{r7}
 800707a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800707c:	4b04      	ldr	r3, [pc, #16]	; (8007090 <HAL_PWREx_GetVoltageRange+0x18>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	40007000 	.word	0x40007000

08007094 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a2:	d130      	bne.n	8007106 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80070a4:	4b23      	ldr	r3, [pc, #140]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b0:	d038      	beq.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80070b2:	4b20      	ldr	r3, [pc, #128]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070ba:	4a1e      	ldr	r2, [pc, #120]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80070c2:	4b1d      	ldr	r3, [pc, #116]	; (8007138 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2232      	movs	r2, #50	; 0x32
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	4a1b      	ldr	r2, [pc, #108]	; (800713c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80070ce:	fba2 2303 	umull	r2, r3, r2, r3
 80070d2:	0c9b      	lsrs	r3, r3, #18
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070d8:	e002      	b.n	80070e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070e0:	4b14      	ldr	r3, [pc, #80]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d102      	bne.n	80070f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f2      	bne.n	80070da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007100:	d110      	bne.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e00f      	b.n	8007126 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007106:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800710e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007112:	d007      	beq.n	8007124 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007114:	4b07      	ldr	r3, [pc, #28]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800711c:	4a05      	ldr	r2, [pc, #20]	; (8007134 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800711e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007122:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	40007000 	.word	0x40007000
 8007138:	20000000 	.word	0x20000000
 800713c:	431bde83 	.word	0x431bde83

08007140 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007144:	4b05      	ldr	r3, [pc, #20]	; (800715c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	4a04      	ldr	r2, [pc, #16]	; (800715c <HAL_PWREx_EnableVddUSB+0x1c>)
 800714a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800714e:	6053      	str	r3, [r2, #4]
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	40007000 	.word	0x40007000

08007160 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f000 bc56 	b.w	8007a20 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007174:	4ba1      	ldr	r3, [pc, #644]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800717e:	4b9f      	ldr	r3, [pc, #636]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 80e6 	beq.w	8007362 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_RCC_OscConfig+0x4c>
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	f040 808d 	bne.w	80072be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	f040 8089 	bne.w	80072be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80071ac:	4b93      	ldr	r3, [pc, #588]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <HAL_RCC_OscConfig+0x66>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d102      	bne.n	80071c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f000 bc2d 	b.w	8007a20 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ca:	4b8c      	ldr	r3, [pc, #560]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d004      	beq.n	80071e0 <HAL_RCC_OscConfig+0x80>
 80071d6:	4b89      	ldr	r3, [pc, #548]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071de:	e005      	b.n	80071ec <HAL_RCC_OscConfig+0x8c>
 80071e0:	4b86      	ldr	r3, [pc, #536]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80071e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e6:	091b      	lsrs	r3, r3, #4
 80071e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d224      	bcs.n	800723a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fd91 	bl	8007d1c <RCC_SetFlashLatencyFromMSIRange>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d002      	beq.n	8007206 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	f000 bc0d 	b.w	8007a20 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007206:	4b7d      	ldr	r3, [pc, #500]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a7c      	ldr	r2, [pc, #496]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 800720c:	f043 0308 	orr.w	r3, r3, #8
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	4b7a      	ldr	r3, [pc, #488]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	4977      	ldr	r1, [pc, #476]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007220:	4313      	orrs	r3, r2
 8007222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007224:	4b75      	ldr	r3, [pc, #468]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	4972      	ldr	r1, [pc, #456]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007234:	4313      	orrs	r3, r2
 8007236:	604b      	str	r3, [r1, #4]
 8007238:	e025      	b.n	8007286 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800723a:	4b70      	ldr	r3, [pc, #448]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a6f      	ldr	r2, [pc, #444]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007240:	f043 0308 	orr.w	r3, r3, #8
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b6d      	ldr	r3, [pc, #436]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	496a      	ldr	r1, [pc, #424]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007258:	4b68      	ldr	r3, [pc, #416]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	021b      	lsls	r3, r3, #8
 8007266:	4965      	ldr	r1, [pc, #404]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	4618      	mov	r0, r3
 8007278:	f000 fd50 	bl	8007d1c <RCC_SetFlashLatencyFromMSIRange>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e3cc      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007286:	f000 fcb3 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 800728a:	4601      	mov	r1, r0
 800728c:	4b5b      	ldr	r3, [pc, #364]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	091b      	lsrs	r3, r3, #4
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	4a5a      	ldr	r2, [pc, #360]	; (8007400 <HAL_RCC_OscConfig+0x2a0>)
 8007298:	5cd3      	ldrb	r3, [r2, r3]
 800729a:	f003 031f 	and.w	r3, r3, #31
 800729e:	fa21 f303 	lsr.w	r3, r1, r3
 80072a2:	4a58      	ldr	r2, [pc, #352]	; (8007404 <HAL_RCC_OscConfig+0x2a4>)
 80072a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80072a6:	4b58      	ldr	r3, [pc, #352]	; (8007408 <HAL_RCC_OscConfig+0x2a8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fb2c 	bl	8004908 <HAL_InitTick>
 80072b0:	4603      	mov	r3, r0
 80072b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d052      	beq.n	8007360 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	e3b0      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d032      	beq.n	800732c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80072c6:	4b4d      	ldr	r3, [pc, #308]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a4c      	ldr	r2, [pc, #304]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072d2:	f7fd fb69 	bl	80049a8 <HAL_GetTick>
 80072d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072da:	f7fd fb65 	bl	80049a8 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e399      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80072ec:	4b43      	ldr	r3, [pc, #268]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d0f0      	beq.n	80072da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80072f8:	4b40      	ldr	r3, [pc, #256]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a3f      	ldr	r2, [pc, #252]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80072fe:	f043 0308 	orr.w	r3, r3, #8
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4b3d      	ldr	r3, [pc, #244]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	493a      	ldr	r1, [pc, #232]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007316:	4b39      	ldr	r3, [pc, #228]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	4935      	ldr	r1, [pc, #212]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007326:	4313      	orrs	r3, r2
 8007328:	604b      	str	r3, [r1, #4]
 800732a:	e01a      	b.n	8007362 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800732c:	4b33      	ldr	r3, [pc, #204]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a32      	ldr	r2, [pc, #200]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007338:	f7fd fb36 	bl	80049a8 <HAL_GetTick>
 800733c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007340:	f7fd fb32 	bl	80049a8 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b02      	cmp	r3, #2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e366      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007352:	4b2a      	ldr	r3, [pc, #168]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1f0      	bne.n	8007340 <HAL_RCC_OscConfig+0x1e0>
 800735e:	e000      	b.n	8007362 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d073      	beq.n	8007456 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	2b08      	cmp	r3, #8
 8007372:	d005      	beq.n	8007380 <HAL_RCC_OscConfig+0x220>
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	2b0c      	cmp	r3, #12
 8007378:	d10e      	bne.n	8007398 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b03      	cmp	r3, #3
 800737e:	d10b      	bne.n	8007398 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007380:	4b1e      	ldr	r3, [pc, #120]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d063      	beq.n	8007454 <HAL_RCC_OscConfig+0x2f4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d15f      	bne.n	8007454 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e343      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a0:	d106      	bne.n	80073b0 <HAL_RCC_OscConfig+0x250>
 80073a2:	4b16      	ldr	r3, [pc, #88]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a15      	ldr	r2, [pc, #84]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	e01d      	b.n	80073ec <HAL_RCC_OscConfig+0x28c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073b8:	d10c      	bne.n	80073d4 <HAL_RCC_OscConfig+0x274>
 80073ba:	4b10      	ldr	r3, [pc, #64]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a0f      	ldr	r2, [pc, #60]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	4b0d      	ldr	r3, [pc, #52]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a0c      	ldr	r2, [pc, #48]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073d0:	6013      	str	r3, [r2, #0]
 80073d2:	e00b      	b.n	80073ec <HAL_RCC_OscConfig+0x28c>
 80073d4:	4b09      	ldr	r3, [pc, #36]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a08      	ldr	r2, [pc, #32]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	4b06      	ldr	r3, [pc, #24]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a05      	ldr	r2, [pc, #20]	; (80073fc <HAL_RCC_OscConfig+0x29c>)
 80073e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d01b      	beq.n	800742c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073f4:	f7fd fad8 	bl	80049a8 <HAL_GetTick>
 80073f8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073fa:	e010      	b.n	800741e <HAL_RCC_OscConfig+0x2be>
 80073fc:	40021000 	.word	0x40021000
 8007400:	0800d1b0 	.word	0x0800d1b0
 8007404:	20000000 	.word	0x20000000
 8007408:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fd facc 	bl	80049a8 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	; 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e300      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800741e:	4ba0      	ldr	r3, [pc, #640]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0x2ac>
 800742a:	e014      	b.n	8007456 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fd fabc 	bl	80049a8 <HAL_GetTick>
 8007430:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007434:	f7fd fab8 	bl	80049a8 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b64      	cmp	r3, #100	; 0x64
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e2ec      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007446:	4b96      	ldr	r3, [pc, #600]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0x2d4>
 8007452:	e000      	b.n	8007456 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d060      	beq.n	8007524 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d005      	beq.n	8007474 <HAL_RCC_OscConfig+0x314>
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2b0c      	cmp	r3, #12
 800746c:	d119      	bne.n	80074a2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	2b02      	cmp	r3, #2
 8007472:	d116      	bne.n	80074a2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007474:	4b8a      	ldr	r3, [pc, #552]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_OscConfig+0x32c>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e2c9      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800748c:	4b84      	ldr	r3, [pc, #528]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	061b      	lsls	r3, r3, #24
 800749a:	4981      	ldr	r1, [pc, #516]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800749c:	4313      	orrs	r3, r2
 800749e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80074a0:	e040      	b.n	8007524 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d023      	beq.n	80074f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074aa:	4b7d      	ldr	r3, [pc, #500]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a7c      	ldr	r2, [pc, #496]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b6:	f7fd fa77 	bl	80049a8 <HAL_GetTick>
 80074ba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074bc:	e008      	b.n	80074d0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074be:	f7fd fa73 	bl	80049a8 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e2a7      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80074d0:	4b73      	ldr	r3, [pc, #460]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0f0      	beq.n	80074be <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074dc:	4b70      	ldr	r3, [pc, #448]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	061b      	lsls	r3, r3, #24
 80074ea:	496d      	ldr	r1, [pc, #436]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	604b      	str	r3, [r1, #4]
 80074f0:	e018      	b.n	8007524 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6a      	ldr	r2, [pc, #424]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80074f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fe:	f7fd fa53 	bl	80049a8 <HAL_GetTick>
 8007502:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007504:	e008      	b.n	8007518 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007506:	f7fd fa4f 	bl	80049a8 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b02      	cmp	r3, #2
 8007512:	d901      	bls.n	8007518 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e283      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007518:	4b61      	ldr	r3, [pc, #388]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1f0      	bne.n	8007506 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d07f      	beq.n	8007630 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d05f      	beq.n	80075f8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007538:	4b59      	ldr	r3, [pc, #356]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800753a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	429a      	cmp	r2, r3
 800754c:	d037      	beq.n	80075be <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d006      	beq.n	8007566 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e25c      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01b      	beq.n	80075a8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8007570:	4b4b      	ldr	r3, [pc, #300]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007576:	4a4a      	ldr	r2, [pc, #296]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007578:	f023 0301 	bic.w	r3, r3, #1
 800757c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007580:	f7fd fa12 	bl	80049a8 <HAL_GetTick>
 8007584:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007588:	f7fd fa0e 	bl	80049a8 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b11      	cmp	r3, #17
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e242      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800759a:	4b41      	ldr	r3, [pc, #260]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800759c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1ef      	bne.n	8007588 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80075a8:	4b3d      	ldr	r3, [pc, #244]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ae:	f023 0210 	bic.w	r2, r3, #16
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	493a      	ldr	r1, [pc, #232]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075be:	4b38      	ldr	r3, [pc, #224]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075c4:	4a36      	ldr	r2, [pc, #216]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ce:	f7fd f9eb 	bl	80049a8 <HAL_GetTick>
 80075d2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075d6:	f7fd f9e7 	bl	80049a8 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b11      	cmp	r3, #17
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e21b      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80075e8:	4b2d      	ldr	r3, [pc, #180]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d0ef      	beq.n	80075d6 <HAL_RCC_OscConfig+0x476>
 80075f6:	e01b      	b.n	8007630 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075f8:	4b29      	ldr	r3, [pc, #164]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 80075fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fe:	4a28      	ldr	r2, [pc, #160]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007608:	f7fd f9ce 	bl	80049a8 <HAL_GetTick>
 800760c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007610:	f7fd f9ca 	bl	80049a8 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b11      	cmp	r3, #17
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e1fe      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007622:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d1ef      	bne.n	8007610 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80c1 	beq.w	80077c0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007644:	4b16      	ldr	r3, [pc, #88]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10e      	bne.n	800766e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007650:	4b13      	ldr	r3, [pc, #76]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007654:	4a12      	ldr	r2, [pc, #72]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 8007656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765a:	6593      	str	r3, [r2, #88]	; 0x58
 800765c:	4b10      	ldr	r3, [pc, #64]	; (80076a0 <HAL_RCC_OscConfig+0x540>)
 800765e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007668:	2301      	movs	r3, #1
 800766a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800766e:	4b0d      	ldr	r3, [pc, #52]	; (80076a4 <HAL_RCC_OscConfig+0x544>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11c      	bne.n	80076b4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800767a:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <HAL_RCC_OscConfig+0x544>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <HAL_RCC_OscConfig+0x544>)
 8007680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007686:	f7fd f98f 	bl	80049a8 <HAL_GetTick>
 800768a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800768c:	e00c      	b.n	80076a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800768e:	f7fd f98b 	bl	80049a8 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b02      	cmp	r3, #2
 800769a:	d905      	bls.n	80076a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e1bf      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
 80076a0:	40021000 	.word	0x40021000
 80076a4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80076a8:	4bb1      	ldr	r3, [pc, #708]	; (8007970 <HAL_RCC_OscConfig+0x810>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0ec      	beq.n	800768e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d02c      	beq.n	800771a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80076c0:	4bac      	ldr	r3, [pc, #688]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	49a8      	ldr	r1, [pc, #672]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d010      	beq.n	8007708 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80076e6:	4ba3      	ldr	r3, [pc, #652]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ec:	4aa1      	ldr	r2, [pc, #644]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076ee:	f043 0304 	orr.w	r3, r3, #4
 80076f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076f6:	4b9f      	ldr	r3, [pc, #636]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fc:	4a9d      	ldr	r2, [pc, #628]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007706:	e018      	b.n	800773a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007708:	4b9a      	ldr	r3, [pc, #616]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	4a99      	ldr	r2, [pc, #612]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007710:	f043 0301 	orr.w	r3, r3, #1
 8007714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007718:	e00f      	b.n	800773a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800771a:	4b96      	ldr	r3, [pc, #600]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800771c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007720:	4a94      	ldr	r2, [pc, #592]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007722:	f023 0301 	bic.w	r3, r3, #1
 8007726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800772a:	4b92      	ldr	r3, [pc, #584]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007730:	4a90      	ldr	r2, [pc, #576]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007732:	f023 0304 	bic.w	r3, r3, #4
 8007736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d016      	beq.n	8007770 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007742:	f7fd f931 	bl	80049a8 <HAL_GetTick>
 8007746:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007748:	e00a      	b.n	8007760 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800774a:	f7fd f92d 	bl	80049a8 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	f241 3288 	movw	r2, #5000	; 0x1388
 8007758:	4293      	cmp	r3, r2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e15f      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007760:	4b84      	ldr	r3, [pc, #528]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0ed      	beq.n	800774a <HAL_RCC_OscConfig+0x5ea>
 800776e:	e01d      	b.n	80077ac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007770:	f7fd f91a 	bl	80049a8 <HAL_GetTick>
 8007774:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007776:	e00a      	b.n	800778e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007778:	f7fd f916 	bl	80049a8 <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	f241 3288 	movw	r2, #5000	; 0x1388
 8007786:	4293      	cmp	r3, r2
 8007788:	d901      	bls.n	800778e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e148      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800778e:	4b79      	ldr	r3, [pc, #484]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1ed      	bne.n	8007778 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800779c:	4b75      	ldr	r3, [pc, #468]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a2:	4a74      	ldr	r2, [pc, #464]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80077a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d105      	bne.n	80077c0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077b4:	4b6f      	ldr	r3, [pc, #444]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	4a6e      	ldr	r2, [pc, #440]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80077ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d03c      	beq.n	8007846 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01c      	beq.n	800780e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80077d4:	4b67      	ldr	r3, [pc, #412]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80077d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80077da:	4a66      	ldr	r2, [pc, #408]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80077dc:	f043 0301 	orr.w	r3, r3, #1
 80077e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077e4:	f7fd f8e0 	bl	80049a8 <HAL_GetTick>
 80077e8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077ea:	e008      	b.n	80077fe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80077ec:	f7fd f8dc 	bl	80049a8 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d901      	bls.n	80077fe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e110      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077fe:	4b5d      	ldr	r3, [pc, #372]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d0ef      	beq.n	80077ec <HAL_RCC_OscConfig+0x68c>
 800780c:	e01b      	b.n	8007846 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800780e:	4b59      	ldr	r3, [pc, #356]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007814:	4a57      	ldr	r2, [pc, #348]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007816:	f023 0301 	bic.w	r3, r3, #1
 800781a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800781e:	f7fd f8c3 	bl	80049a8 <HAL_GetTick>
 8007822:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007824:	e008      	b.n	8007838 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007826:	f7fd f8bf 	bl	80049a8 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b02      	cmp	r3, #2
 8007832:	d901      	bls.n	8007838 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e0f3      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007838:	4b4e      	ldr	r3, [pc, #312]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800783a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1ef      	bne.n	8007826 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 80e7 	beq.w	8007a1e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	2b02      	cmp	r3, #2
 8007856:	f040 80b7 	bne.w	80079c8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800785a:	4b46      	ldr	r3, [pc, #280]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	f003 0203 	and.w	r2, r3, #3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	429a      	cmp	r2, r3
 800786c:	d124      	bne.n	80078b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007878:	3b01      	subs	r3, #1
 800787a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800787c:	429a      	cmp	r2, r3
 800787e:	d11b      	bne.n	80078b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800788c:	429a      	cmp	r2, r3
 800788e:	d113      	bne.n	80078b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	3b01      	subs	r3, #1
 800789e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d109      	bne.n	80078b8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ae:	085b      	lsrs	r3, r3, #1
 80078b0:	3b01      	subs	r3, #1
 80078b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d061      	beq.n	800797c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d056      	beq.n	800796c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80078be:	4b2d      	ldr	r3, [pc, #180]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a2c      	ldr	r2, [pc, #176]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80078c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80078ca:	f7fd f86d 	bl	80049a8 <HAL_GetTick>
 80078ce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078d0:	e008      	b.n	80078e4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078d2:	f7fd f869 	bl	80049a8 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e09d      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80078e4:	4b23      	ldr	r3, [pc, #140]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f0      	bne.n	80078d2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80078f0:	4b20      	ldr	r3, [pc, #128]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	4b20      	ldr	r3, [pc, #128]	; (8007978 <HAL_RCC_OscConfig+0x818>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007900:	3a01      	subs	r2, #1
 8007902:	0112      	lsls	r2, r2, #4
 8007904:	4311      	orrs	r1, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800790a:	0212      	lsls	r2, r2, #8
 800790c:	4311      	orrs	r1, r2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007912:	0852      	lsrs	r2, r2, #1
 8007914:	3a01      	subs	r2, #1
 8007916:	0552      	lsls	r2, r2, #21
 8007918:	4311      	orrs	r1, r2
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800791e:	0852      	lsrs	r2, r2, #1
 8007920:	3a01      	subs	r2, #1
 8007922:	0652      	lsls	r2, r2, #25
 8007924:	430a      	orrs	r2, r1
 8007926:	4913      	ldr	r1, [pc, #76]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007928:	4313      	orrs	r3, r2
 800792a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800792c:	4b11      	ldr	r3, [pc, #68]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a10      	ldr	r2, [pc, #64]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007938:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	4a0d      	ldr	r2, [pc, #52]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 800793e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007944:	f7fd f830 	bl	80049a8 <HAL_GetTick>
 8007948:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800794c:	f7fd f82c 	bl	80049a8 <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e060      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <HAL_RCC_OscConfig+0x814>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0f0      	beq.n	800794c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800796a:	e058      	b.n	8007a1e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e057      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
 8007970:	40007000 	.word	0x40007000
 8007974:	40021000 	.word	0x40021000
 8007978:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800797c:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d14a      	bne.n	8007a1e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007988:	4b27      	ldr	r3, [pc, #156]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a26      	ldr	r2, [pc, #152]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 800798e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007992:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 800799a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800799e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80079a0:	f7fd f802 	bl	80049a8 <HAL_GetTick>
 80079a4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a8:	f7fc fffe 	bl	80049a8 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e032      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079ba:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x848>
 80079c6:	e02a      	b.n	8007a1e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	d025      	beq.n	8007a1a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079ce:	4b16      	ldr	r3, [pc, #88]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a15      	ldr	r2, [pc, #84]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4a12      	ldr	r2, [pc, #72]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079e0:	f023 0303 	bic.w	r3, r3, #3
 80079e4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 80079ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f2:	f7fc ffd9 	bl	80049a8 <HAL_GetTick>
 80079f6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fa:	f7fc ffd5 	bl	80049a8 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e009      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCC_OscConfig+0x8c8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f0      	bne.n	80079fa <HAL_RCC_OscConfig+0x89a>
 8007a18:	e001      	b.n	8007a1e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3728      	adds	r7, #40	; 0x28
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40021000 	.word	0x40021000

08007a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e0c8      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a40:	4b66      	ldr	r3, [pc, #408]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d910      	bls.n	8007a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4e:	4b63      	ldr	r3, [pc, #396]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f023 0207 	bic.w	r2, r3, #7
 8007a56:	4961      	ldr	r1, [pc, #388]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a5e:	4b5f      	ldr	r3, [pc, #380]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d001      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0b0      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d04c      	beq.n	8007b16 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d107      	bne.n	8007a94 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a84:	4b56      	ldr	r3, [pc, #344]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d121      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	e09e      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d107      	bne.n	8007aac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a9c:	4b50      	ldr	r3, [pc, #320]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d115      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e092      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ab4:	4b4a      	ldr	r3, [pc, #296]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d109      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e086      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ac4:	4b46      	ldr	r3, [pc, #280]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e07e      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ad4:	4b42      	ldr	r3, [pc, #264]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f023 0203 	bic.w	r2, r3, #3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	493f      	ldr	r1, [pc, #252]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ae6:	f7fc ff5f 	bl	80049a8 <HAL_GetTick>
 8007aea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aec:	e00a      	b.n	8007b04 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aee:	f7fc ff5b 	bl	80049a8 <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e066      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b04:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 020c 	and.w	r2, r3, #12
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d1eb      	bne.n	8007aee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d008      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b22:	4b2f      	ldr	r3, [pc, #188]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	492c      	ldr	r1, [pc, #176]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b34:	4b29      	ldr	r3, [pc, #164]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0307 	and.w	r3, r3, #7
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d210      	bcs.n	8007b64 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f023 0207 	bic.w	r2, r3, #7
 8007b4a:	4924      	ldr	r1, [pc, #144]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b52:	4b22      	ldr	r3, [pc, #136]	; (8007bdc <HAL_RCC_ClockConfig+0x1b0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0307 	and.w	r3, r3, #7
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d001      	beq.n	8007b64 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e036      	b.n	8007bd2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d008      	beq.n	8007b82 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b70:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	4918      	ldr	r1, [pc, #96]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0308 	and.w	r3, r3, #8
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d009      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	4910      	ldr	r1, [pc, #64]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ba2:	f000 f825 	bl	8007bf0 <HAL_RCC_GetSysClockFreq>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <HAL_RCC_ClockConfig+0x1b4>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	091b      	lsrs	r3, r3, #4
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	4a0c      	ldr	r2, [pc, #48]	; (8007be4 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb4:	5cd3      	ldrb	r3, [r2, r3]
 8007bb6:	f003 031f 	and.w	r3, r3, #31
 8007bba:	fa21 f303 	lsr.w	r3, r1, r3
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_RCC_ClockConfig+0x1c0>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fc fe9e 	bl	8004908 <HAL_InitTick>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	72fb      	strb	r3, [r7, #11]

  return status;
 8007bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40022000 	.word	0x40022000
 8007be0:	40021000 	.word	0x40021000
 8007be4:	0800d1b0 	.word	0x0800d1b0
 8007be8:	20000000 	.word	0x20000000
 8007bec:	20000004 	.word	0x20000004

08007bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b089      	sub	sp, #36	; 0x24
 8007bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bfe:	4b3d      	ldr	r3, [pc, #244]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f003 030c 	and.w	r3, r3, #12
 8007c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c08:	4b3a      	ldr	r3, [pc, #232]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_RCC_GetSysClockFreq+0x34>
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b0c      	cmp	r3, #12
 8007c1c:	d121      	bne.n	8007c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d11e      	bne.n	8007c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007c24:	4b33      	ldr	r3, [pc, #204]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d107      	bne.n	8007c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007c30:	4b30      	ldr	r3, [pc, #192]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	61fb      	str	r3, [r7, #28]
 8007c3e:	e005      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007c40:	4b2c      	ldr	r3, [pc, #176]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007c4c:	4a2a      	ldr	r2, [pc, #168]	; (8007cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10d      	bne.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007c60:	e00a      	b.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d102      	bne.n	8007c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007c68:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e004      	b.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d101      	bne.n	8007c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007c74:	4b22      	ldr	r3, [pc, #136]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b0c      	cmp	r3, #12
 8007c7c:	d133      	bne.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007c7e:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d002      	beq.n	8007c94 <HAL_RCC_GetSysClockFreq+0xa4>
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d003      	beq.n	8007c9a <HAL_RCC_GetSysClockFreq+0xaa>
 8007c92:	e005      	b.n	8007ca0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007c94:	4b19      	ldr	r3, [pc, #100]	; (8007cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007c96:	617b      	str	r3, [r7, #20]
      break;
 8007c98:	e005      	b.n	8007ca6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007c9a:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8007c9c:	617b      	str	r3, [r7, #20]
      break;
 8007c9e:	e002      	b.n	8007ca6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	617b      	str	r3, [r7, #20]
      break;
 8007ca4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ca6:	4b13      	ldr	r3, [pc, #76]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	091b      	lsrs	r3, r3, #4
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	0a1b      	lsrs	r3, r3, #8
 8007cba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	fb02 f203 	mul.w	r2, r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	0e5b      	lsrs	r3, r3, #25
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3724      	adds	r7, #36	; 0x24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	40021000 	.word	0x40021000
 8007cf8:	0800d1c0 	.word	0x0800d1c0
 8007cfc:	00f42400 	.word	0x00f42400
 8007d00:	007a1200 	.word	0x007a1200

08007d04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d08:	4b03      	ldr	r3, [pc, #12]	; (8007d18 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
 8007d16:	bf00      	nop
 8007d18:	20000000 	.word	0x20000000

08007d1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007d24:	2300      	movs	r3, #0
 8007d26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007d28:	4b2a      	ldr	r3, [pc, #168]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d003      	beq.n	8007d3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007d34:	f7ff f9a0 	bl	8007078 <HAL_PWREx_GetVoltageRange>
 8007d38:	6178      	str	r0, [r7, #20]
 8007d3a:	e014      	b.n	8007d66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d3c:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d40:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d46:	6593      	str	r3, [r2, #88]	; 0x58
 8007d48:	4b22      	ldr	r3, [pc, #136]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007d54:	f7ff f990 	bl	8007078 <HAL_PWREx_GetVoltageRange>
 8007d58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	4a1d      	ldr	r2, [pc, #116]	; (8007dd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d10b      	bne.n	8007d86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b80      	cmp	r3, #128	; 0x80
 8007d72:	d919      	bls.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2ba0      	cmp	r3, #160	; 0xa0
 8007d78:	d902      	bls.n	8007d80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	e013      	b.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007d80:	2301      	movs	r3, #1
 8007d82:	613b      	str	r3, [r7, #16]
 8007d84:	e010      	b.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2b80      	cmp	r3, #128	; 0x80
 8007d8a:	d902      	bls.n	8007d92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007d8c:	2303      	movs	r3, #3
 8007d8e:	613b      	str	r3, [r7, #16]
 8007d90:	e00a      	b.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d102      	bne.n	8007d9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007d98:	2302      	movs	r3, #2
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	e004      	b.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b70      	cmp	r3, #112	; 0x70
 8007da2:	d101      	bne.n	8007da8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007da4:	2301      	movs	r3, #1
 8007da6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007da8:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f023 0207 	bic.w	r2, r3, #7
 8007db0:	4909      	ldr	r1, [pc, #36]	; (8007dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007db8:	4b07      	ldr	r3, [pc, #28]	; (8007dd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0307 	and.w	r3, r3, #7
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d001      	beq.n	8007dca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	40021000 	.word	0x40021000
 8007dd8:	40022000 	.word	0x40022000

08007ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007de4:	2300      	movs	r3, #0
 8007de6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007de8:	2300      	movs	r3, #0
 8007dea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 809e 	beq.w	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007dfe:	4b46      	ldr	r3, [pc, #280]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00d      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e14:	4b40      	ldr	r3, [pc, #256]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e18:	4a3f      	ldr	r2, [pc, #252]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8007e20:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e30:	4b3a      	ldr	r3, [pc, #232]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a39      	ldr	r2, [pc, #228]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e3c:	f7fc fdb4 	bl	80049a8 <HAL_GetTick>
 8007e40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e42:	e009      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e44:	f7fc fdb0 	bl	80049a8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d902      	bls.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	74fb      	strb	r3, [r7, #19]
        break;
 8007e56:	e005      	b.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e58:	4b30      	ldr	r3, [pc, #192]	; (8007f1c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0ef      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d15a      	bne.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e6a:	4b2b      	ldr	r3, [pc, #172]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01e      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d019      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e86:	4b24      	ldr	r3, [pc, #144]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e92:	4b21      	ldr	r3, [pc, #132]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e98:	4a1f      	ldr	r2, [pc, #124]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ea2:	4b1d      	ldr	r3, [pc, #116]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea8:	4a1b      	ldr	r2, [pc, #108]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007eb2:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d016      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec4:	f7fc fd70 	bl	80049a8 <HAL_GetTick>
 8007ec8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eca:	e00b      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ecc:	f7fc fd6c 	bl	80049a8 <HAL_GetTick>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1ad3      	subs	r3, r2, r3
 8007ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d902      	bls.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	74fb      	strb	r3, [r7, #19]
            break;
 8007ee2:	e006      	b.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0ec      	beq.n	8007ecc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8007ef2:	7cfb      	ldrb	r3, [r7, #19]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10b      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ef8:	4b07      	ldr	r3, [pc, #28]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	4904      	ldr	r1, [pc, #16]	; (8007f18 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007f0e:	e009      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f10:	7cfb      	ldrb	r3, [r7, #19]
 8007f12:	74bb      	strb	r3, [r7, #18]
 8007f14:	e006      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8007f16:	bf00      	nop
 8007f18:	40021000 	.word	0x40021000
 8007f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f20:	7cfb      	ldrb	r3, [r7, #19]
 8007f22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f24:	7c7b      	ldrb	r3, [r7, #17]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d105      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f2a:	4b6e      	ldr	r3, [pc, #440]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	4a6d      	ldr	r2, [pc, #436]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00a      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f42:	4b68      	ldr	r3, [pc, #416]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f48:	f023 0203 	bic.w	r2, r3, #3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4964      	ldr	r1, [pc, #400]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f64:	4b5f      	ldr	r3, [pc, #380]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f6a:	f023 020c 	bic.w	r2, r3, #12
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	495c      	ldr	r1, [pc, #368]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f74:	4313      	orrs	r3, r2
 8007f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00a      	beq.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f86:	4b57      	ldr	r3, [pc, #348]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	4953      	ldr	r1, [pc, #332]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0320 	and.w	r3, r3, #32
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00a      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fa8:	4b4e      	ldr	r3, [pc, #312]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	494b      	ldr	r1, [pc, #300]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fca:	4b46      	ldr	r3, [pc, #280]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a1b      	ldr	r3, [r3, #32]
 8007fd8:	4942      	ldr	r1, [pc, #264]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fec:	4b3d      	ldr	r3, [pc, #244]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffa:	493a      	ldr	r1, [pc, #232]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800800e:	4b35      	ldr	r3, [pc, #212]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008014:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	695b      	ldr	r3, [r3, #20]
 800801c:	4931      	ldr	r1, [pc, #196]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800801e:	4313      	orrs	r3, r2
 8008020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008030:	4b2c      	ldr	r3, [pc, #176]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008036:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	4929      	ldr	r1, [pc, #164]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008040:	4313      	orrs	r3, r2
 8008042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	69db      	ldr	r3, [r3, #28]
 8008060:	4920      	ldr	r1, [pc, #128]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008062:	4313      	orrs	r3, r2
 8008064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008070:	2b00      	cmp	r3, #0
 8008072:	d015      	beq.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800807a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008082:	4918      	ldr	r1, [pc, #96]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008092:	d105      	bne.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008094:	4b13      	ldr	r3, [pc, #76]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	4a12      	ldr	r2, [pc, #72]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800809a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800809e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d015      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	490a      	ldr	r1, [pc, #40]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ca:	d105      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	4a04      	ldr	r2, [pc, #16]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80080d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80080d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	40021000 	.word	0x40021000

080080e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e049      	b.n	800818e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f8 fe74 	bl	8000dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	4619      	mov	r1, r3
 8008126:	4610      	mov	r0, r2
 8008128:	f000 fa8a 	bl	8008640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d001      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e03b      	b.n	8008228 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a19      	ldr	r2, [pc, #100]	; (8008234 <HAL_TIM_Base_Start_IT+0x9c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d009      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x4e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d004      	beq.n	80081e6 <HAL_TIM_Base_Start_IT+0x4e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <HAL_TIM_Base_Start_IT+0xa0>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d115      	bne.n	8008212 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <HAL_TIM_Base_Start_IT+0xa4>)
 80081ee:	4013      	ands	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d015      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x8c>
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fe:	d011      	beq.n	8008224 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f042 0201 	orr.w	r2, r2, #1
 800820e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008210:	e008      	b.n	8008224 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f042 0201 	orr.w	r2, r2, #1
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e000      	b.n	8008226 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40012c00 	.word	0x40012c00
 8008238:	40014000 	.word	0x40014000
 800823c:	00010007 	.word	0x00010007

08008240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	2b02      	cmp	r3, #2
 8008254:	d122      	bne.n	800829c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b02      	cmp	r3, #2
 8008262:	d11b      	bne.n	800829c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0202 	mvn.w	r2, #2
 800826c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	699b      	ldr	r3, [r3, #24]
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9be 	bl	8008604 <HAL_TIM_IC_CaptureCallback>
 8008288:	e005      	b.n	8008296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f9b0 	bl	80085f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f9c1 	bl	8008618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d122      	bne.n	80082f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f003 0304 	and.w	r3, r3, #4
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d11b      	bne.n	80082f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0204 	mvn.w	r2, #4
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f994 	bl	8008604 <HAL_TIM_IC_CaptureCallback>
 80082dc:	e005      	b.n	80082ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f986 	bl	80085f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f997 	bl	8008618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0308 	and.w	r3, r3, #8
 80082fa:	2b08      	cmp	r3, #8
 80082fc:	d122      	bne.n	8008344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b08      	cmp	r3, #8
 800830a:	d11b      	bne.n	8008344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f06f 0208 	mvn.w	r2, #8
 8008314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d003      	beq.n	8008332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f96a 	bl	8008604 <HAL_TIM_IC_CaptureCallback>
 8008330:	e005      	b.n	800833e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f95c 	bl	80085f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f96d 	bl	8008618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	691b      	ldr	r3, [r3, #16]
 800834a:	f003 0310 	and.w	r3, r3, #16
 800834e:	2b10      	cmp	r3, #16
 8008350:	d122      	bne.n	8008398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f003 0310 	and.w	r3, r3, #16
 800835c:	2b10      	cmp	r3, #16
 800835e:	d11b      	bne.n	8008398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f06f 0210 	mvn.w	r2, #16
 8008368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2208      	movs	r2, #8
 800836e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f940 	bl	8008604 <HAL_TIM_IC_CaptureCallback>
 8008384:	e005      	b.n	8008392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f932 	bl	80085f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f943 	bl	8008618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d10e      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0201 	mvn.w	r2, #1
 80083bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7f8 fb7e 	bl	8000ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ce:	2b80      	cmp	r3, #128	; 0x80
 80083d0:	d10e      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083dc:	2b80      	cmp	r3, #128	; 0x80
 80083de:	d107      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa96 	bl	800891c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fe:	d10e      	bne.n	800841e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840a:	2b80      	cmp	r3, #128	; 0x80
 800840c:	d107      	bne.n	800841e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fa89 	bl	8008930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	d10e      	bne.n	800844a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008436:	2b40      	cmp	r3, #64	; 0x40
 8008438:	d107      	bne.n	800844a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8f1 	bl	800862c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f003 0320 	and.w	r3, r3, #32
 8008454:	2b20      	cmp	r3, #32
 8008456:	d10e      	bne.n	8008476 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b20      	cmp	r3, #32
 8008464:	d107      	bne.n	8008476 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f06f 0220 	mvn.w	r2, #32
 800846e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 fa49 	bl	8008908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b084      	sub	sp, #16
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_TIM_ConfigClockSource+0x18>
 8008492:	2302      	movs	r3, #2
 8008494:	e0a8      	b.n	80085e8 <HAL_TIM_ConfigClockSource+0x16a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d067      	beq.n	80085a2 <HAL_TIM_ConfigClockSource+0x124>
 80084d2:	2b40      	cmp	r3, #64	; 0x40
 80084d4:	d80b      	bhi.n	80084ee <HAL_TIM_ConfigClockSource+0x70>
 80084d6:	2b10      	cmp	r3, #16
 80084d8:	d073      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x144>
 80084da:	2b10      	cmp	r3, #16
 80084dc:	d802      	bhi.n	80084e4 <HAL_TIM_ConfigClockSource+0x66>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d06f      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80084e2:	e078      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80084e4:	2b20      	cmp	r3, #32
 80084e6:	d06c      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x144>
 80084e8:	2b30      	cmp	r3, #48	; 0x30
 80084ea:	d06a      	beq.n	80085c2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80084ec:	e073      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80084ee:	2b70      	cmp	r3, #112	; 0x70
 80084f0:	d00d      	beq.n	800850e <HAL_TIM_ConfigClockSource+0x90>
 80084f2:	2b70      	cmp	r3, #112	; 0x70
 80084f4:	d804      	bhi.n	8008500 <HAL_TIM_ConfigClockSource+0x82>
 80084f6:	2b50      	cmp	r3, #80	; 0x50
 80084f8:	d033      	beq.n	8008562 <HAL_TIM_ConfigClockSource+0xe4>
 80084fa:	2b60      	cmp	r3, #96	; 0x60
 80084fc:	d041      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80084fe:	e06a      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008504:	d066      	beq.n	80085d4 <HAL_TIM_ConfigClockSource+0x156>
 8008506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850a:	d017      	beq.n	800853c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800850c:	e063      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	6899      	ldr	r1, [r3, #8]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f000 f96d 	bl	80087fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008530:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	609a      	str	r2, [r3, #8]
      break;
 800853a:	e04c      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	6899      	ldr	r1, [r3, #8]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	f000 f956 	bl	80087fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689a      	ldr	r2, [r3, #8]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800855e:	609a      	str	r2, [r3, #8]
      break;
 8008560:	e039      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	6859      	ldr	r1, [r3, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	461a      	mov	r2, r3
 8008570:	f000 f8ca 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2150      	movs	r1, #80	; 0x50
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f923 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 8008580:	e029      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6859      	ldr	r1, [r3, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	f000 f8e9 	bl	8008766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2160      	movs	r1, #96	; 0x60
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f913 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80085a0:	e019      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6818      	ldr	r0, [r3, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6859      	ldr	r1, [r3, #4]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	461a      	mov	r2, r3
 80085b0:	f000 f8aa 	bl	8008708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2140      	movs	r1, #64	; 0x40
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f903 	bl	80087c6 <TIM_ITRx_SetConfig>
      break;
 80085c0:	e009      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f000 f8fa 	bl	80087c6 <TIM_ITRx_SetConfig>
        break;
 80085d2:	e000      	b.n	80085d6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80085d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a2a      	ldr	r2, [pc, #168]	; (80086fc <TIM_Base_SetConfig+0xbc>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_Base_SetConfig+0x20>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800865e:	d108      	bne.n	8008672 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a21      	ldr	r2, [pc, #132]	; (80086fc <TIM_Base_SetConfig+0xbc>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00b      	beq.n	8008692 <TIM_Base_SetConfig+0x52>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008680:	d007      	beq.n	8008692 <TIM_Base_SetConfig+0x52>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a1e      	ldr	r2, [pc, #120]	; (8008700 <TIM_Base_SetConfig+0xc0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_Base_SetConfig+0x52>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <TIM_Base_SetConfig+0xc4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d108      	bne.n	80086a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a0c      	ldr	r2, [pc, #48]	; (80086fc <TIM_Base_SetConfig+0xbc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d007      	beq.n	80086e0 <TIM_Base_SetConfig+0xa0>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a0b      	ldr	r2, [pc, #44]	; (8008700 <TIM_Base_SetConfig+0xc0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d003      	beq.n	80086e0 <TIM_Base_SetConfig+0xa0>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a0a      	ldr	r2, [pc, #40]	; (8008704 <TIM_Base_SetConfig+0xc4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d103      	bne.n	80086e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	691a      	ldr	r2, [r3, #16]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	615a      	str	r2, [r3, #20]
}
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40012c00 	.word	0x40012c00
 8008700:	40014000 	.word	0x40014000
 8008704:	40014400 	.word	0x40014400

08008708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	f023 0201 	bic.w	r2, r3, #1
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	011b      	lsls	r3, r3, #4
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4313      	orrs	r3, r2
 800873c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f023 030a 	bic.w	r3, r3, #10
 8008744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	4313      	orrs	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	621a      	str	r2, [r3, #32]
}
 800875a:	bf00      	nop
 800875c:	371c      	adds	r7, #28
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008766:	b480      	push	{r7}
 8008768:	b087      	sub	sp, #28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f023 0210 	bic.w	r2, r3, #16
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	031b      	lsls	r3, r3, #12
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	697a      	ldr	r2, [r7, #20]
 80087b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	621a      	str	r2, [r3, #32]
}
 80087ba:	bf00      	nop
 80087bc:	371c      	adds	r7, #28
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f043 0307 	orr.w	r3, r3, #7
 80087e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	609a      	str	r2, [r3, #8]
}
 80087f0:	bf00      	nop
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	021a      	lsls	r2, r3, #8
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	431a      	orrs	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4313      	orrs	r3, r2
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	609a      	str	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	371c      	adds	r7, #28
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008850:	2302      	movs	r3, #2
 8008852:	e04f      	b.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a21      	ldr	r2, [pc, #132]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d108      	bne.n	8008890 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008884:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	4313      	orrs	r3, r2
 800888e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4313      	orrs	r3, r2
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a14      	ldr	r2, [pc, #80]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d009      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088bc:	d004      	beq.n	80088c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a10      	ldr	r2, [pc, #64]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d10c      	bne.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40014000 	.word	0x40014000

08008908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008944:	b084      	sub	sp, #16
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	f107 0014 	add.w	r0, r7, #20
 8008952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	370c      	adds	r7, #12
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	b004      	add	sp, #16
 8008964:	4770      	bx	lr

08008966 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008976:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800897a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800899c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80089a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80089a8:	b29a      	uxth	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	43db      	mvns	r3, r3
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4013      	ands	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80089e4:	b084      	sub	sp, #16
 80089e6:	b480      	push	{r7}
 80089e8:	b083      	sub	sp, #12
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	f107 0014 	add.w	r0, r7, #20
 80089f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	b004      	add	sp, #16
 8008a24:	4770      	bx	lr
	...

08008a28 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b09b      	sub	sp, #108	; 0x6c
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a32:	2300      	movs	r3, #0
 8008a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	78db      	ldrb	r3, [r3, #3]
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d81f      	bhi.n	8008a9a <USB_ActivateEndpoint+0x72>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <USB_ActivateEndpoint+0x38>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a71 	.word	0x08008a71
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008aa3 	.word	0x08008aa3
 8008a6c:	08008a7f 	.word	0x08008a7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a78:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a7c:	e012      	b.n	8008aa4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a82:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008a86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a8a:	e00b      	b.n	8008aa4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008a90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a94:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8008a98:	e004      	b.n	8008aa4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8008aa0:	e000      	b.n	8008aa4 <USB_ActivateEndpoint+0x7c>
      break;
 8008aa2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4413      	add	r3, r2
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	b21b      	sxth	r3, r3
 8008ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ade:	b21a      	sxth	r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b21b      	sxth	r3, r3
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	b21b      	sxth	r3, r3
 8008aea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	441a      	add	r2, r3
 8008af8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	7b1b      	ldrb	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f040 8149 	bne.w	8008dac <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785b      	ldrb	r3, [r3, #1]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8084 	beq.w	8008c2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	4413      	add	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	00da      	lsls	r2, r3, #3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	88db      	ldrh	r3, [r3, #6]
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	81fb      	strh	r3, [r7, #14]
 8008b66:	89fb      	ldrh	r3, [r7, #14]
 8008b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01b      	beq.n	8008ba8 <USB_ActivateEndpoint+0x180>
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	4413      	add	r3, r2
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b86:	81bb      	strh	r3, [r7, #12]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	441a      	add	r2, r3
 8008b92:	89bb      	ldrh	r3, [r7, #12]
 8008b94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ba0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	78db      	ldrb	r3, [r3, #3]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d020      	beq.n	8008bf2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	4413      	add	r3, r2
 8008bba:	881b      	ldrh	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bc6:	813b      	strh	r3, [r7, #8]
 8008bc8:	893b      	ldrh	r3, [r7, #8]
 8008bca:	f083 0320 	eor.w	r3, r3, #32
 8008bce:	813b      	strh	r3, [r7, #8]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	441a      	add	r2, r3
 8008bda:	893b      	ldrh	r3, [r7, #8]
 8008bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	8013      	strh	r3, [r2, #0]
 8008bf0:	e27f      	b.n	80090f2 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c08:	817b      	strh	r3, [r7, #10]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	897b      	ldrh	r3, [r7, #10]
 8008c16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	8013      	strh	r3, [r2, #0]
 8008c2a:	e262      	b.n	80090f2 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	461a      	mov	r2, r3
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	4413      	add	r3, r2
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	00da      	lsls	r2, r3, #3
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	4413      	add	r3, r2
 8008c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	88db      	ldrh	r3, [r3, #6]
 8008c54:	085b      	lsrs	r3, r3, #1
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	627b      	str	r3, [r7, #36]	; 0x24
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	4413      	add	r3, r2
 8008c72:	627b      	str	r3, [r7, #36]	; 0x24
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	00da      	lsls	r2, r3, #3
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c82:	623b      	str	r3, [r7, #32]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d112      	bne.n	8008cb2 <USB_ActivateEndpoint+0x28a>
 8008c8c:	6a3b      	ldr	r3, [r7, #32]
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6a3b      	ldr	r3, [r7, #32]
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	801a      	strh	r2, [r3, #0]
 8008cb0:	e02f      	b.n	8008d12 <USB_ActivateEndpoint+0x2ea>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b3e      	cmp	r3, #62	; 0x3e
 8008cb8:	d813      	bhi.n	8008ce2 <USB_ActivateEndpoint+0x2ba>
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	085b      	lsrs	r3, r3, #1
 8008cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0301 	and.w	r3, r3, #1
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <USB_ActivateEndpoint+0x2ac>
 8008cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8008cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	029b      	lsls	r3, r3, #10
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	e017      	b.n	8008d12 <USB_ActivateEndpoint+0x2ea>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	095b      	lsrs	r3, r3, #5
 8008ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d102      	bne.n	8008cfc <USB_ActivateEndpoint+0x2d4>
 8008cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8008cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	029b      	lsls	r3, r3, #10
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	83fb      	strh	r3, [r7, #30]
 8008d20:	8bfb      	ldrh	r3, [r7, #30]
 8008d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d01b      	beq.n	8008d62 <USB_ActivateEndpoint+0x33a>
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d40:	83bb      	strh	r3, [r7, #28]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	8bbb      	ldrh	r3, [r7, #28]
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d78:	837b      	strh	r3, [r7, #26]
 8008d7a:	8b7b      	ldrh	r3, [r7, #26]
 8008d7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d80:	837b      	strh	r3, [r7, #26]
 8008d82:	8b7b      	ldrh	r3, [r7, #26]
 8008d84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d88:	837b      	strh	r3, [r7, #26]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	441a      	add	r2, r3
 8008d94:	8b7b      	ldrh	r3, [r7, #26]
 8008d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	8013      	strh	r3, [r2, #0]
 8008daa:	e1a2      	b.n	80090f2 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dc2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	441a      	add	r2, r3
 8008dd0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ddc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008df8:	4413      	add	r3, r2
 8008dfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	00da      	lsls	r2, r3, #3
 8008e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	891b      	ldrh	r3, [r3, #8]
 8008e10:	085b      	lsrs	r3, r3, #1
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	005b      	lsls	r3, r3, #1
 8008e16:	b29a      	uxth	r2, r3
 8008e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e1a:	801a      	strh	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	461a      	mov	r2, r3
 8008e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e2c:	4413      	add	r3, r2
 8008e2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	00da      	lsls	r2, r3, #3
 8008e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e38:	4413      	add	r3, r2
 8008e3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	895b      	ldrh	r3, [r3, #10]
 8008e44:	085b      	lsrs	r3, r3, #1
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e4e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f040 8091 	bne.w	8008f7c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008e68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d01b      	beq.n	8008eaa <USB_ActivateEndpoint+0x482>
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e88:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	441a      	add	r2, r3
 8008e94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	873b      	strh	r3, [r7, #56]	; 0x38
 8008eb8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d01b      	beq.n	8008efa <USB_ActivateEndpoint+0x4d2>
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ed8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	441a      	add	r2, r3
 8008ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ee6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f10:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008f12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f18:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008f1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	441a      	add	r2, r3
 8008f2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008f2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f58:	867b      	strh	r3, [r7, #50]	; 0x32
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	441a      	add	r2, r3
 8008f64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008f66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	8013      	strh	r3, [r2, #0]
 8008f7a:	e0ba      	b.n	80090f2 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008f8c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008f90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01d      	beq.n	8008fd4 <USB_ActivateEndpoint+0x5ac>
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	441a      	add	r2, r3
 8008fbc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008fc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008fe4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01d      	beq.n	800902c <USB_ActivateEndpoint+0x604>
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	881b      	ldrh	r3, [r3, #0]
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	441a      	add	r2, r3
 8009014:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009024:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009028:	b29b      	uxth	r3, r3
 800902a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	78db      	ldrb	r3, [r3, #3]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d024      	beq.n	800907e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800904a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800904e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009052:	f083 0320 	eor.w	r3, r3, #32
 8009056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	441a      	add	r2, r3
 8009064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009068:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800906c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009078:	b29b      	uxth	r3, r3
 800907a:	8013      	strh	r3, [r2, #0]
 800907c:	e01d      	b.n	80090ba <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009094:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	441a      	add	r2, r3
 80090a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80090f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	376c      	adds	r7, #108	; 0x6c
 80090fa:	46bd      	mov	sp, r7
 80090fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop

08009104 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009104:	b480      	push	{r7}
 8009106:	b08d      	sub	sp, #52	; 0x34
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	7b1b      	ldrb	r3, [r3, #12]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f040 808e 	bne.w	8009234 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	785b      	ldrb	r3, [r3, #1]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d044      	beq.n	80091aa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	81bb      	strh	r3, [r7, #12]
 800912e:	89bb      	ldrh	r3, [r7, #12]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d01b      	beq.n	8009170 <USB_DeactivateEndpoint+0x6c>
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	4413      	add	r3, r2
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800914a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914e:	817b      	strh	r3, [r7, #10]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	441a      	add	r2, r3
 800915a:	897b      	ldrh	r3, [r7, #10]
 800915c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009168:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800916c:	b29b      	uxth	r3, r3
 800916e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	b29b      	uxth	r3, r3
 800917e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009186:	813b      	strh	r3, [r7, #8]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	441a      	add	r2, r3
 8009192:	893b      	ldrh	r3, [r7, #8]
 8009194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800919c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	8013      	strh	r3, [r2, #0]
 80091a8:	e192      	b.n	80094d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	881b      	ldrh	r3, [r3, #0]
 80091b6:	827b      	strh	r3, [r7, #18]
 80091b8:	8a7b      	ldrh	r3, [r7, #18]
 80091ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d01b      	beq.n	80091fa <USB_DeactivateEndpoint+0xf6>
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	4413      	add	r3, r2
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091d8:	823b      	strh	r3, [r7, #16]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	441a      	add	r2, r3
 80091e4:	8a3b      	ldrh	r3, [r7, #16]
 80091e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800920c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009210:	81fb      	strh	r3, [r7, #14]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	441a      	add	r2, r3
 800921c:	89fb      	ldrh	r3, [r7, #14]
 800921e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800922a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922e:	b29b      	uxth	r3, r3
 8009230:	8013      	strh	r3, [r2, #0]
 8009232:	e14d      	b.n	80094d0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	785b      	ldrb	r3, [r3, #1]
 8009238:	2b00      	cmp	r3, #0
 800923a:	f040 80a5 	bne.w	8009388 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	843b      	strh	r3, [r7, #32]
 800924c:	8c3b      	ldrh	r3, [r7, #32]
 800924e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d01b      	beq.n	800928e <USB_DeactivateEndpoint+0x18a>
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	b29b      	uxth	r3, r3
 8009264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800926c:	83fb      	strh	r3, [r7, #30]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	441a      	add	r2, r3
 8009278:	8bfb      	ldrh	r3, [r7, #30]
 800927a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800927e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928a:	b29b      	uxth	r3, r3
 800928c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	83bb      	strh	r3, [r7, #28]
 800929c:	8bbb      	ldrh	r3, [r7, #28]
 800929e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01b      	beq.n	80092de <USB_DeactivateEndpoint+0x1da>
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092bc:	837b      	strh	r3, [r7, #26]
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	441a      	add	r2, r3
 80092c8:	8b7b      	ldrh	r3, [r7, #26]
 80092ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092da:	b29b      	uxth	r3, r3
 80092dc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f4:	833b      	strh	r3, [r7, #24]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	8b3b      	ldrh	r3, [r7, #24]
 8009302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800930a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800930e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009312:	b29b      	uxth	r3, r3
 8009314:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	b29b      	uxth	r3, r3
 8009324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932c:	82fb      	strh	r3, [r7, #22]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	009b      	lsls	r3, r3, #2
 8009336:	441a      	add	r2, r3
 8009338:	8afb      	ldrh	r3, [r7, #22]
 800933a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800933e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800934a:	b29b      	uxth	r3, r3
 800934c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29b      	uxth	r3, r3
 800935c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009364:	82bb      	strh	r3, [r7, #20]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	441a      	add	r2, r3
 8009370:	8abb      	ldrh	r3, [r7, #20]
 8009372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800937a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800937e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009382:	b29b      	uxth	r3, r3
 8009384:	8013      	strh	r3, [r2, #0]
 8009386:	e0a3      	b.n	80094d0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d01b      	beq.n	80093d8 <USB_DeactivateEndpoint+0x2d4>
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4413      	add	r3, r2
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	441a      	add	r2, r3
 80093c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80093c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80093e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80093e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d01b      	beq.n	8009428 <USB_DeactivateEndpoint+0x324>
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	4413      	add	r3, r2
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009406:	853b      	strh	r3, [r7, #40]	; 0x28
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	441a      	add	r2, r3
 8009412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800941c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009420:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009424:	b29b      	uxth	r3, r3
 8009426:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800943a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	441a      	add	r2, r3
 800944a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800944c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945c:	b29b      	uxth	r3, r3
 800945e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	881b      	ldrh	r3, [r3, #0]
 800946c:	b29b      	uxth	r3, r3
 800946e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009476:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	441a      	add	r2, r3
 8009482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800948c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	b29b      	uxth	r3, r3
 8009496:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80094bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3734      	adds	r7, #52	; 0x34
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b0c4      	sub	sp, #272	; 0x110
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	1d3b      	adds	r3, r7, #4
 80094e6:	6018      	str	r0, [r3, #0]
 80094e8:	463b      	mov	r3, r7
 80094ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094ec:	463b      	mov	r3, r7
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	785b      	ldrb	r3, [r3, #1]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	f040 8566 	bne.w	8009fc4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80094f8:	463b      	mov	r3, r7
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699a      	ldr	r2, [r3, #24]
 80094fe:	463b      	mov	r3, r7
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	429a      	cmp	r2, r3
 8009506:	d905      	bls.n	8009514 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009508:	463b      	mov	r3, r7
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009512:	e004      	b.n	800951e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8009514:	463b      	mov	r3, r7
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800951e:	463b      	mov	r3, r7
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	7b1b      	ldrb	r3, [r3, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d12c      	bne.n	8009582 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009528:	463b      	mov	r3, r7
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6959      	ldr	r1, [r3, #20]
 800952e:	463b      	mov	r3, r7
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	88da      	ldrh	r2, [r3, #6]
 8009534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009538:	b29b      	uxth	r3, r3
 800953a:	1d38      	adds	r0, r7, #4
 800953c:	6800      	ldr	r0, [r0, #0]
 800953e:	f001 fa58 	bl	800a9f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	1d3b      	adds	r3, r7, #4
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009550:	b29b      	uxth	r3, r3
 8009552:	461a      	mov	r2, r3
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	4413      	add	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	463b      	mov	r3, r7
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	00da      	lsls	r2, r3, #3
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	4413      	add	r3, r2
 8009566:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800956a:	f107 0310 	add.w	r3, r7, #16
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009574:	b29a      	uxth	r2, r3
 8009576:	f107 0310 	add.w	r3, r7, #16
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	801a      	strh	r2, [r3, #0]
 800957e:	f000 bcec 	b.w	8009f5a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009582:	463b      	mov	r3, r7
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	78db      	ldrb	r3, [r3, #3]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f040 8356 	bne.w	8009c3a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800958e:	463b      	mov	r3, r7
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6a1a      	ldr	r2, [r3, #32]
 8009594:	463b      	mov	r3, r7
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	429a      	cmp	r2, r3
 800959c:	f240 82fa 	bls.w	8009b94 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80095a0:	1d3b      	adds	r3, r7, #4
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	463b      	mov	r3, r7
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	4413      	add	r3, r2
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80095be:	1d3b      	adds	r3, r7, #4
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	441a      	add	r2, r3
 80095cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80095d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80095dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80095e4:	463b      	mov	r3, r7
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095ee:	463b      	mov	r3, r7
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	6a1a      	ldr	r2, [r3, #32]
 80095f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095f8:	1ad2      	subs	r2, r2, r3
 80095fa:	463b      	mov	r3, r7
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009600:	1d3b      	adds	r3, r7, #4
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	463b      	mov	r3, r7
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	b29b      	uxth	r3, r3
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 815e 	beq.w	80098d8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800961c:	1d3b      	adds	r3, r7, #4
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
 8009622:	463b      	mov	r3, r7
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d164      	bne.n	80096f6 <USB_EPStartXfer+0x218>
 800962c:	1d3b      	adds	r3, r7, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009632:	1d3b      	adds	r3, r7, #4
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800963a:	b29b      	uxth	r3, r3
 800963c:	461a      	mov	r2, r3
 800963e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009640:	4413      	add	r3, r2
 8009642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009644:	463b      	mov	r3, r7
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00da      	lsls	r2, r3, #3
 800964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800964e:	4413      	add	r3, r2
 8009650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009654:	62bb      	str	r3, [r7, #40]	; 0x28
 8009656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800965a:	2b00      	cmp	r3, #0
 800965c:	d112      	bne.n	8009684 <USB_EPStartXfer+0x1a6>
 800965e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009668:	b29a      	uxth	r2, r3
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	b29b      	uxth	r3, r3
 8009674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800967c:	b29a      	uxth	r2, r3
 800967e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009680:	801a      	strh	r2, [r3, #0]
 8009682:	e054      	b.n	800972e <USB_EPStartXfer+0x250>
 8009684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009688:	2b3e      	cmp	r3, #62	; 0x3e
 800968a:	d817      	bhi.n	80096bc <USB_EPStartXfer+0x1de>
 800968c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009690:	085b      	lsrs	r3, r3, #1
 8009692:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009696:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <USB_EPStartXfer+0x1ce>
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a6:	3301      	adds	r3, #1
 80096a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	029b      	lsls	r3, r3, #10
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b8:	801a      	strh	r2, [r3, #0]
 80096ba:	e038      	b.n	800972e <USB_EPStartXfer+0x250>
 80096bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096c0:	095b      	lsrs	r3, r3, #5
 80096c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096ca:	f003 031f 	and.w	r3, r3, #31
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d104      	bne.n	80096dc <USB_EPStartXfer+0x1fe>
 80096d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d6:	3b01      	subs	r3, #1
 80096d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80096dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	029b      	lsls	r3, r3, #10
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	e01b      	b.n	800972e <USB_EPStartXfer+0x250>
 80096f6:	463b      	mov	r3, r7
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d116      	bne.n	800972e <USB_EPStartXfer+0x250>
 8009700:	1d3b      	adds	r3, r7, #4
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009708:	b29b      	uxth	r3, r3
 800970a:	461a      	mov	r2, r3
 800970c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970e:	4413      	add	r3, r2
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
 8009712:	463b      	mov	r3, r7
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	00da      	lsls	r2, r3, #3
 800971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971c:	4413      	add	r3, r2
 800971e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009722:	633b      	str	r3, [r7, #48]	; 0x30
 8009724:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009728:	b29a      	uxth	r2, r3
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800972e:	463b      	mov	r3, r7
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	895b      	ldrh	r3, [r3, #10]
 8009734:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009738:	463b      	mov	r3, r7
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6959      	ldr	r1, [r3, #20]
 800973e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009742:	b29b      	uxth	r3, r3
 8009744:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009748:	1d38      	adds	r0, r7, #4
 800974a:	6800      	ldr	r0, [r0, #0]
 800974c:	f001 f951 	bl	800a9f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8009750:	463b      	mov	r3, r7
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	695a      	ldr	r2, [r3, #20]
 8009756:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800975a:	441a      	add	r2, r3
 800975c:	463b      	mov	r3, r7
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009762:	463b      	mov	r3, r7
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a1a      	ldr	r2, [r3, #32]
 8009768:	463b      	mov	r3, r7
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	429a      	cmp	r2, r3
 8009770:	d90e      	bls.n	8009790 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8009772:	463b      	mov	r3, r7
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800977c:	463b      	mov	r3, r7
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	463b      	mov	r3, r7
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	621a      	str	r2, [r3, #32]
 800978e:	e008      	b.n	80097a2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009790:	463b      	mov	r3, r7
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800979a:	463b      	mov	r3, r7
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097a2:	463b      	mov	r3, r7
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	785b      	ldrb	r3, [r3, #1]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d164      	bne.n	8009876 <USB_EPStartXfer+0x398>
 80097ac:	1d3b      	adds	r3, r7, #4
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	61fb      	str	r3, [r7, #28]
 80097b2:	1d3b      	adds	r3, r7, #4
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	61fb      	str	r3, [r7, #28]
 80097c4:	463b      	mov	r3, r7
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	00da      	lsls	r2, r3, #3
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097d4:	61bb      	str	r3, [r7, #24]
 80097d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d112      	bne.n	8009804 <USB_EPStartXfer+0x326>
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	801a      	strh	r2, [r3, #0]
 8009802:	e057      	b.n	80098b4 <USB_EPStartXfer+0x3d6>
 8009804:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009808:	2b3e      	cmp	r3, #62	; 0x3e
 800980a:	d817      	bhi.n	800983c <USB_EPStartXfer+0x35e>
 800980c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009810:	085b      	lsrs	r3, r3, #1
 8009812:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800981a:	f003 0301 	and.w	r3, r3, #1
 800981e:	2b00      	cmp	r3, #0
 8009820:	d004      	beq.n	800982c <USB_EPStartXfer+0x34e>
 8009822:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009826:	3301      	adds	r3, #1
 8009828:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800982c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009830:	b29b      	uxth	r3, r3
 8009832:	029b      	lsls	r3, r3, #10
 8009834:	b29a      	uxth	r2, r3
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	801a      	strh	r2, [r3, #0]
 800983a:	e03b      	b.n	80098b4 <USB_EPStartXfer+0x3d6>
 800983c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009840:	095b      	lsrs	r3, r3, #5
 8009842:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009846:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800984a:	f003 031f 	and.w	r3, r3, #31
 800984e:	2b00      	cmp	r3, #0
 8009850:	d104      	bne.n	800985c <USB_EPStartXfer+0x37e>
 8009852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009856:	3b01      	subs	r3, #1
 8009858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800985c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009860:	b29b      	uxth	r3, r3
 8009862:	029b      	lsls	r3, r3, #10
 8009864:	b29b      	uxth	r3, r3
 8009866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800986a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800986e:	b29a      	uxth	r2, r3
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	801a      	strh	r2, [r3, #0]
 8009874:	e01e      	b.n	80098b4 <USB_EPStartXfer+0x3d6>
 8009876:	463b      	mov	r3, r7
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	785b      	ldrb	r3, [r3, #1]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d119      	bne.n	80098b4 <USB_EPStartXfer+0x3d6>
 8009880:	1d3b      	adds	r3, r7, #4
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	627b      	str	r3, [r7, #36]	; 0x24
 8009886:	1d3b      	adds	r3, r7, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800988e:	b29b      	uxth	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009894:	4413      	add	r3, r2
 8009896:	627b      	str	r3, [r7, #36]	; 0x24
 8009898:	463b      	mov	r3, r7
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	00da      	lsls	r2, r3, #3
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	4413      	add	r3, r2
 80098a4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098a8:	623b      	str	r3, [r7, #32]
 80098aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098b4:	463b      	mov	r3, r7
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	891b      	ldrh	r3, [r3, #8]
 80098ba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098be:	463b      	mov	r3, r7
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	6959      	ldr	r1, [r3, #20]
 80098c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80098ce:	1d38      	adds	r0, r7, #4
 80098d0:	6800      	ldr	r0, [r0, #0]
 80098d2:	f001 f88e 	bl	800a9f2 <USB_WritePMA>
 80098d6:	e340      	b.n	8009f5a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098d8:	463b      	mov	r3, r7
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d164      	bne.n	80099ac <USB_EPStartXfer+0x4ce>
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098e8:	1d3b      	adds	r3, r7, #4
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	461a      	mov	r2, r3
 80098f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f6:	4413      	add	r3, r2
 80098f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098fa:	463b      	mov	r3, r7
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	00da      	lsls	r2, r3, #3
 8009902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009904:	4413      	add	r3, r2
 8009906:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800990a:	64bb      	str	r3, [r7, #72]	; 0x48
 800990c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009910:	2b00      	cmp	r3, #0
 8009912:	d112      	bne.n	800993a <USB_EPStartXfer+0x45c>
 8009914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009916:	881b      	ldrh	r3, [r3, #0]
 8009918:	b29b      	uxth	r3, r3
 800991a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800991e:	b29a      	uxth	r2, r3
 8009920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800992e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009932:	b29a      	uxth	r2, r3
 8009934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009936:	801a      	strh	r2, [r3, #0]
 8009938:	e057      	b.n	80099ea <USB_EPStartXfer+0x50c>
 800993a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800993e:	2b3e      	cmp	r3, #62	; 0x3e
 8009940:	d817      	bhi.n	8009972 <USB_EPStartXfer+0x494>
 8009942:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009946:	085b      	lsrs	r3, r3, #1
 8009948:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800994c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d004      	beq.n	8009962 <USB_EPStartXfer+0x484>
 8009958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800995c:	3301      	adds	r3, #1
 800995e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009966:	b29b      	uxth	r3, r3
 8009968:	029b      	lsls	r3, r3, #10
 800996a:	b29a      	uxth	r2, r3
 800996c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	e03b      	b.n	80099ea <USB_EPStartXfer+0x50c>
 8009972:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800997c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009980:	f003 031f 	and.w	r3, r3, #31
 8009984:	2b00      	cmp	r3, #0
 8009986:	d104      	bne.n	8009992 <USB_EPStartXfer+0x4b4>
 8009988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800998c:	3b01      	subs	r3, #1
 800998e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009996:	b29b      	uxth	r3, r3
 8009998:	029b      	lsls	r3, r3, #10
 800999a:	b29b      	uxth	r3, r3
 800999c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	e01e      	b.n	80099ea <USB_EPStartXfer+0x50c>
 80099ac:	463b      	mov	r3, r7
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d119      	bne.n	80099ea <USB_EPStartXfer+0x50c>
 80099b6:	1d3b      	adds	r3, r7, #4
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	657b      	str	r3, [r7, #84]	; 0x54
 80099bc:	1d3b      	adds	r3, r7, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	461a      	mov	r2, r3
 80099c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ca:	4413      	add	r3, r2
 80099cc:	657b      	str	r3, [r7, #84]	; 0x54
 80099ce:	463b      	mov	r3, r7
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	00da      	lsls	r2, r3, #3
 80099d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099d8:	4413      	add	r3, r2
 80099da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099de:	653b      	str	r3, [r7, #80]	; 0x50
 80099e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099ea:	463b      	mov	r3, r7
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	891b      	ldrh	r3, [r3, #8]
 80099f0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099f4:	463b      	mov	r3, r7
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	6959      	ldr	r1, [r3, #20]
 80099fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009a04:	1d38      	adds	r0, r7, #4
 8009a06:	6800      	ldr	r0, [r0, #0]
 8009a08:	f000 fff3 	bl	800a9f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a0c:	463b      	mov	r3, r7
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695a      	ldr	r2, [r3, #20]
 8009a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a16:	441a      	add	r2, r3
 8009a18:	463b      	mov	r3, r7
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a1e:	463b      	mov	r3, r7
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6a1a      	ldr	r2, [r3, #32]
 8009a24:	463b      	mov	r3, r7
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d90e      	bls.n	8009a4c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8009a2e:	463b      	mov	r3, r7
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009a38:	463b      	mov	r3, r7
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	6a1a      	ldr	r2, [r3, #32]
 8009a3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	463b      	mov	r3, r7
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	621a      	str	r2, [r3, #32]
 8009a4a:	e008      	b.n	8009a5e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a4c:	463b      	mov	r3, r7
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8009a56:	463b      	mov	r3, r7
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a5e:	1d3b      	adds	r3, r7, #4
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	647b      	str	r3, [r7, #68]	; 0x44
 8009a64:	463b      	mov	r3, r7
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	785b      	ldrb	r3, [r3, #1]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d164      	bne.n	8009b38 <USB_EPStartXfer+0x65a>
 8009a6e:	1d3b      	adds	r3, r7, #4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a74:	1d3b      	adds	r3, r7, #4
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a82:	4413      	add	r3, r2
 8009a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a86:	463b      	mov	r3, r7
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	00da      	lsls	r2, r3, #3
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a90:	4413      	add	r3, r2
 8009a92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d112      	bne.n	8009ac6 <USB_EPStartXfer+0x5e8>
 8009aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009aaa:	b29a      	uxth	r2, r3
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e054      	b.n	8009b70 <USB_EPStartXfer+0x692>
 8009ac6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009aca:	2b3e      	cmp	r3, #62	; 0x3e
 8009acc:	d817      	bhi.n	8009afe <USB_EPStartXfer+0x620>
 8009ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ad2:	085b      	lsrs	r3, r3, #1
 8009ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ad8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <USB_EPStartXfer+0x610>
 8009ae4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ae8:	3301      	adds	r3, #1
 8009aea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009aee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	029b      	lsls	r3, r3, #10
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	801a      	strh	r2, [r3, #0]
 8009afc:	e038      	b.n	8009b70 <USB_EPStartXfer+0x692>
 8009afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b02:	095b      	lsrs	r3, r3, #5
 8009b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b0c:	f003 031f 	and.w	r3, r3, #31
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <USB_EPStartXfer+0x640>
 8009b14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	029b      	lsls	r3, r3, #10
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e01b      	b.n	8009b70 <USB_EPStartXfer+0x692>
 8009b38:	463b      	mov	r3, r7
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	785b      	ldrb	r3, [r3, #1]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d116      	bne.n	8009b70 <USB_EPStartXfer+0x692>
 8009b42:	1d3b      	adds	r3, r7, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b50:	4413      	add	r3, r2
 8009b52:	647b      	str	r3, [r7, #68]	; 0x44
 8009b54:	463b      	mov	r3, r7
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	00da      	lsls	r2, r3, #3
 8009b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b5e:	4413      	add	r3, r2
 8009b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b64:	643b      	str	r3, [r7, #64]	; 0x40
 8009b66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b70:	463b      	mov	r3, r7
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	895b      	ldrh	r3, [r3, #10]
 8009b76:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b7a:	463b      	mov	r3, r7
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6959      	ldr	r1, [r3, #20]
 8009b80:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009b8a:	1d38      	adds	r0, r7, #4
 8009b8c:	6800      	ldr	r0, [r0, #0]
 8009b8e:	f000 ff30 	bl	800a9f2 <USB_WritePMA>
 8009b92:	e1e2      	b.n	8009f5a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8009b94:	463b      	mov	r3, r7
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6a1b      	ldr	r3, [r3, #32]
 8009b9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8009b9e:	1d3b      	adds	r3, r7, #4
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	463b      	mov	r3, r7
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	4413      	add	r3, r2
 8009bac:	881b      	ldrh	r3, [r3, #0]
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bb8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009bbc:	1d3b      	adds	r3, r7, #4
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	463b      	mov	r3, r7
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	441a      	add	r2, r3
 8009bca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009be2:	1d3b      	adds	r3, r7, #4
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	663b      	str	r3, [r7, #96]	; 0x60
 8009be8:	1d3b      	adds	r3, r7, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bf6:	4413      	add	r3, r2
 8009bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8009bfa:	463b      	mov	r3, r7
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	00da      	lsls	r2, r3, #3
 8009c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c04:	4413      	add	r3, r2
 8009c06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c16:	463b      	mov	r3, r7
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	891b      	ldrh	r3, [r3, #8]
 8009c1c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c20:	463b      	mov	r3, r7
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6959      	ldr	r1, [r3, #20]
 8009c26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009c30:	1d38      	adds	r0, r7, #4
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	f000 fedd 	bl	800a9f2 <USB_WritePMA>
 8009c38:	e18f      	b.n	8009f5a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c3a:	1d3b      	adds	r3, r7, #4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	463b      	mov	r3, r7
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 808f 	beq.w	8009d74 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c56:	1d3b      	adds	r3, r7, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d164      	bne.n	8009d30 <USB_EPStartXfer+0x852>
 8009c66:	1d3b      	adds	r3, r7, #4
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c6c:	1d3b      	adds	r3, r7, #4
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c7a:	4413      	add	r3, r2
 8009c7c:	673b      	str	r3, [r7, #112]	; 0x70
 8009c7e:	463b      	mov	r3, r7
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	00da      	lsls	r2, r3, #3
 8009c86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c88:	4413      	add	r3, r2
 8009c8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d112      	bne.n	8009cbe <USB_EPStartXfer+0x7e0>
 8009c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ca6:	801a      	strh	r2, [r3, #0]
 8009ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e054      	b.n	8009d68 <USB_EPStartXfer+0x88a>
 8009cbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cc2:	2b3e      	cmp	r3, #62	; 0x3e
 8009cc4:	d817      	bhi.n	8009cf6 <USB_EPStartXfer+0x818>
 8009cc6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cca:	085b      	lsrs	r3, r3, #1
 8009ccc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009cd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cd4:	f003 0301 	and.w	r3, r3, #1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d004      	beq.n	8009ce6 <USB_EPStartXfer+0x808>
 8009cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	029b      	lsls	r3, r3, #10
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf2:	801a      	strh	r2, [r3, #0]
 8009cf4:	e038      	b.n	8009d68 <USB_EPStartXfer+0x88a>
 8009cf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d104      	bne.n	8009d16 <USB_EPStartXfer+0x838>
 8009d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d10:	3b01      	subs	r3, #1
 8009d12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	029b      	lsls	r3, r3, #10
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d2c:	801a      	strh	r2, [r3, #0]
 8009d2e:	e01b      	b.n	8009d68 <USB_EPStartXfer+0x88a>
 8009d30:	463b      	mov	r3, r7
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d116      	bne.n	8009d68 <USB_EPStartXfer+0x88a>
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	461a      	mov	r2, r3
 8009d46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d48:	4413      	add	r3, r2
 8009d4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	00da      	lsls	r2, r3, #3
 8009d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d56:	4413      	add	r3, r2
 8009d58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d5c:	677b      	str	r3, [r7, #116]	; 0x74
 8009d5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d68:	463b      	mov	r3, r7
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	895b      	ldrh	r3, [r3, #10]
 8009d6e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8009d72:	e097      	b.n	8009ea4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d74:	463b      	mov	r3, r7
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d168      	bne.n	8009e50 <USB_EPStartXfer+0x972>
 8009d7e:	1d3b      	adds	r3, r7, #4
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d86:	1d3b      	adds	r3, r7, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	461a      	mov	r2, r3
 8009d92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d96:	4413      	add	r3, r2
 8009d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	00da      	lsls	r2, r3, #3
 8009da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009da8:	4413      	add	r3, r2
 8009daa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009db0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d112      	bne.n	8009dde <USB_EPStartXfer+0x900>
 8009db8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dba:	881b      	ldrh	r3, [r3, #0]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dc6:	801a      	strh	r2, [r3, #0]
 8009dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e05d      	b.n	8009e9a <USB_EPStartXfer+0x9bc>
 8009dde:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009de2:	2b3e      	cmp	r3, #62	; 0x3e
 8009de4:	d817      	bhi.n	8009e16 <USB_EPStartXfer+0x938>
 8009de6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dea:	085b      	lsrs	r3, r3, #1
 8009dec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009df0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009df4:	f003 0301 	and.w	r3, r3, #1
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <USB_EPStartXfer+0x928>
 8009dfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e00:	3301      	adds	r3, #1
 8009e02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	029b      	lsls	r3, r3, #10
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	e041      	b.n	8009e9a <USB_EPStartXfer+0x9bc>
 8009e16:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e1a:	095b      	lsrs	r3, r3, #5
 8009e1c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <USB_EPStartXfer+0x958>
 8009e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e30:	3b01      	subs	r3, #1
 8009e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	029b      	lsls	r3, r3, #10
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e4c:	801a      	strh	r2, [r3, #0]
 8009e4e:	e024      	b.n	8009e9a <USB_EPStartXfer+0x9bc>
 8009e50:	463b      	mov	r3, r7
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	785b      	ldrb	r3, [r3, #1]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d11f      	bne.n	8009e9a <USB_EPStartXfer+0x9bc>
 8009e5a:	1d3b      	adds	r3, r7, #4
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e62:	1d3b      	adds	r3, r7, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e72:	4413      	add	r3, r2
 8009e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e78:	463b      	mov	r3, r7
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	00da      	lsls	r2, r3, #3
 8009e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e84:	4413      	add	r3, r2
 8009e86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e9a:	463b      	mov	r3, r7
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	891b      	ldrh	r3, [r3, #8]
 8009ea0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6959      	ldr	r1, [r3, #20]
 8009eaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009eb4:	1d38      	adds	r0, r7, #4
 8009eb6:	6800      	ldr	r0, [r0, #0]
 8009eb8:	f000 fd9b 	bl	800a9f2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009ebc:	463b      	mov	r3, r7
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d122      	bne.n	8009f0c <USB_EPStartXfer+0xa2e>
 8009ec6:	1d3b      	adds	r3, r7, #4
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	463b      	mov	r3, r7
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009ee4:	1d3b      	adds	r3, r7, #4
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	463b      	mov	r3, r7
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	441a      	add	r2, r3
 8009ef2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	8013      	strh	r3, [r2, #0]
 8009f0a:	e026      	b.n	8009f5a <USB_EPStartXfer+0xa7c>
 8009f0c:	463b      	mov	r3, r7
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d121      	bne.n	8009f5a <USB_EPStartXfer+0xa7c>
 8009f16:	1d3b      	adds	r3, r7, #4
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	463b      	mov	r3, r7
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f30:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009f34:	1d3b      	adds	r3, r7, #4
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	463b      	mov	r3, r7
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	441a      	add	r2, r3
 8009f42:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009f5a:	1d3b      	adds	r3, r7, #4
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	463b      	mov	r3, r7
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	881b      	ldrh	r3, [r3, #0]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f107 020e 	add.w	r2, r7, #14
 8009f70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f78:	8013      	strh	r3, [r2, #0]
 8009f7a:	f107 030e 	add.w	r3, r7, #14
 8009f7e:	f107 020e 	add.w	r2, r7, #14
 8009f82:	8812      	ldrh	r2, [r2, #0]
 8009f84:	f082 0210 	eor.w	r2, r2, #16
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	f107 030e 	add.w	r3, r7, #14
 8009f8e:	f107 020e 	add.w	r2, r7, #14
 8009f92:	8812      	ldrh	r2, [r2, #0]
 8009f94:	f082 0220 	eor.w	r2, r2, #32
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	1d3b      	adds	r3, r7, #4
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	463b      	mov	r3, r7
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	441a      	add	r2, r3
 8009fa8:	f107 030e 	add.w	r3, r7, #14
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	8013      	strh	r3, [r2, #0]
 8009fc2:	e3b5      	b.n	800a730 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	7b1b      	ldrb	r3, [r3, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f040 8090 	bne.w	800a0f0 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8009fd0:	463b      	mov	r3, r7
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	699a      	ldr	r2, [r3, #24]
 8009fd6:	463b      	mov	r3, r7
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d90e      	bls.n	8009ffe <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8009fe0:	463b      	mov	r3, r7
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8009fea:	463b      	mov	r3, r7
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	699a      	ldr	r2, [r3, #24]
 8009ff0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ff4:	1ad2      	subs	r2, r2, r3
 8009ff6:	463b      	mov	r3, r7
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	619a      	str	r2, [r3, #24]
 8009ffc:	e008      	b.n	800a010 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8009ffe:	463b      	mov	r3, r7
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800a008:	463b      	mov	r3, r7
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2200      	movs	r2, #0
 800a00e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a010:	1d3b      	adds	r3, r7, #4
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a018:	1d3b      	adds	r3, r7, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a020:	b29b      	uxth	r3, r3
 800a022:	461a      	mov	r2, r3
 800a024:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a028:	4413      	add	r3, r2
 800a02a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a02e:	463b      	mov	r3, r7
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	00da      	lsls	r2, r3, #3
 800a036:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a03a:	4413      	add	r3, r2
 800a03c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a044:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d116      	bne.n	800a07a <USB_EPStartXfer+0xb9c>
 800a04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	b29b      	uxth	r3, r3
 800a054:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a058:	b29a      	uxth	r2, r3
 800a05a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a05e:	801a      	strh	r2, [r3, #0]
 800a060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a064:	881b      	ldrh	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a06c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a070:	b29a      	uxth	r2, r3
 800a072:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	e32c      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a07a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a07e:	2b3e      	cmp	r3, #62	; 0x3e
 800a080:	d818      	bhi.n	800a0b4 <USB_EPStartXfer+0xbd6>
 800a082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a086:	085b      	lsrs	r3, r3, #1
 800a088:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a08c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a090:	f003 0301 	and.w	r3, r3, #1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d004      	beq.n	800a0a2 <USB_EPStartXfer+0xbc4>
 800a098:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a09c:	3301      	adds	r3, #1
 800a09e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	029b      	lsls	r3, r3, #10
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0b0:	801a      	strh	r2, [r3, #0]
 800a0b2:	e30f      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a0b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a0c2:	f003 031f 	and.w	r3, r3, #31
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d104      	bne.n	800a0d4 <USB_EPStartXfer+0xbf6>
 800a0ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a0d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	029b      	lsls	r3, r3, #10
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a0ec:	801a      	strh	r2, [r3, #0]
 800a0ee:	e2f1      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800a0f0:	463b      	mov	r3, r7
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	78db      	ldrb	r3, [r3, #3]
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	f040 818f 	bne.w	800a41a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	785b      	ldrb	r3, [r3, #1]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d175      	bne.n	800a1f2 <USB_EPStartXfer+0xd14>
 800a106:	1d3b      	adds	r3, r7, #4
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a10e:	1d3b      	adds	r3, r7, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a116:	b29b      	uxth	r3, r3
 800a118:	461a      	mov	r2, r3
 800a11a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a11e:	4413      	add	r3, r2
 800a120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a124:	463b      	mov	r3, r7
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	00da      	lsls	r2, r3, #3
 800a12c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a130:	4413      	add	r3, r2
 800a132:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a13a:	463b      	mov	r3, r7
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d116      	bne.n	800a172 <USB_EPStartXfer+0xc94>
 800a144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a150:	b29a      	uxth	r2, r3
 800a152:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a156:	801a      	strh	r2, [r3, #0]
 800a158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a168:	b29a      	uxth	r2, r3
 800a16a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a16e:	801a      	strh	r2, [r3, #0]
 800a170:	e065      	b.n	800a23e <USB_EPStartXfer+0xd60>
 800a172:	463b      	mov	r3, r7
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b3e      	cmp	r3, #62	; 0x3e
 800a17a:	d81a      	bhi.n	800a1b2 <USB_EPStartXfer+0xcd4>
 800a17c:	463b      	mov	r3, r7
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a188:	463b      	mov	r3, r7
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	691b      	ldr	r3, [r3, #16]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <USB_EPStartXfer+0xcc2>
 800a196:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a19a:	3301      	adds	r3, #1
 800a19c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	029b      	lsls	r3, r3, #10
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ae:	801a      	strh	r2, [r3, #0]
 800a1b0:	e045      	b.n	800a23e <USB_EPStartXfer+0xd60>
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	095b      	lsrs	r3, r3, #5
 800a1ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1be:	463b      	mov	r3, r7
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <USB_EPStartXfer+0xcf8>
 800a1cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ee:	801a      	strh	r2, [r3, #0]
 800a1f0:	e025      	b.n	800a23e <USB_EPStartXfer+0xd60>
 800a1f2:	463b      	mov	r3, r7
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d120      	bne.n	800a23e <USB_EPStartXfer+0xd60>
 800a1fc:	1d3b      	adds	r3, r7, #4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a204:	1d3b      	adds	r3, r7, #4
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a214:	4413      	add	r3, r2
 800a216:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a21a:	463b      	mov	r3, r7
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	00da      	lsls	r2, r3, #3
 800a222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a226:	4413      	add	r3, r2
 800a228:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a22c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a230:	463b      	mov	r3, r7
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	b29a      	uxth	r2, r3
 800a238:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a23c:	801a      	strh	r2, [r3, #0]
 800a23e:	1d3b      	adds	r3, r7, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a246:	463b      	mov	r3, r7
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	785b      	ldrb	r3, [r3, #1]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d175      	bne.n	800a33c <USB_EPStartXfer+0xe5e>
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a258:	1d3b      	adds	r3, r7, #4
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a260:	b29b      	uxth	r3, r3
 800a262:	461a      	mov	r2, r3
 800a264:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a268:	4413      	add	r3, r2
 800a26a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a26e:	463b      	mov	r3, r7
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	00da      	lsls	r2, r3, #3
 800a276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a27a:	4413      	add	r3, r2
 800a27c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a284:	463b      	mov	r3, r7
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d116      	bne.n	800a2bc <USB_EPStartXfer+0xdde>
 800a28e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29b      	uxth	r3, r3
 800a296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	e061      	b.n	800a380 <USB_EPStartXfer+0xea2>
 800a2bc:	463b      	mov	r3, r7
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	2b3e      	cmp	r3, #62	; 0x3e
 800a2c4:	d81a      	bhi.n	800a2fc <USB_EPStartXfer+0xe1e>
 800a2c6:	463b      	mov	r3, r7
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	085b      	lsrs	r3, r3, #1
 800a2ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d004      	beq.n	800a2ea <USB_EPStartXfer+0xe0c>
 800a2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	029b      	lsls	r3, r3, #10
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2f8:	801a      	strh	r2, [r3, #0]
 800a2fa:	e041      	b.n	800a380 <USB_EPStartXfer+0xea2>
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	095b      	lsrs	r3, r3, #5
 800a304:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a308:	463b      	mov	r3, r7
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	f003 031f 	and.w	r3, r3, #31
 800a312:	2b00      	cmp	r3, #0
 800a314:	d104      	bne.n	800a320 <USB_EPStartXfer+0xe42>
 800a316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31a:	3b01      	subs	r3, #1
 800a31c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a324:	b29b      	uxth	r3, r3
 800a326:	029b      	lsls	r3, r3, #10
 800a328:	b29b      	uxth	r3, r3
 800a32a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a32e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a332:	b29a      	uxth	r2, r3
 800a334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e021      	b.n	800a380 <USB_EPStartXfer+0xea2>
 800a33c:	463b      	mov	r3, r7
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	785b      	ldrb	r3, [r3, #1]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d11c      	bne.n	800a380 <USB_EPStartXfer+0xea2>
 800a346:	1d3b      	adds	r3, r7, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a34e:	b29b      	uxth	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a356:	4413      	add	r3, r2
 800a358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a35c:	463b      	mov	r3, r7
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	00da      	lsls	r2, r3, #3
 800a364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a368:	4413      	add	r3, r2
 800a36a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a36e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a372:	463b      	mov	r3, r7
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	b29a      	uxth	r2, r3
 800a37a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a37e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800a380:	463b      	mov	r3, r7
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	2b00      	cmp	r3, #0
 800a388:	f000 81a4 	beq.w	800a6d4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a38c:	1d3b      	adds	r3, r7, #4
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	463b      	mov	r3, r7
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a3a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a3a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d005      	beq.n	800a3b8 <USB_EPStartXfer+0xeda>
 800a3ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10d      	bne.n	800a3d4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a3b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a3bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f040 8187 	bne.w	800a6d4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a3c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f040 8180 	bne.w	800a6d4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a3d4:	1d3b      	adds	r3, r7, #4
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	463b      	mov	r3, r7
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	4413      	add	r3, r2
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800a3f2:	1d3b      	adds	r3, r7, #4
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	441a      	add	r2, r3
 800a400:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800a404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a40c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a414:	b29b      	uxth	r3, r3
 800a416:	8013      	strh	r3, [r2, #0]
 800a418:	e15c      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a41a:	463b      	mov	r3, r7
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	78db      	ldrb	r3, [r3, #3]
 800a420:	2b01      	cmp	r3, #1
 800a422:	f040 8155 	bne.w	800a6d0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800a426:	463b      	mov	r3, r7
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	699a      	ldr	r2, [r3, #24]
 800a42c:	463b      	mov	r3, r7
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	691b      	ldr	r3, [r3, #16]
 800a432:	429a      	cmp	r2, r3
 800a434:	d90e      	bls.n	800a454 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800a436:	463b      	mov	r3, r7
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800a440:	463b      	mov	r3, r7
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699a      	ldr	r2, [r3, #24]
 800a446:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a44a:	1ad2      	subs	r2, r2, r3
 800a44c:	463b      	mov	r3, r7
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	619a      	str	r2, [r3, #24]
 800a452:	e008      	b.n	800a466 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800a454:	463b      	mov	r3, r7
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800a45e:	463b      	mov	r3, r7
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2200      	movs	r2, #0
 800a464:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a466:	463b      	mov	r3, r7
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	785b      	ldrb	r3, [r3, #1]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d16f      	bne.n	800a550 <USB_EPStartXfer+0x1072>
 800a470:	1d3b      	adds	r3, r7, #4
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a478:	1d3b      	adds	r3, r7, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a480:	b29b      	uxth	r3, r3
 800a482:	461a      	mov	r2, r3
 800a484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a488:	4413      	add	r3, r2
 800a48a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a48e:	463b      	mov	r3, r7
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	00da      	lsls	r2, r3, #3
 800a496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a49a:	4413      	add	r3, r2
 800a49c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a4a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d116      	bne.n	800a4da <USB_EPStartXfer+0xffc>
 800a4ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a4b8:	b29a      	uxth	r2, r3
 800a4ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e05f      	b.n	800a59a <USB_EPStartXfer+0x10bc>
 800a4da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4de:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e0:	d818      	bhi.n	800a514 <USB_EPStartXfer+0x1036>
 800a4e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4e6:	085b      	lsrs	r3, r3, #1
 800a4e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d004      	beq.n	800a502 <USB_EPStartXfer+0x1024>
 800a4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a506:	b29b      	uxth	r3, r3
 800a508:	029b      	lsls	r3, r3, #10
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	e042      	b.n	800a59a <USB_EPStartXfer+0x10bc>
 800a514:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a518:	095b      	lsrs	r3, r3, #5
 800a51a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a51e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	2b00      	cmp	r3, #0
 800a528:	d104      	bne.n	800a534 <USB_EPStartXfer+0x1056>
 800a52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a52e:	3b01      	subs	r3, #1
 800a530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a538:	b29b      	uxth	r3, r3
 800a53a:	029b      	lsls	r3, r3, #10
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a546:	b29a      	uxth	r2, r3
 800a548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a54c:	801a      	strh	r2, [r3, #0]
 800a54e:	e024      	b.n	800a59a <USB_EPStartXfer+0x10bc>
 800a550:	463b      	mov	r3, r7
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	785b      	ldrb	r3, [r3, #1]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d11f      	bne.n	800a59a <USB_EPStartXfer+0x10bc>
 800a55a:	1d3b      	adds	r3, r7, #4
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a562:	1d3b      	adds	r3, r7, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a572:	4413      	add	r3, r2
 800a574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a578:	463b      	mov	r3, r7
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	00da      	lsls	r2, r3, #3
 800a580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a584:	4413      	add	r3, r2
 800a586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a58a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a58e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a592:	b29a      	uxth	r2, r3
 800a594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a598:	801a      	strh	r2, [r3, #0]
 800a59a:	1d3b      	adds	r3, r7, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5a2:	463b      	mov	r3, r7
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	785b      	ldrb	r3, [r3, #1]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d16f      	bne.n	800a68c <USB_EPStartXfer+0x11ae>
 800a5ac:	1d3b      	adds	r3, r7, #4
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5b4:	1d3b      	adds	r3, r7, #4
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a5ca:	463b      	mov	r3, r7
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	00da      	lsls	r2, r3, #3
 800a5d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a5e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d116      	bne.n	800a616 <USB_EPStartXfer+0x1138>
 800a5e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5fa:	801a      	strh	r2, [r3, #0]
 800a5fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	b29b      	uxth	r3, r3
 800a604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a612:	801a      	strh	r2, [r3, #0]
 800a614:	e05e      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a616:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a61a:	2b3e      	cmp	r3, #62	; 0x3e
 800a61c:	d818      	bhi.n	800a650 <USB_EPStartXfer+0x1172>
 800a61e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a628:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <USB_EPStartXfer+0x1160>
 800a634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a638:	3301      	adds	r3, #1
 800a63a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a63e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a642:	b29b      	uxth	r3, r3
 800a644:	029b      	lsls	r3, r3, #10
 800a646:	b29a      	uxth	r2, r3
 800a648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a64c:	801a      	strh	r2, [r3, #0]
 800a64e:	e041      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a650:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a654:	095b      	lsrs	r3, r3, #5
 800a656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a65a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	2b00      	cmp	r3, #0
 800a664:	d104      	bne.n	800a670 <USB_EPStartXfer+0x1192>
 800a666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a66a:	3b01      	subs	r3, #1
 800a66c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a674:	b29b      	uxth	r3, r3
 800a676:	029b      	lsls	r3, r3, #10
 800a678:	b29b      	uxth	r3, r3
 800a67a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a67e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a682:	b29a      	uxth	r2, r3
 800a684:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a688:	801a      	strh	r2, [r3, #0]
 800a68a:	e023      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a68c:	463b      	mov	r3, r7
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	785b      	ldrb	r3, [r3, #1]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d11e      	bne.n	800a6d4 <USB_EPStartXfer+0x11f6>
 800a696:	1d3b      	adds	r3, r7, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6ac:	463b      	mov	r3, r7
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	781b      	ldrb	r3, [r3, #0]
 800a6b2:	00da      	lsls	r2, r3, #3
 800a6b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a6cc:	801a      	strh	r2, [r3, #0]
 800a6ce:	e001      	b.n	800a6d4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e02e      	b.n	800a732 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a6d4:	1d3b      	adds	r3, r7, #4
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	463b      	mov	r3, r7
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a6f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a6f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a6fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a702:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a706:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a70a:	1d3b      	adds	r3, r7, #4
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	463b      	mov	r3, r7
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	441a      	add	r2, r3
 800a718:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a71c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a720:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d020      	beq.n	800a790 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	881b      	ldrh	r3, [r3, #0]
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a764:	81bb      	strh	r3, [r7, #12]
 800a766:	89bb      	ldrh	r3, [r7, #12]
 800a768:	f083 0310 	eor.w	r3, r3, #16
 800a76c:	81bb      	strh	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	781b      	ldrb	r3, [r3, #0]
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	441a      	add	r2, r3
 800a778:	89bb      	ldrh	r3, [r7, #12]
 800a77a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a77e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	8013      	strh	r3, [r2, #0]
 800a78e:	e01f      	b.n	800a7d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7a6:	81fb      	strh	r3, [r7, #14]
 800a7a8:	89fb      	ldrh	r3, [r7, #14]
 800a7aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a7ae:	81fb      	strh	r3, [r7, #14]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	441a      	add	r2, r3
 800a7ba:	89fb      	ldrh	r3, [r7, #14]
 800a7bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a7de:	b480      	push	{r7}
 800a7e0:	b087      	sub	sp, #28
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	7b1b      	ldrb	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f040 809d 	bne.w	800a92c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	785b      	ldrb	r3, [r3, #1]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d04c      	beq.n	800a894 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	881b      	ldrh	r3, [r3, #0]
 800a806:	823b      	strh	r3, [r7, #16]
 800a808:	8a3b      	ldrh	r3, [r7, #16]
 800a80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d01b      	beq.n	800a84a <USB_EPClearStall+0x6c>
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	881b      	ldrh	r3, [r3, #0]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a828:	81fb      	strh	r3, [r7, #14]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	441a      	add	r2, r3
 800a834:	89fb      	ldrh	r3, [r7, #14]
 800a836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a83a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a83e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a842:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a846:	b29b      	uxth	r3, r3
 800a848:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	78db      	ldrb	r3, [r3, #3]
 800a84e:	2b01      	cmp	r3, #1
 800a850:	d06c      	beq.n	800a92c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a868:	81bb      	strh	r3, [r7, #12]
 800a86a:	89bb      	ldrh	r3, [r7, #12]
 800a86c:	f083 0320 	eor.w	r3, r3, #32
 800a870:	81bb      	strh	r3, [r7, #12]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	441a      	add	r2, r3
 800a87c:	89bb      	ldrh	r3, [r7, #12]
 800a87e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88e:	b29b      	uxth	r3, r3
 800a890:	8013      	strh	r3, [r2, #0]
 800a892:	e04b      	b.n	800a92c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	881b      	ldrh	r3, [r3, #0]
 800a8a0:	82fb      	strh	r3, [r7, #22]
 800a8a2:	8afb      	ldrh	r3, [r7, #22]
 800a8a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d01b      	beq.n	800a8e4 <USB_EPClearStall+0x106>
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	009b      	lsls	r3, r3, #2
 800a8b4:	4413      	add	r3, r2
 800a8b6:	881b      	ldrh	r3, [r3, #0]
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8c2:	82bb      	strh	r3, [r7, #20]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	441a      	add	r2, r3
 800a8ce:	8abb      	ldrh	r3, [r7, #20]
 800a8d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fa:	827b      	strh	r3, [r7, #18]
 800a8fc:	8a7b      	ldrh	r3, [r7, #18]
 800a8fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a902:	827b      	strh	r3, [r7, #18]
 800a904:	8a7b      	ldrh	r3, [r7, #18]
 800a906:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a90a:	827b      	strh	r3, [r7, #18]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	441a      	add	r2, r3
 800a916:	8a7b      	ldrh	r3, [r7, #18]
 800a918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a91c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a928:	b29b      	uxth	r3, r3
 800a92a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b083      	sub	sp, #12
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	460b      	mov	r3, r1
 800a944:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d103      	bne.n	800a954 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2280      	movs	r2, #128	; 0x80
 800a950:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr

0800a962 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a970:	b29b      	uxth	r3, r3
 800a972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b08d      	sub	sp, #52	; 0x34
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	60f8      	str	r0, [r7, #12]
 800a9fa:	60b9      	str	r1, [r7, #8]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	461a      	mov	r2, r3
 800aa00:	460b      	mov	r3, r1
 800aa02:	80fb      	strh	r3, [r7, #6]
 800aa04:	4613      	mov	r3, r2
 800aa06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800aa08:	88bb      	ldrh	r3, [r7, #4]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	085b      	lsrs	r3, r3, #1
 800aa0e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa18:	88fa      	ldrh	r2, [r7, #6]
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa22:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa28:	e01b      	b.n	800aa62 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	3301      	adds	r3, #1
 800aa34:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	021b      	lsls	r3, r3, #8
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	461a      	mov	r2, r3
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	3302      	adds	r3, #2
 800aa54:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	3301      	adds	r3, #1
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d1e0      	bne.n	800aa2a <USB_WritePMA+0x38>
  }
}
 800aa68:	bf00      	nop
 800aa6a:	3734      	adds	r7, #52	; 0x34
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b08b      	sub	sp, #44	; 0x2c
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	4611      	mov	r1, r2
 800aa80:	461a      	mov	r2, r3
 800aa82:	460b      	mov	r3, r1
 800aa84:	80fb      	strh	r3, [r7, #6]
 800aa86:	4613      	mov	r3, r2
 800aa88:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800aa8a:	88bb      	ldrh	r3, [r7, #4]
 800aa8c:	085b      	lsrs	r3, r3, #1
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aaa4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaaa:	e018      	b.n	800aade <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	3302      	adds	r3, #2
 800aab8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	3301      	adds	r3, #1
 800aac6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	3301      	adds	r3, #1
 800aad6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	3b01      	subs	r3, #1
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
 800aade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1e3      	bne.n	800aaac <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aae4:	88bb      	ldrh	r3, [r7, #4]
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	701a      	strb	r2, [r3, #0]
  }
}
 800ab00:	bf00      	nop
 800ab02:	372c      	adds	r7, #44	; 0x2c
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ab1c:	f002 f9e2 	bl	800cee4 <malloc>
 800ab20:	4603      	mov	r3, r0
 800ab22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d105      	bne.n	800ab36 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ab32:	2302      	movs	r3, #2
 800ab34:	e066      	b.n	800ac04 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	7c1b      	ldrb	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d119      	bne.n	800ab7a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab4a:	2202      	movs	r2, #2
 800ab4c:	2181      	movs	r1, #129	; 0x81
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f001 ff78 	bl	800ca44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ab5e:	2202      	movs	r2, #2
 800ab60:	2101      	movs	r1, #1
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 ff6e 	bl	800ca44 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2210      	movs	r2, #16
 800ab74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ab78:	e016      	b.n	800aba8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ab7a:	2340      	movs	r3, #64	; 0x40
 800ab7c:	2202      	movs	r2, #2
 800ab7e:	2181      	movs	r1, #129	; 0x81
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f001 ff5f 	bl	800ca44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ab8c:	2340      	movs	r3, #64	; 0x40
 800ab8e:	2202      	movs	r2, #2
 800ab90:	2101      	movs	r1, #1
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f001 ff56 	bl	800ca44 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2210      	movs	r2, #16
 800aba4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aba8:	2308      	movs	r3, #8
 800abaa:	2203      	movs	r2, #3
 800abac:	2182      	movs	r1, #130	; 0x82
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f001 ff48 	bl	800ca44 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	7c1b      	ldrb	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abe8:	2101      	movs	r1, #1
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f002 f8a6 	bl	800cd3c <USBD_LL_PrepareReceive>
 800abf0:	e007      	b.n	800ac02 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abf8:	2340      	movs	r3, #64	; 0x40
 800abfa:	2101      	movs	r1, #1
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f002 f89d 	bl	800cd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ac18:	2181      	movs	r1, #129	; 0x81
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f001 ff50 	bl	800cac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ac26:	2101      	movs	r1, #1
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f001 ff49 	bl	800cac0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ac36:	2182      	movs	r1, #130	; 0x82
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f001 ff41 	bl	800cac0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d00e      	beq.n	800ac76 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f002 f943 	bl	800cef4 <free>
    pdev->pClassData = NULL;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac90:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d03a      	beq.n	800ad20 <USBD_CDC_Setup+0xa0>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	f040 8097 	bne.w	800adde <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	88db      	ldrh	r3, [r3, #6]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d029      	beq.n	800ad0c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	b25b      	sxtb	r3, r3
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	da11      	bge.n	800ace6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800acce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	88d2      	ldrh	r2, [r2, #6]
 800acd4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800acd6:	6939      	ldr	r1, [r7, #16]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	88db      	ldrh	r3, [r3, #6]
 800acdc:	461a      	mov	r2, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f001 fa8d 	bl	800c1fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ace4:	e082      	b.n	800adec <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	785a      	ldrb	r2, [r3, #1]
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	88db      	ldrh	r3, [r3, #6]
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800acfc:	6939      	ldr	r1, [r7, #16]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	88db      	ldrh	r3, [r3, #6]
 800ad02:	461a      	mov	r2, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 faa6 	bl	800c256 <USBD_CtlPrepareRx>
      break;
 800ad0a:	e06f      	b.n	800adec <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	7850      	ldrb	r0, [r2, #1]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6839      	ldr	r1, [r7, #0]
 800ad1c:	4798      	blx	r3
      break;
 800ad1e:	e065      	b.n	800adec <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	785b      	ldrb	r3, [r3, #1]
 800ad24:	2b0b      	cmp	r3, #11
 800ad26:	d84f      	bhi.n	800adc8 <USBD_CDC_Setup+0x148>
 800ad28:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <USBD_CDC_Setup+0xb0>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad61 	.word	0x0800ad61
 800ad34:	0800add7 	.word	0x0800add7
 800ad38:	0800adc9 	.word	0x0800adc9
 800ad3c:	0800adc9 	.word	0x0800adc9
 800ad40:	0800adc9 	.word	0x0800adc9
 800ad44:	0800adc9 	.word	0x0800adc9
 800ad48:	0800adc9 	.word	0x0800adc9
 800ad4c:	0800adc9 	.word	0x0800adc9
 800ad50:	0800adc9 	.word	0x0800adc9
 800ad54:	0800adc9 	.word	0x0800adc9
 800ad58:	0800ad89 	.word	0x0800ad89
 800ad5c:	0800adb1 	.word	0x0800adb1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d107      	bne.n	800ad7a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ad6a:	f107 030c 	add.w	r3, r7, #12
 800ad6e:	2202      	movs	r2, #2
 800ad70:	4619      	mov	r1, r3
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f001 fa43 	bl	800c1fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ad78:	e030      	b.n	800addc <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 f9cd 	bl	800c11c <USBD_CtlError>
            ret = USBD_FAIL;
 800ad82:	2303      	movs	r3, #3
 800ad84:	75fb      	strb	r3, [r7, #23]
          break;
 800ad86:	e029      	b.n	800addc <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad8e:	2b03      	cmp	r3, #3
 800ad90:	d107      	bne.n	800ada2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ad92:	f107 030f 	add.w	r3, r7, #15
 800ad96:	2201      	movs	r2, #1
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 fa2f 	bl	800c1fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ada0:	e01c      	b.n	800addc <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f001 f9b9 	bl	800c11c <USBD_CtlError>
            ret = USBD_FAIL;
 800adaa:	2303      	movs	r3, #3
 800adac:	75fb      	strb	r3, [r7, #23]
          break;
 800adae:	e015      	b.n	800addc <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	2b03      	cmp	r3, #3
 800adb8:	d00f      	beq.n	800adda <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 f9ad 	bl	800c11c <USBD_CtlError>
            ret = USBD_FAIL;
 800adc2:	2303      	movs	r3, #3
 800adc4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800adc6:	e008      	b.n	800adda <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 f9a6 	bl	800c11c <USBD_CtlError>
          ret = USBD_FAIL;
 800add0:	2303      	movs	r3, #3
 800add2:	75fb      	strb	r3, [r7, #23]
          break;
 800add4:	e002      	b.n	800addc <USBD_CDC_Setup+0x15c>
          break;
 800add6:	bf00      	nop
 800add8:	e008      	b.n	800adec <USBD_CDC_Setup+0x16c>
          break;
 800adda:	bf00      	nop
      }
      break;
 800addc:	e006      	b.n	800adec <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 f99b 	bl	800c11c <USBD_CtlError>
      ret = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	75fb      	strb	r3, [r7, #23]
      break;
 800adea:	bf00      	nop
  }

  return (uint8_t)ret;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3718      	adds	r7, #24
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop

0800adf8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ae0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e04f      	b.n	800aeba <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae20:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	4613      	mov	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	4413      	add	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	440b      	add	r3, r1
 800ae30:	3318      	adds	r3, #24
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d029      	beq.n	800ae8c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ae38:	78fa      	ldrb	r2, [r7, #3]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	440b      	add	r3, r1
 800ae46:	3318      	adds	r3, #24
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	78f9      	ldrb	r1, [r7, #3]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	440b      	add	r3, r1
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	4403      	add	r3, r0
 800ae58:	3338      	adds	r3, #56	; 0x38
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ae60:	fb03 f301 	mul.w	r3, r3, r1
 800ae64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d110      	bne.n	800ae8c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ae6a:	78fa      	ldrb	r2, [r7, #3]
 800ae6c:	6879      	ldr	r1, [r7, #4]
 800ae6e:	4613      	mov	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	440b      	add	r3, r1
 800ae78:	3318      	adds	r3, #24
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ae7e:	78f9      	ldrb	r1, [r7, #3]
 800ae80:	2300      	movs	r3, #0
 800ae82:	2200      	movs	r2, #0
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 ff21 	bl	800cccc <USBD_LL_Transmit>
 800ae8a:	e015      	b.n	800aeb8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aea6:	691b      	ldr	r3, [r3, #16]
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800aeae:	68ba      	ldr	r2, [r7, #8]
 800aeb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800aeb4:	78fa      	ldrb	r2, [r7, #3]
 800aeb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aec2:	b580      	push	{r7, lr}
 800aec4:	b084      	sub	sp, #16
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	460b      	mov	r3, r1
 800aecc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aed4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e015      	b.n	800af10 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800aee4:	78fb      	ldrb	r3, [r7, #3]
 800aee6:	4619      	mov	r1, r3
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f001 ff5f 	bl	800cdac <USBD_LL_GetRxDataSize>
 800aeee:	4602      	mov	r2, r0
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800af04:	68fa      	ldr	r2, [r7, #12]
 800af06:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800af0a:	4611      	mov	r1, r2
 800af0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800af0e:	2300      	movs	r3, #0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800af26:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d015      	beq.n	800af5e <USBD_CDC_EP0_RxReady+0x46>
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800af38:	2bff      	cmp	r3, #255	; 0xff
 800af3a:	d010      	beq.n	800af5e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	68fa      	ldr	r2, [r7, #12]
 800af46:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800af4a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800af52:	b292      	uxth	r2, r2
 800af54:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	22ff      	movs	r2, #255	; 0xff
 800af5a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2243      	movs	r2, #67	; 0x43
 800af74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800af76:	4b03      	ldr	r3, [pc, #12]	; (800af84 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	20000094 	.word	0x20000094

0800af88 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2243      	movs	r2, #67	; 0x43
 800af94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800af96:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	20000050 	.word	0x20000050

0800afa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2243      	movs	r2, #67	; 0x43
 800afb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800afb6:	4b03      	ldr	r3, [pc, #12]	; (800afc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	200000d8 	.word	0x200000d8

0800afc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	220a      	movs	r2, #10
 800afd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800afd6:	4b03      	ldr	r3, [pc, #12]	; (800afe4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800afd8:	4618      	mov	r0, r3
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr
 800afe4:	2000000c 	.word	0x2000000c

0800afe8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800aff8:	2303      	movs	r3, #3
 800affa:	e004      	b.n	800b006 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b012:	b480      	push	{r7}
 800b014:	b087      	sub	sp, #28
 800b016:	af00      	add	r7, sp, #0
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b024:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b054:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr

0800b06c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b07a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b07c:	2301      	movs	r3, #1
 800b07e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e01a      	b.n	800b0c4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b094:	2b00      	cmp	r3, #0
 800b096:	d114      	bne.n	800b0c2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b0b6:	2181      	movs	r1, #129	; 0x81
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f001 fe07 	bl	800cccc <USBD_LL_Transmit>

    ret = USBD_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e016      	b.n	800b118 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7c1b      	ldrb	r3, [r3, #16]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d109      	bne.n	800b106 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 fe1c 	bl	800cd3c <USBD_LL_PrepareReceive>
 800b104:	e007      	b.n	800b116 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b10c:	2340      	movs	r3, #64	; 0x40
 800b10e:	2101      	movs	r1, #1
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 fe13 	bl	800cd3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b116:	2300      	movs	r3, #0
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4613      	mov	r3, r2
 800b12c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b134:	2303      	movs	r3, #3
 800b136:	e01f      	b.n	800b178 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d003      	beq.n	800b15e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	68ba      	ldr	r2, [r7, #8]
 800b15a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	79fa      	ldrb	r2, [r7, #7]
 800b16a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b16c:	68f8      	ldr	r0, [r7, #12]
 800b16e:	f001 fbd5 	bl	800c91c <USBD_LL_Init>
 800b172:	4603      	mov	r3, r0
 800b174:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b176:	7dfb      	ldrb	r3, [r7, #23]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	e016      	b.n	800b1c6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	f107 020e 	add.w	r2, r7, #14
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	4798      	blx	r3
 800b1bc:	4602      	mov	r2, r0
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}

0800b1ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
 800b1d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f001 fc02 	bl	800c9e0 <USBD_LL_Start>
 800b1dc:	4603      	mov	r3, r0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b083      	sub	sp, #12
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b208:	2303      	movs	r3, #3
 800b20a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b212:	2b00      	cmp	r3, #0
 800b214:	d009      	beq.n	800b22a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	78fa      	ldrb	r2, [r7, #3]
 800b220:	4611      	mov	r1, r2
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
 800b226:	4603      	mov	r3, r0
 800b228:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b246:	2b00      	cmp	r3, #0
 800b248:	d007      	beq.n	800b25a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	78fa      	ldrb	r2, [r7, #3]
 800b254:	4611      	mov	r1, r2
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	4798      	blx	r3
  }

  return USBD_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b274:	6839      	ldr	r1, [r7, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f000 ff16 	bl	800c0a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b28a:	461a      	mov	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b298:	f003 031f 	and.w	r3, r3, #31
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d00e      	beq.n	800b2be <USBD_LL_SetupStage+0x5a>
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d302      	bcc.n	800b2aa <USBD_LL_SetupStage+0x46>
 800b2a4:	2b02      	cmp	r3, #2
 800b2a6:	d014      	beq.n	800b2d2 <USBD_LL_SetupStage+0x6e>
 800b2a8:	e01d      	b.n	800b2e6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f9d6 	bl	800b664 <USBD_StdDevReq>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b2bc:	e020      	b.n	800b300 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fa3a 	bl	800b740 <USBD_StdItfReq>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b2d0:	e016      	b.n	800b300 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa76 	bl	800b7cc <USBD_StdEPReq>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800b2e4:	e00c      	b.n	800b300 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fc19 	bl	800cb2c <USBD_LL_StallEP>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2fe:	bf00      	nop
  }

  return ret;
 800b300:	7bfb      	ldrb	r3, [r7, #15]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b086      	sub	sp, #24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	460b      	mov	r3, r1
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b318:	7afb      	ldrb	r3, [r7, #11]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d137      	bne.n	800b38e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b324:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b32c:	2b03      	cmp	r3, #3
 800b32e:	d14a      	bne.n	800b3c6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d913      	bls.n	800b364 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	1ad2      	subs	r2, r2, r3
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	689b      	ldr	r3, [r3, #8]
 800b352:	4293      	cmp	r3, r2
 800b354:	bf28      	it	cs
 800b356:	4613      	movcs	r3, r2
 800b358:	461a      	mov	r2, r3
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f000 ff97 	bl	800c290 <USBD_CtlContinueRx>
 800b362:	e030      	b.n	800b3c6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00a      	beq.n	800b386 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b376:	2b03      	cmp	r3, #3
 800b378:	d105      	bne.n	800b386 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b380:	691b      	ldr	r3, [r3, #16]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 ff93 	bl	800c2b2 <USBD_CtlSendStatus>
 800b38c:	e01b      	b.n	800b3c6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d013      	beq.n	800b3c2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d10e      	bne.n	800b3c2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	7afa      	ldrb	r2, [r7, #11]
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	4798      	blx	r3
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d003      	beq.n	800b3c6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b3be:	7dfb      	ldrb	r3, [r7, #23]
 800b3c0:	e002      	b.n	800b3c8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e000      	b.n	800b3c8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3718      	adds	r7, #24
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b086      	sub	sp, #24
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d16a      	bne.n	800b4ba <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d155      	bne.n	800b4a0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d914      	bls.n	800b42a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	1ad2      	subs	r2, r2, r3
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	461a      	mov	r2, r3
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 ff0c 	bl	800c234 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b41c:	2300      	movs	r3, #0
 800b41e:	2200      	movs	r2, #0
 800b420:	2100      	movs	r1, #0
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f001 fc8a 	bl	800cd3c <USBD_LL_PrepareReceive>
 800b428:	e03a      	b.n	800b4a0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	68da      	ldr	r2, [r3, #12]
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	429a      	cmp	r2, r3
 800b434:	d11c      	bne.n	800b470 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	685a      	ldr	r2, [r3, #4]
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b43e:	429a      	cmp	r2, r3
 800b440:	d316      	bcc.n	800b470 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d20f      	bcs.n	800b470 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b450:	2200      	movs	r2, #0
 800b452:	2100      	movs	r1, #0
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 feed 	bl	800c234 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b462:	2300      	movs	r3, #0
 800b464:	2200      	movs	r2, #0
 800b466:	2100      	movs	r1, #0
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f001 fc67 	bl	800cd3c <USBD_LL_PrepareReceive>
 800b46e:	e017      	b.n	800b4a0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b482:	2b03      	cmp	r3, #3
 800b484:	d105      	bne.n	800b492 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f001 fb49 	bl	800cb2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 ff1c 	bl	800c2d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d123      	bne.n	800b4f2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fe9b 	bl	800b1e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4b8:	e01b      	b.n	800b4f2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c0:	695b      	ldr	r3, [r3, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d013      	beq.n	800b4ee <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4cc:	2b03      	cmp	r3, #3
 800b4ce:	d10e      	bne.n	800b4ee <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4d6:	695b      	ldr	r3, [r3, #20]
 800b4d8:	7afa      	ldrb	r2, [r7, #11]
 800b4da:	4611      	mov	r1, r2
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	4798      	blx	r3
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b4e4:	7dfb      	ldrb	r3, [r7, #23]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	e002      	b.n	800b4f4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e000      	b.n	800b4f4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3718      	adds	r7, #24
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d009      	beq.n	800b540 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	6852      	ldr	r2, [r2, #4]
 800b538:	b2d2      	uxtb	r2, r2
 800b53a:	4611      	mov	r1, r2
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b540:	2340      	movs	r3, #64	; 0x40
 800b542:	2200      	movs	r2, #0
 800b544:	2100      	movs	r1, #0
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 fa7c 	bl	800ca44 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2240      	movs	r2, #64	; 0x40
 800b558:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b55c:	2340      	movs	r3, #64	; 0x40
 800b55e:	2200      	movs	r2, #0
 800b560:	2180      	movs	r1, #128	; 0x80
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f001 fa6e 	bl	800ca44 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2240      	movs	r2, #64	; 0x40
 800b572:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	460b      	mov	r3, r1
 800b588:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	78fa      	ldrb	r2, [r7, #3]
 800b58e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b590:	2300      	movs	r3, #0
}
 800b592:	4618      	mov	r0, r3
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr

0800b59e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2204      	movs	r2, #4
 800b5b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	370c      	adds	r7, #12
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d6:	2b04      	cmp	r3, #4
 800b5d8:	d105      	bne.n	800b5e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b602:	2b03      	cmp	r3, #3
 800b604:	d10b      	bne.n	800b61e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b60c:	69db      	ldr	r3, [r3, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d005      	beq.n	800b61e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b61e:	2300      	movs	r3, #0
}
 800b620:	4618      	mov	r0, r3
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	3301      	adds	r3, #1
 800b63e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b646:	8a3b      	ldrh	r3, [r7, #16]
 800b648:	021b      	lsls	r3, r3, #8
 800b64a:	b21a      	sxth	r2, r3
 800b64c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b650:	4313      	orrs	r3, r2
 800b652:	b21b      	sxth	r3, r3
 800b654:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b656:	89fb      	ldrh	r3, [r7, #14]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	371c      	adds	r7, #28
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b66e:	2300      	movs	r3, #0
 800b670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b67a:	2b20      	cmp	r3, #32
 800b67c:	d004      	beq.n	800b688 <USBD_StdDevReq+0x24>
 800b67e:	2b40      	cmp	r3, #64	; 0x40
 800b680:	d002      	beq.n	800b688 <USBD_StdDevReq+0x24>
 800b682:	2b00      	cmp	r3, #0
 800b684:	d00a      	beq.n	800b69c <USBD_StdDevReq+0x38>
 800b686:	e050      	b.n	800b72a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	4798      	blx	r3
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]
    break;
 800b69a:	e04b      	b.n	800b734 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	785b      	ldrb	r3, [r3, #1]
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	d83c      	bhi.n	800b71e <USBD_StdDevReq+0xba>
 800b6a4:	a201      	add	r2, pc, #4	; (adr r2, 800b6ac <USBD_StdDevReq+0x48>)
 800b6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6aa:	bf00      	nop
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b715 	.word	0x0800b715
 800b6b4:	0800b71f 	.word	0x0800b71f
 800b6b8:	0800b70b 	.word	0x0800b70b
 800b6bc:	0800b71f 	.word	0x0800b71f
 800b6c0:	0800b6df 	.word	0x0800b6df
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b71f 	.word	0x0800b71f
 800b6cc:	0800b6f7 	.word	0x0800b6f7
 800b6d0:	0800b6e9 	.word	0x0800b6e9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f9d0 	bl	800ba7c <USBD_GetDescriptor>
      break;
 800b6dc:	e024      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fb5f 	bl	800bda4 <USBD_SetAddress>
      break;
 800b6e6:	e01f      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b6e8:	6839      	ldr	r1, [r7, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 fb9c 	bl	800be28 <USBD_SetConfig>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b6f4:	e018      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fc39 	bl	800bf70 <USBD_GetConfig>
      break;
 800b6fe:	e013      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fc68 	bl	800bfd8 <USBD_GetStatus>
      break;
 800b708:	e00e      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fc96 	bl	800c03e <USBD_SetFeature>
      break;
 800b712:	e009      	b.n	800b728 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b714:	6839      	ldr	r1, [r7, #0]
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fca5 	bl	800c066 <USBD_ClrFeature>
      break;
 800b71c:	e004      	b.n	800b728 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b71e:	6839      	ldr	r1, [r7, #0]
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fcfb 	bl	800c11c <USBD_CtlError>
      break;
 800b726:	bf00      	nop
    }
    break;
 800b728:	e004      	b.n	800b734 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fcf5 	bl	800c11c <USBD_CtlError>
    break;
 800b732:	bf00      	nop
  }

  return ret;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop

0800b740 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b756:	2b20      	cmp	r3, #32
 800b758:	d003      	beq.n	800b762 <USBD_StdItfReq+0x22>
 800b75a:	2b40      	cmp	r3, #64	; 0x40
 800b75c:	d001      	beq.n	800b762 <USBD_StdItfReq+0x22>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d12a      	bne.n	800b7b8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b768:	3b01      	subs	r3, #1
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d81d      	bhi.n	800b7aa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	889b      	ldrh	r3, [r3, #4]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	2b01      	cmp	r3, #1
 800b776:	d813      	bhi.n	800b7a0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	4798      	blx	r3
 800b786:	4603      	mov	r3, r0
 800b788:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	88db      	ldrh	r3, [r3, #6]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d110      	bne.n	800b7b4 <USBD_StdItfReq+0x74>
 800b792:	7bfb      	ldrb	r3, [r7, #15]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10d      	bne.n	800b7b4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 fd8a 	bl	800c2b2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b79e:	e009      	b.n	800b7b4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b7a0:	6839      	ldr	r1, [r7, #0]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fcba 	bl	800c11c <USBD_CtlError>
      break;
 800b7a8:	e004      	b.n	800b7b4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fcb5 	bl	800c11c <USBD_CtlError>
      break;
 800b7b2:	e000      	b.n	800b7b6 <USBD_StdItfReq+0x76>
      break;
 800b7b4:	bf00      	nop
    }
    break;
 800b7b6:	e004      	b.n	800b7c2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b7b8:	6839      	ldr	r1, [r7, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fcae 	bl	800c11c <USBD_CtlError>
    break;
 800b7c0:	bf00      	nop
  }

  return ret;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3710      	adds	r7, #16
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b084      	sub	sp, #16
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	889b      	ldrh	r3, [r3, #4]
 800b7de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b7e8:	2b20      	cmp	r3, #32
 800b7ea:	d004      	beq.n	800b7f6 <USBD_StdEPReq+0x2a>
 800b7ec:	2b40      	cmp	r3, #64	; 0x40
 800b7ee:	d002      	beq.n	800b7f6 <USBD_StdEPReq+0x2a>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00a      	beq.n	800b80a <USBD_StdEPReq+0x3e>
 800b7f4:	e137      	b.n	800ba66 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
 800b804:	4603      	mov	r3, r0
 800b806:	73fb      	strb	r3, [r7, #15]
    break;
 800b808:	e132      	b.n	800ba70 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	785b      	ldrb	r3, [r3, #1]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d03e      	beq.n	800b890 <USBD_StdEPReq+0xc4>
 800b812:	2b03      	cmp	r3, #3
 800b814:	d002      	beq.n	800b81c <USBD_StdEPReq+0x50>
 800b816:	2b00      	cmp	r3, #0
 800b818:	d079      	beq.n	800b90e <USBD_StdEPReq+0x142>
 800b81a:	e11e      	b.n	800ba5a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b822:	2b02      	cmp	r3, #2
 800b824:	d002      	beq.n	800b82c <USBD_StdEPReq+0x60>
 800b826:	2b03      	cmp	r3, #3
 800b828:	d015      	beq.n	800b856 <USBD_StdEPReq+0x8a>
 800b82a:	e02b      	b.n	800b884 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00c      	beq.n	800b84c <USBD_StdEPReq+0x80>
 800b832:	7bbb      	ldrb	r3, [r7, #14]
 800b834:	2b80      	cmp	r3, #128	; 0x80
 800b836:	d009      	beq.n	800b84c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	4619      	mov	r1, r3
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f001 f975 	bl	800cb2c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b842:	2180      	movs	r1, #128	; 0x80
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f001 f971 	bl	800cb2c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b84a:	e020      	b.n	800b88e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fc64 	bl	800c11c <USBD_CtlError>
        break;
 800b854:	e01b      	b.n	800b88e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	885b      	ldrh	r3, [r3, #2]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10e      	bne.n	800b87c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00b      	beq.n	800b87c <USBD_StdEPReq+0xb0>
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2b80      	cmp	r3, #128	; 0x80
 800b868:	d008      	beq.n	800b87c <USBD_StdEPReq+0xb0>
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	88db      	ldrh	r3, [r3, #6]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d104      	bne.n	800b87c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b872:	7bbb      	ldrb	r3, [r7, #14]
 800b874:	4619      	mov	r1, r3
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f001 f958 	bl	800cb2c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 fd18 	bl	800c2b2 <USBD_CtlSendStatus>

        break;
 800b882:	e004      	b.n	800b88e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b884:	6839      	ldr	r1, [r7, #0]
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fc48 	bl	800c11c <USBD_CtlError>
        break;
 800b88c:	bf00      	nop
      }
      break;
 800b88e:	e0e9      	b.n	800ba64 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b896:	2b02      	cmp	r3, #2
 800b898:	d002      	beq.n	800b8a0 <USBD_StdEPReq+0xd4>
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	d015      	beq.n	800b8ca <USBD_StdEPReq+0xfe>
 800b89e:	e02f      	b.n	800b900 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b8a0:	7bbb      	ldrb	r3, [r7, #14]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00c      	beq.n	800b8c0 <USBD_StdEPReq+0xf4>
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
 800b8a8:	2b80      	cmp	r3, #128	; 0x80
 800b8aa:	d009      	beq.n	800b8c0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b8ac:	7bbb      	ldrb	r3, [r7, #14]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f001 f93b 	bl	800cb2c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8b6:	2180      	movs	r1, #128	; 0x80
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f001 f937 	bl	800cb2c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b8be:	e025      	b.n	800b90c <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fc2a 	bl	800c11c <USBD_CtlError>
        break;
 800b8c8:	e020      	b.n	800b90c <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	885b      	ldrh	r3, [r3, #2]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d11b      	bne.n	800b90a <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b8d2:	7bbb      	ldrb	r3, [r7, #14]
 800b8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d004      	beq.n	800b8e6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f001 f959 	bl	800cb98 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 fce3 	bl	800c2b2 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b8fe:	e004      	b.n	800b90a <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fc0a 	bl	800c11c <USBD_CtlError>
        break;
 800b908:	e000      	b.n	800b90c <USBD_StdEPReq+0x140>
        break;
 800b90a:	bf00      	nop
      }
      break;
 800b90c:	e0aa      	b.n	800ba64 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b914:	2b02      	cmp	r3, #2
 800b916:	d002      	beq.n	800b91e <USBD_StdEPReq+0x152>
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d032      	beq.n	800b982 <USBD_StdEPReq+0x1b6>
 800b91c:	e097      	b.n	800ba4e <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d007      	beq.n	800b934 <USBD_StdEPReq+0x168>
 800b924:	7bbb      	ldrb	r3, [r7, #14]
 800b926:	2b80      	cmp	r3, #128	; 0x80
 800b928:	d004      	beq.n	800b934 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800b92a:	6839      	ldr	r1, [r7, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fbf5 	bl	800c11c <USBD_CtlError>
          break;
 800b932:	e091      	b.n	800ba58 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	da0b      	bge.n	800b954 <USBD_StdEPReq+0x188>
 800b93c:	7bbb      	ldrb	r3, [r7, #14]
 800b93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b942:	4613      	mov	r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	4413      	add	r3, r2
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	3310      	adds	r3, #16
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	4413      	add	r3, r2
 800b950:	3304      	adds	r3, #4
 800b952:	e00b      	b.n	800b96c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b954:	7bbb      	ldrb	r3, [r7, #14]
 800b956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b95a:	4613      	mov	r3, r2
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	4413      	add	r3, r2
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	4413      	add	r3, r2
 800b96a:	3304      	adds	r3, #4
 800b96c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2202      	movs	r2, #2
 800b978:	4619      	mov	r1, r3
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 fc3f 	bl	800c1fe <USBD_CtlSendData>
        break;
 800b980:	e06a      	b.n	800ba58 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b986:	2b00      	cmp	r3, #0
 800b988:	da11      	bge.n	800b9ae <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b98a:	7bbb      	ldrb	r3, [r7, #14]
 800b98c:	f003 020f 	and.w	r2, r3, #15
 800b990:	6879      	ldr	r1, [r7, #4]
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	440b      	add	r3, r1
 800b99c:	3324      	adds	r3, #36	; 0x24
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d117      	bne.n	800b9d4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fbb8 	bl	800c11c <USBD_CtlError>
            break;
 800b9ac:	e054      	b.n	800ba58 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b9ae:	7bbb      	ldrb	r3, [r7, #14]
 800b9b0:	f003 020f 	and.w	r2, r3, #15
 800b9b4:	6879      	ldr	r1, [r7, #4]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	4413      	add	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	440b      	add	r3, r1
 800b9c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b9c4:	881b      	ldrh	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fba5 	bl	800c11c <USBD_CtlError>
            break;
 800b9d2:	e041      	b.n	800ba58 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da0b      	bge.n	800b9f4 <USBD_StdEPReq+0x228>
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	009b      	lsls	r3, r3, #2
 800b9ea:	3310      	adds	r3, #16
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	e00b      	b.n	800ba0c <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b9f4:	7bbb      	ldrb	r3, [r7, #14]
 800b9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9fa:	4613      	mov	r3, r2
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3304      	adds	r3, #4
 800ba0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ba0e:	7bbb      	ldrb	r3, [r7, #14]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <USBD_StdEPReq+0x24e>
 800ba14:	7bbb      	ldrb	r3, [r7, #14]
 800ba16:	2b80      	cmp	r3, #128	; 0x80
 800ba18:	d103      	bne.n	800ba22 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]
 800ba20:	e00e      	b.n	800ba40 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ba22:	7bbb      	ldrb	r3, [r7, #14]
 800ba24:	4619      	mov	r1, r3
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 f8ec 	bl	800cc04 <USBD_LL_IsStallEP>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d003      	beq.n	800ba3a <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2201      	movs	r2, #1
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	e002      	b.n	800ba40 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	2202      	movs	r2, #2
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fbd9 	bl	800c1fe <USBD_CtlSendData>
          break;
 800ba4c:	e004      	b.n	800ba58 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 fb63 	bl	800c11c <USBD_CtlError>
        break;
 800ba56:	bf00      	nop
      }
      break;
 800ba58:	e004      	b.n	800ba64 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fb5d 	bl	800c11c <USBD_CtlError>
      break;
 800ba62:	bf00      	nop
    }
    break;
 800ba64:	e004      	b.n	800ba70 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fb57 	bl	800c11c <USBD_CtlError>
    break;
 800ba6e:	bf00      	nop
  }

  return ret;
 800ba70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
	...

0800ba7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba86:	2300      	movs	r3, #0
 800ba88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	885b      	ldrh	r3, [r3, #2]
 800ba96:	0a1b      	lsrs	r3, r3, #8
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	2b0e      	cmp	r3, #14
 800ba9e:	f200 8152 	bhi.w	800bd46 <USBD_GetDescriptor+0x2ca>
 800baa2:	a201      	add	r2, pc, #4	; (adr r2, 800baa8 <USBD_GetDescriptor+0x2c>)
 800baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa8:	0800bb19 	.word	0x0800bb19
 800baac:	0800bb31 	.word	0x0800bb31
 800bab0:	0800bb71 	.word	0x0800bb71
 800bab4:	0800bd47 	.word	0x0800bd47
 800bab8:	0800bd47 	.word	0x0800bd47
 800babc:	0800bce7 	.word	0x0800bce7
 800bac0:	0800bd13 	.word	0x0800bd13
 800bac4:	0800bd47 	.word	0x0800bd47
 800bac8:	0800bd47 	.word	0x0800bd47
 800bacc:	0800bd47 	.word	0x0800bd47
 800bad0:	0800bd47 	.word	0x0800bd47
 800bad4:	0800bd47 	.word	0x0800bd47
 800bad8:	0800bd47 	.word	0x0800bd47
 800badc:	0800bd47 	.word	0x0800bd47
 800bae0:	0800bae5 	.word	0x0800bae5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baf6:	69db      	ldr	r3, [r3, #28]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	7c12      	ldrb	r2, [r2, #16]
 800bafc:	f107 0108 	add.w	r1, r7, #8
 800bb00:	4610      	mov	r0, r2
 800bb02:	4798      	blx	r3
 800bb04:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bb06:	e126      	b.n	800bd56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bb08:	6839      	ldr	r1, [r7, #0]
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fb06 	bl	800c11c <USBD_CtlError>
      err++;
 800bb10:	7afb      	ldrb	r3, [r7, #11]
 800bb12:	3301      	adds	r3, #1
 800bb14:	72fb      	strb	r3, [r7, #11]
    break;
 800bb16:	e11e      	b.n	800bd56 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	7c12      	ldrb	r2, [r2, #16]
 800bb24:	f107 0108 	add.w	r1, r7, #8
 800bb28:	4610      	mov	r0, r2
 800bb2a:	4798      	blx	r3
 800bb2c:	60f8      	str	r0, [r7, #12]
    break;
 800bb2e:	e112      	b.n	800bd56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	7c1b      	ldrb	r3, [r3, #16]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d10d      	bne.n	800bb54 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb40:	f107 0208 	add.w	r2, r7, #8
 800bb44:	4610      	mov	r0, r2
 800bb46:	4798      	blx	r3
 800bb48:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	2202      	movs	r2, #2
 800bb50:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bb52:	e100      	b.n	800bd56 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5c:	f107 0208 	add.w	r2, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	701a      	strb	r2, [r3, #0]
    break;
 800bb6e:	e0f2      	b.n	800bd56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	885b      	ldrh	r3, [r3, #2]
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b05      	cmp	r3, #5
 800bb78:	f200 80ac 	bhi.w	800bcd4 <USBD_GetDescriptor+0x258>
 800bb7c:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <USBD_GetDescriptor+0x108>)
 800bb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb82:	bf00      	nop
 800bb84:	0800bb9d 	.word	0x0800bb9d
 800bb88:	0800bbd1 	.word	0x0800bbd1
 800bb8c:	0800bc05 	.word	0x0800bc05
 800bb90:	0800bc39 	.word	0x0800bc39
 800bb94:	0800bc6d 	.word	0x0800bc6d
 800bb98:	0800bca1 	.word	0x0800bca1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d00b      	beq.n	800bbc0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7c12      	ldrb	r2, [r2, #16]
 800bbb4:	f107 0108 	add.w	r1, r7, #8
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4798      	blx	r3
 800bbbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbbe:	e091      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 faaa 	bl	800c11c <USBD_CtlError>
        err++;
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	72fb      	strb	r3, [r7, #11]
      break;
 800bbce:	e089      	b.n	800bce4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00b      	beq.n	800bbf4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe2:	689b      	ldr	r3, [r3, #8]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	7c12      	ldrb	r2, [r2, #16]
 800bbe8:	f107 0108 	add.w	r1, r7, #8
 800bbec:	4610      	mov	r0, r2
 800bbee:	4798      	blx	r3
 800bbf0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bbf2:	e077      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fa90 	bl	800c11c <USBD_CtlError>
        err++;
 800bbfc:	7afb      	ldrb	r3, [r7, #11]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	72fb      	strb	r3, [r7, #11]
      break;
 800bc02:	e06f      	b.n	800bce4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d00b      	beq.n	800bc28 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	7c12      	ldrb	r2, [r2, #16]
 800bc1c:	f107 0108 	add.w	r1, r7, #8
 800bc20:	4610      	mov	r0, r2
 800bc22:	4798      	blx	r3
 800bc24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc26:	e05d      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fa76 	bl	800c11c <USBD_CtlError>
        err++;
 800bc30:	7afb      	ldrb	r3, [r7, #11]
 800bc32:	3301      	adds	r3, #1
 800bc34:	72fb      	strb	r3, [r7, #11]
      break;
 800bc36:	e055      	b.n	800bce4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00b      	beq.n	800bc5c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	7c12      	ldrb	r2, [r2, #16]
 800bc50:	f107 0108 	add.w	r1, r7, #8
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
 800bc58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc5a:	e043      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa5c 	bl	800c11c <USBD_CtlError>
        err++;
 800bc64:	7afb      	ldrb	r3, [r7, #11]
 800bc66:	3301      	adds	r3, #1
 800bc68:	72fb      	strb	r3, [r7, #11]
      break;
 800bc6a:	e03b      	b.n	800bce4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc72:	695b      	ldr	r3, [r3, #20]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00b      	beq.n	800bc90 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	7c12      	ldrb	r2, [r2, #16]
 800bc84:	f107 0108 	add.w	r1, r7, #8
 800bc88:	4610      	mov	r0, r2
 800bc8a:	4798      	blx	r3
 800bc8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc8e:	e029      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bc90:	6839      	ldr	r1, [r7, #0]
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fa42 	bl	800c11c <USBD_CtlError>
        err++;
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	72fb      	strb	r3, [r7, #11]
      break;
 800bc9e:	e021      	b.n	800bce4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	7c12      	ldrb	r2, [r2, #16]
 800bcb8:	f107 0108 	add.w	r1, r7, #8
 800bcbc:	4610      	mov	r0, r2
 800bcbe:	4798      	blx	r3
 800bcc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bcc2:	e00f      	b.n	800bce4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa28 	bl	800c11c <USBD_CtlError>
        err++;
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	72fb      	strb	r3, [r7, #11]
      break;
 800bcd2:	e007      	b.n	800bce4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800bcd4:	6839      	ldr	r1, [r7, #0]
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 fa20 	bl	800c11c <USBD_CtlError>
      err++;
 800bcdc:	7afb      	ldrb	r3, [r7, #11]
 800bcde:	3301      	adds	r3, #1
 800bce0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800bce2:	bf00      	nop
    }
    break;
 800bce4:	e037      	b.n	800bd56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	7c1b      	ldrb	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d109      	bne.n	800bd02 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcf6:	f107 0208 	add.w	r2, r7, #8
 800bcfa:	4610      	mov	r0, r2
 800bcfc:	4798      	blx	r3
 800bcfe:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bd00:	e029      	b.n	800bd56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fa09 	bl	800c11c <USBD_CtlError>
      err++;
 800bd0a:	7afb      	ldrb	r3, [r7, #11]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	72fb      	strb	r3, [r7, #11]
    break;
 800bd10:	e021      	b.n	800bd56 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	7c1b      	ldrb	r3, [r3, #16]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10d      	bne.n	800bd36 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd22:	f107 0208 	add.w	r2, r7, #8
 800bd26:	4610      	mov	r0, r2
 800bd28:	4798      	blx	r3
 800bd2a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	2207      	movs	r2, #7
 800bd32:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bd34:	e00f      	b.n	800bd56 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f000 f9ef 	bl	800c11c <USBD_CtlError>
      err++;
 800bd3e:	7afb      	ldrb	r3, [r7, #11]
 800bd40:	3301      	adds	r3, #1
 800bd42:	72fb      	strb	r3, [r7, #11]
    break;
 800bd44:	e007      	b.n	800bd56 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800bd46:	6839      	ldr	r1, [r7, #0]
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f9e7 	bl	800c11c <USBD_CtlError>
    err++;
 800bd4e:	7afb      	ldrb	r3, [r7, #11]
 800bd50:	3301      	adds	r3, #1
 800bd52:	72fb      	strb	r3, [r7, #11]
    break;
 800bd54:	bf00      	nop
  }

  if (err != 0U)
 800bd56:	7afb      	ldrb	r3, [r7, #11]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d11e      	bne.n	800bd9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	88db      	ldrh	r3, [r3, #6]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d016      	beq.n	800bd92 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800bd64:	893b      	ldrh	r3, [r7, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00e      	beq.n	800bd88 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	88da      	ldrh	r2, [r3, #6]
 800bd6e:	893b      	ldrh	r3, [r7, #8]
 800bd70:	4293      	cmp	r3, r2
 800bd72:	bf28      	it	cs
 800bd74:	4613      	movcs	r3, r2
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800bd7a:	893b      	ldrh	r3, [r7, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	68f9      	ldr	r1, [r7, #12]
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 fa3c 	bl	800c1fe <USBD_CtlSendData>
 800bd86:	e009      	b.n	800bd9c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 f9c6 	bl	800c11c <USBD_CtlError>
 800bd90:	e004      	b.n	800bd9c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 fa8d 	bl	800c2b2 <USBD_CtlSendStatus>
 800bd98:	e000      	b.n	800bd9c <USBD_GetDescriptor+0x320>
    return;
 800bd9a:	bf00      	nop
    }
  }
}
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop

0800bda4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	889b      	ldrh	r3, [r3, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d130      	bne.n	800be18 <USBD_SetAddress+0x74>
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	88db      	ldrh	r3, [r3, #6]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d12c      	bne.n	800be18 <USBD_SetAddress+0x74>
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	885b      	ldrh	r3, [r3, #2]
 800bdc2:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc4:	d828      	bhi.n	800be18 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	885b      	ldrh	r3, [r3, #2]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d104      	bne.n	800bde6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 f99c 	bl	800c11c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde4:	e01c      	b.n	800be20 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	7bfa      	ldrb	r2, [r7, #15]
 800bdea:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bdee:	7bfb      	ldrb	r3, [r7, #15]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 ff34 	bl	800cc60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fa5a 	bl	800c2b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d004      	beq.n	800be0e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0c:	e008      	b.n	800be20 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2201      	movs	r2, #1
 800be12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be16:	e003      	b.n	800be20 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800be18:	6839      	ldr	r1, [r7, #0]
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f97e 	bl	800c11c <USBD_CtlError>
  }
}
 800be20:	bf00      	nop
 800be22:	3710      	adds	r7, #16
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	b2da      	uxtb	r2, r3
 800be3c:	4b4b      	ldr	r3, [pc, #300]	; (800bf6c <USBD_SetConfig+0x144>)
 800be3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800be40:	4b4a      	ldr	r3, [pc, #296]	; (800bf6c <USBD_SetConfig+0x144>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d905      	bls.n	800be54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f966 	bl	800c11c <USBD_CtlError>
    return USBD_FAIL;
 800be50:	2303      	movs	r3, #3
 800be52:	e087      	b.n	800bf64 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d002      	beq.n	800be64 <USBD_SetConfig+0x3c>
 800be5e:	2b03      	cmp	r3, #3
 800be60:	d025      	beq.n	800beae <USBD_SetConfig+0x86>
 800be62:	e071      	b.n	800bf48 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800be64:	4b41      	ldr	r3, [pc, #260]	; (800bf6c <USBD_SetConfig+0x144>)
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01c      	beq.n	800bea6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800be6c:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <USBD_SetConfig+0x144>)
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	461a      	mov	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800be76:	4b3d      	ldr	r3, [pc, #244]	; (800bf6c <USBD_SetConfig+0x144>)
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff f9bd 	bl	800b1fc <USBD_SetClassConfig>
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800be86:	7bfb      	ldrb	r3, [r7, #15]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d004      	beq.n	800be96 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 f944 	bl	800c11c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800be94:	e065      	b.n	800bf62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa0b 	bl	800c2b2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2203      	movs	r2, #3
 800bea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bea4:	e05d      	b.n	800bf62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa03 	bl	800c2b2 <USBD_CtlSendStatus>
    break;
 800beac:	e059      	b.n	800bf62 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800beae:	4b2f      	ldr	r3, [pc, #188]	; (800bf6c <USBD_SetConfig+0x144>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d112      	bne.n	800bedc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2202      	movs	r2, #2
 800beba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800bebe:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <USBD_SetConfig+0x144>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bec8:	4b28      	ldr	r3, [pc, #160]	; (800bf6c <USBD_SetConfig+0x144>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7ff f9b0 	bl	800b234 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 f9ec 	bl	800c2b2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800beda:	e042      	b.n	800bf62 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bedc:	4b23      	ldr	r3, [pc, #140]	; (800bf6c <USBD_SetConfig+0x144>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d02a      	beq.n	800bf40 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	4619      	mov	r1, r3
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f7ff f99e 	bl	800b234 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bef8:	4b1c      	ldr	r3, [pc, #112]	; (800bf6c <USBD_SetConfig+0x144>)
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bf02:	4b1a      	ldr	r3, [pc, #104]	; (800bf6c <USBD_SetConfig+0x144>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff f977 	bl	800b1fc <USBD_SetClassConfig>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00f      	beq.n	800bf38 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f8fe 	bl	800c11c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	b2db      	uxtb	r3, r3
 800bf26:	4619      	mov	r1, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f7ff f983 	bl	800b234 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2202      	movs	r2, #2
 800bf32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bf36:	e014      	b.n	800bf62 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 f9ba 	bl	800c2b2 <USBD_CtlSendStatus>
    break;
 800bf3e:	e010      	b.n	800bf62 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f9b6 	bl	800c2b2 <USBD_CtlSendStatus>
    break;
 800bf46:	e00c      	b.n	800bf62 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f8e6 	bl	800c11c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bf50:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <USBD_SetConfig+0x144>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff f96c 	bl	800b234 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bf60:	bf00      	nop
  }

  return ret;
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	20000354 	.word	0x20000354

0800bf70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	88db      	ldrh	r3, [r3, #6]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d004      	beq.n	800bf8c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f8c9 	bl	800c11c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bf8a:	e021      	b.n	800bfd0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	db17      	blt.n	800bfc6 <USBD_GetConfig+0x56>
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	dd02      	ble.n	800bfa0 <USBD_GetConfig+0x30>
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d00b      	beq.n	800bfb6 <USBD_GetConfig+0x46>
 800bf9e:	e012      	b.n	800bfc6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	2201      	movs	r2, #1
 800bfac:	4619      	mov	r1, r3
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f925 	bl	800c1fe <USBD_CtlSendData>
      break;
 800bfb4:	e00c      	b.n	800bfd0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	2201      	movs	r2, #1
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f91d 	bl	800c1fe <USBD_CtlSendData>
      break;
 800bfc4:	e004      	b.n	800bfd0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800bfc6:	6839      	ldr	r1, [r7, #0]
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 f8a7 	bl	800c11c <USBD_CtlError>
      break;
 800bfce:	bf00      	nop
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d81e      	bhi.n	800c02c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	88db      	ldrh	r3, [r3, #6]
 800bff2:	2b02      	cmp	r3, #2
 800bff4:	d004      	beq.n	800c000 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 f88f 	bl	800c11c <USBD_CtlError>
      break;
 800bffe:	e01a      	b.n	800c036 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f043 0202 	orr.w	r2, r3, #2
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	330c      	adds	r3, #12
 800c020:	2202      	movs	r2, #2
 800c022:	4619      	mov	r1, r3
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 f8ea 	bl	800c1fe <USBD_CtlSendData>
    break;
 800c02a:	e004      	b.n	800c036 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 f874 	bl	800c11c <USBD_CtlError>
    break;
 800c034:	bf00      	nop
  }
}
 800c036:	bf00      	nop
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	885b      	ldrh	r3, [r3, #2]
 800c04c:	2b01      	cmp	r3, #1
 800c04e:	d106      	bne.n	800c05e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f92a 	bl	800c2b2 <USBD_CtlSendStatus>
  }
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c076:	3b01      	subs	r3, #1
 800c078:	2b02      	cmp	r3, #2
 800c07a:	d80b      	bhi.n	800c094 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	885b      	ldrh	r3, [r3, #2]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d10c      	bne.n	800c09e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f910 	bl	800c2b2 <USBD_CtlSendStatus>
      }
      break;
 800c092:	e004      	b.n	800c09e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f840 	bl	800c11c <USBD_CtlError>
      break;
 800c09c:	e000      	b.n	800c0a0 <USBD_ClrFeature+0x3a>
      break;
 800c09e:	bf00      	nop
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	781a      	ldrb	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	781a      	ldrb	r2, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c0d2:	68f8      	ldr	r0, [r7, #12]
 800c0d4:	f7ff faa8 	bl	800b628 <SWAPBYTE>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	461a      	mov	r2, r3
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c0ec:	68f8      	ldr	r0, [r7, #12]
 800c0ee:	f7ff fa9b 	bl	800b628 <SWAPBYTE>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	3301      	adds	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7ff fa8e 	bl	800b628 <SWAPBYTE>
 800c10c:	4603      	mov	r3, r0
 800c10e:	461a      	mov	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	80da      	strh	r2, [r3, #6]
}
 800c114:	bf00      	nop
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c126:	2180      	movs	r1, #128	; 0x80
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fcff 	bl	800cb2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c12e:	2100      	movs	r1, #0
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fcfb 	bl	800cb2c <USBD_LL_StallEP>
}
 800c136:	bf00      	nop
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b086      	sub	sp, #24
 800c142:	af00      	add	r7, sp, #0
 800c144:	60f8      	str	r0, [r7, #12]
 800c146:	60b9      	str	r1, [r7, #8]
 800c148:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d036      	beq.n	800c1c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c158:	6938      	ldr	r0, [r7, #16]
 800c15a:	f000 f836 	bl	800c1ca <USBD_GetLen>
 800c15e:	4603      	mov	r3, r0
 800c160:	3301      	adds	r3, #1
 800c162:	b29b      	uxth	r3, r3
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c16c:	7dfb      	ldrb	r3, [r7, #23]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	4413      	add	r3, r2
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	7812      	ldrb	r2, [r2, #0]
 800c176:	701a      	strb	r2, [r3, #0]
  idx++;
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	3301      	adds	r3, #1
 800c17c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c17e:	7dfb      	ldrb	r3, [r7, #23]
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	4413      	add	r3, r2
 800c184:	2203      	movs	r2, #3
 800c186:	701a      	strb	r2, [r3, #0]
  idx++;
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	3301      	adds	r3, #1
 800c18c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c18e:	e013      	b.n	800c1b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	4413      	add	r3, r2
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	613b      	str	r3, [r7, #16]
    idx++;
 800c1a2:	7dfb      	ldrb	r3, [r7, #23]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c1a8:	7dfb      	ldrb	r3, [r7, #23]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e7      	bne.n	800c190 <USBD_GetString+0x52>
 800c1c0:	e000      	b.n	800c1c4 <USBD_GetString+0x86>
    return;
 800c1c2:	bf00      	nop
  }
}
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b085      	sub	sp, #20
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c1da:	e005      	b.n	800c1e8 <USBD_GetLen+0x1e>
  {
    len++;
 800c1dc:	7bfb      	ldrb	r3, [r7, #15]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	3301      	adds	r3, #1
 800c1e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1f5      	bne.n	800c1dc <USBD_GetLen+0x12>
  }

  return len;
 800c1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr

0800c1fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b084      	sub	sp, #16
 800c202:	af00      	add	r7, sp, #0
 800c204:	60f8      	str	r0, [r7, #12]
 800c206:	60b9      	str	r1, [r7, #8]
 800c208:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2202      	movs	r2, #2
 800c20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	2100      	movs	r1, #0
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f000 fd51 	bl	800cccc <USBD_LL_Transmit>

  return USBD_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3710      	adds	r7, #16
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	60f8      	str	r0, [r7, #12]
 800c23c:	60b9      	str	r1, [r7, #8]
 800c23e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	2100      	movs	r1, #0
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f000 fd40 	bl	800cccc <USBD_LL_Transmit>

  return USBD_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}

0800c256 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	60f8      	str	r0, [r7, #12]
 800c25e:	60b9      	str	r1, [r7, #8]
 800c260:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2203      	movs	r2, #3
 800c266:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	2100      	movs	r1, #0
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f000 fd5b 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	68f8      	ldr	r0, [r7, #12]
 800c2a4:	f000 fd4a 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3710      	adds	r7, #16
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b082      	sub	sp, #8
 800c2b6:	af00      	add	r7, sp, #0
 800c2b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2204      	movs	r2, #4
 800c2be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fcff 	bl	800cccc <USBD_LL_Transmit>

  return USBD_OK;
 800c2ce:	2300      	movs	r3, #0
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2205      	movs	r2, #5
 800c2e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fd24 	bl	800cd3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3708      	adds	r7, #8
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
	...

0800c300 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c304:	2200      	movs	r2, #0
 800c306:	4912      	ldr	r1, [pc, #72]	; (800c350 <MX_USB_DEVICE_Init+0x50>)
 800c308:	4812      	ldr	r0, [pc, #72]	; (800c354 <MX_USB_DEVICE_Init+0x54>)
 800c30a:	f7fe ff09 	bl	800b120 <USBD_Init>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c314:	f7f4 fc0a 	bl	8000b2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c318:	490f      	ldr	r1, [pc, #60]	; (800c358 <MX_USB_DEVICE_Init+0x58>)
 800c31a:	480e      	ldr	r0, [pc, #56]	; (800c354 <MX_USB_DEVICE_Init+0x54>)
 800c31c:	f7fe ff30 	bl	800b180 <USBD_RegisterClass>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d001      	beq.n	800c32a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c326:	f7f4 fc01 	bl	8000b2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c32a:	490c      	ldr	r1, [pc, #48]	; (800c35c <MX_USB_DEVICE_Init+0x5c>)
 800c32c:	4809      	ldr	r0, [pc, #36]	; (800c354 <MX_USB_DEVICE_Init+0x54>)
 800c32e:	f7fe fe5b 	bl	800afe8 <USBD_CDC_RegisterInterface>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	d001      	beq.n	800c33c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c338:	f7f4 fbf8 	bl	8000b2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c33c:	4805      	ldr	r0, [pc, #20]	; (800c354 <MX_USB_DEVICE_Init+0x54>)
 800c33e:	f7fe ff46 	bl	800b1ce <USBD_Start>
 800c342:	4603      	mov	r3, r0
 800c344:	2b00      	cmp	r3, #0
 800c346:	d001      	beq.n	800c34c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c348:	f7f4 fbf0 	bl	8000b2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c34c:	bf00      	nop
 800c34e:	bd80      	pop	{r7, pc}
 800c350:	20000130 	.word	0x20000130
 800c354:	20000400 	.word	0x20000400
 800c358:	20000018 	.word	0x20000018
 800c35c:	2000011c 	.word	0x2000011c

0800c360 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c364:	2200      	movs	r2, #0
 800c366:	4905      	ldr	r1, [pc, #20]	; (800c37c <CDC_Init_FS+0x1c>)
 800c368:	4805      	ldr	r0, [pc, #20]	; (800c380 <CDC_Init_FS+0x20>)
 800c36a:	f7fe fe52 	bl	800b012 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c36e:	4905      	ldr	r1, [pc, #20]	; (800c384 <CDC_Init_FS+0x24>)
 800c370:	4803      	ldr	r0, [pc, #12]	; (800c380 <CDC_Init_FS+0x20>)
 800c372:	f7fe fe67 	bl	800b044 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c376:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c378:	4618      	mov	r0, r3
 800c37a:	bd80      	pop	{r7, pc}
 800c37c:	200008c4 	.word	0x200008c4
 800c380:	20000400 	.word	0x20000400
 800c384:	200006d0 	.word	0x200006d0

0800c388 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c388:	b480      	push	{r7}
 800c38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c38c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c38e:	4618      	mov	r0, r3
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	4603      	mov	r3, r0
 800c3a0:	6039      	str	r1, [r7, #0]
 800c3a2:	71fb      	strb	r3, [r7, #7]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3a8:	79fb      	ldrb	r3, [r7, #7]
 800c3aa:	2b23      	cmp	r3, #35	; 0x23
 800c3ac:	d84a      	bhi.n	800c444 <CDC_Control_FS+0xac>
 800c3ae:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <CDC_Control_FS+0x1c>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c445 	.word	0x0800c445
 800c3b8:	0800c445 	.word	0x0800c445
 800c3bc:	0800c445 	.word	0x0800c445
 800c3c0:	0800c445 	.word	0x0800c445
 800c3c4:	0800c445 	.word	0x0800c445
 800c3c8:	0800c445 	.word	0x0800c445
 800c3cc:	0800c445 	.word	0x0800c445
 800c3d0:	0800c445 	.word	0x0800c445
 800c3d4:	0800c445 	.word	0x0800c445
 800c3d8:	0800c445 	.word	0x0800c445
 800c3dc:	0800c445 	.word	0x0800c445
 800c3e0:	0800c445 	.word	0x0800c445
 800c3e4:	0800c445 	.word	0x0800c445
 800c3e8:	0800c445 	.word	0x0800c445
 800c3ec:	0800c445 	.word	0x0800c445
 800c3f0:	0800c445 	.word	0x0800c445
 800c3f4:	0800c445 	.word	0x0800c445
 800c3f8:	0800c445 	.word	0x0800c445
 800c3fc:	0800c445 	.word	0x0800c445
 800c400:	0800c445 	.word	0x0800c445
 800c404:	0800c445 	.word	0x0800c445
 800c408:	0800c445 	.word	0x0800c445
 800c40c:	0800c445 	.word	0x0800c445
 800c410:	0800c445 	.word	0x0800c445
 800c414:	0800c445 	.word	0x0800c445
 800c418:	0800c445 	.word	0x0800c445
 800c41c:	0800c445 	.word	0x0800c445
 800c420:	0800c445 	.word	0x0800c445
 800c424:	0800c445 	.word	0x0800c445
 800c428:	0800c445 	.word	0x0800c445
 800c42c:	0800c445 	.word	0x0800c445
 800c430:	0800c445 	.word	0x0800c445
 800c434:	0800c445 	.word	0x0800c445
 800c438:	0800c445 	.word	0x0800c445
 800c43c:	0800c445 	.word	0x0800c445
 800c440:	0800c445 	.word	0x0800c445
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c444:	bf00      	nop
  }

  return (USBD_OK);
 800c446:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c448:	4618      	mov	r0, r3
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c452:	4770      	bx	lr

0800c454 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	4806      	ldr	r0, [pc, #24]	; (800c47c <CDC_Receive_FS+0x28>)
 800c462:	f7fe fdef 	bl	800b044 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c466:	4805      	ldr	r0, [pc, #20]	; (800c47c <CDC_Receive_FS+0x28>)
 800c468:	f7fe fe30 	bl	800b0cc <USBD_CDC_ReceivePacket>
  USBReceive(Buf);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7f4 fb4f 	bl	8000b10 <USBReceive>
  return (USBD_OK);
 800c472:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	20000400 	.word	0x20000400

0800c480 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <CDC_Transmit_FS+0x48>)
 800c492:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c496:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e00b      	b.n	800c4be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c4a6:	887b      	ldrh	r3, [r7, #2]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	6879      	ldr	r1, [r7, #4]
 800c4ac:	4806      	ldr	r0, [pc, #24]	; (800c4c8 <CDC_Transmit_FS+0x48>)
 800c4ae:	f7fe fdb0 	bl	800b012 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c4b2:	4805      	ldr	r0, [pc, #20]	; (800c4c8 <CDC_Transmit_FS+0x48>)
 800c4b4:	f7fe fdda 	bl	800b06c <USBD_CDC_TransmitPacket>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20000400 	.word	0x20000400

0800c4cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c4de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	6039      	str	r1, [r7, #0]
 800c4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2212      	movs	r2, #18
 800c500:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c502:	4b03      	ldr	r3, [pc, #12]	; (800c510 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c504:	4618      	mov	r0, r3
 800c506:	370c      	adds	r7, #12
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	20000150 	.word	0x20000150

0800c514 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	6039      	str	r1, [r7, #0]
 800c51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2204      	movs	r2, #4
 800c524:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c526:	4b03      	ldr	r3, [pc, #12]	; (800c534 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c528:	4618      	mov	r0, r3
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	20000170 	.word	0x20000170

0800c538 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	4603      	mov	r3, r0
 800c540:	6039      	str	r1, [r7, #0]
 800c542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d105      	bne.n	800c556 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	4907      	ldr	r1, [pc, #28]	; (800c56c <USBD_FS_ProductStrDescriptor+0x34>)
 800c54e:	4808      	ldr	r0, [pc, #32]	; (800c570 <USBD_FS_ProductStrDescriptor+0x38>)
 800c550:	f7ff fdf5 	bl	800c13e <USBD_GetString>
 800c554:	e004      	b.n	800c560 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	4904      	ldr	r1, [pc, #16]	; (800c56c <USBD_FS_ProductStrDescriptor+0x34>)
 800c55a:	4805      	ldr	r0, [pc, #20]	; (800c570 <USBD_FS_ProductStrDescriptor+0x38>)
 800c55c:	f7ff fdef 	bl	800c13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c560:	4b02      	ldr	r3, [pc, #8]	; (800c56c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c562:	4618      	mov	r0, r3
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000ab8 	.word	0x20000ab8
 800c570:	0800d168 	.word	0x0800d168

0800c574 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	6039      	str	r1, [r7, #0]
 800c57e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	4904      	ldr	r1, [pc, #16]	; (800c594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c584:	4804      	ldr	r0, [pc, #16]	; (800c598 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c586:	f7ff fdda 	bl	800c13e <USBD_GetString>
  return USBD_StrDesc;
 800c58a:	4b02      	ldr	r3, [pc, #8]	; (800c594 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20000ab8 	.word	0x20000ab8
 800c598:	0800d180 	.word	0x0800d180

0800c59c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	6039      	str	r1, [r7, #0]
 800c5a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	221a      	movs	r2, #26
 800c5ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5ae:	f000 f855 	bl	800c65c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c5b2:	4b02      	ldr	r3, [pc, #8]	; (800c5bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20000174 	.word	0x20000174

0800c5c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	6039      	str	r1, [r7, #0]
 800c5ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5cc:	79fb      	ldrb	r3, [r7, #7]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d105      	bne.n	800c5de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5d2:	683a      	ldr	r2, [r7, #0]
 800c5d4:	4907      	ldr	r1, [pc, #28]	; (800c5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5d6:	4808      	ldr	r0, [pc, #32]	; (800c5f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5d8:	f7ff fdb1 	bl	800c13e <USBD_GetString>
 800c5dc:	e004      	b.n	800c5e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	4904      	ldr	r1, [pc, #16]	; (800c5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c5e2:	4805      	ldr	r0, [pc, #20]	; (800c5f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c5e4:	f7ff fdab 	bl	800c13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5e8:	4b02      	ldr	r3, [pc, #8]	; (800c5f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000ab8 	.word	0x20000ab8
 800c5f8:	0800d194 	.word	0x0800d194

0800c5fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	4603      	mov	r3, r0
 800c604:	6039      	str	r1, [r7, #0]
 800c606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d105      	bne.n	800c61a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c60e:	683a      	ldr	r2, [r7, #0]
 800c610:	4907      	ldr	r1, [pc, #28]	; (800c630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c612:	4808      	ldr	r0, [pc, #32]	; (800c634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c614:	f7ff fd93 	bl	800c13e <USBD_GetString>
 800c618:	e004      	b.n	800c624 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	4904      	ldr	r1, [pc, #16]	; (800c630 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c61e:	4805      	ldr	r0, [pc, #20]	; (800c634 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c620:	f7ff fd8d 	bl	800c13e <USBD_GetString>
  }
  return USBD_StrDesc;
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c626:	4618      	mov	r0, r3
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20000ab8 	.word	0x20000ab8
 800c634:	0800d1a0 	.word	0x0800d1a0

0800c638 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	4603      	mov	r3, r0
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	220c      	movs	r2, #12
 800c648:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c64a:	4b03      	ldr	r3, [pc, #12]	; (800c658 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	370c      	adds	r7, #12
 800c650:	46bd      	mov	sp, r7
 800c652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c656:	4770      	bx	lr
 800c658:	20000164 	.word	0x20000164

0800c65c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c662:	4b0f      	ldr	r3, [pc, #60]	; (800c6a0 <Get_SerialNum+0x44>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c668:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <Get_SerialNum+0x48>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c66e:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <Get_SerialNum+0x4c>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c674:	68fa      	ldr	r2, [r7, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4413      	add	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d009      	beq.n	800c696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c682:	2208      	movs	r2, #8
 800c684:	4909      	ldr	r1, [pc, #36]	; (800c6ac <Get_SerialNum+0x50>)
 800c686:	68f8      	ldr	r0, [r7, #12]
 800c688:	f000 f814 	bl	800c6b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c68c:	2204      	movs	r2, #4
 800c68e:	4908      	ldr	r1, [pc, #32]	; (800c6b0 <Get_SerialNum+0x54>)
 800c690:	68b8      	ldr	r0, [r7, #8]
 800c692:	f000 f80f 	bl	800c6b4 <IntToUnicode>
  }
}
 800c696:	bf00      	nop
 800c698:	3710      	adds	r7, #16
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	1fff7590 	.word	0x1fff7590
 800c6a4:	1fff7594 	.word	0x1fff7594
 800c6a8:	1fff7598 	.word	0x1fff7598
 800c6ac:	20000176 	.word	0x20000176
 800c6b0:	20000186 	.word	0x20000186

0800c6b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	4613      	mov	r3, r2
 800c6c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	75fb      	strb	r3, [r7, #23]
 800c6ca:	e027      	b.n	800c71c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	0f1b      	lsrs	r3, r3, #28
 800c6d0:	2b09      	cmp	r3, #9
 800c6d2:	d80b      	bhi.n	800c6ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	0f1b      	lsrs	r3, r3, #28
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	4619      	mov	r1, r3
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3230      	adds	r2, #48	; 0x30
 800c6e6:	b2d2      	uxtb	r2, r2
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	e00a      	b.n	800c702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	0f1b      	lsrs	r3, r3, #28
 800c6f0:	b2da      	uxtb	r2, r3
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	005b      	lsls	r3, r3, #1
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3237      	adds	r2, #55	; 0x37
 800c6fe:	b2d2      	uxtb	r2, r2
 800c700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	005b      	lsls	r3, r3, #1
 800c70c:	3301      	adds	r3, #1
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	4413      	add	r3, r2
 800c712:	2200      	movs	r2, #0
 800c714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c716:	7dfb      	ldrb	r3, [r7, #23]
 800c718:	3301      	adds	r3, #1
 800c71a:	75fb      	strb	r3, [r7, #23]
 800c71c:	7dfa      	ldrb	r2, [r7, #23]
 800c71e:	79fb      	ldrb	r3, [r7, #7]
 800c720:	429a      	cmp	r2, r3
 800c722:	d3d3      	bcc.n	800c6cc <IntToUnicode+0x18>
  }
}
 800c724:	bf00      	nop
 800c726:	371c      	adds	r7, #28
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b08a      	sub	sp, #40	; 0x28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	2200      	movs	r2, #0
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	605a      	str	r2, [r3, #4]
 800c742:	609a      	str	r2, [r3, #8]
 800c744:	60da      	str	r2, [r3, #12]
 800c746:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <HAL_PCD_MspInit+0x90>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d131      	bne.n	800c7b6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c752:	4b1c      	ldr	r3, [pc, #112]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c756:	4a1b      	ldr	r2, [pc, #108]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c758:	f043 0301 	orr.w	r3, r3, #1
 800c75c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c75e:	4b19      	ldr	r3, [pc, #100]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	613b      	str	r3, [r7, #16]
 800c768:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c76a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c76e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c770:	2302      	movs	r3, #2
 800c772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c774:	2300      	movs	r3, #0
 800c776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c778:	2303      	movs	r3, #3
 800c77a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800c77c:	230a      	movs	r3, #10
 800c77e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c780:	f107 0314 	add.w	r3, r7, #20
 800c784:	4619      	mov	r1, r3
 800c786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c78a:	f7f8 fa4d 	bl	8004c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c78e:	4b0d      	ldr	r3, [pc, #52]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c792:	4a0c      	ldr	r2, [pc, #48]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c794:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c798:	6593      	str	r3, [r2, #88]	; 0x58
 800c79a:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <HAL_PCD_MspInit+0x94>)
 800c79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2100      	movs	r1, #0
 800c7aa:	2043      	movs	r0, #67	; 0x43
 800c7ac:	f7f8 fa05 	bl	8004bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c7b0:	2043      	movs	r0, #67	; 0x43
 800c7b2:	f7f8 fa1e 	bl	8004bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c7b6:	bf00      	nop
 800c7b8:	3728      	adds	r7, #40	; 0x28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	40006800 	.word	0x40006800
 800c7c4:	40021000 	.word	0x40021000

0800c7c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4610      	mov	r0, r2
 800c7e0:	f7fe fd40 	bl	800b264 <USBD_LL_SetupStage>
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c7fe:	78fa      	ldrb	r2, [r7, #3]
 800c800:	6879      	ldr	r1, [r7, #4]
 800c802:	4613      	mov	r3, r2
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	78fb      	ldrb	r3, [r7, #3]
 800c814:	4619      	mov	r1, r3
 800c816:	f7fe fd78 	bl	800b30a <USBD_LL_DataOutStage>
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	460b      	mov	r3, r1
 800c82c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c834:	78fa      	ldrb	r2, [r7, #3]
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	4613      	mov	r3, r2
 800c83a:	009b      	lsls	r3, r3, #2
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	440b      	add	r3, r1
 800c842:	333c      	adds	r3, #60	; 0x3c
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	4619      	mov	r1, r3
 800c84a:	f7fe fdc1 	bl	800b3d0 <USBD_LL_DataInStage>
}
 800c84e:	bf00      	nop
 800c850:	3708      	adds	r7, #8
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}

0800c856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c856:	b580      	push	{r7, lr}
 800c858:	b082      	sub	sp, #8
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fec5 	bl	800b5f4 <USBD_LL_SOF>
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c87a:	2301      	movs	r3, #1
 800c87c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	2b02      	cmp	r3, #2
 800c884:	d001      	beq.n	800c88a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c886:	f7f4 f951 	bl	8000b2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c890:	7bfa      	ldrb	r2, [r7, #15]
 800c892:	4611      	mov	r1, r2
 800c894:	4618      	mov	r0, r3
 800c896:	f7fe fe72 	bl	800b57e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe fe2b 	bl	800b4fc <USBD_LL_Reset>
}
 800c8a6:	bf00      	nop
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
	...

0800c8b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fe fe6d 	bl	800b59e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	699b      	ldr	r3, [r3, #24]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8cc:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <HAL_PCD_SuspendCallback+0x30>)
 800c8ce:	691b      	ldr	r3, [r3, #16]
 800c8d0:	4a03      	ldr	r2, [pc, #12]	; (800c8e0 <HAL_PCD_SuspendCallback+0x30>)
 800c8d2:	f043 0306 	orr.w	r3, r3, #6
 800c8d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c8d8:	bf00      	nop
 800c8da:	3708      	adds	r7, #8
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	e000ed00 	.word	0xe000ed00

0800c8e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d007      	beq.n	800c904 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8f4:	4b08      	ldr	r3, [pc, #32]	; (800c918 <HAL_PCD_ResumeCallback+0x34>)
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	4a07      	ldr	r2, [pc, #28]	; (800c918 <HAL_PCD_ResumeCallback+0x34>)
 800c8fa:	f023 0306 	bic.w	r3, r3, #6
 800c8fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c900:	f000 fa9e 	bl	800ce40 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fe fe5c 	bl	800b5c8 <USBD_LL_Resume>
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	e000ed00 	.word	0xe000ed00

0800c91c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c924:	f7fa fc0c 	bl	8007140 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c928:	4a2b      	ldr	r2, [pc, #172]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a29      	ldr	r2, [pc, #164]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c934:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c938:	4b27      	ldr	r3, [pc, #156]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c93a:	4a28      	ldr	r2, [pc, #160]	; (800c9dc <USBD_LL_Init+0xc0>)
 800c93c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c93e:	4b26      	ldr	r3, [pc, #152]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c940:	2208      	movs	r2, #8
 800c942:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c944:	4b24      	ldr	r3, [pc, #144]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c946:	2202      	movs	r2, #2
 800c948:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c94a:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c94c:	2202      	movs	r2, #2
 800c94e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c950:	4b21      	ldr	r3, [pc, #132]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c952:	2200      	movs	r2, #0
 800c954:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c956:	4b20      	ldr	r3, [pc, #128]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c958:	2200      	movs	r2, #0
 800c95a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c95c:	4b1e      	ldr	r3, [pc, #120]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c95e:	2200      	movs	r2, #0
 800c960:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c962:	4b1d      	ldr	r3, [pc, #116]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c964:	2200      	movs	r2, #0
 800c966:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c968:	481b      	ldr	r0, [pc, #108]	; (800c9d8 <USBD_LL_Init+0xbc>)
 800c96a:	f7f8 fff0 	bl	800594e <HAL_PCD_Init>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c974:	f7f4 f8da 	bl	8000b2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c97e:	2318      	movs	r3, #24
 800c980:	2200      	movs	r2, #0
 800c982:	2100      	movs	r1, #0
 800c984:	f7fa fb0b 	bl	8006f9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c98e:	2358      	movs	r3, #88	; 0x58
 800c990:	2200      	movs	r2, #0
 800c992:	2180      	movs	r1, #128	; 0x80
 800c994:	f7fa fb03 	bl	8006f9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c99e:	23c0      	movs	r3, #192	; 0xc0
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	2181      	movs	r1, #129	; 0x81
 800c9a4:	f7fa fafb 	bl	8006f9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9ae:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	2101      	movs	r1, #1
 800c9b6:	f7fa faf2 	bl	8006f9e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2182      	movs	r1, #130	; 0x82
 800c9c8:	f7fa fae9 	bl	8006f9e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20000cb8 	.word	0x20000cb8
 800c9dc:	40006800 	.word	0x40006800

0800c9e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f9 f8bb 	bl	8005b72 <HAL_PCD_Start>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d816      	bhi.n	800ca34 <USBD_LL_Start+0x54>
 800ca06:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <USBD_LL_Start+0x2c>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca1d 	.word	0x0800ca1d
 800ca10:	0800ca23 	.word	0x0800ca23
 800ca14:	0800ca29 	.word	0x0800ca29
 800ca18:	0800ca2f 	.word	0x0800ca2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca20:	e00b      	b.n	800ca3a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca22:	2303      	movs	r3, #3
 800ca24:	73fb      	strb	r3, [r7, #15]
    break;
 800ca26:	e008      	b.n	800ca3a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca2c:	e005      	b.n	800ca3a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	73fb      	strb	r3, [r7, #15]
    break;
 800ca32:	e002      	b.n	800ca3a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800ca34:	2303      	movs	r3, #3
 800ca36:	73fb      	strb	r3, [r7, #15]
    break;
 800ca38:	bf00      	nop
  }
  return usb_status;
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	461a      	mov	r2, r3
 800ca52:	4603      	mov	r3, r0
 800ca54:	70fb      	strb	r3, [r7, #3]
 800ca56:	460b      	mov	r3, r1
 800ca58:	70bb      	strb	r3, [r7, #2]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca6c:	78bb      	ldrb	r3, [r7, #2]
 800ca6e:	883a      	ldrh	r2, [r7, #0]
 800ca70:	78f9      	ldrb	r1, [r7, #3]
 800ca72:	f7f9 fa13 	bl	8005e9c <HAL_PCD_EP_Open>
 800ca76:	4603      	mov	r3, r0
 800ca78:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca7a:	7bbb      	ldrb	r3, [r7, #14]
 800ca7c:	2b03      	cmp	r3, #3
 800ca7e:	d817      	bhi.n	800cab0 <USBD_LL_OpenEP+0x6c>
 800ca80:	a201      	add	r2, pc, #4	; (adr r2, 800ca88 <USBD_LL_OpenEP+0x44>)
 800ca82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca86:	bf00      	nop
 800ca88:	0800ca99 	.word	0x0800ca99
 800ca8c:	0800ca9f 	.word	0x0800ca9f
 800ca90:	0800caa5 	.word	0x0800caa5
 800ca94:	0800caab 	.word	0x0800caab
    case HAL_OK :
      usb_status = USBD_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca9c:	e00b      	b.n	800cab6 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	73fb      	strb	r3, [r7, #15]
    break;
 800caa2:	e008      	b.n	800cab6 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800caa4:	2301      	movs	r3, #1
 800caa6:	73fb      	strb	r3, [r7, #15]
    break;
 800caa8:	e005      	b.n	800cab6 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caaa:	2303      	movs	r3, #3
 800caac:	73fb      	strb	r3, [r7, #15]
    break;
 800caae:	e002      	b.n	800cab6 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800cab0:	2303      	movs	r3, #3
 800cab2:	73fb      	strb	r3, [r7, #15]
    break;
 800cab4:	bf00      	nop
  }
  return usb_status;
 800cab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cacc:	2300      	movs	r3, #0
 800cace:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cada:	78fa      	ldrb	r2, [r7, #3]
 800cadc:	4611      	mov	r1, r2
 800cade:	4618      	mov	r0, r3
 800cae0:	f7f9 fa42 	bl	8005f68 <HAL_PCD_EP_Close>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cae8:	7bbb      	ldrb	r3, [r7, #14]
 800caea:	2b03      	cmp	r3, #3
 800caec:	d816      	bhi.n	800cb1c <USBD_LL_CloseEP+0x5c>
 800caee:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <USBD_LL_CloseEP+0x34>)
 800caf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf4:	0800cb05 	.word	0x0800cb05
 800caf8:	0800cb0b 	.word	0x0800cb0b
 800cafc:	0800cb11 	.word	0x0800cb11
 800cb00:	0800cb17 	.word	0x0800cb17
    case HAL_OK :
      usb_status = USBD_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	73fb      	strb	r3, [r7, #15]
    break;
 800cb08:	e00b      	b.n	800cb22 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	73fb      	strb	r3, [r7, #15]
    break;
 800cb0e:	e008      	b.n	800cb22 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb10:	2301      	movs	r3, #1
 800cb12:	73fb      	strb	r3, [r7, #15]
    break;
 800cb14:	e005      	b.n	800cb22 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb16:	2303      	movs	r3, #3
 800cb18:	73fb      	strb	r3, [r7, #15]
    break;
 800cb1a:	e002      	b.n	800cb22 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb20:	bf00      	nop
  }
  return usb_status;
 800cb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}

0800cb2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	460b      	mov	r3, r1
 800cb36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb46:	78fa      	ldrb	r2, [r7, #3]
 800cb48:	4611      	mov	r1, r2
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7f9 faec 	bl	8006128 <HAL_PCD_EP_SetStall>
 800cb50:	4603      	mov	r3, r0
 800cb52:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cb54:	7bbb      	ldrb	r3, [r7, #14]
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d816      	bhi.n	800cb88 <USBD_LL_StallEP+0x5c>
 800cb5a:	a201      	add	r2, pc, #4	; (adr r2, 800cb60 <USBD_LL_StallEP+0x34>)
 800cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb60:	0800cb71 	.word	0x0800cb71
 800cb64:	0800cb77 	.word	0x0800cb77
 800cb68:	0800cb7d 	.word	0x0800cb7d
 800cb6c:	0800cb83 	.word	0x0800cb83
    case HAL_OK :
      usb_status = USBD_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
    break;
 800cb74:	e00b      	b.n	800cb8e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb76:	2303      	movs	r3, #3
 800cb78:	73fb      	strb	r3, [r7, #15]
    break;
 800cb7a:	e008      	b.n	800cb8e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800cb80:	e005      	b.n	800cb8e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb82:	2303      	movs	r3, #3
 800cb84:	73fb      	strb	r3, [r7, #15]
    break;
 800cb86:	e002      	b.n	800cb8e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	73fb      	strb	r3, [r7, #15]
    break;
 800cb8c:	bf00      	nop
  }
  return usb_status;
 800cb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cba4:	2300      	movs	r3, #0
 800cba6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbb2:	78fa      	ldrb	r2, [r7, #3]
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f9 fb16 	bl	80061e8 <HAL_PCD_EP_ClrStall>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cbc0:	7bbb      	ldrb	r3, [r7, #14]
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d816      	bhi.n	800cbf4 <USBD_LL_ClearStallEP+0x5c>
 800cbc6:	a201      	add	r2, pc, #4	; (adr r2, 800cbcc <USBD_LL_ClearStallEP+0x34>)
 800cbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbcc:	0800cbdd 	.word	0x0800cbdd
 800cbd0:	0800cbe3 	.word	0x0800cbe3
 800cbd4:	0800cbe9 	.word	0x0800cbe9
 800cbd8:	0800cbef 	.word	0x0800cbef
    case HAL_OK :
      usb_status = USBD_OK;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe0:	e00b      	b.n	800cbfa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	73fb      	strb	r3, [r7, #15]
    break;
 800cbe6:	e008      	b.n	800cbfa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	73fb      	strb	r3, [r7, #15]
    break;
 800cbec:	e005      	b.n	800cbfa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf2:	e002      	b.n	800cbfa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800cbf8:	bf00      	nop
  }
  return usb_status;
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3710      	adds	r7, #16
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	da0c      	bge.n	800cc3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cc20:	78fb      	ldrb	r3, [r7, #3]
 800cc22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	1c5a      	adds	r2, r3, #1
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	3302      	adds	r3, #2
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	e00b      	b.n	800cc52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cc3a:	78fb      	ldrb	r3, [r7, #3]
 800cc3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc40:	68f9      	ldr	r1, [r7, #12]
 800cc42:	4613      	mov	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4413      	add	r3, r2
 800cc48:	00db      	lsls	r3, r3, #3
 800cc4a:	440b      	add	r3, r1
 800cc4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cc50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr
	...

0800cc60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc7a:	78fa      	ldrb	r2, [r7, #3]
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7f9 f8e7 	bl	8005e52 <HAL_PCD_SetAddress>
 800cc84:	4603      	mov	r3, r0
 800cc86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800cc88:	7bbb      	ldrb	r3, [r7, #14]
 800cc8a:	2b03      	cmp	r3, #3
 800cc8c:	d816      	bhi.n	800ccbc <USBD_LL_SetUSBAddress+0x5c>
 800cc8e:	a201      	add	r2, pc, #4	; (adr r2, 800cc94 <USBD_LL_SetUSBAddress+0x34>)
 800cc90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc94:	0800cca5 	.word	0x0800cca5
 800cc98:	0800ccab 	.word	0x0800ccab
 800cc9c:	0800ccb1 	.word	0x0800ccb1
 800cca0:	0800ccb7 	.word	0x0800ccb7
    case HAL_OK :
      usb_status = USBD_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
    break;
 800cca8:	e00b      	b.n	800ccc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	73fb      	strb	r3, [r7, #15]
    break;
 800ccae:	e008      	b.n	800ccc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccb4:	e005      	b.n	800ccc2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccb6:	2303      	movs	r3, #3
 800ccb8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccba:	e002      	b.n	800ccc2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	73fb      	strb	r3, [r7, #15]
    break;
 800ccc0:	bf00      	nop
  }
  return usb_status;
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	607a      	str	r2, [r7, #4]
 800ccd6:	603b      	str	r3, [r7, #0]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccea:	7af9      	ldrb	r1, [r7, #11]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	f7f9 f9d7 	bl	80060a2 <HAL_PCD_EP_Transmit>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ccf8:	7dbb      	ldrb	r3, [r7, #22]
 800ccfa:	2b03      	cmp	r3, #3
 800ccfc:	d816      	bhi.n	800cd2c <USBD_LL_Transmit+0x60>
 800ccfe:	a201      	add	r2, pc, #4	; (adr r2, 800cd04 <USBD_LL_Transmit+0x38>)
 800cd00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd04:	0800cd15 	.word	0x0800cd15
 800cd08:	0800cd1b 	.word	0x0800cd1b
 800cd0c:	0800cd21 	.word	0x0800cd21
 800cd10:	0800cd27 	.word	0x0800cd27
    case HAL_OK :
      usb_status = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	75fb      	strb	r3, [r7, #23]
    break;
 800cd18:	e00b      	b.n	800cd32 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	75fb      	strb	r3, [r7, #23]
    break;
 800cd1e:	e008      	b.n	800cd32 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd20:	2301      	movs	r3, #1
 800cd22:	75fb      	strb	r3, [r7, #23]
    break;
 800cd24:	e005      	b.n	800cd32 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd26:	2303      	movs	r3, #3
 800cd28:	75fb      	strb	r3, [r7, #23]
    break;
 800cd2a:	e002      	b.n	800cd32 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800cd2c:	2303      	movs	r3, #3
 800cd2e:	75fb      	strb	r3, [r7, #23]
    break;
 800cd30:	bf00      	nop
  }
  return usb_status;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	607a      	str	r2, [r7, #4]
 800cd46:	603b      	str	r3, [r7, #0]
 800cd48:	460b      	mov	r3, r1
 800cd4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd50:	2300      	movs	r3, #0
 800cd52:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd5a:	7af9      	ldrb	r1, [r7, #11]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	f7f9 f94a 	bl	8005ff8 <HAL_PCD_EP_Receive>
 800cd64:	4603      	mov	r3, r0
 800cd66:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cd68:	7dbb      	ldrb	r3, [r7, #22]
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d816      	bhi.n	800cd9c <USBD_LL_PrepareReceive+0x60>
 800cd6e:	a201      	add	r2, pc, #4	; (adr r2, 800cd74 <USBD_LL_PrepareReceive+0x38>)
 800cd70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd74:	0800cd85 	.word	0x0800cd85
 800cd78:	0800cd8b 	.word	0x0800cd8b
 800cd7c:	0800cd91 	.word	0x0800cd91
 800cd80:	0800cd97 	.word	0x0800cd97
    case HAL_OK :
      usb_status = USBD_OK;
 800cd84:	2300      	movs	r3, #0
 800cd86:	75fb      	strb	r3, [r7, #23]
    break;
 800cd88:	e00b      	b.n	800cda2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd8a:	2303      	movs	r3, #3
 800cd8c:	75fb      	strb	r3, [r7, #23]
    break;
 800cd8e:	e008      	b.n	800cda2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd90:	2301      	movs	r3, #1
 800cd92:	75fb      	strb	r3, [r7, #23]
    break;
 800cd94:	e005      	b.n	800cda2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd96:	2303      	movs	r3, #3
 800cd98:	75fb      	strb	r3, [r7, #23]
    break;
 800cd9a:	e002      	b.n	800cda2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cd9c:	2303      	movs	r3, #3
 800cd9e:	75fb      	strb	r3, [r7, #23]
    break;
 800cda0:	bf00      	nop
  }
  return usb_status;
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3718      	adds	r7, #24
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cdbe:	78fa      	ldrb	r2, [r7, #3]
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7f9 f955 	bl	8006072 <HAL_PCD_EP_GetRxCount>
 800cdc8:	4603      	mov	r3, r0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cde0:	78fb      	ldrb	r3, [r7, #3]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d002      	beq.n	800cdec <HAL_PCDEx_LPM_Callback+0x18>
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d013      	beq.n	800ce12 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cdea:	e023      	b.n	800ce34 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	699b      	ldr	r3, [r3, #24]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d007      	beq.n	800ce04 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cdf4:	f000 f824 	bl	800ce40 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cdf8:	4b10      	ldr	r3, [pc, #64]	; (800ce3c <HAL_PCDEx_LPM_Callback+0x68>)
 800cdfa:	691b      	ldr	r3, [r3, #16]
 800cdfc:	4a0f      	ldr	r2, [pc, #60]	; (800ce3c <HAL_PCDEx_LPM_Callback+0x68>)
 800cdfe:	f023 0306 	bic.w	r3, r3, #6
 800ce02:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fe fbdc 	bl	800b5c8 <USBD_LL_Resume>
    break;
 800ce10:	e010      	b.n	800ce34 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe fbc0 	bl	800b59e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	699b      	ldr	r3, [r3, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce26:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <HAL_PCDEx_LPM_Callback+0x68>)
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	4a04      	ldr	r2, [pc, #16]	; (800ce3c <HAL_PCDEx_LPM_Callback+0x68>)
 800ce2c:	f043 0306 	orr.w	r3, r3, #6
 800ce30:	6113      	str	r3, [r2, #16]
    break;
 800ce32:	bf00      	nop
}
 800ce34:	bf00      	nop
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	e000ed00 	.word	0xe000ed00

0800ce40 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ce40:	b480      	push	{r7}
 800ce42:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800ce44:	bf00      	nop
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <_Znwj>:
 800ce4e:	b510      	push	{r4, lr}
 800ce50:	2800      	cmp	r0, #0
 800ce52:	bf14      	ite	ne
 800ce54:	4604      	movne	r4, r0
 800ce56:	2401      	moveq	r4, #1
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f000 f843 	bl	800cee4 <malloc>
 800ce5e:	b930      	cbnz	r0, 800ce6e <_Znwj+0x20>
 800ce60:	f000 f806 	bl	800ce70 <_ZSt15get_new_handlerv>
 800ce64:	b908      	cbnz	r0, 800ce6a <_Znwj+0x1c>
 800ce66:	f000 f80b 	bl	800ce80 <abort>
 800ce6a:	4780      	blx	r0
 800ce6c:	e7f4      	b.n	800ce58 <_Znwj+0xa>
 800ce6e:	bd10      	pop	{r4, pc}

0800ce70 <_ZSt15get_new_handlerv>:
 800ce70:	4b02      	ldr	r3, [pc, #8]	; (800ce7c <_ZSt15get_new_handlerv+0xc>)
 800ce72:	6818      	ldr	r0, [r3, #0]
 800ce74:	f3bf 8f5b 	dmb	ish
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	20000358 	.word	0x20000358

0800ce80 <abort>:
 800ce80:	b508      	push	{r3, lr}
 800ce82:	2006      	movs	r0, #6
 800ce84:	f000 f926 	bl	800d0d4 <raise>
 800ce88:	2001      	movs	r0, #1
 800ce8a:	f7f3 fef3 	bl	8000c74 <_exit>
	...

0800ce90 <__errno>:
 800ce90:	4b01      	ldr	r3, [pc, #4]	; (800ce98 <__errno+0x8>)
 800ce92:	6818      	ldr	r0, [r3, #0]
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	20000190 	.word	0x20000190

0800ce9c <__libc_init_array>:
 800ce9c:	b570      	push	{r4, r5, r6, lr}
 800ce9e:	4e0d      	ldr	r6, [pc, #52]	; (800ced4 <__libc_init_array+0x38>)
 800cea0:	4c0d      	ldr	r4, [pc, #52]	; (800ced8 <__libc_init_array+0x3c>)
 800cea2:	1ba4      	subs	r4, r4, r6
 800cea4:	10a4      	asrs	r4, r4, #2
 800cea6:	2500      	movs	r5, #0
 800cea8:	42a5      	cmp	r5, r4
 800ceaa:	d109      	bne.n	800cec0 <__libc_init_array+0x24>
 800ceac:	4e0b      	ldr	r6, [pc, #44]	; (800cedc <__libc_init_array+0x40>)
 800ceae:	4c0c      	ldr	r4, [pc, #48]	; (800cee0 <__libc_init_array+0x44>)
 800ceb0:	f000 f92e 	bl	800d110 <_init>
 800ceb4:	1ba4      	subs	r4, r4, r6
 800ceb6:	10a4      	asrs	r4, r4, #2
 800ceb8:	2500      	movs	r5, #0
 800ceba:	42a5      	cmp	r5, r4
 800cebc:	d105      	bne.n	800ceca <__libc_init_array+0x2e>
 800cebe:	bd70      	pop	{r4, r5, r6, pc}
 800cec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cec4:	4798      	blx	r3
 800cec6:	3501      	adds	r5, #1
 800cec8:	e7ee      	b.n	800cea8 <__libc_init_array+0xc>
 800ceca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cece:	4798      	blx	r3
 800ced0:	3501      	adds	r5, #1
 800ced2:	e7f2      	b.n	800ceba <__libc_init_array+0x1e>
 800ced4:	0800d1f0 	.word	0x0800d1f0
 800ced8:	0800d1f0 	.word	0x0800d1f0
 800cedc:	0800d1f0 	.word	0x0800d1f0
 800cee0:	0800d200 	.word	0x0800d200

0800cee4 <malloc>:
 800cee4:	4b02      	ldr	r3, [pc, #8]	; (800cef0 <malloc+0xc>)
 800cee6:	4601      	mov	r1, r0
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	f000 b861 	b.w	800cfb0 <_malloc_r>
 800ceee:	bf00      	nop
 800cef0:	20000190 	.word	0x20000190

0800cef4 <free>:
 800cef4:	4b02      	ldr	r3, [pc, #8]	; (800cf00 <free+0xc>)
 800cef6:	4601      	mov	r1, r0
 800cef8:	6818      	ldr	r0, [r3, #0]
 800cefa:	f000 b80b 	b.w	800cf14 <_free_r>
 800cefe:	bf00      	nop
 800cf00:	20000190 	.word	0x20000190

0800cf04 <memset>:
 800cf04:	4402      	add	r2, r0
 800cf06:	4603      	mov	r3, r0
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d100      	bne.n	800cf0e <memset+0xa>
 800cf0c:	4770      	bx	lr
 800cf0e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf12:	e7f9      	b.n	800cf08 <memset+0x4>

0800cf14 <_free_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4605      	mov	r5, r0
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	d045      	beq.n	800cfa8 <_free_r+0x94>
 800cf1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf20:	1f0c      	subs	r4, r1, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	bfb8      	it	lt
 800cf26:	18e4      	addlt	r4, r4, r3
 800cf28:	f000 f8f0 	bl	800d10c <__malloc_lock>
 800cf2c:	4a1f      	ldr	r2, [pc, #124]	; (800cfac <_free_r+0x98>)
 800cf2e:	6813      	ldr	r3, [r2, #0]
 800cf30:	4610      	mov	r0, r2
 800cf32:	b933      	cbnz	r3, 800cf42 <_free_r+0x2e>
 800cf34:	6063      	str	r3, [r4, #4]
 800cf36:	6014      	str	r4, [r2, #0]
 800cf38:	4628      	mov	r0, r5
 800cf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf3e:	f000 b8e6 	b.w	800d10e <__malloc_unlock>
 800cf42:	42a3      	cmp	r3, r4
 800cf44:	d90c      	bls.n	800cf60 <_free_r+0x4c>
 800cf46:	6821      	ldr	r1, [r4, #0]
 800cf48:	1862      	adds	r2, r4, r1
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	bf04      	itt	eq
 800cf4e:	681a      	ldreq	r2, [r3, #0]
 800cf50:	685b      	ldreq	r3, [r3, #4]
 800cf52:	6063      	str	r3, [r4, #4]
 800cf54:	bf04      	itt	eq
 800cf56:	1852      	addeq	r2, r2, r1
 800cf58:	6022      	streq	r2, [r4, #0]
 800cf5a:	6004      	str	r4, [r0, #0]
 800cf5c:	e7ec      	b.n	800cf38 <_free_r+0x24>
 800cf5e:	4613      	mov	r3, r2
 800cf60:	685a      	ldr	r2, [r3, #4]
 800cf62:	b10a      	cbz	r2, 800cf68 <_free_r+0x54>
 800cf64:	42a2      	cmp	r2, r4
 800cf66:	d9fa      	bls.n	800cf5e <_free_r+0x4a>
 800cf68:	6819      	ldr	r1, [r3, #0]
 800cf6a:	1858      	adds	r0, r3, r1
 800cf6c:	42a0      	cmp	r0, r4
 800cf6e:	d10b      	bne.n	800cf88 <_free_r+0x74>
 800cf70:	6820      	ldr	r0, [r4, #0]
 800cf72:	4401      	add	r1, r0
 800cf74:	1858      	adds	r0, r3, r1
 800cf76:	4282      	cmp	r2, r0
 800cf78:	6019      	str	r1, [r3, #0]
 800cf7a:	d1dd      	bne.n	800cf38 <_free_r+0x24>
 800cf7c:	6810      	ldr	r0, [r2, #0]
 800cf7e:	6852      	ldr	r2, [r2, #4]
 800cf80:	605a      	str	r2, [r3, #4]
 800cf82:	4401      	add	r1, r0
 800cf84:	6019      	str	r1, [r3, #0]
 800cf86:	e7d7      	b.n	800cf38 <_free_r+0x24>
 800cf88:	d902      	bls.n	800cf90 <_free_r+0x7c>
 800cf8a:	230c      	movs	r3, #12
 800cf8c:	602b      	str	r3, [r5, #0]
 800cf8e:	e7d3      	b.n	800cf38 <_free_r+0x24>
 800cf90:	6820      	ldr	r0, [r4, #0]
 800cf92:	1821      	adds	r1, r4, r0
 800cf94:	428a      	cmp	r2, r1
 800cf96:	bf04      	itt	eq
 800cf98:	6811      	ldreq	r1, [r2, #0]
 800cf9a:	6852      	ldreq	r2, [r2, #4]
 800cf9c:	6062      	str	r2, [r4, #4]
 800cf9e:	bf04      	itt	eq
 800cfa0:	1809      	addeq	r1, r1, r0
 800cfa2:	6021      	streq	r1, [r4, #0]
 800cfa4:	605c      	str	r4, [r3, #4]
 800cfa6:	e7c7      	b.n	800cf38 <_free_r+0x24>
 800cfa8:	bd38      	pop	{r3, r4, r5, pc}
 800cfaa:	bf00      	nop
 800cfac:	2000035c 	.word	0x2000035c

0800cfb0 <_malloc_r>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	1ccd      	adds	r5, r1, #3
 800cfb4:	f025 0503 	bic.w	r5, r5, #3
 800cfb8:	3508      	adds	r5, #8
 800cfba:	2d0c      	cmp	r5, #12
 800cfbc:	bf38      	it	cc
 800cfbe:	250c      	movcc	r5, #12
 800cfc0:	2d00      	cmp	r5, #0
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	db01      	blt.n	800cfca <_malloc_r+0x1a>
 800cfc6:	42a9      	cmp	r1, r5
 800cfc8:	d903      	bls.n	800cfd2 <_malloc_r+0x22>
 800cfca:	230c      	movs	r3, #12
 800cfcc:	6033      	str	r3, [r6, #0]
 800cfce:	2000      	movs	r0, #0
 800cfd0:	bd70      	pop	{r4, r5, r6, pc}
 800cfd2:	f000 f89b 	bl	800d10c <__malloc_lock>
 800cfd6:	4a21      	ldr	r2, [pc, #132]	; (800d05c <_malloc_r+0xac>)
 800cfd8:	6814      	ldr	r4, [r2, #0]
 800cfda:	4621      	mov	r1, r4
 800cfdc:	b991      	cbnz	r1, 800d004 <_malloc_r+0x54>
 800cfde:	4c20      	ldr	r4, [pc, #128]	; (800d060 <_malloc_r+0xb0>)
 800cfe0:	6823      	ldr	r3, [r4, #0]
 800cfe2:	b91b      	cbnz	r3, 800cfec <_malloc_r+0x3c>
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	f000 f83d 	bl	800d064 <_sbrk_r>
 800cfea:	6020      	str	r0, [r4, #0]
 800cfec:	4629      	mov	r1, r5
 800cfee:	4630      	mov	r0, r6
 800cff0:	f000 f838 	bl	800d064 <_sbrk_r>
 800cff4:	1c43      	adds	r3, r0, #1
 800cff6:	d124      	bne.n	800d042 <_malloc_r+0x92>
 800cff8:	230c      	movs	r3, #12
 800cffa:	6033      	str	r3, [r6, #0]
 800cffc:	4630      	mov	r0, r6
 800cffe:	f000 f886 	bl	800d10e <__malloc_unlock>
 800d002:	e7e4      	b.n	800cfce <_malloc_r+0x1e>
 800d004:	680b      	ldr	r3, [r1, #0]
 800d006:	1b5b      	subs	r3, r3, r5
 800d008:	d418      	bmi.n	800d03c <_malloc_r+0x8c>
 800d00a:	2b0b      	cmp	r3, #11
 800d00c:	d90f      	bls.n	800d02e <_malloc_r+0x7e>
 800d00e:	600b      	str	r3, [r1, #0]
 800d010:	50cd      	str	r5, [r1, r3]
 800d012:	18cc      	adds	r4, r1, r3
 800d014:	4630      	mov	r0, r6
 800d016:	f000 f87a 	bl	800d10e <__malloc_unlock>
 800d01a:	f104 000b 	add.w	r0, r4, #11
 800d01e:	1d23      	adds	r3, r4, #4
 800d020:	f020 0007 	bic.w	r0, r0, #7
 800d024:	1ac3      	subs	r3, r0, r3
 800d026:	d0d3      	beq.n	800cfd0 <_malloc_r+0x20>
 800d028:	425a      	negs	r2, r3
 800d02a:	50e2      	str	r2, [r4, r3]
 800d02c:	e7d0      	b.n	800cfd0 <_malloc_r+0x20>
 800d02e:	428c      	cmp	r4, r1
 800d030:	684b      	ldr	r3, [r1, #4]
 800d032:	bf16      	itet	ne
 800d034:	6063      	strne	r3, [r4, #4]
 800d036:	6013      	streq	r3, [r2, #0]
 800d038:	460c      	movne	r4, r1
 800d03a:	e7eb      	b.n	800d014 <_malloc_r+0x64>
 800d03c:	460c      	mov	r4, r1
 800d03e:	6849      	ldr	r1, [r1, #4]
 800d040:	e7cc      	b.n	800cfdc <_malloc_r+0x2c>
 800d042:	1cc4      	adds	r4, r0, #3
 800d044:	f024 0403 	bic.w	r4, r4, #3
 800d048:	42a0      	cmp	r0, r4
 800d04a:	d005      	beq.n	800d058 <_malloc_r+0xa8>
 800d04c:	1a21      	subs	r1, r4, r0
 800d04e:	4630      	mov	r0, r6
 800d050:	f000 f808 	bl	800d064 <_sbrk_r>
 800d054:	3001      	adds	r0, #1
 800d056:	d0cf      	beq.n	800cff8 <_malloc_r+0x48>
 800d058:	6025      	str	r5, [r4, #0]
 800d05a:	e7db      	b.n	800d014 <_malloc_r+0x64>
 800d05c:	2000035c 	.word	0x2000035c
 800d060:	20000360 	.word	0x20000360

0800d064 <_sbrk_r>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	4c06      	ldr	r4, [pc, #24]	; (800d080 <_sbrk_r+0x1c>)
 800d068:	2300      	movs	r3, #0
 800d06a:	4605      	mov	r5, r0
 800d06c:	4608      	mov	r0, r1
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	f7f3 fe0a 	bl	8000c88 <_sbrk>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d102      	bne.n	800d07e <_sbrk_r+0x1a>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	b103      	cbz	r3, 800d07e <_sbrk_r+0x1a>
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	20000fac 	.word	0x20000fac

0800d084 <_raise_r>:
 800d084:	291f      	cmp	r1, #31
 800d086:	b538      	push	{r3, r4, r5, lr}
 800d088:	4604      	mov	r4, r0
 800d08a:	460d      	mov	r5, r1
 800d08c:	d904      	bls.n	800d098 <_raise_r+0x14>
 800d08e:	2316      	movs	r3, #22
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	f04f 30ff 	mov.w	r0, #4294967295
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d09a:	b112      	cbz	r2, 800d0a2 <_raise_r+0x1e>
 800d09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0a0:	b94b      	cbnz	r3, 800d0b6 <_raise_r+0x32>
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f000 f830 	bl	800d108 <_getpid_r>
 800d0a8:	462a      	mov	r2, r5
 800d0aa:	4601      	mov	r1, r0
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0b2:	f000 b817 	b.w	800d0e4 <_kill_r>
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d00a      	beq.n	800d0d0 <_raise_r+0x4c>
 800d0ba:	1c59      	adds	r1, r3, #1
 800d0bc:	d103      	bne.n	800d0c6 <_raise_r+0x42>
 800d0be:	2316      	movs	r3, #22
 800d0c0:	6003      	str	r3, [r0, #0]
 800d0c2:	2001      	movs	r0, #1
 800d0c4:	e7e7      	b.n	800d096 <_raise_r+0x12>
 800d0c6:	2400      	movs	r4, #0
 800d0c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	4798      	blx	r3
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	e7e0      	b.n	800d096 <_raise_r+0x12>

0800d0d4 <raise>:
 800d0d4:	4b02      	ldr	r3, [pc, #8]	; (800d0e0 <raise+0xc>)
 800d0d6:	4601      	mov	r1, r0
 800d0d8:	6818      	ldr	r0, [r3, #0]
 800d0da:	f7ff bfd3 	b.w	800d084 <_raise_r>
 800d0de:	bf00      	nop
 800d0e0:	20000190 	.word	0x20000190

0800d0e4 <_kill_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4c07      	ldr	r4, [pc, #28]	; (800d104 <_kill_r+0x20>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	f7f3 fdaf 	bl	8000c54 <_kill>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	d102      	bne.n	800d100 <_kill_r+0x1c>
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	b103      	cbz	r3, 800d100 <_kill_r+0x1c>
 800d0fe:	602b      	str	r3, [r5, #0]
 800d100:	bd38      	pop	{r3, r4, r5, pc}
 800d102:	bf00      	nop
 800d104:	20000fac 	.word	0x20000fac

0800d108 <_getpid_r>:
 800d108:	f7f3 bd9c 	b.w	8000c44 <_getpid>

0800d10c <__malloc_lock>:
 800d10c:	4770      	bx	lr

0800d10e <__malloc_unlock>:
 800d10e:	4770      	bx	lr

0800d110 <_init>:
 800d110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d112:	bf00      	nop
 800d114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d116:	bc08      	pop	{r3}
 800d118:	469e      	mov	lr, r3
 800d11a:	4770      	bx	lr

0800d11c <_fini>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	bf00      	nop
 800d120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d122:	bc08      	pop	{r3}
 800d124:	469e      	mov	lr, r3
 800d126:	4770      	bx	lr
