
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008448  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800865c  0800865c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800865c  0800865c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800865c  0800865c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c4  200001f4  08008858  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012b8  08008858  000212b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020fc0  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f30  00000000  00000000  000411e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  00045118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a8  00000000  00000000  000468b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008de5  00000000  00000000  00047e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000173da  00000000  00000000  00050c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b02f1  00000000  00000000  0006801f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006300  00000000  00000000  0011838c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080085bc 	.word	0x080085bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	080085bc 	.word	0x080085bc

080001cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	4b50      	ldr	r3, [pc, #320]	; (8000324 <MX_GPIO_Init+0x158>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a4f      	ldr	r2, [pc, #316]	; (8000324 <MX_GPIO_Init+0x158>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <MX_GPIO_Init+0x158>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	613b      	str	r3, [r7, #16]
 80001f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	4b4a      	ldr	r3, [pc, #296]	; (8000324 <MX_GPIO_Init+0x158>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a49      	ldr	r2, [pc, #292]	; (8000324 <MX_GPIO_Init+0x158>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b47      	ldr	r3, [pc, #284]	; (8000324 <MX_GPIO_Init+0x158>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000212:	4b44      	ldr	r3, [pc, #272]	; (8000324 <MX_GPIO_Init+0x158>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	4a43      	ldr	r2, [pc, #268]	; (8000324 <MX_GPIO_Init+0x158>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021e:	4b41      	ldr	r3, [pc, #260]	; (8000324 <MX_GPIO_Init+0x158>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
 8000228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <MX_GPIO_Init+0x158>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a3d      	ldr	r2, [pc, #244]	; (8000324 <MX_GPIO_Init+0x158>)
 8000230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b3b      	ldr	r3, [pc, #236]	; (8000324 <MX_GPIO_Init+0x158>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000248:	4837      	ldr	r0, [pc, #220]	; (8000328 <MX_GPIO_Init+0x15c>)
 800024a:	f000 fe75 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCE_E_Pin|DB0_Pin|DB1_Pin|DB3_Pin, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	f248 0107 	movw	r1, #32775	; 0x8007
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f000 fe6e 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LC2_CS_Pin|LC1_CS_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	21c0      	movs	r1, #192	; 0xc0
 8000260:	4832      	ldr	r0, [pc, #200]	; (800032c <MX_GPIO_Init+0x160>)
 8000262:	f000 fe69 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	4831      	ldr	r0, [pc, #196]	; (8000330 <MX_GPIO_Init+0x164>)
 800026c:	f000 fe64 	bl	8000f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000270:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	4827      	ldr	r0, [pc, #156]	; (8000328 <MX_GPIO_Init+0x15c>)
 800028a:	f000 fce3 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCE_E_Pin|DB0_Pin|DB1_Pin|DB3_Pin;
 800028e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002aa:	f000 fcd3 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|LED_BW_Pin|SW_PW_Pin|LED_PW_Pin
 80002ae:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80002b2:	617b      	str	r3, [r7, #20]
                          |SW_SUM_Pin|SW_TAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4619      	mov	r1, r3
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f000 fcc5 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|SW_TOTAL_Pin;
 80002ca:	2303      	movs	r3, #3
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_GPIO_Init+0x160>)
 80002de:	f000 fcb9 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LC2_CS_Pin|LC1_CS_Pin;
 80002e2:	23c0      	movs	r3, #192	; 0xc0
 80002e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	2300      	movs	r3, #0
 80002f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <MX_GPIO_Init+0x160>)
 80002fa:	f000 fcab 	bl	8000c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 80002fe:	2308      	movs	r3, #8
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4619      	mov	r1, r3
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <MX_GPIO_Init+0x164>)
 8000316:	f000 fc9d 	bl	8000c54 <HAL_GPIO_Init>

}
 800031a:	bf00      	nop
 800031c:	3728      	adds	r7, #40	; 0x28
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000800 	.word	0x48000800
 800032c:	48000400 	.word	0x48000400
 8000330:	48001c00 	.word	0x48001c00

08000334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	f000 fdfa 	bl	8000f68 <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f8f6 	bl	800056a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000382:	f000 fe80 	bl	8001086 <HAL_I2CEx_ConfigAnalogFilter>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f8ed 	bl	800056a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	2100      	movs	r1, #0
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000394:	f000 fec2 	bl	800111c <HAL_I2CEx_ConfigDigitalFilter>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f8e4 	bl	800056a <Error_Handler>
  }

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000220 	.word	0x20000220
 80003ac:	40005400 	.word	0x40005400
 80003b0:	10909cec 	.word	0x10909cec

080003b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	; 0x28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <HAL_I2C_MspInit+0x80>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d129      	bne.n	800042a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a17      	ldr	r2, [pc, #92]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80003ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003f4:	2312      	movs	r3, #18
 80003f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003fc:	2303      	movs	r3, #3
 80003fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000400:	2304      	movs	r3, #4
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fc21 	bl	8000c54 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800041c:	6593      	str	r3, [r2, #88]	; 0x58
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	; 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40005400 	.word	0x40005400
 8000438:	40021000 	.word	0x40021000

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f000 fa81 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f000 f80b 	bl	800045e <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000448:	f7ff fec0 	bl	80001cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800044c:	f7ff ff72 	bl	8000334 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000450:	f000 f892 	bl	8000578 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000454:	f007 fa36 	bl	80078c4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000458:	f000 f9d8 	bl	800080c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800045c:	e7fe      	b.n	800045c <main+0x20>

0800045e <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b0a4      	sub	sp, #144	; 0x90
 8000462:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000464:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000468:	2244      	movs	r2, #68	; 0x44
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f007 ffe3 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000472:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2234      	movs	r2, #52	; 0x34
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f007 ffd5 	bl	8008438 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800048e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000492:	f002 fa33 	bl	80028fc <HAL_PWREx_ControlVoltageScaling>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	bf14      	ite	ne
 800049c:	2301      	movne	r3, #1
 800049e:	2300      	moveq	r3, #0
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 80004a6:	f000 f860 	bl	800056a <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80004aa:	2312      	movs	r3, #18
 80004ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b4:	2340      	movs	r3, #64	; 0x40
 80004b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80004c0:	23b0      	movs	r3, #176	; 0xb0
 80004c2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c4:	2302      	movs	r3, #2
 80004c6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c8:	2302      	movs	r3, #2
 80004ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004d2:	230a      	movs	r3, #10
 80004d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d8:	2302      	movs	r3, #2
 80004da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004de:	2302      	movs	r3, #2
 80004e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fa6d 	bl	80029c8 <HAL_RCC_OscConfig>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	bf14      	ite	ne
 80004f4:	2301      	movne	r3, #1
 80004f6:	2300      	moveq	r3, #0
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80004fe:	f000 f834 	bl	800056a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000502:	230f      	movs	r3, #15
 8000504:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	2303      	movs	r3, #3
 8000508:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000516:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800051a:	2104      	movs	r1, #4
 800051c:	4618      	mov	r0, r3
 800051e:	f002 feb9 	bl	8003294 <HAL_RCC_ClockConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	bf14      	ite	ne
 8000528:	2301      	movne	r3, #1
 800052a:	2300      	moveq	r3, #0
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000532:	f000 f81a 	bl	800056a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000536:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800053a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800053c:	2300      	movs	r3, #0
 800053e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000540:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4618      	mov	r0, r3
 800054a:	f003 f86f 	bl	800362c <HAL_RCCEx_PeriphCLKConfig>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	bf14      	ite	ne
 8000554:	2301      	movne	r3, #1
 8000556:	2300      	moveq	r3, #0
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 800055e:	f000 f804 	bl	800056a <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3790      	adds	r7, #144	; 0x90
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800057c:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MX_SPI1_Init+0x74>)
 800057e:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_SPI1_Init+0x78>)
 8000580:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <MX_SPI1_Init+0x74>)
 8000584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000588:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <MX_SPI1_Init+0x74>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <MX_SPI1_Init+0x74>)
 8000592:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000596:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000598:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_SPI1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <MX_SPI1_Init+0x74>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_SPI1_Init+0x74>)
 80005a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <MX_SPI1_Init+0x74>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_SPI1_Init+0x74>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_SPI1_Init+0x74>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_SPI1_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_SPI1_Init+0x74>)
 80005c6:	2207      	movs	r2, #7
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_SPI1_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_SPI1_Init+0x74>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_SPI1_Init+0x74>)
 80005d8:	f003 f9ae 	bl	8003938 <HAL_SPI_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005e2:	f7ff ffc2 	bl	800056a <Error_Handler>
  }

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000026c 	.word	0x2000026c
 80005f0:	40013000 	.word	0x40013000

080005f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a17      	ldr	r2, [pc, #92]	; (8000670 <HAL_SPI_MspInit+0x7c>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d127      	bne.n	8000666 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <HAL_SPI_MspInit+0x80>)
 8000618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061a:	4a16      	ldr	r2, [pc, #88]	; (8000674 <HAL_SPI_MspInit+0x80>)
 800061c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000620:	6613      	str	r3, [r2, #96]	; 0x60
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HAL_SPI_MspInit+0x80>)
 8000624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <HAL_SPI_MspInit+0x80>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <HAL_SPI_MspInit+0x80>)
 8000634:	f043 0302 	orr.w	r3, r3, #2
 8000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <HAL_SPI_MspInit+0x80>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063e:	f003 0302 	and.w	r3, r3, #2
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000646:	2338      	movs	r3, #56	; 0x38
 8000648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000652:	2303      	movs	r3, #3
 8000654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000656:	2305      	movs	r3, #5
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <HAL_SPI_MspInit+0x84>)
 8000662:	f000 faf7 	bl	8000c54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	; 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40013000 	.word	0x40013000
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_MspInit+0x44>)
 8000684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000686:	4a0e      	ldr	r2, [pc, #56]	; (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6613      	str	r3, [r2, #96]	; 0x60
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <HAL_MspInit+0x44>)
 8000690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <HAL_MspInit+0x44>)
 800069c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069e:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a4:	6593      	str	r3, [r2, #88]	; 0x58
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_MspInit+0x44>)
 80006a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f96a 	bl	80009f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <USB_IRQHandler+0x10>)
 8000726:	f000 fe79 	bl	800141c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000fc0 	.word	0x20000fc0

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f007 fe2e 	bl	80083c4 <__errno>
 8000768:	4602      	mov	r2, r0
 800076a:	230c      	movs	r3, #12
 800076c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000a000 	.word	0x2000a000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000210 	.word	0x20000210
 800079c:	200012b8 	.word	0x200012b8

080007a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <SystemInit+0x64>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <SystemInit+0x64>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <SystemInit+0x68>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a13      	ldr	r2, [pc, #76]	; (8000808 <SystemInit+0x68>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <SystemInit+0x68>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007c6:	4b10      	ldr	r3, [pc, #64]	; (8000808 <SystemInit+0x68>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a0f      	ldr	r2, [pc, #60]	; (8000808 <SystemInit+0x68>)
 80007cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <SystemInit+0x68>)
 80007d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemInit+0x68>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a09      	ldr	r2, [pc, #36]	; (8000808 <SystemInit+0x68>)
 80007e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007ea:	4b07      	ldr	r3, [pc, #28]	; (8000808 <SystemInit+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SystemInit+0x64>)
 80007f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f6:	609a      	str	r2, [r3, #8]
#endif
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000ed00 	.word	0xe000ed00
 8000808:	40021000 	.word	0x40021000

0800080c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_TIM1_Init+0xa0>)
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <MX_TIM1_Init+0xa4>)
 800082e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000832:	2210      	movs	r2, #16
 8000834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_TIM1_Init+0xa0>)
 800083e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_TIM1_Init+0xa0>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000856:	4815      	ldr	r0, [pc, #84]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000858:	f003 f911 	bl	8003a7e <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000862:	f7ff fe82 	bl	800056a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000874:	f003 f95a 	bl	8003b2c <HAL_TIM_ConfigClockSource>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800087e:	f7ff fe74 	bl	800056a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_TIM1_Init+0xa0>)
 8000894:	f003 fb02 	bl	8003e9c <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089e:	f7ff fe64 	bl	800056a <Error_Handler>
  }

}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002d0 	.word	0x200002d0
 80008b0:	40012c00 	.word	0x40012c00

080008b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <HAL_TIM_Base_MspInit+0x38>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d10b      	bne.n	80008de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008d0:	6613      	str	r3, [r2, #96]	; 0x60
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_TIM_Base_MspInit+0x3c>)
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008de:	bf00      	nop
 80008e0:	3714      	adds	r7, #20
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40012c00 	.word	0x40012c00
 80008f0:	40021000 	.word	0x40021000

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff ff52 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <LoopForever+0xa>)
	ldr	r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopForever+0xe>)
	adds	r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800090e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
	ldr	r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000916:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LoopForever+0x16>)
	cmp	r2, r3
 800091e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f007 fd55 	bl	80083d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fd89 	bl	800043c <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800092c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000930:	08008664 	.word	0x08008664
	ldr	r0, =_sdata
 8000934:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000938:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 800093c:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000940:	200012b8 	.word	0x200012b8

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>

08000946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f93d 	bl	8000bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff fe88 	bl	800067c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_InitTick+0x6c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d023      	beq.n	80009d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_InitTick+0x70>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <HAL_InitTick+0x6c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	fbb3 f3f1 	udiv	r3, r3, r1
 800099e:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f949 	bl	8000c3a <HAL_SYSTICK_Config>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10f      	bne.n	80009ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2b0f      	cmp	r3, #15
 80009b2:	d809      	bhi.n	80009c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f000 f913 	bl	8000be6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009c0:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <HAL_InitTick+0x74>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6013      	str	r3, [r2, #0]
 80009c6:	e007      	b.n	80009d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e004      	b.n	80009d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	e001      	b.n	80009d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	2000031c 	.word	0x2000031c

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000031c 	.word	0x2000031c

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	; 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
	...

08000b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b9c:	d301      	bcc.n	8000ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e00f      	b.n	8000bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <SysTick_Config+0x40>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000baa:	210f      	movs	r1, #15
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	f7ff ff8e 	bl	8000ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <SysTick_Config+0x40>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <SysTick_Config+0x40>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff ff29 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
 8000bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf8:	f7ff ff3e 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	6978      	ldr	r0, [r7, #20]
 8000c04:	f7ff ff8e 	bl	8000b24 <NVIC_EncodePriority>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ff5d 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000c16:	bf00      	nop
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff31 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ffa2 	bl	8000b8c <SysTick_Config>
 8000c48:	4603      	mov	r3, r0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b087      	sub	sp, #28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	e14e      	b.n	8000f02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	4013      	ands	r3, r2
 8000c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8140 	beq.w	8000efc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d00b      	beq.n	8000c9c <HAL_GPIO_Init+0x48>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d007      	beq.n	8000c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c90:	2b11      	cmp	r3, #17
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	2b12      	cmp	r3, #18
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2203      	movs	r2, #3
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689a      	ldr	r2, [r3, #8]
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0xea>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b12      	cmp	r3, #18
 8000d3c:	d123      	bne.n	8000d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	08da      	lsrs	r2, r3, #3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3208      	adds	r2, #8
 8000d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	220f      	movs	r2, #15
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	691a      	ldr	r2, [r3, #16]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	6939      	ldr	r1, [r7, #16]
 8000d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	2203      	movs	r2, #3
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0203 	and.w	r2, r3, #3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 809a 	beq.w	8000efc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc8:	4b55      	ldr	r3, [pc, #340]	; (8000f20 <HAL_GPIO_Init+0x2cc>)
 8000dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dcc:	4a54      	ldr	r2, [pc, #336]	; (8000f20 <HAL_GPIO_Init+0x2cc>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd4:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <HAL_GPIO_Init+0x2cc>)
 8000dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000de0:	4a50      	ldr	r2, [pc, #320]	; (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	3302      	adds	r3, #2
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	220f      	movs	r2, #15
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e0a:	d013      	beq.n	8000e34 <HAL_GPIO_Init+0x1e0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <HAL_GPIO_Init+0x2d4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d00d      	beq.n	8000e30 <HAL_GPIO_Init+0x1dc>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <HAL_GPIO_Init+0x2d8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d007      	beq.n	8000e2c <HAL_GPIO_Init+0x1d8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a44      	ldr	r2, [pc, #272]	; (8000f30 <HAL_GPIO_Init+0x2dc>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d101      	bne.n	8000e28 <HAL_GPIO_Init+0x1d4>
 8000e24:	2303      	movs	r3, #3
 8000e26:	e006      	b.n	8000e36 <HAL_GPIO_Init+0x1e2>
 8000e28:	2307      	movs	r3, #7
 8000e2a:	e004      	b.n	8000e36 <HAL_GPIO_Init+0x1e2>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e002      	b.n	8000e36 <HAL_GPIO_Init+0x1e2>
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <HAL_GPIO_Init+0x1e2>
 8000e34:	2300      	movs	r3, #0
 8000e36:	697a      	ldr	r2, [r7, #20]
 8000e38:	f002 0203 	and.w	r2, r2, #3
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	4093      	lsls	r3, r2
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e46:	4937      	ldr	r1, [pc, #220]	; (8000f24 <HAL_GPIO_Init+0x2d0>)
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e78:	4a2e      	ldr	r2, [pc, #184]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ecc:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ef6:	4a0f      	ldr	r2, [pc, #60]	; (8000f34 <HAL_GPIO_Init+0x2e0>)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f47f aea9 	bne.w	8000c64 <HAL_GPIO_Init+0x10>
  }
}
 8000f12:	bf00      	nop
 8000f14:	371c      	adds	r7, #28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010000 	.word	0x40010000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	48000800 	.word	0x48000800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	40010400 	.word	0x40010400

08000f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f48:	787b      	ldrb	r3, [r7, #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f54:	e002      	b.n	8000f5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e081      	b.n	800107e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d106      	bne.n	8000f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff fa10 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2224      	movs	r2, #36	; 0x24
 8000f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0201 	bic.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	e006      	b.n	8000ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d104      	bne.n	8001002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001014:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001024:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691a      	ldr	r2, [r3, #16]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	ea42 0103 	orr.w	r1, r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	021a      	lsls	r2, r3, #8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69d9      	ldr	r1, [r3, #28]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0201 	orr.w	r2, r2, #1
 800105e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2220      	movs	r2, #32
 800106a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b20      	cmp	r3, #32
 800109a:	d138      	bne.n	800110e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d101      	bne.n	80010aa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010a6:	2302      	movs	r3, #2
 80010a8:	e032      	b.n	8001110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2201      	movs	r2, #1
 80010ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2224      	movs	r2, #36	; 0x24
 80010b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010d8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6819      	ldr	r1, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800110e:	2302      	movs	r3, #2
  }
}
 8001110:	4618      	mov	r0, r3
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b20      	cmp	r3, #32
 8001130:	d139      	bne.n	80011a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800113c:	2302      	movs	r3, #2
 800113e:	e033      	b.n	80011a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800116e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f042 0201 	orr.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2220      	movs	r2, #32
 8001196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e000      	b.n	80011a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011a6:	2302      	movs	r3, #2
  }
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b08b      	sub	sp, #44	; 0x2c
 80011b8:	af06      	add	r7, sp, #24
 80011ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e104      	b.n	80013d0 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f006 fd62 	bl	8007ca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fee3 	bl	8003fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	687e      	ldr	r6, [r7, #4]
 80011fa:	466d      	mov	r5, sp
 80011fc:	f106 0410 	add.w	r4, r6, #16
 8001200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	602b      	str	r3, [r5, #0]
 8001208:	1d33      	adds	r3, r6, #4
 800120a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f002 feab 	bl	8003f68 <USB_CoreInit>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2202      	movs	r2, #2
 800121c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	e0d5      	b.n	80013d0 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f002 fedf 	bl	8003fee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e04c      	b.n	80012d0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	3301      	adds	r3, #1
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	440b      	add	r3, r1
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001260:	7bfa      	ldrb	r2, [r7, #15]
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	b298      	uxth	r0, r3
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	440b      	add	r3, r1
 8001272:	3336      	adds	r3, #54	; 0x36
 8001274:	4602      	mov	r2, r0
 8001276:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	3303      	adds	r3, #3
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3338      	adds	r3, #56	; 0x38
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	333c      	adds	r3, #60	; 0x3c
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	4413      	add	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	3340      	adds	r3, #64	; 0x40
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3ad      	bcc.n	8001236 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e044      	b.n	800136a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	f203 1369 	addw	r3, r3, #361	; 0x169
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	440b      	add	r3, r1
 8001304:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3b5      	bcc.n	80012e0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	687e      	ldr	r6, [r7, #4]
 800137c:	466d      	mov	r5, sp
 800137e:	f106 0410 	add.w	r4, r6, #16
 8001382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	602b      	str	r3, [r5, #0]
 800138a:	1d33      	adds	r3, r6, #4
 800138c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800138e:	6838      	ldr	r0, [r7, #0]
 8001390:	f002 fe3a 	bl	8004008 <USB_DevInit>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2202      	movs	r2, #2
 800139e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e014      	b.n	80013d0 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 fa63 	bl	800288a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f004 fdf3 	bl	8005fb4 <USB_DevDisconnect>

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_Start+0x16>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e012      	b.n	8001414 <HAL_PCD_Start+0x3c>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fdc5 	bl	8003f8a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f004 fdbe 	bl	8005f86 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fdd8 	bl	8005fde <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001438:	d102      	bne.n	8001440 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fb5b 	bl	8001af6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f004 fdca 	bl	8005fde <USB_ReadInterrupts>
 800144a:	4603      	mov	r3, r0
 800144c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001450:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001454:	d112      	bne.n	800147c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001468:	b292      	uxth	r2, r2
 800146a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f006 fcb9 	bl	8007de6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001474:	2100      	movs	r1, #0
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f91e 	bl	80016b8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f004 fdac 	bl	8005fde <USB_ReadInterrupts>
 8001486:	4603      	mov	r3, r0
 8001488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800148c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001490:	d10b      	bne.n	80014aa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014a4:	b292      	uxth	r2, r2
 80014a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f004 fd95 	bl	8005fde <USB_ReadInterrupts>
 80014b4:	4603      	mov	r3, r0
 80014b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014be:	d10b      	bne.n	80014d8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014d2:	b292      	uxth	r2, r2
 80014d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f004 fd7e 	bl	8005fde <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ec:	d133      	bne.n	8001556 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0204 	bic.w	r2, r2, #4
 8001500:	b292      	uxth	r2, r2
 8001502:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150e:	b29a      	uxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0208 	bic.w	r2, r2, #8
 8001518:	b292      	uxth	r2, r2
 800151a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d107      	bne.n	8001538 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001530:	2100      	movs	r1, #0
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f006 ff08 	bl	8008348 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f006 fc8d 	bl	8007e58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001546:	b29a      	uxth	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001550:	b292      	uxth	r2, r2
 8001552:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f004 fd3f 	bl	8005fde <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800156a:	d126      	bne.n	80015ba <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001574:	b29a      	uxth	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0208 	orr.w	r2, r2, #8
 800157e:	b292      	uxth	r2, r2
 8001580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0204 	orr.w	r2, r2, #4
 80015ae:	b292      	uxth	r2, r2
 80015b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f006 fc35 	bl	8007e24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 fd0d 	bl	8005fde <USB_ReadInterrupts>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	2b80      	cmp	r3, #128	; 0x80
 80015cc:	d13f      	bne.n	800164e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e0:	b292      	uxth	r2, r2
 80015e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d12b      	bne.n	8001648 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0204 	orr.w	r2, r2, #4
 8001602:	b292      	uxth	r2, r2
 8001604:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0208 	orr.w	r2, r2, #8
 800161a:	b292      	uxth	r2, r2
 800161c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001630:	b29b      	uxth	r3, r3
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800163e:	2101      	movs	r1, #1
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f006 fe81 	bl	8008348 <HAL_PCDEx_LPM_Callback>
 8001646:	e002      	b.n	800164e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f006 fbeb 	bl	8007e24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f004 fcc3 	bl	8005fde <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001662:	d10e      	bne.n	8001682 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001676:	b292      	uxth	r2, r2
 8001678:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f006 fba4 	bl	8007dca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fca9 	bl	8005fde <USB_ReadInterrupts>
 800168c:	4603      	mov	r3, r0
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001696:	d10b      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016aa:	b292      	uxth	r2, r2
 80016ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	460b      	mov	r3, r1
 80016c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_PCD_SetAddress+0x1a>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e013      	b.n	80016fa <HAL_PCD_SetAddress+0x42>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	78fa      	ldrb	r2, [r7, #3]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 fc37 	bl	8005f5e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	4608      	mov	r0, r1
 800170c:	4611      	mov	r1, r2
 800170e:	461a      	mov	r2, r3
 8001710:	4603      	mov	r3, r0
 8001712:	70fb      	strb	r3, [r7, #3]
 8001714:	460b      	mov	r3, r1
 8001716:	803b      	strh	r3, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	da0e      	bge.n	8001746 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	f003 0307 	and.w	r3, r3, #7
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2201      	movs	r2, #1
 8001742:	705a      	strb	r2, [r3, #1]
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f003 0207 	and.w	r2, r3, #7
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	b2da      	uxtb	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001770:	883a      	ldrh	r2, [r7, #0]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	78ba      	ldrb	r2, [r7, #2]
 800177a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d004      	beq.n	800178e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b29a      	uxth	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d101      	bne.n	80017a8 <HAL_PCD_EP_Open+0xa6>
 80017a4:	2302      	movs	r3, #2
 80017a6:	e00e      	b.n	80017c6 <HAL_PCD_EP_Open+0xc4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68f9      	ldr	r1, [r7, #12]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f002 fc48 	bl	800404c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017c4:	7afb      	ldrb	r3, [r7, #11]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da0e      	bge.n	8001800 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	4613      	mov	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	4413      	add	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	705a      	strb	r2, [r3, #1]
 80017fe:	e00e      	b.n	800181e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	f003 0207 	and.w	r2, r3, #7
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	b2da      	uxtb	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_PCD_EP_Close+0x6a>
 8001834:	2302      	movs	r3, #2
 8001836:	e00e      	b.n	8001856 <HAL_PCD_EP_Close+0x88>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68f9      	ldr	r1, [r7, #12]
 8001846:	4618      	mov	r0, r3
 8001848:	f002 ff6e 	bl	8004728 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800186e:	7afb      	ldrb	r3, [r7, #11]
 8001870:	f003 0207 	and.w	r2, r3, #7
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	2200      	movs	r2, #0
 800189c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d106      	bne.n	80018c2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6979      	ldr	r1, [r7, #20]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 f921 	bl	8004b02 <USB_EPStartXfer>
 80018c0:	e005      	b.n	80018ce <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6979      	ldr	r1, [r7, #20]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 f91a 	bl	8004b02 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	f003 0207 	and.w	r2, r3, #7
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	460b      	mov	r3, r1
 8001916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001918:	7afb      	ldrb	r3, [r7, #11]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2201      	movs	r2, #1
 8001952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	b2da      	uxtb	r2, r3
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001960:	7afb      	ldrb	r3, [r7, #11]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	2b00      	cmp	r3, #0
 8001968:	d106      	bne.n	8001978 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6979      	ldr	r1, [r7, #20]
 8001970:	4618      	mov	r0, r3
 8001972:	f003 f8c6 	bl	8004b02 <USB_EPStartXfer>
 8001976:	e005      	b.n	8001984 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6979      	ldr	r1, [r7, #20]
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f8bf 	bl	8004b02 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	f003 0207 	and.w	r2, r3, #7
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d901      	bls.n	80019ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04c      	b.n	8001a46 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	da0e      	bge.n	80019d2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2201      	movs	r2, #1
 80019ce:	705a      	strb	r2, [r3, #1]
 80019d0:	e00c      	b.n	80019ec <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019d2:	78fa      	ldrb	r2, [r7, #3]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2201      	movs	r2, #1
 80019f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_PCD_EP_SetStall+0x7e>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e01c      	b.n	8001a46 <HAL_PCD_EP_SetStall+0xb8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f004 f9a0 	bl	8005d60 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d108      	bne.n	8001a3c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f004 fae1 	bl	8005ffe <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b084      	sub	sp, #16
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	f003 020f 	and.w	r2, r3, #15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d901      	bls.n	8001a6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e040      	b.n	8001aee <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da0e      	bge.n	8001a92 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a74:	78fb      	ldrb	r3, [r7, #3]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00e      	b.n	8001ab0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 0207 	and.w	r2, r3, #7
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_PCD_EP_ClrStall+0x82>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e00e      	b.n	8001aee <HAL_PCD_EP_ClrStall+0xa0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f004 f98f 	bl	8005e02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b08e      	sub	sp, #56	; 0x38
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001afe:	e2d1      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b08:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b16:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8152 	bne.w	8001dc4 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d150      	bne.n	8001bcc <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b3a:	81fb      	strh	r3, [r7, #14]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3328      	adds	r3, #40	; 0x28
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	441a      	add	r2, r3
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f006 f902 	bl	8007d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8282 	beq.w	80020a4 <PCD_EP_ISR_Handler+0x5ae>
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f040 827d 	bne.w	80020a4 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bca:	e26b      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d032      	beq.n	8001c4c <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f004 fa39 	bl	8006098 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c32:	4013      	ands	r3, r2
 8001c34:	823b      	strh	r3, [r7, #16]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	8a3a      	ldrh	r2, [r7, #16]
 8001c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c40:	b292      	uxth	r2, r2
 8001c42:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f006 f879 	bl	8007d3c <HAL_PCD_SetupStageCallback>
 8001c4a:	e22b      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c4c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f280 8227 	bge.w	80020a4 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c62:	4013      	ands	r3, r2
 8001c64:	83bb      	strh	r3, [r7, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	8bba      	ldrh	r2, [r7, #28]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	b292      	uxth	r2, r2
 8001c72:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4413      	add	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d019      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x1e2>
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	6959      	ldr	r1, [r3, #20]
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f004 f9eb 	bl	8006098 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	695a      	ldr	r2, [r3, #20]
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	441a      	add	r2, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f006 f844 	bl	8007d60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4413      	add	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d112      	bne.n	8001d26 <PCD_EP_ISR_Handler+0x230>
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e02f      	b.n	8001d86 <PCD_EP_ISR_Handler+0x290>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8001d2c:	d813      	bhi.n	8001d56 <PCD_EP_ISR_Handler+0x260>
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <PCD_EP_ISR_Handler+0x252>
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	3301      	adds	r3, #1
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	029b      	lsls	r3, r3, #10
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e017      	b.n	8001d86 <PCD_EP_ISR_Handler+0x290>
 8001d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d102      	bne.n	8001d70 <PCD_EP_ISR_Handler+0x27a>
 8001d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	029b      	lsls	r3, r3, #10
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	827b      	strh	r3, [r7, #18]
 8001d98:	8a7b      	ldrh	r3, [r7, #18]
 8001d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d9e:	827b      	strh	r3, [r7, #18]
 8001da0:	8a7b      	ldrh	r3, [r7, #18]
 8001da2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001da6:	827b      	strh	r3, [r7, #18]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	8a7b      	ldrh	r3, [r7, #18]
 8001dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	8013      	strh	r3, [r2, #0]
 8001dc2:	e16f      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dd6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f280 80e4 	bge.w	8001fa8 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001df6:	4013      	ands	r3, r2
 8001df8:	853b      	strh	r3, [r7, #40]	; 0x28
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	4413      	add	r3, r2
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	7b1b      	ldrb	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d120      	bne.n	8001e72 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	4413      	add	r3, r2
 8001e4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e54:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e56:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8083 	beq.w	8001f64 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	6959      	ldr	r1, [r3, #20]
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	88da      	ldrh	r2, [r3, #6]
 8001e6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e6c:	f004 f914 	bl	8006098 <USB_ReadPMA>
 8001e70:	e078      	b.n	8001f64 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e74:	78db      	ldrb	r3, [r3, #3]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d108      	bne.n	8001e8c <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 f91d 	bl	80020c0 <HAL_PCD_EP_DB_Receive>
 8001e86:	4603      	mov	r3, r0
 8001e88:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e8a:	e06b      	b.n	8001f64 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	881b      	ldrh	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d01f      	beq.n	8001f26 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d028      	beq.n	8001f64 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6818      	ldr	r0, [r3, #0]
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	6959      	ldr	r1, [r3, #20]
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	891a      	ldrh	r2, [r3, #8]
 8001f1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f20:	f004 f8ba 	bl	8006098 <USB_ReadPMA>
 8001f24:	e01e      	b.n	8001f64 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	6959      	ldr	r1, [r3, #20]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	895a      	ldrh	r2, [r3, #10]
 8001f5e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f60:	f004 f89a 	bl	8006098 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f6a:	441a      	add	r2, r3
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f76:	441a      	add	r2, r3
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <PCD_EP_ISR_Handler+0x498>
 8001f84:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d206      	bcs.n	8001f9c <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	4619      	mov	r1, r3
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f005 fee3 	bl	8007d60 <HAL_PCD_DataOutStageCallback>
 8001f9a:	e005      	b.n	8001fa8 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f002 fdad 	bl	8004b02 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d078      	beq.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fb2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe0:	843b      	strh	r3, [r7, #32]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	441a      	add	r2, r3
 8001ff0:	8c3b      	ldrh	r3, [r7, #32]
 8001ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	78db      	ldrb	r3, [r3, #3]
 8002002:	2b02      	cmp	r3, #2
 8002004:	d108      	bne.n	8002018 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800200a:	2b02      	cmp	r3, #2
 800200c:	d144      	bne.n	8002098 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800200e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d13f      	bne.n	8002098 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	4413      	add	r3, r2
 8002032:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800203c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	8bfb      	ldrh	r3, [r7, #30]
 8002044:	429a      	cmp	r2, r3
 8002046:	d906      	bls.n	8002056 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	8bfb      	ldrh	r3, [r7, #30]
 800204e:	1ad2      	subs	r2, r2, r3
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	619a      	str	r2, [r3, #24]
 8002054:	e002      	b.n	800205c <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	2200      	movs	r2, #0
 800205a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d106      	bne.n	8002072 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f005 fe93 	bl	8007d96 <HAL_PCD_DataInStageCallback>
 8002070:	e018      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	8bfb      	ldrh	r3, [r7, #30]
 8002078:	441a      	add	r2, r3
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	441a      	add	r2, r3
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fd36 	bl	8004b02 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002096:	e005      	b.n	80020a4 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002098:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800209a:	461a      	mov	r2, r3
 800209c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f917 	bl	80022d2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f6ff ad25 	blt.w	8001b00 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3738      	adds	r7, #56	; 0x38
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d07c      	beq.n	80021d2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	8b7b      	ldrh	r3, [r7, #26]
 8002104:	429a      	cmp	r2, r3
 8002106:	d306      	bcc.n	8002116 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	8b7b      	ldrh	r3, [r7, #26]
 800210e:	1ad2      	subs	r2, r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	619a      	str	r2, [r3, #24]
 8002114:	e002      	b.n	800211c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2200      	movs	r2, #0
 800211a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d123      	bne.n	800216c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800213a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213e:	833b      	strh	r3, [r7, #24]
 8002140:	8b3b      	ldrh	r3, [r7, #24]
 8002142:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002146:	833b      	strh	r3, [r7, #24]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	461a      	mov	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	441a      	add	r2, r3
 8002156:	8b3b      	ldrh	r3, [r7, #24]
 8002158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800215c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002168:	b29b      	uxth	r3, r3
 800216a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01f      	beq.n	80021b6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	461a      	mov	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800218c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002190:	82fb      	strh	r3, [r7, #22]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	441a      	add	r2, r3
 80021a0:	8afb      	ldrh	r3, [r7, #22]
 80021a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021b6:	8b7b      	ldrh	r3, [r7, #26]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8085 	beq.w	80022c8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	6959      	ldr	r1, [r3, #20]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	891a      	ldrh	r2, [r3, #8]
 80021ca:	8b7b      	ldrh	r3, [r7, #26]
 80021cc:	f003 ff64 	bl	8006098 <USB_ReadPMA>
 80021d0:	e07a      	b.n	80022c8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021f6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	8b7b      	ldrh	r3, [r7, #26]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d306      	bcc.n	8002210 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	8b7b      	ldrh	r3, [r7, #26]
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	619a      	str	r2, [r3, #24]
 800220e:	e002      	b.n	8002216 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d123      	bne.n	8002266 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002238:	83fb      	strh	r3, [r7, #30]
 800223a:	8bfb      	ldrh	r3, [r7, #30]
 800223c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002240:	83fb      	strh	r3, [r7, #30]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	441a      	add	r2, r3
 8002250:	8bfb      	ldrh	r3, [r7, #30]
 8002252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800225a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b00      	cmp	r3, #0
 800226e:	d11f      	bne.n	80022b0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	83bb      	strh	r3, [r7, #28]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	441a      	add	r2, r3
 800229a:	8bbb      	ldrh	r3, [r7, #28]
 800229c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022b0:	8b7b      	ldrh	r3, [r7, #26]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6959      	ldr	r1, [r3, #20]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	895a      	ldrh	r2, [r3, #10]
 80022c2:	8b7b      	ldrh	r3, [r7, #26]
 80022c4:	f003 fee8 	bl	8006098 <USB_ReadPMA>
    }
  }

  return count;
 80022c8:	8b7b      	ldrh	r3, [r7, #26]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b092      	sub	sp, #72	; 0x48
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	4613      	mov	r3, r2
 80022de:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8130 	beq.w	800254c <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	4413      	add	r3, r2
 8002306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002310:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002318:	429a      	cmp	r2, r3
 800231a:	d906      	bls.n	800232a <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	699a      	ldr	r2, [r3, #24]
 8002320:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002322:	1ad2      	subs	r2, r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	619a      	str	r2, [r3, #24]
 8002328:	e002      	b.n	8002330 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d12c      	bne.n	8002392 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4619      	mov	r1, r3
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f005 fd29 	bl	8007d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 822d 	beq.w	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b29b      	uxth	r3, r3
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236a:	827b      	strh	r3, [r7, #18]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	441a      	add	r2, r3
 800237a:	8a7b      	ldrh	r3, [r7, #18]
 800237c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	b29b      	uxth	r3, r3
 800238e:	8013      	strh	r3, [r2, #0]
 8002390:	e20b      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01f      	beq.n	80023dc <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	441a      	add	r2, r3
 80023c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 81e1 	bne.w	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023ee:	441a      	add	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80023fa:	441a      	add	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d309      	bcc.n	8002420 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	6a1a      	ldr	r2, [r3, #32]
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	1ad2      	subs	r2, r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	621a      	str	r2, [r3, #32]
 800241e:	e014      	b.n	800244a <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d106      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002428:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002434:	e009      	b.n	800244a <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d155      	bne.n	80024fe <HAL_PCD_EP_DB_Transmit+0x22c>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002460:	b29b      	uxth	r3, r3
 8002462:	461a      	mov	r2, r3
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4413      	add	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	00da      	lsls	r2, r3, #3
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	4413      	add	r3, r2
 8002474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800247c:	2b00      	cmp	r3, #0
 800247e:	d112      	bne.n	80024a6 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	881b      	ldrh	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800248a:	b29a      	uxth	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	801a      	strh	r2, [r3, #0]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	b29b      	uxth	r3, r3
 8002496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800249a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800249e:	b29a      	uxth	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	801a      	strh	r2, [r3, #0]
 80024a4:	e047      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x264>
 80024a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a8:	2b3e      	cmp	r3, #62	; 0x3e
 80024aa:	d811      	bhi.n	80024d0 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80024ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ae:	085b      	lsrs	r3, r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d002      	beq.n	80024c2 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	3301      	adds	r3, #1
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	801a      	strh	r2, [r3, #0]
 80024ce:	e032      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x264>
 80024d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <HAL_PCD_EP_DB_Transmit+0x214>
 80024e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	029b      	lsls	r3, r3, #10
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	801a      	strh	r2, [r3, #0]
 80024fc:	e01b      	b.n	8002536 <HAL_PCD_EP_DB_Transmit+0x264>
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d117      	bne.n	8002536 <HAL_PCD_EP_DB_Transmit+0x264>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	623b      	str	r3, [r7, #32]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002514:	b29b      	uxth	r3, r3
 8002516:	461a      	mov	r2, r3
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	4413      	add	r3, r2
 800251c:	623b      	str	r3, [r7, #32]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	00da      	lsls	r2, r3, #3
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	4413      	add	r3, r2
 8002528:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800252c:	61fb      	str	r3, [r7, #28]
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	b29a      	uxth	r2, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	6959      	ldr	r1, [r3, #20]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	891a      	ldrh	r2, [r3, #8]
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	b29b      	uxth	r3, r3
 8002546:	f003 fd66 	bl	8006016 <USB_WritePMA>
 800254a:	e12e      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	4413      	add	r3, r2
 8002566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002570:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002578:	429a      	cmp	r2, r3
 800257a:	d306      	bcc.n	800258a <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002582:	1ad2      	subs	r2, r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	619a      	str	r2, [r3, #24]
 8002588:	e002      	b.n	8002590 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d12c      	bne.n	80025f2 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f005 fbf9 	bl	8007d96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 80fd 	bne.w	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	441a      	add	r2, r3
 80025da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80025dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	8013      	strh	r3, [r2, #0]
 80025f0:	e0db      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11f      	bne.n	800263c <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002616:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800262c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002638:	b29b      	uxth	r3, r3
 800263a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002642:	2b01      	cmp	r3, #1
 8002644:	f040 80b1 	bne.w	80027aa <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800264e:	441a      	add	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800265a:	441a      	add	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	d309      	bcc.n	8002680 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	1ad2      	subs	r2, r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	621a      	str	r2, [r3, #32]
 800267e:	e014      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8002688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800268a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002694:	e009      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	785b      	ldrb	r3, [r3, #1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d155      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x492>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026cc:	4413      	add	r3, r2
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	00da      	lsls	r2, r3, #3
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	4413      	add	r3, r2
 80026da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d112      	bne.n	800270c <HAL_PCD_EP_DB_Transmit+0x43a>
 80026e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f4:	801a      	strh	r2, [r3, #0]
 80026f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002704:	b29a      	uxth	r2, r3
 8002706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002708:	801a      	strh	r2, [r3, #0]
 800270a:	e044      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800270c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270e:	2b3e      	cmp	r3, #62	; 0x3e
 8002710:	d811      	bhi.n	8002736 <HAL_PCD_EP_DB_Transmit+0x464>
 8002712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_PCD_EP_DB_Transmit+0x456>
 8002722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002724:	3301      	adds	r3, #1
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800272a:	b29b      	uxth	r3, r3
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	b29a      	uxth	r2, r3
 8002730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002732:	801a      	strh	r2, [r3, #0]
 8002734:	e02f      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800273c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_PCD_EP_DB_Transmit+0x47a>
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3b01      	subs	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	b29b      	uxth	r3, r3
 8002750:	029b      	lsls	r3, r3, #10
 8002752:	b29b      	uxth	r3, r3
 8002754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275c:	b29a      	uxth	r2, r3
 800275e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	e018      	b.n	8002796 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d114      	bne.n	8002796 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002774:	b29b      	uxth	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	4413      	add	r3, r2
 800277c:	637b      	str	r3, [r7, #52]	; 0x34
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	00da      	lsls	r2, r3, #3
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	4413      	add	r3, r2
 8002788:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800278c:	633b      	str	r3, [r7, #48]	; 0x30
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	b29a      	uxth	r2, r3
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	6959      	ldr	r1, [r3, #20]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	895a      	ldrh	r2, [r3, #10]
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f003 fc36 	bl	8006016 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027c4:	823b      	strh	r3, [r7, #16]
 80027c6:	8a3b      	ldrh	r3, [r7, #16]
 80027c8:	f083 0310 	eor.w	r3, r3, #16
 80027cc:	823b      	strh	r3, [r7, #16]
 80027ce:	8a3b      	ldrh	r3, [r7, #16]
 80027d0:	f083 0320 	eor.w	r3, r3, #32
 80027d4:	823b      	strh	r3, [r7, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	441a      	add	r2, r3
 80027e4:	8a3b      	ldrh	r3, [r7, #16]
 80027e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3748      	adds	r7, #72	; 0x48
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	460b      	mov	r3, r1
 8002810:	817b      	strh	r3, [r7, #10]
 8002812:	4613      	mov	r3, r2
 8002814:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00b      	beq.n	800283a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e009      	b.n	800284e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800283a:	897a      	ldrh	r2, [r7, #10]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800284e:	893b      	ldrh	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2200      	movs	r2, #0
 8002858:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	b29a      	uxth	r2, r3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	80da      	strh	r2, [r3, #6]
 8002862:	e00b      	b.n	800287c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	2201      	movs	r2, #1
 8002868:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	b29a      	uxth	r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b29a      	uxth	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	40007000 	.word	0x40007000

080028fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290a:	d130      	bne.n	800296e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800290c:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002918:	d038      	beq.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002922:	4a1e      	ldr	r2, [pc, #120]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2232      	movs	r2, #50	; 0x32
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002936:	fba2 2303 	umull	r2, r3, r2, r3
 800293a:	0c9b      	lsrs	r3, r3, #18
 800293c:	3301      	adds	r3, #1
 800293e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002940:	e002      	b.n	8002948 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3b01      	subs	r3, #1
 8002946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002954:	d102      	bne.n	800295c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f2      	bne.n	8002942 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002968:	d110      	bne.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e00f      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800296e:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297a:	d007      	beq.n	800298c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002984:	4a05      	ldr	r2, [pc, #20]	; (800299c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40007000 	.word	0x40007000
 80029a0:	20000000 	.word	0x20000000
 80029a4:	431bde83 	.word	0x431bde83

080029a8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	6053      	str	r3, [r2, #4]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40007000 	.word	0x40007000

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f000 bc56 	b.w	8003288 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029dc:	4ba1      	ldr	r3, [pc, #644]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e6:	4b9f      	ldr	r3, [pc, #636]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80e6 	beq.w	8002bca <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_RCC_OscConfig+0x4c>
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	2b0c      	cmp	r3, #12
 8002a08:	f040 808d 	bne.w	8002b26 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	f040 8089 	bne.w	8002b26 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a14:	4b93      	ldr	r3, [pc, #588]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_RCC_OscConfig+0x66>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d102      	bne.n	8002a2e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f000 bc2d 	b.w	8003288 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a32:	4b8c      	ldr	r3, [pc, #560]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d004      	beq.n	8002a48 <HAL_RCC_OscConfig+0x80>
 8002a3e:	4b89      	ldr	r3, [pc, #548]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a46:	e005      	b.n	8002a54 <HAL_RCC_OscConfig+0x8c>
 8002a48:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d224      	bcs.n	8002aa2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 fd85 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f000 bc0d 	b.w	8003288 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a6e:	4b7d      	ldr	r3, [pc, #500]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a7c      	ldr	r2, [pc, #496]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	4977      	ldr	r1, [pc, #476]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	4972      	ldr	r1, [pc, #456]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
 8002aa0:	e025      	b.n	8002aee <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002aa2:	4b70      	ldr	r3, [pc, #448]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a6f      	ldr	r2, [pc, #444]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002aa8:	f043 0308 	orr.w	r3, r3, #8
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	496a      	ldr	r1, [pc, #424]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ac0:	4b68      	ldr	r3, [pc, #416]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	4965      	ldr	r1, [pc, #404]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fd44 	bl	800356c <RCC_SetFlashLatencyFromMSIRange>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e3cc      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aee:	f000 fcb3 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8002af2:	4601      	mov	r1, r0
 8002af4:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a5a      	ldr	r2, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x2a0>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0a:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x2a4>)
 8002b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b0e:	4b58      	ldr	r3, [pc, #352]	; (8002c70 <HAL_RCC_OscConfig+0x2a8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fd ff30 	bl	8000978 <HAL_InitTick>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d052      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	e3b0      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d032      	beq.n	8002b94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4c      	ldr	r2, [pc, #304]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b3a:	f7fd ff6d 	bl	8000a18 <HAL_GetTick>
 8002b3e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b40:	e008      	b.n	8002b54 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b42:	f7fd ff69 	bl	8000a18 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e399      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b54:	4b43      	ldr	r3, [pc, #268]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0f0      	beq.n	8002b42 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b60:	4b40      	ldr	r3, [pc, #256]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	493a      	ldr	r1, [pc, #232]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4935      	ldr	r1, [pc, #212]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e01a      	b.n	8002bca <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a32      	ldr	r2, [pc, #200]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ff3a 	bl	8000a18 <HAL_GetTick>
 8002ba4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ba8:	f7fd ff36 	bl	8000a18 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e366      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bba:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x1e0>
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d073      	beq.n	8002cbe <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d005      	beq.n	8002be8 <HAL_RCC_OscConfig+0x220>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d10e      	bne.n	8002c00 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d10b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d063      	beq.n	8002cbc <HAL_RCC_OscConfig+0x2f4>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d15f      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e343      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x250>
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e01d      	b.n	8002c54 <HAL_RCC_OscConfig+0x28c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x274>
 8002c22:	4b10      	ldr	r3, [pc, #64]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a0f      	ldr	r2, [pc, #60]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0x28c>
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a08      	ldr	r2, [pc, #32]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_RCC_OscConfig+0x29c>)
 8002c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d01b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fd fedc 	bl	8000a18 <HAL_GetTick>
 8002c60:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c62:	e010      	b.n	8002c86 <HAL_RCC_OscConfig+0x2be>
 8002c64:	40021000 	.word	0x40021000
 8002c68:	0800861c 	.word	0x0800861c
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fd fed0 	bl	8000a18 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e300      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	4ba0      	ldr	r3, [pc, #640]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0f0      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2ac>
 8002c92:	e014      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fd fec0 	bl	8000a18 <HAL_GetTick>
 8002c98:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fd febc 	bl	8000a18 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e2ec      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f0      	bne.n	8002c9c <HAL_RCC_OscConfig+0x2d4>
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d060      	beq.n	8002d8c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x314>
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b0c      	cmp	r3, #12
 8002cd4:	d119      	bne.n	8002d0a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d116      	bne.n	8002d0a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cdc:	4b8a      	ldr	r3, [pc, #552]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x32c>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e2c9      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf4:	4b84      	ldr	r3, [pc, #528]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	061b      	lsls	r3, r3, #24
 8002d02:	4981      	ldr	r1, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d08:	e040      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d023      	beq.n	8002d5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d12:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1e:	f7fd fe7b 	bl	8000a18 <HAL_GetTick>
 8002d22:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fd fe77 	bl	8000a18 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e2a7      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	061b      	lsls	r3, r3, #24
 8002d52:	496d      	ldr	r1, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	604b      	str	r3, [r1, #4]
 8002d58:	e018      	b.n	8002d8c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d66:	f7fd fe57 	bl	8000a18 <HAL_GetTick>
 8002d6a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7fd fe53 	bl	8000a18 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e283      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d07f      	beq.n	8002e98 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d05f      	beq.n	8002e60 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d037      	beq.n	8002e26 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e25c      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	4a4a      	ldr	r2, [pc, #296]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002de0:	f023 0301 	bic.w	r3, r3, #1
 8002de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002de8:	f7fd fe16 	bl	8000a18 <HAL_GetTick>
 8002dec:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fd fe12 	bl	8000a18 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b11      	cmp	r3, #17
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e242      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e02:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ef      	bne.n	8002df0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002e10:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	f023 0210 	bic.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	493a      	ldr	r1, [pc, #232]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e26:	4b38      	ldr	r3, [pc, #224]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2c:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e36:	f7fd fdef 	bl	8000a18 <HAL_GetTick>
 8002e3a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e3e:	f7fd fdeb 	bl	8000a18 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b11      	cmp	r3, #17
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e21b      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e50:	4b2d      	ldr	r3, [pc, #180]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ef      	beq.n	8002e3e <HAL_RCC_OscConfig+0x476>
 8002e5e:	e01b      	b.n	8002e98 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fd fdd2 	bl	8000a18 <HAL_GetTick>
 8002e74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fd fdce 	bl	8000a18 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b11      	cmp	r3, #17
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e1fe      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e8a:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ef      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 80c1 	beq.w	8003028 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10e      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb8:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	4a12      	ldr	r2, [pc, #72]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_OscConfig+0x540>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d11c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_RCC_OscConfig+0x544>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fd fd93 	bl	8000a18 <HAL_GetTick>
 8002ef2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fd fd8f 	bl	8000a18 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d905      	bls.n	8002f10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e1bf      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f10:	4bb1      	ldr	r3, [pc, #708]	; (80031d8 <HAL_RCC_OscConfig+0x810>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ec      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02c      	beq.n	8002f82 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002f28:	4bac      	ldr	r3, [pc, #688]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	49a8      	ldr	r1, [pc, #672]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f4e:	4ba3      	ldr	r3, [pc, #652]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	4aa1      	ldr	r2, [pc, #644]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f56:	f043 0304 	orr.w	r3, r3, #4
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f5e:	4b9f      	ldr	r3, [pc, #636]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	4a9d      	ldr	r2, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6e:	e018      	b.n	8002fa2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f70:	4b9a      	ldr	r3, [pc, #616]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	4a99      	ldr	r2, [pc, #612]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f80:	e00f      	b.n	8002fa2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f82:	4b96      	ldr	r3, [pc, #600]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f88:	4a94      	ldr	r2, [pc, #592]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f8a:	f023 0301 	bic.w	r3, r3, #1
 8002f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f92:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	4a90      	ldr	r2, [pc, #576]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002f9a:	f023 0304 	bic.w	r3, r3, #4
 8002f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fd fd35 	bl	8000a18 <HAL_GetTick>
 8002fae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fd fd31 	bl	8000a18 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e15f      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0ed      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x5ea>
 8002fd6:	e01d      	b.n	8003014 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fd fd1e 	bl	8000a18 <HAL_GetTick>
 8002fdc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fd fd1a 	bl	8000a18 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e148      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ff6:	4b79      	ldr	r3, [pc, #484]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ed      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a74      	ldr	r2, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800300c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003026:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d03c      	beq.n	80030ae <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800303c:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800303e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003042:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fd fce4 	bl	8000a18 <HAL_GetTick>
 8003050:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003054:	f7fd fce0 	bl	8000a18 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e110      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003066:	4b5d      	ldr	r3, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0ef      	beq.n	8003054 <HAL_RCC_OscConfig+0x68c>
 8003074:	e01b      	b.n	80030ae <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003076:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fd fcc7 	bl	8000a18 <HAL_GetTick>
 800308a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308e:	f7fd fcc3 	bl	8000a18 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0f3      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030a0:	4b4e      	ldr	r3, [pc, #312]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 80030a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ef      	bne.n	800308e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 80e7 	beq.w	8003286 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2b02      	cmp	r3, #2
 80030be:	f040 80b7 	bne.w	8003230 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030c2:	4b46      	ldr	r3, [pc, #280]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0203 	and.w	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d124      	bne.n	8003120 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	3b01      	subs	r3, #1
 80030e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d11b      	bne.n	8003120 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d113      	bne.n	8003120 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d109      	bne.n	8003120 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	3b01      	subs	r3, #1
 800311a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d061      	beq.n	80031e4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d056      	beq.n	80031d4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003126:	4b2d      	ldr	r3, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800312c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003130:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003132:	f7fd fc71 	bl	8000a18 <HAL_GetTick>
 8003136:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313a:	f7fd fc6d 	bl	8000a18 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e09d      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f0      	bne.n	800313a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <HAL_RCC_OscConfig+0x818>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003168:	3a01      	subs	r2, #1
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003172:	0212      	lsls	r2, r2, #8
 8003174:	4311      	orrs	r1, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800317a:	0852      	lsrs	r2, r2, #1
 800317c:	3a01      	subs	r2, #1
 800317e:	0552      	lsls	r2, r2, #21
 8003180:	4311      	orrs	r1, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	3a01      	subs	r2, #1
 800318a:	0652      	lsls	r2, r2, #25
 800318c:	430a      	orrs	r2, r1
 800318e:	4913      	ldr	r1, [pc, #76]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003190:	4313      	orrs	r3, r2
 8003192:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 80031a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031ac:	f7fd fc34 	bl	8000a18 <HAL_GetTick>
 80031b0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fd fc30 	bl	8000a18 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e060      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_RCC_OscConfig+0x814>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031d2:	e058      	b.n	8003286 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e057      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
 80031d8:	40007000 	.word	0x40007000
 80031dc:	40021000 	.word	0x40021000
 80031e0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d14a      	bne.n	8003286 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031f0:	4b27      	ldr	r3, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003206:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003208:	f7fd fc06 	bl	8000a18 <HAL_GetTick>
 800320c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7fd fc02 	bl	8000a18 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e032      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x848>
 800322e:	e02a      	b.n	8003286 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d025      	beq.n	8003282 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 800323c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003240:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003248:	f023 0303 	bic.w	r3, r3, #3
 800324c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003254:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003258:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325a:	f7fd fbdd 	bl	8000a18 <HAL_GetTick>
 800325e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fbd9 	bl	8000a18 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e009      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_OscConfig+0x8c8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f0      	bne.n	8003262 <HAL_RCC_OscConfig+0x89a>
 8003280:	e001      	b.n	8003286 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e000      	b.n	8003288 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0c8      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d910      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f023 0207 	bic.w	r2, r3, #7
 80032be:	4961      	ldr	r1, [pc, #388]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b5f      	ldr	r3, [pc, #380]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b0      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d04c      	beq.n	800337e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ec:	4b56      	ldr	r3, [pc, #344]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d121      	bne.n	800333c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e09e      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d107      	bne.n	8003314 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d115      	bne.n	800333c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e092      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800331c:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e086      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800332c:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e07e      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800333c:	4b42      	ldr	r3, [pc, #264]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 0203 	bic.w	r2, r3, #3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	493f      	ldr	r1, [pc, #252]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334e:	f7fd fb63 	bl	8000a18 <HAL_GetTick>
 8003352:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003354:	e00a      	b.n	800336c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003356:	f7fd fb5f 	bl	8000a18 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e066      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336c:	4b36      	ldr	r3, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 020c 	and.w	r2, r3, #12
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	429a      	cmp	r2, r3
 800337c:	d1eb      	bne.n	8003356 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338a:	4b2f      	ldr	r3, [pc, #188]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	492c      	ldr	r1, [pc, #176]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339c:	4b29      	ldr	r3, [pc, #164]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d210      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 0207 	bic.w	r2, r3, #7
 80033b2:	4924      	ldr	r1, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ba:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1b0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e036      	b.n	800343a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4918      	ldr	r1, [pc, #96]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4910      	ldr	r1, [pc, #64]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800340a:	f000 f825 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 800340e:	4601      	mov	r1, r0
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_ClockConfig+0x1b4>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	4a0c      	ldr	r2, [pc, #48]	; (800344c <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	5cd3      	ldrb	r3, [r2, r3]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	fa21 f303 	lsr.w	r3, r1, r3
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800342a:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd faa2 	bl	8000978 <HAL_InitTick>
 8003434:	4603      	mov	r3, r0
 8003436:	72fb      	strb	r3, [r7, #11]

  return status;
 8003438:	7afb      	ldrb	r3, [r7, #11]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	0800861c 	.word	0x0800861c
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b480      	push	{r7}
 800345a:	b089      	sub	sp, #36	; 0x24
 800345c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	2300      	movs	r3, #0
 8003464:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b3d      	ldr	r3, [pc, #244]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b3a      	ldr	r3, [pc, #232]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0303 	and.w	r3, r3, #3
 8003478:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x34>
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d121      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11e      	bne.n	80034ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800348c:	4b33      	ldr	r3, [pc, #204]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003498:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c8:	e00a      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d102      	bne.n	80034d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e004      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 80034de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b0c      	cmp	r3, #12
 80034e4:	d133      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e6:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d002      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0xa4>
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d003      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0xaa>
 80034fa:	e005      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034fe:	617b      	str	r3, [r7, #20]
      break;
 8003500:	e005      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_RCC_GetSysClockFreq+0x110>)
 8003504:	617b      	str	r3, [r7, #20]
      break;
 8003506:	e002      	b.n	800350e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	617b      	str	r3, [r7, #20]
      break;
 800350c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	3301      	adds	r3, #1
 800351a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	fb02 f203 	mul.w	r2, r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_GetSysClockFreq+0x104>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0e5b      	lsrs	r3, r3, #25
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	3301      	adds	r3, #1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800354e:	69bb      	ldr	r3, [r7, #24]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3724      	adds	r7, #36	; 0x24
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40021000 	.word	0x40021000
 8003560:	0800862c 	.word	0x0800862c
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003574:	2300      	movs	r3, #0
 8003576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003584:	f7ff f9ac 	bl	80028e0 <HAL_PWREx_GetVoltageRange>
 8003588:	6178      	str	r0, [r7, #20]
 800358a:	e014      	b.n	80035b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800358c:	4b25      	ldr	r3, [pc, #148]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800358e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003590:	4a24      	ldr	r2, [pc, #144]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003596:	6593      	str	r3, [r2, #88]	; 0x58
 8003598:	4b22      	ldr	r3, [pc, #136]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035a4:	f7ff f99c 	bl	80028e0 <HAL_PWREx_GetVoltageRange>
 80035a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035aa:	4b1e      	ldr	r3, [pc, #120]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	4a1d      	ldr	r2, [pc, #116]	; (8003624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d10b      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d919      	bls.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2ba0      	cmp	r3, #160	; 0xa0
 80035c8:	d902      	bls.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035ca:	2302      	movs	r3, #2
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	e013      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035d0:	2301      	movs	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e010      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d902      	bls.n	80035e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035dc:	2303      	movs	r3, #3
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e00a      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	d102      	bne.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035e8:	2302      	movs	r3, #2
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e004      	b.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b70      	cmp	r3, #112	; 0x70
 80035f2:	d101      	bne.n	80035f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035f4:	2301      	movs	r3, #1
 80035f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 0207 	bic.w	r2, r3, #7
 8003600:	4909      	ldr	r1, [pc, #36]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003608:	4b07      	ldr	r3, [pc, #28]	; (8003628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	429a      	cmp	r2, r3
 8003614:	d001      	beq.n	800361a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	40022000 	.word	0x40022000

0800362c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003634:	2300      	movs	r3, #0
 8003636:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003638:	2300      	movs	r3, #0
 800363a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 809e 	beq.w	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800364e:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800365e:	2300      	movs	r3, #0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003664:	4b40      	ldr	r3, [pc, #256]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	4a3f      	ldr	r2, [pc, #252]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800366a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366e:	6593      	str	r3, [r2, #88]	; 0x58
 8003670:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367c:	2301      	movs	r3, #1
 800367e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003680:	4b3a      	ldr	r3, [pc, #232]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a39      	ldr	r2, [pc, #228]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800368c:	f7fd f9c4 	bl	8000a18 <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003692:	e009      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003694:	f7fd f9c0 	bl	8000a18 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d902      	bls.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	74fb      	strb	r3, [r7, #19]
        break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036a8:	4b30      	ldr	r3, [pc, #192]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ef      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d15a      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036ba:	4b2b      	ldr	r3, [pc, #172]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d01e      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d019      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036d6:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f2:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003702:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd f980 	bl	8000a18 <HAL_GetTick>
 8003718:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371a:	e00b      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fd f97c 	bl	8000a18 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d902      	bls.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	74fb      	strb	r3, [r7, #19]
            break;
 8003732:	e006      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ec      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003758:	4313      	orrs	r3, r2
 800375a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800375e:	e009      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	7cfb      	ldrb	r3, [r7, #19]
 8003772:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003774:	7c7b      	ldrb	r3, [r7, #17]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377a:	4b6e      	ldr	r3, [pc, #440]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	4a6d      	ldr	r2, [pc, #436]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003792:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003798:	f023 0203 	bic.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4964      	ldr	r1, [pc, #400]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b4:	4b5f      	ldr	r3, [pc, #380]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f023 020c 	bic.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4953      	ldr	r1, [pc, #332]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f8:	4b4e      	ldr	r3, [pc, #312]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	494b      	ldr	r1, [pc, #300]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800381a:	4b46      	ldr	r3, [pc, #280]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4942      	ldr	r1, [pc, #264]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00a      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800383c:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	493a      	ldr	r1, [pc, #232]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800384c:	4313      	orrs	r3, r2
 800384e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385e:	4b35      	ldr	r3, [pc, #212]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4931      	ldr	r1, [pc, #196]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003880:	4b2c      	ldr	r3, [pc, #176]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	4929      	ldr	r1, [pc, #164]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a2:	4b24      	ldr	r3, [pc, #144]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4920      	ldr	r1, [pc, #128]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d015      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c4:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	4918      	ldr	r1, [pc, #96]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4a12      	ldr	r2, [pc, #72]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	490a      	ldr	r1, [pc, #40]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391a:	d105      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	4a04      	ldr	r2, [pc, #16]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003926:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003928:	7cbb      	ldrb	r3, [r7, #18]
}
 800392a:	4618      	mov	r0, r3
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000

08003938 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e095      	b.n	8003a76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b00      	cmp	r3, #0
 8003950:	d108      	bne.n	8003964 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395a:	d009      	beq.n	8003970 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
 8003962:	e005      	b.n	8003970 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fc fe32 	bl	80005f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b0:	d902      	bls.n	80039b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e002      	b.n	80039be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039c6:	d007      	beq.n	80039d8 <HAL_SPI_Init+0xa0>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039d0:	d002      	beq.n	80039d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	431a      	orrs	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	431a      	orrs	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1a:	ea42 0103 	orr.w	r1, r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0204 	and.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a54:	ea42 0103 	orr.w	r1, r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e049      	b.n	8003b24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fc ff05 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f000 f8ef 	bl	8003ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_ConfigClockSource+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e0a8      	b.n	8003c96 <HAL_TIM_ConfigClockSource+0x16a>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b40      	cmp	r3, #64	; 0x40
 8003b7e:	d067      	beq.n	8003c50 <HAL_TIM_ConfigClockSource+0x124>
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d80b      	bhi.n	8003b9c <HAL_TIM_ConfigClockSource+0x70>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d073      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x144>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d802      	bhi.n	8003b92 <HAL_TIM_ConfigClockSource+0x66>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d06f      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003b90:	e078      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	d06c      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x144>
 8003b96:	2b30      	cmp	r3, #48	; 0x30
 8003b98:	d06a      	beq.n	8003c70 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003b9a:	e073      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003b9c:	2b70      	cmp	r3, #112	; 0x70
 8003b9e:	d00d      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0x90>
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d804      	bhi.n	8003bae <HAL_TIM_ConfigClockSource+0x82>
 8003ba4:	2b50      	cmp	r3, #80	; 0x50
 8003ba6:	d033      	beq.n	8003c10 <HAL_TIM_ConfigClockSource+0xe4>
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d041      	beq.n	8003c30 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003bac:	e06a      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d066      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x156>
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	d017      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003bba:	e063      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f000 f946 	bl	8003e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bde:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
      break;
 8003be8:	e04c      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 f92f 	bl	8003e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c0c:	609a      	str	r2, [r3, #8]
      break;
 8003c0e:	e039      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	f000 f8a3 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2150      	movs	r1, #80	; 0x50
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 f8fc 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003c2e:	e029      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6859      	ldr	r1, [r3, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f000 f8c2 	bl	8003dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2160      	movs	r1, #96	; 0x60
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f8ec 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e019      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f000 f883 	bl	8003d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2140      	movs	r1, #64	; 0x40
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f000 f8dc 	bl	8003e26 <TIM_ITRx_SetConfig>
      break;
 8003c6e:	e009      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 f8d3 	bl	8003e26 <TIM_ITRx_SetConfig>
        break;
 8003c80:	e000      	b.n	8003c84 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <TIM_Base_SetConfig+0xbc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0x20>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cbe:	d108      	bne.n	8003cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <TIM_Base_SetConfig+0xbc>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00b      	beq.n	8003cf2 <TIM_Base_SetConfig+0x52>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d007      	beq.n	8003cf2 <TIM_Base_SetConfig+0x52>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <TIM_Base_SetConfig+0xc0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d003      	beq.n	8003cf2 <TIM_Base_SetConfig+0x52>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <TIM_Base_SetConfig+0xc4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d108      	bne.n	8003d04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <TIM_Base_SetConfig+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d007      	beq.n	8003d40 <TIM_Base_SetConfig+0xa0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <TIM_Base_SetConfig+0xc0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d003      	beq.n	8003d40 <TIM_Base_SetConfig+0xa0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <TIM_Base_SetConfig+0xc4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400

08003d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	f023 0201 	bic.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 030a 	bic.w	r3, r3, #10
 8003da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0210 	bic.w	r2, r3, #16
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	031b      	lsls	r3, r3, #12
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b085      	sub	sp, #20
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	f043 0307 	orr.w	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	609a      	str	r2, [r3, #8]
}
 8003e50:	bf00      	nop
 8003e52:	3714      	adds	r7, #20
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e04f      	b.n	8003f54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ee4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d004      	beq.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d10c      	bne.n	8003f42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40014000 	.word	0x40014000

08003f68 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003f68:	b084      	sub	sp, #16
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	f107 0014 	add.w	r0, r7, #20
 8003f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	b004      	add	sp, #16
 8003f88:	4770      	bx	lr

08003f8a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003f9a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003f9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003fc0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003fc4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004008:	b084      	sub	sp, #16
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	f107 0014 	add.w	r0, r7, #20
 8004016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	b004      	add	sp, #16
 8004048:	4770      	bx	lr
	...

0800404c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800404c:	b480      	push	{r7}
 800404e:	b09b      	sub	sp, #108	; 0x6c
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	b29b      	uxth	r3, r3
 800406a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800406e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004072:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d81f      	bhi.n	80040be <USB_ActivateEndpoint+0x72>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <USB_ActivateEndpoint+0x38>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	08004095 	.word	0x08004095
 8004088:	080040b1 	.word	0x080040b1
 800408c:	080040c7 	.word	0x080040c7
 8004090:	080040a3 	.word	0x080040a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004094:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040a0:	e012      	b.n	80040c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80040a2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80040aa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040ae:	e00b      	b.n	80040c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80040b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80040bc:	e004      	b.n	80040c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80040c4:	e000      	b.n	80040c8 <USB_ActivateEndpoint+0x7c>
      break;
 80040c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	441a      	add	r2, r3
 80040d2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	b21a      	sxth	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b21b      	sxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b21b      	sxth	r3, r3
 800410e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	441a      	add	r2, r3
 800411c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004130:	b29b      	uxth	r3, r3
 8004132:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	7b1b      	ldrb	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f040 8149 	bne.w	80043d0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8084 	beq.w	8004250 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	00da      	lsls	r2, r3, #3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	88db      	ldrh	r3, [r3, #6]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	81fb      	strh	r3, [r7, #14]
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <USB_ActivateEndpoint+0x180>
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	81bb      	strh	r3, [r7, #12]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	441a      	add	r2, r3
 80041b6:	89bb      	ldrh	r3, [r7, #12]
 80041b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d020      	beq.n	8004216 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ea:	813b      	strh	r3, [r7, #8]
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	f083 0320 	eor.w	r3, r3, #32
 80041f2:	813b      	strh	r3, [r7, #8]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004204:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	b29b      	uxth	r3, r3
 8004212:	8013      	strh	r3, [r2, #0]
 8004214:	e27f      	b.n	8004716 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	881b      	ldrh	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	441a      	add	r2, r3
 8004238:	897b      	ldrh	r3, [r7, #10]
 800423a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800423e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	b29b      	uxth	r3, r3
 800424c:	8013      	strh	r3, [r2, #0]
 800424e:	e262      	b.n	8004716 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425a:	b29b      	uxth	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004260:	4413      	add	r3, r2
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	00da      	lsls	r2, r3, #3
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	4413      	add	r3, r2
 800426e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004272:	62bb      	str	r3, [r7, #40]	; 0x28
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	88db      	ldrh	r3, [r3, #6]
 8004278:	085b      	lsrs	r3, r3, #1
 800427a:	b29b      	uxth	r3, r3
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	627b      	str	r3, [r7, #36]	; 0x24
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800428e:	b29b      	uxth	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	4413      	add	r3, r2
 8004296:	627b      	str	r3, [r7, #36]	; 0x24
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	00da      	lsls	r2, r3, #3
 800429e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a0:	4413      	add	r3, r2
 80042a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d112      	bne.n	80042d6 <USB_ActivateEndpoint+0x28a>
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	881b      	ldrh	r3, [r3, #0]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	e02f      	b.n	8004336 <USB_ActivateEndpoint+0x2ea>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b3e      	cmp	r3, #62	; 0x3e
 80042dc:	d813      	bhi.n	8004306 <USB_ActivateEndpoint+0x2ba>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <USB_ActivateEndpoint+0x2ac>
 80042f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f4:	3301      	adds	r3, #1
 80042f6:	663b      	str	r3, [r7, #96]	; 0x60
 80042f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	029b      	lsls	r3, r3, #10
 80042fe:	b29a      	uxth	r2, r3
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	e017      	b.n	8004336 <USB_ActivateEndpoint+0x2ea>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	663b      	str	r3, [r7, #96]	; 0x60
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	2b00      	cmp	r3, #0
 8004318:	d102      	bne.n	8004320 <USB_ActivateEndpoint+0x2d4>
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	3b01      	subs	r3, #1
 800431e:	663b      	str	r3, [r7, #96]	; 0x60
 8004320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004322:	b29b      	uxth	r3, r3
 8004324:	029b      	lsls	r3, r3, #10
 8004326:	b29b      	uxth	r3, r3
 8004328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800432c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004330:	b29a      	uxth	r2, r3
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	83fb      	strh	r3, [r7, #30]
 8004344:	8bfb      	ldrh	r3, [r7, #30]
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d01b      	beq.n	8004386 <USB_ActivateEndpoint+0x33a>
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004364:	83bb      	strh	r3, [r7, #28]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	8bbb      	ldrh	r3, [r7, #28]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	837b      	strh	r3, [r7, #26]
 800439e:	8b7b      	ldrh	r3, [r7, #26]
 80043a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80043a4:	837b      	strh	r3, [r7, #26]
 80043a6:	8b7b      	ldrh	r3, [r7, #26]
 80043a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80043ac:	837b      	strh	r3, [r7, #26]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	441a      	add	r2, r3
 80043b8:	8b7b      	ldrh	r3, [r7, #26]
 80043ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	8013      	strh	r3, [r2, #0]
 80043ce:	e1a2      	b.n	8004716 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	441a      	add	r2, r3
 80043f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004400:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800441c:	4413      	add	r3, r2
 800441e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	00da      	lsls	r2, r3, #3
 8004426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004428:	4413      	add	r3, r2
 800442a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	891b      	ldrh	r3, [r3, #8]
 8004434:	085b      	lsrs	r3, r3, #1
 8004436:	b29b      	uxth	r3, r3
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	653b      	str	r3, [r7, #80]	; 0x50
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004450:	4413      	add	r3, r2
 8004452:	653b      	str	r3, [r7, #80]	; 0x50
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	00da      	lsls	r2, r3, #3
 800445a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800445c:	4413      	add	r3, r2
 800445e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	895b      	ldrh	r3, [r3, #10]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	b29b      	uxth	r3, r3
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	785b      	ldrb	r3, [r3, #1]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f040 8091 	bne.w	80045a0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800448c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800448e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <USB_ActivateEndpoint+0x482>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	441a      	add	r2, r3
 80044b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80044ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	873b      	strh	r3, [r7, #56]	; 0x38
 80044dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <USB_ActivateEndpoint+0x4d2>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004516:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004536:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004538:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800453c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800453e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004540:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004544:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	441a      	add	r2, r3
 8004550:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800455e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004562:	b29b      	uxth	r3, r3
 8004564:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	b29b      	uxth	r3, r3
 8004574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457c:	867b      	strh	r3, [r7, #50]	; 0x32
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]
 800459e:	e0ba      	b.n	8004716 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80045b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01d      	beq.n	80045f8 <USB_ActivateEndpoint+0x5ac>
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004608:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800460c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01d      	beq.n	8004650 <USB_ActivateEndpoint+0x604>
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	b29b      	uxth	r3, r3
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	441a      	add	r2, r3
 8004638:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004648:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	78db      	ldrb	r3, [r3, #3]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d024      	beq.n	80046a2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800466e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004672:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004676:	f083 0320 	eor.w	r3, r3, #32
 800467a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	441a      	add	r2, r3
 8004688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800468c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004690:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	b29b      	uxth	r3, r3
 800469e:	8013      	strh	r3, [r2, #0]
 80046a0:	e01d      	b.n	80046de <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	441a      	add	r2, r3
 80046c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80046ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046da:	b29b      	uxth	r3, r3
 80046dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004716:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800471a:	4618      	mov	r0, r3
 800471c:	376c      	adds	r7, #108	; 0x6c
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop

08004728 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004728:	b480      	push	{r7}
 800472a:	b08d      	sub	sp, #52	; 0x34
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	7b1b      	ldrb	r3, [r3, #12]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f040 808e 	bne.w	8004858 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d044      	beq.n	80047ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	81bb      	strh	r3, [r7, #12]
 8004752:	89bb      	ldrh	r3, [r7, #12]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <USB_DeactivateEndpoint+0x6c>
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	817b      	strh	r3, [r7, #10]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	441a      	add	r2, r3
 800477e:	897b      	ldrh	r3, [r7, #10]
 8004780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004790:	b29b      	uxth	r3, r3
 8004792:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047aa:	813b      	strh	r3, [r7, #8]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	441a      	add	r2, r3
 80047b6:	893b      	ldrh	r3, [r7, #8]
 80047b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	8013      	strh	r3, [r2, #0]
 80047cc:	e192      	b.n	8004af4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	827b      	strh	r3, [r7, #18]
 80047dc:	8a7b      	ldrh	r3, [r7, #18]
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01b      	beq.n	800481e <USB_DeactivateEndpoint+0xf6>
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fc:	823b      	strh	r3, [r7, #16]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	441a      	add	r2, r3
 8004808:	8a3b      	ldrh	r3, [r7, #16]
 800480a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	b29b      	uxth	r3, r3
 800481c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004834:	81fb      	strh	r3, [r7, #14]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800484a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004852:	b29b      	uxth	r3, r3
 8004854:	8013      	strh	r3, [r2, #0]
 8004856:	e14d      	b.n	8004af4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f040 80a5 	bne.w	80049ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	843b      	strh	r3, [r7, #32]
 8004870:	8c3b      	ldrh	r3, [r7, #32]
 8004872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01b      	beq.n	80048b2 <USB_DeactivateEndpoint+0x18a>
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004890:	83fb      	strh	r3, [r7, #30]
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	441a      	add	r2, r3
 800489c:	8bfb      	ldrh	r3, [r7, #30]
 800489e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4413      	add	r3, r2
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	83bb      	strh	r3, [r7, #28]
 80048c0:	8bbb      	ldrh	r3, [r7, #28]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01b      	beq.n	8004902 <USB_DeactivateEndpoint+0x1da>
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e0:	837b      	strh	r3, [r7, #26]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	441a      	add	r2, r3
 80048ec:	8b7b      	ldrh	r3, [r7, #26]
 80048ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048fe:	b29b      	uxth	r3, r3
 8004900:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	833b      	strh	r3, [r7, #24]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	8b3b      	ldrh	r3, [r7, #24]
 8004926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800492a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004950:	82fb      	strh	r3, [r7, #22]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	8afb      	ldrh	r3, [r7, #22]
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004988:	82bb      	strh	r3, [r7, #20]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	441a      	add	r2, r3
 8004994:	8abb      	ldrh	r3, [r7, #20]
 8004996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	8013      	strh	r3, [r2, #0]
 80049aa:	e0a3      	b.n	8004af4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80049ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01b      	beq.n	80049fc <USB_DeactivateEndpoint+0x2d4>
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	441a      	add	r2, r3
 80049e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01b      	beq.n	8004a4c <USB_DeactivateEndpoint+0x324>
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	881b      	ldrh	r3, [r3, #0]
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a2a:	853b      	strh	r3, [r7, #40]	; 0x28
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	441a      	add	r2, r3
 8004a36:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	441a      	add	r2, r3
 8004a6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aa8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	881b      	ldrh	r3, [r3, #0]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad2:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	441a      	add	r2, r3
 8004ade:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3734      	adds	r7, #52	; 0x34
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b0c4      	sub	sp, #272	; 0x110
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	6018      	str	r0, [r3, #0]
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b10:	463b      	mov	r3, r7
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	f040 8566 	bne.w	80055e8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004b1c:	463b      	mov	r3, r7
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	463b      	mov	r3, r7
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d905      	bls.n	8004b38 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004b2c:	463b      	mov	r3, r7
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004b36:	e004      	b.n	8004b42 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004b38:	463b      	mov	r3, r7
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004b42:	463b      	mov	r3, r7
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	7b1b      	ldrb	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d12c      	bne.n	8004ba6 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004b4c:	463b      	mov	r3, r7
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6959      	ldr	r1, [r3, #20]
 8004b52:	463b      	mov	r3, r7
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	88da      	ldrh	r2, [r3, #6]
 8004b58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	1d38      	adds	r0, r7, #4
 8004b60:	6800      	ldr	r0, [r0, #0]
 8004b62:	f001 fa58 	bl	8006016 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b66:	1d3b      	adds	r3, r7, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	463b      	mov	r3, r7
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	00da      	lsls	r2, r3, #3
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	801a      	strh	r2, [r3, #0]
 8004ba2:	f000 bcec 	b.w	800557e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	78db      	ldrb	r3, [r3, #3]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	f040 8356 	bne.w	800525e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a1a      	ldr	r2, [r3, #32]
 8004bb8:	463b      	mov	r3, r7
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	f240 82fa 	bls.w	80051b8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	463b      	mov	r3, r7
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	463b      	mov	r3, r7
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8004c08:	463b      	mov	r3, r7
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004c12:	463b      	mov	r3, r7
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c1c:	1ad2      	subs	r2, r2, r3
 8004c1e:	463b      	mov	r3, r7
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c24:	1d3b      	adds	r3, r7, #4
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	463b      	mov	r3, r7
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 815e 	beq.w	8004efc <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c40:	1d3b      	adds	r3, r7, #4
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	463b      	mov	r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d164      	bne.n	8004d1a <USB_EPStartXfer+0x218>
 8004c50:	1d3b      	adds	r3, r7, #4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c56:	1d3b      	adds	r3, r7, #4
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c64:	4413      	add	r3, r2
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c68:	463b      	mov	r3, r7
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	00da      	lsls	r2, r3, #3
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	4413      	add	r3, r2
 8004c74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d112      	bne.n	8004ca8 <USB_EPStartXfer+0x1a6>
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	e054      	b.n	8004d52 <USB_EPStartXfer+0x250>
 8004ca8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cac:	2b3e      	cmp	r3, #62	; 0x3e
 8004cae:	d817      	bhi.n	8004ce0 <USB_EPStartXfer+0x1de>
 8004cb0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <USB_EPStartXfer+0x1ce>
 8004cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	029b      	lsls	r3, r3, #10
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e038      	b.n	8004d52 <USB_EPStartXfer+0x250>
 8004ce0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d104      	bne.n	8004d00 <USB_EPStartXfer+0x1fe>
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	029b      	lsls	r3, r3, #10
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e01b      	b.n	8004d52 <USB_EPStartXfer+0x250>
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d116      	bne.n	8004d52 <USB_EPStartXfer+0x250>
 8004d24:	1d3b      	adds	r3, r7, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d32:	4413      	add	r3, r2
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
 8004d36:	463b      	mov	r3, r7
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	00da      	lsls	r2, r3, #3
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	4413      	add	r3, r2
 8004d42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d46:	633b      	str	r3, [r7, #48]	; 0x30
 8004d48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d52:	463b      	mov	r3, r7
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	895b      	ldrh	r3, [r3, #10]
 8004d58:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d5c:	463b      	mov	r3, r7
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6959      	ldr	r1, [r3, #20]
 8004d62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004d6c:	1d38      	adds	r0, r7, #4
 8004d6e:	6800      	ldr	r0, [r0, #0]
 8004d70:	f001 f951 	bl	8006016 <USB_WritePMA>
            ep->xfer_buff += len;
 8004d74:	463b      	mov	r3, r7
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d7e:	441a      	add	r2, r3
 8004d80:	463b      	mov	r3, r7
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004d86:	463b      	mov	r3, r7
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	463b      	mov	r3, r7
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d90e      	bls.n	8004db4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8004d96:	463b      	mov	r3, r7
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004da0:	463b      	mov	r3, r7
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	463b      	mov	r3, r7
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	621a      	str	r2, [r3, #32]
 8004db2:	e008      	b.n	8004dc6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004db4:	463b      	mov	r3, r7
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dc6:	463b      	mov	r3, r7
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d164      	bne.n	8004e9a <USB_EPStartXfer+0x398>
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	1d3b      	adds	r3, r7, #4
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	4413      	add	r3, r2
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00da      	lsls	r2, r3, #3
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	4413      	add	r3, r2
 8004df4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004df8:	61bb      	str	r3, [r7, #24]
 8004dfa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d112      	bne.n	8004e28 <USB_EPStartXfer+0x326>
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	801a      	strh	r2, [r3, #0]
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	801a      	strh	r2, [r3, #0]
 8004e26:	e057      	b.n	8004ed8 <USB_EPStartXfer+0x3d6>
 8004e28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e2e:	d817      	bhi.n	8004e60 <USB_EPStartXfer+0x35e>
 8004e30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d004      	beq.n	8004e50 <USB_EPStartXfer+0x34e>
 8004e46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e03b      	b.n	8004ed8 <USB_EPStartXfer+0x3d6>
 8004e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d104      	bne.n	8004e80 <USB_EPStartXfer+0x37e>
 8004e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004e80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	029b      	lsls	r3, r3, #10
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	e01e      	b.n	8004ed8 <USB_EPStartXfer+0x3d6>
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d119      	bne.n	8004ed8 <USB_EPStartXfer+0x3d6>
 8004ea4:	1d3b      	adds	r3, r7, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	4413      	add	r3, r2
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	00da      	lsls	r2, r3, #3
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ed8:	463b      	mov	r3, r7
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	891b      	ldrh	r3, [r3, #8]
 8004ede:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ee2:	463b      	mov	r3, r7
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6959      	ldr	r1, [r3, #20]
 8004ee8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004ef2:	1d38      	adds	r0, r7, #4
 8004ef4:	6800      	ldr	r0, [r0, #0]
 8004ef6:	f001 f88e 	bl	8006016 <USB_WritePMA>
 8004efa:	e340      	b.n	800557e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004efc:	463b      	mov	r3, r7
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	785b      	ldrb	r3, [r3, #1]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d164      	bne.n	8004fd0 <USB_EPStartXfer+0x4ce>
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	1d3b      	adds	r3, r7, #4
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1a:	4413      	add	r3, r2
 8004f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1e:	463b      	mov	r3, r7
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	00da      	lsls	r2, r3, #3
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	4413      	add	r3, r2
 8004f2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d112      	bne.n	8004f5e <USB_EPStartXfer+0x45c>
 8004f38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f46:	801a      	strh	r2, [r3, #0]
 8004f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f5a:	801a      	strh	r2, [r3, #0]
 8004f5c:	e057      	b.n	800500e <USB_EPStartXfer+0x50c>
 8004f5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f62:	2b3e      	cmp	r3, #62	; 0x3e
 8004f64:	d817      	bhi.n	8004f96 <USB_EPStartXfer+0x494>
 8004f66:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <USB_EPStartXfer+0x484>
 8004f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	029b      	lsls	r3, r3, #10
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e03b      	b.n	800500e <USB_EPStartXfer+0x50c>
 8004f96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004fa4:	f003 031f 	and.w	r3, r3, #31
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d104      	bne.n	8004fb6 <USB_EPStartXfer+0x4b4>
 8004fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	e01e      	b.n	800500e <USB_EPStartXfer+0x50c>
 8004fd0:	463b      	mov	r3, r7
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	785b      	ldrb	r3, [r3, #1]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d119      	bne.n	800500e <USB_EPStartXfer+0x50c>
 8004fda:	1d3b      	adds	r3, r7, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	657b      	str	r3, [r7, #84]	; 0x54
 8004fe0:	1d3b      	adds	r3, r7, #4
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fee:	4413      	add	r3, r2
 8004ff0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00da      	lsls	r2, r3, #3
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005002:	653b      	str	r3, [r7, #80]	; 0x50
 8005004:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005008:	b29a      	uxth	r2, r3
 800500a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800500e:	463b      	mov	r3, r7
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	891b      	ldrh	r3, [r3, #8]
 8005014:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005018:	463b      	mov	r3, r7
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6959      	ldr	r1, [r3, #20]
 800501e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005022:	b29b      	uxth	r3, r3
 8005024:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005028:	1d38      	adds	r0, r7, #4
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	f000 fff3 	bl	8006016 <USB_WritePMA>
            ep->xfer_buff += len;
 8005030:	463b      	mov	r3, r7
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800503a:	441a      	add	r2, r3
 800503c:	463b      	mov	r3, r7
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	463b      	mov	r3, r7
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	429a      	cmp	r2, r3
 8005050:	d90e      	bls.n	8005070 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8005052:	463b      	mov	r3, r7
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800505c:	463b      	mov	r3, r7
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6a1a      	ldr	r2, [r3, #32]
 8005062:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005066:	1ad2      	subs	r2, r2, r3
 8005068:	463b      	mov	r3, r7
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	621a      	str	r2, [r3, #32]
 800506e:	e008      	b.n	8005082 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8005070:	463b      	mov	r3, r7
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2200      	movs	r2, #0
 8005080:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
 8005088:	463b      	mov	r3, r7
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d164      	bne.n	800515c <USB_EPStartXfer+0x65a>
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a6:	4413      	add	r3, r2
 80050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050aa:	463b      	mov	r3, r7
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00da      	lsls	r2, r3, #3
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	4413      	add	r3, r2
 80050b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80050bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d112      	bne.n	80050ea <USB_EPStartXfer+0x5e8>
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050ce:	b29a      	uxth	r2, r3
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	801a      	strh	r2, [r3, #0]
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	801a      	strh	r2, [r3, #0]
 80050e8:	e054      	b.n	8005194 <USB_EPStartXfer+0x692>
 80050ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050ee:	2b3e      	cmp	r3, #62	; 0x3e
 80050f0:	d817      	bhi.n	8005122 <USB_EPStartXfer+0x620>
 80050f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80050fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <USB_EPStartXfer+0x610>
 8005108:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800510c:	3301      	adds	r3, #1
 800510e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005116:	b29b      	uxth	r3, r3
 8005118:	029b      	lsls	r3, r3, #10
 800511a:	b29a      	uxth	r2, r3
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	801a      	strh	r2, [r3, #0]
 8005120:	e038      	b.n	8005194 <USB_EPStartXfer+0x692>
 8005122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800512c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2b00      	cmp	r3, #0
 8005136:	d104      	bne.n	8005142 <USB_EPStartXfer+0x640>
 8005138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800513c:	3b01      	subs	r3, #1
 800513e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005146:	b29b      	uxth	r3, r3
 8005148:	029b      	lsls	r3, r3, #10
 800514a:	b29b      	uxth	r3, r3
 800514c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005154:	b29a      	uxth	r2, r3
 8005156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005158:	801a      	strh	r2, [r3, #0]
 800515a:	e01b      	b.n	8005194 <USB_EPStartXfer+0x692>
 800515c:	463b      	mov	r3, r7
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	785b      	ldrb	r3, [r3, #1]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d116      	bne.n	8005194 <USB_EPStartXfer+0x692>
 8005166:	1d3b      	adds	r3, r7, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516e:	b29b      	uxth	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005174:	4413      	add	r3, r2
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
 8005178:	463b      	mov	r3, r7
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	00da      	lsls	r2, r3, #3
 8005180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005182:	4413      	add	r3, r2
 8005184:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005188:	643b      	str	r3, [r7, #64]	; 0x40
 800518a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800518e:	b29a      	uxth	r2, r3
 8005190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005192:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005194:	463b      	mov	r3, r7
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	895b      	ldrh	r3, [r3, #10]
 800519a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800519e:	463b      	mov	r3, r7
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6959      	ldr	r1, [r3, #20]
 80051a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80051ae:	1d38      	adds	r0, r7, #4
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	f000 ff30 	bl	8006016 <USB_WritePMA>
 80051b6:	e1e2      	b.n	800557e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80051b8:	463b      	mov	r3, r7
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051c2:	1d3b      	adds	r3, r7, #4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	463b      	mov	r3, r7
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	663b      	str	r3, [r7, #96]	; 0x60
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800521a:	4413      	add	r3, r2
 800521c:	663b      	str	r3, [r7, #96]	; 0x60
 800521e:	463b      	mov	r3, r7
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	00da      	lsls	r2, r3, #3
 8005226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005228:	4413      	add	r3, r2
 800522a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800522e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005230:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005234:	b29a      	uxth	r2, r3
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	891b      	ldrh	r3, [r3, #8]
 8005240:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005244:	463b      	mov	r3, r7
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6959      	ldr	r1, [r3, #20]
 800524a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800524e:	b29b      	uxth	r3, r3
 8005250:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8005254:	1d38      	adds	r0, r7, #4
 8005256:	6800      	ldr	r0, [r0, #0]
 8005258:	f000 fedd 	bl	8006016 <USB_WritePMA>
 800525c:	e18f      	b.n	800557e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800525e:	1d3b      	adds	r3, r7, #4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	463b      	mov	r3, r7
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	b29b      	uxth	r3, r3
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 808f 	beq.w	8005398 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005280:	463b      	mov	r3, r7
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d164      	bne.n	8005354 <USB_EPStartXfer+0x852>
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	673b      	str	r3, [r7, #112]	; 0x70
 8005290:	1d3b      	adds	r3, r7, #4
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800529e:	4413      	add	r3, r2
 80052a0:	673b      	str	r3, [r7, #112]	; 0x70
 80052a2:	463b      	mov	r3, r7
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	00da      	lsls	r2, r3, #3
 80052aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d112      	bne.n	80052e2 <USB_EPStartXfer+0x7e0>
 80052bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052da:	b29a      	uxth	r2, r3
 80052dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052de:	801a      	strh	r2, [r3, #0]
 80052e0:	e054      	b.n	800538c <USB_EPStartXfer+0x88a>
 80052e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052e6:	2b3e      	cmp	r3, #62	; 0x3e
 80052e8:	d817      	bhi.n	800531a <USB_EPStartXfer+0x818>
 80052ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <USB_EPStartXfer+0x808>
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	3301      	adds	r3, #1
 8005306:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	b29b      	uxth	r3, r3
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	b29a      	uxth	r2, r3
 8005314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e038      	b.n	800538c <USB_EPStartXfer+0x88a>
 800531a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005328:	f003 031f 	and.w	r3, r3, #31
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <USB_EPStartXfer+0x838>
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	3b01      	subs	r3, #1
 8005336:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800533a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533e:	b29b      	uxth	r3, r3
 8005340:	029b      	lsls	r3, r3, #10
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e01b      	b.n	800538c <USB_EPStartXfer+0x88a>
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	785b      	ldrb	r3, [r3, #1]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d116      	bne.n	800538c <USB_EPStartXfer+0x88a>
 800535e:	1d3b      	adds	r3, r7, #4
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536c:	4413      	add	r3, r2
 800536e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005370:	463b      	mov	r3, r7
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	00da      	lsls	r2, r3, #3
 8005378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537a:	4413      	add	r3, r2
 800537c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005380:	677b      	str	r3, [r7, #116]	; 0x74
 8005382:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005386:	b29a      	uxth	r2, r3
 8005388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800538c:	463b      	mov	r3, r7
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	895b      	ldrh	r3, [r3, #10]
 8005392:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8005396:	e097      	b.n	80054c8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005398:	463b      	mov	r3, r7
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d168      	bne.n	8005474 <USB_EPStartXfer+0x972>
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053aa:	1d3b      	adds	r3, r7, #4
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053ba:	4413      	add	r3, r2
 80053bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053c0:	463b      	mov	r3, r7
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	00da      	lsls	r2, r3, #3
 80053c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053cc:	4413      	add	r3, r2
 80053ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d112      	bne.n	8005402 <USB_EPStartXfer+0x900>
 80053dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	e05d      	b.n	80054be <USB_EPStartXfer+0x9bc>
 8005402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005406:	2b3e      	cmp	r3, #62	; 0x3e
 8005408:	d817      	bhi.n	800543a <USB_EPStartXfer+0x938>
 800540a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800540e:	085b      	lsrs	r3, r3, #1
 8005410:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005414:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <USB_EPStartXfer+0x928>
 8005420:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005424:	3301      	adds	r3, #1
 8005426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800542a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800542e:	b29b      	uxth	r3, r3
 8005430:	029b      	lsls	r3, r3, #10
 8005432:	b29a      	uxth	r2, r3
 8005434:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005436:	801a      	strh	r2, [r3, #0]
 8005438:	e041      	b.n	80054be <USB_EPStartXfer+0x9bc>
 800543a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800543e:	095b      	lsrs	r3, r3, #5
 8005440:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005444:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2b00      	cmp	r3, #0
 800544e:	d104      	bne.n	800545a <USB_EPStartXfer+0x958>
 8005450:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005454:	3b01      	subs	r3, #1
 8005456:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800545a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800545e:	b29b      	uxth	r3, r3
 8005460:	029b      	lsls	r3, r3, #10
 8005462:	b29b      	uxth	r3, r3
 8005464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800546c:	b29a      	uxth	r2, r3
 800546e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e024      	b.n	80054be <USB_EPStartXfer+0x9bc>
 8005474:	463b      	mov	r3, r7
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d11f      	bne.n	80054be <USB_EPStartXfer+0x9bc>
 800547e:	1d3b      	adds	r3, r7, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005496:	4413      	add	r3, r2
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800549c:	463b      	mov	r3, r7
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	00da      	lsls	r2, r3, #3
 80054a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a8:	4413      	add	r3, r2
 80054aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	891b      	ldrh	r3, [r3, #8]
 80054c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054c8:	463b      	mov	r3, r7
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6959      	ldr	r1, [r3, #20]
 80054ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80054d8:	1d38      	adds	r0, r7, #4
 80054da:	6800      	ldr	r0, [r0, #0]
 80054dc:	f000 fd9b 	bl	8006016 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80054e0:	463b      	mov	r3, r7
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d122      	bne.n	8005530 <USB_EPStartXfer+0xa2e>
 80054ea:	1d3b      	adds	r3, r7, #4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005504:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8005508:	1d3b      	adds	r3, r7, #4
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	463b      	mov	r3, r7
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	441a      	add	r2, r3
 8005516:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800551a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800551e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005526:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]
 800552e:	e026      	b.n	800557e <USB_EPStartXfer+0xa7c>
 8005530:	463b      	mov	r3, r7
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d121      	bne.n	800557e <USB_EPStartXfer+0xa7c>
 800553a:	1d3b      	adds	r3, r7, #4
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	463b      	mov	r3, r7
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	b29b      	uxth	r3, r3
 800554c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005554:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8005558:	1d3b      	adds	r3, r7, #4
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	463b      	mov	r3, r7
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	441a      	add	r2, r3
 8005566:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800556a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557a:	b29b      	uxth	r3, r3
 800557c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	463b      	mov	r3, r7
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	881b      	ldrh	r3, [r3, #0]
 800558e:	b29b      	uxth	r3, r3
 8005590:	f107 020e 	add.w	r2, r7, #14
 8005594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559c:	8013      	strh	r3, [r2, #0]
 800559e:	f107 030e 	add.w	r3, r7, #14
 80055a2:	f107 020e 	add.w	r2, r7, #14
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	f082 0210 	eor.w	r2, r2, #16
 80055ac:	801a      	strh	r2, [r3, #0]
 80055ae:	f107 030e 	add.w	r3, r7, #14
 80055b2:	f107 020e 	add.w	r2, r7, #14
 80055b6:	8812      	ldrh	r2, [r2, #0]
 80055b8:	f082 0220 	eor.w	r2, r2, #32
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	463b      	mov	r3, r7
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	441a      	add	r2, r3
 80055cc:	f107 030e 	add.w	r3, r7, #14
 80055d0:	881b      	ldrh	r3, [r3, #0]
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
 80055e6:	e3b5      	b.n	8005d54 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80055e8:	463b      	mov	r3, r7
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	7b1b      	ldrb	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8090 	bne.w	8005714 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80055f4:	463b      	mov	r3, r7
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	463b      	mov	r3, r7
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	429a      	cmp	r2, r3
 8005602:	d90e      	bls.n	8005622 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8005604:	463b      	mov	r3, r7
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 800560e:	463b      	mov	r3, r7
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699a      	ldr	r2, [r3, #24]
 8005614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005618:	1ad2      	subs	r2, r2, r3
 800561a:	463b      	mov	r3, r7
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	619a      	str	r2, [r3, #24]
 8005620:	e008      	b.n	8005634 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8005622:	463b      	mov	r3, r7
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800562c:	463b      	mov	r3, r7
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800563c:	1d3b      	adds	r3, r7, #4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800564c:	4413      	add	r3, r2
 800564e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005652:	463b      	mov	r3, r7
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800565e:	4413      	add	r3, r2
 8005660:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005664:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005668:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800566c:	2b00      	cmp	r3, #0
 800566e:	d116      	bne.n	800569e <USB_EPStartXfer+0xb9c>
 8005670:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	b29b      	uxth	r3, r3
 8005678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567c:	b29a      	uxth	r2, r3
 800567e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005694:	b29a      	uxth	r2, r3
 8005696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e32c      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
 800569e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056a2:	2b3e      	cmp	r3, #62	; 0x3e
 80056a4:	d818      	bhi.n	80056d8 <USB_EPStartXfer+0xbd6>
 80056a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <USB_EPStartXfer+0xbc4>
 80056bc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056c0:	3301      	adds	r3, #1
 80056c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	029b      	lsls	r3, r3, #10
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e30f      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
 80056d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056e6:	f003 031f 	and.w	r3, r3, #31
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <USB_EPStartXfer+0xbf6>
 80056ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056f2:	3b01      	subs	r3, #1
 80056f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	029b      	lsls	r3, r3, #10
 8005700:	b29b      	uxth	r3, r3
 8005702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800570a:	b29a      	uxth	r2, r3
 800570c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005710:	801a      	strh	r2, [r3, #0]
 8005712:	e2f1      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8005714:	463b      	mov	r3, r7
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	78db      	ldrb	r3, [r3, #3]
 800571a:	2b02      	cmp	r3, #2
 800571c:	f040 818f 	bne.w	8005a3e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005720:	463b      	mov	r3, r7
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d175      	bne.n	8005816 <USB_EPStartXfer+0xd14>
 800572a:	1d3b      	adds	r3, r7, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005742:	4413      	add	r3, r2
 8005744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	00da      	lsls	r2, r3, #3
 8005750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005754:	4413      	add	r3, r2
 8005756:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800575a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d116      	bne.n	8005796 <USB_EPStartXfer+0xc94>
 8005768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005774:	b29a      	uxth	r2, r3
 8005776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29a      	uxth	r2, r3
 800578e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e065      	b.n	8005862 <USB_EPStartXfer+0xd60>
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b3e      	cmp	r3, #62	; 0x3e
 800579e:	d81a      	bhi.n	80057d6 <USB_EPStartXfer+0xcd4>
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ac:	463b      	mov	r3, r7
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <USB_EPStartXfer+0xcc2>
 80057ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057be:	3301      	adds	r3, #1
 80057c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e045      	b.n	8005862 <USB_EPStartXfer+0xd60>
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057e2:	463b      	mov	r3, r7
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <USB_EPStartXfer+0xcf8>
 80057f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f4:	3b01      	subs	r3, #1
 80057f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057fe:	b29b      	uxth	r3, r3
 8005800:	029b      	lsls	r3, r3, #10
 8005802:	b29b      	uxth	r3, r3
 8005804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580c:	b29a      	uxth	r2, r3
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	e025      	b.n	8005862 <USB_EPStartXfer+0xd60>
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d120      	bne.n	8005862 <USB_EPStartXfer+0xd60>
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005828:	1d3b      	adds	r3, r7, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005830:	b29b      	uxth	r3, r3
 8005832:	461a      	mov	r2, r3
 8005834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005838:	4413      	add	r3, r2
 800583a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800583e:	463b      	mov	r3, r7
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	00da      	lsls	r2, r3, #3
 8005846:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800584a:	4413      	add	r3, r2
 800584c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005854:	463b      	mov	r3, r7
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	b29a      	uxth	r2, r3
 800585c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005860:	801a      	strh	r2, [r3, #0]
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800586a:	463b      	mov	r3, r7
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d175      	bne.n	8005960 <USB_EPStartXfer+0xe5e>
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005884:	b29b      	uxth	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800588c:	4413      	add	r3, r2
 800588e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005892:	463b      	mov	r3, r7
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	00da      	lsls	r2, r3, #3
 800589a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800589e:	4413      	add	r3, r2
 80058a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d116      	bne.n	80058e0 <USB_EPStartXfer+0xdde>
 80058b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058be:	b29a      	uxth	r2, r3
 80058c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058dc:	801a      	strh	r2, [r3, #0]
 80058de:	e061      	b.n	80059a4 <USB_EPStartXfer+0xea2>
 80058e0:	463b      	mov	r3, r7
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b3e      	cmp	r3, #62	; 0x3e
 80058e8:	d81a      	bhi.n	8005920 <USB_EPStartXfer+0xe1e>
 80058ea:	463b      	mov	r3, r7
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058f6:	463b      	mov	r3, r7
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <USB_EPStartXfer+0xe0c>
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	3301      	adds	r3, #1
 800590a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800590e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005912:	b29b      	uxth	r3, r3
 8005914:	029b      	lsls	r3, r3, #10
 8005916:	b29a      	uxth	r2, r3
 8005918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800591c:	801a      	strh	r2, [r3, #0]
 800591e:	e041      	b.n	80059a4 <USB_EPStartXfer+0xea2>
 8005920:	463b      	mov	r3, r7
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800592c:	463b      	mov	r3, r7
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <USB_EPStartXfer+0xe42>
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	3b01      	subs	r3, #1
 8005940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	e021      	b.n	80059a4 <USB_EPStartXfer+0xea2>
 8005960:	463b      	mov	r3, r7
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d11c      	bne.n	80059a4 <USB_EPStartXfer+0xea2>
 800596a:	1d3b      	adds	r3, r7, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005972:	b29b      	uxth	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800597a:	4413      	add	r3, r2
 800597c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005980:	463b      	mov	r3, r7
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	00da      	lsls	r2, r3, #3
 8005988:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800598c:	4413      	add	r3, r2
 800598e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	b29a      	uxth	r2, r3
 800599e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059a2:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80059a4:	463b      	mov	r3, r7
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 81a4 	beq.w	8005cf8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80059b0:	1d3b      	adds	r3, r7, #4
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	463b      	mov	r3, r7
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059c4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <USB_EPStartXfer+0xeda>
 80059d0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10d      	bne.n	80059f8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059dc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 8187 	bne.w	8005cf8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80059ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8180 	bne.w	8005cf8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80059f8:	1d3b      	adds	r3, r7, #4
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	463b      	mov	r3, r7
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	881b      	ldrh	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	8013      	strh	r3, [r2, #0]
 8005a3c:	e15c      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005a3e:	463b      	mov	r3, r7
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	78db      	ldrb	r3, [r3, #3]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	f040 8155 	bne.w	8005cf4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	699a      	ldr	r2, [r3, #24]
 8005a50:	463b      	mov	r3, r7
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d90e      	bls.n	8005a78 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a6e:	1ad2      	subs	r2, r2, r3
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	619a      	str	r2, [r3, #24]
 8005a76:	e008      	b.n	8005a8a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8005a78:	463b      	mov	r3, r7
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8005a82:	463b      	mov	r3, r7
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d16f      	bne.n	8005b74 <USB_EPStartXfer+0x1072>
 8005a94:	1d3b      	adds	r3, r7, #4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a9c:	1d3b      	adds	r3, r7, #4
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005aac:	4413      	add	r3, r2
 8005aae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ab2:	463b      	mov	r3, r7
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	00da      	lsls	r2, r3, #3
 8005aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005abe:	4413      	add	r3, r2
 8005ac0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d116      	bne.n	8005afe <USB_EPStartXfer+0xffc>
 8005ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005afa:	801a      	strh	r2, [r3, #0]
 8005afc:	e05f      	b.n	8005bbe <USB_EPStartXfer+0x10bc>
 8005afe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b02:	2b3e      	cmp	r3, #62	; 0x3e
 8005b04:	d818      	bhi.n	8005b38 <USB_EPStartXfer+0x1036>
 8005b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b0a:	085b      	lsrs	r3, r3, #1
 8005b0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d004      	beq.n	8005b26 <USB_EPStartXfer+0x1024>
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	3301      	adds	r3, #1
 8005b22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	029b      	lsls	r3, r3, #10
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e042      	b.n	8005bbe <USB_EPStartXfer+0x10bc>
 8005b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <USB_EPStartXfer+0x1056>
 8005b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b52:	3b01      	subs	r3, #1
 8005b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	e024      	b.n	8005bbe <USB_EPStartXfer+0x10bc>
 8005b74:	463b      	mov	r3, r7
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d11f      	bne.n	8005bbe <USB_EPStartXfer+0x10bc>
 8005b7e:	1d3b      	adds	r3, r7, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b86:	1d3b      	adds	r3, r7, #4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	461a      	mov	r2, r3
 8005b92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b96:	4413      	add	r3, r2
 8005b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b9c:	463b      	mov	r3, r7
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	00da      	lsls	r2, r3, #3
 8005ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bbc:	801a      	strh	r2, [r3, #0]
 8005bbe:	1d3b      	adds	r3, r7, #4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bc6:	463b      	mov	r3, r7
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d16f      	bne.n	8005cb0 <USB_EPStartXfer+0x11ae>
 8005bd0:	1d3b      	adds	r3, r7, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bd8:	1d3b      	adds	r3, r7, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005be8:	4413      	add	r3, r2
 8005bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bee:	463b      	mov	r3, r7
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	00da      	lsls	r2, r3, #3
 8005bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005c04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d116      	bne.n	8005c3a <USB_EPStartXfer+0x1138>
 8005c0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c36:	801a      	strh	r2, [r3, #0]
 8005c38:	e05e      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
 8005c3a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005c40:	d818      	bhi.n	8005c74 <USB_EPStartXfer+0x1172>
 8005c42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <USB_EPStartXfer+0x1160>
 8005c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	029b      	lsls	r3, r3, #10
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	e041      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
 8005c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c78:	095b      	lsrs	r3, r3, #5
 8005c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c7e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d104      	bne.n	8005c94 <USB_EPStartXfer+0x1192>
 8005c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	029b      	lsls	r3, r3, #10
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005cac:	801a      	strh	r2, [r3, #0]
 8005cae:	e023      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
 8005cb0:	463b      	mov	r3, r7
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	785b      	ldrb	r3, [r3, #1]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d11e      	bne.n	8005cf8 <USB_EPStartXfer+0x11f6>
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cca:	4413      	add	r3, r2
 8005ccc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd0:	463b      	mov	r3, r7
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00da      	lsls	r2, r3, #3
 8005cd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cdc:	4413      	add	r3, r2
 8005cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	e001      	b.n	8005cf8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e02e      	b.n	8005d56 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf8:	1d3b      	adds	r3, r7, #4
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d22:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	463b      	mov	r3, r7
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005d40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d020      	beq.n	8005db4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d88:	81bb      	strh	r3, [r7, #12]
 8005d8a:	89bb      	ldrh	r3, [r7, #12]
 8005d8c:	f083 0310 	eor.w	r3, r3, #16
 8005d90:	81bb      	strh	r3, [r7, #12]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	441a      	add	r2, r3
 8005d9c:	89bb      	ldrh	r3, [r7, #12]
 8005d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8013      	strh	r3, [r2, #0]
 8005db2:	e01f      	b.n	8005df4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dca:	81fb      	strh	r3, [r7, #14]
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dd2:	81fb      	strh	r3, [r7, #14]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	441a      	add	r2, r3
 8005dde:	89fb      	ldrh	r3, [r7, #14]
 8005de0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	7b1b      	ldrb	r3, [r3, #12]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f040 809d 	bne.w	8005f50 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d04c      	beq.n	8005eb8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	823b      	strh	r3, [r7, #16]
 8005e2c:	8a3b      	ldrh	r3, [r7, #16]
 8005e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01b      	beq.n	8005e6e <USB_EPClearStall+0x6c>
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4c:	81fb      	strh	r3, [r7, #14]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	78db      	ldrb	r3, [r3, #3]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d06c      	beq.n	8005f50 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8c:	81bb      	strh	r3, [r7, #12]
 8005e8e:	89bb      	ldrh	r3, [r7, #12]
 8005e90:	f083 0320 	eor.w	r3, r3, #32
 8005e94:	81bb      	strh	r3, [r7, #12]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	89bb      	ldrh	r3, [r7, #12]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
 8005eb6:	e04b      	b.n	8005f50 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	82fb      	strh	r3, [r7, #22]
 8005ec6:	8afb      	ldrh	r3, [r7, #22]
 8005ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01b      	beq.n	8005f08 <USB_EPClearStall+0x106>
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	4413      	add	r3, r2
 8005eda:	881b      	ldrh	r3, [r3, #0]
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee6:	82bb      	strh	r3, [r7, #20]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	441a      	add	r2, r3
 8005ef2:	8abb      	ldrh	r3, [r7, #20]
 8005ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1e:	827b      	strh	r3, [r7, #18]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f26:	827b      	strh	r3, [r7, #18]
 8005f28:	8a7b      	ldrh	r3, [r7, #18]
 8005f2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f2e:	827b      	strh	r3, [r7, #18]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	8a7b      	ldrh	r3, [r7, #18]
 8005f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	460b      	mov	r3, r1
 8005f68:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2280      	movs	r2, #128	; 0x80
 8005f74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006016:	b480      	push	{r7}
 8006018:	b08d      	sub	sp, #52	; 0x34
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	4611      	mov	r1, r2
 8006022:	461a      	mov	r2, r3
 8006024:	460b      	mov	r3, r1
 8006026:	80fb      	strh	r3, [r7, #6]
 8006028:	4613      	mov	r3, r2
 800602a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800602c:	88bb      	ldrh	r3, [r7, #4]
 800602e:	3301      	adds	r3, #1
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800603c:	88fa      	ldrh	r2, [r7, #6]
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604c:	e01b      	b.n	8006086 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	021b      	lsls	r3, r3, #8
 8006062:	b29b      	uxth	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	b29a      	uxth	r2, r3
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	3302      	adds	r3, #2
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	3301      	adds	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	3b01      	subs	r3, #1
 8006084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e0      	bne.n	800604e <USB_WritePMA+0x38>
  }
}
 800608c:	bf00      	nop
 800608e:	3734      	adds	r7, #52	; 0x34
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006098:	b480      	push	{r7}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	460b      	mov	r3, r1
 80060a8:	80fb      	strh	r3, [r7, #6]
 80060aa:	4613      	mov	r3, r2
 80060ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80060ae:	88bb      	ldrh	r3, [r7, #4]
 80060b0:	085b      	lsrs	r3, r3, #1
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80060be:	88fa      	ldrh	r2, [r7, #6]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
 80060ce:	e018      	b.n	8006102 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	881b      	ldrh	r3, [r3, #0]
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	3302      	adds	r3, #2
 80060dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	0a1b      	lsrs	r3, r3, #8
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3301      	adds	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	3b01      	subs	r3, #1
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e3      	bne.n	80060d0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006108:	88bb      	ldrh	r3, [r7, #4]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	b2da      	uxtb	r2, r3
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	701a      	strb	r2, [r3, #0]
  }
}
 8006124:	bf00      	nop
 8006126:	372c      	adds	r7, #44	; 0x2c
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	460b      	mov	r3, r1
 800613a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800613c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006140:	f002 f96a 	bl	8008418 <malloc>
 8006144:	4603      	mov	r3, r0
 8006146:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006156:	2302      	movs	r3, #2
 8006158:	e066      	b.n	8006228 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	7c1b      	ldrb	r3, [r3, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d119      	bne.n	800619e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800616a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800616e:	2202      	movs	r2, #2
 8006170:	2181      	movs	r1, #129	; 0x81
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 ff20 	bl	8007fb8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800617e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006182:	2202      	movs	r2, #2
 8006184:	2101      	movs	r1, #1
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 ff16 	bl	8007fb8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2210      	movs	r2, #16
 8006198:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800619c:	e016      	b.n	80061cc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800619e:	2340      	movs	r3, #64	; 0x40
 80061a0:	2202      	movs	r2, #2
 80061a2:	2181      	movs	r1, #129	; 0x81
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 ff07 	bl	8007fb8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80061b0:	2340      	movs	r3, #64	; 0x40
 80061b2:	2202      	movs	r2, #2
 80061b4:	2101      	movs	r1, #1
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fefe 	bl	8007fb8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2210      	movs	r2, #16
 80061c8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80061cc:	2308      	movs	r3, #8
 80061ce:	2203      	movs	r2, #3
 80061d0:	2182      	movs	r1, #130	; 0x82
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fef0 	bl	8007fb8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7c1b      	ldrb	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800620c:	2101      	movs	r1, #1
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f002 f84e 	bl	80082b0 <USBD_LL_PrepareReceive>
 8006214:	e007      	b.n	8006226 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	2101      	movs	r1, #1
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f002 f845 	bl	80082b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	460b      	mov	r3, r1
 800623a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800623c:	2181      	movs	r1, #129	; 0x81
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f001 fef8 	bl	8008034 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800624a:	2101      	movs	r1, #1
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fef1 	bl	8008034 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800625a:	2182      	movs	r1, #130	; 0x82
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 fee9 	bl	8008034 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00e      	beq.n	800629a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628c:	4618      	mov	r0, r3
 800628e:	f002 f8cb 	bl	8008428 <free>
    pdev->pClassData = NULL;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d03a      	beq.n	8006344 <USBD_CDC_Setup+0xa0>
 80062ce:	2b20      	cmp	r3, #32
 80062d0:	f040 8097 	bne.w	8006402 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d029      	beq.n	8006330 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da11      	bge.n	800630a <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80062f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	88d2      	ldrh	r2, [r2, #6]
 80062f8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80062fa:	6939      	ldr	r1, [r7, #16]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	88db      	ldrh	r3, [r3, #6]
 8006300:	461a      	mov	r2, r3
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f001 fa5d 	bl	80077c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006308:	e082      	b.n	8006410 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	785a      	ldrb	r2, [r3, #1]
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	88db      	ldrh	r3, [r3, #6]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006320:	6939      	ldr	r1, [r7, #16]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	88db      	ldrh	r3, [r3, #6]
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fa76 	bl	800781a <USBD_CtlPrepareRx>
      break;
 800632e:	e06f      	b.n	8006410 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	7850      	ldrb	r0, [r2, #1]
 800633c:	2200      	movs	r2, #0
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	4798      	blx	r3
      break;
 8006342:	e065      	b.n	8006410 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	785b      	ldrb	r3, [r3, #1]
 8006348:	2b0b      	cmp	r3, #11
 800634a:	d84f      	bhi.n	80063ec <USBD_CDC_Setup+0x148>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <USBD_CDC_Setup+0xb0>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006385 	.word	0x08006385
 8006358:	080063fb 	.word	0x080063fb
 800635c:	080063ed 	.word	0x080063ed
 8006360:	080063ed 	.word	0x080063ed
 8006364:	080063ed 	.word	0x080063ed
 8006368:	080063ed 	.word	0x080063ed
 800636c:	080063ed 	.word	0x080063ed
 8006370:	080063ed 	.word	0x080063ed
 8006374:	080063ed 	.word	0x080063ed
 8006378:	080063ed 	.word	0x080063ed
 800637c:	080063ad 	.word	0x080063ad
 8006380:	080063d5 	.word	0x080063d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800638a:	2b03      	cmp	r3, #3
 800638c:	d107      	bne.n	800639e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800638e:	f107 030c 	add.w	r3, r7, #12
 8006392:	2202      	movs	r2, #2
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fa13 	bl	80077c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800639c:	e030      	b.n	8006400 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 f99d 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 80063a6:	2303      	movs	r3, #3
 80063a8:	75fb      	strb	r3, [r7, #23]
          break;
 80063aa:	e029      	b.n	8006400 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d107      	bne.n	80063c6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063b6:	f107 030f 	add.w	r3, r7, #15
 80063ba:	2201      	movs	r2, #1
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f001 f9ff 	bl	80077c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063c4:	e01c      	b.n	8006400 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f989 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	75fb      	strb	r3, [r7, #23]
          break;
 80063d2:	e015      	b.n	8006400 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d00f      	beq.n	80063fe <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f97d 	bl	80076e0 <USBD_CtlError>
            ret = USBD_FAIL;
 80063e6:	2303      	movs	r3, #3
 80063e8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063ea:	e008      	b.n	80063fe <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 f976 	bl	80076e0 <USBD_CtlError>
          ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
          break;
 80063f8:	e002      	b.n	8006400 <USBD_CDC_Setup+0x15c>
          break;
 80063fa:	bf00      	nop
 80063fc:	e008      	b.n	8006410 <USBD_CDC_Setup+0x16c>
          break;
 80063fe:	bf00      	nop
      }
      break;
 8006400:	e006      	b.n	8006410 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 f96b 	bl	80076e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800640a:	2303      	movs	r3, #3
 800640c:	75fb      	strb	r3, [r7, #23]
      break;
 800640e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop

0800641c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800642e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006436:	2b00      	cmp	r3, #0
 8006438:	d101      	bne.n	800643e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643a:	2303      	movs	r3, #3
 800643c:	e04f      	b.n	80064de <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006444:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	4613      	mov	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3318      	adds	r3, #24
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d029      	beq.n	80064b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800645c:	78fa      	ldrb	r2, [r7, #3]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	3318      	adds	r3, #24
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	78f9      	ldrb	r1, [r7, #3]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	460b      	mov	r3, r1
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	00db      	lsls	r3, r3, #3
 800647a:	4403      	add	r3, r0
 800647c:	3338      	adds	r3, #56	; 0x38
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	fbb2 f1f3 	udiv	r1, r2, r3
 8006484:	fb03 f301 	mul.w	r3, r3, r1
 8006488:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800648a:	2b00      	cmp	r3, #0
 800648c:	d110      	bne.n	80064b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800648e:	78fa      	ldrb	r2, [r7, #3]
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	3318      	adds	r3, #24
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064a2:	78f9      	ldrb	r1, [r7, #3]
 80064a4:	2300      	movs	r3, #0
 80064a6:	2200      	movs	r2, #0
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 fec9 	bl	8008240 <USBD_LL_Transmit>
 80064ae:	e015      	b.n	80064dc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80064d8:	78fa      	ldrb	r2, [r7, #3]
 80064da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
 80064ee:	460b      	mov	r3, r1
 80064f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e015      	b.n	8006534 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 ff07 	bl	8008320 <USBD_LL_GetRxDataSize>
 8006512:	4602      	mov	r2, r0
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800652e:	4611      	mov	r1, r2
 8006530:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3710      	adds	r7, #16
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800654a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d015      	beq.n	8006582 <USBD_CDC_EP0_RxReady+0x46>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800655c:	2bff      	cmp	r3, #255	; 0xff
 800655e:	d010      	beq.n	8006582 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800656e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006576:	b292      	uxth	r2, r2
 8006578:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	22ff      	movs	r2, #255	; 0xff
 800657e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3710      	adds	r7, #16
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2243      	movs	r2, #67	; 0x43
 8006598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800659a:	4b03      	ldr	r3, [pc, #12]	; (80065a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	20000094 	.word	0x20000094

080065ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2243      	movs	r2, #67	; 0x43
 80065b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80065ba:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	20000050 	.word	0x20000050

080065cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2243      	movs	r2, #67	; 0x43
 80065d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80065da:	4b03      	ldr	r3, [pc, #12]	; (80065e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	200000d8 	.word	0x200000d8

080065ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	220a      	movs	r2, #10
 80065f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065fa:	4b03      	ldr	r3, [pc, #12]	; (8006608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr
 8006608:	2000000c 	.word	0x2000000c

0800660c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800661c:	2303      	movs	r3, #3
 800661e:	e004      	b.n	800662a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006636:	b480      	push	{r7}
 8006638:	b087      	sub	sp, #28
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006648:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006678:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e016      	b.n	80066dc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7c1b      	ldrb	r3, [r3, #16]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066c0:	2101      	movs	r1, #1
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f001 fdf4 	bl	80082b0 <USBD_LL_PrepareReceive>
 80066c8:	e007      	b.n	80066da <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	2101      	movs	r1, #1
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fdeb 	bl	80082b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4613      	mov	r3, r2
 80066f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e01f      	b.n	800673c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	79fa      	ldrb	r2, [r7, #7]
 800672e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f001 fbad 	bl	8007e90 <USBD_LL_Init>
 8006736:	4603      	mov	r3, r0
 8006738:	75fb      	strb	r3, [r7, #23]

  return ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e016      	b.n	800678a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006778:	f107 020e 	add.w	r2, r7, #14
 800677c:	4610      	mov	r0, r2
 800677e:	4798      	blx	r3
 8006780:	4602      	mov	r2, r0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fbda 	bl	8007f54 <USBD_LL_Start>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	78fa      	ldrb	r2, [r7, #3]
 80067e4:	4611      	mov	r1, r2
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680a:	2b00      	cmp	r3, #0
 800680c:	d007      	beq.n	800681e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	78fa      	ldrb	r2, [r7, #3]
 8006818:	4611      	mov	r1, r2
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	4798      	blx	r3
  }

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 ff16 	bl	800766c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	2b01      	cmp	r3, #1
 8006862:	d00e      	beq.n	8006882 <USBD_LL_SetupStage+0x5a>
 8006864:	2b01      	cmp	r3, #1
 8006866:	d302      	bcc.n	800686e <USBD_LL_SetupStage+0x46>
 8006868:	2b02      	cmp	r3, #2
 800686a:	d014      	beq.n	8006896 <USBD_LL_SetupStage+0x6e>
 800686c:	e01d      	b.n	80068aa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9d6 	bl	8006c28 <USBD_StdDevReq>
 800687c:	4603      	mov	r3, r0
 800687e:	73fb      	strb	r3, [r7, #15]
      break;
 8006880:	e020      	b.n	80068c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fa3a 	bl	8006d04 <USBD_StdItfReq>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	e016      	b.n	80068c4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa76 	bl	8006d90 <USBD_StdEPReq>
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e00c      	b.n	80068c4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f001 fbf1 	bl	80080a0 <USBD_LL_StallEP>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
      break;
 80068c2:	bf00      	nop
  }

  return ret;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	60f8      	str	r0, [r7, #12]
 80068d6:	460b      	mov	r3, r1
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80068dc:	7afb      	ldrb	r3, [r7, #11]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d137      	bne.n	8006952 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068e8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d14a      	bne.n	800698a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d913      	bls.n	8006928 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	1ad2      	subs	r2, r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4293      	cmp	r3, r2
 8006918:	bf28      	it	cs
 800691a:	4613      	movcs	r3, r2
 800691c:	461a      	mov	r2, r3
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 ff97 	bl	8007854 <USBD_CtlContinueRx>
 8006926:	e030      	b.n	800698a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00a      	beq.n	800694a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800693a:	2b03      	cmp	r3, #3
 800693c:	d105      	bne.n	800694a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 ff93 	bl	8007876 <USBD_CtlSendStatus>
 8006950:	e01b      	b.n	800698a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d013      	beq.n	8006986 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006964:	2b03      	cmp	r3, #3
 8006966:	d10e      	bne.n	8006986 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	7afa      	ldrb	r2, [r7, #11]
 8006972:	4611      	mov	r1, r2
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	4798      	blx	r3
 8006978:	4603      	mov	r3, r0
 800697a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	e002      	b.n	800698c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006986:	2303      	movs	r3, #3
 8006988:	e000      	b.n	800698c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	460b      	mov	r3, r1
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80069a2:	7afb      	ldrb	r3, [r7, #11]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d16a      	bne.n	8006a7e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3314      	adds	r3, #20
 80069ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d155      	bne.n	8006a64 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d914      	bls.n	80069ee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	1ad2      	subs	r2, r2, r3
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 ff0c 	bl	80077f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80069e0:	2300      	movs	r3, #0
 80069e2:	2200      	movs	r2, #0
 80069e4:	2100      	movs	r1, #0
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f001 fc62 	bl	80082b0 <USBD_LL_PrepareReceive>
 80069ec:	e03a      	b.n	8006a64 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d11c      	bne.n	8006a34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d316      	bcc.n	8006a34 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d20f      	bcs.n	8006a34 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a14:	2200      	movs	r2, #0
 8006a16:	2100      	movs	r1, #0
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 feed 	bl	80077f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a26:	2300      	movs	r3, #0
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f001 fc3f 	bl	80082b0 <USBD_LL_PrepareReceive>
 8006a32:	e017      	b.n	8006a64 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d105      	bne.n	8006a56 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a56:	2180      	movs	r1, #128	; 0x80
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f001 fb21 	bl	80080a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f000 ff1c 	bl	800789c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d123      	bne.n	8006ab6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff fe9b 	bl	80067aa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a7c:	e01b      	b.n	8006ab6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d013      	beq.n	8006ab2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d10e      	bne.n	8006ab2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	7afa      	ldrb	r2, [r7, #11]
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	4798      	blx	r3
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	e002      	b.n	8006ab8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e000      	b.n	8006ab8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6852      	ldr	r2, [r2, #4]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	4611      	mov	r1, r2
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f001 fa54 	bl	8007fb8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fa46 	bl	8007fb8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2240      	movs	r2, #64	; 0x40
 8006b36:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	78fa      	ldrb	r2, [r7, #3]
 8006b52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d105      	bne.n	8006baa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d10b      	bne.n	8006be2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d005      	beq.n	8006be2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	3301      	adds	r3, #1
 8006c02:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006c0a:	8a3b      	ldrh	r3, [r7, #16]
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	b21a      	sxth	r2, r3
 8006c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006c1a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d004      	beq.n	8006c4c <USBD_StdDevReq+0x24>
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d002      	beq.n	8006c4c <USBD_StdDevReq+0x24>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00a      	beq.n	8006c60 <USBD_StdDevReq+0x38>
 8006c4a:	e050      	b.n	8006cee <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
    break;
 8006c5e:	e04b      	b.n	8006cf8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b09      	cmp	r3, #9
 8006c66:	d83c      	bhi.n	8006ce2 <USBD_StdDevReq+0xba>
 8006c68:	a201      	add	r2, pc, #4	; (adr r2, 8006c70 <USBD_StdDevReq+0x48>)
 8006c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6e:	bf00      	nop
 8006c70:	08006cc5 	.word	0x08006cc5
 8006c74:	08006cd9 	.word	0x08006cd9
 8006c78:	08006ce3 	.word	0x08006ce3
 8006c7c:	08006ccf 	.word	0x08006ccf
 8006c80:	08006ce3 	.word	0x08006ce3
 8006c84:	08006ca3 	.word	0x08006ca3
 8006c88:	08006c99 	.word	0x08006c99
 8006c8c:	08006ce3 	.word	0x08006ce3
 8006c90:	08006cbb 	.word	0x08006cbb
 8006c94:	08006cad 	.word	0x08006cad
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9d0 	bl	8007040 <USBD_GetDescriptor>
      break;
 8006ca0:	e024      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fb5f 	bl	8007368 <USBD_SetAddress>
      break;
 8006caa:	e01f      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb9c 	bl	80073ec <USBD_SetConfig>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb8:	e018      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006cba:	6839      	ldr	r1, [r7, #0]
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc39 	bl	8007534 <USBD_GetConfig>
      break;
 8006cc2:	e013      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fc68 	bl	800759c <USBD_GetStatus>
      break;
 8006ccc:	e00e      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fc96 	bl	8007602 <USBD_SetFeature>
      break;
 8006cd6:	e009      	b.n	8006cec <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fca5 	bl	800762a <USBD_ClrFeature>
      break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fcfb 	bl	80076e0 <USBD_CtlError>
      break;
 8006cea:	bf00      	nop
    }
    break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fcf5 	bl	80076e0 <USBD_CtlError>
    break;
 8006cf6:	bf00      	nop
  }

  return ret;
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop

08006d04 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d003      	beq.n	8006d26 <USBD_StdItfReq+0x22>
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d001      	beq.n	8006d26 <USBD_StdItfReq+0x22>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d12a      	bne.n	8006d7c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d81d      	bhi.n	8006d6e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	889b      	ldrh	r3, [r3, #4]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d813      	bhi.n	8006d64 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	4798      	blx	r3
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d110      	bne.n	8006d78 <USBD_StdItfReq+0x74>
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10d      	bne.n	8006d78 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fd8a 	bl	8007876 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006d62:	e009      	b.n	8006d78 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fcba 	bl	80076e0 <USBD_CtlError>
      break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fcb5 	bl	80076e0 <USBD_CtlError>
      break;
 8006d76:	e000      	b.n	8006d7a <USBD_StdItfReq+0x76>
      break;
 8006d78:	bf00      	nop
    }
    break;
 8006d7a:	e004      	b.n	8006d86 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fcae 	bl	80076e0 <USBD_CtlError>
    break;
 8006d84:	bf00      	nop
  }

  return ret;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	889b      	ldrh	r3, [r3, #4]
 8006da2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dac:	2b20      	cmp	r3, #32
 8006dae:	d004      	beq.n	8006dba <USBD_StdEPReq+0x2a>
 8006db0:	2b40      	cmp	r3, #64	; 0x40
 8006db2:	d002      	beq.n	8006dba <USBD_StdEPReq+0x2a>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00a      	beq.n	8006dce <USBD_StdEPReq+0x3e>
 8006db8:	e137      	b.n	800702a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]
    break;
 8006dcc:	e132      	b.n	8007034 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d03e      	beq.n	8006e54 <USBD_StdEPReq+0xc4>
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d002      	beq.n	8006de0 <USBD_StdEPReq+0x50>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d079      	beq.n	8006ed2 <USBD_StdEPReq+0x142>
 8006dde:	e11e      	b.n	800701e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d002      	beq.n	8006df0 <USBD_StdEPReq+0x60>
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d015      	beq.n	8006e1a <USBD_StdEPReq+0x8a>
 8006dee:	e02b      	b.n	8006e48 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00c      	beq.n	8006e10 <USBD_StdEPReq+0x80>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d009      	beq.n	8006e10 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 f94d 	bl	80080a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f949 	bl	80080a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e0e:	e020      	b.n	8006e52 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fc64 	bl	80076e0 <USBD_CtlError>
        break;
 8006e18:	e01b      	b.n	8006e52 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	885b      	ldrh	r3, [r3, #2]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10e      	bne.n	8006e40 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00b      	beq.n	8006e40 <USBD_StdEPReq+0xb0>
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d008      	beq.n	8006e40 <USBD_StdEPReq+0xb0>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 f930 	bl	80080a0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fd18 	bl	8007876 <USBD_CtlSendStatus>

        break;
 8006e46:	e004      	b.n	8006e52 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc48 	bl	80076e0 <USBD_CtlError>
        break;
 8006e50:	bf00      	nop
      }
      break;
 8006e52:	e0e9      	b.n	8007028 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d002      	beq.n	8006e64 <USBD_StdEPReq+0xd4>
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d015      	beq.n	8006e8e <USBD_StdEPReq+0xfe>
 8006e62:	e02f      	b.n	8006ec4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00c      	beq.n	8006e84 <USBD_StdEPReq+0xf4>
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d009      	beq.n	8006e84 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f001 f913 	bl	80080a0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e7a:	2180      	movs	r1, #128	; 0x80
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f90f 	bl	80080a0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006e82:	e025      	b.n	8006ed0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fc2a 	bl	80076e0 <USBD_CtlError>
        break;
 8006e8c:	e020      	b.n	8006ed0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	885b      	ldrh	r3, [r3, #2]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11b      	bne.n	8006ece <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f931 	bl	800810c <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fce3 	bl	8007876 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ec2:	e004      	b.n	8006ece <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fc0a 	bl	80076e0 <USBD_CtlError>
        break;
 8006ecc:	e000      	b.n	8006ed0 <USBD_StdEPReq+0x140>
        break;
 8006ece:	bf00      	nop
      }
      break;
 8006ed0:	e0aa      	b.n	8007028 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d002      	beq.n	8006ee2 <USBD_StdEPReq+0x152>
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d032      	beq.n	8006f46 <USBD_StdEPReq+0x1b6>
 8006ee0:	e097      	b.n	8007012 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee2:	7bbb      	ldrb	r3, [r7, #14]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d007      	beq.n	8006ef8 <USBD_StdEPReq+0x168>
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b80      	cmp	r3, #128	; 0x80
 8006eec:	d004      	beq.n	8006ef8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fbf5 	bl	80076e0 <USBD_CtlError>
          break;
 8006ef6:	e091      	b.n	800701c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0b      	bge.n	8006f18 <USBD_StdEPReq+0x188>
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	3310      	adds	r3, #16
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	4413      	add	r3, r2
 8006f14:	3304      	adds	r3, #4
 8006f16:	e00b      	b.n	8006f30 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	4613      	mov	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3304      	adds	r3, #4
 8006f30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fc3f 	bl	80077c2 <USBD_CtlSendData>
        break;
 8006f44:	e06a      	b.n	800701c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da11      	bge.n	8006f72 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d117      	bne.n	8006f98 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fbb8 	bl	80076e0 <USBD_CtlError>
            break;
 8006f70:	e054      	b.n	800701c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f72:	7bbb      	ldrb	r3, [r7, #14]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d104      	bne.n	8006f98 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fba5 	bl	80076e0 <USBD_CtlError>
            break;
 8006f96:	e041      	b.n	800701c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da0b      	bge.n	8006fb8 <USBD_StdEPReq+0x228>
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	3310      	adds	r3, #16
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3304      	adds	r3, #4
 8006fb6:	e00b      	b.n	8006fd0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	3304      	adds	r3, #4
 8006fd0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fd2:	7bbb      	ldrb	r3, [r7, #14]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <USBD_StdEPReq+0x24e>
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	2b80      	cmp	r3, #128	; 0x80
 8006fdc:	d103      	bne.n	8006fe6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	e00e      	b.n	8007004 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f001 f8c4 	bl	8008178 <USBD_LL_IsStallEP>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	e002      	b.n	8007004 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2202      	movs	r2, #2
 8007008:	4619      	mov	r1, r3
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fbd9 	bl	80077c2 <USBD_CtlSendData>
          break;
 8007010:	e004      	b.n	800701c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb63 	bl	80076e0 <USBD_CtlError>
        break;
 800701a:	bf00      	nop
      }
      break;
 800701c:	e004      	b.n	8007028 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fb5d 	bl	80076e0 <USBD_CtlError>
      break;
 8007026:	bf00      	nop
    }
    break;
 8007028:	e004      	b.n	8007034 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fb57 	bl	80076e0 <USBD_CtlError>
    break;
 8007032:	bf00      	nop
  }

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	2b0e      	cmp	r3, #14
 8007062:	f200 8152 	bhi.w	800730a <USBD_GetDescriptor+0x2ca>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_GetDescriptor+0x2c>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070dd 	.word	0x080070dd
 8007070:	080070f5 	.word	0x080070f5
 8007074:	08007135 	.word	0x08007135
 8007078:	0800730b 	.word	0x0800730b
 800707c:	0800730b 	.word	0x0800730b
 8007080:	080072ab 	.word	0x080072ab
 8007084:	080072d7 	.word	0x080072d7
 8007088:	0800730b 	.word	0x0800730b
 800708c:	0800730b 	.word	0x0800730b
 8007090:	0800730b 	.word	0x0800730b
 8007094:	0800730b 	.word	0x0800730b
 8007098:	0800730b 	.word	0x0800730b
 800709c:	0800730b 	.word	0x0800730b
 80070a0:	0800730b 	.word	0x0800730b
 80070a4:	080070a9 	.word	0x080070a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00b      	beq.n	80070cc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	7c12      	ldrb	r2, [r2, #16]
 80070c0:	f107 0108 	add.w	r1, r7, #8
 80070c4:	4610      	mov	r0, r2
 80070c6:	4798      	blx	r3
 80070c8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80070ca:	e126      	b.n	800731a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fb06 	bl	80076e0 <USBD_CtlError>
      err++;
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	3301      	adds	r3, #1
 80070d8:	72fb      	strb	r3, [r7, #11]
    break;
 80070da:	e11e      	b.n	800731a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7c12      	ldrb	r2, [r2, #16]
 80070e8:	f107 0108 	add.w	r1, r7, #8
 80070ec:	4610      	mov	r0, r2
 80070ee:	4798      	blx	r3
 80070f0:	60f8      	str	r0, [r7, #12]
    break;
 80070f2:	e112      	b.n	800731a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7c1b      	ldrb	r3, [r3, #16]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10d      	bne.n	8007118 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007104:	f107 0208 	add.w	r2, r7, #8
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	2202      	movs	r2, #2
 8007114:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007116:	e100      	b.n	800731a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	f107 0208 	add.w	r2, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3301      	adds	r3, #1
 800712e:	2202      	movs	r2, #2
 8007130:	701a      	strb	r2, [r3, #0]
    break;
 8007132:	e0f2      	b.n	800731a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	885b      	ldrh	r3, [r3, #2]
 8007138:	b2db      	uxtb	r3, r3
 800713a:	2b05      	cmp	r3, #5
 800713c:	f200 80ac 	bhi.w	8007298 <USBD_GetDescriptor+0x258>
 8007140:	a201      	add	r2, pc, #4	; (adr r2, 8007148 <USBD_GetDescriptor+0x108>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	08007161 	.word	0x08007161
 800714c:	08007195 	.word	0x08007195
 8007150:	080071c9 	.word	0x080071c9
 8007154:	080071fd 	.word	0x080071fd
 8007158:	08007231 	.word	0x08007231
 800715c:	08007265 	.word	0x08007265
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007182:	e091      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 faaa 	bl	80076e0 <USBD_CtlError>
        err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
      break;
 8007192:	e089      	b.n	80072a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00b      	beq.n	80071b8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	7c12      	ldrb	r2, [r2, #16]
 80071ac:	f107 0108 	add.w	r1, r7, #8
 80071b0:	4610      	mov	r0, r2
 80071b2:	4798      	blx	r3
 80071b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071b6:	e077      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fa90 	bl	80076e0 <USBD_CtlError>
        err++;
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	3301      	adds	r3, #1
 80071c4:	72fb      	strb	r3, [r7, #11]
      break;
 80071c6:	e06f      	b.n	80072a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	687a      	ldr	r2, [r7, #4]
 80071de:	7c12      	ldrb	r2, [r2, #16]
 80071e0:	f107 0108 	add.w	r1, r7, #8
 80071e4:	4610      	mov	r0, r2
 80071e6:	4798      	blx	r3
 80071e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ea:	e05d      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa76 	bl	80076e0 <USBD_CtlError>
        err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
      break;
 80071fa:	e055      	b.n	80072a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00b      	beq.n	8007220 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	7c12      	ldrb	r2, [r2, #16]
 8007214:	f107 0108 	add.w	r1, r7, #8
 8007218:	4610      	mov	r0, r2
 800721a:	4798      	blx	r3
 800721c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800721e:	e043      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007220:	6839      	ldr	r1, [r7, #0]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fa5c 	bl	80076e0 <USBD_CtlError>
        err++;
 8007228:	7afb      	ldrb	r3, [r7, #11]
 800722a:	3301      	adds	r3, #1
 800722c:	72fb      	strb	r3, [r7, #11]
      break;
 800722e:	e03b      	b.n	80072a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007242:	695b      	ldr	r3, [r3, #20]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	7c12      	ldrb	r2, [r2, #16]
 8007248:	f107 0108 	add.w	r1, r7, #8
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007252:	e029      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fa42 	bl	80076e0 <USBD_CtlError>
        err++;
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	3301      	adds	r3, #1
 8007260:	72fb      	strb	r3, [r7, #11]
      break;
 8007262:	e021      	b.n	80072a8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00b      	beq.n	8007288 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7c12      	ldrb	r2, [r2, #16]
 800727c:	f107 0108 	add.w	r1, r7, #8
 8007280:	4610      	mov	r0, r2
 8007282:	4798      	blx	r3
 8007284:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007286:	e00f      	b.n	80072a8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fa28 	bl	80076e0 <USBD_CtlError>
        err++;
 8007290:	7afb      	ldrb	r3, [r7, #11]
 8007292:	3301      	adds	r3, #1
 8007294:	72fb      	strb	r3, [r7, #11]
      break;
 8007296:	e007      	b.n	80072a8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 fa20 	bl	80076e0 <USBD_CtlError>
      err++;
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	3301      	adds	r3, #1
 80072a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80072a6:	bf00      	nop
    }
    break;
 80072a8:	e037      	b.n	800731a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	7c1b      	ldrb	r3, [r3, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d109      	bne.n	80072c6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	f107 0208 	add.w	r2, r7, #8
 80072be:	4610      	mov	r0, r2
 80072c0:	4798      	blx	r3
 80072c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072c4:	e029      	b.n	800731a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fa09 	bl	80076e0 <USBD_CtlError>
      err++;
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	3301      	adds	r3, #1
 80072d2:	72fb      	strb	r3, [r7, #11]
    break;
 80072d4:	e021      	b.n	800731a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	7c1b      	ldrb	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10d      	bne.n	80072fa <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	f107 0208 	add.w	r2, r7, #8
 80072ea:	4610      	mov	r0, r2
 80072ec:	4798      	blx	r3
 80072ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	2207      	movs	r2, #7
 80072f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80072f8:	e00f      	b.n	800731a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80072fa:	6839      	ldr	r1, [r7, #0]
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9ef 	bl	80076e0 <USBD_CtlError>
      err++;
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	3301      	adds	r3, #1
 8007306:	72fb      	strb	r3, [r7, #11]
    break;
 8007308:	e007      	b.n	800731a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 f9e7 	bl	80076e0 <USBD_CtlError>
    err++;
 8007312:	7afb      	ldrb	r3, [r7, #11]
 8007314:	3301      	adds	r3, #1
 8007316:	72fb      	strb	r3, [r7, #11]
    break;
 8007318:	bf00      	nop
  }

  if (err != 0U)
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d11e      	bne.n	800735e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	88db      	ldrh	r3, [r3, #6]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d016      	beq.n	8007356 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8007328:	893b      	ldrh	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00e      	beq.n	800734c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88da      	ldrh	r2, [r3, #6]
 8007332:	893b      	ldrh	r3, [r7, #8]
 8007334:	4293      	cmp	r3, r2
 8007336:	bf28      	it	cs
 8007338:	4613      	movcs	r3, r2
 800733a:	b29b      	uxth	r3, r3
 800733c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800733e:	893b      	ldrh	r3, [r7, #8]
 8007340:	461a      	mov	r2, r3
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa3c 	bl	80077c2 <USBD_CtlSendData>
 800734a:	e009      	b.n	8007360 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f9c6 	bl	80076e0 <USBD_CtlError>
 8007354:	e004      	b.n	8007360 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa8d 	bl	8007876 <USBD_CtlSendStatus>
 800735c:	e000      	b.n	8007360 <USBD_GetDescriptor+0x320>
    return;
 800735e:	bf00      	nop
    }
  }
}
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop

08007368 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	889b      	ldrh	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d130      	bne.n	80073dc <USBD_SetAddress+0x74>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	88db      	ldrh	r3, [r3, #6]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d12c      	bne.n	80073dc <USBD_SetAddress+0x74>
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	2b7f      	cmp	r3, #127	; 0x7f
 8007388:	d828      	bhi.n	80073dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	885b      	ldrh	r3, [r3, #2]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007394:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800739c:	2b03      	cmp	r3, #3
 800739e:	d104      	bne.n	80073aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f99c 	bl	80076e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a8:	e01c      	b.n	80073e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 ff0c 	bl	80081d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa5a 	bl	8007876 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d0:	e008      	b.n	80073e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073da:	e003      	b.n	80073e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f97e 	bl	80076e0 <USBD_CtlError>
  }
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	885b      	ldrh	r3, [r3, #2]
 80073fe:	b2da      	uxtb	r2, r3
 8007400:	4b4b      	ldr	r3, [pc, #300]	; (8007530 <USBD_SetConfig+0x144>)
 8007402:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007404:	4b4a      	ldr	r3, [pc, #296]	; (8007530 <USBD_SetConfig+0x144>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d905      	bls.n	8007418 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f966 	bl	80076e0 <USBD_CtlError>
    return USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	e087      	b.n	8007528 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800741e:	2b02      	cmp	r3, #2
 8007420:	d002      	beq.n	8007428 <USBD_SetConfig+0x3c>
 8007422:	2b03      	cmp	r3, #3
 8007424:	d025      	beq.n	8007472 <USBD_SetConfig+0x86>
 8007426:	e071      	b.n	800750c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007428:	4b41      	ldr	r3, [pc, #260]	; (8007530 <USBD_SetConfig+0x144>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01c      	beq.n	800746a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007430:	4b3f      	ldr	r3, [pc, #252]	; (8007530 <USBD_SetConfig+0x144>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800743a:	4b3d      	ldr	r3, [pc, #244]	; (8007530 <USBD_SetConfig+0x144>)
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	4619      	mov	r1, r3
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff f9bd 	bl	80067c0 <USBD_SetClassConfig>
 8007446:	4603      	mov	r3, r0
 8007448:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f944 	bl	80076e0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007458:	e065      	b.n	8007526 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa0b 	bl	8007876 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2203      	movs	r2, #3
 8007464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007468:	e05d      	b.n	8007526 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa03 	bl	8007876 <USBD_CtlSendStatus>
    break;
 8007470:	e059      	b.n	8007526 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007472:	4b2f      	ldr	r3, [pc, #188]	; (8007530 <USBD_SetConfig+0x144>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d112      	bne.n	80074a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007482:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <USBD_SetConfig+0x144>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800748c:	4b28      	ldr	r3, [pc, #160]	; (8007530 <USBD_SetConfig+0x144>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff f9b0 	bl	80067f8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f9ec 	bl	8007876 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800749e:	e042      	b.n	8007526 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80074a0:	4b23      	ldr	r3, [pc, #140]	; (8007530 <USBD_SetConfig+0x144>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d02a      	beq.n	8007504 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f99e 	bl	80067f8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80074bc:	4b1c      	ldr	r3, [pc, #112]	; (8007530 <USBD_SetConfig+0x144>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80074c6:	4b1a      	ldr	r3, [pc, #104]	; (8007530 <USBD_SetConfig+0x144>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7ff f977 	bl	80067c0 <USBD_SetClassConfig>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00f      	beq.n	80074fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80074dc:	6839      	ldr	r1, [r7, #0]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f8fe 	bl	80076e0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff f983 	bl	80067f8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80074fa:	e014      	b.n	8007526 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9ba 	bl	8007876 <USBD_CtlSendStatus>
    break;
 8007502:	e010      	b.n	8007526 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f9b6 	bl	8007876 <USBD_CtlSendStatus>
    break;
 800750a:	e00c      	b.n	8007526 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f8e6 	bl	80076e0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <USBD_SetConfig+0x144>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f96c 	bl	80067f8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007520:	2303      	movs	r3, #3
 8007522:	73fb      	strb	r3, [r7, #15]
    break;
 8007524:	bf00      	nop
  }

  return ret;
 8007526:	7bfb      	ldrb	r3, [r7, #15]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000214 	.word	0x20000214

08007534 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	88db      	ldrh	r3, [r3, #6]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d004      	beq.n	8007550 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f8c9 	bl	80076e0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800754e:	e021      	b.n	8007594 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007556:	2b01      	cmp	r3, #1
 8007558:	db17      	blt.n	800758a <USBD_GetConfig+0x56>
 800755a:	2b02      	cmp	r3, #2
 800755c:	dd02      	ble.n	8007564 <USBD_GetConfig+0x30>
 800755e:	2b03      	cmp	r3, #3
 8007560:	d00b      	beq.n	800757a <USBD_GetConfig+0x46>
 8007562:	e012      	b.n	800758a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3308      	adds	r3, #8
 800756e:	2201      	movs	r2, #1
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f925 	bl	80077c2 <USBD_CtlSendData>
      break;
 8007578:	e00c      	b.n	8007594 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3304      	adds	r3, #4
 800757e:	2201      	movs	r2, #1
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f91d 	bl	80077c2 <USBD_CtlSendData>
      break;
 8007588:	e004      	b.n	8007594 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f8a7 	bl	80076e0 <USBD_CtlError>
      break;
 8007592:	bf00      	nop
}
 8007594:	bf00      	nop
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ac:	3b01      	subs	r3, #1
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d81e      	bhi.n	80075f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	88db      	ldrh	r3, [r3, #6]
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d004      	beq.n	80075c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 f88f 	bl	80076e0 <USBD_CtlError>
      break;
 80075c2:	e01a      	b.n	80075fa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f043 0202 	orr.w	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	330c      	adds	r3, #12
 80075e4:	2202      	movs	r2, #2
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f8ea 	bl	80077c2 <USBD_CtlSendData>
    break;
 80075ee:	e004      	b.n	80075fa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f874 	bl	80076e0 <USBD_CtlError>
    break;
 80075f8:	bf00      	nop
  }
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	885b      	ldrh	r3, [r3, #2]
 8007610:	2b01      	cmp	r3, #1
 8007612:	d106      	bne.n	8007622 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f92a 	bl	8007876 <USBD_CtlSendStatus>
  }
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763a:	3b01      	subs	r3, #1
 800763c:	2b02      	cmp	r3, #2
 800763e:	d80b      	bhi.n	8007658 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	885b      	ldrh	r3, [r3, #2]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d10c      	bne.n	8007662 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f910 	bl	8007876 <USBD_CtlSendStatus>
      }
      break;
 8007656:	e004      	b.n	8007662 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f840 	bl	80076e0 <USBD_CtlError>
      break;
 8007660:	e000      	b.n	8007664 <USBD_ClrFeature+0x3a>
      break;
 8007662:	bf00      	nop
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	781a      	ldrb	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3301      	adds	r3, #1
 8007686:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781a      	ldrb	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7ff faa8 	bl	8006bec <SWAPBYTE>
 800769c:	4603      	mov	r3, r0
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	3301      	adds	r3, #1
 80076a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3301      	adds	r3, #1
 80076ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fa9b 	bl	8006bec <SWAPBYTE>
 80076b6:	4603      	mov	r3, r0
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f7ff fa8e 	bl	8006bec <SWAPBYTE>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	80da      	strh	r2, [r3, #6]
}
 80076d8:	bf00      	nop
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076ea:	2180      	movs	r1, #128	; 0x80
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fcd7 	bl	80080a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076f2:	2100      	movs	r1, #0
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fcd3 	bl	80080a0 <USBD_LL_StallEP>
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b086      	sub	sp, #24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d036      	beq.n	8007786 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800771c:	6938      	ldr	r0, [r7, #16]
 800771e:	f000 f836 	bl	800778e <USBD_GetLen>
 8007722:	4603      	mov	r3, r0
 8007724:	3301      	adds	r3, #1
 8007726:	b29b      	uxth	r3, r3
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
  idx++;
 800773c:	7dfb      	ldrb	r3, [r7, #23]
 800773e:	3301      	adds	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	2203      	movs	r2, #3
 800774a:	701a      	strb	r2, [r3, #0]
  idx++;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
 800774e:	3301      	adds	r3, #1
 8007750:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007752:	e013      	b.n	800777c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	4413      	add	r3, r2
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	3301      	adds	r3, #1
 8007764:	613b      	str	r3, [r7, #16]
    idx++;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	3301      	adds	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	4413      	add	r3, r2
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
    idx++;
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	3301      	adds	r3, #1
 800777a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e7      	bne.n	8007754 <USBD_GetString+0x52>
 8007784:	e000      	b.n	8007788 <USBD_GetString+0x86>
    return;
 8007786:	bf00      	nop
  }
}
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800779e:	e005      	b.n	80077ac <USBD_GetLen+0x1e>
  {
    len++;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	3301      	adds	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1f5      	bne.n	80077a0 <USBD_GetLen+0x12>
  }

  return len;
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	2100      	movs	r1, #0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fd29 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	2100      	movs	r1, #0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fd18 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3710      	adds	r7, #16
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b084      	sub	sp, #16
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2203      	movs	r2, #3
 800782a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	2100      	movs	r1, #0
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 fd33 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	2100      	movs	r1, #0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fd22 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b082      	sub	sp, #8
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2204      	movs	r2, #4
 8007882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007886:	2300      	movs	r3, #0
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fcd7 	bl	8008240 <USBD_LL_Transmit>

  return USBD_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2205      	movs	r2, #5
 80078a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078ac:	2300      	movs	r3, #0
 80078ae:	2200      	movs	r2, #0
 80078b0:	2100      	movs	r1, #0
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fcfc 	bl	80082b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
	...

080078c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80078c8:	2200      	movs	r2, #0
 80078ca:	4912      	ldr	r1, [pc, #72]	; (8007914 <MX_USB_DEVICE_Init+0x50>)
 80078cc:	4812      	ldr	r0, [pc, #72]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078ce:	f7fe ff09 	bl	80066e4 <USBD_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80078d8:	f7f8 fe47 	bl	800056a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80078dc:	490f      	ldr	r1, [pc, #60]	; (800791c <MX_USB_DEVICE_Init+0x58>)
 80078de:	480e      	ldr	r0, [pc, #56]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078e0:	f7fe ff30 	bl	8006744 <USBD_RegisterClass>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d001      	beq.n	80078ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80078ea:	f7f8 fe3e 	bl	800056a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80078ee:	490c      	ldr	r1, [pc, #48]	; (8007920 <MX_USB_DEVICE_Init+0x5c>)
 80078f0:	4809      	ldr	r0, [pc, #36]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 80078f2:	f7fe fe8b 	bl	800660c <USBD_CDC_RegisterInterface>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80078fc:	f7f8 fe35 	bl	800056a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007900:	4805      	ldr	r0, [pc, #20]	; (8007918 <MX_USB_DEVICE_Init+0x54>)
 8007902:	f7fe ff46 	bl	8006792 <USBD_Start>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800790c:	f7f8 fe2d 	bl	800056a <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007910:	bf00      	nop
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000130 	.word	0x20000130
 8007918:	20000320 	.word	0x20000320
 800791c:	20000018 	.word	0x20000018
 8007920:	2000011c 	.word	0x2000011c

08007924 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007928:	2200      	movs	r2, #0
 800792a:	4905      	ldr	r1, [pc, #20]	; (8007940 <CDC_Init_FS+0x1c>)
 800792c:	4805      	ldr	r0, [pc, #20]	; (8007944 <CDC_Init_FS+0x20>)
 800792e:	f7fe fe82 	bl	8006636 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007932:	4905      	ldr	r1, [pc, #20]	; (8007948 <CDC_Init_FS+0x24>)
 8007934:	4803      	ldr	r0, [pc, #12]	; (8007944 <CDC_Init_FS+0x20>)
 8007936:	f7fe fe97 	bl	8006668 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800793a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800793c:	4618      	mov	r0, r3
 800793e:	bd80      	pop	{r7, pc}
 8007940:	200009d8 	.word	0x200009d8
 8007944:	20000320 	.word	0x20000320
 8007948:	200005f0 	.word	0x200005f0

0800794c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007950:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007952:	4618      	mov	r0, r3
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
 8007968:	4613      	mov	r3, r2
 800796a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800796c:	79fb      	ldrb	r3, [r7, #7]
 800796e:	2b23      	cmp	r3, #35	; 0x23
 8007970:	d84a      	bhi.n	8007a08 <CDC_Control_FS+0xac>
 8007972:	a201      	add	r2, pc, #4	; (adr r2, 8007978 <CDC_Control_FS+0x1c>)
 8007974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007978:	08007a09 	.word	0x08007a09
 800797c:	08007a09 	.word	0x08007a09
 8007980:	08007a09 	.word	0x08007a09
 8007984:	08007a09 	.word	0x08007a09
 8007988:	08007a09 	.word	0x08007a09
 800798c:	08007a09 	.word	0x08007a09
 8007990:	08007a09 	.word	0x08007a09
 8007994:	08007a09 	.word	0x08007a09
 8007998:	08007a09 	.word	0x08007a09
 800799c:	08007a09 	.word	0x08007a09
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007a09 	.word	0x08007a09
 80079a8:	08007a09 	.word	0x08007a09
 80079ac:	08007a09 	.word	0x08007a09
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	08007a09 	.word	0x08007a09
 80079c0:	08007a09 	.word	0x08007a09
 80079c4:	08007a09 	.word	0x08007a09
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	08007a09 	.word	0x08007a09
 80079d0:	08007a09 	.word	0x08007a09
 80079d4:	08007a09 	.word	0x08007a09
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	08007a09 	.word	0x08007a09
 80079e0:	08007a09 	.word	0x08007a09
 80079e4:	08007a09 	.word	0x08007a09
 80079e8:	08007a09 	.word	0x08007a09
 80079ec:	08007a09 	.word	0x08007a09
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a09 	.word	0x08007a09
 80079f8:	08007a09 	.word	0x08007a09
 80079fc:	08007a09 	.word	0x08007a09
 8007a00:	08007a09 	.word	0x08007a09
 8007a04:	08007a09 	.word	0x08007a09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a08:	bf00      	nop
  }

  return (USBD_OK);
 8007a0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <CDC_Receive_FS+0x24>)
 8007a26:	f7fe fe1f 	bl	8006668 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007a2a:	4804      	ldr	r0, [pc, #16]	; (8007a3c <CDC_Receive_FS+0x24>)
 8007a2c:	f7fe fe30 	bl	8006690 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007a30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000320 	.word	0x20000320

08007a40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2212      	movs	r2, #18
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a76:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	20000150 	.word	0x20000150

08007a88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2204      	movs	r2, #4
 8007a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a9a:	4b03      	ldr	r3, [pc, #12]	; (8007aa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	20000170 	.word	0x20000170

08007aac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	6039      	str	r1, [r7, #0]
 8007ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ab8:	79fb      	ldrb	r3, [r7, #7]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d105      	bne.n	8007aca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	4907      	ldr	r1, [pc, #28]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ac2:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ac4:	f7ff fe1d 	bl	8007702 <USBD_GetString>
 8007ac8:	e004      	b.n	8007ad4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ad0:	f7ff fe17 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad4:	4b02      	ldr	r3, [pc, #8]	; (8007ae0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000dc0 	.word	0x20000dc0
 8007ae4:	080085d4 	.word	0x080085d4

08007ae8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	6039      	str	r1, [r7, #0]
 8007af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4904      	ldr	r1, [pc, #16]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007af8:	4804      	ldr	r0, [pc, #16]	; (8007b0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007afa:	f7ff fe02 	bl	8007702 <USBD_GetString>
  return USBD_StrDesc;
 8007afe:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3708      	adds	r7, #8
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000dc0 	.word	0x20000dc0
 8007b0c:	080085ec 	.word	0x080085ec

08007b10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4603      	mov	r3, r0
 8007b18:	6039      	str	r1, [r7, #0]
 8007b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	221a      	movs	r2, #26
 8007b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007b22:	f000 f855 	bl	8007bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007b26:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	20000174 	.word	0x20000174

08007b34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	6039      	str	r1, [r7, #0]
 8007b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	4907      	ldr	r1, [pc, #28]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b4a:	4808      	ldr	r0, [pc, #32]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b4c:	f7ff fdd9 	bl	8007702 <USBD_GetString>
 8007b50:	e004      	b.n	8007b5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	4904      	ldr	r1, [pc, #16]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007b56:	4805      	ldr	r0, [pc, #20]	; (8007b6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007b58:	f7ff fdd3 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b5c:	4b02      	ldr	r3, [pc, #8]	; (8007b68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000dc0 	.word	0x20000dc0
 8007b6c:	08008600 	.word	0x08008600

08007b70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d105      	bne.n	8007b8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	4907      	ldr	r1, [pc, #28]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b86:	4808      	ldr	r0, [pc, #32]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b88:	f7ff fdbb 	bl	8007702 <USBD_GetString>
 8007b8c:	e004      	b.n	8007b98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	4904      	ldr	r1, [pc, #16]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b92:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b94:	f7ff fdb5 	bl	8007702 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000dc0 	.word	0x20000dc0
 8007ba8:	0800860c 	.word	0x0800860c

08007bac <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	220c      	movs	r2, #12
 8007bbc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007bbe:	4b03      	ldr	r3, [pc, #12]	; (8007bcc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	20000164 	.word	0x20000164

08007bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007bd6:	4b0f      	ldr	r3, [pc, #60]	; (8007c14 <Get_SerialNum+0x44>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007bdc:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <Get_SerialNum+0x48>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007be2:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <Get_SerialNum+0x4c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4413      	add	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	4909      	ldr	r1, [pc, #36]	; (8007c20 <Get_SerialNum+0x50>)
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f814 	bl	8007c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007c00:	2204      	movs	r2, #4
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <Get_SerialNum+0x54>)
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 f80f 	bl	8007c28 <IntToUnicode>
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	1fff7590 	.word	0x1fff7590
 8007c18:	1fff7594 	.word	0x1fff7594
 8007c1c:	1fff7598 	.word	0x1fff7598
 8007c20:	20000176 	.word	0x20000176
 8007c24:	20000186 	.word	0x20000186

08007c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b087      	sub	sp, #28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	4613      	mov	r3, r2
 8007c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
 8007c3e:	e027      	b.n	8007c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	0f1b      	lsrs	r3, r3, #28
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d80b      	bhi.n	8007c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0f1b      	lsrs	r3, r3, #28
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	440b      	add	r3, r1
 8007c58:	3230      	adds	r2, #48	; 0x30
 8007c5a:	b2d2      	uxtb	r2, r2
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00a      	b.n	8007c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	440b      	add	r3, r1
 8007c70:	3237      	adds	r2, #55	; 0x37
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	3301      	adds	r3, #1
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	4413      	add	r3, r2
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c8a:	7dfb      	ldrb	r3, [r7, #23]
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	7dfa      	ldrb	r2, [r7, #23]
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d3d3      	bcc.n	8007c40 <IntToUnicode+0x18>
  }
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	; 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cac:	f107 0314 	add.w	r3, r7, #20
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	609a      	str	r2, [r3, #8]
 8007cb8:	60da      	str	r2, [r3, #12]
 8007cba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a1c      	ldr	r2, [pc, #112]	; (8007d34 <HAL_PCD_MspInit+0x90>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d131      	bne.n	8007d2a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cc6:	4b1c      	ldr	r3, [pc, #112]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cca:	4a1b      	ldr	r2, [pc, #108]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007cec:	2303      	movs	r3, #3
 8007cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8007cf0:	230a      	movs	r3, #10
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cfe:	f7f8 ffa9 	bl	8000c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d06:	4a0c      	ldr	r2, [pc, #48]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <HAL_PCD_MspInit+0x94>)
 8007d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	2043      	movs	r0, #67	; 0x43
 8007d20:	f7f8 ff61 	bl	8000be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007d24:	2043      	movs	r0, #67	; 0x43
 8007d26:	f7f8 ff7a 	bl	8000c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	3728      	adds	r7, #40	; 0x28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40006800 	.word	0x40006800
 8007d38:	40021000 	.word	0x40021000

08007d3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007d50:	4619      	mov	r1, r3
 8007d52:	4610      	mov	r0, r2
 8007d54:	f7fe fd68 	bl	8006828 <USBD_LL_SetupStage>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	440b      	add	r3, r1
 8007d80:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	78fb      	ldrb	r3, [r7, #3]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	f7fe fda0 	bl	80068ce <USBD_LL_DataOutStage>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8007da8:	78fa      	ldrb	r2, [r7, #3]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	440b      	add	r3, r1
 8007db6:	333c      	adds	r3, #60	; 0x3c
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	f7fe fde9 	bl	8006994 <USBD_LL_DataInStage>
}
 8007dc2:	bf00      	nop
 8007dc4:	3708      	adds	r7, #8
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b082      	sub	sp, #8
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fe feed 	bl	8006bb8 <USBD_LL_SOF>
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dee:	2301      	movs	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d001      	beq.n	8007dfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dfa:	f7f8 fbb6 	bl	800056a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007e04:	7bfa      	ldrb	r2, [r7, #15]
 8007e06:	4611      	mov	r1, r2
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fe9a 	bl	8006b42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fe fe53 	bl	8006ac0 <USBD_LL_Reset>
}
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe fe95 	bl	8006b62 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	699b      	ldr	r3, [r3, #24]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e40:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <HAL_PCD_SuspendCallback+0x30>)
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	4a03      	ldr	r2, [pc, #12]	; (8007e54 <HAL_PCD_SuspendCallback+0x30>)
 8007e46:	f043 0306 	orr.w	r3, r3, #6
 8007e4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	e000ed00 	.word	0xe000ed00

08007e58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d007      	beq.n	8007e78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e68:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <HAL_PCD_ResumeCallback+0x34>)
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	4a07      	ldr	r2, [pc, #28]	; (8007e8c <HAL_PCD_ResumeCallback+0x34>)
 8007e6e:	f023 0306 	bic.w	r3, r3, #6
 8007e72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007e74:	f000 fa9e 	bl	80083b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fe fe84 	bl	8006b8c <USBD_LL_Resume>
}
 8007e84:	bf00      	nop
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8007e98:	f7fa fd86 	bl	80029a8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e9c:	4a2b      	ldr	r2, [pc, #172]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a29      	ldr	r2, [pc, #164]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ea8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007eac:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007eae:	4a28      	ldr	r2, [pc, #160]	; (8007f50 <USBD_LL_Init+0xc0>)
 8007eb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007eb2:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007eb8:	4b24      	ldr	r3, [pc, #144]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007eba:	2202      	movs	r2, #2
 8007ebc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ebe:	4b23      	ldr	r3, [pc, #140]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007eca:	4b20      	ldr	r3, [pc, #128]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ed0:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ed6:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007edc:	481b      	ldr	r0, [pc, #108]	; (8007f4c <USBD_LL_Init+0xbc>)
 8007ede:	f7f9 f969 	bl	80011b4 <HAL_PCD_Init>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007ee8:	f7f8 fb3f 	bl	800056a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ef2:	2318      	movs	r3, #24
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	f7fa fc84 	bl	8002804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f02:	2358      	movs	r3, #88	; 0x58
 8007f04:	2200      	movs	r2, #0
 8007f06:	2180      	movs	r1, #128	; 0x80
 8007f08:	f7fa fc7c 	bl	8002804 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f12:	23c0      	movs	r3, #192	; 0xc0
 8007f14:	2200      	movs	r2, #0
 8007f16:	2181      	movs	r1, #129	; 0x81
 8007f18:	f7fa fc74 	bl	8002804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f26:	2200      	movs	r2, #0
 8007f28:	2101      	movs	r1, #1
 8007f2a:	f7fa fc6b 	bl	8002804 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2182      	movs	r1, #130	; 0x82
 8007f3c:	f7fa fc62 	bl	8002804 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000fc0 	.word	0x20000fc0
 8007f50:	40006800 	.word	0x40006800

08007f54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f60:	2300      	movs	r3, #0
 8007f62:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7f9 fa34 	bl	80013d8 <HAL_PCD_Start>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
 8007f76:	2b03      	cmp	r3, #3
 8007f78:	d816      	bhi.n	8007fa8 <USBD_LL_Start+0x54>
 8007f7a:	a201      	add	r2, pc, #4	; (adr r2, 8007f80 <USBD_LL_Start+0x2c>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f91 	.word	0x08007f91
 8007f84:	08007f97 	.word	0x08007f97
 8007f88:	08007f9d 	.word	0x08007f9d
 8007f8c:	08007fa3 	.word	0x08007fa3
    case HAL_OK :
      usb_status = USBD_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
    break;
 8007f94:	e00b      	b.n	8007fae <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9a:	e008      	b.n	8007fae <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa0:	e005      	b.n	8007fae <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa6:	e002      	b.n	8007fae <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	73fb      	strb	r3, [r7, #15]
    break;
 8007fac:	bf00      	nop
  }
  return usb_status;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	70fb      	strb	r3, [r7, #3]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70bb      	strb	r3, [r7, #2]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007fe0:	78bb      	ldrb	r3, [r7, #2]
 8007fe2:	883a      	ldrh	r2, [r7, #0]
 8007fe4:	78f9      	ldrb	r1, [r7, #3]
 8007fe6:	f7f9 fb8c 	bl	8001702 <HAL_PCD_EP_Open>
 8007fea:	4603      	mov	r3, r0
 8007fec:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b03      	cmp	r3, #3
 8007ff2:	d817      	bhi.n	8008024 <USBD_LL_OpenEP+0x6c>
 8007ff4:	a201      	add	r2, pc, #4	; (adr r2, 8007ffc <USBD_LL_OpenEP+0x44>)
 8007ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffa:	bf00      	nop
 8007ffc:	0800800d 	.word	0x0800800d
 8008000:	08008013 	.word	0x08008013
 8008004:	08008019 	.word	0x08008019
 8008008:	0800801f 	.word	0x0800801f
    case HAL_OK :
      usb_status = USBD_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
    break;
 8008010:	e00b      	b.n	800802a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	73fb      	strb	r3, [r7, #15]
    break;
 8008016:	e008      	b.n	800802a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
    break;
 800801c:	e005      	b.n	800802a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	73fb      	strb	r3, [r7, #15]
    break;
 8008022:	e002      	b.n	800802a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	73fb      	strb	r3, [r7, #15]
    break;
 8008028:	bf00      	nop
  }
  return usb_status;
 800802a:	7bfb      	ldrb	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7f9 fbbb 	bl	80017ce <HAL_PCD_EP_Close>
 8008058:	4603      	mov	r3, r0
 800805a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	2b03      	cmp	r3, #3
 8008060:	d816      	bhi.n	8008090 <USBD_LL_CloseEP+0x5c>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <USBD_LL_CloseEP+0x34>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	08008079 	.word	0x08008079
 800806c:	0800807f 	.word	0x0800807f
 8008070:	08008085 	.word	0x08008085
 8008074:	0800808b 	.word	0x0800808b
    case HAL_OK :
      usb_status = USBD_OK;
 8008078:	2300      	movs	r3, #0
 800807a:	73fb      	strb	r3, [r7, #15]
    break;
 800807c:	e00b      	b.n	8008096 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800807e:	2303      	movs	r3, #3
 8008080:	73fb      	strb	r3, [r7, #15]
    break;
 8008082:	e008      	b.n	8008096 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
    break;
 8008088:	e005      	b.n	8008096 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800808a:	2303      	movs	r3, #3
 800808c:	73fb      	strb	r3, [r7, #15]
    break;
 800808e:	e002      	b.n	8008096 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	bf00      	nop
  }
  return usb_status;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b0:	2300      	movs	r3, #0
 80080b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7f9 fc65 	bl	800198e <HAL_PCD_EP_SetStall>
 80080c4:	4603      	mov	r3, r0
 80080c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80080c8:	7bbb      	ldrb	r3, [r7, #14]
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d816      	bhi.n	80080fc <USBD_LL_StallEP+0x5c>
 80080ce:	a201      	add	r2, pc, #4	; (adr r2, 80080d4 <USBD_LL_StallEP+0x34>)
 80080d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d4:	080080e5 	.word	0x080080e5
 80080d8:	080080eb 	.word	0x080080eb
 80080dc:	080080f1 	.word	0x080080f1
 80080e0:	080080f7 	.word	0x080080f7
    case HAL_OK :
      usb_status = USBD_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	73fb      	strb	r3, [r7, #15]
    break;
 80080e8:	e00b      	b.n	8008102 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080ea:	2303      	movs	r3, #3
 80080ec:	73fb      	strb	r3, [r7, #15]
    break;
 80080ee:	e008      	b.n	8008102 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
    break;
 80080f4:	e005      	b.n	8008102 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080f6:	2303      	movs	r3, #3
 80080f8:	73fb      	strb	r3, [r7, #15]
    break;
 80080fa:	e002      	b.n	8008102 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	bf00      	nop
  }
  return usb_status;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008126:	78fa      	ldrb	r2, [r7, #3]
 8008128:	4611      	mov	r1, r2
 800812a:	4618      	mov	r0, r3
 800812c:	f7f9 fc8f 	bl	8001a4e <HAL_PCD_EP_ClrStall>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b03      	cmp	r3, #3
 8008138:	d816      	bhi.n	8008168 <USBD_LL_ClearStallEP+0x5c>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBD_LL_ClearStallEP+0x34>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008151 	.word	0x08008151
 8008144:	08008157 	.word	0x08008157
 8008148:	0800815d 	.word	0x0800815d
 800814c:	08008163 	.word	0x08008163
    case HAL_OK :
      usb_status = USBD_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	73fb      	strb	r3, [r7, #15]
    break;
 8008154:	e00b      	b.n	800816e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008156:	2303      	movs	r3, #3
 8008158:	73fb      	strb	r3, [r7, #15]
    break;
 800815a:	e008      	b.n	800816e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
    break;
 8008160:	e005      	b.n	800816e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008162:	2303      	movs	r3, #3
 8008164:	73fb      	strb	r3, [r7, #15]
    break;
 8008166:	e002      	b.n	800816e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008168:	2303      	movs	r3, #3
 800816a:	73fb      	strb	r3, [r7, #15]
    break;
 800816c:	bf00      	nop
  }
  return usb_status;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800818a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800818c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008190:	2b00      	cmp	r3, #0
 8008192:	da0c      	bge.n	80081ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008194:	78fb      	ldrb	r3, [r7, #3]
 8008196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	4613      	mov	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	440b      	add	r3, r1
 80081a8:	3302      	adds	r3, #2
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	e00b      	b.n	80081c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081b4:	68f9      	ldr	r1, [r7, #12]
 80081b6:	4613      	mov	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4413      	add	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	440b      	add	r3, r1
 80081c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80081c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	4611      	mov	r1, r2
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7f9 fa60 	bl	80016b8 <HAL_PCD_SetAddress>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d816      	bhi.n	8008230 <USBD_LL_SetUSBAddress+0x5c>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USBD_LL_SetUSBAddress+0x34>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008219 	.word	0x08008219
 800820c:	0800821f 	.word	0x0800821f
 8008210:	08008225 	.word	0x08008225
 8008214:	0800822b 	.word	0x0800822b
    case HAL_OK :
      usb_status = USBD_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	e00b      	b.n	8008236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800821e:	2303      	movs	r3, #3
 8008220:	73fb      	strb	r3, [r7, #15]
    break;
 8008222:	e008      	b.n	8008236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008224:	2301      	movs	r3, #1
 8008226:	73fb      	strb	r3, [r7, #15]
    break;
 8008228:	e005      	b.n	8008236 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	73fb      	strb	r3, [r7, #15]
    break;
 800822e:	e002      	b.n	8008236 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	73fb      	strb	r3, [r7, #15]
    break;
 8008234:	bf00      	nop
  }
  return usb_status;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	460b      	mov	r3, r1
 800824e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800825e:	7af9      	ldrb	r1, [r7, #11]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	f7f9 fb50 	bl	8001908 <HAL_PCD_EP_Transmit>
 8008268:	4603      	mov	r3, r0
 800826a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800826c:	7dbb      	ldrb	r3, [r7, #22]
 800826e:	2b03      	cmp	r3, #3
 8008270:	d816      	bhi.n	80082a0 <USBD_LL_Transmit+0x60>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <USBD_LL_Transmit+0x38>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008289 	.word	0x08008289
 800827c:	0800828f 	.word	0x0800828f
 8008280:	08008295 	.word	0x08008295
 8008284:	0800829b 	.word	0x0800829b
    case HAL_OK :
      usb_status = USBD_OK;
 8008288:	2300      	movs	r3, #0
 800828a:	75fb      	strb	r3, [r7, #23]
    break;
 800828c:	e00b      	b.n	80082a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800828e:	2303      	movs	r3, #3
 8008290:	75fb      	strb	r3, [r7, #23]
    break;
 8008292:	e008      	b.n	80082a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008294:	2301      	movs	r3, #1
 8008296:	75fb      	strb	r3, [r7, #23]
    break;
 8008298:	e005      	b.n	80082a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800829a:	2303      	movs	r3, #3
 800829c:	75fb      	strb	r3, [r7, #23]
    break;
 800829e:	e002      	b.n	80082a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	75fb      	strb	r3, [r7, #23]
    break;
 80082a4:	bf00      	nop
  }
  return usb_status;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	460b      	mov	r3, r1
 80082be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80082ce:	7af9      	ldrb	r1, [r7, #11]
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	f7f9 fac3 	bl	800185e <HAL_PCD_EP_Receive>
 80082d8:	4603      	mov	r3, r0
 80082da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80082dc:	7dbb      	ldrb	r3, [r7, #22]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d816      	bhi.n	8008310 <USBD_LL_PrepareReceive+0x60>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <USBD_LL_PrepareReceive+0x38>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	080082ff 	.word	0x080082ff
 80082f0:	08008305 	.word	0x08008305
 80082f4:	0800830b 	.word	0x0800830b
    case HAL_OK :
      usb_status = USBD_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	75fb      	strb	r3, [r7, #23]
    break;
 80082fc:	e00b      	b.n	8008316 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80082fe:	2303      	movs	r3, #3
 8008300:	75fb      	strb	r3, [r7, #23]
    break;
 8008302:	e008      	b.n	8008316 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
    break;
 8008308:	e005      	b.n	8008316 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800830a:	2303      	movs	r3, #3
 800830c:	75fb      	strb	r3, [r7, #23]
    break;
 800830e:	e002      	b.n	8008316 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	75fb      	strb	r3, [r7, #23]
    break;
 8008314:	bf00      	nop
  }
  return usb_status;
 8008316:	7dfb      	ldrb	r3, [r7, #23]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008332:	78fa      	ldrb	r2, [r7, #3]
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f7f9 face 	bl	80018d8 <HAL_PCD_EP_GetRxCount>
 800833c:	4603      	mov	r3, r0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008354:	78fb      	ldrb	r3, [r7, #3]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <HAL_PCDEx_LPM_Callback+0x18>
 800835a:	2b01      	cmp	r3, #1
 800835c:	d013      	beq.n	8008386 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800835e:	e023      	b.n	80083a8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008368:	f000 f824 	bl	80083b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800836c:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4a0f      	ldr	r2, [pc, #60]	; (80083b0 <HAL_PCDEx_LPM_Callback+0x68>)
 8008372:	f023 0306 	bic.w	r3, r3, #6
 8008376:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fc04 	bl	8006b8c <USBD_LL_Resume>
    break;
 8008384:	e010      	b.n	80083a8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800838c:	4618      	mov	r0, r3
 800838e:	f7fe fbe8 	bl	8006b62 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d005      	beq.n	80083a6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_PCDEx_LPM_Callback+0x68>)
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <HAL_PCDEx_LPM_Callback+0x68>)
 80083a0:	f043 0306 	orr.w	r3, r3, #6
 80083a4:	6113      	str	r3, [r2, #16]
    break;
 80083a6:	bf00      	nop
}
 80083a8:	bf00      	nop
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	e000ed00 	.word	0xe000ed00

080083b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 80083b8:	bf00      	nop
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
	...

080083c4 <__errno>:
 80083c4:	4b01      	ldr	r3, [pc, #4]	; (80083cc <__errno+0x8>)
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000190 	.word	0x20000190

080083d0 <__libc_init_array>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	4e0d      	ldr	r6, [pc, #52]	; (8008408 <__libc_init_array+0x38>)
 80083d4:	4c0d      	ldr	r4, [pc, #52]	; (800840c <__libc_init_array+0x3c>)
 80083d6:	1ba4      	subs	r4, r4, r6
 80083d8:	10a4      	asrs	r4, r4, #2
 80083da:	2500      	movs	r5, #0
 80083dc:	42a5      	cmp	r5, r4
 80083de:	d109      	bne.n	80083f4 <__libc_init_array+0x24>
 80083e0:	4e0b      	ldr	r6, [pc, #44]	; (8008410 <__libc_init_array+0x40>)
 80083e2:	4c0c      	ldr	r4, [pc, #48]	; (8008414 <__libc_init_array+0x44>)
 80083e4:	f000 f8ea 	bl	80085bc <_init>
 80083e8:	1ba4      	subs	r4, r4, r6
 80083ea:	10a4      	asrs	r4, r4, #2
 80083ec:	2500      	movs	r5, #0
 80083ee:	42a5      	cmp	r5, r4
 80083f0:	d105      	bne.n	80083fe <__libc_init_array+0x2e>
 80083f2:	bd70      	pop	{r4, r5, r6, pc}
 80083f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083f8:	4798      	blx	r3
 80083fa:	3501      	adds	r5, #1
 80083fc:	e7ee      	b.n	80083dc <__libc_init_array+0xc>
 80083fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008402:	4798      	blx	r3
 8008404:	3501      	adds	r5, #1
 8008406:	e7f2      	b.n	80083ee <__libc_init_array+0x1e>
 8008408:	0800865c 	.word	0x0800865c
 800840c:	0800865c 	.word	0x0800865c
 8008410:	0800865c 	.word	0x0800865c
 8008414:	08008660 	.word	0x08008660

08008418 <malloc>:
 8008418:	4b02      	ldr	r3, [pc, #8]	; (8008424 <malloc+0xc>)
 800841a:	4601      	mov	r1, r0
 800841c:	6818      	ldr	r0, [r3, #0]
 800841e:	f000 b861 	b.w	80084e4 <_malloc_r>
 8008422:	bf00      	nop
 8008424:	20000190 	.word	0x20000190

08008428 <free>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <free+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 b80b 	b.w	8008448 <_free_r>
 8008432:	bf00      	nop
 8008434:	20000190 	.word	0x20000190

08008438 <memset>:
 8008438:	4402      	add	r2, r0
 800843a:	4603      	mov	r3, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <_free_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4605      	mov	r5, r0
 800844c:	2900      	cmp	r1, #0
 800844e:	d045      	beq.n	80084dc <_free_r+0x94>
 8008450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008454:	1f0c      	subs	r4, r1, #4
 8008456:	2b00      	cmp	r3, #0
 8008458:	bfb8      	it	lt
 800845a:	18e4      	addlt	r4, r4, r3
 800845c:	f000 f8ac 	bl	80085b8 <__malloc_lock>
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <_free_r+0x98>)
 8008462:	6813      	ldr	r3, [r2, #0]
 8008464:	4610      	mov	r0, r2
 8008466:	b933      	cbnz	r3, 8008476 <_free_r+0x2e>
 8008468:	6063      	str	r3, [r4, #4]
 800846a:	6014      	str	r4, [r2, #0]
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008472:	f000 b8a2 	b.w	80085ba <__malloc_unlock>
 8008476:	42a3      	cmp	r3, r4
 8008478:	d90c      	bls.n	8008494 <_free_r+0x4c>
 800847a:	6821      	ldr	r1, [r4, #0]
 800847c:	1862      	adds	r2, r4, r1
 800847e:	4293      	cmp	r3, r2
 8008480:	bf04      	itt	eq
 8008482:	681a      	ldreq	r2, [r3, #0]
 8008484:	685b      	ldreq	r3, [r3, #4]
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	bf04      	itt	eq
 800848a:	1852      	addeq	r2, r2, r1
 800848c:	6022      	streq	r2, [r4, #0]
 800848e:	6004      	str	r4, [r0, #0]
 8008490:	e7ec      	b.n	800846c <_free_r+0x24>
 8008492:	4613      	mov	r3, r2
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	b10a      	cbz	r2, 800849c <_free_r+0x54>
 8008498:	42a2      	cmp	r2, r4
 800849a:	d9fa      	bls.n	8008492 <_free_r+0x4a>
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	1858      	adds	r0, r3, r1
 80084a0:	42a0      	cmp	r0, r4
 80084a2:	d10b      	bne.n	80084bc <_free_r+0x74>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	4401      	add	r1, r0
 80084a8:	1858      	adds	r0, r3, r1
 80084aa:	4282      	cmp	r2, r0
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	d1dd      	bne.n	800846c <_free_r+0x24>
 80084b0:	6810      	ldr	r0, [r2, #0]
 80084b2:	6852      	ldr	r2, [r2, #4]
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	4401      	add	r1, r0
 80084b8:	6019      	str	r1, [r3, #0]
 80084ba:	e7d7      	b.n	800846c <_free_r+0x24>
 80084bc:	d902      	bls.n	80084c4 <_free_r+0x7c>
 80084be:	230c      	movs	r3, #12
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	e7d3      	b.n	800846c <_free_r+0x24>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	1821      	adds	r1, r4, r0
 80084c8:	428a      	cmp	r2, r1
 80084ca:	bf04      	itt	eq
 80084cc:	6811      	ldreq	r1, [r2, #0]
 80084ce:	6852      	ldreq	r2, [r2, #4]
 80084d0:	6062      	str	r2, [r4, #4]
 80084d2:	bf04      	itt	eq
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	605c      	str	r4, [r3, #4]
 80084da:	e7c7      	b.n	800846c <_free_r+0x24>
 80084dc:	bd38      	pop	{r3, r4, r5, pc}
 80084de:	bf00      	nop
 80084e0:	20000218 	.word	0x20000218

080084e4 <_malloc_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	1ccd      	adds	r5, r1, #3
 80084e8:	f025 0503 	bic.w	r5, r5, #3
 80084ec:	3508      	adds	r5, #8
 80084ee:	2d0c      	cmp	r5, #12
 80084f0:	bf38      	it	cc
 80084f2:	250c      	movcc	r5, #12
 80084f4:	2d00      	cmp	r5, #0
 80084f6:	4606      	mov	r6, r0
 80084f8:	db01      	blt.n	80084fe <_malloc_r+0x1a>
 80084fa:	42a9      	cmp	r1, r5
 80084fc:	d903      	bls.n	8008506 <_malloc_r+0x22>
 80084fe:	230c      	movs	r3, #12
 8008500:	6033      	str	r3, [r6, #0]
 8008502:	2000      	movs	r0, #0
 8008504:	bd70      	pop	{r4, r5, r6, pc}
 8008506:	f000 f857 	bl	80085b8 <__malloc_lock>
 800850a:	4a21      	ldr	r2, [pc, #132]	; (8008590 <_malloc_r+0xac>)
 800850c:	6814      	ldr	r4, [r2, #0]
 800850e:	4621      	mov	r1, r4
 8008510:	b991      	cbnz	r1, 8008538 <_malloc_r+0x54>
 8008512:	4c20      	ldr	r4, [pc, #128]	; (8008594 <_malloc_r+0xb0>)
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b91b      	cbnz	r3, 8008520 <_malloc_r+0x3c>
 8008518:	4630      	mov	r0, r6
 800851a:	f000 f83d 	bl	8008598 <_sbrk_r>
 800851e:	6020      	str	r0, [r4, #0]
 8008520:	4629      	mov	r1, r5
 8008522:	4630      	mov	r0, r6
 8008524:	f000 f838 	bl	8008598 <_sbrk_r>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d124      	bne.n	8008576 <_malloc_r+0x92>
 800852c:	230c      	movs	r3, #12
 800852e:	6033      	str	r3, [r6, #0]
 8008530:	4630      	mov	r0, r6
 8008532:	f000 f842 	bl	80085ba <__malloc_unlock>
 8008536:	e7e4      	b.n	8008502 <_malloc_r+0x1e>
 8008538:	680b      	ldr	r3, [r1, #0]
 800853a:	1b5b      	subs	r3, r3, r5
 800853c:	d418      	bmi.n	8008570 <_malloc_r+0x8c>
 800853e:	2b0b      	cmp	r3, #11
 8008540:	d90f      	bls.n	8008562 <_malloc_r+0x7e>
 8008542:	600b      	str	r3, [r1, #0]
 8008544:	50cd      	str	r5, [r1, r3]
 8008546:	18cc      	adds	r4, r1, r3
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f836 	bl	80085ba <__malloc_unlock>
 800854e:	f104 000b 	add.w	r0, r4, #11
 8008552:	1d23      	adds	r3, r4, #4
 8008554:	f020 0007 	bic.w	r0, r0, #7
 8008558:	1ac3      	subs	r3, r0, r3
 800855a:	d0d3      	beq.n	8008504 <_malloc_r+0x20>
 800855c:	425a      	negs	r2, r3
 800855e:	50e2      	str	r2, [r4, r3]
 8008560:	e7d0      	b.n	8008504 <_malloc_r+0x20>
 8008562:	428c      	cmp	r4, r1
 8008564:	684b      	ldr	r3, [r1, #4]
 8008566:	bf16      	itet	ne
 8008568:	6063      	strne	r3, [r4, #4]
 800856a:	6013      	streq	r3, [r2, #0]
 800856c:	460c      	movne	r4, r1
 800856e:	e7eb      	b.n	8008548 <_malloc_r+0x64>
 8008570:	460c      	mov	r4, r1
 8008572:	6849      	ldr	r1, [r1, #4]
 8008574:	e7cc      	b.n	8008510 <_malloc_r+0x2c>
 8008576:	1cc4      	adds	r4, r0, #3
 8008578:	f024 0403 	bic.w	r4, r4, #3
 800857c:	42a0      	cmp	r0, r4
 800857e:	d005      	beq.n	800858c <_malloc_r+0xa8>
 8008580:	1a21      	subs	r1, r4, r0
 8008582:	4630      	mov	r0, r6
 8008584:	f000 f808 	bl	8008598 <_sbrk_r>
 8008588:	3001      	adds	r0, #1
 800858a:	d0cf      	beq.n	800852c <_malloc_r+0x48>
 800858c:	6025      	str	r5, [r4, #0]
 800858e:	e7db      	b.n	8008548 <_malloc_r+0x64>
 8008590:	20000218 	.word	0x20000218
 8008594:	2000021c 	.word	0x2000021c

08008598 <_sbrk_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4c06      	ldr	r4, [pc, #24]	; (80085b4 <_sbrk_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4605      	mov	r5, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	f7f8 f8c6 	bl	8000734 <_sbrk>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_sbrk_r+0x1a>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_sbrk_r+0x1a>
 80085b0:	602b      	str	r3, [r5, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	200012b4 	.word	0x200012b4

080085b8 <__malloc_lock>:
 80085b8:	4770      	bx	lr

080085ba <__malloc_unlock>:
 80085ba:	4770      	bx	lr

080085bc <_init>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr

080085c8 <_fini>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr
