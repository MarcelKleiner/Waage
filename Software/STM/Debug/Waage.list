
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e70  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008084  08008084  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008084  08008084  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008084  08008084  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008084  08008084  00018084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008088  08008088  00018088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800808c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  200001f4  08008280  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000126c  08008280  0002126c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bfcb  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003927  00000000  00000000  0003c1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001210  00000000  00000000  0003fb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  00040d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fb0d  00000000  00000000  00041d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012c91  00000000  00000000  0006187d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5e01  00000000  00000000  0007450e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a30f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b0  00000000  00000000  0011a38c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007fe4 	.word	0x08007fe4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	08007fe4 	.word	0x08007fe4

080001cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b08a      	sub	sp, #40	; 0x28
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001e2:	4b50      	ldr	r3, [pc, #320]	; (8000324 <MX_GPIO_Init+0x158>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a4f      	ldr	r2, [pc, #316]	; (8000324 <MX_GPIO_Init+0x158>)
 80001e8:	f043 0304 	orr.w	r3, r3, #4
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <MX_GPIO_Init+0x158>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0304 	and.w	r3, r3, #4
 80001f6:	613b      	str	r3, [r7, #16]
 80001f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fa:	4b4a      	ldr	r3, [pc, #296]	; (8000324 <MX_GPIO_Init+0x158>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a49      	ldr	r2, [pc, #292]	; (8000324 <MX_GPIO_Init+0x158>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b47      	ldr	r3, [pc, #284]	; (8000324 <MX_GPIO_Init+0x158>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	60fb      	str	r3, [r7, #12]
 8000210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000212:	4b44      	ldr	r3, [pc, #272]	; (8000324 <MX_GPIO_Init+0x158>)
 8000214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000216:	4a43      	ldr	r2, [pc, #268]	; (8000324 <MX_GPIO_Init+0x158>)
 8000218:	f043 0302 	orr.w	r3, r3, #2
 800021c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800021e:	4b41      	ldr	r3, [pc, #260]	; (8000324 <MX_GPIO_Init+0x158>)
 8000220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	60bb      	str	r3, [r7, #8]
 8000228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800022a:	4b3e      	ldr	r3, [pc, #248]	; (8000324 <MX_GPIO_Init+0x158>)
 800022c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022e:	4a3d      	ldr	r2, [pc, #244]	; (8000324 <MX_GPIO_Init+0x158>)
 8000230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000236:	4b3b      	ldr	r3, [pc, #236]	; (8000324 <MX_GPIO_Init+0x158>)
 8000238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000248:	4837      	ldr	r0, [pc, #220]	; (8000328 <MX_GPIO_Init+0x15c>)
 800024a:	f000 fdff 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCE_E_Pin|DB0_Pin|DB1_Pin|DB3_Pin, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	f248 0107 	movw	r1, #32775	; 0x8007
 8000254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000258:	f000 fdf8 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LC2_CS_Pin|LC1_CS_Pin, GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	21c0      	movs	r1, #192	; 0xc0
 8000260:	4832      	ldr	r0, [pc, #200]	; (800032c <MX_GPIO_Init+0x160>)
 8000262:	f000 fdf3 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8000266:	2200      	movs	r2, #0
 8000268:	2108      	movs	r1, #8
 800026a:	4831      	ldr	r0, [pc, #196]	; (8000330 <MX_GPIO_Init+0x164>)
 800026c:	f000 fdee 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000270:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2301      	movs	r3, #1
 8000278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000282:	f107 0314 	add.w	r3, r7, #20
 8000286:	4619      	mov	r1, r3
 8000288:	4827      	ldr	r0, [pc, #156]	; (8000328 <MX_GPIO_Init+0x15c>)
 800028a:	f000 fc6d 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LCE_E_Pin|DB0_Pin|DB1_Pin|DB3_Pin;
 800028e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000298:	2300      	movs	r3, #0
 800029a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0314 	add.w	r3, r7, #20
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002aa:	f000 fc5d 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|LED_BW_Pin|SW_PW_Pin|LED_PW_Pin
 80002ae:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80002b2:	617b      	str	r3, [r7, #20]
                          |SW_SUM_Pin|SW_TAR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4619      	mov	r1, r3
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002c6:	f000 fc4f 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|SW_TOTAL_Pin;
 80002ca:	2303      	movs	r3, #3
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4619      	mov	r1, r3
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_GPIO_Init+0x160>)
 80002de:	f000 fc43 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LC2_CS_Pin|LC1_CS_Pin;
 80002e2:	23c0      	movs	r3, #192	; 0xc0
 80002e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	2301      	movs	r3, #1
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	2300      	movs	r3, #0
 80002f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4619      	mov	r1, r3
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <MX_GPIO_Init+0x160>)
 80002fa:	f000 fc35 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 80002fe:	2308      	movs	r3, #8
 8000300:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 800030e:	f107 0314 	add.w	r3, r7, #20
 8000312:	4619      	mov	r1, r3
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <MX_GPIO_Init+0x164>)
 8000316:	f000 fc27 	bl	8000b68 <HAL_GPIO_Init>

}
 800031a:	bf00      	nop
 800031c:	3728      	adds	r7, #40	; 0x28
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000800 	.word	0x48000800
 800032c:	48000400 	.word	0x48000400
 8000330:	48001c00 	.word	0x48001c00

08000334 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_I2C1_Init+0x74>)
 800033a:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <MX_I2C1_Init+0x78>)
 800033c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800033e:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000340:	4a1b      	ldr	r2, [pc, #108]	; (80003b0 <MX_I2C1_Init+0x7c>)
 8000342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_Init+0x74>)
 800034c:	2201      	movs	r2, #1
 800034e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036e:	480e      	ldr	r0, [pc, #56]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000370:	f000 fd84 	bl	8000e7c <HAL_I2C_Init>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800037a:	f000 f8f4 	bl	8000566 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	2100      	movs	r1, #0
 8000380:	4809      	ldr	r0, [pc, #36]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000382:	f000 fe0a 	bl	8000f9a <HAL_I2CEx_ConfigAnalogFilter>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800038c:	f000 f8eb 	bl	8000566 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000390:	2100      	movs	r1, #0
 8000392:	4805      	ldr	r0, [pc, #20]	; (80003a8 <MX_I2C1_Init+0x74>)
 8000394:	f000 fe4c 	bl	8001030 <HAL_I2CEx_ConfigDigitalFilter>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800039e:	f000 f8e2 	bl	8000566 <Error_Handler>
  }

}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000220 	.word	0x20000220
 80003ac:	40005400 	.word	0x40005400
 80003b0:	10909cec 	.word	0x10909cec

080003b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b08a      	sub	sp, #40	; 0x28
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0314 	add.w	r3, r7, #20
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
 80003ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <HAL_I2C_MspInit+0x80>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d129      	bne.n	800042a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b18      	ldr	r3, [pc, #96]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003da:	4a17      	ldr	r2, [pc, #92]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <HAL_I2C_MspInit+0x84>)
 80003e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80003ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80003f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003f4:	2312      	movs	r3, #18
 80003f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003f8:	2301      	movs	r3, #1
 80003fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003fc:	2303      	movs	r3, #3
 80003fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000400:	2304      	movs	r3, #4
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	4619      	mov	r1, r3
 800040a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040e:	f000 fbab 	bl	8000b68 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800041c:	6593      	str	r3, [r2, #88]	; 0x58
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_I2C_MspInit+0x84>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800042a:	bf00      	nop
 800042c:	3728      	adds	r7, #40	; 0x28
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	40005400 	.word	0x40005400
 8000438:	40021000 	.word	0x40021000

0800043c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f000 fa0b 	bl	800085a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f000 f809 	bl	800045a <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000448:	f7ff fec0 	bl	80001cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800044c:	f7ff ff72 	bl	8000334 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000450:	f000 f890 	bl	8000574 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000454:	f006 ff4a 	bl	80072ec <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000458:	e7fe      	b.n	8000458 <main+0x1c>

0800045a <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b0a4      	sub	sp, #144	; 0x90
 800045e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000460:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000464:	2244      	movs	r2, #68	; 0x44
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f007 fcf9 	bl	8007e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800046e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
 800047c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2234      	movs	r2, #52	; 0x34
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f007 fceb 	bl	8007e60 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800048a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800048e:	f002 f9bf 	bl	8002810 <HAL_PWREx_ControlVoltageScaling>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	bf14      	ite	ne
 8000498:	2301      	movne	r3, #1
 800049a:	2300      	moveq	r3, #0
 800049c:	b2db      	uxtb	r3, r3
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 80004a2:	f000 f860 	bl	8000566 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80004a6:	2312      	movs	r3, #18
 80004a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004b4:	2301      	movs	r3, #1
 80004b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004b8:	2300      	movs	r3, #0
 80004ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80004bc:	23b0      	movs	r3, #176	; 0xb0
 80004be:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	2302      	movs	r3, #2
 80004c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c4:	2302      	movs	r3, #2
 80004c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80004ce:	230a      	movs	r3, #10
 80004d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004d4:	2302      	movs	r3, #2
 80004d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004da:	2302      	movs	r3, #2
 80004dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004e4:	4618      	mov	r0, r3
 80004e6:	f002 f9f9 	bl	80028dc <HAL_RCC_OscConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	bf14      	ite	ne
 80004f0:	2301      	movne	r3, #1
 80004f2:	2300      	moveq	r3, #0
 80004f4:	b2db      	uxtb	r3, r3
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80004fa:	f000 f834 	bl	8000566 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	230f      	movs	r3, #15
 8000500:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000502:	2303      	movs	r3, #3
 8000504:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000512:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000516:	2104      	movs	r1, #4
 8000518:	4618      	mov	r0, r3
 800051a:	f002 fe45 	bl	80031a8 <HAL_RCC_ClockConfig>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	bf14      	ite	ne
 8000524:	2301      	movne	r3, #1
 8000526:	2300      	moveq	r3, #0
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 800052e:	f000 f81a 	bl	8000566 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000532:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000536:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800053c:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fffb 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	bf14      	ite	ne
 8000550:	2301      	movne	r3, #1
 8000552:	2300      	moveq	r3, #0
 8000554:	b2db      	uxtb	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 800055a:	f000 f804 	bl	8000566 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3790      	adds	r7, #144	; 0x90
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_SPI1_Init+0x74>)
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <MX_SPI1_Init+0x78>)
 800057c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800057e:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <MX_SPI1_Init+0x74>)
 8000580:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000584:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_SPI1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_SPI1_Init+0x74>)
 800058e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000592:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <MX_SPI1_Init+0x74>)
 8000596:	2200      	movs	r2, #0
 8000598:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800059a:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <MX_SPI1_Init+0x74>)
 800059c:	2200      	movs	r2, #0
 800059e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005c2:	2207      	movs	r2, #7
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005c6:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005d2:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_SPI1_Init+0x74>)
 80005d4:	f003 f93a 	bl	800384c <HAL_SPI_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80005de:	f7ff ffc2 	bl	8000566 <Error_Handler>
  }

}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	2000026c 	.word	0x2000026c
 80005ec:	40013000 	.word	0x40013000

080005f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a17      	ldr	r2, [pc, #92]	; (800066c <HAL_SPI_MspInit+0x7c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d127      	bne.n	8000662 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HAL_SPI_MspInit+0x80>)
 8000614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000616:	4a16      	ldr	r2, [pc, #88]	; (8000670 <HAL_SPI_MspInit+0x80>)
 8000618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800061c:	6613      	str	r3, [r2, #96]	; 0x60
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <HAL_SPI_MspInit+0x80>)
 8000620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <HAL_SPI_MspInit+0x80>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	4a10      	ldr	r2, [pc, #64]	; (8000670 <HAL_SPI_MspInit+0x80>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <HAL_SPI_MspInit+0x80>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000642:	2338      	movs	r3, #56	; 0x38
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000652:	2305      	movs	r3, #5
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <HAL_SPI_MspInit+0x84>)
 800065e:	f000 fa83 	bl	8000b68 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000662:	bf00      	nop
 8000664:	3728      	adds	r7, #40	; 0x28
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40013000 	.word	0x40013000
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <HAL_MspInit+0x44>)
 8000680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000682:	4a0e      	ldr	r2, [pc, #56]	; (80006bc <HAL_MspInit+0x44>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6613      	str	r3, [r2, #96]	; 0x60
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <HAL_MspInit+0x44>)
 800068c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <HAL_MspInit+0x44>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	4a08      	ldr	r2, [pc, #32]	; (80006bc <HAL_MspInit+0x44>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a0:	6593      	str	r3, [r2, #88]	; 0x58
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_MspInit+0x44>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ae:	bf00      	nop
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f8f6 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <USB_IRQHandler+0x10>)
 8000722:	f000 fe05 	bl	8001330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000f74 	.word	0x20000f74

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	; (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f007 fb44 	bl	8007dec <__errno>
 8000764:	4602      	mov	r2, r0
 8000766:	230c      	movs	r3, #12
 8000768:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000a000 	.word	0x2000a000
 8000790:	00000400 	.word	0x00000400
 8000794:	20000210 	.word	0x20000210
 8000798:	20001270 	.word	0x20001270

0800079c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <SystemInit+0x64>)
 80007a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007a6:	4a16      	ldr	r2, [pc, #88]	; (8000800 <SystemInit+0x64>)
 80007a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <SystemInit+0x68>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a13      	ldr	r2, [pc, #76]	; (8000804 <SystemInit+0x68>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <SystemInit+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <SystemInit+0x68>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <SystemInit+0x68>)
 80007c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <SystemInit+0x68>)
 80007d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <SystemInit+0x68>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <SystemInit+0x68>)
 80007e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <SystemInit+0x68>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <SystemInit+0x64>)
 80007ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f2:	609a      	str	r2, [r3, #8]
#endif
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	40021000 	.word	0x40021000

08000808 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000808:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000840 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800080c:	f7ff ffc6 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000810:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000812:	e003      	b.n	800081c <LoopCopyDataInit>

08000814 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000816:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000818:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800081a:	3104      	adds	r1, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <LoopForever+0xa>)
	ldr	r3, =_edata
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000820:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000822:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000824:	d3f6      	bcc.n	8000814 <CopyDataInit>
	ldr	r2, =_sbss
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000828:	e002      	b.n	8000830 <LoopFillZerobss>

0800082a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800082a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800082c:	f842 3b04 	str.w	r3, [r2], #4

08000830 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <LoopForever+0x16>)
	cmp	r2, r3
 8000832:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000834:	d3f9      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000836:	f007 fadf 	bl	8007df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800083a:	f7ff fdff 	bl	800043c <main>

0800083e <LoopForever>:

LoopForever:
    b LoopForever
 800083e:	e7fe      	b.n	800083e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000840:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000844:	0800808c 	.word	0x0800808c
	ldr	r0, =_sdata
 8000848:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800084c:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 8000850:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 8000854:	2000126c 	.word	0x2000126c

08000858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000858:	e7fe      	b.n	8000858 <ADC1_2_IRQHandler>

0800085a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000860:	2300      	movs	r3, #0
 8000862:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f93d 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800086a:	2000      	movs	r0, #0
 800086c:	f000 f80e 	bl	800088c <HAL_InitTick>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d002      	beq.n	800087c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	e001      	b.n	8000880 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800087c:	f7ff fefc 	bl	8000678 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <HAL_InitTick+0x6c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d023      	beq.n	80008e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008a0:	4b16      	ldr	r3, [pc, #88]	; (80008fc <HAL_InitTick+0x70>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_InitTick+0x6c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f949 	bl	8000b4e <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d10f      	bne.n	80008e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d809      	bhi.n	80008dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f913 	bl	8000afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008d4:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <HAL_InitTick+0x74>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	e007      	b.n	80008ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80008dc:	2301      	movs	r3, #1
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	73fb      	strb	r3, [r7, #15]
 80008e6:	e001      	b.n	80008ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	200002d0 	.word	0x200002d0

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	200002d0 	.word	0x200002d0

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff3e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff31 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e14e      	b.n	8000e16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8140 	beq.w	8000e10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00b      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b12      	cmp	r3, #18
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	f003 0201 	and.w	r2, r3, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0xea>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	6939      	ldr	r1, [r7, #16]
 8000c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 809a 	beq.w	8000e10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	4b55      	ldr	r3, [pc, #340]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce0:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ce8:	4b52      	ldr	r3, [pc, #328]	; (8000e34 <HAL_GPIO_Init+0x2cc>)
 8000cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf4:	4a50      	ldr	r2, [pc, #320]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	220f      	movs	r2, #15
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4013      	ands	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d1e:	d013      	beq.n	8000d48 <HAL_GPIO_Init+0x1e0>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a46      	ldr	r2, [pc, #280]	; (8000e3c <HAL_GPIO_Init+0x2d4>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d00d      	beq.n	8000d44 <HAL_GPIO_Init+0x1dc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a45      	ldr	r2, [pc, #276]	; (8000e40 <HAL_GPIO_Init+0x2d8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d007      	beq.n	8000d40 <HAL_GPIO_Init+0x1d8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a44      	ldr	r2, [pc, #272]	; (8000e44 <HAL_GPIO_Init+0x2dc>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d101      	bne.n	8000d3c <HAL_GPIO_Init+0x1d4>
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e006      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	e004      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d40:	2302      	movs	r3, #2
 8000d42:	e002      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <HAL_GPIO_Init+0x1e2>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	f002 0203 	and.w	r2, r2, #3
 8000d50:	0092      	lsls	r2, r2, #2
 8000d52:	4093      	lsls	r3, r2
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5a:	4937      	ldr	r1, [pc, #220]	; (8000e38 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3302      	adds	r3, #2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d68:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d8c:	4a2e      	ldr	r2, [pc, #184]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000db6:	4a24      	ldr	r2, [pc, #144]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000de0:	4a19      	ldr	r2, [pc, #100]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e0a:	4a0f      	ldr	r2, [pc, #60]	; (8000e48 <HAL_GPIO_Init+0x2e0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f47f aea9 	bne.w	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e26:	bf00      	nop
 8000e28:	371c      	adds	r7, #28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010000 	.word	0x40010000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	48000800 	.word	0x48000800
 8000e44:	48000c00 	.word	0x48000c00
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e081      	b.n	8000f92 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fa86 	bl	80003b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2224      	movs	r2, #36	; 0x24
 8000eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ecc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000edc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d107      	bne.n	8000ef6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	e006      	b.n	8000f04 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f02:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d104      	bne.n	8000f16 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	ea42 0103 	orr.w	r1, r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	021a      	lsls	r2, r3, #8
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69d9      	ldr	r1, [r3, #28]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
 8000fa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b20      	cmp	r3, #32
 8000fae:	d138      	bne.n	8001022 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d101      	bne.n	8000fbe <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000fba:	2302      	movs	r3, #2
 8000fbc:	e032      	b.n	8001024 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2224      	movs	r2, #36	; 0x24
 8000fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 0201 	bic.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2220      	movs	r2, #32
 8001012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001022:	2302      	movs	r3, #2
  }
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b20      	cmp	r3, #32
 8001044:	d139      	bne.n	80010ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001050:	2302      	movs	r3, #2
 8001052:	e033      	b.n	80010bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001082:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 0201 	orr.w	r2, r2, #1
 80010a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2220      	movs	r2, #32
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80010ba:	2302      	movs	r3, #2
  }
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b08b      	sub	sp, #44	; 0x2c
 80010cc:	af06      	add	r7, sp, #24
 80010ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e104      	b.n	80012e4 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f006 faec 	bl	80076cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fc6e 	bl	80039e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	687e      	ldr	r6, [r7, #4]
 800110e:	466d      	mov	r5, sp
 8001110:	f106 0410 	add.w	r4, r6, #16
 8001114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	602b      	str	r3, [r5, #0]
 800111c:	1d33      	adds	r3, r6, #4
 800111e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f002 fc36 	bl	8003992 <USB_CoreInit>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0d5      	b.n	80012e4 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fc6a 	bl	8003a18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e04c      	b.n	80011e4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	440b      	add	r3, r1
 800115a:	3301      	adds	r3, #1
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	440b      	add	r3, r1
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	b298      	uxth	r0, r3
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	4613      	mov	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	440b      	add	r3, r1
 8001186:	3336      	adds	r3, #54	; 0x36
 8001188:	4602      	mov	r2, r0
 800118a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3303      	adds	r3, #3
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	4413      	add	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	440b      	add	r3, r1
 80011b0:	3338      	adds	r3, #56	; 0x38
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	333c      	adds	r3, #60	; 0x3c
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ca:	7bfa      	ldrb	r2, [r7, #15]
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	3340      	adds	r3, #64	; 0x40
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3ad      	bcc.n	800114a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
 80011f2:	e044      	b.n	800127e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	440b      	add	r3, r1
 8001202:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	6879      	ldr	r1, [r7, #4]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001220:	7bfa      	ldrb	r2, [r7, #15]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3b5      	bcc.n	80011f4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	687e      	ldr	r6, [r7, #4]
 8001290:	466d      	mov	r5, sp
 8001292:	f106 0410 	add.w	r4, r6, #16
 8001296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	602b      	str	r3, [r5, #0]
 800129e:	1d33      	adds	r3, r6, #4
 80012a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012a2:	6838      	ldr	r0, [r7, #0]
 80012a4:	f002 fbc5 	bl	8003a32 <USB_DevInit>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2202      	movs	r2, #2
 80012b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e014      	b.n	80012e4 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d102      	bne.n	80012d8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f001 fa63 	bl	800279e <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f004 fb7d 	bl	80059dc <USB_DevDisconnect>

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d101      	bne.n	8001302 <HAL_PCD_Start+0x16>
 80012fe:	2302      	movs	r3, #2
 8001300:	e012      	b.n	8001328 <HAL_PCD_Start+0x3c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fb50 	bl	80039b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f004 fb48 	bl	80059ae <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2200      	movs	r2, #0
 8001322:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f004 fb62 	bl	8005a06 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800134c:	d102      	bne.n	8001354 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fb5b 	bl	8001a0a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fb54 	bl	8005a06 <USB_ReadInterrupts>
 800135e:	4603      	mov	r3, r0
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d112      	bne.n	8001390 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001372:	b29a      	uxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800137c:	b292      	uxth	r2, r2
 800137e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f006 fa43 	bl	800780e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001388:	2100      	movs	r1, #0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f91e 	bl	80015cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f004 fb36 	bl	8005a06 <USB_ReadInterrupts>
 800139a:	4603      	mov	r3, r0
 800139c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013a4:	d10b      	bne.n	80013be <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013b8:	b292      	uxth	r2, r2
 80013ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f004 fb1f 	bl	8005a06 <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013d2:	d10b      	bne.n	80013ec <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013e6:	b292      	uxth	r2, r2
 80013e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fb08 	bl	8005a06 <USB_ReadInterrupts>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001400:	d133      	bne.n	800146a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800140a:	b29a      	uxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0204 	bic.w	r2, r2, #4
 8001414:	b292      	uxth	r2, r2
 8001416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0208 	bic.w	r2, r2, #8
 800142c:	b292      	uxth	r2, r2
 800142e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d107      	bne.n	800144c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001444:	2100      	movs	r1, #0
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f006 fc92 	bl	8007d70 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f006 fa17 	bl	8007880 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145a:	b29a      	uxth	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001464:	b292      	uxth	r2, r2
 8001466:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fac9 	bl	8005a06 <USB_ReadInterrupts>
 8001474:	4603      	mov	r3, r0
 8001476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800147a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800147e:	d126      	bne.n	80014ce <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001488:	b29a      	uxth	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 0208 	orr.w	r2, r2, #8
 8001492:	b292      	uxth	r2, r2
 8001494:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014aa:	b292      	uxth	r2, r2
 80014ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0204 	orr.w	r2, r2, #4
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f006 f9bf 	bl	800784c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fa97 	bl	8005a06 <USB_ReadInterrupts>
 80014d8:	4603      	mov	r3, r0
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	2b80      	cmp	r3, #128	; 0x80
 80014e0:	d13f      	bne.n	8001562 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f4:	b292      	uxth	r2, r2
 80014f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12b      	bne.n	800155c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800150c:	b29a      	uxth	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0204 	orr.w	r2, r2, #4
 8001516:	b292      	uxth	r2, r2
 8001518:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001524:	b29a      	uxth	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0208 	orr.w	r2, r2, #8
 800152e:	b292      	uxth	r2, r2
 8001530:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001544:	b29b      	uxth	r3, r3
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001552:	2101      	movs	r1, #1
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f006 fc0b 	bl	8007d70 <HAL_PCDEx_LPM_Callback>
 800155a:	e002      	b.n	8001562 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f006 f975 	bl	800784c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f004 fa4d 	bl	8005a06 <USB_ReadInterrupts>
 800156c:	4603      	mov	r3, r0
 800156e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001576:	d10e      	bne.n	8001596 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001580:	b29a      	uxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800158a:	b292      	uxth	r2, r2
 800158c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f006 f92e 	bl	80077f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f004 fa33 	bl	8005a06 <USB_ReadInterrupts>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015aa:	d10b      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015be:	b292      	uxth	r2, r2
 80015c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_PCD_SetAddress+0x1a>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e013      	b.n	800160e <HAL_PCD_SetAddress+0x42>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	78fa      	ldrb	r2, [r7, #3]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f004 f9c1 	bl	8005986 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	4608      	mov	r0, r1
 8001620:	4611      	mov	r1, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4603      	mov	r3, r0
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	460b      	mov	r3, r1
 800162a:	803b      	strh	r3, [r7, #0]
 800162c:	4613      	mov	r3, r2
 800162e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001638:	2b00      	cmp	r3, #0
 800163a:	da0e      	bge.n	800165a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800163c:	78fb      	ldrb	r3, [r7, #3]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	e00e      	b.n	8001678 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800165a:	78fb      	ldrb	r3, [r7, #3]
 800165c:	f003 0207 	and.w	r2, r3, #7
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	b2da      	uxtb	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001684:	883a      	ldrh	r2, [r7, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	78ba      	ldrb	r2, [r7, #2]
 800168e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	785b      	ldrb	r3, [r3, #1]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80016a2:	78bb      	ldrb	r3, [r7, #2]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d102      	bne.n	80016ae <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_PCD_EP_Open+0xa6>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e00e      	b.n	80016da <HAL_PCD_EP_Open+0xc4>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68f9      	ldr	r1, [r7, #12]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 f9d2 	bl	8003a74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80016d8:	7afb      	ldrb	r3, [r7, #11]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da0e      	bge.n	8001714 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2201      	movs	r2, #1
 8001710:	705a      	strb	r2, [r3, #1]
 8001712:	e00e      	b.n	8001732 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	f003 0207 	and.w	r2, r3, #7
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <HAL_PCD_EP_Close+0x6a>
 8001748:	2302      	movs	r3, #2
 800174a:	e00e      	b.n	800176a <HAL_PCD_EP_Close+0x88>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68f9      	ldr	r1, [r7, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f002 fcf8 	bl	8004150 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	460b      	mov	r3, r1
 8001780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001782:	7afb      	ldrb	r3, [r7, #11]
 8001784:	f003 0207 	and.w	r2, r3, #7
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2200      	movs	r2, #0
 80017aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	2200      	movs	r2, #0
 80017b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b2:	7afb      	ldrb	r3, [r7, #11]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017be:	7afb      	ldrb	r3, [r7, #11]
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d106      	bne.n	80017d6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6979      	ldr	r1, [r7, #20]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 feab 	bl	800452a <USB_EPStartXfer>
 80017d4:	e005      	b.n	80017e2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6979      	ldr	r1, [r7, #20]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fea4 	bl	800452a <USB_EPStartXfer>
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017f8:	78fb      	ldrb	r3, [r7, #3]
 80017fa:	f003 0207 	and.w	r2, r3, #7
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	460b      	mov	r3, r1
 800182a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800182c:	7afb      	ldrb	r3, [r7, #11]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2201      	movs	r2, #1
 8001866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001868:	7afb      	ldrb	r3, [r7, #11]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	b2da      	uxtb	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fe50 	bl	800452a <USB_EPStartXfer>
 800188a:	e005      	b.n	8001898 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fe49 	bl	800452a <USB_EPStartXfer>
  }

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	f003 0207 	and.w	r2, r3, #7
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d901      	bls.n	80018c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e04c      	b.n	800195a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da0e      	bge.n	80018e6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	705a      	strb	r2, [r3, #1]
 80018e4:	e00c      	b.n	8001900 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80018e6:	78fa      	ldrb	r2, [r7, #3]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2201      	movs	r2, #1
 8001904:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_PCD_EP_SetStall+0x7e>
 800191c:	2302      	movs	r3, #2
 800191e:	e01c      	b.n	800195a <HAL_PCD_EP_SetStall+0xb8>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	4618      	mov	r0, r3
 8001930:	f003 ff2a 	bl	8005788 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	2b00      	cmp	r3, #0
 800193c:	d108      	bne.n	8001950 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f004 f86b 	bl	8005a26 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d901      	bls.n	8001980 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e040      	b.n	8001a02 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001984:	2b00      	cmp	r3, #0
 8001986:	da0e      	bge.n	80019a6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2201      	movs	r2, #1
 80019a2:	705a      	strb	r2, [r3, #1]
 80019a4:	e00e      	b.n	80019c4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	f003 0207 	and.w	r2, r3, #7
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d101      	bne.n	80019e4 <HAL_PCD_EP_ClrStall+0x82>
 80019e0:	2302      	movs	r3, #2
 80019e2:	e00e      	b.n	8001a02 <HAL_PCD_EP_ClrStall+0xa0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 ff19 	bl	800582a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b08e      	sub	sp, #56	; 0x38
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a12:	e2d1      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001a2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8152 	bne.w	8001cd8 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d150      	bne.n	8001ae0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a4e:	81fb      	strh	r3, [r7, #14]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3328      	adds	r3, #40	; 0x28
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	4413      	add	r3, r2
 8001a82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	441a      	add	r2, r3
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 fe8c 	bl	80077be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8282 	beq.w	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f040 827d 	bne.w	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b292      	uxth	r2, r2
 8001ad2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ade:	e26b      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001af0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d032      	beq.n	8001b60 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f003 ffc3 	bl	8005ac0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b46:	4013      	ands	r3, r2
 8001b48:	823b      	strh	r3, [r7, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	8a3a      	ldrh	r2, [r7, #16]
 8001b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b54:	b292      	uxth	r2, r2
 8001b56:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f005 fe03 	bl	8007764 <HAL_PCD_SetupStageCallback>
 8001b5e:	e22b      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b60:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f280 8227 	bge.w	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001b76:	4013      	ands	r3, r2
 8001b78:	83bb      	strh	r3, [r7, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	8bba      	ldrh	r2, [r7, #28]
 8001b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b84:	b292      	uxth	r2, r2
 8001b86:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d019      	beq.n	8001bec <PCD_EP_ISR_Handler+0x1e2>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	6959      	ldr	r1, [r3, #20]
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	f003 ff75 	bl	8005ac0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	441a      	add	r2, r3
 8001be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001be4:	2100      	movs	r1, #0
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f005 fdce 	bl	8007788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d112      	bne.n	8001c3a <PCD_EP_ISR_Handler+0x230>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	801a      	strh	r2, [r3, #0]
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e02f      	b.n	8001c9a <PCD_EP_ISR_Handler+0x290>
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2b3e      	cmp	r3, #62	; 0x3e
 8001c40:	d813      	bhi.n	8001c6a <PCD_EP_ISR_Handler+0x260>
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <PCD_EP_ISR_Handler+0x252>
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	3301      	adds	r3, #1
 8001c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	029b      	lsls	r3, r3, #10
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	801a      	strh	r2, [r3, #0]
 8001c68:	e017      	b.n	8001c9a <PCD_EP_ISR_Handler+0x290>
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	095b      	lsrs	r3, r3, #5
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <PCD_EP_ISR_Handler+0x27a>
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c80:	3b01      	subs	r3, #1
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
 8001c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	029b      	lsls	r3, r3, #10
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001caa:	827b      	strh	r3, [r7, #18]
 8001cac:	8a7b      	ldrh	r3, [r7, #18]
 8001cae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001cb2:	827b      	strh	r3, [r7, #18]
 8001cb4:	8a7b      	ldrh	r3, [r7, #18]
 8001cb6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cba:	827b      	strh	r3, [r7, #18]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	8a7b      	ldrh	r3, [r7, #18]
 8001cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	8013      	strh	r3, [r2, #0]
 8001cd6:	e16f      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001cea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f280 80e4 	bge.w	8001ebc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d22:	b292      	uxth	r2, r2
 8001d24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001d26:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	7b1b      	ldrb	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d120      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d68:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001d6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8083 	beq.w	8001e78 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	6959      	ldr	r1, [r3, #20]
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	88da      	ldrh	r2, [r3, #6]
 8001d7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d80:	f003 fe9e 	bl	8005ac0 <USB_ReadPMA>
 8001d84:	e078      	b.n	8001e78 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	78db      	ldrb	r3, [r3, #3]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d108      	bne.n	8001da0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d90:	461a      	mov	r2, r3
 8001d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f91d 	bl	8001fd4 <HAL_PCD_EP_DB_Receive>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d9e:	e06b      	b.n	8001e78 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d01f      	beq.n	8001e3a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d028      	beq.n	8001e78 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	6959      	ldr	r1, [r3, #20]
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	891a      	ldrh	r2, [r3, #8]
 8001e32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e34:	f003 fe44 	bl	8005ac0 <USB_ReadPMA>
 8001e38:	e01e      	b.n	8001e78 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e5e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6c:	6959      	ldr	r1, [r3, #20]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	895a      	ldrh	r2, [r3, #10]
 8001e72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e74:	f003 fe24 	bl	8005ac0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e7e:	441a      	add	r2, r3
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	695a      	ldr	r2, [r3, #20]
 8001e88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e8a:	441a      	add	r2, r3
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <PCD_EP_ISR_Handler+0x498>
 8001e98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d206      	bcs.n	8001eb0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f005 fc6d 	bl	8007788 <HAL_PCD_DataOutStageCallback>
 8001eae:	e005      	b.n	8001ebc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f002 fb37 	bl	800452a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001ebc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d078      	beq.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ec6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef4:	843b      	strh	r3, [r7, #32]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	441a      	add	r2, r3
 8001f04:	8c3b      	ldrh	r3, [r7, #32]
 8001f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	78db      	ldrb	r3, [r3, #3]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d108      	bne.n	8001f2c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d144      	bne.n	8001fac <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001f22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d13f      	bne.n	8001fac <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f50:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	8bfb      	ldrh	r3, [r7, #30]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d906      	bls.n	8001f6a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	8bfb      	ldrh	r3, [r7, #30]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	619a      	str	r2, [r3, #24]
 8001f68:	e002      	b.n	8001f70 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d106      	bne.n	8001f86 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f005 fc1d 	bl	80077be <HAL_PCD_DataInStageCallback>
 8001f84:	e018      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	8bfb      	ldrh	r3, [r7, #30]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	69da      	ldr	r2, [r3, #28]
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	441a      	add	r2, r3
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 fac0 	bl	800452a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001faa:	e005      	b.n	8001fb8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001fac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f917 	bl	80021e6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f6ff ad25 	blt.w	8001a14 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3738      	adds	r7, #56	; 0x38
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d07c      	beq.n	80020e6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	4413      	add	r3, r2
 8002006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002010:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	8b7b      	ldrh	r3, [r7, #26]
 8002018:	429a      	cmp	r2, r3
 800201a:	d306      	bcc.n	800202a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	699a      	ldr	r2, [r3, #24]
 8002020:	8b7b      	ldrh	r3, [r7, #26]
 8002022:	1ad2      	subs	r2, r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	619a      	str	r2, [r3, #24]
 8002028:	e002      	b.n	8002030 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d123      	bne.n	8002080 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	b29b      	uxth	r3, r3
 800204a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	833b      	strh	r3, [r7, #24]
 8002054:	8b3b      	ldrh	r3, [r7, #24]
 8002056:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800205a:	833b      	strh	r3, [r7, #24]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	8b3b      	ldrh	r3, [r7, #24]
 800206c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207c:	b29b      	uxth	r3, r3
 800207e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01f      	beq.n	80020ca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a4:	82fb      	strh	r3, [r7, #22]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	441a      	add	r2, r3
 80020b4:	8afb      	ldrh	r3, [r7, #22]
 80020b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80020ca:	8b7b      	ldrh	r3, [r7, #26]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 8085 	beq.w	80021dc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	6959      	ldr	r1, [r3, #20]
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	891a      	ldrh	r2, [r3, #8]
 80020de:	8b7b      	ldrh	r3, [r7, #26]
 80020e0:	f003 fcee 	bl	8005ac0 <USB_ReadPMA>
 80020e4:	e07a      	b.n	80021dc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4413      	add	r3, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800210a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	8b7b      	ldrh	r3, [r7, #26]
 8002112:	429a      	cmp	r2, r3
 8002114:	d306      	bcc.n	8002124 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	699a      	ldr	r2, [r3, #24]
 800211a:	8b7b      	ldrh	r3, [r7, #26]
 800211c:	1ad2      	subs	r2, r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	619a      	str	r2, [r3, #24]
 8002122:	e002      	b.n	800212a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d123      	bne.n	800217a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214c:	83fb      	strh	r3, [r7, #30]
 800214e:	8bfb      	ldrh	r3, [r7, #30]
 8002150:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002154:	83fb      	strh	r3, [r7, #30]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	441a      	add	r2, r3
 8002164:	8bfb      	ldrh	r3, [r7, #30]
 8002166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800216a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800216e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002176:	b29b      	uxth	r3, r3
 8002178:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11f      	bne.n	80021c4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	83bb      	strh	r3, [r7, #28]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	441a      	add	r2, r3
 80021ae:	8bbb      	ldrh	r3, [r7, #28]
 80021b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021c4:	8b7b      	ldrh	r3, [r7, #26]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	6959      	ldr	r1, [r3, #20]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	895a      	ldrh	r2, [r3, #10]
 80021d6:	8b7b      	ldrh	r3, [r7, #26]
 80021d8:	f003 fc72 	bl	8005ac0 <USB_ReadPMA>
    }
  }

  return count;
 80021dc:	8b7b      	ldrh	r3, [r7, #26]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b092      	sub	sp, #72	; 0x48
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 8130 	beq.w	8002460 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002208:	b29b      	uxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4413      	add	r3, r2
 800221a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800221e:	881b      	ldrh	r3, [r3, #0]
 8002220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002224:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800222c:	429a      	cmp	r2, r3
 800222e:	d906      	bls.n	800223e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	699a      	ldr	r2, [r3, #24]
 8002234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002236:	1ad2      	subs	r2, r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	e002      	b.n	8002244 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d12c      	bne.n	80022a6 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f005 fab3 	bl	80077be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 822d 	beq.w	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b29b      	uxth	r3, r3
 8002276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800227a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227e:	827b      	strh	r3, [r7, #18]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	441a      	add	r2, r3
 800228e:	8a7b      	ldrh	r3, [r7, #18]
 8002290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800229c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	8013      	strh	r3, [r2, #0]
 80022a4:	e20b      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d01f      	beq.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	461a      	mov	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	441a      	add	r2, r3
 80022da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 81e1 	bne.w	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002302:	441a      	add	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	69da      	ldr	r2, [r3, #28]
 800230c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800230e:	441a      	add	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	6a1a      	ldr	r2, [r3, #32]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	429a      	cmp	r2, r3
 800231e:	d309      	bcc.n	8002334 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	6a1a      	ldr	r2, [r3, #32]
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800232c:	1ad2      	subs	r2, r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	621a      	str	r2, [r3, #32]
 8002332:	e014      	b.n	800235e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d106      	bne.n	800234a <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 800233c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002348:	e009      	b.n	800235e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	785b      	ldrb	r3, [r3, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d155      	bne.n	8002412 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002374:	b29b      	uxth	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	00da      	lsls	r2, r3, #3
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	4413      	add	r3, r2
 8002388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d112      	bne.n	80023ba <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800239e:	b29a      	uxth	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	801a      	strh	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	801a      	strh	r2, [r3, #0]
 80023b8:	e047      	b.n	800244a <HAL_PCD_EP_DB_Transmit+0x264>
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	2b3e      	cmp	r3, #62	; 0x3e
 80023be:	d811      	bhi.n	80023e4 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	085b      	lsrs	r3, r3, #1
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	3301      	adds	r3, #1
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	b29b      	uxth	r3, r3
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	b29a      	uxth	r2, r3
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	801a      	strh	r2, [r3, #0]
 80023e2:	e032      	b.n	800244a <HAL_PCD_EP_DB_Transmit+0x264>
 80023e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_EP_DB_Transmit+0x214>
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	3b01      	subs	r3, #1
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	b29b      	uxth	r3, r3
 8002402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800240a:	b29a      	uxth	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	e01b      	b.n	800244a <HAL_PCD_EP_DB_Transmit+0x264>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d117      	bne.n	800244a <HAL_PCD_EP_DB_Transmit+0x264>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	4413      	add	r3, r2
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	00da      	lsls	r2, r3, #3
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	4413      	add	r3, r2
 800243c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	b29a      	uxth	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	6959      	ldr	r1, [r3, #20]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	891a      	ldrh	r2, [r3, #8]
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	b29b      	uxth	r3, r3
 800245a:	f003 faf0 	bl	8005a3e <USB_WritePMA>
 800245e:	e12e      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	4413      	add	r3, r2
 800247a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002484:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800248c:	429a      	cmp	r2, r3
 800248e:	d306      	bcc.n	800249e <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	699a      	ldr	r2, [r3, #24]
 8002494:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002496:	1ad2      	subs	r2, r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	619a      	str	r2, [r3, #24]
 800249c:	e002      	b.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d12c      	bne.n	8002506 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4619      	mov	r1, r3
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f005 f983 	bl	80077be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 80fd 	bne.w	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	441a      	add	r2, r3
 80024ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80024f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002500:	b29b      	uxth	r3, r3
 8002502:	8013      	strh	r3, [r2, #0]
 8002504:	e0db      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11f      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	b29b      	uxth	r3, r3
 8002522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	441a      	add	r2, r3
 800253a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800253c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	b29b      	uxth	r3, r3
 800254e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002556:	2b01      	cmp	r3, #1
 8002558:	f040 80b1 	bne.w	80026be <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002562:	441a      	add	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800256e:	441a      	add	r2, r3
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	6a1a      	ldr	r2, [r3, #32]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	429a      	cmp	r2, r3
 800257e:	d309      	bcc.n	8002594 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6a1a      	ldr	r2, [r3, #32]
 800258a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258c:	1ad2      	subs	r2, r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	621a      	str	r2, [r3, #32]
 8002592:	e014      	b.n	80025be <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d106      	bne.n	80025aa <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 800259c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80025a8:	e009      	b.n	80025be <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	785b      	ldrb	r3, [r3, #1]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d155      	bne.n	8002678 <HAL_PCD_EP_DB_Transmit+0x492>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	647b      	str	r3, [r7, #68]	; 0x44
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025da:	b29b      	uxth	r3, r3
 80025dc:	461a      	mov	r2, r3
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	4413      	add	r3, r2
 80025e2:	647b      	str	r3, [r7, #68]	; 0x44
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	00da      	lsls	r2, r3, #3
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	4413      	add	r3, r2
 80025ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025f2:	643b      	str	r3, [r7, #64]	; 0x40
 80025f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d112      	bne.n	8002620 <HAL_PCD_EP_DB_Transmit+0x43a>
 80025fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002604:	b29a      	uxth	r2, r3
 8002606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002618:	b29a      	uxth	r2, r3
 800261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	e044      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002622:	2b3e      	cmp	r3, #62	; 0x3e
 8002624:	d811      	bhi.n	800264a <HAL_PCD_EP_DB_Transmit+0x464>
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	085b      	lsrs	r3, r3, #1
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800262c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_PCD_EP_DB_Transmit+0x456>
 8002636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002638:	3301      	adds	r3, #1
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263e:	b29b      	uxth	r3, r3
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	b29a      	uxth	r2, r3
 8002644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002646:	801a      	strh	r2, [r3, #0]
 8002648:	e02f      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x4c4>
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	095b      	lsrs	r3, r3, #5
 800264e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_PCD_EP_DB_Transmit+0x47a>
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800265c:	3b01      	subs	r3, #1
 800265e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002662:	b29b      	uxth	r3, r3
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	b29b      	uxth	r3, r3
 8002668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002670:	b29a      	uxth	r2, r3
 8002672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	e018      	b.n	80026aa <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d114      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x4c4>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002688:	b29b      	uxth	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800268e:	4413      	add	r3, r2
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	00da      	lsls	r2, r3, #3
 8002698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800269a:	4413      	add	r3, r2
 800269c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026a0:	633b      	str	r3, [r7, #48]	; 0x30
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	6959      	ldr	r1, [r3, #20]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	895a      	ldrh	r2, [r3, #10]
 80026b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f003 f9c0 	bl	8005a3e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	461a      	mov	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d8:	823b      	strh	r3, [r7, #16]
 80026da:	8a3b      	ldrh	r3, [r7, #16]
 80026dc:	f083 0310 	eor.w	r3, r3, #16
 80026e0:	823b      	strh	r3, [r7, #16]
 80026e2:	8a3b      	ldrh	r3, [r7, #16]
 80026e4:	f083 0320 	eor.w	r3, r3, #32
 80026e8:	823b      	strh	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	441a      	add	r2, r3
 80026f8:	8a3b      	ldrh	r3, [r7, #16]
 80026fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270a:	b29b      	uxth	r3, r3
 800270c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3748      	adds	r7, #72	; 0x48
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	4613      	mov	r3, r2
 8002728:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002736:	897b      	ldrh	r3, [r7, #10]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	1c5a      	adds	r2, r3, #1
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4413      	add	r3, r2
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e009      	b.n	8002762 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800274e:	897a      	ldrh	r2, [r7, #10]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4413      	add	r3, r2
 8002760:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002762:	893b      	ldrh	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2200      	movs	r2, #0
 800276c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	b29a      	uxth	r2, r3
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	80da      	strh	r2, [r3, #6]
 8002776:	e00b      	b.n	8002790 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2201      	movs	r2, #1
 800277c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	b29a      	uxth	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	b29a      	uxth	r2, r3
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <HAL_PWREx_GetVoltageRange+0x18>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40007000 	.word	0x40007000

08002810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281e:	d130      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d038      	beq.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002836:	4a1e      	ldr	r2, [pc, #120]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2232      	movs	r2, #50	; 0x32
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0c9b      	lsrs	r3, r3, #18
 8002850:	3301      	adds	r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002854:	e002      	b.n	800285c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b01      	subs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002868:	d102      	bne.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x60>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1f2      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002870:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d110      	bne.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e00f      	b.n	80028a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002882:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288e:	d007      	beq.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002898:	4a05      	ldr	r2, [pc, #20]	; (80028b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800289a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40007000 	.word	0x40007000
 80028b4:	20000000 	.word	0x20000000
 80028b8:	431bde83 	.word	0x431bde83

080028bc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a04      	ldr	r2, [pc, #16]	; (80028d8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80028c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ca:	6053      	str	r3, [r2, #4]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40007000 	.word	0x40007000

080028dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f000 bc56 	b.w	800319c <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f0:	4ba1      	ldr	r3, [pc, #644]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 030c 	and.w	r3, r3, #12
 80028f8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028fa:	4b9f      	ldr	r3, [pc, #636]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80e6 	beq.w	8002ade <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_RCC_OscConfig+0x4c>
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	f040 808d 	bne.w	8002a3a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b01      	cmp	r3, #1
 8002924:	f040 8089 	bne.w	8002a3a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002928:	4b93      	ldr	r3, [pc, #588]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_RCC_OscConfig+0x66>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f000 bc2d 	b.w	800319c <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002946:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_RCC_OscConfig+0x80>
 8002952:	4b89      	ldr	r3, [pc, #548]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800295a:	e005      	b.n	8002968 <HAL_RCC_OscConfig+0x8c>
 800295c:	4b86      	ldr	r3, [pc, #536]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 800295e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002968:	4293      	cmp	r3, r2
 800296a:	d224      	bcs.n	80029b6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fd85 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	f000 bc0d 	b.w	800319c <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002982:	4b7d      	ldr	r3, [pc, #500]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7c      	ldr	r2, [pc, #496]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b7a      	ldr	r3, [pc, #488]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	4977      	ldr	r1, [pc, #476]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029a0:	4b75      	ldr	r3, [pc, #468]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	021b      	lsls	r3, r3, #8
 80029ae:	4972      	ldr	r1, [pc, #456]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
 80029b4:	e025      	b.n	8002a02 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b6:	4b70      	ldr	r3, [pc, #448]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6f      	ldr	r2, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	496a      	ldr	r1, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d4:	4b68      	ldr	r3, [pc, #416]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4965      	ldr	r1, [pc, #404]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fd44 	bl	8003480 <RCC_SetFlashLatencyFromMSIRange>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e3cc      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a02:	f000 fcb3 	bl	800336c <HAL_RCC_GetSysClockFreq>
 8002a06:	4601      	mov	r1, r0
 8002a08:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	4a5a      	ldr	r2, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x2a0>)
 8002a14:	5cd3      	ldrb	r3, [r2, r3]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a1e:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_OscConfig+0x2a4>)
 8002a20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a22:	4b58      	ldr	r3, [pc, #352]	; (8002b84 <HAL_RCC_OscConfig+0x2a8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fd ff30 	bl	800088c <HAL_InitTick>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002a30:	7dfb      	ldrb	r3, [r7, #23]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d052      	beq.n	8002adc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	e3b0      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d032      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a42:	4b4d      	ldr	r3, [pc, #308]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4c      	ldr	r2, [pc, #304]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a4e:	f7fd ff6d 	bl	800092c <HAL_GetTick>
 8002a52:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a56:	f7fd ff69 	bl	800092c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e399      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a68:	4b43      	ldr	r3, [pc, #268]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a7a:	f043 0308 	orr.w	r3, r3, #8
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	493a      	ldr	r1, [pc, #232]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a92:	4b39      	ldr	r3, [pc, #228]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4935      	ldr	r1, [pc, #212]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	604b      	str	r3, [r1, #4]
 8002aa6:	e01a      	b.n	8002ade <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002aa8:	4b33      	ldr	r3, [pc, #204]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a32      	ldr	r2, [pc, #200]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ab4:	f7fd ff3a 	bl	800092c <HAL_GetTick>
 8002ab8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002abc:	f7fd ff36 	bl	800092c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e366      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ace:	4b2a      	ldr	r3, [pc, #168]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0x1e0>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d073      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_OscConfig+0x220>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d10e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d10b      	bne.n	8002b14 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d063      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x2f4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d15f      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e343      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d106      	bne.n	8002b2c <HAL_RCC_OscConfig+0x250>
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e01d      	b.n	8002b68 <HAL_RCC_OscConfig+0x28c>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b34:	d10c      	bne.n	8002b50 <HAL_RCC_OscConfig+0x274>
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	6013      	str	r3, [r2, #0]
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e00b      	b.n	8002b68 <HAL_RCC_OscConfig+0x28c>
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	6013      	str	r3, [r2, #0]
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <HAL_RCC_OscConfig+0x29c>)
 8002b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fd fedc 	bl	800092c <HAL_GetTick>
 8002b74:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b76:	e010      	b.n	8002b9a <HAL_RCC_OscConfig+0x2be>
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08008044 	.word	0x08008044
 8002b80:	20000000 	.word	0x20000000
 8002b84:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b88:	f7fd fed0 	bl	800092c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e300      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b9a:	4ba0      	ldr	r3, [pc, #640]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x2ac>
 8002ba6:	e014      	b.n	8002bd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7fd fec0 	bl	800092c <HAL_GetTick>
 8002bac:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb0:	f7fd febc 	bl	800092c <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	; 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e2ec      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bc2:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x2d4>
 8002bce:	e000      	b.n	8002bd2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d060      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x314>
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d119      	bne.n	8002c1e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d116      	bne.n	8002c1e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bf0:	4b8a      	ldr	r3, [pc, #552]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d005      	beq.n	8002c08 <HAL_RCC_OscConfig+0x32c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e2c9      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4981      	ldr	r1, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c1c:	e040      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d023      	beq.n	8002c6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c26:	4b7d      	ldr	r3, [pc, #500]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a7c      	ldr	r2, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fd fe7b 	bl	800092c <HAL_GetTick>
 8002c36:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c3a:	f7fd fe77 	bl	800092c <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e2a7      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c58:	4b70      	ldr	r3, [pc, #448]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	496d      	ldr	r1, [pc, #436]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e018      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6e:	4b6b      	ldr	r3, [pc, #428]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a6a      	ldr	r2, [pc, #424]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fd fe57 	bl	800092c <HAL_GetTick>
 8002c7e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c82:	f7fd fe53 	bl	800092c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e283      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c94:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d07f      	beq.n	8002dac <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d05f      	beq.n	8002d74 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cba:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d037      	beq.n	8002d3a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d006      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e25c      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01b      	beq.n	8002d24 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002cec:	4b4b      	ldr	r3, [pc, #300]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf2:	4a4a      	ldr	r2, [pc, #296]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cfc:	f7fd fe16 	bl	800092c <HAL_GetTick>
 8002d00:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fd fe12 	bl	800092c <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e242      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ef      	bne.n	8002d04 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002d24:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	f023 0210 	bic.w	r2, r3, #16
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	493a      	ldr	r1, [pc, #232]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d3a:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d4a:	f7fd fdef 	bl	800092c <HAL_GetTick>
 8002d4e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d52:	f7fd fdeb 	bl	800092c <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b11      	cmp	r3, #17
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e21b      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d64:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0ef      	beq.n	8002d52 <HAL_RCC_OscConfig+0x476>
 8002d72:	e01b      	b.n	8002dac <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fd fdd2 	bl	800092c <HAL_GetTick>
 8002d88:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fd fdce 	bl	800092c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b11      	cmp	r3, #17
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1fe      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ef      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80c1 	beq.w	8002f3c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10e      	bne.n	8002dea <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd0:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_RCC_OscConfig+0x540>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_OscConfig+0x544>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_RCC_OscConfig+0x544>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a09      	ldr	r2, [pc, #36]	; (8002e20 <HAL_RCC_OscConfig+0x544>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7fd fd93 	bl	800092c <HAL_GetTick>
 8002e06:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e08:	e00c      	b.n	8002e24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7fd fd8f 	bl	800092c <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d905      	bls.n	8002e24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1bf      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
 8002e1c:	40021000 	.word	0x40021000
 8002e20:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e24:	4bb1      	ldr	r3, [pc, #708]	; (80030ec <HAL_RCC_OscConfig+0x810>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ec      	beq.n	8002e0a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02c      	beq.n	8002e96 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002e3c:	4bac      	ldr	r3, [pc, #688]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	49a8      	ldr	r1, [pc, #672]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d010      	beq.n	8002e84 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e62:	4ba3      	ldr	r3, [pc, #652]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e68:	4aa1      	ldr	r2, [pc, #644]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e72:	4b9f      	ldr	r3, [pc, #636]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e78:	4a9d      	ldr	r2, [pc, #628]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e82:	e018      	b.n	8002eb6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e84:	4b9a      	ldr	r3, [pc, #616]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	4a99      	ldr	r2, [pc, #612]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e94:	e00f      	b.n	8002eb6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e96:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	4a94      	ldr	r2, [pc, #592]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ea6:	4b92      	ldr	r3, [pc, #584]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	4a90      	ldr	r2, [pc, #576]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002eae:	f023 0304 	bic.w	r3, r3, #4
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d016      	beq.n	8002eec <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fd fd35 	bl	800092c <HAL_GetTick>
 8002ec2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fd fd31 	bl	800092c <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e15f      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002edc:	4b84      	ldr	r3, [pc, #528]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0ed      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x5ea>
 8002eea:	e01d      	b.n	8002f28 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7fd fd1e 	bl	800092c <HAL_GetTick>
 8002ef0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef4:	f7fd fd1a 	bl	800092c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e148      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f0a:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ed      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002f18:	4b75      	ldr	r3, [pc, #468]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1e:	4a74      	ldr	r2, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f30:	4b6f      	ldr	r3, [pc, #444]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	4a6e      	ldr	r2, [pc, #440]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f50:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f56:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fd fce4 	bl	800092c <HAL_GetTick>
 8002f64:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f68:	f7fd fce0 	bl	800092c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e110      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCC_OscConfig+0x68c>
 8002f88:	e01b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f90:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fd fcc7 	bl	800092c <HAL_GetTick>
 8002f9e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa2:	f7fd fcc3 	bl	800092c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0f3      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb4:	4b4e      	ldr	r3, [pc, #312]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80e7 	beq.w	800319a <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f040 80b7 	bne.w	8003144 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002fd6:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f003 0203 	and.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d124      	bne.n	8003034 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d11b      	bne.n	8003034 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d113      	bne.n	8003034 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	085b      	lsrs	r3, r3, #1
 8003018:	3b01      	subs	r3, #1
 800301a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d109      	bne.n	8003034 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	085b      	lsrs	r3, r3, #1
 800302c:	3b01      	subs	r3, #1
 800302e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003030:	429a      	cmp	r2, r3
 8003032:	d061      	beq.n	80030f8 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d056      	beq.n	80030e8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8003040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003044:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003046:	f7fd fc71 	bl	800092c <HAL_GetTick>
 800304a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304e:	f7fd fc6d 	bl	800092c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e09d      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f0      	bne.n	800304e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800306c:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	4b20      	ldr	r3, [pc, #128]	; (80030f4 <HAL_RCC_OscConfig+0x818>)
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800307c:	3a01      	subs	r2, #1
 800307e:	0112      	lsls	r2, r2, #4
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003086:	0212      	lsls	r2, r2, #8
 8003088:	4311      	orrs	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	3a01      	subs	r2, #1
 8003092:	0552      	lsls	r2, r2, #21
 8003094:	4311      	orrs	r1, r2
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800309a:	0852      	lsrs	r2, r2, #1
 800309c:	3a01      	subs	r2, #1
 800309e:	0652      	lsls	r2, r2, #25
 80030a0:	430a      	orrs	r2, r1
 80030a2:	4913      	ldr	r1, [pc, #76]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4a0d      	ldr	r2, [pc, #52]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c0:	f7fd fc34 	bl	800092c <HAL_GetTick>
 80030c4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd fc30 	bl	800092c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e060      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x814>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030e6:	e058      	b.n	800319a <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e057      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
 80030ec:	40007000 	.word	0x40007000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f8:	4b2a      	ldr	r3, [pc, #168]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d14a      	bne.n	800319a <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 800310a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a23      	ldr	r2, [pc, #140]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800311c:	f7fd fc06 	bl	800092c <HAL_GetTick>
 8003120:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003124:	f7fd fc02 	bl	800092c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e032      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x848>
 8003142:	e02a      	b.n	800319a <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d025      	beq.n	8003196 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003154:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003156:	4b13      	ldr	r3, [pc, #76]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 800315c:	f023 0303 	bic.w	r3, r3, #3
 8003160:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 8003168:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800316c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fd fbdd 	bl	800092c <HAL_GetTick>
 8003172:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fd fbd9 	bl	800092c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e009      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_RCC_OscConfig+0x8c8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f0      	bne.n	8003176 <HAL_RCC_OscConfig+0x89a>
 8003194:	e001      	b.n	800319a <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	; 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0c8      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b66      	ldr	r3, [pc, #408]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4961      	ldr	r1, [pc, #388]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b5f      	ldr	r3, [pc, #380]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b0      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04c      	beq.n	8003292 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	4b56      	ldr	r3, [pc, #344]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d121      	bne.n	8003250 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e09e      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d107      	bne.n	8003228 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003218:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d115      	bne.n	8003250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e092      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003230:	4b4a      	ldr	r3, [pc, #296]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e086      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e07e      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003250:	4b42      	ldr	r3, [pc, #264]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f023 0203 	bic.w	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	493f      	ldr	r1, [pc, #252]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003262:	f7fd fb63 	bl	800092c <HAL_GetTick>
 8003266:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003268:	e00a      	b.n	8003280 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326a:	f7fd fb5f 	bl	800092c <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e066      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003280:	4b36      	ldr	r3, [pc, #216]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 020c 	and.w	r2, r3, #12
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	429a      	cmp	r2, r3
 8003290:	d1eb      	bne.n	800326a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d008      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	492c      	ldr	r1, [pc, #176]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d210      	bcs.n	80032e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b26      	ldr	r3, [pc, #152]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	4924      	ldr	r1, [pc, #144]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_ClockConfig+0x1b0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d001      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e036      	b.n	800334e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032ec:	4b1b      	ldr	r3, [pc, #108]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4918      	ldr	r1, [pc, #96]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d009      	beq.n	800331e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330a:	4b14      	ldr	r3, [pc, #80]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4910      	ldr	r1, [pc, #64]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331e:	f000 f825 	bl	800336c <HAL_RCC_GetSysClockFreq>
 8003322:	4601      	mov	r1, r0
 8003324:	4b0d      	ldr	r3, [pc, #52]	; (800335c <HAL_RCC_ClockConfig+0x1b4>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_RCC_ClockConfig+0x1b8>)
 8003330:	5cd3      	ldrb	r3, [r2, r3]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa21 f303 	lsr.w	r3, r1, r3
 800333a:	4a0a      	ldr	r2, [pc, #40]	; (8003364 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800333e:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd faa2 	bl	800088c <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	72fb      	strb	r3, [r7, #11]

  return status;
 800334c:	7afb      	ldrb	r3, [r7, #11]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40022000 	.word	0x40022000
 800335c:	40021000 	.word	0x40021000
 8003360:	08008044 	.word	0x08008044
 8003364:	20000000 	.word	0x20000000
 8003368:	20000004 	.word	0x20000004

0800336c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b089      	sub	sp, #36	; 0x24
 8003370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003384:	4b3a      	ldr	r3, [pc, #232]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0303 	and.w	r3, r3, #3
 800338c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d005      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b0c      	cmp	r3, #12
 8003398:	d121      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d11e      	bne.n	80033de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033a0:	4b33      	ldr	r3, [pc, #204]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033ac:	4b30      	ldr	r3, [pc, #192]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	61fb      	str	r3, [r7, #28]
 80033ba:	e005      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033c8:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d102      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033e4:	4b24      	ldr	r3, [pc, #144]	; (8003478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	e004      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d101      	bne.n	80033f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_RCC_GetSysClockFreq+0x110>)
 80033f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d133      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d002      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0xa4>
 800340a:	2b03      	cmp	r3, #3
 800340c:	d003      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0xaa>
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003412:	617b      	str	r3, [r7, #20]
      break;
 8003414:	e005      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003416:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x110>)
 8003418:	617b      	str	r3, [r7, #20]
      break;
 800341a:	e002      	b.n	8003422 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	617b      	str	r3, [r7, #20]
      break;
 8003420:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	3301      	adds	r3, #1
 800342e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	fb02 f203 	mul.w	r2, r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_GetSysClockFreq+0x104>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0e5b      	lsrs	r3, r3, #25
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003462:	69bb      	ldr	r3, [r7, #24]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3724      	adds	r7, #36	; 0x24
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	40021000 	.word	0x40021000
 8003474:	08008054 	.word	0x08008054
 8003478:	00f42400 	.word	0x00f42400
 800347c:	007a1200 	.word	0x007a1200

08003480 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003498:	f7ff f9ac 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
 800349c:	6178      	str	r0, [r7, #20]
 800349e:	e014      	b.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	4a24      	ldr	r2, [pc, #144]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6593      	str	r3, [r2, #88]	; 0x58
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034b8:	f7ff f99c 	bl	80027f4 <HAL_PWREx_GetVoltageRange>
 80034bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d10b      	bne.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d919      	bls.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2ba0      	cmp	r3, #160	; 0xa0
 80034dc:	d902      	bls.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034de:	2302      	movs	r3, #2
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e013      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034e4:	2301      	movs	r3, #1
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e010      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d902      	bls.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034f0:	2303      	movs	r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e00a      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d102      	bne.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034fc:	2302      	movs	r3, #2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	e004      	b.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b70      	cmp	r3, #112	; 0x70
 8003506:	d101      	bne.n	800350c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003508:	2301      	movs	r3, #1
 800350a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f023 0207 	bic.w	r2, r3, #7
 8003514:	4909      	ldr	r1, [pc, #36]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800351c:	4b07      	ldr	r3, [pc, #28]	; (800353c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	429a      	cmp	r2, r3
 8003528:	d001      	beq.n	800352e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000
 800353c:	40022000 	.word	0x40022000

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003548:	2300      	movs	r3, #0
 800354a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800354c:	2300      	movs	r3, #0
 800354e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 809e 	beq.w	800369a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355e:	2300      	movs	r3, #0
 8003560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003562:	4b46      	ldr	r3, [pc, #280]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003572:	2300      	movs	r3, #0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00d      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	4a3f      	ldr	r2, [pc, #252]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
 8003584:	4b3d      	ldr	r3, [pc, #244]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003594:	4b3a      	ldr	r3, [pc, #232]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a39      	ldr	r2, [pc, #228]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035a0:	f7fd f9c4 	bl	800092c <HAL_GetTick>
 80035a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035a6:	e009      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a8:	f7fd f9c0 	bl	800092c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d902      	bls.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ba:	e005      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0ef      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035c8:	7cfb      	ldrb	r3, [r7, #19]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d15a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035ce:	4b2b      	ldr	r3, [pc, #172]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d01e      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d019      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	4a1f      	ldr	r2, [pc, #124]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003616:	4a19      	ldr	r2, [pc, #100]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d016      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd f980 	bl	800092c <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362e:	e00b      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fd f97c 	bl	800092c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d902      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	74fb      	strb	r3, [r7, #19]
            break;
 8003646:	e006      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ec      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003656:	7cfb      	ldrb	r3, [r7, #19]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4904      	ldr	r1, [pc, #16]	; (800367c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003672:	e009      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
 8003678:	e006      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000
 8003680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003688:	7c7b      	ldrb	r3, [r7, #17]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d105      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	4a6d      	ldr	r2, [pc, #436]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036a6:	4b68      	ldr	r3, [pc, #416]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ac:	f023 0203 	bic.w	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4964      	ldr	r1, [pc, #400]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036c8:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	f023 020c 	bic.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	495c      	ldr	r1, [pc, #368]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0304 	and.w	r3, r3, #4
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036ea:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4953      	ldr	r1, [pc, #332]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370c:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	494b      	ldr	r1, [pc, #300]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372e:	4b46      	ldr	r3, [pc, #280]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	4942      	ldr	r1, [pc, #264]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003750:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375e:	493a      	ldr	r1, [pc, #232]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4931      	ldr	r1, [pc, #196]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003794:	4b2c      	ldr	r3, [pc, #176]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	4929      	ldr	r1, [pc, #164]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	4920      	ldr	r1, [pc, #128]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d015      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	4918      	ldr	r1, [pc, #96]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037f6:	d105      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003802:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d015      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	490a      	ldr	r1, [pc, #40]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003820:	4313      	orrs	r3, r2
 8003822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800383c:	7cbb      	ldrb	r3, [r7, #18]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40021000 	.word	0x40021000

0800384c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e095      	b.n	800398a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d108      	bne.n	8003878 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386e:	d009      	beq.n	8003884 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]
 8003876:	e005      	b.n	8003884 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fc fea6 	bl	80005f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038c4:	d902      	bls.n	80038cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	e002      	b.n	80038d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80038da:	d007      	beq.n	80038ec <HAL_SPI_Init+0xa0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e4:	d002      	beq.n	80038ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392e:	ea42 0103 	orr.w	r1, r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	f003 0204 	and.w	r2, r3, #4
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003968:	ea42 0103 	orr.w	r1, r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003992:	b084      	sub	sp, #16
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	f107 0014 	add.w	r0, r7, #20
 80039a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	b004      	add	sp, #16
 80039b2:	4770      	bx	lr

080039b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80039c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80039ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	4013      	ands	r3, r2
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a32:	b084      	sub	sp, #16
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	f107 0014 	add.w	r0, r7, #20
 8003a40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr

08003a74 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b09b      	sub	sp, #108	; 0x6c
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	78db      	ldrb	r3, [r3, #3]
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d81f      	bhi.n	8003ae6 <USB_ActivateEndpoint+0x72>
 8003aa6:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <USB_ActivateEndpoint+0x38>)
 8003aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003aef 	.word	0x08003aef
 8003ab8:	08003acb 	.word	0x08003acb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003abc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ac0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ac8:	e012      	b.n	8003af0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003aca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ace:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003ad2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ad6:	e00b      	b.n	8003af0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ad8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ae0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003ae4:	e004      	b.n	8003af0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003aec:	e000      	b.n	8003af0 <USB_ActivateEndpoint+0x7c>
      break;
 8003aee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	441a      	add	r2, r3
 8003afa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b21b      	sxth	r3, r3
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2a:	b21a      	sxth	r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	b21b      	sxth	r3, r3
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b21b      	sxth	r3, r3
 8003b36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	441a      	add	r2, r3
 8003b44:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003b48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	7b1b      	ldrb	r3, [r3, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 8149 	bne.w	8003df8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8084 	beq.w	8003c78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	4413      	add	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	00da      	lsls	r2, r3, #3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b92:	613b      	str	r3, [r7, #16]
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	88db      	ldrh	r3, [r3, #6]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	81fb      	strh	r3, [r7, #14]
 8003bb2:	89fb      	ldrh	r3, [r7, #14]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01b      	beq.n	8003bf4 <USB_ActivateEndpoint+0x180>
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd2:	81bb      	strh	r3, [r7, #12]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	441a      	add	r2, r3
 8003bde:	89bb      	ldrh	r3, [r7, #12]
 8003be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	78db      	ldrb	r3, [r3, #3]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d020      	beq.n	8003c3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c12:	813b      	strh	r3, [r7, #8]
 8003c14:	893b      	ldrh	r3, [r7, #8]
 8003c16:	f083 0320 	eor.w	r3, r3, #32
 8003c1a:	813b      	strh	r3, [r7, #8]
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	893b      	ldrh	r3, [r7, #8]
 8003c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	8013      	strh	r3, [r2, #0]
 8003c3c:	e27f      	b.n	800413e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c54:	817b      	strh	r3, [r7, #10]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	897b      	ldrh	r3, [r7, #10]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e262      	b.n	800413e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	461a      	mov	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	4413      	add	r3, r2
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	00da      	lsls	r2, r3, #3
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	4413      	add	r3, r2
 8003c96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	88db      	ldrh	r3, [r3, #6]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	4413      	add	r3, r2
 8003cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	00da      	lsls	r2, r3, #3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	4413      	add	r3, r2
 8003cca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d112      	bne.n	8003cfe <USB_ActivateEndpoint+0x28a>
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	801a      	strh	r2, [r3, #0]
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	e02f      	b.n	8003d5e <USB_ActivateEndpoint+0x2ea>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b3e      	cmp	r3, #62	; 0x3e
 8003d04:	d813      	bhi.n	8003d2e <USB_ActivateEndpoint+0x2ba>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	085b      	lsrs	r3, r3, #1
 8003d0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d002      	beq.n	8003d20 <USB_ActivateEndpoint+0x2ac>
 8003d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8003d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	e017      	b.n	8003d5e <USB_ActivateEndpoint+0x2ea>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	663b      	str	r3, [r7, #96]	; 0x60
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <USB_ActivateEndpoint+0x2d4>
 8003d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d44:	3b01      	subs	r3, #1
 8003d46:	663b      	str	r3, [r7, #96]	; 0x60
 8003d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	029b      	lsls	r3, r3, #10
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	83fb      	strh	r3, [r7, #30]
 8003d6c:	8bfb      	ldrh	r3, [r7, #30]
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01b      	beq.n	8003dae <USB_ActivateEndpoint+0x33a>
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8c:	83bb      	strh	r3, [r7, #28]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	441a      	add	r2, r3
 8003d98:	8bbb      	ldrh	r3, [r7, #28]
 8003d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc4:	837b      	strh	r3, [r7, #26]
 8003dc6:	8b7b      	ldrh	r3, [r7, #26]
 8003dc8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dcc:	837b      	strh	r3, [r7, #26]
 8003dce:	8b7b      	ldrh	r3, [r7, #26]
 8003dd0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dd4:	837b      	strh	r3, [r7, #26]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	441a      	add	r2, r3
 8003de0:	8b7b      	ldrh	r3, [r7, #26]
 8003de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	8013      	strh	r3, [r2, #0]
 8003df6:	e1a2      	b.n	800413e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e28:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e44:	4413      	add	r3, r2
 8003e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	00da      	lsls	r2, r3, #3
 8003e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e56:	657b      	str	r3, [r7, #84]	; 0x54
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	891b      	ldrh	r3, [r3, #8]
 8003e5c:	085b      	lsrs	r3, r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e78:	4413      	add	r3, r2
 8003e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	00da      	lsls	r2, r3, #3
 8003e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e84:	4413      	add	r3, r2
 8003e86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	895b      	ldrh	r3, [r3, #10]
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	785b      	ldrb	r3, [r3, #1]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 8091 	bne.w	8003fc8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003eb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01b      	beq.n	8003ef6 <USB_ActivateEndpoint+0x482>
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	441a      	add	r2, r3
 8003ee0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	873b      	strh	r3, [r7, #56]	; 0x38
 8003f04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01b      	beq.n	8003f46 <USB_ActivateEndpoint+0x4d2>
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003f64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003f6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	441a      	add	r2, r3
 8003f78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fa4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]
 8003fc6:	e0ba      	b.n	800413e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003fd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01d      	beq.n	8004020 <USB_ActivateEndpoint+0x5ac>
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	441a      	add	r2, r3
 8004008:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800400c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800401c:	b29b      	uxth	r3, r3
 800401e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01d      	beq.n	8004078 <USB_ActivateEndpoint+0x604>
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004074:	b29b      	uxth	r3, r3
 8004076:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	78db      	ldrb	r3, [r3, #3]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d024      	beq.n	80040ca <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800409a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800409e:	f083 0320 	eor.w	r3, r3, #32
 80040a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80040b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	8013      	strh	r3, [r2, #0]
 80040c8:	e01d      	b.n	8004106 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	441a      	add	r2, r3
 80040ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80040f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29b      	uxth	r3, r3
 8004114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800412a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413a:	b29b      	uxth	r3, r3
 800413c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800413e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004142:	4618      	mov	r0, r3
 8004144:	376c      	adds	r7, #108	; 0x6c
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop

08004150 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004150:	b480      	push	{r7}
 8004152:	b08d      	sub	sp, #52	; 0x34
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	7b1b      	ldrb	r3, [r3, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 808e 	bne.w	8004280 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d044      	beq.n	80041f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	81bb      	strh	r3, [r7, #12]
 800417a:	89bb      	ldrh	r3, [r7, #12]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <USB_DeactivateEndpoint+0x6c>
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	b29b      	uxth	r3, r3
 8004192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	817b      	strh	r3, [r7, #10]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	897b      	ldrh	r3, [r7, #10]
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d2:	813b      	strh	r3, [r7, #8]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	441a      	add	r2, r3
 80041de:	893b      	ldrh	r3, [r7, #8]
 80041e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8013      	strh	r3, [r2, #0]
 80041f4:	e192      	b.n	800451c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	827b      	strh	r3, [r7, #18]
 8004204:	8a7b      	ldrh	r3, [r7, #18]
 8004206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01b      	beq.n	8004246 <USB_DeactivateEndpoint+0xf6>
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	823b      	strh	r3, [r7, #16]
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8a3b      	ldrh	r3, [r7, #16]
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425c:	81fb      	strh	r3, [r7, #14]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	89fb      	ldrh	r3, [r7, #14]
 800426a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800426e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	b29b      	uxth	r3, r3
 800427c:	8013      	strh	r3, [r2, #0]
 800427e:	e14d      	b.n	800451c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f040 80a5 	bne.w	80043d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	843b      	strh	r3, [r7, #32]
 8004298:	8c3b      	ldrh	r3, [r7, #32]
 800429a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01b      	beq.n	80042da <USB_DeactivateEndpoint+0x18a>
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b8:	83fb      	strh	r3, [r7, #30]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	8bfb      	ldrh	r3, [r7, #30]
 80042c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	83bb      	strh	r3, [r7, #28]
 80042e8:	8bbb      	ldrh	r3, [r7, #28]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d01b      	beq.n	800432a <USB_DeactivateEndpoint+0x1da>
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	837b      	strh	r3, [r7, #26]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	441a      	add	r2, r3
 8004314:	8b7b      	ldrh	r3, [r7, #26]
 8004316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004340:	833b      	strh	r3, [r7, #24]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	441a      	add	r2, r3
 800434c:	8b3b      	ldrh	r3, [r7, #24]
 800434e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800435a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	881b      	ldrh	r3, [r3, #0]
 800436e:	b29b      	uxth	r3, r3
 8004370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004378:	82fb      	strh	r3, [r7, #22]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	8afb      	ldrh	r3, [r7, #22]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043b0:	82bb      	strh	r3, [r7, #20]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	441a      	add	r2, r3
 80043bc:	8abb      	ldrh	r3, [r7, #20]
 80043be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8013      	strh	r3, [r2, #0]
 80043d2:	e0a3      	b.n	800451c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01b      	beq.n	8004424 <USB_DeactivateEndpoint+0x2d4>
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	441a      	add	r2, r3
 800440e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800441c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004420:	b29b      	uxth	r3, r3
 8004422:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004432:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01b      	beq.n	8004474 <USB_DeactivateEndpoint+0x324>
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29b      	uxth	r3, r3
 800444a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004452:	853b      	strh	r3, [r7, #40]	; 0x28
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	441a      	add	r2, r3
 800445e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800446c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004470:	b29b      	uxth	r3, r3
 8004472:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4413      	add	r3, r2
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800449c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	441a      	add	r2, r3
 80044ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3734      	adds	r7, #52	; 0x34
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b0c4      	sub	sp, #272	; 0x110
 800452e:	af00      	add	r7, sp, #0
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	6018      	str	r0, [r3, #0]
 8004534:	463b      	mov	r3, r7
 8004536:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004538:	463b      	mov	r3, r7
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	785b      	ldrb	r3, [r3, #1]
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 8566 	bne.w	8005010 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004544:	463b      	mov	r3, r7
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	463b      	mov	r3, r7
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d905      	bls.n	8004560 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8004554:	463b      	mov	r3, r7
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800455e:	e004      	b.n	800456a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004560:	463b      	mov	r3, r7
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	7b1b      	ldrb	r3, [r3, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d12c      	bne.n	80045ce <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004574:	463b      	mov	r3, r7
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6959      	ldr	r1, [r3, #20]
 800457a:	463b      	mov	r3, r7
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	88da      	ldrh	r2, [r3, #6]
 8004580:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004584:	b29b      	uxth	r3, r3
 8004586:	1d38      	adds	r0, r7, #4
 8004588:	6800      	ldr	r0, [r0, #0]
 800458a:	f001 fa58 	bl	8005a3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	463b      	mov	r3, r7
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	00da      	lsls	r2, r3, #3
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4413      	add	r3, r2
 80045b2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80045b6:	f107 0310 	add.w	r3, r7, #16
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f107 0310 	add.w	r3, r7, #16
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	f000 bcec 	b.w	8004fa6 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80045ce:	463b      	mov	r3, r7
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	78db      	ldrb	r3, [r3, #3]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f040 8356 	bne.w	8004c86 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80045da:	463b      	mov	r3, r7
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	f240 82fa 	bls.w	8004be0 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800460a:	1d3b      	adds	r3, r7, #4
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	463b      	mov	r3, r7
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	441a      	add	r2, r3
 8004618:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800461c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004620:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004624:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800462c:	b29b      	uxth	r3, r3
 800462e:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8004630:	463b      	mov	r3, r7
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004644:	1ad2      	subs	r2, r2, r3
 8004646:	463b      	mov	r3, r7
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	463b      	mov	r3, r7
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 815e 	beq.w	8004924 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004668:	1d3b      	adds	r3, r7, #4
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
 800466e:	463b      	mov	r3, r7
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d164      	bne.n	8004742 <USB_EPStartXfer+0x218>
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004686:	b29b      	uxth	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	4413      	add	r3, r2
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	00da      	lsls	r2, r3, #3
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	4413      	add	r3, r2
 800469c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d112      	bne.n	80046d0 <USB_EPStartXfer+0x1a6>
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e054      	b.n	800477a <USB_EPStartXfer+0x250>
 80046d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046d4:	2b3e      	cmp	r3, #62	; 0x3e
 80046d6:	d817      	bhi.n	8004708 <USB_EPStartXfer+0x1de>
 80046d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <USB_EPStartXfer+0x1ce>
 80046ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f2:	3301      	adds	r3, #1
 80046f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80046f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	029b      	lsls	r3, r3, #10
 8004700:	b29a      	uxth	r2, r3
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e038      	b.n	800477a <USB_EPStartXfer+0x250>
 8004708:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800470c:	095b      	lsrs	r3, r3, #5
 800470e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004712:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004716:	f003 031f 	and.w	r3, r3, #31
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <USB_EPStartXfer+0x1fe>
 800471e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004722:	3b01      	subs	r3, #1
 8004724:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004728:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800472c:	b29b      	uxth	r3, r3
 800472e:	029b      	lsls	r3, r3, #10
 8004730:	b29b      	uxth	r3, r3
 8004732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800473a:	b29a      	uxth	r2, r3
 800473c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	e01b      	b.n	800477a <USB_EPStartXfer+0x250>
 8004742:	463b      	mov	r3, r7
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d116      	bne.n	800477a <USB_EPStartXfer+0x250>
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004754:	b29b      	uxth	r3, r3
 8004756:	461a      	mov	r2, r3
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	4413      	add	r3, r2
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
 800475e:	463b      	mov	r3, r7
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00da      	lsls	r2, r3, #3
 8004766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004768:	4413      	add	r3, r2
 800476a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800476e:	633b      	str	r3, [r7, #48]	; 0x30
 8004770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004774:	b29a      	uxth	r2, r3
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800477a:	463b      	mov	r3, r7
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	895b      	ldrh	r3, [r3, #10]
 8004780:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004784:	463b      	mov	r3, r7
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6959      	ldr	r1, [r3, #20]
 800478a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800478e:	b29b      	uxth	r3, r3
 8004790:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004794:	1d38      	adds	r0, r7, #4
 8004796:	6800      	ldr	r0, [r0, #0]
 8004798:	f001 f951 	bl	8005a3e <USB_WritePMA>
            ep->xfer_buff += len;
 800479c:	463b      	mov	r3, r7
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047a6:	441a      	add	r2, r3
 80047a8:	463b      	mov	r3, r7
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047ae:	463b      	mov	r3, r7
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	463b      	mov	r3, r7
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d90e      	bls.n	80047dc <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 80047be:	463b      	mov	r3, r7
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80047c8:	463b      	mov	r3, r7
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6a1a      	ldr	r2, [r3, #32]
 80047ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	463b      	mov	r3, r7
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	621a      	str	r2, [r3, #32]
 80047da:	e008      	b.n	80047ee <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80047dc:	463b      	mov	r3, r7
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80047e6:	463b      	mov	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2200      	movs	r2, #0
 80047ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047ee:	463b      	mov	r3, r7
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	785b      	ldrb	r3, [r3, #1]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d164      	bne.n	80048c2 <USB_EPStartXfer+0x398>
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004806:	b29b      	uxth	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	463b      	mov	r3, r7
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	00da      	lsls	r2, r3, #3
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004820:	61bb      	str	r3, [r7, #24]
 8004822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004826:	2b00      	cmp	r3, #0
 8004828:	d112      	bne.n	8004850 <USB_EPStartXfer+0x326>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004834:	b29a      	uxth	r2, r3
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b29b      	uxth	r3, r3
 8004840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004848:	b29a      	uxth	r2, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	e057      	b.n	8004900 <USB_EPStartXfer+0x3d6>
 8004850:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004854:	2b3e      	cmp	r3, #62	; 0x3e
 8004856:	d817      	bhi.n	8004888 <USB_EPStartXfer+0x35e>
 8004858:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004862:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <USB_EPStartXfer+0x34e>
 800486e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004872:	3301      	adds	r3, #1
 8004874:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004878:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800487c:	b29b      	uxth	r3, r3
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	b29a      	uxth	r2, r3
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	e03b      	b.n	8004900 <USB_EPStartXfer+0x3d6>
 8004888:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004892:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2b00      	cmp	r3, #0
 800489c:	d104      	bne.n	80048a8 <USB_EPStartXfer+0x37e>
 800489e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048a2:	3b01      	subs	r3, #1
 80048a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80048a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	e01e      	b.n	8004900 <USB_EPStartXfer+0x3d6>
 80048c2:	463b      	mov	r3, r7
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d119      	bne.n	8004900 <USB_EPStartXfer+0x3d6>
 80048cc:	1d3b      	adds	r3, r7, #4
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
 80048d2:	1d3b      	adds	r3, r7, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048da:	b29b      	uxth	r3, r3
 80048dc:	461a      	mov	r2, r3
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	4413      	add	r3, r2
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
 80048e4:	463b      	mov	r3, r7
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	00da      	lsls	r2, r3, #3
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	4413      	add	r3, r2
 80048f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004900:	463b      	mov	r3, r7
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	891b      	ldrh	r3, [r3, #8]
 8004906:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800490a:	463b      	mov	r3, r7
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6959      	ldr	r1, [r3, #20]
 8004910:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004914:	b29b      	uxth	r3, r3
 8004916:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800491a:	1d38      	adds	r0, r7, #4
 800491c:	6800      	ldr	r0, [r0, #0]
 800491e:	f001 f88e 	bl	8005a3e <USB_WritePMA>
 8004922:	e340      	b.n	8004fa6 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004924:	463b      	mov	r3, r7
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d164      	bne.n	80049f8 <USB_EPStartXfer+0x4ce>
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004942:	4413      	add	r3, r2
 8004944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004946:	463b      	mov	r3, r7
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	00da      	lsls	r2, r3, #3
 800494e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004950:	4413      	add	r3, r2
 8004952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
 8004958:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800495c:	2b00      	cmp	r3, #0
 800495e:	d112      	bne.n	8004986 <USB_EPStartXfer+0x45c>
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800496a:	b29a      	uxth	r2, r3
 800496c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496e:	801a      	strh	r2, [r3, #0]
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497e:	b29a      	uxth	r2, r3
 8004980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	e057      	b.n	8004a36 <USB_EPStartXfer+0x50c>
 8004986:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800498a:	2b3e      	cmp	r3, #62	; 0x3e
 800498c:	d817      	bhi.n	80049be <USB_EPStartXfer+0x494>
 800498e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004992:	085b      	lsrs	r3, r3, #1
 8004994:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004998:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d004      	beq.n	80049ae <USB_EPStartXfer+0x484>
 80049a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a8:	3301      	adds	r3, #1
 80049aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	e03b      	b.n	8004a36 <USB_EPStartXfer+0x50c>
 80049be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d104      	bne.n	80049de <USB_EPStartXfer+0x4b4>
 80049d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d8:	3b01      	subs	r3, #1
 80049da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	029b      	lsls	r3, r3, #10
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e01e      	b.n	8004a36 <USB_EPStartXfer+0x50c>
 80049f8:	463b      	mov	r3, r7
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	785b      	ldrb	r3, [r3, #1]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d119      	bne.n	8004a36 <USB_EPStartXfer+0x50c>
 8004a02:	1d3b      	adds	r3, r7, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	461a      	mov	r2, r3
 8004a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a16:	4413      	add	r3, r2
 8004a18:	657b      	str	r3, [r7, #84]	; 0x54
 8004a1a:	463b      	mov	r3, r7
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	00da      	lsls	r2, r3, #3
 8004a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a36:	463b      	mov	r3, r7
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	891b      	ldrh	r3, [r3, #8]
 8004a3c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a40:	463b      	mov	r3, r7
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6959      	ldr	r1, [r3, #20]
 8004a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004a50:	1d38      	adds	r0, r7, #4
 8004a52:	6800      	ldr	r0, [r0, #0]
 8004a54:	f000 fff3 	bl	8005a3e <USB_WritePMA>
            ep->xfer_buff += len;
 8004a58:	463b      	mov	r3, r7
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695a      	ldr	r2, [r3, #20]
 8004a5e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a62:	441a      	add	r2, r3
 8004a64:	463b      	mov	r3, r7
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004a6a:	463b      	mov	r3, r7
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a1a      	ldr	r2, [r3, #32]
 8004a70:	463b      	mov	r3, r7
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d90e      	bls.n	8004a98 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8004a7a:	463b      	mov	r3, r7
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8004a84:	463b      	mov	r3, r7
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a1a      	ldr	r2, [r3, #32]
 8004a8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	463b      	mov	r3, r7
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	621a      	str	r2, [r3, #32]
 8004a96:	e008      	b.n	8004aaa <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8004a98:	463b      	mov	r3, r7
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d164      	bne.n	8004b84 <USB_EPStartXfer+0x65a>
 8004aba:	1d3b      	adds	r3, r7, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ace:	4413      	add	r3, r2
 8004ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	00da      	lsls	r2, r3, #3
 8004ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004adc:	4413      	add	r3, r2
 8004ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d112      	bne.n	8004b12 <USB_EPStartXfer+0x5e8>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0e:	801a      	strh	r2, [r3, #0]
 8004b10:	e054      	b.n	8004bbc <USB_EPStartXfer+0x692>
 8004b12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b16:	2b3e      	cmp	r3, #62	; 0x3e
 8004b18:	d817      	bhi.n	8004b4a <USB_EPStartXfer+0x620>
 8004b1a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <USB_EPStartXfer+0x610>
 8004b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b34:	3301      	adds	r3, #1
 8004b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	029b      	lsls	r3, r3, #10
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	801a      	strh	r2, [r3, #0]
 8004b48:	e038      	b.n	8004bbc <USB_EPStartXfer+0x692>
 8004b4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d104      	bne.n	8004b6a <USB_EPStartXfer+0x640>
 8004b60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b64:	3b01      	subs	r3, #1
 8004b66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	801a      	strh	r2, [r3, #0]
 8004b82:	e01b      	b.n	8004bbc <USB_EPStartXfer+0x692>
 8004b84:	463b      	mov	r3, r7
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d116      	bne.n	8004bbc <USB_EPStartXfer+0x692>
 8004b8e:	1d3b      	adds	r3, r7, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9c:	4413      	add	r3, r2
 8004b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004ba0:	463b      	mov	r3, r7
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	00da      	lsls	r2, r3, #3
 8004ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004baa:	4413      	add	r3, r2
 8004bac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bb2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bbc:	463b      	mov	r3, r7
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	895b      	ldrh	r3, [r3, #10]
 8004bc2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6959      	ldr	r1, [r3, #20]
 8004bcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004bd6:	1d38      	adds	r0, r7, #4
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f000 ff30 	bl	8005a3e <USB_WritePMA>
 8004bde:	e1e2      	b.n	8004fa6 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 8004be0:	463b      	mov	r3, r7
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	463b      	mov	r3, r7
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8004c08:	1d3b      	adds	r3, r7, #4
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	463b      	mov	r3, r7
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	663b      	str	r3, [r7, #96]	; 0x60
 8004c34:	1d3b      	adds	r3, r7, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c42:	4413      	add	r3, r2
 8004c44:	663b      	str	r3, [r7, #96]	; 0x60
 8004c46:	463b      	mov	r3, r7
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	00da      	lsls	r2, r3, #3
 8004c4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c58:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004c62:	463b      	mov	r3, r7
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	891b      	ldrh	r3, [r3, #8]
 8004c68:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c6c:	463b      	mov	r3, r7
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6959      	ldr	r1, [r3, #20]
 8004c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004c7c:	1d38      	adds	r0, r7, #4
 8004c7e:	6800      	ldr	r0, [r0, #0]
 8004c80:	f000 fedd 	bl	8005a3e <USB_WritePMA>
 8004c84:	e18f      	b.n	8004fa6 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 808f 	beq.w	8004dc0 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca8:	463b      	mov	r3, r7
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	785b      	ldrb	r3, [r3, #1]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d164      	bne.n	8004d7c <USB_EPStartXfer+0x852>
 8004cb2:	1d3b      	adds	r3, r7, #4
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cc6:	4413      	add	r3, r2
 8004cc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004cca:	463b      	mov	r3, r7
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	00da      	lsls	r2, r3, #3
 8004cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cdc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d112      	bne.n	8004d0a <USB_EPStartXfer+0x7e0>
 8004ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	801a      	strh	r2, [r3, #0]
 8004cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	e054      	b.n	8004db4 <USB_EPStartXfer+0x88a>
 8004d0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8004d10:	d817      	bhi.n	8004d42 <USB_EPStartXfer+0x818>
 8004d12:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d004      	beq.n	8004d32 <USB_EPStartXfer+0x808>
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	029b      	lsls	r3, r3, #10
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d3e:	801a      	strh	r2, [r3, #0]
 8004d40:	e038      	b.n	8004db4 <USB_EPStartXfer+0x88a>
 8004d42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d104      	bne.n	8004d62 <USB_EPStartXfer+0x838>
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	029b      	lsls	r3, r3, #10
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e01b      	b.n	8004db4 <USB_EPStartXfer+0x88a>
 8004d7c:	463b      	mov	r3, r7
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d116      	bne.n	8004db4 <USB_EPStartXfer+0x88a>
 8004d86:	1d3b      	adds	r3, r7, #4
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d94:	4413      	add	r3, r2
 8004d96:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d98:	463b      	mov	r3, r7
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	00da      	lsls	r2, r3, #3
 8004da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da2:	4413      	add	r3, r2
 8004da4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004da8:	677b      	str	r3, [r7, #116]	; 0x74
 8004daa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004db4:	463b      	mov	r3, r7
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	895b      	ldrh	r3, [r3, #10]
 8004dba:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8004dbe:	e097      	b.n	8004ef0 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004dc0:	463b      	mov	r3, r7
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d168      	bne.n	8004e9c <USB_EPStartXfer+0x972>
 8004dca:	1d3b      	adds	r3, r7, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004de2:	4413      	add	r3, r2
 8004de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004de8:	463b      	mov	r3, r7
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	00da      	lsls	r2, r3, #3
 8004df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df4:	4413      	add	r3, r2
 8004df6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004dfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d112      	bne.n	8004e2a <USB_EPStartXfer+0x900>
 8004e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e16:	881b      	ldrh	r3, [r3, #0]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e26:	801a      	strh	r2, [r3, #0]
 8004e28:	e05d      	b.n	8004ee6 <USB_EPStartXfer+0x9bc>
 8004e2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004e30:	d817      	bhi.n	8004e62 <USB_EPStartXfer+0x938>
 8004e32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e36:	085b      	lsrs	r3, r3, #1
 8004e38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d004      	beq.n	8004e52 <USB_EPStartXfer+0x928>
 8004e48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	029b      	lsls	r3, r3, #10
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e5e:	801a      	strh	r2, [r3, #0]
 8004e60:	e041      	b.n	8004ee6 <USB_EPStartXfer+0x9bc>
 8004e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004e70:	f003 031f 	and.w	r3, r3, #31
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <USB_EPStartXfer+0x958>
 8004e78:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e98:	801a      	strh	r2, [r3, #0]
 8004e9a:	e024      	b.n	8004ee6 <USB_EPStartXfer+0x9bc>
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	785b      	ldrb	r3, [r3, #1]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d11f      	bne.n	8004ee6 <USB_EPStartXfer+0x9bc>
 8004ea6:	1d3b      	adds	r3, r7, #4
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	00da      	lsls	r2, r3, #3
 8004ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004eda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ee4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004ee6:	463b      	mov	r3, r7
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	891b      	ldrh	r3, [r3, #8]
 8004eec:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ef0:	463b      	mov	r3, r7
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6959      	ldr	r1, [r3, #20]
 8004ef6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8004f00:	1d38      	adds	r0, r7, #4
 8004f02:	6800      	ldr	r0, [r0, #0]
 8004f04:	f000 fd9b 	bl	8005a3e <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004f08:	463b      	mov	r3, r7
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	785b      	ldrb	r3, [r3, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d122      	bne.n	8004f58 <USB_EPStartXfer+0xa2e>
 8004f12:	1d3b      	adds	r3, r7, #4
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	463b      	mov	r3, r7
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4413      	add	r3, r2
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004f30:	1d3b      	adds	r3, r7, #4
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	463b      	mov	r3, r7
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	441a      	add	r2, r3
 8004f3e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	8013      	strh	r3, [r2, #0]
 8004f56:	e026      	b.n	8004fa6 <USB_EPStartXfer+0xa7c>
 8004f58:	463b      	mov	r3, r7
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	785b      	ldrb	r3, [r3, #1]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d121      	bne.n	8004fa6 <USB_EPStartXfer+0xa7c>
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	463b      	mov	r3, r7
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004f80:	1d3b      	adds	r3, r7, #4
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	463b      	mov	r3, r7
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	441a      	add	r2, r3
 8004f8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fa6:	1d3b      	adds	r3, r7, #4
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	463b      	mov	r3, r7
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	f107 020e 	add.w	r2, r7, #14
 8004fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc4:	8013      	strh	r3, [r2, #0]
 8004fc6:	f107 030e 	add.w	r3, r7, #14
 8004fca:	f107 020e 	add.w	r2, r7, #14
 8004fce:	8812      	ldrh	r2, [r2, #0]
 8004fd0:	f082 0210 	eor.w	r2, r2, #16
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	f107 030e 	add.w	r3, r7, #14
 8004fda:	f107 020e 	add.w	r2, r7, #14
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	f082 0220 	eor.w	r2, r2, #32
 8004fe4:	801a      	strh	r2, [r3, #0]
 8004fe6:	1d3b      	adds	r3, r7, #4
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	463b      	mov	r3, r7
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	441a      	add	r2, r3
 8004ff4:	f107 030e 	add.w	r3, r7, #14
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ffe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	b29b      	uxth	r3, r3
 800500c:	8013      	strh	r3, [r2, #0]
 800500e:	e3b5      	b.n	800577c <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005010:	463b      	mov	r3, r7
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	7b1b      	ldrb	r3, [r3, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f040 8090 	bne.w	800513c <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 800501c:	463b      	mov	r3, r7
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	463b      	mov	r3, r7
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	429a      	cmp	r2, r3
 800502a:	d90e      	bls.n	800504a <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 800502c:	463b      	mov	r3, r7
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8005036:	463b      	mov	r3, r7
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	463b      	mov	r3, r7
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	619a      	str	r2, [r3, #24]
 8005048:	e008      	b.n	800505c <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 800504a:	463b      	mov	r3, r7
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8005054:	463b      	mov	r3, r7
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506c:	b29b      	uxth	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005074:	4413      	add	r3, r2
 8005076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800507a:	463b      	mov	r3, r7
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	00da      	lsls	r2, r3, #3
 8005082:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005086:	4413      	add	r3, r2
 8005088:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800508c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005094:	2b00      	cmp	r3, #0
 8005096:	d116      	bne.n	80050c6 <USB_EPStartXfer+0xb9c>
 8005098:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050bc:	b29a      	uxth	r2, r3
 80050be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	e32c      	b.n	8005720 <USB_EPStartXfer+0x11f6>
 80050c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050ca:	2b3e      	cmp	r3, #62	; 0x3e
 80050cc:	d818      	bhi.n	8005100 <USB_EPStartXfer+0xbd6>
 80050ce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <USB_EPStartXfer+0xbc4>
 80050e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050e8:	3301      	adds	r3, #1
 80050ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80050ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	029b      	lsls	r3, r3, #10
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80050fc:	801a      	strh	r2, [r3, #0]
 80050fe:	e30f      	b.n	8005720 <USB_EPStartXfer+0x11f6>
 8005100:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800510a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800510e:	f003 031f 	and.w	r3, r3, #31
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0xbf6>
 8005116:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800511a:	3b01      	subs	r3, #1
 800511c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005124:	b29b      	uxth	r3, r3
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	b29b      	uxth	r3, r3
 800512a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800512e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005132:	b29a      	uxth	r2, r3
 8005134:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005138:	801a      	strh	r2, [r3, #0]
 800513a:	e2f1      	b.n	8005720 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 800513c:	463b      	mov	r3, r7
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	78db      	ldrb	r3, [r3, #3]
 8005142:	2b02      	cmp	r3, #2
 8005144:	f040 818f 	bne.w	8005466 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005148:	463b      	mov	r3, r7
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d175      	bne.n	800523e <USB_EPStartXfer+0xd14>
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800515a:	1d3b      	adds	r3, r7, #4
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005162:	b29b      	uxth	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800516a:	4413      	add	r3, r2
 800516c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005170:	463b      	mov	r3, r7
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	00da      	lsls	r2, r3, #3
 8005178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800517c:	4413      	add	r3, r2
 800517e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005182:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005186:	463b      	mov	r3, r7
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d116      	bne.n	80051be <USB_EPStartXfer+0xc94>
 8005190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800519c:	b29a      	uxth	r2, r3
 800519e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e065      	b.n	800528a <USB_EPStartXfer+0xd60>
 80051be:	463b      	mov	r3, r7
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b3e      	cmp	r3, #62	; 0x3e
 80051c6:	d81a      	bhi.n	80051fe <USB_EPStartXfer+0xcd4>
 80051c8:	463b      	mov	r3, r7
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	085b      	lsrs	r3, r3, #1
 80051d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051d4:	463b      	mov	r3, r7
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <USB_EPStartXfer+0xcc2>
 80051e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051e6:	3301      	adds	r3, #1
 80051e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	029b      	lsls	r3, r3, #10
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051fa:	801a      	strh	r2, [r3, #0]
 80051fc:	e045      	b.n	800528a <USB_EPStartXfer+0xd60>
 80051fe:	463b      	mov	r3, r7
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	095b      	lsrs	r3, r3, #5
 8005206:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800520a:	463b      	mov	r3, r7
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <USB_EPStartXfer+0xcf8>
 8005218:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800521c:	3b01      	subs	r3, #1
 800521e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005226:	b29b      	uxth	r3, r3
 8005228:	029b      	lsls	r3, r3, #10
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005234:	b29a      	uxth	r2, r3
 8005236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800523a:	801a      	strh	r2, [r3, #0]
 800523c:	e025      	b.n	800528a <USB_EPStartXfer+0xd60>
 800523e:	463b      	mov	r3, r7
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d120      	bne.n	800528a <USB_EPStartXfer+0xd60>
 8005248:	1d3b      	adds	r3, r7, #4
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005250:	1d3b      	adds	r3, r7, #4
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005260:	4413      	add	r3, r2
 8005262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005266:	463b      	mov	r3, r7
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	00da      	lsls	r2, r3, #3
 800526e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005272:	4413      	add	r3, r2
 8005274:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005278:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800527c:	463b      	mov	r3, r7
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	b29a      	uxth	r2, r3
 8005284:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	1d3b      	adds	r3, r7, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005292:	463b      	mov	r3, r7
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	785b      	ldrb	r3, [r3, #1]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d175      	bne.n	8005388 <USB_EPStartXfer+0xe5e>
 800529c:	1d3b      	adds	r3, r7, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052b4:	4413      	add	r3, r2
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ba:	463b      	mov	r3, r7
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	00da      	lsls	r2, r3, #3
 80052c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052c6:	4413      	add	r3, r2
 80052c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052d0:	463b      	mov	r3, r7
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d116      	bne.n	8005308 <USB_EPStartXfer+0xdde>
 80052da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052de:	881b      	ldrh	r3, [r3, #0]
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052ec:	801a      	strh	r2, [r3, #0]
 80052ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	e061      	b.n	80053cc <USB_EPStartXfer+0xea2>
 8005308:	463b      	mov	r3, r7
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2b3e      	cmp	r3, #62	; 0x3e
 8005310:	d81a      	bhi.n	8005348 <USB_EPStartXfer+0xe1e>
 8005312:	463b      	mov	r3, r7
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	085b      	lsrs	r3, r3, #1
 800531a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800531e:	463b      	mov	r3, r7
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <USB_EPStartXfer+0xe0c>
 800532c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005330:	3301      	adds	r3, #1
 8005332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533a:	b29b      	uxth	r3, r3
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	b29a      	uxth	r2, r3
 8005340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005344:	801a      	strh	r2, [r3, #0]
 8005346:	e041      	b.n	80053cc <USB_EPStartXfer+0xea2>
 8005348:	463b      	mov	r3, r7
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005354:	463b      	mov	r3, r7
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 031f 	and.w	r3, r3, #31
 800535e:	2b00      	cmp	r3, #0
 8005360:	d104      	bne.n	800536c <USB_EPStartXfer+0xe42>
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	3b01      	subs	r3, #1
 8005368:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800536c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005370:	b29b      	uxth	r3, r3
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29a      	uxth	r2, r3
 8005380:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005384:	801a      	strh	r2, [r3, #0]
 8005386:	e021      	b.n	80053cc <USB_EPStartXfer+0xea2>
 8005388:	463b      	mov	r3, r7
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d11c      	bne.n	80053cc <USB_EPStartXfer+0xea2>
 8005392:	1d3b      	adds	r3, r7, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539a:	b29b      	uxth	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053a2:	4413      	add	r3, r2
 80053a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053a8:	463b      	mov	r3, r7
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	00da      	lsls	r2, r3, #3
 80053b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053b4:	4413      	add	r3, r2
 80053b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053ca:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 80053cc:	463b      	mov	r3, r7
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 81a4 	beq.w	8005720 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80053d8:	1d3b      	adds	r3, r7, #4
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	463b      	mov	r3, r7
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80053ec:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80053f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d005      	beq.n	8005404 <USB_EPStartXfer+0xeda>
 80053f8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10d      	bne.n	8005420 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005404:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800540c:	2b00      	cmp	r3, #0
 800540e:	f040 8187 	bne.w	8005720 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005412:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b00      	cmp	r3, #0
 800541c:	f040 8180 	bne.w	8005720 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005420:	1d3b      	adds	r3, r7, #4
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	463b      	mov	r3, r7
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800543e:	1d3b      	adds	r3, r7, #4
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	463b      	mov	r3, r7
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	441a      	add	r2, r3
 800544c:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
 8005464:	e15c      	b.n	8005720 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005466:	463b      	mov	r3, r7
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b01      	cmp	r3, #1
 800546e:	f040 8155 	bne.w	800571c <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8005472:	463b      	mov	r3, r7
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	699a      	ldr	r2, [r3, #24]
 8005478:	463b      	mov	r3, r7
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d90e      	bls.n	80054a0 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8005482:	463b      	mov	r3, r7
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800548c:	463b      	mov	r3, r7
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	463b      	mov	r3, r7
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	619a      	str	r2, [r3, #24]
 800549e:	e008      	b.n	80054b2 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 80054a0:	463b      	mov	r3, r7
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 80054aa:	463b      	mov	r3, r7
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d16f      	bne.n	800559c <USB_EPStartXfer+0x1072>
 80054bc:	1d3b      	adds	r3, r7, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054c4:	1d3b      	adds	r3, r7, #4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054d4:	4413      	add	r3, r2
 80054d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	00da      	lsls	r2, r3, #3
 80054e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054e6:	4413      	add	r3, r2
 80054e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80054f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d116      	bne.n	8005526 <USB_EPStartXfer+0xffc>
 80054f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80054fc:	881b      	ldrh	r3, [r3, #0]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005504:	b29a      	uxth	r2, r3
 8005506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e05f      	b.n	80055e6 <USB_EPStartXfer+0x10bc>
 8005526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800552a:	2b3e      	cmp	r3, #62	; 0x3e
 800552c:	d818      	bhi.n	8005560 <USB_EPStartXfer+0x1036>
 800552e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005538:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <USB_EPStartXfer+0x1024>
 8005544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005548:	3301      	adds	r3, #1
 800554a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800554e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005552:	b29b      	uxth	r3, r3
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	b29a      	uxth	r2, r3
 8005558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800555c:	801a      	strh	r2, [r3, #0]
 800555e:	e042      	b.n	80055e6 <USB_EPStartXfer+0x10bc>
 8005560:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800556a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <USB_EPStartXfer+0x1056>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	3b01      	subs	r3, #1
 800557c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	b29b      	uxth	r3, r3
 8005586:	029b      	lsls	r3, r3, #10
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800558e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005592:	b29a      	uxth	r2, r3
 8005594:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005598:	801a      	strh	r2, [r3, #0]
 800559a:	e024      	b.n	80055e6 <USB_EPStartXfer+0x10bc>
 800559c:	463b      	mov	r3, r7
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d11f      	bne.n	80055e6 <USB_EPStartXfer+0x10bc>
 80055a6:	1d3b      	adds	r3, r7, #4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055be:	4413      	add	r3, r2
 80055c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055c4:	463b      	mov	r3, r7
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	00da      	lsls	r2, r3, #3
 80055cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80055de:	b29a      	uxth	r2, r3
 80055e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e4:	801a      	strh	r2, [r3, #0]
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ee:	463b      	mov	r3, r7
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	785b      	ldrb	r3, [r3, #1]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d16f      	bne.n	80056d8 <USB_EPStartXfer+0x11ae>
 80055f8:	1d3b      	adds	r3, r7, #4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005610:	4413      	add	r3, r2
 8005612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005616:	463b      	mov	r3, r7
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005622:	4413      	add	r3, r2
 8005624:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800562c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005630:	2b00      	cmp	r3, #0
 8005632:	d116      	bne.n	8005662 <USB_EPStartXfer+0x1138>
 8005634:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	b29b      	uxth	r3, r3
 800563c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e05e      	b.n	8005720 <USB_EPStartXfer+0x11f6>
 8005662:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005666:	2b3e      	cmp	r3, #62	; 0x3e
 8005668:	d818      	bhi.n	800569c <USB_EPStartXfer+0x1172>
 800566a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800566e:	085b      	lsrs	r3, r3, #1
 8005670:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <USB_EPStartXfer+0x1160>
 8005680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005684:	3301      	adds	r3, #1
 8005686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800568a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800568e:	b29b      	uxth	r3, r3
 8005690:	029b      	lsls	r3, r3, #10
 8005692:	b29a      	uxth	r2, r3
 8005694:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005698:	801a      	strh	r2, [r3, #0]
 800569a:	e041      	b.n	8005720 <USB_EPStartXfer+0x11f6>
 800569c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d104      	bne.n	80056bc <USB_EPStartXfer+0x1192>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b6:	3b01      	subs	r3, #1
 80056b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80056bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	029b      	lsls	r3, r3, #10
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80056d4:	801a      	strh	r2, [r3, #0]
 80056d6:	e023      	b.n	8005720 <USB_EPStartXfer+0x11f6>
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d11e      	bne.n	8005720 <USB_EPStartXfer+0x11f6>
 80056e2:	1d3b      	adds	r3, r7, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056f2:	4413      	add	r3, r2
 80056f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056f8:	463b      	mov	r3, r7
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	00da      	lsls	r2, r3, #3
 8005700:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005704:	4413      	add	r3, r2
 8005706:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800570a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800570e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005712:	b29a      	uxth	r2, r3
 8005714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005718:	801a      	strh	r2, [r3, #0]
 800571a:	e001      	b.n	8005720 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e02e      	b.n	800577e <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	463b      	mov	r3, r7
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800573e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005742:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005746:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800574a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800574e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005752:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	463b      	mov	r3, r7
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	441a      	add	r2, r3
 8005764:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800576c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005778:	b29b      	uxth	r3, r3
 800577a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d020      	beq.n	80057dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	81bb      	strh	r3, [r7, #12]
 80057b2:	89bb      	ldrh	r3, [r7, #12]
 80057b4:	f083 0310 	eor.w	r3, r3, #16
 80057b8:	81bb      	strh	r3, [r7, #12]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	441a      	add	r2, r3
 80057c4:	89bb      	ldrh	r3, [r7, #12]
 80057c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	8013      	strh	r3, [r2, #0]
 80057da:	e01f      	b.n	800581c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	881b      	ldrh	r3, [r3, #0]
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f2:	81fb      	strh	r3, [r7, #14]
 80057f4:	89fb      	ldrh	r3, [r7, #14]
 80057f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80057fa:	81fb      	strh	r3, [r7, #14]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	441a      	add	r2, r3
 8005806:	89fb      	ldrh	r3, [r7, #14]
 8005808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800580c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005818:	b29b      	uxth	r3, r3
 800581a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	7b1b      	ldrb	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 809d 	bne.w	8005978 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04c      	beq.n	80058e0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	823b      	strh	r3, [r7, #16]
 8005854:	8a3b      	ldrh	r3, [r7, #16]
 8005856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d01b      	beq.n	8005896 <USB_EPClearStall+0x6c>
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	81fb      	strh	r3, [r7, #14]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	441a      	add	r2, r3
 8005880:	89fb      	ldrh	r3, [r7, #14]
 8005882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800588a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800588e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005892:	b29b      	uxth	r3, r3
 8005894:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	78db      	ldrb	r3, [r3, #3]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d06c      	beq.n	8005978 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b4:	81bb      	strh	r3, [r7, #12]
 80058b6:	89bb      	ldrh	r3, [r7, #12]
 80058b8:	f083 0320 	eor.w	r3, r3, #32
 80058bc:	81bb      	strh	r3, [r7, #12]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	441a      	add	r2, r3
 80058c8:	89bb      	ldrh	r3, [r7, #12]
 80058ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058da:	b29b      	uxth	r3, r3
 80058dc:	8013      	strh	r3, [r2, #0]
 80058de:	e04b      	b.n	8005978 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	82fb      	strh	r3, [r7, #22]
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d01b      	beq.n	8005930 <USB_EPClearStall+0x106>
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	82bb      	strh	r3, [r7, #20]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	441a      	add	r2, r3
 800591a:	8abb      	ldrh	r3, [r7, #20]
 800591c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592c:	b29b      	uxth	r3, r3
 800592e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005946:	827b      	strh	r3, [r7, #18]
 8005948:	8a7b      	ldrh	r3, [r7, #18]
 800594a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800594e:	827b      	strh	r3, [r7, #18]
 8005950:	8a7b      	ldrh	r3, [r7, #18]
 8005952:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005956:	827b      	strh	r3, [r7, #18]
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	8a7b      	ldrh	r3, [r7, #18]
 8005964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800596c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005974:	b29b      	uxth	r3, r3
 8005976:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059bc:	b29b      	uxth	r3, r3
 80059be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005a18:	68fb      	ldr	r3, [r7, #12]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b08d      	sub	sp, #52	; 0x34
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	4611      	mov	r1, r2
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	80fb      	strh	r3, [r7, #6]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005a54:	88bb      	ldrh	r3, [r7, #4]
 8005a56:	3301      	adds	r3, #1
 8005a58:	085b      	lsrs	r3, r3, #1
 8005a5a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005a64:	88fa      	ldrh	r2, [r7, #6]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a74:	e01b      	b.n	8005aae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	3301      	adds	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	3302      	adds	r3, #2
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e0      	bne.n	8005a76 <USB_WritePMA+0x38>
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3734      	adds	r7, #52	; 0x34
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b08b      	sub	sp, #44	; 0x2c
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4611      	mov	r1, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	460b      	mov	r3, r1
 8005ad0:	80fb      	strh	r3, [r7, #6]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005ad6:	88bb      	ldrh	r3, [r7, #4]
 8005ad8:	085b      	lsrs	r3, r3, #1
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ae6:	88fa      	ldrh	r2, [r7, #6]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	e018      	b.n	8005b2a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	3302      	adds	r3, #2
 8005b04:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	0a1b      	lsrs	r3, r3, #8
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3301      	adds	r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	3b01      	subs	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e3      	bne.n	8005af8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005b30:	88bb      	ldrh	r3, [r7, #4]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d007      	beq.n	8005b4c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	701a      	strb	r2, [r3, #0]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	372c      	adds	r7, #44	; 0x2c
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b68:	f002 f96a 	bl	8007e40 <malloc>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d105      	bne.n	8005b82 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e066      	b.n	8005c50 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	7c1b      	ldrb	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d119      	bne.n	8005bc6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b96:	2202      	movs	r2, #2
 8005b98:	2181      	movs	r1, #129	; 0x81
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 ff20 	bl	80079e0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005baa:	2202      	movs	r2, #2
 8005bac:	2101      	movs	r1, #1
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 ff16 	bl	80079e0 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005bc4:	e016      	b.n	8005bf4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005bc6:	2340      	movs	r3, #64	; 0x40
 8005bc8:	2202      	movs	r2, #2
 8005bca:	2181      	movs	r1, #129	; 0x81
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 ff07 	bl	80079e0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005bd8:	2340      	movs	r3, #64	; 0x40
 8005bda:	2202      	movs	r2, #2
 8005bdc:	2101      	movs	r1, #1
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f001 fefe 	bl	80079e0 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2210      	movs	r2, #16
 8005bf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	2203      	movs	r2, #3
 8005bf8:	2182      	movs	r1, #130	; 0x82
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f001 fef0 	bl	80079e0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	7c1b      	ldrb	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c34:	2101      	movs	r1, #1
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f002 f84e 	bl	8007cd8 <USBD_LL_PrepareReceive>
 8005c3c:	e007      	b.n	8005c4e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c44:	2340      	movs	r3, #64	; 0x40
 8005c46:	2101      	movs	r1, #1
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f002 f845 	bl	8007cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	460b      	mov	r3, r1
 8005c62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c64:	2181      	movs	r1, #129	; 0x81
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f001 fef8 	bl	8007a5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c72:	2101      	movs	r1, #1
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fef1 	bl	8007a5c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c82:	2182      	movs	r1, #130	; 0x82
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f001 fee9 	bl	8007a5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00e      	beq.n	8005cc2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f002 f8cb 	bl	8007e50 <free>
    pdev->pClassData = NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cdc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d03a      	beq.n	8005d6c <USBD_CDC_Setup+0xa0>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	f040 8097 	bne.w	8005e2a <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	88db      	ldrh	r3, [r3, #6]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d029      	beq.n	8005d58 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	da11      	bge.n	8005d32 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8005d1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	88d2      	ldrh	r2, [r2, #6]
 8005d20:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d22:	6939      	ldr	r1, [r7, #16]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	88db      	ldrh	r3, [r3, #6]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fa5d 	bl	80071ea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8005d30:	e082      	b.n	8005e38 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	785a      	ldrb	r2, [r3, #1]
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	88db      	ldrh	r3, [r3, #6]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005d48:	6939      	ldr	r1, [r7, #16]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	88db      	ldrh	r3, [r3, #6]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fa76 	bl	8007242 <USBD_CtlPrepareRx>
      break;
 8005d56:	e06f      	b.n	8005e38 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	7850      	ldrb	r0, [r2, #1]
 8005d64:	2200      	movs	r2, #0
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	4798      	blx	r3
      break;
 8005d6a:	e065      	b.n	8005e38 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b0b      	cmp	r3, #11
 8005d72:	d84f      	bhi.n	8005e14 <USBD_CDC_Setup+0x148>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <USBD_CDC_Setup+0xb0>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005dad 	.word	0x08005dad
 8005d80:	08005e23 	.word	0x08005e23
 8005d84:	08005e15 	.word	0x08005e15
 8005d88:	08005e15 	.word	0x08005e15
 8005d8c:	08005e15 	.word	0x08005e15
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005e15 	.word	0x08005e15
 8005d98:	08005e15 	.word	0x08005e15
 8005d9c:	08005e15 	.word	0x08005e15
 8005da0:	08005e15 	.word	0x08005e15
 8005da4:	08005dd5 	.word	0x08005dd5
 8005da8:	08005dfd 	.word	0x08005dfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d107      	bne.n	8005dc6 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005db6:	f107 030c 	add.w	r3, r7, #12
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fa13 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dc4:	e030      	b.n	8005e28 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f99d 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd2:	e029      	b.n	8005e28 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d107      	bne.n	8005dee <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005dde:	f107 030f 	add.w	r3, r7, #15
 8005de2:	2201      	movs	r2, #1
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 f9ff 	bl	80071ea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dec:	e01c      	b.n	8005e28 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 f989 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005df6:	2303      	movs	r3, #3
 8005df8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dfa:	e015      	b.n	8005e28 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e02:	2b03      	cmp	r3, #3
 8005e04:	d00f      	beq.n	8005e26 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 f97d 	bl	8007108 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e12:	e008      	b.n	8005e26 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 f976 	bl	8007108 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e20:	e002      	b.n	8005e28 <USBD_CDC_Setup+0x15c>
          break;
 8005e22:	bf00      	nop
 8005e24:	e008      	b.n	8005e38 <USBD_CDC_Setup+0x16c>
          break;
 8005e26:	bf00      	nop
      }
      break;
 8005e28:	e006      	b.n	8005e38 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8005e2a:	6839      	ldr	r1, [r7, #0]
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f001 f96b 	bl	8007108 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e32:	2303      	movs	r3, #3
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop

08005e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e04f      	b.n	8005f06 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	3318      	adds	r3, #24
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d029      	beq.n	8005ed8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e84:	78fa      	ldrb	r2, [r7, #3]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	3318      	adds	r3, #24
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	78f9      	ldrb	r1, [r7, #3]
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4403      	add	r3, r0
 8005ea4:	3338      	adds	r3, #56	; 0x38
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005eac:	fb03 f301 	mul.w	r3, r3, r1
 8005eb0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d110      	bne.n	8005ed8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	3318      	adds	r3, #24
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005eca:	78f9      	ldrb	r1, [r7, #3]
 8005ecc:	2300      	movs	r3, #0
 8005ece:	2200      	movs	r2, #0
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f001 fec9 	bl	8007c68 <USBD_LL_Transmit>
 8005ed6:	e015      	b.n	8005f04 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00b      	beq.n	8005f04 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b084      	sub	sp, #16
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e015      	b.n	8005f5c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 ff07 	bl	8007d48 <USBD_LL_GetRxDataSize>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f56:	4611      	mov	r1, r2
 8005f58:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f72:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d015      	beq.n	8005faa <USBD_CDC_EP0_RxReady+0x46>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f84:	2bff      	cmp	r3, #255	; 0xff
 8005f86:	d010      	beq.n	8005faa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f96:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f9e:	b292      	uxth	r2, r2
 8005fa0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	22ff      	movs	r2, #255	; 0xff
 8005fa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2243      	movs	r2, #67	; 0x43
 8005fc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005fc2:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	20000094 	.word	0x20000094

08005fd4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2243      	movs	r2, #67	; 0x43
 8005fe0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005fe2:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20000050 	.word	0x20000050

08005ff4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2243      	movs	r2, #67	; 0x43
 8006000:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006002:	4b03      	ldr	r3, [pc, #12]	; (8006010 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	200000d8 	.word	0x200000d8

08006014 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	220a      	movs	r2, #10
 8006020:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006022:	4b03      	ldr	r3, [pc, #12]	; (8006030 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	2000000c 	.word	0x2000000c

08006034 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006044:	2303      	movs	r3, #3
 8006046:	e004      	b.n	8006052 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800605e:	b480      	push	{r7}
 8006060:	b087      	sub	sp, #28
 8006062:	af00      	add	r7, sp, #0
 8006064:	60f8      	str	r0, [r7, #12]
 8006066:	60b9      	str	r1, [r7, #8]
 8006068:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006070:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	371c      	adds	r7, #28
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e016      	b.n	8006104 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7c1b      	ldrb	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060e8:	2101      	movs	r1, #1
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f001 fdf4 	bl	8007cd8 <USBD_LL_PrepareReceive>
 80060f0:	e007      	b.n	8006102 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060f8:	2340      	movs	r3, #64	; 0x40
 80060fa:	2101      	movs	r1, #1
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 fdeb 	bl	8007cd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006120:	2303      	movs	r3, #3
 8006122:	e01f      	b.n	8006164 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	79fa      	ldrb	r2, [r7, #7]
 8006156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f001 fbad 	bl	80078b8 <USBD_LL_Init>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006180:	2303      	movs	r3, #3
 8006182:	e016      	b.n	80061b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	f107 020e 	add.w	r2, r7, #14
 80061a4:	4610      	mov	r0, r2
 80061a6:	4798      	blx	r3
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b082      	sub	sp, #8
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 fbda 	bl	800797c <USBD_LL_Start>
 80061c8:	4603      	mov	r3, r0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d009      	beq.n	8006216 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	78fa      	ldrb	r2, [r7, #3]
 800620c:	4611      	mov	r1, r2
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
 8006212:	4603      	mov	r3, r0
 8006214:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006216:	7bfb      	ldrb	r3, [r7, #15]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	4611      	mov	r1, r2
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
  }

  return USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ff16 	bl	8007094 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	2b01      	cmp	r3, #1
 800628a:	d00e      	beq.n	80062aa <USBD_LL_SetupStage+0x5a>
 800628c:	2b01      	cmp	r3, #1
 800628e:	d302      	bcc.n	8006296 <USBD_LL_SetupStage+0x46>
 8006290:	2b02      	cmp	r3, #2
 8006292:	d014      	beq.n	80062be <USBD_LL_SetupStage+0x6e>
 8006294:	e01d      	b.n	80062d2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9d6 	bl	8006650 <USBD_StdDevReq>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
      break;
 80062a8:	e020      	b.n	80062ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062b0:	4619      	mov	r1, r3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa3a 	bl	800672c <USBD_StdItfReq>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
      break;
 80062bc:	e016      	b.n	80062ec <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa76 	bl	80067b8 <USBD_StdEPReq>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
      break;
 80062d0:	e00c      	b.n	80062ec <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 fbf1 	bl	8007ac8 <USBD_LL_StallEP>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
      break;
 80062ea:	bf00      	nop
  }

  return ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	460b      	mov	r3, r1
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d137      	bne.n	800637a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006310:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006318:	2b03      	cmp	r3, #3
 800631a:	d14a      	bne.n	80063b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	429a      	cmp	r2, r3
 8006326:	d913      	bls.n	8006350 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	4293      	cmp	r3, r2
 8006340:	bf28      	it	cs
 8006342:	4613      	movcs	r3, r2
 8006344:	461a      	mov	r2, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 ff97 	bl	800727c <USBD_CtlContinueRx>
 800634e:	e030      	b.n	80063b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00a      	beq.n	8006372 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006362:	2b03      	cmp	r3, #3
 8006364:	d105      	bne.n	8006372 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ff93 	bl	800729e <USBD_CtlSendStatus>
 8006378:	e01b      	b.n	80063b2 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d013      	beq.n	80063ae <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800638c:	2b03      	cmp	r3, #3
 800638e:	d10e      	bne.n	80063ae <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	7afa      	ldrb	r2, [r7, #11]
 800639a:	4611      	mov	r1, r2
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	4798      	blx	r3
 80063a0:	4603      	mov	r3, r0
 80063a2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80063aa:	7dfb      	ldrb	r3, [r7, #23]
 80063ac:	e002      	b.n	80063b4 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e000      	b.n	80063b4 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	460b      	mov	r3, r1
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d16a      	bne.n	80064a6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3314      	adds	r3, #20
 80063d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d155      	bne.n	800648c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d914      	bls.n	8006416 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	461a      	mov	r2, r3
 8006400:	6879      	ldr	r1, [r7, #4]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 ff0c 	bl	8007220 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f001 fc62 	bl	8007cd8 <USBD_LL_PrepareReceive>
 8006414:	e03a      	b.n	800648c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	d11c      	bne.n	800645c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800642a:	429a      	cmp	r2, r3
 800642c:	d316      	bcc.n	800645c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006438:	429a      	cmp	r2, r3
 800643a:	d20f      	bcs.n	800645c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800643c:	2200      	movs	r2, #0
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 feed 	bl	8007220 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800644e:	2300      	movs	r3, #0
 8006450:	2200      	movs	r2, #0
 8006452:	2100      	movs	r1, #0
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f001 fc3f 	bl	8007cd8 <USBD_LL_PrepareReceive>
 800645a:	e017      	b.n	800648c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800646e:	2b03      	cmp	r3, #3
 8006470:	d105      	bne.n	800647e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800647e:	2180      	movs	r1, #128	; 0x80
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f001 fb21 	bl	8007ac8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 ff1c 	bl	80072c4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d123      	bne.n	80064de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff fe9b 	bl	80061d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80064a4:	e01b      	b.n	80064de <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d013      	beq.n	80064da <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d10e      	bne.n	80064da <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	7afa      	ldrb	r2, [r7, #11]
 80064c6:	4611      	mov	r1, r2
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	4798      	blx	r3
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	e002      	b.n	80064e0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064da:	2303      	movs	r3, #3
 80064dc:	e000      	b.n	80064e0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3718      	adds	r7, #24
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006514:	2b00      	cmp	r3, #0
 8006516:	d009      	beq.n	800652c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	6852      	ldr	r2, [r2, #4]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	4611      	mov	r1, r2
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800652c:	2340      	movs	r3, #64	; 0x40
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fa54 	bl	80079e0 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2240      	movs	r2, #64	; 0x40
 8006544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	2200      	movs	r2, #0
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fa46 	bl	80079e0 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2204      	movs	r2, #4
 80065a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d105      	bne.n	80065d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065d2:	2300      	movs	r3, #0
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	d10b      	bne.n	800660a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	3301      	adds	r3, #1
 800662a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006632:	8a3b      	ldrh	r3, [r7, #16]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	b21a      	sxth	r2, r3
 8006638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800663c:	4313      	orrs	r3, r2
 800663e:	b21b      	sxth	r3, r3
 8006640:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006642:	89fb      	ldrh	r3, [r7, #14]
}
 8006644:	4618      	mov	r0, r3
 8006646:	371c      	adds	r7, #28
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006666:	2b20      	cmp	r3, #32
 8006668:	d004      	beq.n	8006674 <USBD_StdDevReq+0x24>
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d002      	beq.n	8006674 <USBD_StdDevReq+0x24>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <USBD_StdDevReq+0x38>
 8006672:	e050      	b.n	8006716 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
 8006682:	4603      	mov	r3, r0
 8006684:	73fb      	strb	r3, [r7, #15]
    break;
 8006686:	e04b      	b.n	8006720 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b09      	cmp	r3, #9
 800668e:	d83c      	bhi.n	800670a <USBD_StdDevReq+0xba>
 8006690:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <USBD_StdDevReq+0x48>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006701 	.word	0x08006701
 80066a0:	0800670b 	.word	0x0800670b
 80066a4:	080066f7 	.word	0x080066f7
 80066a8:	0800670b 	.word	0x0800670b
 80066ac:	080066cb 	.word	0x080066cb
 80066b0:	080066c1 	.word	0x080066c1
 80066b4:	0800670b 	.word	0x0800670b
 80066b8:	080066e3 	.word	0x080066e3
 80066bc:	080066d5 	.word	0x080066d5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9d0 	bl	8006a68 <USBD_GetDescriptor>
      break;
 80066c8:	e024      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80066ca:	6839      	ldr	r1, [r7, #0]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 fb5f 	bl	8006d90 <USBD_SetAddress>
      break;
 80066d2:	e01f      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fb9c 	bl	8006e14 <USBD_SetConfig>
 80066dc:	4603      	mov	r3, r0
 80066de:	73fb      	strb	r3, [r7, #15]
      break;
 80066e0:	e018      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fc39 	bl	8006f5c <USBD_GetConfig>
      break;
 80066ea:	e013      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fc68 	bl	8006fc4 <USBD_GetStatus>
      break;
 80066f4:	e00e      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fc96 	bl	800702a <USBD_SetFeature>
      break;
 80066fe:	e009      	b.n	8006714 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fca5 	bl	8007052 <USBD_ClrFeature>
      break;
 8006708:	e004      	b.n	8006714 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fcfb 	bl	8007108 <USBD_CtlError>
      break;
 8006712:	bf00      	nop
    }
    break;
 8006714:	e004      	b.n	8006720 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fcf5 	bl	8007108 <USBD_CtlError>
    break;
 800671e:	bf00      	nop
  }

  return ret;
 8006720:	7bfb      	ldrb	r3, [r7, #15]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop

0800672c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006742:	2b20      	cmp	r3, #32
 8006744:	d003      	beq.n	800674e <USBD_StdItfReq+0x22>
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	d001      	beq.n	800674e <USBD_StdItfReq+0x22>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d12a      	bne.n	80067a4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006754:	3b01      	subs	r3, #1
 8006756:	2b02      	cmp	r3, #2
 8006758:	d81d      	bhi.n	8006796 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	889b      	ldrh	r3, [r3, #4]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b01      	cmp	r3, #1
 8006762:	d813      	bhi.n	800678c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	4798      	blx	r3
 8006772:	4603      	mov	r3, r0
 8006774:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	88db      	ldrh	r3, [r3, #6]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d110      	bne.n	80067a0 <USBD_StdItfReq+0x74>
 800677e:	7bfb      	ldrb	r3, [r7, #15]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10d      	bne.n	80067a0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fd8a 	bl	800729e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800678a:	e009      	b.n	80067a0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800678c:	6839      	ldr	r1, [r7, #0]
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fcba 	bl	8007108 <USBD_CtlError>
      break;
 8006794:	e004      	b.n	80067a0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fcb5 	bl	8007108 <USBD_CtlError>
      break;
 800679e:	e000      	b.n	80067a2 <USBD_StdItfReq+0x76>
      break;
 80067a0:	bf00      	nop
    }
    break;
 80067a2:	e004      	b.n	80067ae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80067a4:	6839      	ldr	r1, [r7, #0]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fcae 	bl	8007108 <USBD_CtlError>
    break;
 80067ac:	bf00      	nop
  }

  return ret;
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	889b      	ldrh	r3, [r3, #4]
 80067ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	d004      	beq.n	80067e2 <USBD_StdEPReq+0x2a>
 80067d8:	2b40      	cmp	r3, #64	; 0x40
 80067da:	d002      	beq.n	80067e2 <USBD_StdEPReq+0x2a>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <USBD_StdEPReq+0x3e>
 80067e0:	e137      	b.n	8006a52 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	4798      	blx	r3
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
    break;
 80067f4:	e132      	b.n	8006a5c <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d03e      	beq.n	800687c <USBD_StdEPReq+0xc4>
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d002      	beq.n	8006808 <USBD_StdEPReq+0x50>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d079      	beq.n	80068fa <USBD_StdEPReq+0x142>
 8006806:	e11e      	b.n	8006a46 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680e:	2b02      	cmp	r3, #2
 8006810:	d002      	beq.n	8006818 <USBD_StdEPReq+0x60>
 8006812:	2b03      	cmp	r3, #3
 8006814:	d015      	beq.n	8006842 <USBD_StdEPReq+0x8a>
 8006816:	e02b      	b.n	8006870 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00c      	beq.n	8006838 <USBD_StdEPReq+0x80>
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b80      	cmp	r3, #128	; 0x80
 8006822:	d009      	beq.n	8006838 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	4619      	mov	r1, r3
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f001 f94d 	bl	8007ac8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800682e:	2180      	movs	r1, #128	; 0x80
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f001 f949 	bl	8007ac8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006836:	e020      	b.n	800687a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fc64 	bl	8007108 <USBD_CtlError>
        break;
 8006840:	e01b      	b.n	800687a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10e      	bne.n	8006868 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_StdEPReq+0xb0>
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d008      	beq.n	8006868 <USBD_StdEPReq+0xb0>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	88db      	ldrh	r3, [r3, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	4619      	mov	r1, r3
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f001 f930 	bl	8007ac8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fd18 	bl	800729e <USBD_CtlSendStatus>

        break;
 800686e:	e004      	b.n	800687a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 fc48 	bl	8007108 <USBD_CtlError>
        break;
 8006878:	bf00      	nop
      }
      break;
 800687a:	e0e9      	b.n	8006a50 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006882:	2b02      	cmp	r3, #2
 8006884:	d002      	beq.n	800688c <USBD_StdEPReq+0xd4>
 8006886:	2b03      	cmp	r3, #3
 8006888:	d015      	beq.n	80068b6 <USBD_StdEPReq+0xfe>
 800688a:	e02f      	b.n	80068ec <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <USBD_StdEPReq+0xf4>
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	2b80      	cmp	r3, #128	; 0x80
 8006896:	d009      	beq.n	80068ac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f001 f913 	bl	8007ac8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a2:	2180      	movs	r1, #128	; 0x80
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f90f 	bl	8007ac8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80068aa:	e025      	b.n	80068f8 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fc2a 	bl	8007108 <USBD_CtlError>
        break;
 80068b4:	e020      	b.n	80068f8 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11b      	bne.n	80068f6 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	4619      	mov	r1, r3
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f001 f931 	bl	8007b34 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fce3 	bl	800729e <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	4798      	blx	r3
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80068ea:	e004      	b.n	80068f6 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fc0a 	bl	8007108 <USBD_CtlError>
        break;
 80068f4:	e000      	b.n	80068f8 <USBD_StdEPReq+0x140>
        break;
 80068f6:	bf00      	nop
      }
      break;
 80068f8:	e0aa      	b.n	8006a50 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006900:	2b02      	cmp	r3, #2
 8006902:	d002      	beq.n	800690a <USBD_StdEPReq+0x152>
 8006904:	2b03      	cmp	r3, #3
 8006906:	d032      	beq.n	800696e <USBD_StdEPReq+0x1b6>
 8006908:	e097      	b.n	8006a3a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <USBD_StdEPReq+0x168>
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b80      	cmp	r3, #128	; 0x80
 8006914:	d004      	beq.n	8006920 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fbf5 	bl	8007108 <USBD_CtlError>
          break;
 800691e:	e091      	b.n	8006a44 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006924:	2b00      	cmp	r3, #0
 8006926:	da0b      	bge.n	8006940 <USBD_StdEPReq+0x188>
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692e:	4613      	mov	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	3310      	adds	r3, #16
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	3304      	adds	r3, #4
 800693e:	e00b      	b.n	8006958 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	3304      	adds	r3, #4
 8006958:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2202      	movs	r2, #2
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc3f 	bl	80071ea <USBD_CtlSendData>
        break;
 800696c:	e06a      	b.n	8006a44 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800696e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da11      	bge.n	800699a <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	440b      	add	r3, r1
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d117      	bne.n	80069c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbb8 	bl	8007108 <USBD_CtlError>
            break;
 8006998:	e054      	b.n	8006a44 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069b0:	881b      	ldrh	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d104      	bne.n	80069c0 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fba5 	bl	8007108 <USBD_CtlError>
            break;
 80069be:	e041      	b.n	8006a44 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	da0b      	bge.n	80069e0 <USBD_StdEPReq+0x228>
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	3310      	adds	r3, #16
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	3304      	adds	r3, #4
 80069de:	e00b      	b.n	80069f8 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069e0:	7bbb      	ldrb	r3, [r7, #14]
 80069e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	3304      	adds	r3, #4
 80069f8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <USBD_StdEPReq+0x24e>
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	2b80      	cmp	r3, #128	; 0x80
 8006a04:	d103      	bne.n	8006a0e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e00e      	b.n	8006a2c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 f8c4 	bl	8007ba0 <USBD_LL_IsStallEP>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2201      	movs	r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbd9 	bl	80071ea <USBD_CtlSendData>
          break;
 8006a38:	e004      	b.n	8006a44 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fb63 	bl	8007108 <USBD_CtlError>
        break;
 8006a42:	bf00      	nop
      }
      break;
 8006a44:	e004      	b.n	8006a50 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fb5d 	bl	8007108 <USBD_CtlError>
      break;
 8006a4e:	bf00      	nop
    }
    break;
 8006a50:	e004      	b.n	8006a5c <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fb57 	bl	8007108 <USBD_CtlError>
    break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b0e      	cmp	r3, #14
 8006a8a:	f200 8152 	bhi.w	8006d32 <USBD_GetDescriptor+0x2ca>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_GetDescriptor+0x2c>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006b05 	.word	0x08006b05
 8006a98:	08006b1d 	.word	0x08006b1d
 8006a9c:	08006b5d 	.word	0x08006b5d
 8006aa0:	08006d33 	.word	0x08006d33
 8006aa4:	08006d33 	.word	0x08006d33
 8006aa8:	08006cd3 	.word	0x08006cd3
 8006aac:	08006cff 	.word	0x08006cff
 8006ab0:	08006d33 	.word	0x08006d33
 8006ab4:	08006d33 	.word	0x08006d33
 8006ab8:	08006d33 	.word	0x08006d33
 8006abc:	08006d33 	.word	0x08006d33
 8006ac0:	08006d33 	.word	0x08006d33
 8006ac4:	08006d33 	.word	0x08006d33
 8006ac8:	08006d33 	.word	0x08006d33
 8006acc:	08006ad1 	.word	0x08006ad1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d00b      	beq.n	8006af4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	7c12      	ldrb	r2, [r2, #16]
 8006ae8:	f107 0108 	add.w	r1, r7, #8
 8006aec:	4610      	mov	r0, r2
 8006aee:	4798      	blx	r3
 8006af0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006af2:	e126      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fb06 	bl	8007108 <USBD_CtlError>
      err++;
 8006afc:	7afb      	ldrb	r3, [r7, #11]
 8006afe:	3301      	adds	r3, #1
 8006b00:	72fb      	strb	r3, [r7, #11]
    break;
 8006b02:	e11e      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	7c12      	ldrb	r2, [r2, #16]
 8006b10:	f107 0108 	add.w	r1, r7, #8
 8006b14:	4610      	mov	r0, r2
 8006b16:	4798      	blx	r3
 8006b18:	60f8      	str	r0, [r7, #12]
    break;
 8006b1a:	e112      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7c1b      	ldrb	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10d      	bne.n	8006b40 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f107 0208 	add.w	r2, r7, #8
 8006b30:	4610      	mov	r0, r2
 8006b32:	4798      	blx	r3
 8006b34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b3e:	e100      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	f107 0208 	add.w	r2, r7, #8
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	4798      	blx	r3
 8006b50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3301      	adds	r3, #1
 8006b56:	2202      	movs	r2, #2
 8006b58:	701a      	strb	r2, [r3, #0]
    break;
 8006b5a:	e0f2      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	885b      	ldrh	r3, [r3, #2]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	f200 80ac 	bhi.w	8006cc0 <USBD_GetDescriptor+0x258>
 8006b68:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <USBD_GetDescriptor+0x108>)
 8006b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6e:	bf00      	nop
 8006b70:	08006b89 	.word	0x08006b89
 8006b74:	08006bbd 	.word	0x08006bbd
 8006b78:	08006bf1 	.word	0x08006bf1
 8006b7c:	08006c25 	.word	0x08006c25
 8006b80:	08006c59 	.word	0x08006c59
 8006b84:	08006c8d 	.word	0x08006c8d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	7c12      	ldrb	r2, [r2, #16]
 8006ba0:	f107 0108 	add.w	r1, r7, #8
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4798      	blx	r3
 8006ba8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006baa:	e091      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006bac:	6839      	ldr	r1, [r7, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 faaa 	bl	8007108 <USBD_CtlError>
        err++;
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	72fb      	strb	r3, [r7, #11]
      break;
 8006bba:	e089      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	7c12      	ldrb	r2, [r2, #16]
 8006bd4:	f107 0108 	add.w	r1, r7, #8
 8006bd8:	4610      	mov	r0, r2
 8006bda:	4798      	blx	r3
 8006bdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bde:	e077      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa90 	bl	8007108 <USBD_CtlError>
        err++;
 8006be8:	7afb      	ldrb	r3, [r7, #11]
 8006bea:	3301      	adds	r3, #1
 8006bec:	72fb      	strb	r3, [r7, #11]
      break;
 8006bee:	e06f      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00b      	beq.n	8006c14 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	7c12      	ldrb	r2, [r2, #16]
 8006c08:	f107 0108 	add.w	r1, r7, #8
 8006c0c:	4610      	mov	r0, r2
 8006c0e:	4798      	blx	r3
 8006c10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c12:	e05d      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa76 	bl	8007108 <USBD_CtlError>
        err++;
 8006c1c:	7afb      	ldrb	r3, [r7, #11]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	72fb      	strb	r3, [r7, #11]
      break;
 8006c22:	e055      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7c12      	ldrb	r2, [r2, #16]
 8006c3c:	f107 0108 	add.w	r1, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c46:	e043      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c48:	6839      	ldr	r1, [r7, #0]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa5c 	bl	8007108 <USBD_CtlError>
        err++;
 8006c50:	7afb      	ldrb	r3, [r7, #11]
 8006c52:	3301      	adds	r3, #1
 8006c54:	72fb      	strb	r3, [r7, #11]
      break;
 8006c56:	e03b      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c6a:	695b      	ldr	r3, [r3, #20]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
 8006c70:	f107 0108 	add.w	r1, r7, #8
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
 8006c78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c7a:	e029      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa42 	bl	8007108 <USBD_CtlError>
        err++;
 8006c84:	7afb      	ldrb	r3, [r7, #11]
 8006c86:	3301      	adds	r3, #1
 8006c88:	72fb      	strb	r3, [r7, #11]
      break;
 8006c8a:	e021      	b.n	8006cd0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00b      	beq.n	8006cb0 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	7c12      	ldrb	r2, [r2, #16]
 8006ca4:	f107 0108 	add.w	r1, r7, #8
 8006ca8:	4610      	mov	r0, r2
 8006caa:	4798      	blx	r3
 8006cac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cae:	e00f      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa28 	bl	8007108 <USBD_CtlError>
        err++;
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	72fb      	strb	r3, [r7, #11]
      break;
 8006cbe:	e007      	b.n	8006cd0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa20 	bl	8007108 <USBD_CtlError>
      err++;
 8006cc8:	7afb      	ldrb	r3, [r7, #11]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006cce:	bf00      	nop
    }
    break;
 8006cd0:	e037      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	f107 0208 	add.w	r2, r7, #8
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4798      	blx	r3
 8006cea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006cec:	e029      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fa09 	bl	8007108 <USBD_CtlError>
      err++;
 8006cf6:	7afb      	ldrb	r3, [r7, #11]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	72fb      	strb	r3, [r7, #11]
    break;
 8006cfc:	e021      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7c1b      	ldrb	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10d      	bne.n	8006d22 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0e:	f107 0208 	add.w	r2, r7, #8
 8006d12:	4610      	mov	r0, r2
 8006d14:	4798      	blx	r3
 8006d16:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d20:	e00f      	b.n	8006d42 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 f9ef 	bl	8007108 <USBD_CtlError>
      err++;
 8006d2a:	7afb      	ldrb	r3, [r7, #11]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	72fb      	strb	r3, [r7, #11]
    break;
 8006d30:	e007      	b.n	8006d42 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8006d32:	6839      	ldr	r1, [r7, #0]
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f9e7 	bl	8007108 <USBD_CtlError>
    err++;
 8006d3a:	7afb      	ldrb	r3, [r7, #11]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	72fb      	strb	r3, [r7, #11]
    break;
 8006d40:	bf00      	nop
  }

  if (err != 0U)
 8006d42:	7afb      	ldrb	r3, [r7, #11]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d11e      	bne.n	8006d86 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	88db      	ldrh	r3, [r3, #6]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d016      	beq.n	8006d7e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00e      	beq.n	8006d74 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	88da      	ldrh	r2, [r3, #6]
 8006d5a:	893b      	ldrh	r3, [r7, #8]
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	bf28      	it	cs
 8006d60:	4613      	movcs	r3, r2
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d66:	893b      	ldrh	r3, [r7, #8]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68f9      	ldr	r1, [r7, #12]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fa3c 	bl	80071ea <USBD_CtlSendData>
 8006d72:	e009      	b.n	8006d88 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f9c6 	bl	8007108 <USBD_CtlError>
 8006d7c:	e004      	b.n	8006d88 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fa8d 	bl	800729e <USBD_CtlSendStatus>
 8006d84:	e000      	b.n	8006d88 <USBD_GetDescriptor+0x320>
    return;
 8006d86:	bf00      	nop
    }
  }
}
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop

08006d90 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	889b      	ldrh	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d130      	bne.n	8006e04 <USBD_SetAddress+0x74>
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d12c      	bne.n	8006e04 <USBD_SetAddress+0x74>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	885b      	ldrh	r3, [r3, #2]
 8006dae:	2b7f      	cmp	r3, #127	; 0x7f
 8006db0:	d828      	bhi.n	8006e04 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	885b      	ldrh	r3, [r3, #2]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d104      	bne.n	8006dd2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f99c 	bl	8007108 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd0:	e01c      	b.n	8006e0c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff0c 	bl	8007bfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa5a 	bl	800729e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	e008      	b.n	8006e0c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e02:	e003      	b.n	8006e0c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f97e 	bl	8007108 <USBD_CtlError>
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	4b4b      	ldr	r3, [pc, #300]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e2c:	4b4a      	ldr	r3, [pc, #296]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d905      	bls.n	8006e40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e34:	6839      	ldr	r1, [r7, #0]
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f966 	bl	8007108 <USBD_CtlError>
    return USBD_FAIL;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e087      	b.n	8006f50 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d002      	beq.n	8006e50 <USBD_SetConfig+0x3c>
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d025      	beq.n	8006e9a <USBD_SetConfig+0x86>
 8006e4e:	e071      	b.n	8006f34 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006e50:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01c      	beq.n	8006e92 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006e58:	4b3f      	ldr	r3, [pc, #252]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e62:	4b3d      	ldr	r3, [pc, #244]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff f9bd 	bl	80061e8 <USBD_SetClassConfig>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 f944 	bl	8007108 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006e80:	e065      	b.n	8006f4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fa0b 	bl	800729e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006e90:	e05d      	b.n	8006f4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fa03 	bl	800729e <USBD_CtlSendStatus>
    break;
 8006e98:	e059      	b.n	8006f4e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006e9a:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <USBD_SetConfig+0x144>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d112      	bne.n	8006ec8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006eaa:	4b2b      	ldr	r3, [pc, #172]	; (8006f58 <USBD_SetConfig+0x144>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eb4:	4b28      	ldr	r3, [pc, #160]	; (8006f58 <USBD_SetConfig+0x144>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff f9b0 	bl	8006220 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9ec 	bl	800729e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ec6:	e042      	b.n	8006f4e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <USBD_SetConfig+0x144>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d02a      	beq.n	8006f2c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff f99e 	bl	8006220 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ee4:	4b1c      	ldr	r3, [pc, #112]	; (8006f58 <USBD_SetConfig+0x144>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006eee:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <USBD_SetConfig+0x144>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7ff f977 	bl	80061e8 <USBD_SetClassConfig>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00f      	beq.n	8006f24 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f8fe 	bl	8007108 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f983 	bl	8006220 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f22:	e014      	b.n	8006f4e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f9ba 	bl	800729e <USBD_CtlSendStatus>
    break;
 8006f2a:	e010      	b.n	8006f4e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f9b6 	bl	800729e <USBD_CtlSendStatus>
    break;
 8006f32:	e00c      	b.n	8006f4e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8e6 	bl	8007108 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <USBD_SetConfig+0x144>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff f96c 	bl	8006220 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f4c:	bf00      	nop
  }

  return ret;
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20000214 	.word	0x20000214

08006f5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	88db      	ldrh	r3, [r3, #6]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d004      	beq.n	8006f78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f8c9 	bl	8007108 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006f76:	e021      	b.n	8006fbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	db17      	blt.n	8006fb2 <USBD_GetConfig+0x56>
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	dd02      	ble.n	8006f8c <USBD_GetConfig+0x30>
 8006f86:	2b03      	cmp	r3, #3
 8006f88:	d00b      	beq.n	8006fa2 <USBD_GetConfig+0x46>
 8006f8a:	e012      	b.n	8006fb2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3308      	adds	r3, #8
 8006f96:	2201      	movs	r2, #1
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f925 	bl	80071ea <USBD_CtlSendData>
      break;
 8006fa0:	e00c      	b.n	8006fbc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f91d 	bl	80071ea <USBD_CtlSendData>
      break;
 8006fb0:	e004      	b.n	8006fbc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f8a7 	bl	8007108 <USBD_CtlError>
      break;
 8006fba:	bf00      	nop
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d81e      	bhi.n	8007018 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	88db      	ldrh	r3, [r3, #6]
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d004      	beq.n	8006fec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f88f 	bl	8007108 <USBD_CtlError>
      break;
 8006fea:	e01a      	b.n	8007022 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f043 0202 	orr.w	r2, r3, #2
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	330c      	adds	r3, #12
 800700c:	2202      	movs	r2, #2
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f8ea 	bl	80071ea <USBD_CtlSendData>
    break;
 8007016:	e004      	b.n	8007022 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f874 	bl	8007108 <USBD_CtlError>
    break;
 8007020:	bf00      	nop
  }
}
 8007022:	bf00      	nop
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	885b      	ldrh	r3, [r3, #2]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d106      	bne.n	800704a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f92a 	bl	800729e <USBD_CtlSendStatus>
  }
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b082      	sub	sp, #8
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007062:	3b01      	subs	r3, #1
 8007064:	2b02      	cmp	r3, #2
 8007066:	d80b      	bhi.n	8007080 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	2b01      	cmp	r3, #1
 800706e:	d10c      	bne.n	800708a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f910 	bl	800729e <USBD_CtlSendStatus>
      }
      break;
 800707e:	e004      	b.n	800708a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f840 	bl	8007108 <USBD_CtlError>
      break;
 8007088:	e000      	b.n	800708c <USBD_ClrFeature+0x3a>
      break;
 800708a:	bf00      	nop
  }
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff faa8 	bl	8006614 <SWAPBYTE>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3301      	adds	r3, #1
 80070d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7ff fa9b 	bl	8006614 <SWAPBYTE>
 80070de:	4603      	mov	r3, r0
 80070e0:	461a      	mov	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7ff fa8e 	bl	8006614 <SWAPBYTE>
 80070f8:	4603      	mov	r3, r0
 80070fa:	461a      	mov	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	80da      	strh	r2, [r3, #6]
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007112:	2180      	movs	r1, #128	; 0x80
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fcd7 	bl	8007ac8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800711a:	2100      	movs	r1, #0
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 fcd3 	bl	8007ac8 <USBD_LL_StallEP>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	b086      	sub	sp, #24
 800712e:	af00      	add	r7, sp, #0
 8007130:	60f8      	str	r0, [r7, #12]
 8007132:	60b9      	str	r1, [r7, #8]
 8007134:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d036      	beq.n	80071ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007144:	6938      	ldr	r0, [r7, #16]
 8007146:	f000 f836 	bl	80071b6 <USBD_GetLen>
 800714a:	4603      	mov	r3, r0
 800714c:	3301      	adds	r3, #1
 800714e:	b29b      	uxth	r3, r3
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	7812      	ldrb	r2, [r2, #0]
 8007162:	701a      	strb	r2, [r3, #0]
  idx++;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	3301      	adds	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	2203      	movs	r2, #3
 8007172:	701a      	strb	r2, [r3, #0]
  idx++;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
 8007176:	3301      	adds	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800717a:	e013      	b.n	80071a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	3301      	adds	r3, #1
 800718c:	613b      	str	r3, [r7, #16]
    idx++;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	3301      	adds	r3, #1
 8007192:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	4413      	add	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
    idx++;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	3301      	adds	r3, #1
 80071a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1e7      	bne.n	800717c <USBD_GetString+0x52>
 80071ac:	e000      	b.n	80071b0 <USBD_GetString+0x86>
    return;
 80071ae:	bf00      	nop
  }
}
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071c6:	e005      	b.n	80071d4 <USBD_GetLen+0x1e>
  {
    len++;
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	3301      	adds	r3, #1
 80071cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1f5      	bne.n	80071c8 <USBD_GetLen+0x12>
  }

  return len;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68ba      	ldr	r2, [r7, #8]
 800720e:	2100      	movs	r1, #0
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fd29 	bl	8007c68 <USBD_LL_Transmit>

  return USBD_OK;
 8007216:	2300      	movs	r3, #0
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	2100      	movs	r1, #0
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fd18 	bl	8007c68 <USBD_LL_Transmit>

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2203      	movs	r2, #3
 8007252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	2100      	movs	r1, #0
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fd33 	bl	8007cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3710      	adds	r7, #16
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	2100      	movs	r1, #0
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fd22 	bl	8007cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ae:	2300      	movs	r3, #0
 80072b0:	2200      	movs	r2, #0
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fcd7 	bl	8007c68 <USBD_LL_Transmit>

  return USBD_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2205      	movs	r2, #5
 80072d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072d4:	2300      	movs	r3, #0
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fcfc 	bl	8007cd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072f0:	2200      	movs	r2, #0
 80072f2:	4912      	ldr	r1, [pc, #72]	; (800733c <MX_USB_DEVICE_Init+0x50>)
 80072f4:	4812      	ldr	r0, [pc, #72]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 80072f6:	f7fe ff09 	bl	800610c <USBD_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007300:	f7f9 f931 	bl	8000566 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007304:	490f      	ldr	r1, [pc, #60]	; (8007344 <MX_USB_DEVICE_Init+0x58>)
 8007306:	480e      	ldr	r0, [pc, #56]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 8007308:	f7fe ff30 	bl	800616c <USBD_RegisterClass>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007312:	f7f9 f928 	bl	8000566 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007316:	490c      	ldr	r1, [pc, #48]	; (8007348 <MX_USB_DEVICE_Init+0x5c>)
 8007318:	4809      	ldr	r0, [pc, #36]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 800731a:	f7fe fe8b 	bl	8006034 <USBD_CDC_RegisterInterface>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007324:	f7f9 f91f 	bl	8000566 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007328:	4805      	ldr	r0, [pc, #20]	; (8007340 <MX_USB_DEVICE_Init+0x54>)
 800732a:	f7fe ff46 	bl	80061ba <USBD_Start>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d001      	beq.n	8007338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007334:	f7f9 f917 	bl	8000566 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007338:	bf00      	nop
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20000130 	.word	0x20000130
 8007340:	200002d4 	.word	0x200002d4
 8007344:	20000018 	.word	0x20000018
 8007348:	2000011c 	.word	0x2000011c

0800734c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007350:	2200      	movs	r2, #0
 8007352:	4905      	ldr	r1, [pc, #20]	; (8007368 <CDC_Init_FS+0x1c>)
 8007354:	4805      	ldr	r0, [pc, #20]	; (800736c <CDC_Init_FS+0x20>)
 8007356:	f7fe fe82 	bl	800605e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800735a:	4905      	ldr	r1, [pc, #20]	; (8007370 <CDC_Init_FS+0x24>)
 800735c:	4803      	ldr	r0, [pc, #12]	; (800736c <CDC_Init_FS+0x20>)
 800735e:	f7fe fe97 	bl	8006090 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	2000098c 	.word	0x2000098c
 800736c:	200002d4 	.word	0x200002d4
 8007370:	200005a4 	.word	0x200005a4

08007374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	4603      	mov	r3, r0
 800738c:	6039      	str	r1, [r7, #0]
 800738e:	71fb      	strb	r3, [r7, #7]
 8007390:	4613      	mov	r3, r2
 8007392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b23      	cmp	r3, #35	; 0x23
 8007398:	d84a      	bhi.n	8007430 <CDC_Control_FS+0xac>
 800739a:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <CDC_Control_FS+0x1c>)
 800739c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a0:	08007431 	.word	0x08007431
 80073a4:	08007431 	.word	0x08007431
 80073a8:	08007431 	.word	0x08007431
 80073ac:	08007431 	.word	0x08007431
 80073b0:	08007431 	.word	0x08007431
 80073b4:	08007431 	.word	0x08007431
 80073b8:	08007431 	.word	0x08007431
 80073bc:	08007431 	.word	0x08007431
 80073c0:	08007431 	.word	0x08007431
 80073c4:	08007431 	.word	0x08007431
 80073c8:	08007431 	.word	0x08007431
 80073cc:	08007431 	.word	0x08007431
 80073d0:	08007431 	.word	0x08007431
 80073d4:	08007431 	.word	0x08007431
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007431 	.word	0x08007431
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007431 	.word	0x08007431
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007431 	.word	0x08007431
 8007400:	08007431 	.word	0x08007431
 8007404:	08007431 	.word	0x08007431
 8007408:	08007431 	.word	0x08007431
 800740c:	08007431 	.word	0x08007431
 8007410:	08007431 	.word	0x08007431
 8007414:	08007431 	.word	0x08007431
 8007418:	08007431 	.word	0x08007431
 800741c:	08007431 	.word	0x08007431
 8007420:	08007431 	.word	0x08007431
 8007424:	08007431 	.word	0x08007431
 8007428:	08007431 	.word	0x08007431
 800742c:	08007431 	.word	0x08007431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007430:	bf00      	nop
  }

  return (USBD_OK);
 8007432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4805      	ldr	r0, [pc, #20]	; (8007464 <CDC_Receive_FS+0x24>)
 800744e:	f7fe fe1f 	bl	8006090 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007452:	4804      	ldr	r0, [pc, #16]	; (8007464 <CDC_Receive_FS+0x24>)
 8007454:	f7fe fe30 	bl	80060b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007458:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200002d4 	.word	0x200002d4

08007468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800747a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800747e:	4618      	mov	r0, r3
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
	...

0800748c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	4603      	mov	r3, r0
 8007494:	6039      	str	r1, [r7, #0]
 8007496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2212      	movs	r2, #18
 800749c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800749e:	4b03      	ldr	r3, [pc, #12]	; (80074ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	20000150 	.word	0x20000150

080074b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b083      	sub	sp, #12
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2204      	movs	r2, #4
 80074c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000170 	.word	0x20000170

080074d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	4603      	mov	r3, r0
 80074dc:	6039      	str	r1, [r7, #0]
 80074de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d105      	bne.n	80074f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	4907      	ldr	r1, [pc, #28]	; (8007508 <USBD_FS_ProductStrDescriptor+0x34>)
 80074ea:	4808      	ldr	r0, [pc, #32]	; (800750c <USBD_FS_ProductStrDescriptor+0x38>)
 80074ec:	f7ff fe1d 	bl	800712a <USBD_GetString>
 80074f0:	e004      	b.n	80074fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80074f2:	683a      	ldr	r2, [r7, #0]
 80074f4:	4904      	ldr	r1, [pc, #16]	; (8007508 <USBD_FS_ProductStrDescriptor+0x34>)
 80074f6:	4805      	ldr	r0, [pc, #20]	; (800750c <USBD_FS_ProductStrDescriptor+0x38>)
 80074f8:	f7ff fe17 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000d74 	.word	0x20000d74
 800750c:	08007ffc 	.word	0x08007ffc

08007510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	4603      	mov	r3, r0
 8007518:	6039      	str	r1, [r7, #0]
 800751a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	4904      	ldr	r1, [pc, #16]	; (8007530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007520:	4804      	ldr	r0, [pc, #16]	; (8007534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007522:	f7ff fe02 	bl	800712a <USBD_GetString>
  return USBD_StrDesc;
 8007526:	4b02      	ldr	r3, [pc, #8]	; (8007530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000d74 	.word	0x20000d74
 8007534:	08008014 	.word	0x08008014

08007538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	221a      	movs	r2, #26
 8007548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800754a:	f000 f855 	bl	80075f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800754e:	4b02      	ldr	r3, [pc, #8]	; (8007558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007550:	4618      	mov	r0, r3
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20000174 	.word	0x20000174

0800755c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d105      	bne.n	800757a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4907      	ldr	r1, [pc, #28]	; (8007590 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007572:	4808      	ldr	r0, [pc, #32]	; (8007594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007574:	f7ff fdd9 	bl	800712a <USBD_GetString>
 8007578:	e004      	b.n	8007584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	4904      	ldr	r1, [pc, #16]	; (8007590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800757e:	4805      	ldr	r0, [pc, #20]	; (8007594 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007580:	f7ff fdd3 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007584:	4b02      	ldr	r3, [pc, #8]	; (8007590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20000d74 	.word	0x20000d74
 8007594:	08008028 	.word	0x08008028

08007598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075a4:	79fb      	ldrb	r3, [r7, #7]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4907      	ldr	r1, [pc, #28]	; (80075cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075ae:	4808      	ldr	r0, [pc, #32]	; (80075d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075b0:	f7ff fdbb 	bl	800712a <USBD_GetString>
 80075b4:	e004      	b.n	80075c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	4904      	ldr	r1, [pc, #16]	; (80075cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075ba:	4805      	ldr	r0, [pc, #20]	; (80075d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075bc:	f7ff fdb5 	bl	800712a <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c0:	4b02      	ldr	r3, [pc, #8]	; (80075cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20000d74 	.word	0x20000d74
 80075d0:	08008034 	.word	0x08008034

080075d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	220c      	movs	r2, #12
 80075e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80075e6:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	20000164 	.word	0x20000164

080075f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075fe:	4b0f      	ldr	r3, [pc, #60]	; (800763c <Get_SerialNum+0x44>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007604:	4b0e      	ldr	r3, [pc, #56]	; (8007640 <Get_SerialNum+0x48>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800760a:	4b0e      	ldr	r3, [pc, #56]	; (8007644 <Get_SerialNum+0x4c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4413      	add	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800761e:	2208      	movs	r2, #8
 8007620:	4909      	ldr	r1, [pc, #36]	; (8007648 <Get_SerialNum+0x50>)
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f000 f814 	bl	8007650 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007628:	2204      	movs	r2, #4
 800762a:	4908      	ldr	r1, [pc, #32]	; (800764c <Get_SerialNum+0x54>)
 800762c:	68b8      	ldr	r0, [r7, #8]
 800762e:	f000 f80f 	bl	8007650 <IntToUnicode>
  }
}
 8007632:	bf00      	nop
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	1fff7590 	.word	0x1fff7590
 8007640:	1fff7594 	.word	0x1fff7594
 8007644:	1fff7598 	.word	0x1fff7598
 8007648:	20000176 	.word	0x20000176
 800764c:	20000186 	.word	0x20000186

08007650 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	4613      	mov	r3, r2
 800765c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007662:	2300      	movs	r3, #0
 8007664:	75fb      	strb	r3, [r7, #23]
 8007666:	e027      	b.n	80076b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	0f1b      	lsrs	r3, r3, #28
 800766c:	2b09      	cmp	r3, #9
 800766e:	d80b      	bhi.n	8007688 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	0f1b      	lsrs	r3, r3, #28
 8007674:	b2da      	uxtb	r2, r3
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	4619      	mov	r1, r3
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	440b      	add	r3, r1
 8007680:	3230      	adds	r2, #48	; 0x30
 8007682:	b2d2      	uxtb	r2, r2
 8007684:	701a      	strb	r2, [r3, #0]
 8007686:	e00a      	b.n	800769e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	0f1b      	lsrs	r3, r3, #28
 800768c:	b2da      	uxtb	r2, r3
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4619      	mov	r1, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	440b      	add	r3, r1
 8007698:	3237      	adds	r2, #55	; 0x37
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	3301      	adds	r3, #1
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	3301      	adds	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]
 80076b8:	7dfa      	ldrb	r2, [r7, #23]
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d3d3      	bcc.n	8007668 <IntToUnicode+0x18>
  }
}
 80076c0:	bf00      	nop
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
 80076de:	609a      	str	r2, [r3, #8]
 80076e0:	60da      	str	r2, [r3, #12]
 80076e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a1c      	ldr	r2, [pc, #112]	; (800775c <HAL_PCD_MspInit+0x90>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d131      	bne.n	8007752 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ee:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <HAL_PCD_MspInit+0x94>)
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <HAL_PCD_MspInit+0x94>)
 80076f4:	f043 0301 	orr.w	r3, r3, #1
 80076f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80076fa:	4b19      	ldr	r3, [pc, #100]	; (8007760 <HAL_PCD_MspInit+0x94>)
 80076fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076fe:	f003 0301 	and.w	r3, r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800770a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800770c:	2302      	movs	r3, #2
 800770e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007710:	2300      	movs	r3, #0
 8007712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007714:	2303      	movs	r3, #3
 8007716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8007718:	230a      	movs	r3, #10
 800771a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800771c:	f107 0314 	add.w	r3, r7, #20
 8007720:	4619      	mov	r1, r3
 8007722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007726:	f7f9 fa1f 	bl	8000b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <HAL_PCD_MspInit+0x94>)
 800772c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772e:	4a0c      	ldr	r2, [pc, #48]	; (8007760 <HAL_PCD_MspInit+0x94>)
 8007730:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007734:	6593      	str	r3, [r2, #88]	; 0x58
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <HAL_PCD_MspInit+0x94>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007742:	2200      	movs	r2, #0
 8007744:	2100      	movs	r1, #0
 8007746:	2043      	movs	r0, #67	; 0x43
 8007748:	f7f9 f9d7 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800774c:	2043      	movs	r0, #67	; 0x43
 800774e:	f7f9 f9f0 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007752:	bf00      	nop
 8007754:	3728      	adds	r7, #40	; 0x28
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	40006800 	.word	0x40006800
 8007760:	40021000 	.word	0x40021000

08007764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f7fe fd68 	bl	8006250 <USBD_LL_SetupStage>
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800779a:	78fa      	ldrb	r2, [r7, #3]
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	440b      	add	r3, r1
 80077a8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7fe fda0 	bl	80062f6 <USBD_LL_DataOutStage>
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	6879      	ldr	r1, [r7, #4]
 80077d4:	4613      	mov	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	440b      	add	r3, r1
 80077de:	333c      	adds	r3, #60	; 0x3c
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	78fb      	ldrb	r3, [r7, #3]
 80077e4:	4619      	mov	r1, r3
 80077e6:	f7fe fde9 	bl	80063bc <USBD_LL_DataInStage>
}
 80077ea:	bf00      	nop
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe feed 	bl	80065e0 <USBD_LL_SOF>
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007816:	2301      	movs	r3, #1
 8007818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d001      	beq.n	8007826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007822:	f7f8 fea0 	bl	8000566 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	4611      	mov	r1, r2
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe fe9a 	bl	800656a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fe53 	bl	80064e8 <USBD_LL_Reset>
}
 8007842:	bf00      	nop
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fe95 	bl	800658a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d005      	beq.n	8007874 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007868:	4b04      	ldr	r3, [pc, #16]	; (800787c <HAL_PCD_SuspendCallback+0x30>)
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	4a03      	ldr	r2, [pc, #12]	; (800787c <HAL_PCD_SuspendCallback+0x30>)
 800786e:	f043 0306 	orr.w	r3, r3, #6
 8007872:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	e000ed00 	.word	0xe000ed00

08007880 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <HAL_PCD_ResumeCallback+0x34>)
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	4a07      	ldr	r2, [pc, #28]	; (80078b4 <HAL_PCD_ResumeCallback+0x34>)
 8007896:	f023 0306 	bic.w	r3, r3, #6
 800789a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800789c:	f000 fa9e 	bl	8007ddc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fe fe84 	bl	80065b4 <USBD_LL_Resume>
}
 80078ac:	bf00      	nop
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80078c0:	f7fa fffc 	bl	80028bc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80078c4:	4a2b      	ldr	r2, [pc, #172]	; (8007974 <USBD_LL_Init+0xbc>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a29      	ldr	r2, [pc, #164]	; (8007974 <USBD_LL_Init+0xbc>)
 80078d0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80078d4:	4b27      	ldr	r3, [pc, #156]	; (8007974 <USBD_LL_Init+0xbc>)
 80078d6:	4a28      	ldr	r2, [pc, #160]	; (8007978 <USBD_LL_Init+0xc0>)
 80078d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80078da:	4b26      	ldr	r3, [pc, #152]	; (8007974 <USBD_LL_Init+0xbc>)
 80078dc:	2208      	movs	r2, #8
 80078de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80078e0:	4b24      	ldr	r3, [pc, #144]	; (8007974 <USBD_LL_Init+0xbc>)
 80078e2:	2202      	movs	r2, #2
 80078e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <USBD_LL_Init+0xbc>)
 80078e8:	2202      	movs	r2, #2
 80078ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80078ec:	4b21      	ldr	r3, [pc, #132]	; (8007974 <USBD_LL_Init+0xbc>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80078f2:	4b20      	ldr	r3, [pc, #128]	; (8007974 <USBD_LL_Init+0xbc>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80078f8:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <USBD_LL_Init+0xbc>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80078fe:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <USBD_LL_Init+0xbc>)
 8007900:	2200      	movs	r2, #0
 8007902:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007904:	481b      	ldr	r0, [pc, #108]	; (8007974 <USBD_LL_Init+0xbc>)
 8007906:	f7f9 fbdf 	bl	80010c8 <HAL_PCD_Init>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8007910:	f7f8 fe29 	bl	8000566 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800791a:	2318      	movs	r3, #24
 800791c:	2200      	movs	r2, #0
 800791e:	2100      	movs	r1, #0
 8007920:	f7fa fefa 	bl	8002718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800792a:	2358      	movs	r3, #88	; 0x58
 800792c:	2200      	movs	r2, #0
 800792e:	2180      	movs	r1, #128	; 0x80
 8007930:	f7fa fef2 	bl	8002718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800793a:	23c0      	movs	r3, #192	; 0xc0
 800793c:	2200      	movs	r2, #0
 800793e:	2181      	movs	r1, #129	; 0x81
 8007940:	f7fa feea 	bl	8002718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800794a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800794e:	2200      	movs	r2, #0
 8007950:	2101      	movs	r1, #1
 8007952:	f7fa fee1 	bl	8002718 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800795c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007960:	2200      	movs	r2, #0
 8007962:	2182      	movs	r1, #130	; 0x82
 8007964:	f7fa fed8 	bl	8002718 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20000f74 	.word	0x20000f74
 8007978:	40006800 	.word	0x40006800

0800797c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007992:	4618      	mov	r0, r3
 8007994:	f7f9 fcaa 	bl	80012ec <HAL_PCD_Start>
 8007998:	4603      	mov	r3, r0
 800799a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d816      	bhi.n	80079d0 <USBD_LL_Start+0x54>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USBD_LL_Start+0x2c>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079b9 	.word	0x080079b9
 80079ac:	080079bf 	.word	0x080079bf
 80079b0:	080079c5 	.word	0x080079c5
 80079b4:	080079cb 	.word	0x080079cb
    case HAL_OK :
      usb_status = USBD_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	73fb      	strb	r3, [r7, #15]
    break;
 80079bc:	e00b      	b.n	80079d6 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80079be:	2303      	movs	r3, #3
 80079c0:	73fb      	strb	r3, [r7, #15]
    break;
 80079c2:	e008      	b.n	80079d6 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80079c4:	2301      	movs	r3, #1
 80079c6:	73fb      	strb	r3, [r7, #15]
    break;
 80079c8:	e005      	b.n	80079d6 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
    break;
 80079ce:	e002      	b.n	80079d6 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
    break;
 80079d4:	bf00      	nop
  }
  return usb_status;
 80079d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	4608      	mov	r0, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	461a      	mov	r2, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	70fb      	strb	r3, [r7, #3]
 80079f2:	460b      	mov	r3, r1
 80079f4:	70bb      	strb	r3, [r7, #2]
 80079f6:	4613      	mov	r3, r2
 80079f8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a08:	78bb      	ldrb	r3, [r7, #2]
 8007a0a:	883a      	ldrh	r2, [r7, #0]
 8007a0c:	78f9      	ldrb	r1, [r7, #3]
 8007a0e:	f7f9 fe02 	bl	8001616 <HAL_PCD_EP_Open>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a16:	7bbb      	ldrb	r3, [r7, #14]
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d817      	bhi.n	8007a4c <USBD_LL_OpenEP+0x6c>
 8007a1c:	a201      	add	r2, pc, #4	; (adr r2, 8007a24 <USBD_LL_OpenEP+0x44>)
 8007a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a22:	bf00      	nop
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a3b 	.word	0x08007a3b
 8007a2c:	08007a41 	.word	0x08007a41
 8007a30:	08007a47 	.word	0x08007a47
    case HAL_OK :
      usb_status = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73fb      	strb	r3, [r7, #15]
    break;
 8007a38:	e00b      	b.n	8007a52 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a3e:	e008      	b.n	8007a52 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
    break;
 8007a44:	e005      	b.n	8007a52 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a46:	2303      	movs	r3, #3
 8007a48:	73fb      	strb	r3, [r7, #15]
    break;
 8007a4a:	e002      	b.n	8007a52 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007a50:	bf00      	nop
  }
  return usb_status;
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7f9 fe31 	bl	80016e2 <HAL_PCD_EP_Close>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d816      	bhi.n	8007ab8 <USBD_LL_CloseEP+0x5c>
 8007a8a:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <USBD_LL_CloseEP+0x34>)
 8007a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007aa7 	.word	0x08007aa7
 8007a98:	08007aad 	.word	0x08007aad
 8007a9c:	08007ab3 	.word	0x08007ab3
    case HAL_OK :
      usb_status = USBD_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	e00b      	b.n	8007abe <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aaa:	e008      	b.n	8007abe <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007aac:	2301      	movs	r3, #1
 8007aae:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab0:	e005      	b.n	8007abe <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab6:	e002      	b.n	8007abe <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	73fb      	strb	r3, [r7, #15]
    break;
 8007abc:	bf00      	nop
  }
  return usb_status;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7f9 fedb 	bl	80018a2 <HAL_PCD_EP_SetStall>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d816      	bhi.n	8007b24 <USBD_LL_StallEP+0x5c>
 8007af6:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <USBD_LL_StallEP+0x34>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b0d 	.word	0x08007b0d
 8007b00:	08007b13 	.word	0x08007b13
 8007b04:	08007b19 	.word	0x08007b19
 8007b08:	08007b1f 	.word	0x08007b1f
    case HAL_OK :
      usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b10:	e00b      	b.n	8007b2a <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b12:	2303      	movs	r3, #3
 8007b14:	73fb      	strb	r3, [r7, #15]
    break;
 8007b16:	e008      	b.n	8007b2a <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b1c:	e005      	b.n	8007b2a <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	73fb      	strb	r3, [r7, #15]
    break;
 8007b22:	e002      	b.n	8007b2a <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	73fb      	strb	r3, [r7, #15]
    break;
 8007b28:	bf00      	nop
  }
  return usb_status;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7f9 ff05 	bl	8001962 <HAL_PCD_EP_ClrStall>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d816      	bhi.n	8007b90 <USBD_LL_ClearStallEP+0x5c>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USBD_LL_ClearStallEP+0x34>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b7f 	.word	0x08007b7f
 8007b70:	08007b85 	.word	0x08007b85
 8007b74:	08007b8b 	.word	0x08007b8b
    case HAL_OK :
      usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e00b      	b.n	8007b96 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	73fb      	strb	r3, [r7, #15]
    break;
 8007b82:	e008      	b.n	8007b96 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	e005      	b.n	8007b96 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b8e:	e002      	b.n	8007b96 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
    break;
 8007b94:	bf00      	nop
  }
  return usb_status;
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da0c      	bge.n	8007bd6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	440b      	add	r3, r1
 8007bd0:	3302      	adds	r3, #2
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	e00b      	b.n	8007bee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bdc:	68f9      	ldr	r1, [r7, #12]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	440b      	add	r3, r1
 8007be8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007bec:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7f9 fcd6 	bl	80015cc <HAL_PCD_SetAddress>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d816      	bhi.n	8007c58 <USBD_LL_SetUSBAddress+0x5c>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBD_LL_SetUSBAddress+0x34>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c47 	.word	0x08007c47
 8007c38:	08007c4d 	.word	0x08007c4d
 8007c3c:	08007c53 	.word	0x08007c53
    case HAL_OK :
      usb_status = USBD_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	e00b      	b.n	8007c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4a:	e008      	b.n	8007c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	e005      	b.n	8007c5e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c52:	2303      	movs	r3, #3
 8007c54:	73fb      	strb	r3, [r7, #15]
    break;
 8007c56:	e002      	b.n	8007c5e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c5c:	bf00      	nop
  }
  return usb_status;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	603b      	str	r3, [r7, #0]
 8007c74:	460b      	mov	r3, r1
 8007c76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c86:	7af9      	ldrb	r1, [r7, #11]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	f7f9 fdc6 	bl	800181c <HAL_PCD_EP_Transmit>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007c94:	7dbb      	ldrb	r3, [r7, #22]
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d816      	bhi.n	8007cc8 <USBD_LL_Transmit+0x60>
 8007c9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ca0 <USBD_LL_Transmit+0x38>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cb1 	.word	0x08007cb1
 8007ca4:	08007cb7 	.word	0x08007cb7
 8007ca8:	08007cbd 	.word	0x08007cbd
 8007cac:	08007cc3 	.word	0x08007cc3
    case HAL_OK :
      usb_status = USBD_OK;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]
    break;
 8007cb4:	e00b      	b.n	8007cce <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	75fb      	strb	r3, [r7, #23]
    break;
 8007cba:	e008      	b.n	8007cce <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	75fb      	strb	r3, [r7, #23]
    break;
 8007cc0:	e005      	b.n	8007cce <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	75fb      	strb	r3, [r7, #23]
    break;
 8007cc6:	e002      	b.n	8007cce <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	75fb      	strb	r3, [r7, #23]
    break;
 8007ccc:	bf00      	nop
  }
  return usb_status;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007cf6:	7af9      	ldrb	r1, [r7, #11]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	f7f9 fd39 	bl	8001772 <HAL_PCD_EP_Receive>
 8007d00:	4603      	mov	r3, r0
 8007d02:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007d04:	7dbb      	ldrb	r3, [r7, #22]
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d816      	bhi.n	8007d38 <USBD_LL_PrepareReceive+0x60>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <USBD_LL_PrepareReceive+0x38>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d27 	.word	0x08007d27
 8007d18:	08007d2d 	.word	0x08007d2d
 8007d1c:	08007d33 	.word	0x08007d33
    case HAL_OK :
      usb_status = USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	75fb      	strb	r3, [r7, #23]
    break;
 8007d24:	e00b      	b.n	8007d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d26:	2303      	movs	r3, #3
 8007d28:	75fb      	strb	r3, [r7, #23]
    break;
 8007d2a:	e008      	b.n	8007d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d30:	e005      	b.n	8007d3e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d32:	2303      	movs	r3, #3
 8007d34:	75fb      	strb	r3, [r7, #23]
    break;
 8007d36:	e002      	b.n	8007d3e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d3c:	bf00      	nop
  }
  return usb_status;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d5a:	78fa      	ldrb	r2, [r7, #3]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7f9 fd44 	bl	80017ec <HAL_PCD_EP_GetRxCount>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	460b      	mov	r3, r1
 8007d7a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007d7c:	78fb      	ldrb	r3, [r7, #3]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <HAL_PCDEx_LPM_Callback+0x18>
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d013      	beq.n	8007dae <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007d86:	e023      	b.n	8007dd0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007d90:	f000 f824 	bl	8007ddc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d94:	4b10      	ldr	r3, [pc, #64]	; (8007dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	4a0f      	ldr	r2, [pc, #60]	; (8007dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007d9a:	f023 0306 	bic.w	r3, r3, #6
 8007d9e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fc04 	bl	80065b4 <USBD_LL_Resume>
    break;
 8007dac:	e010      	b.n	8007dd0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fbe8 	bl	800658a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d005      	beq.n	8007dce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	4a04      	ldr	r2, [pc, #16]	; (8007dd8 <HAL_PCDEx_LPM_Callback+0x68>)
 8007dc8:	f043 0306 	orr.w	r3, r3, #6
 8007dcc:	6113      	str	r3, [r2, #16]
    break;
 8007dce:	bf00      	nop
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	e000ed00 	.word	0xe000ed00

08007ddc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 8007de0:	bf00      	nop
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
	...

08007dec <__errno>:
 8007dec:	4b01      	ldr	r3, [pc, #4]	; (8007df4 <__errno+0x8>)
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	20000190 	.word	0x20000190

08007df8 <__libc_init_array>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	4e0d      	ldr	r6, [pc, #52]	; (8007e30 <__libc_init_array+0x38>)
 8007dfc:	4c0d      	ldr	r4, [pc, #52]	; (8007e34 <__libc_init_array+0x3c>)
 8007dfe:	1ba4      	subs	r4, r4, r6
 8007e00:	10a4      	asrs	r4, r4, #2
 8007e02:	2500      	movs	r5, #0
 8007e04:	42a5      	cmp	r5, r4
 8007e06:	d109      	bne.n	8007e1c <__libc_init_array+0x24>
 8007e08:	4e0b      	ldr	r6, [pc, #44]	; (8007e38 <__libc_init_array+0x40>)
 8007e0a:	4c0c      	ldr	r4, [pc, #48]	; (8007e3c <__libc_init_array+0x44>)
 8007e0c:	f000 f8ea 	bl	8007fe4 <_init>
 8007e10:	1ba4      	subs	r4, r4, r6
 8007e12:	10a4      	asrs	r4, r4, #2
 8007e14:	2500      	movs	r5, #0
 8007e16:	42a5      	cmp	r5, r4
 8007e18:	d105      	bne.n	8007e26 <__libc_init_array+0x2e>
 8007e1a:	bd70      	pop	{r4, r5, r6, pc}
 8007e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e20:	4798      	blx	r3
 8007e22:	3501      	adds	r5, #1
 8007e24:	e7ee      	b.n	8007e04 <__libc_init_array+0xc>
 8007e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e2a:	4798      	blx	r3
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7f2      	b.n	8007e16 <__libc_init_array+0x1e>
 8007e30:	08008084 	.word	0x08008084
 8007e34:	08008084 	.word	0x08008084
 8007e38:	08008084 	.word	0x08008084
 8007e3c:	08008088 	.word	0x08008088

08007e40 <malloc>:
 8007e40:	4b02      	ldr	r3, [pc, #8]	; (8007e4c <malloc+0xc>)
 8007e42:	4601      	mov	r1, r0
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	f000 b861 	b.w	8007f0c <_malloc_r>
 8007e4a:	bf00      	nop
 8007e4c:	20000190 	.word	0x20000190

08007e50 <free>:
 8007e50:	4b02      	ldr	r3, [pc, #8]	; (8007e5c <free+0xc>)
 8007e52:	4601      	mov	r1, r0
 8007e54:	6818      	ldr	r0, [r3, #0]
 8007e56:	f000 b80b 	b.w	8007e70 <_free_r>
 8007e5a:	bf00      	nop
 8007e5c:	20000190 	.word	0x20000190

08007e60 <memset>:
 8007e60:	4402      	add	r2, r0
 8007e62:	4603      	mov	r3, r0
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d100      	bne.n	8007e6a <memset+0xa>
 8007e68:	4770      	bx	lr
 8007e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6e:	e7f9      	b.n	8007e64 <memset+0x4>

08007e70 <_free_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d045      	beq.n	8007f04 <_free_r+0x94>
 8007e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7c:	1f0c      	subs	r4, r1, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	18e4      	addlt	r4, r4, r3
 8007e84:	f000 f8ac 	bl	8007fe0 <__malloc_lock>
 8007e88:	4a1f      	ldr	r2, [pc, #124]	; (8007f08 <_free_r+0x98>)
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	b933      	cbnz	r3, 8007e9e <_free_r+0x2e>
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	6014      	str	r4, [r2, #0]
 8007e94:	4628      	mov	r0, r5
 8007e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9a:	f000 b8a2 	b.w	8007fe2 <__malloc_unlock>
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	d90c      	bls.n	8007ebc <_free_r+0x4c>
 8007ea2:	6821      	ldr	r1, [r4, #0]
 8007ea4:	1862      	adds	r2, r4, r1
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bf04      	itt	eq
 8007eaa:	681a      	ldreq	r2, [r3, #0]
 8007eac:	685b      	ldreq	r3, [r3, #4]
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	bf04      	itt	eq
 8007eb2:	1852      	addeq	r2, r2, r1
 8007eb4:	6022      	streq	r2, [r4, #0]
 8007eb6:	6004      	str	r4, [r0, #0]
 8007eb8:	e7ec      	b.n	8007e94 <_free_r+0x24>
 8007eba:	4613      	mov	r3, r2
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	b10a      	cbz	r2, 8007ec4 <_free_r+0x54>
 8007ec0:	42a2      	cmp	r2, r4
 8007ec2:	d9fa      	bls.n	8007eba <_free_r+0x4a>
 8007ec4:	6819      	ldr	r1, [r3, #0]
 8007ec6:	1858      	adds	r0, r3, r1
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d10b      	bne.n	8007ee4 <_free_r+0x74>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	4401      	add	r1, r0
 8007ed0:	1858      	adds	r0, r3, r1
 8007ed2:	4282      	cmp	r2, r0
 8007ed4:	6019      	str	r1, [r3, #0]
 8007ed6:	d1dd      	bne.n	8007e94 <_free_r+0x24>
 8007ed8:	6810      	ldr	r0, [r2, #0]
 8007eda:	6852      	ldr	r2, [r2, #4]
 8007edc:	605a      	str	r2, [r3, #4]
 8007ede:	4401      	add	r1, r0
 8007ee0:	6019      	str	r1, [r3, #0]
 8007ee2:	e7d7      	b.n	8007e94 <_free_r+0x24>
 8007ee4:	d902      	bls.n	8007eec <_free_r+0x7c>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	e7d3      	b.n	8007e94 <_free_r+0x24>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	1821      	adds	r1, r4, r0
 8007ef0:	428a      	cmp	r2, r1
 8007ef2:	bf04      	itt	eq
 8007ef4:	6811      	ldreq	r1, [r2, #0]
 8007ef6:	6852      	ldreq	r2, [r2, #4]
 8007ef8:	6062      	str	r2, [r4, #4]
 8007efa:	bf04      	itt	eq
 8007efc:	1809      	addeq	r1, r1, r0
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	605c      	str	r4, [r3, #4]
 8007f02:	e7c7      	b.n	8007e94 <_free_r+0x24>
 8007f04:	bd38      	pop	{r3, r4, r5, pc}
 8007f06:	bf00      	nop
 8007f08:	20000218 	.word	0x20000218

08007f0c <_malloc_r>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	1ccd      	adds	r5, r1, #3
 8007f10:	f025 0503 	bic.w	r5, r5, #3
 8007f14:	3508      	adds	r5, #8
 8007f16:	2d0c      	cmp	r5, #12
 8007f18:	bf38      	it	cc
 8007f1a:	250c      	movcc	r5, #12
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	4606      	mov	r6, r0
 8007f20:	db01      	blt.n	8007f26 <_malloc_r+0x1a>
 8007f22:	42a9      	cmp	r1, r5
 8007f24:	d903      	bls.n	8007f2e <_malloc_r+0x22>
 8007f26:	230c      	movs	r3, #12
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}
 8007f2e:	f000 f857 	bl	8007fe0 <__malloc_lock>
 8007f32:	4a21      	ldr	r2, [pc, #132]	; (8007fb8 <_malloc_r+0xac>)
 8007f34:	6814      	ldr	r4, [r2, #0]
 8007f36:	4621      	mov	r1, r4
 8007f38:	b991      	cbnz	r1, 8007f60 <_malloc_r+0x54>
 8007f3a:	4c20      	ldr	r4, [pc, #128]	; (8007fbc <_malloc_r+0xb0>)
 8007f3c:	6823      	ldr	r3, [r4, #0]
 8007f3e:	b91b      	cbnz	r3, 8007f48 <_malloc_r+0x3c>
 8007f40:	4630      	mov	r0, r6
 8007f42:	f000 f83d 	bl	8007fc0 <_sbrk_r>
 8007f46:	6020      	str	r0, [r4, #0]
 8007f48:	4629      	mov	r1, r5
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	f000 f838 	bl	8007fc0 <_sbrk_r>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d124      	bne.n	8007f9e <_malloc_r+0x92>
 8007f54:	230c      	movs	r3, #12
 8007f56:	6033      	str	r3, [r6, #0]
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 f842 	bl	8007fe2 <__malloc_unlock>
 8007f5e:	e7e4      	b.n	8007f2a <_malloc_r+0x1e>
 8007f60:	680b      	ldr	r3, [r1, #0]
 8007f62:	1b5b      	subs	r3, r3, r5
 8007f64:	d418      	bmi.n	8007f98 <_malloc_r+0x8c>
 8007f66:	2b0b      	cmp	r3, #11
 8007f68:	d90f      	bls.n	8007f8a <_malloc_r+0x7e>
 8007f6a:	600b      	str	r3, [r1, #0]
 8007f6c:	50cd      	str	r5, [r1, r3]
 8007f6e:	18cc      	adds	r4, r1, r3
 8007f70:	4630      	mov	r0, r6
 8007f72:	f000 f836 	bl	8007fe2 <__malloc_unlock>
 8007f76:	f104 000b 	add.w	r0, r4, #11
 8007f7a:	1d23      	adds	r3, r4, #4
 8007f7c:	f020 0007 	bic.w	r0, r0, #7
 8007f80:	1ac3      	subs	r3, r0, r3
 8007f82:	d0d3      	beq.n	8007f2c <_malloc_r+0x20>
 8007f84:	425a      	negs	r2, r3
 8007f86:	50e2      	str	r2, [r4, r3]
 8007f88:	e7d0      	b.n	8007f2c <_malloc_r+0x20>
 8007f8a:	428c      	cmp	r4, r1
 8007f8c:	684b      	ldr	r3, [r1, #4]
 8007f8e:	bf16      	itet	ne
 8007f90:	6063      	strne	r3, [r4, #4]
 8007f92:	6013      	streq	r3, [r2, #0]
 8007f94:	460c      	movne	r4, r1
 8007f96:	e7eb      	b.n	8007f70 <_malloc_r+0x64>
 8007f98:	460c      	mov	r4, r1
 8007f9a:	6849      	ldr	r1, [r1, #4]
 8007f9c:	e7cc      	b.n	8007f38 <_malloc_r+0x2c>
 8007f9e:	1cc4      	adds	r4, r0, #3
 8007fa0:	f024 0403 	bic.w	r4, r4, #3
 8007fa4:	42a0      	cmp	r0, r4
 8007fa6:	d005      	beq.n	8007fb4 <_malloc_r+0xa8>
 8007fa8:	1a21      	subs	r1, r4, r0
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 f808 	bl	8007fc0 <_sbrk_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d0cf      	beq.n	8007f54 <_malloc_r+0x48>
 8007fb4:	6025      	str	r5, [r4, #0]
 8007fb6:	e7db      	b.n	8007f70 <_malloc_r+0x64>
 8007fb8:	20000218 	.word	0x20000218
 8007fbc:	2000021c 	.word	0x2000021c

08007fc0 <_sbrk_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4c06      	ldr	r4, [pc, #24]	; (8007fdc <_sbrk_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	f7f8 fbb0 	bl	8000730 <_sbrk>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_sbrk_r+0x1a>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_sbrk_r+0x1a>
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	20001268 	.word	0x20001268

08007fe0 <__malloc_lock>:
 8007fe0:	4770      	bx	lr

08007fe2 <__malloc_unlock>:
 8007fe2:	4770      	bx	lr

08007fe4 <_init>:
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fe6:	bf00      	nop
 8007fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fea:	bc08      	pop	{r3}
 8007fec:	469e      	mov	lr, r3
 8007fee:	4770      	bx	lr

08007ff0 <_fini>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr
