
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c4c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e60  08009e60  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08009e60  08009e60  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e60  08009e60  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009e60  08009e60  00019e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  200001f4  0800a060  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  0800a060  00021648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c79  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000052d6  00000000  00000000  00046e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a10  00000000  00000000  0004c178  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  0004db88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000220e2  00000000  00000000  0004f300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b71a  00000000  00000000  000713e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b129e  00000000  00000000  0008cafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013dd9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af8  00000000  00000000  0013de18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08009dc0 	.word	0x08009dc0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	08009dc0 	.word	0x08009dc0

080001cc <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	33e0      	adds	r3, #224	; 0xe0
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 f81d 	bl	8001218 <_ZN5ModelC1Ev>
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	33e0      	adds	r3, #224	; 0xe0
 80001e8:	2201      	movs	r2, #1
 80001ea:	4619      	mov	r1, r3
 80001ec:	f000 fe92 	bl	8000f14 <_ZN8LoadCellC1EP5Modelh>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	f503 70b6 	add.w	r0, r3, #364	; 0x16c
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	33e0      	adds	r3, #224	; 0xe0
 80001fa:	2202      	movs	r2, #2
 80001fc:	4619      	mov	r1, r3
 80001fe:	f000 fe89 	bl	8000f14 <_ZN8LoadCellC1EP5Modelh>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000208:	4618      	mov	r0, r3
 800020a:	f001 f865 	bl	80012d8 <_ZN13ScreenControlC1Ev>
	// TODO Auto-generated constructor stub
	comSettings2.CS_Pin = LC2_CS_Pin;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2240      	movs	r2, #64	; 0x40
 8000212:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	comSettings2.CS_Port = LC2_CS_GPIO_Port;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a12      	ldr	r2, [pc, #72]	; (8000264 <_ZN7AppMainC1Ev+0x98>)
 800021a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	comSettings2.timeOut = 100;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2264      	movs	r2, #100	; 0x64
 8000222:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	comSettings2.hspi = hspi1;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a0f      	ldr	r2, [pc, #60]	; (8000268 <_ZN7AppMainC1Ev+0x9c>)
 800022a:	3370      	adds	r3, #112	; 0x70
 800022c:	4611      	mov	r1, r2
 800022e:	2264      	movs	r2, #100	; 0x64
 8000230:	4618      	mov	r0, r3
 8000232:	f009 fcf7 	bl	8009c24 <memcpy>

	comSettings1.CS_Pin = LC1_CS_Pin;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2280      	movs	r2, #128	; 0x80
 800023a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	comSettings1.CS_Port = LC1_CS_GPIO_Port;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <_ZN7AppMainC1Ev+0x98>)
 8000242:	665a      	str	r2, [r3, #100]	; 0x64
	comSettings1.timeOut = 100;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2264      	movs	r2, #100	; 0x64
 8000248:	66da      	str	r2, [r3, #108]	; 0x6c
	comSettings1.hspi = hspi1;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a06      	ldr	r2, [pc, #24]	; (8000268 <_ZN7AppMainC1Ev+0x9c>)
 800024e:	4618      	mov	r0, r3
 8000250:	4611      	mov	r1, r2
 8000252:	2364      	movs	r3, #100	; 0x64
 8000254:	461a      	mov	r2, r3
 8000256:	f009 fce5 	bl	8009c24 <memcpy>



}
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4618      	mov	r0, r3
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	48000400 	.word	0x48000400
 8000268:	200005fc 	.word	0x200005fc

0800026c <_ZN7AppMain5mainFEv>:



uint32_t testCounter = 0;

void AppMain::mainF(){
 800026c:	b5b0      	push	{r4, r5, r7, lr}
 800026e:	b09c      	sub	sp, #112	; 0x70
 8000270:	af1a      	add	r7, sp, #104	; 0x68
 8000272:	6078      	str	r0, [r7, #4]

	loadCell1.InitLoadCell(comSettings1);
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f103 05f4 	add.w	r5, r3, #244	; 0xf4
 800027a:	687c      	ldr	r4, [r7, #4]
 800027c:	4668      	mov	r0, sp
 800027e:	f104 030c 	add.w	r3, r4, #12
 8000282:	2264      	movs	r2, #100	; 0x64
 8000284:	4619      	mov	r1, r3
 8000286:	f009 fccd 	bl	8009c24 <memcpy>
 800028a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800028e:	4628      	mov	r0, r5
 8000290:	f000 fe67 	bl	8000f62 <_ZN8LoadCell12InitLoadCellE11ComSettings>
	loadCell2.InitLoadCell(comSettings2);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f503 75b6 	add.w	r5, r3, #364	; 0x16c
 800029a:	687c      	ldr	r4, [r7, #4]
 800029c:	4668      	mov	r0, sp
 800029e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 80002a2:	2264      	movs	r2, #100	; 0x64
 80002a4:	4619      	mov	r1, r3
 80002a6:	f009 fcbd 	bl	8009c24 <memcpy>
 80002aa:	f104 0370 	add.w	r3, r4, #112	; 0x70
 80002ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002b0:	4628      	mov	r0, r5
 80002b2:	f000 fe56 	bl	8000f62 <_ZN8LoadCell12InitLoadCellE11ComSettings>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2140      	movs	r1, #64	; 0x40
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f001 fbcd 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f001 f90b 	bl	80014e0 <HAL_Delay>
	screenControl.InitScreen();
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 f84c 	bl	800136e <_ZN13ScreenControl10InitScreenEv>



	while(true){

		if(testCounter < 9950030){
 80002d6:	4b27      	ldr	r3, [pc, #156]	; (8000374 <_ZN7AppMain5mainFEv+0x108>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a27      	ldr	r2, [pc, #156]	; (8000378 <_ZN7AppMain5mainFEv+0x10c>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d809      	bhi.n	80002f4 <_ZN7AppMain5mainFEv+0x88>
			testCounter = 0;
 80002e0:	4b24      	ldr	r3, [pc, #144]	; (8000374 <_ZN7AppMain5mainFEv+0x108>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
			loadCell2.Update();
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 fe2d 	bl	8000f4c <_ZN8LoadCell6UpdateEv>
 80002f2:	e004      	b.n	80002fe <_ZN7AppMain5mainFEv+0x92>
		}else{
			testCounter++;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <_ZN7AppMain5mainFEv+0x108>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	3301      	adds	r3, #1
 80002fa:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <_ZN7AppMain5mainFEv+0x108>)
 80002fc:	6013      	str	r3, [r2, #0]
		}

		  if(HAL_GPIO_ReadPin(SW_TAR_GPIO_Port, SW_TAR_Pin) == GPIO_PIN_SET){
 80002fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000306:	f001 fb91 	bl	8001a2c <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b01      	cmp	r3, #1
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d006      	beq.n	8000328 <_ZN7AppMain5mainFEv+0xbc>
			  HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 800031a:	2200      	movs	r2, #0
 800031c:	2110      	movs	r1, #16
 800031e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000322:	f001 fb9b 	bl	8001a5c <HAL_GPIO_WritePin>
 8000326:	e005      	b.n	8000334 <_ZN7AppMain5mainFEv+0xc8>
		  }else{
			  HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8000328:	2201      	movs	r2, #1
 800032a:	2110      	movs	r1, #16
 800032c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000330:	f001 fb94 	bl	8001a5c <HAL_GPIO_WritePin>
		  }

		  if(HAL_GPIO_ReadPin(SW_TOTAL_GPIO_Port, SW_TOTAL_Pin) == GPIO_PIN_SET){
 8000334:	2102      	movs	r1, #2
 8000336:	4811      	ldr	r0, [pc, #68]	; (800037c <_ZN7AppMain5mainFEv+0x110>)
 8000338:	f001 fb78 	bl	8001a2c <HAL_GPIO_ReadPin>
 800033c:	4603      	mov	r3, r0
 800033e:	2b01      	cmp	r3, #1

		  }else{

		  }

		  if(HAL_GPIO_ReadPin(SW_SUM_GPIO_Port, SW_SUM_Pin) == GPIO_PIN_SET){
 8000340:	2180      	movs	r1, #128	; 0x80
 8000342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000346:	f001 fb71 	bl	8001a2c <HAL_GPIO_ReadPin>
 800034a:	4603      	mov	r3, r0
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf0c      	ite	eq
 8000350:	2301      	moveq	r3, #1
 8000352:	2300      	movne	r3, #0
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d005      	beq.n	8000366 <_ZN7AppMain5mainFEv+0xfa>
			  HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2101      	movs	r1, #1
 800035e:	4807      	ldr	r0, [pc, #28]	; (800037c <_ZN7AppMain5mainFEv+0x110>)
 8000360:	f001 fb7c 	bl	8001a5c <HAL_GPIO_WritePin>
 8000364:	e7b7      	b.n	80002d6 <_ZN7AppMain5mainFEv+0x6a>
		  }else{
			  HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2101      	movs	r1, #1
 800036a:	4804      	ldr	r0, [pc, #16]	; (800037c <_ZN7AppMain5mainFEv+0x110>)
 800036c:	f001 fb76 	bl	8001a5c <HAL_GPIO_WritePin>
		if(testCounter < 9950030){
 8000370:	e7b1      	b.n	80002d6 <_ZN7AppMain5mainFEv+0x6a>
 8000372:	bf00      	nop
 8000374:	20000210 	.word	0x20000210
 8000378:	0097d34d 	.word	0x0097d34d
 800037c:	48000400 	.word	0x48000400

08000380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	; 0x28
 8000384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b50      	ldr	r3, [pc, #320]	; (80004d8 <MX_GPIO_Init+0x158>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a4f      	ldr	r2, [pc, #316]	; (80004d8 <MX_GPIO_Init+0x158>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b4a      	ldr	r3, [pc, #296]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a49      	ldr	r2, [pc, #292]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b47      	ldr	r3, [pc, #284]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b44      	ldr	r3, [pc, #272]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a43      	ldr	r2, [pc, #268]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b41      	ldr	r3, [pc, #260]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003de:	4b3e      	ldr	r3, [pc, #248]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	4a3d      	ldr	r2, [pc, #244]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ea:	4b3b      	ldr	r3, [pc, #236]	; (80004d8 <MX_GPIO_Init+0x158>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80003fc:	4837      	ldr	r0, [pc, #220]	; (80004dc <MX_GPIO_Init+0x15c>)
 80003fe:	f001 fb2d 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000402:	2200      	movs	r2, #0
 8000404:	f248 0157 	movw	r1, #32855	; 0x8057
 8000408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800040c:	f001 fb26 	bl	8001a5c <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LC2_CS_Pin|LC1_CS_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	21c1      	movs	r1, #193	; 0xc1
 8000414:	4832      	ldr	r0, [pc, #200]	; (80004e0 <MX_GPIO_Init+0x160>)
 8000416:	f001 fb21 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2108      	movs	r1, #8
 800041e:	4831      	ldr	r0, [pc, #196]	; (80004e4 <MX_GPIO_Init+0x164>)
 8000420:	f001 fb1c 	bl	8001a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000424:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2300      	movs	r3, #0
 8000434:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000436:	f107 0314 	add.w	r3, r7, #20
 800043a:	4619      	mov	r1, r3
 800043c:	4827      	ldr	r0, [pc, #156]	; (80004dc <MX_GPIO_Init+0x15c>)
 800043e:	f001 f983 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000442:	f248 0357 	movw	r3, #32855	; 0x8057
 8000446:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2300      	movs	r3, #0
 8000452:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4619      	mov	r1, r3
 800045a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045e:	f001 f973 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 8000462:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f001 f965 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LC2_CS_Pin|LC1_CS_Pin;
 800047e:	23c1      	movs	r3, #193	; 0xc1
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2300      	movs	r3, #0
 800048c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800048e:	f107 0314 	add.w	r3, r7, #20
 8000492:	4619      	mov	r1, r3
 8000494:	4812      	ldr	r0, [pc, #72]	; (80004e0 <MX_GPIO_Init+0x160>)
 8000496:	f001 f957 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 800049a:	2302      	movs	r3, #2
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 80004a6:	f107 0314 	add.w	r3, r7, #20
 80004aa:	4619      	mov	r1, r3
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <MX_GPIO_Init+0x160>)
 80004ae:	f001 f94b 	bl	8001748 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 80004b2:	2308      	movs	r3, #8
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2300      	movs	r3, #0
 80004c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4619      	mov	r1, r3
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <MX_GPIO_Init+0x164>)
 80004ca:	f001 f93d 	bl	8001748 <HAL_GPIO_Init>

}
 80004ce:	bf00      	nop
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40021000 	.word	0x40021000
 80004dc:	48000800 	.word	0x48000800
 80004e0:	48000400 	.word	0x48000400
 80004e4:	48001c00 	.word	0x48001c00

080004e8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	; (800055c <MX_I2C1_Init+0x74>)
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <MX_I2C1_Init+0x78>)
 80004f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	; (800055c <MX_I2C1_Init+0x74>)
 80004f4:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_I2C1_Init+0x7c>)
 80004f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <MX_I2C1_Init+0x74>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004fe:	4b17      	ldr	r3, [pc, #92]	; (800055c <MX_I2C1_Init+0x74>)
 8000500:	2201      	movs	r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000504:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_I2C1_Init+0x74>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <MX_I2C1_Init+0x74>)
 800050c:	2200      	movs	r2, #0
 800050e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_I2C1_Init+0x74>)
 8000512:	2200      	movs	r2, #0
 8000514:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_I2C1_Init+0x74>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051c:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_I2C1_Init+0x74>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000522:	480e      	ldr	r0, [pc, #56]	; (800055c <MX_I2C1_Init+0x74>)
 8000524:	f001 fab2 	bl	8001a8c <HAL_I2C_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800052e:	f000 f90b 	bl	8000748 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <MX_I2C1_Init+0x74>)
 8000536:	f001 fb38 	bl	8001baa <HAL_I2CEx_ConfigAnalogFilter>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000540:	f000 f902 	bl	8000748 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000544:	2100      	movs	r1, #0
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <MX_I2C1_Init+0x74>)
 8000548:	f001 fb7a 	bl	8001c40 <HAL_I2CEx_ConfigDigitalFilter>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000552:	f000 f8f9 	bl	8000748 <Error_Handler>
  }

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	200005b0 	.word	0x200005b0
 8000560:	40005400 	.word	0x40005400
 8000564:	10909cec 	.word	0x10909cec

08000568 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0314 	add.w	r3, r7, #20
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <HAL_I2C_MspInit+0x80>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d129      	bne.n	80005de <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_I2C_MspInit+0x84>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_I2C_MspInit+0x84>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000596:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_I2C_MspInit+0x84>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005a8:	2312      	movs	r3, #18
 80005aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005b4:	2304      	movs	r3, #4
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4619      	mov	r1, r3
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f001 f8c1 	bl	8001748 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_I2C_MspInit+0x84>)
 80005c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ca:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_I2C_MspInit+0x84>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d0:	6593      	str	r3, [r2, #88]	; 0x58
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_I2C_MspInit+0x84>)
 80005d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40005400 	.word	0x40005400
 80005ec:	40021000 	.word	0x40021000

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 feff 	bl	80013f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f820 	bl	800063c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f7ff fec0 	bl	8000380 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000600:	f7ff ff72 	bl	80004e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000604:	f000 f8c6 	bl	8000794 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000608:	f008 fd52 	bl	80090b0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800060c:	f000 fa0c 	bl	8000a28 <MX_TIM1_Init>

  HAL_I2C_MspInit(&hi2c1);
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <main+0x40>)
 8000612:	f7ff ffa9 	bl	8000568 <HAL_I2C_MspInit>
  HAL_SPI_MspInit(&hspi1);
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0x44>)
 8000618:	f000 f8fa 	bl	8000810 <HAL_SPI_MspInit>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2140      	movs	r1, #64	; 0x40
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 fa1a 	bl	8001a5c <HAL_GPIO_WritePin>
  /* USER CODE BEGIN 2 */
appMain.mainF();
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <main+0x48>)
 800062a:	f7ff fe1f 	bl	800026c <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0x3e>
 8000630:	200005b0 	.word	0x200005b0
 8000634:	200005fc 	.word	0x200005fc
 8000638:	20000214 	.word	0x20000214

0800063c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b0a4      	sub	sp, #144	; 0x90
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000646:	2244      	movs	r2, #68	; 0x44
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 faf5 	bl	8009c3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f009 fae7 	bl	8009c3a <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000670:	f002 fed6 	bl	8003420 <HAL_PWREx_ControlVoltageScaling>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2301      	movne	r3, #1
 800067c:	2300      	moveq	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 8000684:	f000 f860 	bl	8000748 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000688:	2312      	movs	r3, #18
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2340      	movs	r3, #64	; 0x40
 8000694:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000696:	2301      	movs	r3, #1
 8000698:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800069e:	23b0      	movs	r3, #176	; 0xb0
 80006a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a6:	2302      	movs	r3, #2
 80006a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006b0:	230a      	movs	r3, #10
 80006b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ff10 	bl	80034ec <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	bf14      	ite	ne
 80006d2:	2301      	movne	r3, #1
 80006d4:	2300      	moveq	r3, #0
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80006dc:	f000 f834 	bl	8000748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006f8:	2104      	movs	r1, #4
 80006fa:	4618      	mov	r0, r3
 80006fc:	f003 fb5c 	bl	8003db8 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000710:	f000 f81a 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000714:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000718:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800071e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fd12 	bl	8004150 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	bf14      	ite	ne
 8000732:	2301      	movne	r3, #1
 8000734:	2300      	moveq	r3, #0
 8000736:	b2db      	uxtb	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 800073c:	f000 f804 	bl	8000748 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3790      	adds	r7, #144	; 0x90
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <_Z41__static_initialization_and_destruction_0ii>:
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d107      	bne.n	8000778 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076e:	4293      	cmp	r3, r2
 8000770:	d102      	bne.n	8000778 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000774:	f7ff fd2a 	bl	80001cc <_ZN7AppMainC1Ev>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000214 	.word	0x20000214

08000784 <_GLOBAL__sub_I_appMain>:
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
 8000788:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ffe3 	bl	8000758 <_Z41__static_initialization_and_destruction_0ii>
 8000792:	bd80      	pop	{r7, pc}

08000794 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

	  hspi1.Instance = SPI1;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_SPI1_Init+0x74>)
 800079a:	4a1c      	ldr	r2, [pc, #112]	; (800080c <MX_SPI1_Init+0x78>)
 800079c:	601a      	str	r2, [r3, #0]
	  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
	  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_SPI1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
	  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007b2:	60da      	str	r2, [r3, #12]
	  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_SPI1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
	  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_SPI1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
	  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_SPI1_Init+0x74>)
 80007c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c6:	619a      	str	r2, [r3, #24]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ca:	2238      	movs	r2, #56	; 0x38
 80007cc:	61da      	str	r2, [r3, #28]
	  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
	  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_SPI1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
	  hspi1.Init.CRCPolynomial = 7;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e2:	2207      	movs	r2, #7
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
	  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_SPI1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
	  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_SPI1_Init+0x74>)
 80007f4:	f003 fe32 	bl	800445c <HAL_SPI_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_SPI1_Init+0x6e>
	  {
	    Error_Handler();
 80007fe:	f7ff ffa3 	bl	8000748 <Error_Handler>
	  }

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200005fc 	.word	0x200005fc
 800080c:	40013000 	.word	0x40013000

08000810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_SPI_MspInit+0x7c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d127      	bne.n	8000882 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000836:	4a16      	ldr	r2, [pc, #88]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800083c:	6613      	str	r3, [r2, #96]	; 0x60
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_SPI_MspInit+0x80>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_SPI_MspInit+0x80>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000862:	2338      	movs	r3, #56	; 0x38
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000872:	2305      	movs	r3, #5
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_SPI_MspInit+0x84>)
 800087e:	f000 ff63 	bl	8001748 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40013000 	.word	0x40013000
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	; 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 fdb4 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USB_IRQHandler+0x10>)
 8000942:	f001 fafd 	bl	8001f40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20001350 	.word	0x20001350

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f009 f916 	bl	8009bb0 <__errno>
 8000984:	4602      	mov	r2, r0
 8000986:	230c      	movs	r3, #12
 8000988:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000a000 	.word	0x2000a000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	20000408 	.word	0x20000408
 80009b8:	20001648 	.word	0x20001648

080009bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <SystemInit+0x64>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <SystemInit+0x64>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <SystemInit+0x68>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <SystemInit+0x68>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <SystemInit+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <SystemInit+0x68>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <SystemInit+0x68>)
 80009e8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009ec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <SystemInit+0x68>)
 80009f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009f8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <SystemInit+0x68>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <SystemInit+0x68>)
 8000a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <SystemInit+0x68>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x64>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <MX_TIM1_Init+0xa4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 8000a4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a4e:	2210      	movs	r2, #16
 8000a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a72:	4815      	ldr	r0, [pc, #84]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a74:	f004 fbfa 	bl	800526c <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a7e:	f7ff fe63 	bl	8000748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480e      	ldr	r0, [pc, #56]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000a90:	f004 fc43 	bl	800531a <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a9a:	f7ff fe55 	bl	8000748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_TIM1_Init+0xa0>)
 8000ab0:	f004 fdea 	bl	8005688 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000aba:	f7ff fe45 	bl	8000748 <Error_Handler>
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3720      	adds	r7, #32
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000660 	.word	0x20000660
 8000acc:	40012c00 	.word	0x40012c00

08000ad0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_TIM_Base_MspInit+0x38>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d10b      	bne.n	8000afa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aec:	6613      	str	r3, [r2, #96]	; 0x60
 8000aee:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	3714      	adds	r7, #20
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	40021000 	.word	0x40021000

08000b10 <_ZN3LCDC1Ev>:
#include "LCD.h"
#include "main.h"



LCD::LCD() {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	HAL_Delay(100);
 8000b30:	2064      	movs	r0, #100	; 0x64
 8000b32:	f000 fcd5 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 ff8d 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2104      	movs	r1, #4
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 ff87 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2108      	movs	r1, #8
 8000b52:	483d      	ldr	r0, [pc, #244]	; (8000c48 <_ZN3LCD7InitLCDEv+0x120>)
 8000b54:	f000 ff82 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 ff7b 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4837      	ldr	r0, [pc, #220]	; (8000c4c <_ZN3LCD7InitLCDEv+0x124>)
 8000b6e:	f000 ff75 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	4834      	ldr	r0, [pc, #208]	; (8000c4c <_ZN3LCD7InitLCDEv+0x124>)
 8000b7a:	f000 ff6f 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2101      	movs	r1, #1
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 ff69 	bl	8001a5c <HAL_GPIO_WritePin>


	HAL_Delay(100);
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f000 fca8 	bl	80014e0 <HAL_Delay>
	WriteCommaandWwakeUp(0x30);
 8000b90:	2130      	movs	r1, #48	; 0x30
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f85c 	bl	8000c50 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(30);
 8000b98:	201e      	movs	r0, #30
 8000b9a:	f000 fca1 	bl	80014e0 <HAL_Delay>

	WriteCommaandWwakeUp(0x30);
 8000b9e:	2130      	movs	r1, #48	; 0x30
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f855 	bl	8000c50 <_ZN3LCD20WriteCommaandWwakeUpEh>

	HAL_Delay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f000 fc9a 	bl	80014e0 <HAL_Delay>

	WriteCommaandWwakeUp(0x30);
 8000bac:	2130      	movs	r1, #48	; 0x30
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f84e 	bl	8000c50 <_ZN3LCD20WriteCommaandWwakeUpEh>

	HAL_Delay(10);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f000 fc93 	bl	80014e0 <HAL_Delay>

	WriteCommaandWwakeUp(0x20);
 8000bba:	2120      	movs	r1, #32
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 f847 	bl	8000c50 <_ZN3LCD20WriteCommaandWwakeUpEh>
	HAL_Delay(10);
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f000 fc8c 	bl	80014e0 <HAL_Delay>
	WriteCommand(0x28);
 8000bc8:	2128      	movs	r1, #40	; 0x28
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f88a 	bl	8000ce4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(10);
 8000bd0:	200a      	movs	r0, #10
 8000bd2:	f000 fc85 	bl	80014e0 <HAL_Delay>
	WriteCommand(0x10); //Set cursor
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f883 	bl	8000ce4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(10);
 8000bde:	200a      	movs	r0, #10
 8000be0:	f000 fc7e 	bl	80014e0 <HAL_Delay>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 8000be4:	210f      	movs	r1, #15
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f87c 	bl	8000ce4 <_ZN3LCD12WriteCommandEh>
	HAL_Delay(10);
 8000bec:	200a      	movs	r0, #10
 8000bee:	f000 fc77 	bl	80014e0 <HAL_Delay>
	WriteCommand(0x06);
 8000bf2:	2106      	movs	r1, #6
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f875 	bl	8000ce4 <_ZN3LCD12WriteCommandEh>


	HAL_Delay(50);
 8000bfa:	2032      	movs	r0, #50	; 0x32
 8000bfc:	f000 fc70 	bl	80014e0 <HAL_Delay>
	WriteData(0x31);
 8000c00:	2131      	movs	r1, #49	; 0x31
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f8fa 	bl	8000dfc <_ZN3LCD9WriteDataEh>
	HAL_Delay(10);
 8000c08:	200a      	movs	r0, #10
 8000c0a:	f000 fc69 	bl	80014e0 <HAL_Delay>
	WriteData(0x32);
 8000c0e:	2132      	movs	r1, #50	; 0x32
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 f8f3 	bl	8000dfc <_ZN3LCD9WriteDataEh>
	HAL_Delay(10);
 8000c16:	200a      	movs	r0, #10
 8000c18:	f000 fc62 	bl	80014e0 <HAL_Delay>
	WriteData(0x33);
 8000c1c:	2133      	movs	r1, #51	; 0x33
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f8ec 	bl	8000dfc <_ZN3LCD9WriteDataEh>
	HAL_Delay(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f000 fc5b 	bl	80014e0 <HAL_Delay>
	WriteData(0x34);
 8000c2a:	2134      	movs	r1, #52	; 0x34
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f000 f8e5 	bl	8000dfc <_ZN3LCD9WriteDataEh>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f000 ff0f 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48001c00 	.word	0x48001c00
 8000c4c:	48000800 	.word	0x48000800

08000c50 <_ZN3LCD20WriteCommaandWwakeUpEh>:

void LCD::Write(char* lin1, char* line2){

}

void LCD::WriteCommaandWwakeUp(uint8_t data){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 8000c5c:	78fb      	ldrb	r3, [r7, #3]
 8000c5e:	111b      	asrs	r3, r3, #4
 8000c60:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c72:	f000 fef3 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8000c76:	7bfb      	ldrb	r3, [r7, #15]
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	2104      	movs	r1, #4
 8000c82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c86:	f000 fee9 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	2108      	movs	r1, #8
 8000c96:	4812      	ldr	r0, [pc, #72]	; (8000ce0 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 8000c98:	f000 fee0 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	f003 0308 	and.w	r3, r3, #8
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cae:	f000 fed5 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fc14 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	2101      	movs	r1, #1
 8000cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc0:	f000 fecc 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 fc0b 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2101      	movs	r1, #1
 8000cce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd2:	f000 fec3 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	48001c00 	.word	0x48001c00

08000ce4 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf6:	483f      	ldr	r0, [pc, #252]	; (8000df4 <_ZN3LCD12WriteCommandEh+0x110>)
 8000cf8:	f000 feb0 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d02:	483c      	ldr	r0, [pc, #240]	; (8000df4 <_ZN3LCD12WriteCommandEh+0x110>)
 8000d04:	f000 feaa 	bl	8001a5c <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 8000d08:	78fb      	ldrb	r3, [r7, #3]
 8000d0a:	111b      	asrs	r3, r3, #4
 8000d0c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	461a      	mov	r2, r3
 8000d18:	2102      	movs	r1, #2
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1e:	f000 fe9d 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d32:	f000 fe93 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f003 0304 	and.w	r3, r3, #4
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2108      	movs	r1, #8
 8000d42:	482d      	ldr	r0, [pc, #180]	; (8000df8 <_ZN3LCD12WriteCommandEh+0x114>)
 8000d44:	f000 fe8a 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	461a      	mov	r2, r3
 8000d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f000 fe7f 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d66:	f000 fe79 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 fbb8 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2101      	movs	r1, #1
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f000 fe70 	bl	8001a5c <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	461a      	mov	r2, r3
 8000d86:	2102      	movs	r1, #2
 8000d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8c:	f000 fe66 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fe5c 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8000da4:	78fb      	ldrb	r3, [r7, #3]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	2108      	movs	r1, #8
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <_ZN3LCD12WriteCommandEh+0x114>)
 8000db2:	f000 fe53 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc8:	f000 fe48 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dd4:	f000 fe42 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fb81 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f000 fe39 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	48000800 	.word	0x48000800
 8000df8:	48001c00 	.word	0x48001c00

08000dfc <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0e:	483f      	ldr	r0, [pc, #252]	; (8000f0c <_ZN3LCD9WriteDataEh+0x110>)
 8000e10:	f000 fe24 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1a:	483c      	ldr	r0, [pc, #240]	; (8000f0c <_ZN3LCD9WriteDataEh+0x110>)
 8000e1c:	f000 fe1e 	bl	8001a5c <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	111b      	asrs	r3, r3, #4
 8000e24:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2102      	movs	r1, #2
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f000 fe11 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	461a      	mov	r2, r3
 8000e44:	2104      	movs	r1, #4
 8000e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4a:	f000 fe07 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f003 0304 	and.w	r3, r3, #4
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	461a      	mov	r2, r3
 8000e58:	2108      	movs	r1, #8
 8000e5a:	482d      	ldr	r0, [pc, #180]	; (8000f10 <_ZN3LCD9WriteDataEh+0x114>)
 8000e5c:	f000 fdfe 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e72:	f000 fdf3 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2101      	movs	r1, #1
 8000e7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7e:	f000 fded 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 fb2c 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f000 fde4 	bl	8001a5c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f000 fdda 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb8:	f000 fdd0 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2108      	movs	r1, #8
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <_ZN3LCD9WriteDataEh+0x114>)
 8000eca:	f000 fdc7 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee0:	f000 fdbc 	bl	8001a5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f000 fdb6 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 faf5 	bl	80014e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2101      	movs	r1, #1
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f000 fdad 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	48000800 	.word	0x48000800
 8000f10:	48001c00 	.word	0x48001c00

08000f14 <_ZN8LoadCellC1EP5Modelh>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( Model *model, uint8_t LC_Nr) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	71fb      	strb	r3, [r7, #7]
	this->model = model;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	671a      	str	r2, [r3, #112]	; 0x70

	HAL_GPIO_WritePin(comSettings.CS_Port, comSettings.CS_Pin, GPIO_PIN_SET);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8000f32:	2201      	movs	r2, #1
 8000f34:	4619      	mov	r1, r3
 8000f36:	f000 fd91 	bl	8001a5c <HAL_GPIO_WritePin>
	loadCellNr = LC_Nr;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	79fa      	ldrb	r2, [r7, #7]
 8000f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_ZN8LoadCell6UpdateEv>:




void LoadCell::Update(void){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	ReadValue();
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f861 	bl	800101c <_ZN8LoadCell9ReadValueEv>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZN8LoadCell12InitLoadCellE11ComSettings>:


void LoadCell::InitLoadCell(ComSettings comSettings){
 8000f62:	b084      	sub	sp, #16
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	f107 001c 	add.w	r0, r7, #28
 8000f70:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->comSettings = comSettings;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2270      	movs	r2, #112	; 0x70
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f008 fe50 	bl	8009c24 <memcpy>
	uint8_t txData[2] = {0};
 8000f84:	2300      	movs	r3, #0
 8000f86:	81bb      	strh	r3, [r7, #12]


	txData[0] = REG_ACCES_CTRL1 | REG_ACCES_WRITE  | 0xC0;
 8000f88:	23c2      	movs	r3, #194	; 0xc2
 8000f8a:	733b      	strb	r3, [r7, #12]
	//txData[1] = 0x80;
	txData[1] = 0x58;
 8000f8c:	2358      	movs	r3, #88	; 0x58
 8000f8e:	737b      	strb	r3, [r7, #13]
	Write(txData, 2);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2202      	movs	r2, #2
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f8dd 	bl	8001158 <_ZN8LoadCell5WriteEPhh>

	txData[0] = REG_ACCES_CTRL3 | REG_ACCES_WRITE  | 0xC0;
 8000f9e:	23c6      	movs	r3, #198	; 0xc6
 8000fa0:	733b      	strb	r3, [r7, #12]
	txData[1] =  DIGITAL_GAIN_1 |  0x1E;
 8000fa2:	231e      	movs	r3, #30
 8000fa4:	737b      	strb	r3, [r7, #13]
	Write(txData, 2);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	2202      	movs	r2, #2
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f8d2 	bl	8001158 <_ZN8LoadCell5WriteEPhh>


	txData[0] = Convert_5sps;
 8000fb4:	2382      	movs	r3, #130	; 0x82
 8000fb6:	733b      	strb	r3, [r7, #12]
	Write(txData,1);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f000 f8c9 	bl	8001158 <_ZN8LoadCell5WriteEPhh>


	txData[0] = 0b00010000;
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	733b      	strb	r3, [r7, #12]
	Write(txData,1);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f8c0 	bl	8001158 <_ZN8LoadCell5WriteEPhh>
	HAL_Delay(240);
 8000fd8:	20f0      	movs	r0, #240	; 0xf0
 8000fda:	f000 fa81 	bl	80014e0 <HAL_Delay>


	txData[0] = 0b00010000;
 8000fde:	2310      	movs	r3, #16
 8000fe0:	733b      	strb	r3, [r7, #12]
	Write(txData,1);
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4619      	mov	r1, r3
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f8b4 	bl	8001158 <_ZN8LoadCell5WriteEPhh>
	HAL_Delay(150);
 8000ff0:	2096      	movs	r0, #150	; 0x96
 8000ff2:	f000 fa75 	bl	80014e0 <HAL_Delay>

	txData[0] = 0b00010000 | 0b00100000;
 8000ff6:	2330      	movs	r3, #48	; 0x30
 8000ff8:	733b      	strb	r3, [r7, #12]
	Write(txData,1);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2201      	movs	r2, #1
 8001000:	4619      	mov	r1, r3
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f8a8 	bl	8001158 <_ZN8LoadCell5WriteEPhh>
	HAL_Delay(150);
 8001008:	2096      	movs	r0, #150	; 0x96
 800100a:	f000 fa69 	bl	80014e0 <HAL_Delay>



}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001018:	b004      	add	sp, #16
 800101a:	4770      	bx	lr

0800101c <_ZN8LoadCell9ReadValueEv>:
/*	Read Data form MAX11210 (24bit ADC)
 *
 * @param: none
 * @return: none
 */
void LoadCell::ReadValue(){
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af02      	add	r7, sp, #8
 8001022:	6078      	str	r0, [r7, #4]
	uint8_t txData[1] = {REG_ACCES_DATA | REG_ACCES_READ | 0xC0};
 8001024:	23c9      	movs	r3, #201	; 0xc9
 8001026:	733b      	strb	r3, [r7, #12]
	uint8_t rxData[3] = {0};
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2100      	movs	r1, #0
 800102e:	460a      	mov	r2, r1
 8001030:	801a      	strh	r2, [r3, #0]
 8001032:	460a      	mov	r2, r1
 8001034:	709a      	strb	r2, [r3, #2]
	int32_t value = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]

	if(IsDataAvailable()){
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f86e 	bl	800111c <_ZN8LoadCell15IsDataAvailableEv>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d05d      	beq.n	8001102 <_ZN8LoadCell9ReadValueEv+0xe6>
		WriteRead(txData, rxData,1,3);
 8001046:	f107 0208 	add.w	r2, r7, #8
 800104a:	f107 010c 	add.w	r1, r7, #12
 800104e:	2303      	movs	r3, #3
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f8af 	bl	80011b8 <_ZN8LoadCell9WriteReadEPhS0_hh>

		value = ((uint32_t)rxData[0]) << 16 |  ((uint32_t)rxData[1]) << 8 | ((uint32_t)rxData[2]);
 800105a:	7a3b      	ldrb	r3, [r7, #8]
 800105c:	041a      	lsls	r2, r3, #16
 800105e:	7a7b      	ldrb	r3, [r7, #9]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	4313      	orrs	r3, r2
 8001064:	7aba      	ldrb	r2, [r7, #10]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]

		if(loadCellNr == 1){
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <_ZN8LoadCell9ReadValueEv+0x66>
			model->setLoadCell1(value);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001078:	6939      	ldr	r1, [r7, #16]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 f8d7 	bl	800122e <_ZN5Model12setLoadCell1El>


			model->setLoadCell2(value);
		}
	}
}
 8001080:	e03f      	b.n	8001102 <_ZN8LoadCell9ReadValueEv+0xe6>
			if(counter >100){
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <_ZN8LoadCell9ReadValueEv+0xf0>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d928      	bls.n	80010dc <_ZN8LoadCell9ReadValueEv+0xc0>
				for(int8_t i = 0; i<100; i++){
 800108a:	2300      	movs	r3, #0
 800108c:	75fb      	strb	r3, [r7, #23]
 800108e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001092:	2b63      	cmp	r3, #99	; 0x63
 8001094:	dc11      	bgt.n	80010ba <_ZN8LoadCell9ReadValueEv+0x9e>
					wert = wert+ valu[i];
 8001096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800109a:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <_ZN8LoadCell9ReadValueEv+0xf4>)
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <_ZN8LoadCell9ReadValueEv+0xf8>)
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <_ZN8LoadCell9ReadValueEv+0xf8>)
 80010aa:	601a      	str	r2, [r3, #0]
				for(int8_t i = 0; i<100; i++){
 80010ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	75fb      	strb	r3, [r7, #23]
 80010b8:	e7e9      	b.n	800108e <_ZN8LoadCell9ReadValueEv+0x72>
				wert = wert/100;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <_ZN8LoadCell9ReadValueEv+0xf8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a16      	ldr	r2, [pc, #88]	; (8001118 <_ZN8LoadCell9ReadValueEv+0xfc>)
 80010c0:	fb82 1203 	smull	r1, r2, r2, r3
 80010c4:	1152      	asrs	r2, r2, #5
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_ZN8LoadCell9ReadValueEv+0xf8>)
 80010cc:	6013      	str	r3, [r2, #0]
				counter = 0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <_ZN8LoadCell9ReadValueEv+0xf0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	801a      	strh	r2, [r3, #0]
				wert = 0;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <_ZN8LoadCell9ReadValueEv+0xf8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	e00c      	b.n	80010f6 <_ZN8LoadCell9ReadValueEv+0xda>
				valu[counter] = value;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <_ZN8LoadCell9ReadValueEv+0xf0>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <_ZN8LoadCell9ReadValueEv+0xf4>)
 80010e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				counter++;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <_ZN8LoadCell9ReadValueEv+0xf0>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <_ZN8LoadCell9ReadValueEv+0xf0>)
 80010f4:	801a      	strh	r2, [r3, #0]
			model->setLoadCell2(value);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f8a4 	bl	800124a <_ZN5Model12setLoadCell2El>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000059c 	.word	0x2000059c
 8001110:	2000040c 	.word	0x2000040c
 8001114:	200005a0 	.word	0x200005a0
 8001118:	51eb851f 	.word	0x51eb851f

0800111c <_ZN8LoadCell15IsDataAvailableEv>:
/*	Checks if measurement data are available
 *
 * @param: none
 * @return <bool>: true if data available otherwise false
 */
bool LoadCell::IsDataAvailable(){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af02      	add	r7, sp, #8
 8001122:	6078      	str	r0, [r7, #4]
	uint8_t txData[1] = {REG_ACCES_STAT1 | REG_ACCES_READ | 0xC0};
 8001124:	23c1      	movs	r3, #193	; 0xc1
 8001126:	733b      	strb	r3, [r7, #12]
	uint8_t rxData[1] = {0};
 8001128:	2300      	movs	r3, #0
 800112a:	723b      	strb	r3, [r7, #8]
	WriteRead(txData, rxData, 1, 1);
 800112c:	f107 0208 	add.w	r2, r7, #8
 8001130:	f107 010c 	add.w	r1, r7, #12
 8001134:	2301      	movs	r3, #1
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f83c 	bl	80011b8 <_ZN8LoadCell9WriteReadEPhS0_hh>

return rxData[0] & 0x01;
 8001140:	7a3b      	ldrb	r3, [r7, #8]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	bf14      	ite	ne
 800114a:	2301      	movne	r3, #1
 800114c:	2300      	moveq	r3, #0
 800114e:	b2db      	uxtb	r3, r3
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN8LoadCell5WriteEPhh>:





void LoadCell::Write(uint8_t* txData, uint8_t size){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4613      	mov	r3, r2
 8001164:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(comSettings.CS_Port, comSettings.CS_Pin, GPIO_PIN_RESET);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	f000 fc72 	bl	8001a5c <HAL_GPIO_WritePin>
	while(HAL_SPI_Transmit(&hspi1, (uint8_t*)txData, size, 5000) != HAL_OK){};
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	b29a      	uxth	r2, r3
 800117c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001180:	68b9      	ldr	r1, [r7, #8]
 8001182:	480c      	ldr	r0, [pc, #48]	; (80011b4 <_ZN8LoadCell5WriteEPhh+0x5c>)
 8001184:	f003 fa0d 	bl	80045a2 <HAL_SPI_Transmit>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d000      	beq.n	800119a <_ZN8LoadCell5WriteEPhh+0x42>
 8001198:	e7ee      	b.n	8001178 <_ZN8LoadCell5WriteEPhh+0x20>
	HAL_GPIO_WritePin(comSettings.CS_Port, comSettings.CS_Pin, GPIO_PIN_SET);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80011a4:	2201      	movs	r2, #1
 80011a6:	4619      	mov	r1, r3
 80011a8:	f000 fc58 	bl	8001a5c <HAL_GPIO_WritePin>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200005fc 	.word	0x200005fc

080011b8 <_ZN8LoadCell9WriteReadEPhS0_hh>:

void LoadCell::WriteRead(uint8_t* txData, uint8_t* rxData, uint8_t txSize, uint8_t rxSize){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(comSettings.CS_Port, comSettings.CS_Pin, GPIO_PIN_RESET);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	f000 fc42 	bl	8001a5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)txData, txSize, 500);
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	480c      	ldr	r0, [pc, #48]	; (8001214 <_ZN8LoadCell9WriteReadEPhS0_hh+0x5c>)
 80011e4:	f003 f9dd 	bl	80045a2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)rxData, rxSize, 500);
 80011e8:	7e3b      	ldrb	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <_ZN8LoadCell9WriteReadEPhS0_hh+0x5c>)
 80011f4:	f003 fb43 	bl	800487e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(comSettings.CS_Port, comSettings.CS_Pin, GPIO_PIN_SET);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	f000 fc29 	bl	8001a5c <HAL_GPIO_WritePin>
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200005fc 	.word	0x200005fc

08001218 <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_ZN5Model12setLoadCell1El>:

int32_t Model::getLoadCell1() const {
	return loadCell1;
}

void Model::setLoadCell1(int32_t loadCell1) {
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	601a      	str	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_ZN5Model12setLoadCell2El>:

int32_t Model::getLoadCell2() const {
	return loadCell2;
}

void Model::setLoadCell2(int32_t loadCell2) {
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	605a      	str	r2, [r3, #4]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZN10BWSettingsC1EP5Model>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f805 	bl	8001282 <_ZN10BaseScreenC1Ev>
	// TODO Auto-generated constructor stub

}
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZN10BaseScreenC1Ev>:
 *      Author: marcel
 */
#include "BaseScreen.h"
#include "main.h"

BaseScreen::BaseScreen(){
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2110      	movs	r1, #16
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f000 fbe3 	bl	8001a5c <HAL_GPIO_WritePin>
}
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZN10MainScreenC1EP5Model>:
#include "MainScreen.h"




MainScreen::MainScreen(Model *model) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffe8 	bl	8001282 <_ZN10BaseScreenC1Ev>


}
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZN10PWSettingsC1EP5Model>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model) : BaseScreen() {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ffda 	bl	8001282 <_ZN10BaseScreenC1Ev>
	// TODO Auto-generated constructor stub

}
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <_ZN13ScreenControlC1Ev>:
 */

#include "ScreenControl.h"


ScreenControl::ScreenControl() {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ffd8 	bl	80012a0 <_ZN10MainScreenC1EP5Model>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7a3a      	ldrb	r2, [r7, #8]
 80012f4:	711a      	strb	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f107 0310 	add.w	r3, r7, #16
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ffdb 	bl	80012bc <_ZN10PWSettingsC1EP5Model>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	7c3a      	ldrb	r2, [r7, #16]
 800130a:	715a      	strb	r2, [r3, #5]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ffa5 	bl	8001266 <_ZN10BWSettingsC1EP5Model>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7e3a      	ldrb	r2, [r7, #24]
 8001320:	719a      	strb	r2, [r3, #6]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f82b 	bl	8001388 <_ZN12TimeSettingsC1EP5Model>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001338:	71da      	strb	r2, [r3, #7]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	7912      	ldrb	r2, [r2, #4]
 8001340:	721a      	strb	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	7952      	ldrb	r2, [r2, #5]
 8001348:	725a      	strb	r2, [r3, #9]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	7992      	ldrb	r2, [r2, #6]
 8001350:	729a      	strb	r2, [r3, #10]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	79d2      	ldrb	r2, [r2, #7]
 8001358:	72da      	strb	r2, [r3, #11]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	330c      	adds	r3, #12
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fbd6 	bl	8000b10 <_ZN3LCDC1Ev>
	// TODO Auto-generated constructor stub
	//timeSettings.isActive();
	//timeSettings.setActive(true);

}
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
	lcd.InitLCD();
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	330c      	adds	r3, #12
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fbd4 	bl	8000b28 <_ZN3LCD7InitLCDEv>

}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_ZN12TimeSettingsC1EP5Model>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model) :BaseScreen() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff74 	bl	8001282 <_ZN10BaseScreenC1Ev>
	// TODO Auto-generated constructor stub

}
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff fb08 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
	ldr	r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f008 fbf3 	bl	8009bbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff f90b 	bl	80005f0 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013dc:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80013e0:	08009e6c 	.word	0x08009e6c
	ldr	r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e8:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80013ec:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80013f0:	20001648 	.word	0x20001648

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>

080013f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001400:	2003      	movs	r0, #3
 8001402:	f000 f95f 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 f80e 	bl	8001428 <HAL_InitTick>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	71fb      	strb	r3, [r7, #7]
 8001416:	e001      	b.n	800141c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001418:	f7ff fa3e 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141c:	79fb      	ldrb	r3, [r7, #7]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <HAL_InitTick+0x6c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800143c:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_InitTick+0x70>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f96b 	bl	800172e <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d809      	bhi.n	8001478 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f935 	bl	80016da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_InitTick+0x74>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e007      	b.n	8001488 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e004      	b.n	8001488 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
 8001482:	e001      	b.n	8001488 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	200006ac 	.word	0x200006ac

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200006ac 	.word	0x200006ac

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_Delay+0x40>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000008 	.word	0x20000008

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001556:	4a04      	ldr	r2, [pc, #16]	; (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	60d3      	str	r3, [r2, #12]
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	; (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	; (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	; (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	; 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	; (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ec:	f7ff ff3e 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	6978      	ldr	r0, [r7, #20]
 80016f8:	f7ff ff8e 	bl	8001618 <NVIC_EncodePriority>
 80016fc:	4602      	mov	r2, r0
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff5d 	bl	80015c4 <__NVIC_SetPriority>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff31 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffa2 	bl	8001680 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001748:	b480      	push	{r7}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001756:	e14e      	b.n	80019f6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8140 	beq.w	80019f0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d00b      	beq.n	8001790 <HAL_GPIO_Init+0x48>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d007      	beq.n	8001790 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001784:	2b11      	cmp	r3, #17
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b12      	cmp	r3, #18
 800178e:	d130      	bne.n	80017f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c6:	2201      	movs	r2, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f003 0201 	and.w	r2, r3, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0xea>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b12      	cmp	r3, #18
 8001830:	d123      	bne.n	800187a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800183e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	220f      	movs	r2, #15
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691a      	ldr	r2, [r3, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	6939      	ldr	r1, [r7, #16]
 8001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4013      	ands	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0203 	and.w	r2, r3, #3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 809a 	beq.w	80019f0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018bc:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <HAL_GPIO_Init+0x2cc>)
 80018be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x2cc>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	6613      	str	r3, [r2, #96]	; 0x60
 80018c8:	4b52      	ldr	r3, [pc, #328]	; (8001a14 <HAL_GPIO_Init+0x2cc>)
 80018ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_GPIO_Init+0x2d0>)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018fe:	d013      	beq.n	8001928 <HAL_GPIO_Init+0x1e0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a46      	ldr	r2, [pc, #280]	; (8001a1c <HAL_GPIO_Init+0x2d4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1dc>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_GPIO_Init+0x2d8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1d8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a44      	ldr	r2, [pc, #272]	; (8001a24 <HAL_GPIO_Init+0x2dc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1d4>
 8001918:	2303      	movs	r3, #3
 800191a:	e006      	b.n	800192a <HAL_GPIO_Init+0x1e2>
 800191c:	2307      	movs	r3, #7
 800191e:	e004      	b.n	800192a <HAL_GPIO_Init+0x1e2>
 8001920:	2302      	movs	r3, #2
 8001922:	e002      	b.n	800192a <HAL_GPIO_Init+0x1e2>
 8001924:	2301      	movs	r3, #1
 8001926:	e000      	b.n	800192a <HAL_GPIO_Init+0x1e2>
 8001928:	2300      	movs	r3, #0
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	f002 0203 	and.w	r2, r2, #3
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	4093      	lsls	r3, r2
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800193a:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_GPIO_Init+0x2d0>)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	089b      	lsrs	r3, r3, #2
 8001940:	3302      	adds	r3, #2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800196c:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ea:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_GPIO_Init+0x2e0>)
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3301      	adds	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f47f aea9 	bne.w	8001758 <HAL_GPIO_Init+0x10>
  }
}
 8001a06:	bf00      	nop
 8001a08:	371c      	adds	r7, #28
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	48000400 	.word	0x48000400
 8001a20:	48000800 	.word	0x48000800
 8001a24:	48000c00 	.word	0x48000c00
 8001a28:	40010400 	.word	0x40010400

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e081      	b.n	8001ba2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe fd58 	bl	8000568 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	; 0x24
 8001abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001adc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d104      	bne.n	8001b26 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	ea42 0103 	orr.w	r1, r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	021a      	lsls	r2, r3, #8
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69d9      	ldr	r1, [r3, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1a      	ldr	r2, [r3, #32]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0201 	orr.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d138      	bne.n	8001c32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e032      	b.n	8001c34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2224      	movs	r2, #36	; 0x24
 8001bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f042 0201 	orr.w	r2, r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2220      	movs	r2, #32
 8001c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b20      	cmp	r3, #32
 8001c54:	d139      	bne.n	8001cca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e033      	b.n	8001ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2224      	movs	r2, #36	; 0x24
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0201 	bic.w	r2, r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	021b      	lsls	r3, r3, #8
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2220      	movs	r2, #32
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e000      	b.n	8001ccc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
  }
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b08b      	sub	sp, #44	; 0x2c
 8001cdc:	af06      	add	r7, sp, #24
 8001cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e104      	b.n	8001ef4 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f007 fbc6 	bl	8009490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2203      	movs	r2, #3
 8001d08:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 fd47 	bl	80057a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	687e      	ldr	r6, [r7, #4]
 8001d1e:	466d      	mov	r5, sp
 8001d20:	f106 0410 	add.w	r4, r6, #16
 8001d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	1d33      	adds	r3, r6, #4
 8001d2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d30:	6838      	ldr	r0, [r7, #0]
 8001d32:	f003 fd0f 	bl	8005754 <USB_CoreInit>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e0d5      	b.n	8001ef4 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fd43 	bl	80057da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e04c      	b.n	8001df4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3336      	adds	r3, #54	; 0x36
 8001d98:	4602      	mov	r2, r0
 8001d9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	440b      	add	r3, r1
 8001dac:	3303      	adds	r3, #3
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3338      	adds	r3, #56	; 0x38
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	440b      	add	r3, r1
 8001dd4:	333c      	adds	r3, #60	; 0x3c
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dda:	7bfa      	ldrb	r2, [r7, #15]
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	3340      	adds	r3, #64	; 0x40
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3ad      	bcc.n	8001d5a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
 8001e02:	e044      	b.n	8001e8e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e1a:	7bfa      	ldrb	r2, [r7, #15]
 8001e1c:	6879      	ldr	r1, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e30:	7bfa      	ldrb	r2, [r7, #15]
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	440b      	add	r3, r1
 8001e3e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e42:	2200      	movs	r2, #0
 8001e44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e5c:	7bfa      	ldrb	r2, [r7, #15]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	4613      	mov	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3b5      	bcc.n	8001e04 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	687e      	ldr	r6, [r7, #4]
 8001ea0:	466d      	mov	r5, sp
 8001ea2:	f106 0410 	add.w	r4, r6, #16
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	602b      	str	r3, [r5, #0]
 8001eae:	1d33      	adds	r3, r6, #4
 8001eb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f003 fc9e 	bl	80057f4 <USB_DevInit>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e014      	b.n	8001ef4 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f001 fa63 	bl	80033ae <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f005 fc57 	bl	80077a0 <USB_DevDisconnect>

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001efc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_PCD_Start+0x16>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e012      	b.n	8001f38 <HAL_PCD_Start+0x3c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fc29 	bl	8005776 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f005 fc22 	bl	8007772 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f005 fc3c 	bl	80077ca <USB_ReadInterrupts>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5c:	d102      	bne.n	8001f64 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fb5b 	bl	800261a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f005 fc2e 	bl	80077ca <USB_ReadInterrupts>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d112      	bne.n	8001fa0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f007 fb1d 	bl	80095d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001f98:	2100      	movs	r1, #0
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f91e 	bl	80021dc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f005 fc10 	bl	80077ca <USB_ReadInterrupts>
 8001faa:	4603      	mov	r3, r0
 8001fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fb4:	d10b      	bne.n	8001fce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fc8:	b292      	uxth	r2, r2
 8001fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f005 fbf9 	bl	80077ca <USB_ReadInterrupts>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe2:	d10b      	bne.n	8001ffc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	b292      	uxth	r2, r2
 8001ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f005 fbe2 	bl	80077ca <USB_ReadInterrupts>
 8002006:	4603      	mov	r3, r0
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002010:	d133      	bne.n	800207a <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0204 	bic.w	r2, r2, #4
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002032:	b29a      	uxth	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0208 	bic.w	r2, r2, #8
 800203c:	b292      	uxth	r2, r2
 800203e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d107      	bne.n	800205c <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002054:	2100      	movs	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f007 fd6c 	bl	8009b34 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f007 faf1 	bl	8009644 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002074:	b292      	uxth	r2, r2
 8002076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f005 fba3 	bl	80077ca <USB_ReadInterrupts>
 8002084:	4603      	mov	r3, r0
 8002086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800208e:	d126      	bne.n	80020de <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002098:	b29a      	uxth	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0208 	orr.w	r2, r2, #8
 80020a2:	b292      	uxth	r2, r2
 80020a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ba:	b292      	uxth	r2, r2
 80020bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0204 	orr.w	r2, r2, #4
 80020d2:	b292      	uxth	r2, r2
 80020d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f007 fa99 	bl	8009610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 fb71 	bl	80077ca <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d13f      	bne.n	8002172 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002104:	b292      	uxth	r2, r2
 8002106:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d12b      	bne.n	800216c <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800211c:	b29a      	uxth	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0204 	orr.w	r2, r2, #4
 8002126:	b292      	uxth	r2, r2
 8002128:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0208 	orr.w	r2, r2, #8
 800213e:	b292      	uxth	r2, r2
 8002140:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002154:	b29b      	uxth	r3, r3
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002162:	2101      	movs	r1, #1
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f007 fce5 	bl	8009b34 <HAL_PCDEx_LPM_Callback>
 800216a:	e002      	b.n	8002172 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f007 fa4f 	bl	8009610 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f005 fb27 	bl	80077ca <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002186:	d10e      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002190:	b29a      	uxth	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800219a:	b292      	uxth	r2, r2
 800219c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f007 fa08 	bl	80095b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f005 fb0d 	bl	80077ca <USB_ReadInterrupts>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ba:	d10b      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ce:	b292      	uxth	r2, r2
 80021d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d101      	bne.n	80021f6 <HAL_PCD_SetAddress+0x1a>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e013      	b.n	800221e <HAL_PCD_SetAddress+0x42>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f005 fa9b 	bl	800774a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	4608      	mov	r0, r1
 8002230:	4611      	mov	r1, r2
 8002232:	461a      	mov	r2, r3
 8002234:	4603      	mov	r3, r0
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	460b      	mov	r3, r1
 800223a:	803b      	strh	r3, [r7, #0]
 800223c:	4613      	mov	r3, r2
 800223e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002244:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002248:	2b00      	cmp	r3, #0
 800224a:	da0e      	bge.n	800226a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	705a      	strb	r2, [r3, #1]
 8002268:	e00e      	b.n	8002288 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800226a:	78fb      	ldrb	r3, [r7, #3]
 800226c:	f003 0207 	and.w	r2, r3, #7
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	b2da      	uxtb	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002294:	883a      	ldrh	r2, [r7, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	785b      	ldrb	r3, [r3, #1]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022b2:	78bb      	ldrb	r3, [r7, #2]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d102      	bne.n	80022be <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_PCD_EP_Open+0xa6>
 80022c8:	2302      	movs	r3, #2
 80022ca:	e00e      	b.n	80022ea <HAL_PCD_EP_Open+0xc4>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 faac 	bl	8005838 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80022e8:	7afb      	ldrb	r3, [r7, #11]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80022fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002302:	2b00      	cmp	r3, #0
 8002304:	da0e      	bge.n	8002324 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002306:	78fb      	ldrb	r3, [r7, #3]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2201      	movs	r2, #1
 8002320:	705a      	strb	r2, [r3, #1]
 8002322:	e00e      	b.n	8002342 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	b2da      	uxtb	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_PCD_EP_Close+0x6a>
 8002358:	2302      	movs	r3, #2
 800235a:	e00e      	b.n	800237a <HAL_PCD_EP_Close+0x88>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fdd2 	bl	8005f14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	460b      	mov	r3, r1
 8002390:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002392:	7afb      	ldrb	r3, [r7, #11]
 8002394:	f003 0207 	and.w	r2, r3, #7
 8002398:	4613      	mov	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2200      	movs	r2, #0
 80023ba:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	2200      	movs	r2, #0
 80023c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c2:	7afb      	ldrb	r3, [r7, #11]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6979      	ldr	r1, [r7, #20]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 ff85 	bl	80062ee <USB_EPStartXfer>
 80023e4:	e005      	b.n	80023f2 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6979      	ldr	r1, [r7, #20]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 ff7e 	bl	80062ee <USB_EPStartXfer>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002408:	78fb      	ldrb	r3, [r7, #3]
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	460b      	mov	r3, r1
 800243a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243c:	7afb      	ldrb	r3, [r7, #11]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	4613      	mov	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2200      	movs	r2, #0
 8002470:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2201      	movs	r2, #1
 8002476:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002478:	7afb      	ldrb	r3, [r7, #11]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	b2da      	uxtb	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002484:	7afb      	ldrb	r3, [r7, #11]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	4618      	mov	r0, r3
 8002496:	f003 ff2a 	bl	80062ee <USB_EPStartXfer>
 800249a:	e005      	b.n	80024a8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6979      	ldr	r1, [r7, #20]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 ff23 	bl	80062ee <USB_EPStartXfer>
  }

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b084      	sub	sp, #16
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	f003 0207 	and.w	r2, r3, #7
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d901      	bls.n	80024d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e04c      	b.n	800256a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	da0e      	bge.n	80024f6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
 80024f4:	e00c      	b.n	8002510 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	b2da      	uxtb	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_PCD_EP_SetStall+0x7e>
 800252c:	2302      	movs	r3, #2
 800252e:	e01c      	b.n	800256a <HAL_PCD_EP_SetStall+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	4618      	mov	r0, r3
 8002540:	f005 f804 	bl	800754c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	2b00      	cmp	r3, #0
 800254c:	d108      	bne.n	8002560 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f005 f945 	bl	80077ea <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e040      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002590:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002594:	2b00      	cmp	r3, #0
 8002596:	da0e      	bge.n	80025b6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	705a      	strb	r2, [r3, #1]
 80025b4:	e00e      	b.n	80025d4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 0207 	and.w	r2, r3, #7
 80025bc:	4613      	mov	r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_PCD_EP_ClrStall+0x82>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e00e      	b.n	8002612 <HAL_PCD_EP_ClrStall+0xa0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68f9      	ldr	r1, [r7, #12]
 8002602:	4618      	mov	r0, r3
 8002604:	f004 fff3 	bl	80075ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b08e      	sub	sp, #56	; 0x38
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002622:	e2d1      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800262c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800262e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800263a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8152 	bne.w	80028e8 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002644:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d150      	bne.n	80026f0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800265a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265e:	81fb      	strh	r3, [r7, #14]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800266a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800266e:	b29b      	uxth	r3, r3
 8002670:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3328      	adds	r3, #40	; 0x28
 8002676:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	4413      	add	r3, r2
 8002692:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002696:	881b      	ldrh	r3, [r3, #0]
 8002698:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	441a      	add	r2, r3
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026ae:	2100      	movs	r1, #0
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f006 ff66 	bl	8009582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8282 	beq.w	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 827d 	bne.w	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	b292      	uxth	r2, r2
 80026e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026ee:	e26b      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026f6:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002700:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002702:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002706:	2b00      	cmp	r3, #0
 8002708:	d032      	beq.n	8002770 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002712:	b29b      	uxth	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	4413      	add	r3, r2
 8002724:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002744:	b29b      	uxth	r3, r3
 8002746:	f005 f89d 	bl	8007884 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29a      	uxth	r2, r3
 8002752:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002756:	4013      	ands	r3, r2
 8002758:	823b      	strh	r3, [r7, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	8a3a      	ldrh	r2, [r7, #16]
 8002760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002764:	b292      	uxth	r2, r2
 8002766:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f006 fedd 	bl	8009528 <HAL_PCD_SetupStageCallback>
 800276e:	e22b      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002770:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002774:	2b00      	cmp	r3, #0
 8002776:	f280 8227 	bge.w	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29a      	uxth	r2, r3
 8002782:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002786:	4013      	ands	r3, r2
 8002788:	83bb      	strh	r3, [r7, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	8bba      	ldrh	r2, [r7, #28]
 8002790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002794:	b292      	uxth	r2, r2
 8002796:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	4413      	add	r3, r2
 80027b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d019      	beq.n	80027fc <PCD_EP_ISR_Handler+0x1e2>
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d015      	beq.n	80027fc <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6818      	ldr	r0, [r3, #0]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	6959      	ldr	r1, [r3, #20]
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f005 f84f 	bl	8007884 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	441a      	add	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80027f4:	2100      	movs	r1, #0
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f006 fea8 	bl	800954c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4413      	add	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d112      	bne.n	800284a <PCD_EP_ISR_Handler+0x230>
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800282e:	b29a      	uxth	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800283e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002842:	b29a      	uxth	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	801a      	strh	r2, [r3, #0]
 8002848:	e02f      	b.n	80028aa <PCD_EP_ISR_Handler+0x290>
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b3e      	cmp	r3, #62	; 0x3e
 8002850:	d813      	bhi.n	800287a <PCD_EP_ISR_Handler+0x260>
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <PCD_EP_ISR_Handler+0x252>
 8002866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002868:	3301      	adds	r3, #1
 800286a:	633b      	str	r3, [r7, #48]	; 0x30
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	b29b      	uxth	r3, r3
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	b29a      	uxth	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	e017      	b.n	80028aa <PCD_EP_ISR_Handler+0x290>
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	633b      	str	r3, [r7, #48]	; 0x30
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 031f 	and.w	r3, r3, #31
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <PCD_EP_ISR_Handler+0x27a>
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	3b01      	subs	r3, #1
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	b29b      	uxth	r3, r3
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	b29b      	uxth	r3, r3
 800289c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	827b      	strh	r3, [r7, #18]
 80028bc:	8a7b      	ldrh	r3, [r7, #18]
 80028be:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80028c2:	827b      	strh	r3, [r7, #18]
 80028c4:	8a7b      	ldrh	r3, [r7, #18]
 80028c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80028ca:	827b      	strh	r3, [r7, #18]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	8a7b      	ldrh	r3, [r7, #18]
 80028d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	8013      	strh	r3, [r2, #0]
 80028e6:	e16f      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	461a      	mov	r2, r3
 80028ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f280 80e4 	bge.w	8002acc <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29a      	uxth	r2, r3
 8002916:	f640 738f 	movw	r3, #3983	; 0xf8f
 800291a:	4013      	ands	r3, r2
 800291c:	853b      	strh	r3, [r7, #40]	; 0x28
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800292e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002932:	b292      	uxth	r2, r2
 8002934:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002936:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4413      	add	r3, r2
 800294a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	7b1b      	ldrb	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d120      	bne.n	8002996 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800295c:	b29b      	uxth	r3, r3
 800295e:	461a      	mov	r2, r3
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	4413      	add	r3, r2
 800296e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002978:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800297a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8083 	beq.w	8002a88 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	6959      	ldr	r1, [r3, #20]
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	88da      	ldrh	r2, [r3, #6]
 800298e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002990:	f004 ff78 	bl	8007884 <USB_ReadPMA>
 8002994:	e078      	b.n	8002a88 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	78db      	ldrb	r3, [r3, #3]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d108      	bne.n	80029b0 <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800299e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f91d 	bl	8002be4 <HAL_PCD_EP_DB_Receive>
 80029aa:	4603      	mov	r3, r0
 80029ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80029ae:	e06b      	b.n	8002a88 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ca:	847b      	strh	r3, [r7, #34]	; 0x22
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80029dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d01f      	beq.n	8002a4a <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a2e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d028      	beq.n	8002a88 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	6959      	ldr	r1, [r3, #20]
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	891a      	ldrh	r2, [r3, #8]
 8002a42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a44:	f004 ff1e 	bl	8007884 <USB_ReadPMA>
 8002a48:	e01e      	b.n	8002a88 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	6959      	ldr	r1, [r3, #20]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	895a      	ldrh	r2, [r3, #10]
 8002a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a84:	f004 fefe 	bl	8007884 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a8e:	441a      	add	r2, r3
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	695a      	ldr	r2, [r3, #20]
 8002a98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a9a:	441a      	add	r2, r3
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <PCD_EP_ISR_Handler+0x498>
 8002aa8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d206      	bcs.n	8002ac0 <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f006 fd47 	bl	800954c <HAL_PCD_DataOutStageCallback>
 8002abe:	e005      	b.n	8002acc <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fc11 	bl	80062ee <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002acc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d078      	beq.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8002ad6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b04:	843b      	strh	r3, [r7, #32]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	441a      	add	r2, r3
 8002b14:	8c3b      	ldrh	r3, [r7, #32]
 8002b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d108      	bne.n	8002b3c <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d144      	bne.n	8002bbc <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d13f      	bne.n	8002bbc <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4413      	add	r3, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	4413      	add	r3, r2
 8002b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b60:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	8bfb      	ldrh	r3, [r7, #30]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d906      	bls.n	8002b7a <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	8bfb      	ldrh	r3, [r7, #30]
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d106      	bne.n	8002b96 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f006 fcf7 	bl	8009582 <HAL_PCD_DataInStageCallback>
 8002b94:	e018      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	8bfb      	ldrh	r3, [r7, #30]
 8002b9c:	441a      	add	r2, r3
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	8bfb      	ldrh	r3, [r7, #30]
 8002ba8:	441a      	add	r2, r3
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fb9a 	bl	80062ee <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002bba:	e005      	b.n	8002bc8 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002bbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f917 	bl	8002df6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f6ff ad25 	blt.w	8002624 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3738      	adds	r7, #56	; 0x38
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d07c      	beq.n	8002cf6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	4413      	add	r3, r2
 8002c16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c20:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	8b7b      	ldrh	r3, [r7, #26]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d306      	bcc.n	8002c3a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	8b7b      	ldrh	r3, [r7, #26]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	619a      	str	r2, [r3, #24]
 8002c38:	e002      	b.n	8002c40 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d123      	bne.n	8002c90 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c62:	833b      	strh	r3, [r7, #24]
 8002c64:	8b3b      	ldrh	r3, [r7, #24]
 8002c66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c6a:	833b      	strh	r3, [r7, #24]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	441a      	add	r2, r3
 8002c7a:	8b3b      	ldrh	r3, [r7, #24]
 8002c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01f      	beq.n	8002cda <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb4:	82fb      	strh	r3, [r7, #22]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	8afb      	ldrh	r3, [r7, #22]
 8002cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002cda:	8b7b      	ldrh	r3, [r7, #26]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8085 	beq.w	8002dec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6959      	ldr	r1, [r3, #20]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	891a      	ldrh	r2, [r3, #8]
 8002cee:	8b7b      	ldrh	r3, [r7, #26]
 8002cf0:	f004 fdc8 	bl	8007884 <USB_ReadPMA>
 8002cf4:	e07a      	b.n	8002dec <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	8b7b      	ldrh	r3, [r7, #26]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d306      	bcc.n	8002d34 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	8b7b      	ldrh	r3, [r7, #26]
 8002d2c:	1ad2      	subs	r2, r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	619a      	str	r2, [r3, #24]
 8002d32:	e002      	b.n	8002d3a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d123      	bne.n	8002d8a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	83fb      	strh	r3, [r7, #30]
 8002d5e:	8bfb      	ldrh	r3, [r7, #30]
 8002d60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d64:	83fb      	strh	r3, [r7, #30]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	441a      	add	r2, r3
 8002d74:	8bfb      	ldrh	r3, [r7, #30]
 8002d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d11f      	bne.n	8002dd4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	83bb      	strh	r3, [r7, #28]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	441a      	add	r2, r3
 8002dbe:	8bbb      	ldrh	r3, [r7, #28]
 8002dc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002dd4:	8b7b      	ldrh	r3, [r7, #26]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d008      	beq.n	8002dec <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	6959      	ldr	r1, [r3, #20]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	895a      	ldrh	r2, [r3, #10]
 8002de6:	8b7b      	ldrh	r3, [r7, #26]
 8002de8:	f004 fd4c 	bl	8007884 <USB_ReadPMA>
    }
  }

  return count;
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b092      	sub	sp, #72	; 0x48
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	4613      	mov	r3, r2
 8002e02:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8130 	beq.w	8003070 <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e34:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	699a      	ldr	r2, [r3, #24]
 8002e3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d906      	bls.n	8002e4e <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	699a      	ldr	r2, [r3, #24]
 8002e44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	619a      	str	r2, [r3, #24]
 8002e4c:	e002      	b.n	8002e54 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d12c      	bne.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f006 fb8d 	bl	8009582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 822d 	beq.w	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e8e:	827b      	strh	r3, [r7, #18]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	8a7b      	ldrh	r3, [r7, #18]
 8002ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	8013      	strh	r3, [r2, #0]
 8002eb4:	e20b      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb6:	88fb      	ldrh	r3, [r7, #6]
 8002eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01f      	beq.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	441a      	add	r2, r3
 8002eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ef4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	f040 81e1 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f12:	441a      	add	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f1e:	441a      	add	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6a1a      	ldr	r2, [r3, #32]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d309      	bcc.n	8002f44 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a1a      	ldr	r2, [r3, #32]
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	621a      	str	r2, [r3, #32]
 8002f42:	e014      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8002f4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f58:	e009      	b.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d155      	bne.n	8003022 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	00da      	lsls	r2, r3, #3
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d112      	bne.n	8002fca <HAL_PCD_EP_DB_Transmit+0x1d4>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	801a      	strh	r2, [r3, #0]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	801a      	strh	r2, [r3, #0]
 8002fc8:	e047      	b.n	800305a <HAL_PCD_EP_DB_Transmit+0x264>
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8002fce:	d811      	bhi.n	8002ff4 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8002fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	029b      	lsls	r3, r3, #10
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	801a      	strh	r2, [r3, #0]
 8002ff2:	e032      	b.n	800305a <HAL_PCD_EP_DB_Transmit+0x264>
 8002ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <HAL_PCD_EP_DB_Transmit+0x214>
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	3b01      	subs	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	b29b      	uxth	r3, r3
 800300e:	029b      	lsls	r3, r3, #10
 8003010:	b29b      	uxth	r3, r3
 8003012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800301a:	b29a      	uxth	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	801a      	strh	r2, [r3, #0]
 8003020:	e01b      	b.n	800305a <HAL_PCD_EP_DB_Transmit+0x264>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	785b      	ldrb	r3, [r3, #1]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d117      	bne.n	800305a <HAL_PCD_EP_DB_Transmit+0x264>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003038:	b29b      	uxth	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	4413      	add	r3, r2
 8003040:	623b      	str	r3, [r7, #32]
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	00da      	lsls	r2, r3, #3
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	4413      	add	r3, r2
 800304c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003054:	b29a      	uxth	r2, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6959      	ldr	r1, [r3, #20]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	891a      	ldrh	r2, [r3, #8]
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	b29b      	uxth	r3, r3
 800306a:	f004 fbca 	bl	8007802 <USB_WritePMA>
 800306e:	e12e      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	4413      	add	r3, r2
 800308a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003094:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800309c:	429a      	cmp	r2, r3
 800309e:	d306      	bcc.n	80030ae <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	619a      	str	r2, [r3, #24]
 80030ac:	e002      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d12c      	bne.n	8003116 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f006 fa5d 	bl	8009582 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80fd 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800310c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003110:	b29b      	uxth	r3, r3
 8003112:	8013      	strh	r3, [r2, #0]
 8003114:	e0db      	b.n	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003116:	88fb      	ldrh	r3, [r7, #6]
 8003118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d11f      	bne.n	8003160 <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	441a      	add	r2, r3
 800314a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800314c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315c:	b29b      	uxth	r3, r3
 800315e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003166:	2b01      	cmp	r3, #1
 8003168:	f040 80b1 	bne.w	80032ce <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003172:	441a      	add	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800317e:	441a      	add	r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	429a      	cmp	r2, r3
 800318e:	d309      	bcc.n	80031a4 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	6a1a      	ldr	r2, [r3, #32]
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	621a      	str	r2, [r3, #32]
 80031a2:	e014      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80031ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80031ae:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031b8:	e009      	b.n	80031ce <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2200      	movs	r2, #0
 80031c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	637b      	str	r3, [r7, #52]	; 0x34
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	785b      	ldrb	r3, [r3, #1]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d155      	bne.n	8003288 <HAL_PCD_EP_DB_Transmit+0x492>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	647b      	str	r3, [r7, #68]	; 0x44
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031f0:	4413      	add	r3, r2
 80031f2:	647b      	str	r3, [r7, #68]	; 0x44
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	00da      	lsls	r2, r3, #3
 80031fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003202:	643b      	str	r3, [r7, #64]	; 0x40
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d112      	bne.n	8003230 <HAL_PCD_EP_DB_Transmit+0x43a>
 800320a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003214:	b29a      	uxth	r2, r3
 8003216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003228:	b29a      	uxth	r2, r3
 800322a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800322c:	801a      	strh	r2, [r3, #0]
 800322e:	e044      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2b3e      	cmp	r3, #62	; 0x3e
 8003234:	d811      	bhi.n	800325a <HAL_PCD_EP_DB_Transmit+0x464>
 8003236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_PCD_EP_DB_Transmit+0x456>
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	3301      	adds	r3, #1
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800324e:	b29b      	uxth	r3, r3
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	b29a      	uxth	r2, r3
 8003254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003256:	801a      	strh	r2, [r3, #0]
 8003258:	e02f      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x4c4>
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	f003 031f 	and.w	r3, r3, #31
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <HAL_PCD_EP_DB_Transmit+0x47a>
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	3b01      	subs	r3, #1
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	b29b      	uxth	r3, r3
 8003274:	029b      	lsls	r3, r3, #10
 8003276:	b29b      	uxth	r3, r3
 8003278:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003280:	b29a      	uxth	r2, r3
 8003282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	e018      	b.n	80032ba <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d114      	bne.n	80032ba <HAL_PCD_EP_DB_Transmit+0x4c4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	4413      	add	r3, r2
 80032a0:	637b      	str	r3, [r7, #52]	; 0x34
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00da      	lsls	r2, r3, #3
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	4413      	add	r3, r2
 80032ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	6959      	ldr	r1, [r3, #20]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	895a      	ldrh	r2, [r3, #10]
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f004 fa9a 	bl	8007802 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e8:	823b      	strh	r3, [r7, #16]
 80032ea:	8a3b      	ldrh	r3, [r7, #16]
 80032ec:	f083 0310 	eor.w	r3, r3, #16
 80032f0:	823b      	strh	r3, [r7, #16]
 80032f2:	8a3b      	ldrh	r3, [r7, #16]
 80032f4:	f083 0320 	eor.w	r3, r3, #32
 80032f8:	823b      	strh	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	441a      	add	r2, r3
 8003308:	8a3b      	ldrh	r3, [r7, #16]
 800330a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800330e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	b29b      	uxth	r3, r3
 800331c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3748      	adds	r7, #72	; 0x48
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	607b      	str	r3, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	817b      	strh	r3, [r7, #10]
 8003336:	4613      	mov	r3, r2
 8003338:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800333a:	897b      	ldrh	r3, [r7, #10]
 800333c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	e009      	b.n	8003372 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800335e:	897a      	ldrh	r2, [r7, #10]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003372:	893b      	ldrh	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	b29a      	uxth	r2, r3
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	80da      	strh	r2, [r3, #6]
 8003386:	e00b      	b.n	80033a0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2201      	movs	r2, #1
 800338c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	b29a      	uxth	r2, r3
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b29a      	uxth	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	371c      	adds	r7, #28
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b085      	sub	sp, #20
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	f043 0302 	orr.w	r3, r3, #2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003408:	4b04      	ldr	r3, [pc, #16]	; (800341c <HAL_PWREx_GetVoltageRange+0x18>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40007000 	.word	0x40007000

08003420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800342e:	d130      	bne.n	8003492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343c:	d038      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003446:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003448:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2232      	movs	r2, #50	; 0x32
 8003454:	fb02 f303 	mul.w	r3, r2, r3
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	3301      	adds	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003464:	e002      	b.n	800346c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	3b01      	subs	r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003478:	d102      	bne.n	8003480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f2      	bne.n	8003466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003480:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348c:	d110      	bne.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e00f      	b.n	80034b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800349a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800349e:	d007      	beq.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a8:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	20000000 	.word	0x20000000
 80034c8:	431bde83 	.word	0x431bde83

080034cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a04      	ldr	r2, [pc, #16]	; (80034e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80034d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034da:	6053      	str	r3, [r2, #4]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40007000 	.word	0x40007000

080034ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d102      	bne.n	8003500 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f000 bc56 	b.w	8003dac <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003500:	4ba1      	ldr	r3, [pc, #644]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800350a:	4b9f      	ldr	r3, [pc, #636]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80e6 	beq.w	80036ee <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_RCC_OscConfig+0x4c>
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	f040 808d 	bne.w	800364a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	f040 8089 	bne.w	800364a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003538:	4b93      	ldr	r3, [pc, #588]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <HAL_RCC_OscConfig+0x66>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d102      	bne.n	8003552 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f000 bc2d 	b.w	8003dac <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003556:	4b8c      	ldr	r3, [pc, #560]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_RCC_OscConfig+0x80>
 8003562:	4b89      	ldr	r3, [pc, #548]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356a:	e005      	b.n	8003578 <HAL_RCC_OscConfig+0x8c>
 800356c:	4b86      	ldr	r3, [pc, #536]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003578:	4293      	cmp	r3, r2
 800357a:	d224      	bcs.n	80035c6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fd85 	bl	8004090 <RCC_SetFlashLatencyFromMSIRange>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	f000 bc0d 	b.w	8003dac <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003598:	f043 0308 	orr.w	r3, r3, #8
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b7a      	ldr	r3, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	4977      	ldr	r1, [pc, #476]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035b0:	4b75      	ldr	r3, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	4972      	ldr	r1, [pc, #456]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e025      	b.n	8003612 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c6:	4b70      	ldr	r3, [pc, #448]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6f      	ldr	r2, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035cc:	f043 0308 	orr.w	r3, r3, #8
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	496a      	ldr	r1, [pc, #424]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e4:	4b68      	ldr	r3, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	4965      	ldr	r1, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fd44 	bl	8004090 <RCC_SetFlashLatencyFromMSIRange>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e3cc      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003612:	f000 fcb3 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003616:	4601      	mov	r1, r0
 8003618:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	091b      	lsrs	r3, r3, #4
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x2a0>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	fa21 f303 	lsr.w	r3, r1, r3
 800362e:	4a58      	ldr	r2, [pc, #352]	; (8003790 <HAL_RCC_OscConfig+0x2a4>)
 8003630:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003632:	4b58      	ldr	r3, [pc, #352]	; (8003794 <HAL_RCC_OscConfig+0x2a8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fd fef6 	bl	8001428 <HAL_InitTick>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d052      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	e3b0      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d032      	beq.n	80036b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003652:	4b4d      	ldr	r3, [pc, #308]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4c      	ldr	r2, [pc, #304]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800365e:	f7fd ff33 	bl	80014c8 <HAL_GetTick>
 8003662:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003666:	f7fd ff2f 	bl	80014c8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e399      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003678:	4b43      	ldr	r3, [pc, #268]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a3f      	ldr	r2, [pc, #252]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b3d      	ldr	r3, [pc, #244]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	493a      	ldr	r1, [pc, #232]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a2:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	4935      	ldr	r1, [pc, #212]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 80036b6:	e01a      	b.n	80036ee <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036b8:	4b33      	ldr	r3, [pc, #204]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a32      	ldr	r2, [pc, #200]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036c4:	f7fd ff00 	bl	80014c8 <HAL_GetTick>
 80036c8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036cc:	f7fd fefc 	bl	80014c8 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e366      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1e0>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d073      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d005      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	2b0c      	cmp	r3, #12
 8003704:	d10e      	bne.n	8003724 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d10b      	bne.n	8003724 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d063      	beq.n	80037e0 <HAL_RCC_OscConfig+0x2f4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d15f      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e343      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800372c:	d106      	bne.n	800373c <HAL_RCC_OscConfig+0x250>
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a15      	ldr	r2, [pc, #84]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	e01d      	b.n	8003778 <HAL_RCC_OscConfig+0x28c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d10c      	bne.n	8003760 <HAL_RCC_OscConfig+0x274>
 8003746:	4b10      	ldr	r3, [pc, #64]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800374c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e00b      	b.n	8003778 <HAL_RCC_OscConfig+0x28c>
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a08      	ldr	r2, [pc, #32]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a05      	ldr	r2, [pc, #20]	; (8003788 <HAL_RCC_OscConfig+0x29c>)
 8003772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01b      	beq.n	80037b8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd fea2 	bl	80014c8 <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	e010      	b.n	80037aa <HAL_RCC_OscConfig+0x2be>
 8003788:	40021000 	.word	0x40021000
 800378c:	08009e20 	.word	0x08009e20
 8003790:	20000000 	.word	0x20000000
 8003794:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003798:	f7fd fe96 	bl	80014c8 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b64      	cmp	r3, #100	; 0x64
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e300      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037aa:	4ba0      	ldr	r3, [pc, #640]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x2ac>
 80037b6:	e014      	b.n	80037e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fd fe86 	bl	80014c8 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c0:	f7fd fe82 	bl	80014c8 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b64      	cmp	r3, #100	; 0x64
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e2ec      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037d2:	4b96      	ldr	r3, [pc, #600]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
 80037de:	e000      	b.n	80037e2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d060      	beq.n	80038b0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_OscConfig+0x314>
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d119      	bne.n	800382e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d116      	bne.n	800382e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003800:	4b8a      	ldr	r3, [pc, #552]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_OscConfig+0x32c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e2c9      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b84      	ldr	r3, [pc, #528]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	061b      	lsls	r3, r3, #24
 8003826:	4981      	ldr	r1, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800382c:	e040      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d023      	beq.n	800387e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003836:	4b7d      	ldr	r3, [pc, #500]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a7c      	ldr	r2, [pc, #496]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fd fe41 	bl	80014c8 <HAL_GetTick>
 8003846:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384a:	f7fd fe3d 	bl	80014c8 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e2a7      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0f0      	beq.n	800384a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003868:	4b70      	ldr	r3, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	061b      	lsls	r3, r3, #24
 8003876:	496d      	ldr	r1, [pc, #436]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
 800387c:	e018      	b.n	80038b0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800387e:	4b6b      	ldr	r3, [pc, #428]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388a:	f7fd fe1d 	bl	80014c8 <HAL_GetTick>
 800388e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003892:	f7fd fe19 	bl	80014c8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e283      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d07f      	beq.n	80039bc <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05f      	beq.n	8003984 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80038c4:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80038c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ca:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d037      	beq.n	800394a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d006      	beq.n	80038f2 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e25c      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01b      	beq.n	8003934 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 80038fc:	4b4b      	ldr	r3, [pc, #300]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003902:	4a4a      	ldr	r2, [pc, #296]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800390c:	f7fd fddc 	bl	80014c8 <HAL_GetTick>
 8003910:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7fd fdd8 	bl	80014c8 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b11      	cmp	r3, #17
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e242      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1ef      	bne.n	8003914 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003934:	4b3d      	ldr	r3, [pc, #244]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800393a:	f023 0210 	bic.w	r2, r3, #16
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	493a      	ldr	r1, [pc, #232]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003944:	4313      	orrs	r3, r2
 8003946:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394a:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800394c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003950:	4a36      	ldr	r2, [pc, #216]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395a:	f7fd fdb5 	bl	80014c8 <HAL_GetTick>
 800395e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003962:	f7fd fdb1 	bl	80014c8 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b11      	cmp	r3, #17
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e21b      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003974:	4b2d      	ldr	r3, [pc, #180]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ef      	beq.n	8003962 <HAL_RCC_OscConfig+0x476>
 8003982:	e01b      	b.n	80039bc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 8003986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800398a:	4a28      	ldr	r2, [pc, #160]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003994:	f7fd fd98 	bl	80014c8 <HAL_GetTick>
 8003998:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399c:	f7fd fd94 	bl	80014c8 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b11      	cmp	r3, #17
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1fe      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039ae:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80039b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ef      	bne.n	800399c <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80c1 	beq.w	8003b4c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10e      	bne.n	80039fa <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b13      	ldr	r3, [pc, #76]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	4a12      	ldr	r2, [pc, #72]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
 80039e8:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <HAL_RCC_OscConfig+0x540>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fa:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_OscConfig+0x544>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a06:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_OscConfig+0x544>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x544>)
 8003a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a12:	f7fd fd59 	bl	80014c8 <HAL_GetTick>
 8003a16:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a18:	e00c      	b.n	8003a34 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a1a:	f7fd fd55 	bl	80014c8 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d905      	bls.n	8003a34 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1bf      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a34:	4bb1      	ldr	r3, [pc, #708]	; (8003cfc <HAL_RCC_OscConfig+0x810>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ec      	beq.n	8003a1a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d02c      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003a4c:	4bac      	ldr	r3, [pc, #688]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	49a8      	ldr	r1, [pc, #672]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d010      	beq.n	8003a94 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003a72:	4ba3      	ldr	r3, [pc, #652]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	4aa1      	ldr	r2, [pc, #644]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a82:	4b9f      	ldr	r3, [pc, #636]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	4a9d      	ldr	r2, [pc, #628]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a92:	e018      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003a94:	4b9a      	ldr	r3, [pc, #616]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a9a:	4a99      	ldr	r2, [pc, #612]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003aa6:	4b96      	ldr	r3, [pc, #600]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aac:	4a94      	ldr	r2, [pc, #592]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003aae:	f023 0301 	bic.w	r3, r3, #1
 8003ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ab6:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abc:	4a90      	ldr	r2, [pc, #576]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003abe:	f023 0304 	bic.w	r3, r3, #4
 8003ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d016      	beq.n	8003afc <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ace:	f7fd fcfb 	bl	80014c8 <HAL_GetTick>
 8003ad2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad6:	f7fd fcf7 	bl	80014c8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e15f      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aec:	4b84      	ldr	r3, [pc, #528]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ed      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x5ea>
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd fce4 	bl	80014c8 <HAL_GetTick>
 8003b00:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b02:	e00a      	b.n	8003b1a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b04:	f7fd fce0 	bl	80014c8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e148      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1a:	4b79      	ldr	r3, [pc, #484]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1ed      	bne.n	8003b04 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003b28:	4b75      	ldr	r3, [pc, #468]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	4a74      	ldr	r2, [pc, #464]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b40:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b44:	4a6e      	ldr	r2, [pc, #440]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01c      	beq.n	8003b9a <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b60:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b66:	4a66      	ldr	r2, [pc, #408]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd fcaa 	bl	80014c8 <HAL_GetTick>
 8003b74:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b78:	f7fd fca6 	bl	80014c8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e110      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ef      	beq.n	8003b78 <HAL_RCC_OscConfig+0x68c>
 8003b98:	e01b      	b.n	8003bd2 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b9a:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba0:	4a57      	ldr	r2, [pc, #348]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003ba2:	f023 0301 	bic.w	r3, r3, #1
 8003ba6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003baa:	f7fd fc8d 	bl	80014c8 <HAL_GetTick>
 8003bae:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb2:	f7fd fc89 	bl	80014c8 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0f3      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bc4:	4b4e      	ldr	r3, [pc, #312]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003bc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1ef      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 80e7 	beq.w	8003daa <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	f040 80b7 	bne.w	8003d54 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003be6:	4b46      	ldr	r3, [pc, #280]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f003 0203 	and.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d124      	bne.n	8003c44 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	3b01      	subs	r3, #1
 8003c06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d11b      	bne.n	8003c44 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d113      	bne.n	8003c44 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d109      	bne.n	8003c44 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d061      	beq.n	8003d08 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d056      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c54:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c56:	f7fd fc37 	bl	80014c8 <HAL_GetTick>
 8003c5a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5e:	f7fd fc33 	bl	80014c8 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e09d      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c7c:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_RCC_OscConfig+0x818>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c8c:	3a01      	subs	r2, #1
 8003c8e:	0112      	lsls	r2, r2, #4
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c96:	0212      	lsls	r2, r2, #8
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c9e:	0852      	lsrs	r2, r2, #1
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	0552      	lsls	r2, r2, #21
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003caa:	0852      	lsrs	r2, r2, #1
 8003cac:	3a01      	subs	r2, #1
 8003cae:	0652      	lsls	r2, r2, #25
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	4913      	ldr	r1, [pc, #76]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cd0:	f7fd fbfa 	bl	80014c8 <HAL_GetTick>
 8003cd4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fd fbf6 	bl	80014c8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e060      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_OscConfig+0x814>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cf6:	e058      	b.n	8003daa <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e057      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	40021000 	.word	0x40021000
 8003d04:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d08:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d14a      	bne.n	8003daa <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d20:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d2c:	f7fd fbcc 	bl	80014c8 <HAL_GetTick>
 8003d30:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d34:	f7fd fbc8 	bl	80014c8 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e032      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCC_OscConfig+0x848>
 8003d52:	e02a      	b.n	8003daa <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d025      	beq.n	8003da6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a15      	ldr	r2, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d64:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	4a0f      	ldr	r2, [pc, #60]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d78:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fba3 	bl	80014c8 <HAL_GetTick>
 8003d82:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fd fb9f 	bl	80014c8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e009      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_OscConfig+0x8c8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x89a>
 8003da4:	e001      	b.n	8003daa <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3728      	adds	r7, #40	; 0x28
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000

08003db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0c8      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b66      	ldr	r3, [pc, #408]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b63      	ldr	r3, [pc, #396]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	4961      	ldr	r1, [pc, #388]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b5f      	ldr	r3, [pc, #380]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b0      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04c      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e10:	4b56      	ldr	r3, [pc, #344]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d121      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e09e      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e28:	4b50      	ldr	r3, [pc, #320]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d115      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e092      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e40:	4b4a      	ldr	r3, [pc, #296]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e086      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	4b46      	ldr	r3, [pc, #280]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e07e      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e60:	4b42      	ldr	r3, [pc, #264]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 0203 	bic.w	r2, r3, #3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	493f      	ldr	r1, [pc, #252]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e72:	f7fd fb29 	bl	80014c8 <HAL_GetTick>
 8003e76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7a:	f7fd fb25 	bl	80014c8 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e066      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 020c 	and.w	r2, r3, #12
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d1eb      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eae:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	492c      	ldr	r1, [pc, #176]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b29      	ldr	r3, [pc, #164]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d210      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b26      	ldr	r3, [pc, #152]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0207 	bic.w	r2, r3, #7
 8003ed6:	4924      	ldr	r1, [pc, #144]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_ClockConfig+0x1b0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e036      	b.n	8003f5e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d008      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	4918      	ldr	r1, [pc, #96]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4910      	ldr	r1, [pc, #64]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2e:	f000 f825 	bl	8003f7c <HAL_RCC_GetSysClockFreq>
 8003f32:	4601      	mov	r1, r0
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_RCC_ClockConfig+0x1b4>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	4a0c      	ldr	r2, [pc, #48]	; (8003f70 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	5cd3      	ldrb	r3, [r2, r3]
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	fa21 f303 	lsr.w	r3, r1, r3
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	; (8003f74 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fd fa68 	bl	8001428 <HAL_InitTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f5c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40022000 	.word	0x40022000
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	08009e20 	.word	0x08009e20
 8003f74:	20000000 	.word	0x20000000
 8003f78:	20000004 	.word	0x20000004

08003f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b089      	sub	sp, #36	; 0x24
 8003f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f94:	4b3a      	ldr	r3, [pc, #232]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	2b0c      	cmp	r3, #12
 8003fa8:	d121      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d11e      	bne.n	8003fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fb0:	4b33      	ldr	r3, [pc, #204]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fbc:	4b30      	ldr	r3, [pc, #192]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fcc:	4b2c      	ldr	r3, [pc, #176]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fd8:	4a2a      	ldr	r2, [pc, #168]	; (8004084 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10d      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fec:	e00a      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d102      	bne.n	8003ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e004      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004000:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_GetSysClockFreq+0x110>)
 8004002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b0c      	cmp	r3, #12
 8004008:	d133      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800400a:	4b1d      	ldr	r3, [pc, #116]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d002      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0xa4>
 800401a:	2b03      	cmp	r3, #3
 800401c:	d003      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0xaa>
 800401e:	e005      	b.n	800402c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004020:	4b19      	ldr	r3, [pc, #100]	; (8004088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004022:	617b      	str	r3, [r7, #20]
      break;
 8004024:	e005      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004026:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_GetSysClockFreq+0x110>)
 8004028:	617b      	str	r3, [r7, #20]
      break;
 800402a:	e002      	b.n	8004032 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	617b      	str	r3, [r7, #20]
      break;
 8004030:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	3301      	adds	r3, #1
 800403e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	fb02 f203 	mul.w	r2, r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_GetSysClockFreq+0x104>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	0e5b      	lsrs	r3, r3, #25
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004072:	69bb      	ldr	r3, [r7, #24]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3724      	adds	r7, #36	; 0x24
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40021000 	.word	0x40021000
 8004084:	08009e30 	.word	0x08009e30
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800409c:	4b2a      	ldr	r3, [pc, #168]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a8:	f7ff f9ac 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 80040ac:	6178      	str	r0, [r7, #20]
 80040ae:	e014      	b.n	80040da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b4:	4a24      	ldr	r2, [pc, #144]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6593      	str	r3, [r2, #88]	; 0x58
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c8:	f7ff f99c 	bl	8003404 <HAL_PWREx_GetVoltageRange>
 80040cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d2:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040e0:	d10b      	bne.n	80040fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d919      	bls.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2ba0      	cmp	r3, #160	; 0xa0
 80040ec:	d902      	bls.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ee:	2302      	movs	r3, #2
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e013      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f4:	2301      	movs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	e010      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d902      	bls.n	8004106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004100:	2303      	movs	r3, #3
 8004102:	613b      	str	r3, [r7, #16]
 8004104:	e00a      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b80      	cmp	r3, #128	; 0x80
 800410a:	d102      	bne.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800410c:	2302      	movs	r3, #2
 800410e:	613b      	str	r3, [r7, #16]
 8004110:	e004      	b.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b70      	cmp	r3, #112	; 0x70
 8004116:	d101      	bne.n	800411c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004118:	2301      	movs	r3, #1
 800411a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 0207 	bic.w	r2, r3, #7
 8004124:	4909      	ldr	r1, [pc, #36]	; (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800412c:	4b07      	ldr	r3, [pc, #28]	; (800414c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	429a      	cmp	r2, r3
 8004138:	d001      	beq.n	800413e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	40022000 	.word	0x40022000

08004150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004158:	2300      	movs	r3, #0
 800415a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800415c:	2300      	movs	r3, #0
 800415e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 809e 	beq.w	80042aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004172:	4b46      	ldr	r3, [pc, #280]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8004182:	2300      	movs	r3, #0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b40      	ldr	r3, [pc, #256]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	4a3f      	ldr	r2, [pc, #252]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	6593      	str	r3, [r2, #88]	; 0x58
 8004194:	4b3d      	ldr	r3, [pc, #244]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a0:	2301      	movs	r3, #1
 80041a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a4:	4b3a      	ldr	r3, [pc, #232]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a39      	ldr	r2, [pc, #228]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041b0:	f7fd f98a 	bl	80014c8 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041b6:	e009      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd f986 	bl	80014c8 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d902      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	74fb      	strb	r3, [r7, #19]
        break;
 80041ca:	e005      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041cc:	4b30      	ldr	r3, [pc, #192]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ef      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d15a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041de:	4b2b      	ldr	r3, [pc, #172]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01e      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d019      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80041fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004206:	4b21      	ldr	r3, [pc, #132]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800420e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421c:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004226:	4a19      	ldr	r2, [pc, #100]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d016      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fd f946 	bl	80014c8 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800423e:	e00b      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fd f942 	bl	80014c8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d902      	bls.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	74fb      	strb	r3, [r7, #19]
            break;
 8004256:	e006      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0ec      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426c:	4b07      	ldr	r3, [pc, #28]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4904      	ldr	r1, [pc, #16]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004282:	e009      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004284:	7cfb      	ldrb	r3, [r7, #19]
 8004286:	74bb      	strb	r3, [r7, #18]
 8004288:	e006      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800428a:	bf00      	nop
 800428c:	40021000 	.word	0x40021000
 8004290:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004298:	7c7b      	ldrb	r3, [r7, #17]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d105      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429e:	4b6e      	ldr	r3, [pc, #440]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a2:	4a6d      	ldr	r2, [pc, #436]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042b6:	4b68      	ldr	r3, [pc, #416]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f023 0203 	bic.w	r2, r3, #3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4964      	ldr	r1, [pc, #400]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042d8:	4b5f      	ldr	r3, [pc, #380]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f023 020c 	bic.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	495c      	ldr	r1, [pc, #368]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0304 	and.w	r3, r3, #4
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042fa:	4b57      	ldr	r3, [pc, #348]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4953      	ldr	r1, [pc, #332]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800431c:	4b4e      	ldr	r3, [pc, #312]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	494b      	ldr	r1, [pc, #300]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800433e:	4b46      	ldr	r3, [pc, #280]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4942      	ldr	r1, [pc, #264]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004360:	4b3d      	ldr	r3, [pc, #244]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	493a      	ldr	r1, [pc, #232]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004382:	4b35      	ldr	r3, [pc, #212]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	4931      	ldr	r1, [pc, #196]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043a4:	4b2c      	ldr	r3, [pc, #176]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	4929      	ldr	r1, [pc, #164]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c6:	4b24      	ldr	r3, [pc, #144]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4920      	ldr	r1, [pc, #128]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043e8:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	4918      	ldr	r1, [pc, #96]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a12      	ldr	r2, [pc, #72]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004412:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004420:	4b0d      	ldr	r3, [pc, #52]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	490a      	ldr	r1, [pc, #40]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a04      	ldr	r2, [pc, #16]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800444a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800444c:	7cbb      	ldrb	r3, [r7, #18]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e095      	b.n	800459a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc f9ae 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044d4:	d902      	bls.n	80044dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	e002      	b.n	80044e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ea:	d007      	beq.n	80044fc <HAL_SPI_Init+0xa0>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044f4:	d002      	beq.n	80044fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	ea42 0103 	orr.w	r1, r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	0c1b      	lsrs	r3, r3, #16
 8004558:	f003 0204 	and.w	r2, r3, #4
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004578:	ea42 0103 	orr.w	r1, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	603b      	str	r3, [r7, #0]
 80045ae:	4613      	mov	r3, r2
 80045b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_SPI_Transmit+0x22>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e158      	b.n	8004876 <HAL_SPI_Transmit+0x2d4>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045cc:	f7fc ff7c 	bl	80014c8 <HAL_GetTick>
 80045d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
 80045e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045e6:	e13d      	b.n	8004864 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_SPI_Transmit+0x52>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045f8:	e134      	b.n	8004864 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2203      	movs	r2, #3
 80045fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	88fa      	ldrh	r2, [r7, #6]
 8004618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d10f      	bne.n	8004666 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004670:	2b40      	cmp	r3, #64	; 0x40
 8004672:	d007      	beq.n	8004684 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800468c:	d94b      	bls.n	8004726 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_SPI_Transmit+0xfa>
 8004696:	8afb      	ldrh	r3, [r7, #22]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d13e      	bne.n	800471a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80046c0:	e02b      	b.n	800471a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d112      	bne.n	80046f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	1c9a      	adds	r2, r3, #2
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f4:	e011      	b.n	800471a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046f6:	f7fc fee7 	bl	80014c8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d803      	bhi.n	800470e <HAL_SPI_Transmit+0x16c>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d102      	bne.n	8004714 <HAL_SPI_Transmit+0x172>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d102      	bne.n	800471a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004718:	e0a4      	b.n	8004864 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471e:	b29b      	uxth	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ce      	bne.n	80046c2 <HAL_SPI_Transmit+0x120>
 8004724:	e07c      	b.n	8004820 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d002      	beq.n	8004734 <HAL_SPI_Transmit+0x192>
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d170      	bne.n	8004816 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d912      	bls.n	8004764 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	881a      	ldrh	r2, [r3, #0]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	1c9a      	adds	r2, r3, #2
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b02      	subs	r3, #2
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004762:	e058      	b.n	8004816 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	7812      	ldrb	r2, [r2, #0]
 8004770:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800478a:	e044      	b.n	8004816 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b02      	cmp	r3, #2
 8004798:	d12b      	bne.n	80047f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d912      	bls.n	80047ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b02      	subs	r3, #2
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c8:	e025      	b.n	8004816 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	330c      	adds	r3, #12
 80047d4:	7812      	ldrb	r2, [r2, #0]
 80047d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f0:	e011      	b.n	8004816 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047f2:	f7fc fe69 	bl	80014c8 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d803      	bhi.n	800480a <HAL_SPI_Transmit+0x268>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d102      	bne.n	8004810 <HAL_SPI_Transmit+0x26e>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004814:	e026      	b.n	8004864 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1b5      	bne.n	800478c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 fcdb 	bl	80051e0 <SPI_EndRxTxTransaction>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800483e:	2300      	movs	r3, #0
 8004840:	613b      	str	r3, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	613b      	str	r3, [r7, #16]
 8004852:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e000      	b.n	8004864 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004874:	7ffb      	ldrb	r3, [r7, #31]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b088      	sub	sp, #32
 8004882:	af02      	add	r7, sp, #8
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d112      	bne.n	80048c2 <HAL_SPI_Receive+0x44>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10e      	bne.n	80048c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2204      	movs	r2, #4
 80048a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80048ac:	88fa      	ldrh	r2, [r7, #6]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	4613      	mov	r3, r2
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f910 	bl	8004ade <HAL_SPI_TransmitReceive>
 80048be:	4603      	mov	r3, r0
 80048c0:	e109      	b.n	8004ad6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_SPI_Receive+0x52>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e102      	b.n	8004ad6 <HAL_SPI_Receive+0x258>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048d8:	f7fc fdf6 	bl	80014c8 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80048ea:	2302      	movs	r3, #2
 80048ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80048ee:	e0e9      	b.n	8004ac4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_Receive+0x7e>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d102      	bne.n	8004902 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004900:	e0e0      	b.n	8004ac4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2204      	movs	r2, #4
 8004906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	88fa      	ldrh	r2, [r7, #6]
 800491a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800494c:	d908      	bls.n	8004960 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800495c:	605a      	str	r2, [r3, #4]
 800495e:	e007      	b.n	8004970 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800496e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	d10f      	bne.n	800499a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004988:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004998:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a4:	2b40      	cmp	r3, #64	; 0x40
 80049a6:	d007      	beq.n	80049b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049c0:	d867      	bhi.n	8004a92 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80049c2:	e030      	b.n	8004a26 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d117      	bne.n	8004a02 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f103 020c 	add.w	r2, r3, #12
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a00:	e011      	b.n	8004a26 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a02:	f7fc fd61 	bl	80014c8 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d803      	bhi.n	8004a1a <HAL_SPI_Receive+0x19c>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d102      	bne.n	8004a20 <HAL_SPI_Receive+0x1a2>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a24:	e04e      	b.n	8004ac4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1c8      	bne.n	80049c4 <HAL_SPI_Receive+0x146>
 8004a32:	e034      	b.n	8004a9e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d115      	bne.n	8004a6e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	b292      	uxth	r2, r2
 8004a4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	1c9a      	adds	r2, r3, #2
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004a6c:	e011      	b.n	8004a92 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6e:	f7fc fd2b 	bl	80014c8 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d803      	bhi.n	8004a86 <HAL_SPI_Receive+0x208>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d102      	bne.n	8004a8c <HAL_SPI_Receive+0x20e>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004a90:	e018      	b.n	8004ac4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ca      	bne.n	8004a34 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fb44 	bl	8005130 <SPI_EndRxTransaction>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	75fb      	strb	r3, [r7, #23]
 8004ac0:	e000      	b.n	8004ac4 <HAL_SPI_Receive+0x246>
  }

error :
 8004ac2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08a      	sub	sp, #40	; 0x28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004aec:	2301      	movs	r3, #1
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x26>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e1fb      	b.n	8004efc <HAL_SPI_TransmitReceive+0x41e>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b0c:	f7fc fcdc 	bl	80014c8 <HAL_GetTick>
 8004b10:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b18:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b20:	887b      	ldrh	r3, [r7, #2]
 8004b22:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004b24:	887b      	ldrh	r3, [r7, #2]
 8004b26:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b28:	7efb      	ldrb	r3, [r7, #27]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d00e      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x6e>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b34:	d106      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d102      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x66>
 8004b3e:	7efb      	ldrb	r3, [r7, #27]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d003      	beq.n	8004b4c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004b44:	2302      	movs	r3, #2
 8004b46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b4a:	e1cd      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x80>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x80>
 8004b58:	887b      	ldrh	r3, [r7, #2]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d103      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004b64:	e1c0      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d003      	beq.n	8004b7a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2205      	movs	r2, #5
 8004b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	887a      	ldrh	r2, [r7, #2]
 8004b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	887a      	ldrh	r2, [r7, #2]
 8004b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	887a      	ldrh	r2, [r7, #2]
 8004ba6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bbc:	d802      	bhi.n	8004bc4 <HAL_SPI_TransmitReceive+0xe6>
 8004bbe:	8a3b      	ldrh	r3, [r7, #16]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d908      	bls.n	8004bd6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd2:	605a      	str	r2, [r3, #4]
 8004bd4:	e007      	b.n	8004be6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d007      	beq.n	8004c04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0c:	d97c      	bls.n	8004d08 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d002      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x13e>
 8004c16:	8a7b      	ldrh	r3, [r7, #18]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d169      	bne.n	8004cf0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	1c9a      	adds	r2, r3, #2
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c40:	e056      	b.n	8004cf0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d11b      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x1aa>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x1aa>
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d113      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	881a      	ldrh	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	1c9a      	adds	r2, r3, #2
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d11c      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x1f2>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d016      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	b292      	uxth	r2, r2
 8004cae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	1c9a      	adds	r2, r3, #2
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cd0:	f7fc fbfa 	bl	80014c8 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d807      	bhi.n	8004cf0 <HAL_SPI_TransmitReceive+0x212>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d003      	beq.n	8004cf0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004cee:	e0fb      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1a3      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x164>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d19d      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x164>
 8004d06:	e0df      	b.n	8004ec8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x23a>
 8004d10:	8a7b      	ldrh	r3, [r7, #18]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f040 80cb 	bne.w	8004eae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d912      	bls.n	8004d48 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d26:	881a      	ldrh	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	1c9a      	adds	r2, r3, #2
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b02      	subs	r3, #2
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d46:	e0b2      	b.n	8004eae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	7812      	ldrb	r2, [r2, #0]
 8004d54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d6e:	e09e      	b.n	8004eae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d134      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x30a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02f      	beq.n	8004de8 <HAL_SPI_TransmitReceive+0x30a>
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d12c      	bne.n	8004de8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d912      	bls.n	8004dbe <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b02      	subs	r3, #2
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dbc:	e012      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d148      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x3aa>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d042      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d923      	bls.n	8004e56 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	b292      	uxth	r2, r2
 8004e1a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	3b02      	subs	r3, #2
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d81f      	bhi.n	8004e84 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e52:	605a      	str	r2, [r3, #4]
 8004e54:	e016      	b.n	8004e84 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f103 020c 	add.w	r2, r3, #12
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	7812      	ldrb	r2, [r2, #0]
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e88:	f7fc fb1e 	bl	80014c8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d803      	bhi.n	8004ea0 <HAL_SPI_TransmitReceive+0x3c2>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d102      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x3c8>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004eac:	e01c      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f af5b 	bne.w	8004d70 <HAL_SPI_TransmitReceive+0x292>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f47f af54 	bne.w	8004d70 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f987 	bl	80051e0 <SPI_EndRxTxTransaction>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d006      	beq.n	8004ee6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60
 8004ee4:	e000      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004ee6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3728      	adds	r7, #40	; 0x28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f14:	f7fc fad8 	bl	80014c8 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f24:	f7fc fad0 	bl	80014c8 <HAL_GetTick>
 8004f28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f2a:	4b39      	ldr	r3, [pc, #228]	; (8005010 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	0d1b      	lsrs	r3, r3, #20
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	fb02 f303 	mul.w	r3, r2, r3
 8004f38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3a:	e054      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f42:	d050      	beq.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f44:	f7fc fac0 	bl	80014c8 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d902      	bls.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d13d      	bne.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d111      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7c:	d004      	beq.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f86:	d107      	bne.n	8004f98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d10f      	bne.n	8004fc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e017      	b.n	8005006 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	bf0c      	ite	eq
 8004ff6:	2301      	moveq	r3, #1
 8004ff8:	2300      	movne	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	79fb      	ldrb	r3, [r7, #7]
 8005000:	429a      	cmp	r2, r3
 8005002:	d19b      	bne.n	8004f3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3720      	adds	r7, #32
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000000 	.word	0x20000000

08005014 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005022:	f7fc fa51 	bl	80014c8 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	4413      	add	r3, r2
 8005030:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005032:	f7fc fa49 	bl	80014c8 <HAL_GetTick>
 8005036:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005038:	4b3c      	ldr	r3, [pc, #240]	; (800512c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	00da      	lsls	r2, r3, #3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	0d1b      	lsrs	r3, r3, #20
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8005050:	e05f      	b.n	8005112 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005058:	d106      	bne.n	8005068 <SPI_WaitFifoStateUntilTimeout+0x54>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d050      	beq.n	8005112 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005070:	f7fc fa2a 	bl	80014c8 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	429a      	cmp	r2, r3
 800507e:	d902      	bls.n	8005086 <SPI_WaitFifoStateUntilTimeout+0x72>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d13d      	bne.n	8005102 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005094:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800509e:	d111      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	d004      	beq.n	80050b4 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d107      	bne.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d10f      	bne.n	80050ee <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e010      	b.n	8005124 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3b01      	subs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4013      	ands	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d197      	bne.n	8005052 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3720      	adds	r7, #32
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20000000 	.word	0x20000000

08005130 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af02      	add	r7, sp, #8
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005144:	d111      	bne.n	800516a <SPI_EndRxTransaction+0x3a>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514e:	d004      	beq.n	800515a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d107      	bne.n	800516a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2200      	movs	r2, #0
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fec5 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e023      	b.n	80051d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005198:	d11d      	bne.n	80051d6 <SPI_EndRxTransaction+0xa6>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a2:	d004      	beq.n	80051ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ac:	d113      	bne.n	80051d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f7ff ff2a 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ca:	f043 0220 	orr.w	r2, r3, #32
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e000      	b.n	80051d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ff0b 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005208:	f043 0220 	orr.w	r2, r3, #32
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e027      	b.n	8005264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2180      	movs	r1, #128	; 0x80
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fe70 	bl	8004f04 <SPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d007      	beq.n	800523a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e014      	b.n	8005264 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2200      	movs	r2, #0
 8005242:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fee4 	bl	8005014 <SPI_WaitFifoStateUntilTimeout>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005256:	f043 0220 	orr.w	r2, r3, #32
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e000      	b.n	8005264 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e049      	b.n	8005312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fb fc1c 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f000 f8ee 	bl	800548c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_TIM_ConfigClockSource+0x18>
 800532e:	2302      	movs	r3, #2
 8005330:	e0a8      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x16a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005350:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005354:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d067      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x124>
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d80b      	bhi.n	800538a <HAL_TIM_ConfigClockSource+0x70>
 8005372:	2b10      	cmp	r3, #16
 8005374:	d073      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x144>
 8005376:	2b10      	cmp	r3, #16
 8005378:	d802      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x66>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d06f      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800537e:	e078      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005380:	2b20      	cmp	r3, #32
 8005382:	d06c      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x144>
 8005384:	2b30      	cmp	r3, #48	; 0x30
 8005386:	d06a      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005388:	e073      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800538a:	2b70      	cmp	r3, #112	; 0x70
 800538c:	d00d      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0x90>
 800538e:	2b70      	cmp	r3, #112	; 0x70
 8005390:	d804      	bhi.n	800539c <HAL_TIM_ConfigClockSource+0x82>
 8005392:	2b50      	cmp	r3, #80	; 0x50
 8005394:	d033      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xe4>
 8005396:	2b60      	cmp	r3, #96	; 0x60
 8005398:	d041      	beq.n	800541e <HAL_TIM_ConfigClockSource+0x104>
      break;
 800539a:	e06a      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a0:	d066      	beq.n	8005470 <HAL_TIM_ConfigClockSource+0x156>
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	d017      	beq.n	80053d8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80053a8:	e063      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6899      	ldr	r1, [r3, #8]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f000 f945 	bl	8005648 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	609a      	str	r2, [r3, #8]
      break;
 80053d6:	e04c      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6899      	ldr	r1, [r3, #8]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f000 f92e 	bl	8005648 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053fa:	609a      	str	r2, [r3, #8]
      break;
 80053fc:	e039      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6859      	ldr	r1, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	461a      	mov	r2, r3
 800540c:	f000 f8a2 	bl	8005554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2150      	movs	r1, #80	; 0x50
 8005416:	4618      	mov	r0, r3
 8005418:	f000 f8fb 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 800541c:	e029      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 f8c1 	bl	80055b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2160      	movs	r1, #96	; 0x60
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f8eb 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 800543c:	e019      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	461a      	mov	r2, r3
 800544c:	f000 f882 	bl	8005554 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8db 	bl	8005612 <TIM_ITRx_SetConfig>
      break;
 800545c:	e009      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f000 f8d2 	bl	8005612 <TIM_ITRx_SetConfig>
        break;
 800546e:	e000      	b.n	8005472 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005470:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2a      	ldr	r2, [pc, #168]	; (8005548 <TIM_Base_SetConfig+0xbc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x20>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a21      	ldr	r2, [pc, #132]	; (8005548 <TIM_Base_SetConfig+0xbc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00b      	beq.n	80054de <TIM_Base_SetConfig+0x52>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d007      	beq.n	80054de <TIM_Base_SetConfig+0x52>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1e      	ldr	r2, [pc, #120]	; (800554c <TIM_Base_SetConfig+0xc0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_Base_SetConfig+0x52>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <TIM_Base_SetConfig+0xc4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d108      	bne.n	80054f0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0c      	ldr	r2, [pc, #48]	; (8005548 <TIM_Base_SetConfig+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d007      	beq.n	800552c <TIM_Base_SetConfig+0xa0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a0b      	ldr	r2, [pc, #44]	; (800554c <TIM_Base_SetConfig+0xc0>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_Base_SetConfig+0xa0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <TIM_Base_SetConfig+0xc4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d103      	bne.n	8005534 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	615a      	str	r2, [r3, #20]
}
 800553a:	bf00      	nop
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400

08005554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800557e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f023 030a 	bic.w	r3, r3, #10
 8005590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b2:	b480      	push	{r7}
 80055b4:	b087      	sub	sp, #28
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f023 0210 	bic.w	r2, r3, #16
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	031b      	lsls	r3, r3, #12
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005612:	b480      	push	{r7}
 8005614:	b085      	sub	sp, #20
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	f043 0307 	orr.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	609a      	str	r2, [r3, #8]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	431a      	orrs	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	4313      	orrs	r3, r2
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800569c:	2302      	movs	r3, #2
 800569e:	e04f      	b.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a14      	ldr	r2, [pc, #80]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d004      	beq.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a10      	ldr	r2, [pc, #64]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d10c      	bne.n	800572e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40014000 	.word	0x40014000

08005754 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005754:	b084      	sub	sp, #16
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	f107 0014 	add.w	r0, r7, #20
 8005762:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	b004      	add	sp, #16
 8005774:	4770      	bx	lr

08005776 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005786:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800578a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	b29a      	uxth	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80057b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	43db      	mvns	r3, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	4013      	ands	r3, r2
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 0014 	add.w	r0, r7, #20
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	b004      	add	sp, #16
 8005834:	4770      	bx	lr
	...

08005838 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005838:	b480      	push	{r7}
 800583a:	b09b      	sub	sp, #108	; 0x6c
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	2b03      	cmp	r3, #3
 8005868:	d81f      	bhi.n	80058aa <USB_ActivateEndpoint+0x72>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <USB_ActivateEndpoint+0x38>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058b3 	.word	0x080058b3
 800587c:	0800588f 	.word	0x0800588f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005880:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005884:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005888:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800588c:	e012      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800588e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005892:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005896:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800589a:	e00b      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800589c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80058a8:	e004      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80058b0:	e000      	b.n	80058b4 <USB_ActivateEndpoint+0x7c>
      break;
 80058b2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	441a      	add	r2, r3
 80058be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80058c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	881b      	ldrh	r3, [r3, #0]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	b21a      	sxth	r2, r3
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b21b      	sxth	r3, r3
 80058fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	441a      	add	r2, r3
 8005908:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800590c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005910:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591c:	b29b      	uxth	r3, r3
 800591e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7b1b      	ldrb	r3, [r3, #12]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f040 8149 	bne.w	8005bbc <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8084 	beq.w	8005a3c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	4413      	add	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	00da      	lsls	r2, r3, #3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	81fb      	strh	r3, [r7, #14]
 8005976:	89fb      	ldrh	r3, [r7, #14]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d01b      	beq.n	80059b8 <USB_ActivateEndpoint+0x180>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29b      	uxth	r3, r3
 800598e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	81bb      	strh	r3, [r7, #12]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	89bb      	ldrh	r3, [r7, #12]
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	78db      	ldrb	r3, [r3, #3]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d020      	beq.n	8005a02 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	813b      	strh	r3, [r7, #8]
 80059d8:	893b      	ldrh	r3, [r7, #8]
 80059da:	f083 0320 	eor.w	r3, r3, #32
 80059de:	813b      	strh	r3, [r7, #8]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	441a      	add	r2, r3
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	8013      	strh	r3, [r2, #0]
 8005a00:	e27f      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a18:	817b      	strh	r3, [r7, #10]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	441a      	add	r2, r3
 8005a24:	897b      	ldrh	r3, [r7, #10]
 8005a26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8013      	strh	r3, [r2, #0]
 8005a3a:	e262      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4c:	4413      	add	r3, r2
 8005a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	00da      	lsls	r2, r3, #3
 8005a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	88db      	ldrh	r3, [r3, #6]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	4413      	add	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	; 0x24
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d112      	bne.n	8005ac2 <USB_ActivateEndpoint+0x28a>
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	801a      	strh	r2, [r3, #0]
 8005ac0:	e02f      	b.n	8005b22 <USB_ActivateEndpoint+0x2ea>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8005ac8:	d813      	bhi.n	8005af2 <USB_ActivateEndpoint+0x2ba>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <USB_ActivateEndpoint+0x2ac>
 8005ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	029b      	lsls	r3, r3, #10
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e017      	b.n	8005b22 <USB_ActivateEndpoint+0x2ea>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	663b      	str	r3, [r7, #96]	; 0x60
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	f003 031f 	and.w	r3, r3, #31
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d102      	bne.n	8005b0c <USB_ActivateEndpoint+0x2d4>
 8005b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	029b      	lsls	r3, r3, #10
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	83fb      	strh	r3, [r7, #30]
 8005b30:	8bfb      	ldrh	r3, [r7, #30]
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01b      	beq.n	8005b72 <USB_ActivateEndpoint+0x33a>
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b50:	83bb      	strh	r3, [r7, #28]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	441a      	add	r2, r3
 8005b5c:	8bbb      	ldrh	r3, [r7, #28]
 8005b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b88:	837b      	strh	r3, [r7, #26]
 8005b8a:	8b7b      	ldrh	r3, [r7, #26]
 8005b8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005b90:	837b      	strh	r3, [r7, #26]
 8005b92:	8b7b      	ldrh	r3, [r7, #26]
 8005b94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b98:	837b      	strh	r3, [r7, #26]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	441a      	add	r2, r3
 8005ba4:	8b7b      	ldrh	r3, [r7, #26]
 8005ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e1a2      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	461a      	mov	r2, r3
 8005c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c08:	4413      	add	r3, r2
 8005c0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	891b      	ldrh	r3, [r3, #8]
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2a:	801a      	strh	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3c:	4413      	add	r3, r2
 8005c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	00da      	lsls	r2, r3, #3
 8005c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c48:	4413      	add	r3, r2
 8005c4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	895b      	ldrh	r3, [r3, #10]
 8005c54:	085b      	lsrs	r3, r3, #1
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 8091 	bne.w	8005d8c <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005c78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01b      	beq.n	8005cba <USB_ActivateEndpoint+0x482>
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	881b      	ldrh	r3, [r3, #0]
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c98:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005cc8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <USB_ActivateEndpoint+0x4d2>
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	441a      	add	r2, r3
 8005cf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d20:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d22:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d24:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d28:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d2a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d30:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	441a      	add	r2, r3
 8005d3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	867b      	strh	r3, [r7, #50]	; 0x32
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	441a      	add	r2, r3
 8005d74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	8013      	strh	r3, [r2, #0]
 8005d8a:	e0ba      	b.n	8005f02 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d9c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01d      	beq.n	8005de4 <USB_ActivateEndpoint+0x5ac>
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005df4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d01d      	beq.n	8005e3c <USB_ActivateEndpoint+0x604>
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	441a      	add	r2, r3
 8005e24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	78db      	ldrb	r3, [r3, #3]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d024      	beq.n	8005e8e <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e62:	f083 0320 	eor.w	r3, r3, #32
 8005e66:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	441a      	add	r2, r3
 8005e74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	8013      	strh	r3, [r2, #0]
 8005e8c:	e01d      	b.n	8005eca <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	881b      	ldrh	r3, [r3, #0]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	376c      	adds	r7, #108	; 0x6c
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop

08005f14 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b08d      	sub	sp, #52	; 0x34
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	7b1b      	ldrb	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f040 808e 	bne.w	8006044 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d044      	beq.n	8005fba <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	81bb      	strh	r3, [r7, #12]
 8005f3e:	89bb      	ldrh	r3, [r7, #12]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01b      	beq.n	8005f80 <USB_DeactivateEndpoint+0x6c>
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	881b      	ldrh	r3, [r3, #0]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f5e:	817b      	strh	r3, [r7, #10]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	441a      	add	r2, r3
 8005f6a:	897b      	ldrh	r3, [r7, #10]
 8005f6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	813b      	strh	r3, [r7, #8]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	893b      	ldrh	r3, [r7, #8]
 8005fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]
 8005fb8:	e192      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	827b      	strh	r3, [r7, #18]
 8005fc8:	8a7b      	ldrh	r3, [r7, #18]
 8005fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01b      	beq.n	800600a <USB_DeactivateEndpoint+0xf6>
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	823b      	strh	r3, [r7, #16]
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	8a3b      	ldrh	r3, [r7, #16]
 8005ff6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ffa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006006:	b29b      	uxth	r3, r3
 8006008:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	81fb      	strh	r3, [r7, #14]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	89fb      	ldrh	r3, [r7, #14]
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e14d      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	785b      	ldrb	r3, [r3, #1]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 80a5 	bne.w	8006198 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	843b      	strh	r3, [r7, #32]
 800605c:	8c3b      	ldrh	r3, [r7, #32]
 800605e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <USB_DeactivateEndpoint+0x18a>
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	881b      	ldrh	r3, [r3, #0]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607c:	83fb      	strh	r3, [r7, #30]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	8bfb      	ldrh	r3, [r7, #30]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	83bb      	strh	r3, [r7, #28]
 80060ac:	8bbb      	ldrh	r3, [r7, #28]
 80060ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <USB_DeactivateEndpoint+0x1da>
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060cc:	837b      	strh	r3, [r7, #26]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8b7b      	ldrh	r3, [r7, #26]
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006104:	833b      	strh	r3, [r7, #24]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	441a      	add	r2, r3
 8006110:	8b3b      	ldrh	r3, [r7, #24]
 8006112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006122:	b29b      	uxth	r3, r3
 8006124:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	b29b      	uxth	r3, r3
 8006134:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613c:	82fb      	strh	r3, [r7, #22]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	8afb      	ldrh	r3, [r7, #22]
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	881b      	ldrh	r3, [r3, #0]
 800616a:	b29b      	uxth	r3, r3
 800616c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	82bb      	strh	r3, [r7, #20]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8abb      	ldrh	r3, [r7, #20]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
 8006196:	e0a3      	b.n	80062e0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01b      	beq.n	80061e8 <USB_DeactivateEndpoint+0x2d4>
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	441a      	add	r2, r3
 80061d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d01b      	beq.n	8006238 <USB_DeactivateEndpoint+0x324>
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	853b      	strh	r3, [r7, #40]	; 0x28
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	441a      	add	r2, r3
 8006222:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	441a      	add	r2, r3
 800625a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800625c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626c:	b29b      	uxth	r3, r3
 800626e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	b29b      	uxth	r3, r3
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	441a      	add	r2, r3
 8006292:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	881b      	ldrh	r3, [r3, #0]
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062be:	847b      	strh	r3, [r7, #34]	; 0x22
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3734      	adds	r7, #52	; 0x34
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b0c4      	sub	sp, #272	; 0x110
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	1d3b      	adds	r3, r7, #4
 80062f6:	6018      	str	r0, [r3, #0]
 80062f8:	463b      	mov	r3, r7
 80062fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062fc:	463b      	mov	r3, r7
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	785b      	ldrb	r3, [r3, #1]
 8006302:	2b01      	cmp	r3, #1
 8006304:	f040 8566 	bne.w	8006dd4 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006308:	463b      	mov	r3, r7
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699a      	ldr	r2, [r3, #24]
 800630e:	463b      	mov	r3, r7
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	429a      	cmp	r2, r3
 8006316:	d905      	bls.n	8006324 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006318:	463b      	mov	r3, r7
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006322:	e004      	b.n	800632e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006324:	463b      	mov	r3, r7
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800632e:	463b      	mov	r3, r7
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	7b1b      	ldrb	r3, [r3, #12]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d12c      	bne.n	8006392 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006338:	463b      	mov	r3, r7
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6959      	ldr	r1, [r3, #20]
 800633e:	463b      	mov	r3, r7
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	88da      	ldrh	r2, [r3, #6]
 8006344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006348:	b29b      	uxth	r3, r3
 800634a:	1d38      	adds	r0, r7, #4
 800634c:	6800      	ldr	r0, [r0, #0]
 800634e:	f001 fa58 	bl	8007802 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	1d3b      	adds	r3, r7, #4
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	4413      	add	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	463b      	mov	r3, r7
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	00da      	lsls	r2, r3, #3
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	4413      	add	r3, r2
 8006376:	f203 4202 	addw	r2, r3, #1026	; 0x402
 800637a:	f107 0310 	add.w	r3, r7, #16
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006384:	b29a      	uxth	r2, r3
 8006386:	f107 0310 	add.w	r3, r7, #16
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	801a      	strh	r2, [r3, #0]
 800638e:	f000 bcec 	b.w	8006d6a <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006392:	463b      	mov	r3, r7
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f040 8356 	bne.w	8006a4a <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800639e:	463b      	mov	r3, r7
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1a      	ldr	r2, [r3, #32]
 80063a4:	463b      	mov	r3, r7
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	f240 82fa 	bls.w	80069a4 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80063b0:	1d3b      	adds	r3, r7, #4
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	463b      	mov	r3, r7
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80063ce:	1d3b      	adds	r3, r7, #4
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	463b      	mov	r3, r7
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	441a      	add	r2, r3
 80063dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80063e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80063ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 80063f4:	463b      	mov	r3, r7
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80063fe:	463b      	mov	r3, r7
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a1a      	ldr	r2, [r3, #32]
 8006404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006408:	1ad2      	subs	r2, r2, r3
 800640a:	463b      	mov	r3, r7
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	463b      	mov	r3, r7
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 815e 	beq.w	80066e8 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800642c:	1d3b      	adds	r3, r7, #4
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	463b      	mov	r3, r7
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	785b      	ldrb	r3, [r3, #1]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d164      	bne.n	8006506 <USB_EPStartXfer+0x218>
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	4413      	add	r3, r2
 8006452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006454:	463b      	mov	r3, r7
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	00da      	lsls	r2, r3, #3
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	4413      	add	r3, r2
 8006460:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28
 8006466:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800646a:	2b00      	cmp	r3, #0
 800646c:	d112      	bne.n	8006494 <USB_EPStartXfer+0x1a6>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006478:	b29a      	uxth	r2, r3
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	801a      	strh	r2, [r3, #0]
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	b29b      	uxth	r3, r3
 8006484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800648c:	b29a      	uxth	r2, r3
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	e054      	b.n	800653e <USB_EPStartXfer+0x250>
 8006494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006498:	2b3e      	cmp	r3, #62	; 0x3e
 800649a:	d817      	bhi.n	80064cc <USB_EPStartXfer+0x1de>
 800649c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <USB_EPStartXfer+0x1ce>
 80064b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064b6:	3301      	adds	r3, #1
 80064b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	029b      	lsls	r3, r3, #10
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e038      	b.n	800653e <USB_EPStartXfer+0x250>
 80064cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d104      	bne.n	80064ec <USB_EPStartXfer+0x1fe>
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	3b01      	subs	r3, #1
 80064e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	029b      	lsls	r3, r3, #10
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064fe:	b29a      	uxth	r2, r3
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	e01b      	b.n	800653e <USB_EPStartXfer+0x250>
 8006506:	463b      	mov	r3, r7
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	d116      	bne.n	800653e <USB_EPStartXfer+0x250>
 8006510:	1d3b      	adds	r3, r7, #4
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006518:	b29b      	uxth	r3, r3
 800651a:	461a      	mov	r2, r3
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	4413      	add	r3, r2
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	463b      	mov	r3, r7
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	00da      	lsls	r2, r3, #3
 800652a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652c:	4413      	add	r3, r2
 800652e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006532:	633b      	str	r3, [r7, #48]	; 0x30
 8006534:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006538:	b29a      	uxth	r2, r3
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800653e:	463b      	mov	r3, r7
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	895b      	ldrh	r3, [r3, #10]
 8006544:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006552:	b29b      	uxth	r3, r3
 8006554:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006558:	1d38      	adds	r0, r7, #4
 800655a:	6800      	ldr	r0, [r0, #0]
 800655c:	f001 f951 	bl	8007802 <USB_WritePMA>
            ep->xfer_buff += len;
 8006560:	463b      	mov	r3, r7
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695a      	ldr	r2, [r3, #20]
 8006566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800656a:	441a      	add	r2, r3
 800656c:	463b      	mov	r3, r7
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006572:	463b      	mov	r3, r7
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d90e      	bls.n	80065a0 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006582:	463b      	mov	r3, r7
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 800658c:	463b      	mov	r3, r7
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a1a      	ldr	r2, [r3, #32]
 8006592:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	463b      	mov	r3, r7
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	621a      	str	r2, [r3, #32]
 800659e:	e008      	b.n	80065b2 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80065aa:	463b      	mov	r3, r7
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2200      	movs	r2, #0
 80065b0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80065b2:	463b      	mov	r3, r7
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d164      	bne.n	8006686 <USB_EPStartXfer+0x398>
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	61fb      	str	r3, [r7, #28]
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	4413      	add	r3, r2
 80065e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d112      	bne.n	8006614 <USB_EPStartXfer+0x326>
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	801a      	strh	r2, [r3, #0]
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e057      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006614:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006618:	2b3e      	cmp	r3, #62	; 0x3e
 800661a:	d817      	bhi.n	800664c <USB_EPStartXfer+0x35e>
 800661c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006620:	085b      	lsrs	r3, r3, #1
 8006622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006626:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d004      	beq.n	800663c <USB_EPStartXfer+0x34e>
 8006632:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006636:	3301      	adds	r3, #1
 8006638:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800663c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006640:	b29b      	uxth	r3, r3
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	b29a      	uxth	r2, r3
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	e03b      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 800664c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006656:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800665a:	f003 031f 	and.w	r3, r3, #31
 800665e:	2b00      	cmp	r3, #0
 8006660:	d104      	bne.n	800666c <USB_EPStartXfer+0x37e>
 8006662:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006666:	3b01      	subs	r3, #1
 8006668:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800666c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006670:	b29b      	uxth	r3, r3
 8006672:	029b      	lsls	r3, r3, #10
 8006674:	b29b      	uxth	r3, r3
 8006676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800667e:	b29a      	uxth	r2, r3
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e01e      	b.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006686:	463b      	mov	r3, r7
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d119      	bne.n	80066c4 <USB_EPStartXfer+0x3d6>
 8006690:	1d3b      	adds	r3, r7, #4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
 8006696:	1d3b      	adds	r3, r7, #4
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669e:	b29b      	uxth	r3, r3
 80066a0:	461a      	mov	r2, r3
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	4413      	add	r3, r2
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	00da      	lsls	r2, r3, #3
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066b8:	623b      	str	r3, [r7, #32]
 80066ba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066be:	b29a      	uxth	r2, r3
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80066c4:	463b      	mov	r3, r7
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	891b      	ldrh	r3, [r3, #8]
 80066ca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ce:	463b      	mov	r3, r7
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80066de:	1d38      	adds	r0, r7, #4
 80066e0:	6800      	ldr	r0, [r0, #0]
 80066e2:	f001 f88e 	bl	8007802 <USB_WritePMA>
 80066e6:	e340      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	463b      	mov	r3, r7
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d164      	bne.n	80067bc <USB_EPStartXfer+0x4ce>
 80066f2:	1d3b      	adds	r3, r7, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006700:	b29b      	uxth	r3, r3
 8006702:	461a      	mov	r2, r3
 8006704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006706:	4413      	add	r3, r2
 8006708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800670a:	463b      	mov	r3, r7
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	00da      	lsls	r2, r3, #3
 8006712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006714:	4413      	add	r3, r2
 8006716:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
 800671c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006720:	2b00      	cmp	r3, #0
 8006722:	d112      	bne.n	800674a <USB_EPStartXfer+0x45c>
 8006724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800672e:	b29a      	uxth	r2, r3
 8006730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006742:	b29a      	uxth	r2, r3
 8006744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e057      	b.n	80067fa <USB_EPStartXfer+0x50c>
 800674a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800674e:	2b3e      	cmp	r3, #62	; 0x3e
 8006750:	d817      	bhi.n	8006782 <USB_EPStartXfer+0x494>
 8006752:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800675c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <USB_EPStartXfer+0x484>
 8006768:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800676c:	3301      	adds	r3, #1
 800676e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006776:	b29b      	uxth	r3, r3
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	b29a      	uxth	r2, r3
 800677c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e03b      	b.n	80067fa <USB_EPStartXfer+0x50c>
 8006782:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006786:	095b      	lsrs	r3, r3, #5
 8006788:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800678c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006790:	f003 031f 	and.w	r3, r3, #31
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <USB_EPStartXfer+0x4b4>
 8006798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679c:	3b01      	subs	r3, #1
 800679e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	801a      	strh	r2, [r3, #0]
 80067ba:	e01e      	b.n	80067fa <USB_EPStartXfer+0x50c>
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d119      	bne.n	80067fa <USB_EPStartXfer+0x50c>
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067da:	4413      	add	r3, r2
 80067dc:	657b      	str	r3, [r7, #84]	; 0x54
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	00da      	lsls	r2, r3, #3
 80067e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e8:	4413      	add	r3, r2
 80067ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
 80067f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80067fa:	463b      	mov	r3, r7
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	891b      	ldrh	r3, [r3, #8]
 8006800:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006804:	463b      	mov	r3, r7
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6959      	ldr	r1, [r3, #20]
 800680a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800680e:	b29b      	uxth	r3, r3
 8006810:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006814:	1d38      	adds	r0, r7, #4
 8006816:	6800      	ldr	r0, [r0, #0]
 8006818:	f000 fff3 	bl	8007802 <USB_WritePMA>
            ep->xfer_buff += len;
 800681c:	463b      	mov	r3, r7
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006826:	441a      	add	r2, r3
 8006828:	463b      	mov	r3, r7
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800682e:	463b      	mov	r3, r7
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	463b      	mov	r3, r7
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	691b      	ldr	r3, [r3, #16]
 800683a:	429a      	cmp	r2, r3
 800683c:	d90e      	bls.n	800685c <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006848:	463b      	mov	r3, r7
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a1a      	ldr	r2, [r3, #32]
 800684e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006852:	1ad2      	subs	r2, r2, r3
 8006854:	463b      	mov	r3, r7
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	621a      	str	r2, [r3, #32]
 800685a:	e008      	b.n	800686e <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 800685c:	463b      	mov	r3, r7
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006866:	463b      	mov	r3, r7
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800686e:	1d3b      	adds	r3, r7, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	647b      	str	r3, [r7, #68]	; 0x44
 8006874:	463b      	mov	r3, r7
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d164      	bne.n	8006948 <USB_EPStartXfer+0x65a>
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006884:	1d3b      	adds	r3, r7, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	4413      	add	r3, r2
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006896:	463b      	mov	r3, r7
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	00da      	lsls	r2, r3, #3
 800689e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a0:	4413      	add	r3, r2
 80068a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d112      	bne.n	80068d6 <USB_EPStartXfer+0x5e8>
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	e054      	b.n	8006980 <USB_EPStartXfer+0x692>
 80068d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068da:	2b3e      	cmp	r3, #62	; 0x3e
 80068dc:	d817      	bhi.n	800690e <USB_EPStartXfer+0x620>
 80068de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068e2:	085b      	lsrs	r3, r3, #1
 80068e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d004      	beq.n	80068fe <USB_EPStartXfer+0x610>
 80068f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068f8:	3301      	adds	r3, #1
 80068fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006902:	b29b      	uxth	r3, r3
 8006904:	029b      	lsls	r3, r3, #10
 8006906:	b29a      	uxth	r2, r3
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e038      	b.n	8006980 <USB_EPStartXfer+0x692>
 800690e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006918:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <USB_EPStartXfer+0x640>
 8006924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006928:	3b01      	subs	r3, #1
 800692a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800692e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006940:	b29a      	uxth	r2, r3
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e01b      	b.n	8006980 <USB_EPStartXfer+0x692>
 8006948:	463b      	mov	r3, r7
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	785b      	ldrb	r3, [r3, #1]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d116      	bne.n	8006980 <USB_EPStartXfer+0x692>
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006960:	4413      	add	r3, r2
 8006962:	647b      	str	r3, [r7, #68]	; 0x44
 8006964:	463b      	mov	r3, r7
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	00da      	lsls	r2, r3, #3
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	4413      	add	r3, r2
 8006970:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006974:	643b      	str	r3, [r7, #64]	; 0x40
 8006976:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800697a:	b29a      	uxth	r2, r3
 800697c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006980:	463b      	mov	r3, r7
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	895b      	ldrh	r3, [r3, #10]
 8006986:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800698a:	463b      	mov	r3, r7
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6959      	ldr	r1, [r3, #20]
 8006990:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006994:	b29b      	uxth	r3, r3
 8006996:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800699a:	1d38      	adds	r0, r7, #4
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f000 ff30 	bl	8007802 <USB_WritePMA>
 80069a2:	e1e2      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80069a4:	463b      	mov	r3, r7
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	463b      	mov	r3, r7
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29b      	uxth	r3, r3
 80069c0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80069c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	463b      	mov	r3, r7
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	441a      	add	r2, r3
 80069da:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80069f2:	1d3b      	adds	r3, r7, #4
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	663b      	str	r3, [r7, #96]	; 0x60
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a06:	4413      	add	r3, r2
 8006a08:	663b      	str	r3, [r7, #96]	; 0x60
 8006a0a:	463b      	mov	r3, r7
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	00da      	lsls	r2, r3, #3
 8006a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a14:	4413      	add	r3, r2
 8006a16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a1c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006a26:	463b      	mov	r3, r7
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	891b      	ldrh	r3, [r3, #8]
 8006a2c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a30:	463b      	mov	r3, r7
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6959      	ldr	r1, [r3, #20]
 8006a36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006a40:	1d38      	adds	r0, r7, #4
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	f000 fedd 	bl	8007802 <USB_WritePMA>
 8006a48:	e18f      	b.n	8006d6a <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	463b      	mov	r3, r7
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4413      	add	r3, r2
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 808f 	beq.w	8006b84 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a66:	1d3b      	adds	r3, r7, #4
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a6c:	463b      	mov	r3, r7
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	785b      	ldrb	r3, [r3, #1]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d164      	bne.n	8006b40 <USB_EPStartXfer+0x852>
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a7c:	1d3b      	adds	r3, r7, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8a:	4413      	add	r3, r2
 8006a8c:	673b      	str	r3, [r7, #112]	; 0x70
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	00da      	lsls	r2, r3, #3
 8006a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a98:	4413      	add	r3, r2
 8006a9a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aa0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d112      	bne.n	8006ace <USB_EPStartXfer+0x7e0>
 8006aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e054      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006ace:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ad2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ad4:	d817      	bhi.n	8006b06 <USB_EPStartXfer+0x818>
 8006ad6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <USB_EPStartXfer+0x808>
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af0:	3301      	adds	r3, #1
 8006af2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	801a      	strh	r2, [r3, #0]
 8006b04:	e038      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b0a:	095b      	lsrs	r3, r3, #5
 8006b0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b14:	f003 031f 	and.w	r3, r3, #31
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <USB_EPStartXfer+0x838>
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	3b01      	subs	r3, #1
 8006b22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	029b      	lsls	r3, r3, #10
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b3c:	801a      	strh	r2, [r3, #0]
 8006b3e:	e01b      	b.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b40:	463b      	mov	r3, r7
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	785b      	ldrb	r3, [r3, #1]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d116      	bne.n	8006b78 <USB_EPStartXfer+0x88a>
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b58:	4413      	add	r3, r2
 8006b5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	00da      	lsls	r2, r3, #3
 8006b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b66:	4413      	add	r3, r2
 8006b68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b76:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006b78:	463b      	mov	r3, r7
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	895b      	ldrh	r3, [r3, #10]
 8006b7e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8006b82:	e097      	b.n	8006cb4 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b84:	463b      	mov	r3, r7
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d168      	bne.n	8006c60 <USB_EPStartXfer+0x972>
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b96:	1d3b      	adds	r3, r7, #4
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bac:	463b      	mov	r3, r7
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	00da      	lsls	r2, r3, #3
 8006bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bb8:	4413      	add	r3, r2
 8006bba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006bc0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d112      	bne.n	8006bee <USB_EPStartXfer+0x900>
 8006bc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e05d      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bf2:	2b3e      	cmp	r3, #62	; 0x3e
 8006bf4:	d817      	bhi.n	8006c26 <USB_EPStartXfer+0x938>
 8006bf6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <USB_EPStartXfer+0x928>
 8006c0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c10:	3301      	adds	r3, #1
 8006c12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c16:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	029b      	lsls	r3, r3, #10
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c22:	801a      	strh	r2, [r3, #0]
 8006c24:	e041      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d104      	bne.n	8006c46 <USB_EPStartXfer+0x958>
 8006c3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c40:	3b01      	subs	r3, #1
 8006c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	029b      	lsls	r3, r3, #10
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	e024      	b.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c60:	463b      	mov	r3, r7
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	785b      	ldrb	r3, [r3, #1]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d11f      	bne.n	8006caa <USB_EPStartXfer+0x9bc>
 8006c6a:	1d3b      	adds	r3, r7, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c72:	1d3b      	adds	r3, r7, #4
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c82:	4413      	add	r3, r2
 8006c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c88:	463b      	mov	r3, r7
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	00da      	lsls	r2, r3, #3
 8006c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ca8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006caa:	463b      	mov	r3, r7
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	891b      	ldrh	r3, [r3, #8]
 8006cb0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb4:	463b      	mov	r3, r7
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6959      	ldr	r1, [r3, #20]
 8006cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006cc4:	1d38      	adds	r0, r7, #4
 8006cc6:	6800      	ldr	r0, [r0, #0]
 8006cc8:	f000 fd9b 	bl	8007802 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006ccc:	463b      	mov	r3, r7
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	785b      	ldrb	r3, [r3, #1]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d122      	bne.n	8006d1c <USB_EPStartXfer+0xa2e>
 8006cd6:	1d3b      	adds	r3, r7, #4
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	463b      	mov	r3, r7
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006cf4:	1d3b      	adds	r3, r7, #4
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	441a      	add	r2, r3
 8006d02:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8006d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	8013      	strh	r3, [r2, #0]
 8006d1a:	e026      	b.n	8006d6a <USB_EPStartXfer+0xa7c>
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d121      	bne.n	8006d6a <USB_EPStartXfer+0xa7c>
 8006d26:	1d3b      	adds	r3, r7, #4
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006d44:	1d3b      	adds	r3, r7, #4
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	463b      	mov	r3, r7
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006d6a:	1d3b      	adds	r3, r7, #4
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	463b      	mov	r3, r7
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f107 020e 	add.w	r2, r7, #14
 8006d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d88:	8013      	strh	r3, [r2, #0]
 8006d8a:	f107 030e 	add.w	r3, r7, #14
 8006d8e:	f107 020e 	add.w	r2, r7, #14
 8006d92:	8812      	ldrh	r2, [r2, #0]
 8006d94:	f082 0210 	eor.w	r2, r2, #16
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f107 030e 	add.w	r3, r7, #14
 8006d9e:	f107 020e 	add.w	r2, r7, #14
 8006da2:	8812      	ldrh	r2, [r2, #0]
 8006da4:	f082 0220 	eor.w	r2, r2, #32
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	1d3b      	adds	r3, r7, #4
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	441a      	add	r2, r3
 8006db8:	f107 030e 	add.w	r3, r7, #14
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	8013      	strh	r3, [r2, #0]
 8006dd2:	e3b5      	b.n	8007540 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006dd4:	463b      	mov	r3, r7
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8090 	bne.w	8006f00 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8006de0:	463b      	mov	r3, r7
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	463b      	mov	r3, r7
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d90e      	bls.n	8006e0e <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8006df0:	463b      	mov	r3, r7
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8006dfa:	463b      	mov	r3, r7
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699a      	ldr	r2, [r3, #24]
 8006e00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e04:	1ad2      	subs	r2, r2, r3
 8006e06:	463b      	mov	r3, r7
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	619a      	str	r2, [r3, #24]
 8006e0c:	e008      	b.n	8006e20 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8006e18:	463b      	mov	r3, r7
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006e20:	1d3b      	adds	r3, r7, #4
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e28:	1d3b      	adds	r3, r7, #4
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e38:	4413      	add	r3, r2
 8006e3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e3e:	463b      	mov	r3, r7
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	00da      	lsls	r2, r3, #3
 8006e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d116      	bne.n	8006e8a <USB_EPStartXfer+0xb9c>
 8006e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e60:	881b      	ldrh	r3, [r3, #0]
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	e32c      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8006e8a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e90:	d818      	bhi.n	8006ec4 <USB_EPStartXfer+0xbd6>
 8006e92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <USB_EPStartXfer+0xbc4>
 8006ea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eac:	3301      	adds	r3, #1
 8006eae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	029b      	lsls	r3, r3, #10
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ec0:	801a      	strh	r2, [r3, #0]
 8006ec2:	e30f      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8006ec4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ec8:	095b      	lsrs	r3, r3, #5
 8006eca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ece:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <USB_EPStartXfer+0xbf6>
 8006eda:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ee4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	029b      	lsls	r3, r3, #10
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ef6:	b29a      	uxth	r2, r3
 8006ef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	e2f1      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	78db      	ldrb	r3, [r3, #3]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f040 818f 	bne.w	800722a <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	785b      	ldrb	r3, [r3, #1]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d175      	bne.n	8007002 <USB_EPStartXfer+0xd14>
 8006f16:	1d3b      	adds	r3, r7, #4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f1e:	1d3b      	adds	r3, r7, #4
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f2e:	4413      	add	r3, r2
 8006f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006f40:	4413      	add	r3, r2
 8006f42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f4a:	463b      	mov	r3, r7
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d116      	bne.n	8006f82 <USB_EPStartXfer+0xc94>
 8006f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f66:	801a      	strh	r2, [r3, #0]
 8006f68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	e065      	b.n	800704e <USB_EPStartXfer+0xd60>
 8006f82:	463b      	mov	r3, r7
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8a:	d81a      	bhi.n	8006fc2 <USB_EPStartXfer+0xcd4>
 8006f8c:	463b      	mov	r3, r7
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f98:	463b      	mov	r3, r7
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <USB_EPStartXfer+0xcc2>
 8006fa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006faa:	3301      	adds	r3, #1
 8006fac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	029b      	lsls	r3, r3, #10
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	e045      	b.n	800704e <USB_EPStartXfer+0xd60>
 8006fc2:	463b      	mov	r3, r7
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	095b      	lsrs	r3, r3, #5
 8006fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fce:	463b      	mov	r3, r7
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 031f 	and.w	r3, r3, #31
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <USB_EPStartXfer+0xcf8>
 8006fdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fe6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	029b      	lsls	r3, r3, #10
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e025      	b.n	800704e <USB_EPStartXfer+0xd60>
 8007002:	463b      	mov	r3, r7
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d120      	bne.n	800704e <USB_EPStartXfer+0xd60>
 800700c:	1d3b      	adds	r3, r7, #4
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007014:	1d3b      	adds	r3, r7, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800701c:	b29b      	uxth	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007024:	4413      	add	r3, r2
 8007026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800702a:	463b      	mov	r3, r7
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	00da      	lsls	r2, r3, #3
 8007032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007036:	4413      	add	r3, r2
 8007038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800703c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007040:	463b      	mov	r3, r7
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	1d3b      	adds	r3, r7, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007056:	463b      	mov	r3, r7
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d175      	bne.n	800714c <USB_EPStartXfer+0xe5e>
 8007060:	1d3b      	adds	r3, r7, #4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007068:	1d3b      	adds	r3, r7, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007078:	4413      	add	r3, r2
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800707e:	463b      	mov	r3, r7
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	00da      	lsls	r2, r3, #3
 8007086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800708a:	4413      	add	r3, r2
 800708c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007090:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007094:	463b      	mov	r3, r7
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d116      	bne.n	80070cc <USB_EPStartXfer+0xdde>
 800709e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	e061      	b.n	8007190 <USB_EPStartXfer+0xea2>
 80070cc:	463b      	mov	r3, r7
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	2b3e      	cmp	r3, #62	; 0x3e
 80070d4:	d81a      	bhi.n	800710c <USB_EPStartXfer+0xe1e>
 80070d6:	463b      	mov	r3, r7
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	085b      	lsrs	r3, r3, #1
 80070de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070e2:	463b      	mov	r3, r7
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <USB_EPStartXfer+0xe0c>
 80070f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f4:	3301      	adds	r3, #1
 80070f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fe:	b29b      	uxth	r3, r3
 8007100:	029b      	lsls	r3, r3, #10
 8007102:	b29a      	uxth	r2, r3
 8007104:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e041      	b.n	8007190 <USB_EPStartXfer+0xea2>
 800710c:	463b      	mov	r3, r7
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	095b      	lsrs	r3, r3, #5
 8007114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007118:	463b      	mov	r3, r7
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <USB_EPStartXfer+0xe42>
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	3b01      	subs	r3, #1
 800712c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007134:	b29b      	uxth	r3, r3
 8007136:	029b      	lsls	r3, r3, #10
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e021      	b.n	8007190 <USB_EPStartXfer+0xea2>
 800714c:	463b      	mov	r3, r7
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11c      	bne.n	8007190 <USB_EPStartXfer+0xea2>
 8007156:	1d3b      	adds	r3, r7, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800715e:	b29b      	uxth	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800716c:	463b      	mov	r3, r7
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	00da      	lsls	r2, r3, #3
 8007174:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007178:	4413      	add	r3, r2
 800717a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800717e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007182:	463b      	mov	r3, r7
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	b29a      	uxth	r2, r3
 800718a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800718e:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007190:	463b      	mov	r3, r7
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 81a4 	beq.w	80074e4 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800719c:	1d3b      	adds	r3, r7, #4
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	463b      	mov	r3, r7
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <USB_EPStartXfer+0xeda>
 80071bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d10d      	bne.n	80071e4 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 8187 	bne.w	80074e4 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80071d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f040 8180 	bne.w	80074e4 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80071e4:	1d3b      	adds	r3, r7, #4
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	463b      	mov	r3, r7
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	881b      	ldrh	r3, [r3, #0]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	463b      	mov	r3, r7
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	441a      	add	r2, r3
 8007210:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800721c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007220:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007224:	b29b      	uxth	r3, r3
 8007226:	8013      	strh	r3, [r2, #0]
 8007228:	e15c      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800722a:	463b      	mov	r3, r7
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	78db      	ldrb	r3, [r3, #3]
 8007230:	2b01      	cmp	r3, #1
 8007232:	f040 8155 	bne.w	80074e0 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 8007236:	463b      	mov	r3, r7
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	463b      	mov	r3, r7
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	429a      	cmp	r2, r3
 8007244:	d90e      	bls.n	8007264 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 8007246:	463b      	mov	r3, r7
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007250:	463b      	mov	r3, r7
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800725a:	1ad2      	subs	r2, r2, r3
 800725c:	463b      	mov	r3, r7
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	619a      	str	r2, [r3, #24]
 8007262:	e008      	b.n	8007276 <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007264:	463b      	mov	r3, r7
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800726e:	463b      	mov	r3, r7
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2200      	movs	r2, #0
 8007274:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007276:	463b      	mov	r3, r7
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	785b      	ldrb	r3, [r3, #1]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d16f      	bne.n	8007360 <USB_EPStartXfer+0x1072>
 8007280:	1d3b      	adds	r3, r7, #4
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007288:	1d3b      	adds	r3, r7, #4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007290:	b29b      	uxth	r3, r3
 8007292:	461a      	mov	r2, r3
 8007294:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007298:	4413      	add	r3, r2
 800729a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729e:	463b      	mov	r3, r7
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	00da      	lsls	r2, r3, #3
 80072a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d116      	bne.n	80072ea <USB_EPStartXfer+0xffc>
 80072bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072c0:	881b      	ldrh	r3, [r3, #0]
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072ce:	801a      	strh	r2, [r3, #0]
 80072d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072d4:	881b      	ldrh	r3, [r3, #0]
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	e05f      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 80072ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072ee:	2b3e      	cmp	r3, #62	; 0x3e
 80072f0:	d818      	bhi.n	8007324 <USB_EPStartXfer+0x1036>
 80072f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f6:	085b      	lsrs	r3, r3, #1
 80072f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d004      	beq.n	8007312 <USB_EPStartXfer+0x1024>
 8007308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800730c:	3301      	adds	r3, #1
 800730e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	b29b      	uxth	r3, r3
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	b29a      	uxth	r2, r3
 800731c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007320:	801a      	strh	r2, [r3, #0]
 8007322:	e042      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 8007324:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800732e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007332:	f003 031f 	and.w	r3, r3, #31
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <USB_EPStartXfer+0x1056>
 800733a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800733e:	3b01      	subs	r3, #1
 8007340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007348:	b29b      	uxth	r3, r3
 800734a:	029b      	lsls	r3, r3, #10
 800734c:	b29b      	uxth	r3, r3
 800734e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007356:	b29a      	uxth	r2, r3
 8007358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735c:	801a      	strh	r2, [r3, #0]
 800735e:	e024      	b.n	80073aa <USB_EPStartXfer+0x10bc>
 8007360:	463b      	mov	r3, r7
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d11f      	bne.n	80073aa <USB_EPStartXfer+0x10bc>
 800736a:	1d3b      	adds	r3, r7, #4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007372:	1d3b      	adds	r3, r7, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737a:	b29b      	uxth	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007382:	4413      	add	r3, r2
 8007384:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007388:	463b      	mov	r3, r7
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00da      	lsls	r2, r3, #3
 8007390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007394:	4413      	add	r3, r2
 8007396:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800739a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800739e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	1d3b      	adds	r3, r7, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073b2:	463b      	mov	r3, r7
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d16f      	bne.n	800749c <USB_EPStartXfer+0x11ae>
 80073bc:	1d3b      	adds	r3, r7, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d4:	4413      	add	r3, r2
 80073d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073da:	463b      	mov	r3, r7
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	00da      	lsls	r2, r3, #3
 80073e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073e6:	4413      	add	r3, r2
 80073e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d116      	bne.n	8007426 <USB_EPStartXfer+0x1138>
 80073f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007404:	b29a      	uxth	r2, r3
 8007406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800740a:	801a      	strh	r2, [r3, #0]
 800740c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007422:	801a      	strh	r2, [r3, #0]
 8007424:	e05e      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8007426:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800742a:	2b3e      	cmp	r3, #62	; 0x3e
 800742c:	d818      	bhi.n	8007460 <USB_EPStartXfer+0x1172>
 800742e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007432:	085b      	lsrs	r3, r3, #1
 8007434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007438:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d004      	beq.n	800744e <USB_EPStartXfer+0x1160>
 8007444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007448:	3301      	adds	r3, #1
 800744a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800744e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007452:	b29b      	uxth	r3, r3
 8007454:	029b      	lsls	r3, r3, #10
 8007456:	b29a      	uxth	r2, r3
 8007458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	e041      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 8007460:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800746a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800746e:	f003 031f 	and.w	r3, r3, #31
 8007472:	2b00      	cmp	r3, #0
 8007474:	d104      	bne.n	8007480 <USB_EPStartXfer+0x1192>
 8007476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800747a:	3b01      	subs	r3, #1
 800747c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007484:	b29b      	uxth	r3, r3
 8007486:	029b      	lsls	r3, r3, #10
 8007488:	b29b      	uxth	r3, r3
 800748a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800748e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007492:	b29a      	uxth	r2, r3
 8007494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007498:	801a      	strh	r2, [r3, #0]
 800749a:	e023      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
 800749c:	463b      	mov	r3, r7
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d11e      	bne.n	80074e4 <USB_EPStartXfer+0x11f6>
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074b6:	4413      	add	r3, r2
 80074b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074bc:	463b      	mov	r3, r7
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	00da      	lsls	r2, r3, #3
 80074c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074c8:	4413      	add	r3, r2
 80074ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80074ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	e001      	b.n	80074e4 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e02e      	b.n	8007542 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007502:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007506:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800750a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800750e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007512:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007516:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800751a:	1d3b      	adds	r3, r7, #4
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	463b      	mov	r3, r7
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	441a      	add	r2, r3
 8007528:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800752c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800753c:	b29b      	uxth	r3, r3
 800753e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	785b      	ldrb	r3, [r3, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d020      	beq.n	80075a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29b      	uxth	r3, r3
 800756c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007574:	81bb      	strh	r3, [r7, #12]
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f083 0310 	eor.w	r3, r3, #16
 800757c:	81bb      	strh	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	89bb      	ldrh	r3, [r7, #12]
 800758a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800758e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759a:	b29b      	uxth	r3, r3
 800759c:	8013      	strh	r3, [r2, #0]
 800759e:	e01f      	b.n	80075e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b6:	81fb      	strh	r3, [r7, #14]
 80075b8:	89fb      	ldrh	r3, [r7, #14]
 80075ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075be:	81fb      	strh	r3, [r7, #14]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	441a      	add	r2, r3
 80075ca:	89fb      	ldrh	r3, [r7, #14]
 80075cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075dc:	b29b      	uxth	r3, r3
 80075de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b087      	sub	sp, #28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 809d 	bne.w	800773c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	785b      	ldrb	r3, [r3, #1]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04c      	beq.n	80076a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4413      	add	r3, r2
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	823b      	strh	r3, [r7, #16]
 8007618:	8a3b      	ldrh	r3, [r7, #16]
 800761a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d01b      	beq.n	800765a <USB_EPClearStall+0x6c>
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	881b      	ldrh	r3, [r3, #0]
 800762e:	b29b      	uxth	r3, r3
 8007630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007638:	81fb      	strh	r3, [r7, #14]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	441a      	add	r2, r3
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800764a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007656:	b29b      	uxth	r3, r3
 8007658:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	78db      	ldrb	r3, [r3, #3]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d06c      	beq.n	800773c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007678:	81bb      	strh	r3, [r7, #12]
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	f083 0320 	eor.w	r3, r3, #32
 8007680:	81bb      	strh	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	441a      	add	r2, r3
 800768c:	89bb      	ldrh	r3, [r7, #12]
 800768e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	e04b      	b.n	800773c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	82fb      	strh	r3, [r7, #22]
 80076b2:	8afb      	ldrh	r3, [r7, #22]
 80076b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d01b      	beq.n	80076f4 <USB_EPClearStall+0x106>
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	82bb      	strh	r3, [r7, #20]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	441a      	add	r2, r3
 80076de:	8abb      	ldrh	r3, [r7, #20]
 80076e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	827b      	strh	r3, [r7, #18]
 800770c:	8a7b      	ldrh	r3, [r7, #18]
 800770e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007712:	827b      	strh	r3, [r7, #18]
 8007714:	8a7b      	ldrh	r3, [r7, #18]
 8007716:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800771a:	827b      	strh	r3, [r7, #18]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	441a      	add	r2, r3
 8007726:	8a7b      	ldrh	r3, [r7, #18]
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d103      	bne.n	8007764 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr

08007772 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80077d8:	b29b      	uxth	r3, r3
 80077da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80077dc:	68fb      	ldr	r3, [r7, #12]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007802:	b480      	push	{r7}
 8007804:	b08d      	sub	sp, #52	; 0x34
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	4611      	mov	r1, r2
 800780e:	461a      	mov	r2, r3
 8007810:	460b      	mov	r3, r1
 8007812:	80fb      	strh	r3, [r7, #6]
 8007814:	4613      	mov	r3, r2
 8007816:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007818:	88bb      	ldrh	r3, [r7, #4]
 800781a:	3301      	adds	r3, #1
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007832:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007838:	e01b      	b.n	8007872 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	3301      	adds	r3, #1
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b29b      	uxth	r3, r3
 8007850:	461a      	mov	r2, r3
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	b29a      	uxth	r2, r3
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	3302      	adds	r3, #2
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	3301      	adds	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	3b01      	subs	r3, #1
 8007870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e0      	bne.n	800783a <USB_WritePMA+0x38>
  }
}
 8007878:	bf00      	nop
 800787a:	3734      	adds	r7, #52	; 0x34
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007884:	b480      	push	{r7}
 8007886:	b08b      	sub	sp, #44	; 0x2c
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	460b      	mov	r3, r1
 8007894:	80fb      	strh	r3, [r7, #6]
 8007896:	4613      	mov	r3, r2
 8007898:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800789a:	88bb      	ldrh	r3, [r7, #4]
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	b29b      	uxth	r3, r3
 80078a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078aa:	88fa      	ldrh	r2, [r7, #6]
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078b4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
 80078ba:	e018      	b.n	80078ee <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	881b      	ldrh	r3, [r3, #0]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	3302      	adds	r3, #2
 80078c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	3301      	adds	r3, #1
 80078d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	0a1b      	lsrs	r3, r3, #8
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	3301      	adds	r3, #1
 80078e6:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80078e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ea:	3b01      	subs	r3, #1
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e3      	bne.n	80078bc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80078f4:	88bb      	ldrh	r3, [r7, #4]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d007      	beq.n	8007910 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	b2da      	uxtb	r2, r3
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	701a      	strb	r2, [r3, #0]
  }
}
 8007910:	bf00      	nop
 8007912:	372c      	adds	r7, #44	; 0x2c
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007928:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800792c:	f002 f96a 	bl	8009c04 <malloc>
 8007930:	4603      	mov	r3, r0
 8007932:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d105      	bne.n	8007946 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007942:	2302      	movs	r3, #2
 8007944:	e066      	b.n	8007a14 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d119      	bne.n	800798a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007956:	f44f 7300 	mov.w	r3, #512	; 0x200
 800795a:	2202      	movs	r2, #2
 800795c:	2181      	movs	r1, #129	; 0x81
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f001 ff20 	bl	80097a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800796a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800796e:	2202      	movs	r2, #2
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 ff16 	bl	80097a4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2210      	movs	r2, #16
 8007984:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007988:	e016      	b.n	80079b8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800798a:	2340      	movs	r3, #64	; 0x40
 800798c:	2202      	movs	r2, #2
 800798e:	2181      	movs	r1, #129	; 0x81
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f001 ff07 	bl	80097a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800799c:	2340      	movs	r3, #64	; 0x40
 800799e:	2202      	movs	r2, #2
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 fefe 	bl	80097a4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2210      	movs	r2, #16
 80079b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079b8:	2308      	movs	r3, #8
 80079ba:	2203      	movs	r2, #3
 80079bc:	2182      	movs	r1, #130	; 0x82
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f001 fef0 	bl	80097a4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7c1b      	ldrb	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d109      	bne.n	8007a02 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079f8:	2101      	movs	r1, #1
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f002 f84e 	bl	8009a9c <USBD_LL_PrepareReceive>
 8007a00:	e007      	b.n	8007a12 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a08:	2340      	movs	r3, #64	; 0x40
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f002 f845 	bl	8009a9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007a28:	2181      	movs	r1, #129	; 0x81
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fef8 	bl	8009820 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007a36:	2101      	movs	r1, #1
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f001 fef1 	bl	8009820 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007a46:	2182      	movs	r1, #130	; 0x82
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 fee9 	bl	8009820 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 f8cb 	bl	8009c14 <free>
    pdev->pClassData = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007aa0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d03a      	beq.n	8007b30 <USBD_CDC_Setup+0xa0>
 8007aba:	2b20      	cmp	r3, #32
 8007abc:	f040 8097 	bne.w	8007bee <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	88db      	ldrh	r3, [r3, #6]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d029      	beq.n	8007b1c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da11      	bge.n	8007af6 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8007ade:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	88d2      	ldrh	r2, [r2, #6]
 8007ae4:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ae6:	6939      	ldr	r1, [r7, #16]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	88db      	ldrh	r3, [r3, #6]
 8007aec:	461a      	mov	r2, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fa5d 	bl	8008fae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8007af4:	e082      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	785a      	ldrb	r2, [r3, #1]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	88db      	ldrh	r3, [r3, #6]
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007b0c:	6939      	ldr	r1, [r7, #16]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88db      	ldrh	r3, [r3, #6]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fa76 	bl	8009006 <USBD_CtlPrepareRx>
      break;
 8007b1a:	e06f      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	7850      	ldrb	r0, [r2, #1]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	4798      	blx	r3
      break;
 8007b2e:	e065      	b.n	8007bfc <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	785b      	ldrb	r3, [r3, #1]
 8007b34:	2b0b      	cmp	r3, #11
 8007b36:	d84f      	bhi.n	8007bd8 <USBD_CDC_Setup+0x148>
 8007b38:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_CDC_Setup+0xb0>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b71 	.word	0x08007b71
 8007b44:	08007be7 	.word	0x08007be7
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bd9 	.word	0x08007bd9
 8007b68:	08007b99 	.word	0x08007b99
 8007b6c:	08007bc1 	.word	0x08007bc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d107      	bne.n	8007b8a <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b7a:	f107 030c 	add.w	r3, r7, #12
 8007b7e:	2202      	movs	r2, #2
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fa13 	bl	8008fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b88:	e030      	b.n	8007bec <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f001 f99d 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007b92:	2303      	movs	r3, #3
 8007b94:	75fb      	strb	r3, [r7, #23]
          break;
 8007b96:	e029      	b.n	8007bec <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	d107      	bne.n	8007bb2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ba2:	f107 030f 	add.w	r3, r7, #15
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f9ff 	bl	8008fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb0:	e01c      	b.n	8007bec <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f989 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbe:	e015      	b.n	8007bec <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d00f      	beq.n	8007bea <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f001 f97d 	bl	8008ecc <USBD_CtlError>
            ret = USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007bd6:	e008      	b.n	8007bea <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f001 f976 	bl	8008ecc <USBD_CtlError>
          ret = USBD_FAIL;
 8007be0:	2303      	movs	r3, #3
 8007be2:	75fb      	strb	r3, [r7, #23]
          break;
 8007be4:	e002      	b.n	8007bec <USBD_CDC_Setup+0x15c>
          break;
 8007be6:	bf00      	nop
 8007be8:	e008      	b.n	8007bfc <USBD_CDC_Setup+0x16c>
          break;
 8007bea:	bf00      	nop
      }
      break;
 8007bec:	e006      	b.n	8007bfc <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f96b 	bl	8008ecc <USBD_CtlError>
      ret = USBD_FAIL;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfa:	bf00      	nop
  }

  return (uint8_t)ret;
 8007bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop

08007c08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e04f      	b.n	8007cca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	4613      	mov	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4413      	add	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	440b      	add	r3, r1
 8007c40:	3318      	adds	r3, #24
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d029      	beq.n	8007c9c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	3318      	adds	r3, #24
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	460b      	mov	r3, r1
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	440b      	add	r3, r1
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4403      	add	r3, r0
 8007c68:	3338      	adds	r3, #56	; 0x38
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c70:	fb03 f301 	mul.w	r3, r3, r1
 8007c74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	3318      	adds	r3, #24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007c8e:	78f9      	ldrb	r1, [r7, #3]
 8007c90:	2300      	movs	r3, #0
 8007c92:	2200      	movs	r2, #0
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fec9 	bl	8009a2c <USBD_LL_Transmit>
 8007c9a:	e015      	b.n	8007cc8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ce4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e015      	b.n	8007d20 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007cf4:	78fb      	ldrb	r3, [r7, #3]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 ff07 	bl	8009b0c <USBD_LL_GetRxDataSize>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d36:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <USBD_CDC_EP0_RxReady+0x46>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d48:	2bff      	cmp	r3, #255	; 0xff
 8007d4a:	d010      	beq.n	8007d6e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007d5a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007d62:	b292      	uxth	r2, r2
 8007d64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	22ff      	movs	r2, #255	; 0xff
 8007d6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3710      	adds	r7, #16
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2243      	movs	r2, #67	; 0x43
 8007d84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007d86:	4b03      	ldr	r3, [pc, #12]	; (8007d94 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	20000094 	.word	0x20000094

08007d98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2243      	movs	r2, #67	; 0x43
 8007da4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000050 	.word	0x20000050

08007db8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2243      	movs	r2, #67	; 0x43
 8007dc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007dc6:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	200000d8 	.word	0x200000d8

08007dd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	220a      	movs	r2, #10
 8007de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007de6:	4b03      	ldr	r3, [pc, #12]	; (8007df4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000000c 	.word	0x2000000c

08007df8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e004      	b.n	8007e16 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b087      	sub	sp, #28
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	683a      	ldr	r2, [r7, #0]
 8007e6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e016      	b.n	8007ec8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7c1b      	ldrb	r3, [r3, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eac:	2101      	movs	r1, #1
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fdf4 	bl	8009a9c <USBD_LL_PrepareReceive>
 8007eb4:	e007      	b.n	8007ec6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ebc:	2340      	movs	r3, #64	; 0x40
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f001 fdeb 	bl	8009a9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e01f      	b.n	8007f28 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	79fa      	ldrb	r2, [r7, #7]
 8007f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f001 fbad 	bl	800967c <USBD_LL_Init>
 8007f22:	4603      	mov	r3, r0
 8007f24:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e016      	b.n	8007f76 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f64:	f107 020e 	add.w	r2, r7, #14
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4798      	blx	r3
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f001 fbda 	bl	8009740 <USBD_LL_Start>
 8007f8c:	4603      	mov	r3, r0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	4798      	blx	r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d007      	beq.n	800800a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
  }

  return USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff16 	bl	8008e58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2201      	movs	r2, #1
 8008030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2b01      	cmp	r3, #1
 800804e:	d00e      	beq.n	800806e <USBD_LL_SetupStage+0x5a>
 8008050:	2b01      	cmp	r3, #1
 8008052:	d302      	bcc.n	800805a <USBD_LL_SetupStage+0x46>
 8008054:	2b02      	cmp	r3, #2
 8008056:	d014      	beq.n	8008082 <USBD_LL_SetupStage+0x6e>
 8008058:	e01d      	b.n	8008096 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9d6 	bl	8008414 <USBD_StdDevReq>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e020      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fa3a 	bl	80084f0 <USBD_StdItfReq>
 800807c:	4603      	mov	r3, r0
 800807e:	73fb      	strb	r3, [r7, #15]
      break;
 8008080:	e016      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fa76 	bl	800857c <USBD_StdEPReq>
 8008090:	4603      	mov	r3, r0
 8008092:	73fb      	strb	r3, [r7, #15]
      break;
 8008094:	e00c      	b.n	80080b0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800809c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fbf1 	bl	800988c <USBD_LL_StallEP>
 80080aa:	4603      	mov	r3, r0
 80080ac:	73fb      	strb	r3, [r7, #15]
      break;
 80080ae:	bf00      	nop
  }

  return ret;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	460b      	mov	r3, r1
 80080c4:	607a      	str	r2, [r7, #4]
 80080c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80080c8:	7afb      	ldrb	r3, [r7, #11]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d137      	bne.n	800813e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80080d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d14a      	bne.n	8008176 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d913      	bls.n	8008114 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	1ad2      	subs	r2, r2, r3
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4293      	cmp	r3, r2
 8008104:	bf28      	it	cs
 8008106:	4613      	movcs	r3, r2
 8008108:	461a      	mov	r2, r3
 800810a:	6879      	ldr	r1, [r7, #4]
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 ff97 	bl	8009040 <USBD_CtlContinueRx>
 8008112:	e030      	b.n	8008176 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00a      	beq.n	8008136 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008126:	2b03      	cmp	r3, #3
 8008128:	d105      	bne.n	8008136 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 ff93 	bl	8009062 <USBD_CtlSendStatus>
 800813c:	e01b      	b.n	8008176 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d013      	beq.n	8008172 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008150:	2b03      	cmp	r3, #3
 8008152:	d10e      	bne.n	8008172 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	7afa      	ldrb	r2, [r7, #11]
 800815e:	4611      	mov	r1, r2
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	e002      	b.n	8008178 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008172:	2303      	movs	r3, #3
 8008174:	e000      	b.n	8008178 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	460b      	mov	r3, r1
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800818e:	7afb      	ldrb	r3, [r7, #11]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d16a      	bne.n	800826a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	3314      	adds	r3, #20
 8008198:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	d155      	bne.n	8008250 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d914      	bls.n	80081da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	1ad2      	subs	r2, r2, r3
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f000 ff0c 	bl	8008fe4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081cc:	2300      	movs	r3, #0
 80081ce:	2200      	movs	r2, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f001 fc62 	bl	8009a9c <USBD_LL_PrepareReceive>
 80081d8:	e03a      	b.n	8008250 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d11c      	bne.n	8008220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d316      	bcc.n	8008220 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d20f      	bcs.n	8008220 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008200:	2200      	movs	r2, #0
 8008202:	2100      	movs	r1, #0
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 feed 	bl	8008fe4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 fc3f 	bl	8009a9c <USBD_LL_PrepareReceive>
 800821e:	e017      	b.n	8008250 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008232:	2b03      	cmp	r3, #3
 8008234:	d105      	bne.n	8008242 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008242:	2180      	movs	r1, #128	; 0x80
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f001 fb21 	bl	800988c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 ff1c 	bl	8009088 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008256:	2b01      	cmp	r3, #1
 8008258:	d123      	bne.n	80082a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fe9b 	bl	8007f96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008268:	e01b      	b.n	80082a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800827c:	2b03      	cmp	r3, #3
 800827e:	d10e      	bne.n	800829e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	4611      	mov	r1, r2
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	4798      	blx	r3
 8008290:	4603      	mov	r3, r0
 8008292:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	e002      	b.n	80082a4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800829e:	2303      	movs	r3, #3
 80082a0:	e000      	b.n	80082a4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	6852      	ldr	r2, [r2, #4]
 80082e8:	b2d2      	uxtb	r2, r2
 80082ea:	4611      	mov	r1, r2
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082f0:	2340      	movs	r3, #64	; 0x40
 80082f2:	2200      	movs	r2, #0
 80082f4:	2100      	movs	r1, #0
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 fa54 	bl	80097a4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2240      	movs	r2, #64	; 0x40
 8008308:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	2200      	movs	r2, #0
 8008310:	2180      	movs	r1, #128	; 0x80
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fa46 	bl	80097a4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2240      	movs	r2, #64	; 0x40
 8008322:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
 8008336:	460b      	mov	r3, r1
 8008338:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2204      	movs	r2, #4
 8008366:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008386:	2b04      	cmp	r3, #4
 8008388:	d105      	bne.n	8008396 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d10b      	bne.n	80083ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083c8:	69db      	ldr	r3, [r3, #28]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	3301      	adds	r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083f6:	8a3b      	ldrh	r3, [r7, #16]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b21a      	sxth	r2, r3
 80083fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008400:	4313      	orrs	r3, r2
 8008402:	b21b      	sxth	r3, r3
 8008404:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008406:	89fb      	ldrh	r3, [r7, #14]
}
 8008408:	4618      	mov	r0, r3
 800840a:	371c      	adds	r7, #28
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800842a:	2b20      	cmp	r3, #32
 800842c:	d004      	beq.n	8008438 <USBD_StdDevReq+0x24>
 800842e:	2b40      	cmp	r3, #64	; 0x40
 8008430:	d002      	beq.n	8008438 <USBD_StdDevReq+0x24>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <USBD_StdDevReq+0x38>
 8008436:	e050      	b.n	80084da <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
    break;
 800844a:	e04b      	b.n	80084e4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	785b      	ldrb	r3, [r3, #1]
 8008450:	2b09      	cmp	r3, #9
 8008452:	d83c      	bhi.n	80084ce <USBD_StdDevReq+0xba>
 8008454:	a201      	add	r2, pc, #4	; (adr r2, 800845c <USBD_StdDevReq+0x48>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084c5 	.word	0x080084c5
 8008464:	080084cf 	.word	0x080084cf
 8008468:	080084bb 	.word	0x080084bb
 800846c:	080084cf 	.word	0x080084cf
 8008470:	0800848f 	.word	0x0800848f
 8008474:	08008485 	.word	0x08008485
 8008478:	080084cf 	.word	0x080084cf
 800847c:	080084a7 	.word	0x080084a7
 8008480:	08008499 	.word	0x08008499
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9d0 	bl	800882c <USBD_GetDescriptor>
      break;
 800848c:	e024      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fb5f 	bl	8008b54 <USBD_SetAddress>
      break;
 8008496:	e01f      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fb9c 	bl	8008bd8 <USBD_SetConfig>
 80084a0:	4603      	mov	r3, r0
 80084a2:	73fb      	strb	r3, [r7, #15]
      break;
 80084a4:	e018      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fc39 	bl	8008d20 <USBD_GetConfig>
      break;
 80084ae:	e013      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 fc68 	bl	8008d88 <USBD_GetStatus>
      break;
 80084b8:	e00e      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fc96 	bl	8008dee <USBD_SetFeature>
      break;
 80084c2:	e009      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fca5 	bl	8008e16 <USBD_ClrFeature>
      break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fcfb 	bl	8008ecc <USBD_CtlError>
      break;
 80084d6:	bf00      	nop
    }
    break;
 80084d8:	e004      	b.n	80084e4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fcf5 	bl	8008ecc <USBD_CtlError>
    break;
 80084e2:	bf00      	nop
  }

  return ret;
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop

080084f0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008506:	2b20      	cmp	r3, #32
 8008508:	d003      	beq.n	8008512 <USBD_StdItfReq+0x22>
 800850a:	2b40      	cmp	r3, #64	; 0x40
 800850c:	d001      	beq.n	8008512 <USBD_StdItfReq+0x22>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d12a      	bne.n	8008568 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008518:	3b01      	subs	r3, #1
 800851a:	2b02      	cmp	r3, #2
 800851c:	d81d      	bhi.n	800855a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	889b      	ldrh	r3, [r3, #4]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b01      	cmp	r3, #1
 8008526:	d813      	bhi.n	8008550 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	4798      	blx	r3
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	88db      	ldrh	r3, [r3, #6]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d110      	bne.n	8008564 <USBD_StdItfReq+0x74>
 8008542:	7bfb      	ldrb	r3, [r7, #15]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10d      	bne.n	8008564 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fd8a 	bl	8009062 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800854e:	e009      	b.n	8008564 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fcba 	bl	8008ecc <USBD_CtlError>
      break;
 8008558:	e004      	b.n	8008564 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fcb5 	bl	8008ecc <USBD_CtlError>
      break;
 8008562:	e000      	b.n	8008566 <USBD_StdItfReq+0x76>
      break;
 8008564:	bf00      	nop
    }
    break;
 8008566:	e004      	b.n	8008572 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008568:	6839      	ldr	r1, [r7, #0]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 fcae 	bl	8008ecc <USBD_CtlError>
    break;
 8008570:	bf00      	nop
  }

  return ret;
 8008572:	7bfb      	ldrb	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	889b      	ldrh	r3, [r3, #4]
 800858e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008598:	2b20      	cmp	r3, #32
 800859a:	d004      	beq.n	80085a6 <USBD_StdEPReq+0x2a>
 800859c:	2b40      	cmp	r3, #64	; 0x40
 800859e:	d002      	beq.n	80085a6 <USBD_StdEPReq+0x2a>
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00a      	beq.n	80085ba <USBD_StdEPReq+0x3e>
 80085a4:	e137      	b.n	8008816 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
    break;
 80085b8:	e132      	b.n	8008820 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d03e      	beq.n	8008640 <USBD_StdEPReq+0xc4>
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0x50>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d079      	beq.n	80086be <USBD_StdEPReq+0x142>
 80085ca:	e11e      	b.n	800880a <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d002      	beq.n	80085dc <USBD_StdEPReq+0x60>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d015      	beq.n	8008606 <USBD_StdEPReq+0x8a>
 80085da:	e02b      	b.n	8008634 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085dc:	7bbb      	ldrb	r3, [r7, #14]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00c      	beq.n	80085fc <USBD_StdEPReq+0x80>
 80085e2:	7bbb      	ldrb	r3, [r7, #14]
 80085e4:	2b80      	cmp	r3, #128	; 0x80
 80085e6:	d009      	beq.n	80085fc <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f94d 	bl	800988c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80085f2:	2180      	movs	r1, #128	; 0x80
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f949 	bl	800988c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085fa:	e020      	b.n	800863e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80085fc:	6839      	ldr	r1, [r7, #0]
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fc64 	bl	8008ecc <USBD_CtlError>
        break;
 8008604:	e01b      	b.n	800863e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10e      	bne.n	800862c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <USBD_StdEPReq+0xb0>
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	2b80      	cmp	r3, #128	; 0x80
 8008618:	d008      	beq.n	800862c <USBD_StdEPReq+0xb0>
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	88db      	ldrh	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 f930 	bl	800988c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fd18 	bl	8009062 <USBD_CtlSendStatus>

        break;
 8008632:	e004      	b.n	800863e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fc48 	bl	8008ecc <USBD_CtlError>
        break;
 800863c:	bf00      	nop
      }
      break;
 800863e:	e0e9      	b.n	8008814 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008646:	2b02      	cmp	r3, #2
 8008648:	d002      	beq.n	8008650 <USBD_StdEPReq+0xd4>
 800864a:	2b03      	cmp	r3, #3
 800864c:	d015      	beq.n	800867a <USBD_StdEPReq+0xfe>
 800864e:	e02f      	b.n	80086b0 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00c      	beq.n	8008670 <USBD_StdEPReq+0xf4>
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b80      	cmp	r3, #128	; 0x80
 800865a:	d009      	beq.n	8008670 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	4619      	mov	r1, r3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f001 f913 	bl	800988c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 f90f 	bl	800988c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800866e:	e025      	b.n	80086bc <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fc2a 	bl	8008ecc <USBD_CtlError>
        break;
 8008678:	e020      	b.n	80086bc <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d11b      	bne.n	80086ba <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	4619      	mov	r1, r3
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f931 	bl	80098f8 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fce3 	bl	8009062 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	4798      	blx	r3
 80086aa:	4603      	mov	r3, r0
 80086ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ae:	e004      	b.n	80086ba <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 80086b0:	6839      	ldr	r1, [r7, #0]
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f000 fc0a 	bl	8008ecc <USBD_CtlError>
        break;
 80086b8:	e000      	b.n	80086bc <USBD_StdEPReq+0x140>
        break;
 80086ba:	bf00      	nop
      }
      break;
 80086bc:	e0aa      	b.n	8008814 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d002      	beq.n	80086ce <USBD_StdEPReq+0x152>
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d032      	beq.n	8008732 <USBD_StdEPReq+0x1b6>
 80086cc:	e097      	b.n	80087fe <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <USBD_StdEPReq+0x168>
 80086d4:	7bbb      	ldrb	r3, [r7, #14]
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d004      	beq.n	80086e4 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 80086da:	6839      	ldr	r1, [r7, #0]
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fbf5 	bl	8008ecc <USBD_CtlError>
          break;
 80086e2:	e091      	b.n	8008808 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	da0b      	bge.n	8008704 <USBD_StdEPReq+0x188>
 80086ec:	7bbb      	ldrb	r3, [r7, #14]
 80086ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	3310      	adds	r3, #16
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	4413      	add	r3, r2
 8008700:	3304      	adds	r3, #4
 8008702:	e00b      	b.n	800871c <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	4413      	add	r3, r2
 800871a:	3304      	adds	r3, #4
 800871c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2200      	movs	r2, #0
 8008722:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2202      	movs	r2, #2
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fc3f 	bl	8008fae <USBD_CtlSendData>
        break;
 8008730:	e06a      	b.n	8008808 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008732:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008736:	2b00      	cmp	r3, #0
 8008738:	da11      	bge.n	800875e <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	f003 020f 	and.w	r2, r3, #15
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	3324      	adds	r3, #36	; 0x24
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d117      	bne.n	8008784 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fbb8 	bl	8008ecc <USBD_CtlError>
            break;
 800875c:	e054      	b.n	8008808 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800875e:	7bbb      	ldrb	r3, [r7, #14]
 8008760:	f003 020f 	and.w	r2, r3, #15
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008774:	881b      	ldrh	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d104      	bne.n	8008784 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800877a:	6839      	ldr	r1, [r7, #0]
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 fba5 	bl	8008ecc <USBD_CtlError>
            break;
 8008782:	e041      	b.n	8008808 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008788:	2b00      	cmp	r3, #0
 800878a:	da0b      	bge.n	80087a4 <USBD_StdEPReq+0x228>
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008792:	4613      	mov	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	3310      	adds	r3, #16
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	3304      	adds	r3, #4
 80087a2:	e00b      	b.n	80087bc <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	4413      	add	r3, r2
 80087ba:	3304      	adds	r3, #4
 80087bc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087be:	7bbb      	ldrb	r3, [r7, #14]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <USBD_StdEPReq+0x24e>
 80087c4:	7bbb      	ldrb	r3, [r7, #14]
 80087c6:	2b80      	cmp	r3, #128	; 0x80
 80087c8:	d103      	bne.n	80087d2 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2200      	movs	r2, #0
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	e00e      	b.n	80087f0 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	4619      	mov	r1, r3
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 f8c4 	bl	8009964 <USBD_LL_IsStallEP>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2201      	movs	r2, #1
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e002      	b.n	80087f0 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2202      	movs	r2, #2
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fbd9 	bl	8008fae <USBD_CtlSendData>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb63 	bl	8008ecc <USBD_CtlError>
        break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fb5d 	bl	8008ecc <USBD_CtlError>
      break;
 8008812:	bf00      	nop
    }
    break;
 8008814:	e004      	b.n	8008820 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008816:	6839      	ldr	r1, [r7, #0]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fb57 	bl	8008ecc <USBD_CtlError>
    break;
 800881e:	bf00      	nop
  }

  return ret;
 8008820:	7bfb      	ldrb	r3, [r7, #15]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800883e:	2300      	movs	r3, #0
 8008840:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	885b      	ldrh	r3, [r3, #2]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	b29b      	uxth	r3, r3
 800884a:	3b01      	subs	r3, #1
 800884c:	2b0e      	cmp	r3, #14
 800884e:	f200 8152 	bhi.w	8008af6 <USBD_GetDescriptor+0x2ca>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <USBD_GetDescriptor+0x2c>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	080088c9 	.word	0x080088c9
 800885c:	080088e1 	.word	0x080088e1
 8008860:	08008921 	.word	0x08008921
 8008864:	08008af7 	.word	0x08008af7
 8008868:	08008af7 	.word	0x08008af7
 800886c:	08008a97 	.word	0x08008a97
 8008870:	08008ac3 	.word	0x08008ac3
 8008874:	08008af7 	.word	0x08008af7
 8008878:	08008af7 	.word	0x08008af7
 800887c:	08008af7 	.word	0x08008af7
 8008880:	08008af7 	.word	0x08008af7
 8008884:	08008af7 	.word	0x08008af7
 8008888:	08008af7 	.word	0x08008af7
 800888c:	08008af7 	.word	0x08008af7
 8008890:	08008895 	.word	0x08008895
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800889a:	69db      	ldr	r3, [r3, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00b      	beq.n	80088b8 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80088b6:	e126      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fb06 	bl	8008ecc <USBD_CtlError>
      err++;
 80088c0:	7afb      	ldrb	r3, [r7, #11]
 80088c2:	3301      	adds	r3, #1
 80088c4:	72fb      	strb	r3, [r7, #11]
    break;
 80088c6:	e11e      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
    break;
 80088de:	e112      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7c1b      	ldrb	r3, [r3, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10d      	bne.n	8008904 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f0:	f107 0208 	add.w	r2, r7, #8
 80088f4:	4610      	mov	r0, r2
 80088f6:	4798      	blx	r3
 80088f8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3301      	adds	r3, #1
 80088fe:	2202      	movs	r2, #2
 8008900:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008902:	e100      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f107 0208 	add.w	r2, r7, #8
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	3301      	adds	r3, #1
 800891a:	2202      	movs	r2, #2
 800891c:	701a      	strb	r2, [r3, #0]
    break;
 800891e:	e0f2      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b05      	cmp	r3, #5
 8008928:	f200 80ac 	bhi.w	8008a84 <USBD_GetDescriptor+0x258>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <USBD_GetDescriptor+0x108>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	0800894d 	.word	0x0800894d
 8008938:	08008981 	.word	0x08008981
 800893c:	080089b5 	.word	0x080089b5
 8008940:	080089e9 	.word	0x080089e9
 8008944:	08008a1d 	.word	0x08008a1d
 8008948:	08008a51 	.word	0x08008a51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00b      	beq.n	8008970 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	7c12      	ldrb	r2, [r2, #16]
 8008964:	f107 0108 	add.w	r1, r7, #8
 8008968:	4610      	mov	r0, r2
 800896a:	4798      	blx	r3
 800896c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800896e:	e091      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 faaa 	bl	8008ecc <USBD_CtlError>
        err++;
 8008978:	7afb      	ldrb	r3, [r7, #11]
 800897a:	3301      	adds	r3, #1
 800897c:	72fb      	strb	r3, [r7, #11]
      break;
 800897e:	e089      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00b      	beq.n	80089a4 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	7c12      	ldrb	r2, [r2, #16]
 8008998:	f107 0108 	add.w	r1, r7, #8
 800899c:	4610      	mov	r0, r2
 800899e:	4798      	blx	r3
 80089a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a2:	e077      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa90 	bl	8008ecc <USBD_CtlError>
        err++;
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	3301      	adds	r3, #1
 80089b0:	72fb      	strb	r3, [r7, #11]
      break;
 80089b2:	e06f      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 0108 	add.w	r1, r7, #8
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089d6:	e05d      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80089d8:	6839      	ldr	r1, [r7, #0]
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 fa76 	bl	8008ecc <USBD_CtlError>
        err++;
 80089e0:	7afb      	ldrb	r3, [r7, #11]
 80089e2:	3301      	adds	r3, #1
 80089e4:	72fb      	strb	r3, [r7, #11]
      break;
 80089e6:	e055      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	7c12      	ldrb	r2, [r2, #16]
 8008a00:	f107 0108 	add.w	r1, r7, #8
 8008a04:	4610      	mov	r0, r2
 8008a06:	4798      	blx	r3
 8008a08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a0a:	e043      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa5c 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a14:	7afb      	ldrb	r3, [r7, #11]
 8008a16:	3301      	adds	r3, #1
 8008a18:	72fb      	strb	r3, [r7, #11]
      break;
 8008a1a:	e03b      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	7c12      	ldrb	r2, [r2, #16]
 8008a34:	f107 0108 	add.w	r1, r7, #8
 8008a38:	4610      	mov	r0, r2
 8008a3a:	4798      	blx	r3
 8008a3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a3e:	e029      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa42 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008a4e:	e021      	b.n	8008a94 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00b      	beq.n	8008a74 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7c12      	ldrb	r2, [r2, #16]
 8008a68:	f107 0108 	add.w	r1, r7, #8
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	4798      	blx	r3
 8008a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a72:	e00f      	b.n	8008a94 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 fa28 	bl	8008ecc <USBD_CtlError>
        err++;
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	72fb      	strb	r3, [r7, #11]
      break;
 8008a82:	e007      	b.n	8008a94 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008a84:	6839      	ldr	r1, [r7, #0]
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 fa20 	bl	8008ecc <USBD_CtlError>
      err++;
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008a92:	bf00      	nop
    }
    break;
 8008a94:	e037      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7c1b      	ldrb	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d109      	bne.n	8008ab2 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa6:	f107 0208 	add.w	r2, r7, #8
 8008aaa:	4610      	mov	r0, r2
 8008aac:	4798      	blx	r3
 8008aae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ab0:	e029      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa09 	bl	8008ecc <USBD_CtlError>
      err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
    break;
 8008ac0:	e021      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	7c1b      	ldrb	r3, [r3, #16]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad2:	f107 0208 	add.w	r2, r7, #8
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	4798      	blx	r3
 8008ada:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008ae4:	e00f      	b.n	8008b06 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9ef 	bl	8008ecc <USBD_CtlError>
      err++;
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	3301      	adds	r3, #1
 8008af2:	72fb      	strb	r3, [r7, #11]
    break;
 8008af4:	e007      	b.n	8008b06 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f9e7 	bl	8008ecc <USBD_CtlError>
    err++;
 8008afe:	7afb      	ldrb	r3, [r7, #11]
 8008b00:	3301      	adds	r3, #1
 8008b02:	72fb      	strb	r3, [r7, #11]
    break;
 8008b04:	bf00      	nop
  }

  if (err != 0U)
 8008b06:	7afb      	ldrb	r3, [r7, #11]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d11e      	bne.n	8008b4a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	88db      	ldrh	r3, [r3, #6]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d016      	beq.n	8008b42 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008b14:	893b      	ldrh	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00e      	beq.n	8008b38 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88da      	ldrh	r2, [r3, #6]
 8008b1e:	893b      	ldrh	r3, [r7, #8]
 8008b20:	4293      	cmp	r3, r2
 8008b22:	bf28      	it	cs
 8008b24:	4613      	movcs	r3, r2
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b2a:	893b      	ldrh	r3, [r7, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fa3c 	bl	8008fae <USBD_CtlSendData>
 8008b36:	e009      	b.n	8008b4c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f9c6 	bl	8008ecc <USBD_CtlError>
 8008b40:	e004      	b.n	8008b4c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fa8d 	bl	8009062 <USBD_CtlSendStatus>
 8008b48:	e000      	b.n	8008b4c <USBD_GetDescriptor+0x320>
    return;
 8008b4a:	bf00      	nop
    }
  }
}
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	889b      	ldrh	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d130      	bne.n	8008bc8 <USBD_SetAddress+0x74>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	88db      	ldrh	r3, [r3, #6]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d12c      	bne.n	8008bc8 <USBD_SetAddress+0x74>
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	2b7f      	cmp	r3, #127	; 0x7f
 8008b74:	d828      	bhi.n	8008bc8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	885b      	ldrh	r3, [r3, #2]
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d104      	bne.n	8008b96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 f99c 	bl	8008ecc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b94:	e01c      	b.n	8008bd0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	7bfa      	ldrb	r2, [r7, #15]
 8008b9a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 ff0c 	bl	80099c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fa5a 	bl	8009062 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2202      	movs	r2, #2
 8008bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbc:	e008      	b.n	8008bd0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bc6:	e003      	b.n	8008bd0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f97e 	bl	8008ecc <USBD_CtlError>
  }
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	885b      	ldrh	r3, [r3, #2]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b4b      	ldr	r3, [pc, #300]	; (8008d1c <USBD_SetConfig+0x144>)
 8008bee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bf0:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <USBD_SetConfig+0x144>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d905      	bls.n	8008c04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f966 	bl	8008ecc <USBD_CtlError>
    return USBD_FAIL;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e087      	b.n	8008d14 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0a:	2b02      	cmp	r3, #2
 8008c0c:	d002      	beq.n	8008c14 <USBD_SetConfig+0x3c>
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d025      	beq.n	8008c5e <USBD_SetConfig+0x86>
 8008c12:	e071      	b.n	8008cf8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01c      	beq.n	8008c56 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c26:	4b3d      	ldr	r3, [pc, #244]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff f9bd 	bl	8007fac <USBD_SetClassConfig>
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d004      	beq.n	8008c46 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f944 	bl	8008ecc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c44:	e065      	b.n	8008d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fa0b 	bl	8009062 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2203      	movs	r2, #3
 8008c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008c54:	e05d      	b.n	8008d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fa03 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008c5c:	e059      	b.n	8008d12 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8008c5e:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d112      	bne.n	8008c8c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8008c6e:	4b2b      	ldr	r3, [pc, #172]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c78:	4b28      	ldr	r3, [pc, #160]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7ff f9b0 	bl	8007fe4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9ec 	bl	8009062 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008c8a:	e042      	b.n	8008d12 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008c8c:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <USBD_SetConfig+0x144>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	461a      	mov	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d02a      	beq.n	8008cf0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff f99e 	bl	8007fe4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <USBD_SetConfig+0x144>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	461a      	mov	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008cb2:	4b1a      	ldr	r3, [pc, #104]	; (8008d1c <USBD_SetConfig+0x144>)
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff f977 	bl	8007fac <USBD_SetClassConfig>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00f      	beq.n	8008ce8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8fe 	bl	8008ecc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff f983 	bl	8007fe4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008ce6:	e014      	b.n	8008d12 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 f9ba 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008cee:	e010      	b.n	8008d12 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f9b6 	bl	8009062 <USBD_CtlSendStatus>
    break;
 8008cf6:	e00c      	b.n	8008d12 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8e6 	bl	8008ecc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <USBD_SetConfig+0x144>)
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff f96c 	bl	8007fe4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d10:	bf00      	nop
  }

  return ret;
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	200005a4 	.word	0x200005a4

08008d20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d004      	beq.n	8008d3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f8c9 	bl	8008ecc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008d3a:	e021      	b.n	8008d80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	db17      	blt.n	8008d76 <USBD_GetConfig+0x56>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	dd02      	ble.n	8008d50 <USBD_GetConfig+0x30>
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d00b      	beq.n	8008d66 <USBD_GetConfig+0x46>
 8008d4e:	e012      	b.n	8008d76 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f925 	bl	8008fae <USBD_CtlSendData>
      break;
 8008d64:	e00c      	b.n	8008d80 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3304      	adds	r3, #4
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f91d 	bl	8008fae <USBD_CtlSendData>
      break;
 8008d74:	e004      	b.n	8008d80 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f8a7 	bl	8008ecc <USBD_CtlError>
      break;
 8008d7e:	bf00      	nop
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d81e      	bhi.n	8008ddc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	88db      	ldrh	r3, [r3, #6]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d004      	beq.n	8008db0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f88f 	bl	8008ecc <USBD_CtlError>
      break;
 8008dae:	e01a      	b.n	8008de6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d005      	beq.n	8008dcc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f043 0202 	orr.w	r2, r3, #2
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	330c      	adds	r3, #12
 8008dd0:	2202      	movs	r2, #2
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f8ea 	bl	8008fae <USBD_CtlSendData>
    break;
 8008dda:	e004      	b.n	8008de6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f874 	bl	8008ecc <USBD_CtlError>
    break;
 8008de4:	bf00      	nop
  }
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b082      	sub	sp, #8
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d106      	bne.n	8008e0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f92a 	bl	8009062 <USBD_CtlSendStatus>
  }
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
 8008e1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e26:	3b01      	subs	r3, #1
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d80b      	bhi.n	8008e44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	885b      	ldrh	r3, [r3, #2]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d10c      	bne.n	8008e4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f910 	bl	8009062 <USBD_CtlSendStatus>
      }
      break;
 8008e42:	e004      	b.n	8008e4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f840 	bl	8008ecc <USBD_CtlError>
      break;
 8008e4c:	e000      	b.n	8008e50 <USBD_ClrFeature+0x3a>
      break;
 8008e4e:	bf00      	nop
  }
}
 8008e50:	bf00      	nop
 8008e52:	3708      	adds	r7, #8
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	781a      	ldrb	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	3301      	adds	r3, #1
 8008e72:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff faa8 	bl	80083d8 <SWAPBYTE>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fa9b 	bl	80083d8 <SWAPBYTE>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff fa8e 	bl	80083d8 <SWAPBYTE>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	80da      	strh	r2, [r3, #6]
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ed6:	2180      	movs	r1, #128	; 0x80
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fcd7 	bl	800988c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 fcd3 	bl	800988c <USBD_LL_StallEP>
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b086      	sub	sp, #24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008efa:	2300      	movs	r3, #0
 8008efc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d036      	beq.n	8008f72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f08:	6938      	ldr	r0, [r7, #16]
 8008f0a:	f000 f836 	bl	8008f7a <USBD_GetLen>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	3301      	adds	r3, #1
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4413      	add	r3, r2
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	7812      	ldrb	r2, [r2, #0]
 8008f26:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	4413      	add	r3, r2
 8008f34:	2203      	movs	r2, #3
 8008f36:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f38:	7dfb      	ldrb	r3, [r7, #23]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f3e:	e013      	b.n	8008f68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	4413      	add	r3, r2
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	613b      	str	r3, [r7, #16]
    idx++;
 8008f52:	7dfb      	ldrb	r3, [r7, #23]
 8008f54:	3301      	adds	r3, #1
 8008f56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	3301      	adds	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e7      	bne.n	8008f40 <USBD_GetString+0x52>
 8008f70:	e000      	b.n	8008f74 <USBD_GetString+0x86>
    return;
 8008f72:	bf00      	nop
  }
}
 8008f74:	3718      	adds	r7, #24
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b085      	sub	sp, #20
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f82:	2300      	movs	r3, #0
 8008f84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f8a:	e005      	b.n	8008f98 <USBD_GetLen+0x1e>
  {
    len++;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	3301      	adds	r3, #1
 8008f96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f5      	bne.n	8008f8c <USBD_GetLen+0x12>
  }

  return len;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3714      	adds	r7, #20
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b084      	sub	sp, #16
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	60f8      	str	r0, [r7, #12]
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fd29 	bl	8009a2c <USBD_LL_Transmit>

  return USBD_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 fd18 	bl	8009a2c <USBD_LL_Transmit>

  return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b084      	sub	sp, #16
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2203      	movs	r2, #3
 8009016:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	2100      	movs	r1, #0
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fd33 	bl	8009a9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	2100      	movs	r1, #0
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	f000 fd22 	bl	8009a9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2204      	movs	r2, #4
 800906e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009072:	2300      	movs	r3, #0
 8009074:	2200      	movs	r2, #0
 8009076:	2100      	movs	r1, #0
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fcd7 	bl	8009a2c <USBD_LL_Transmit>

  return USBD_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2205      	movs	r2, #5
 8009094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009098:	2300      	movs	r3, #0
 800909a:	2200      	movs	r2, #0
 800909c:	2100      	movs	r1, #0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fcfc 	bl	8009a9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
	...

080090b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090b4:	2200      	movs	r2, #0
 80090b6:	4912      	ldr	r1, [pc, #72]	; (8009100 <MX_USB_DEVICE_Init+0x50>)
 80090b8:	4812      	ldr	r0, [pc, #72]	; (8009104 <MX_USB_DEVICE_Init+0x54>)
 80090ba:	f7fe ff09 	bl	8007ed0 <USBD_Init>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090c4:	f7f7 fb40 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090c8:	490f      	ldr	r1, [pc, #60]	; (8009108 <MX_USB_DEVICE_Init+0x58>)
 80090ca:	480e      	ldr	r0, [pc, #56]	; (8009104 <MX_USB_DEVICE_Init+0x54>)
 80090cc:	f7fe ff30 	bl	8007f30 <USBD_RegisterClass>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090d6:	f7f7 fb37 	bl	8000748 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090da:	490c      	ldr	r1, [pc, #48]	; (800910c <MX_USB_DEVICE_Init+0x5c>)
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <MX_USB_DEVICE_Init+0x54>)
 80090de:	f7fe fe8b 	bl	8007df8 <USBD_CDC_RegisterInterface>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090e8:	f7f7 fb2e 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090ec:	4805      	ldr	r0, [pc, #20]	; (8009104 <MX_USB_DEVICE_Init+0x54>)
 80090ee:	f7fe ff46 	bl	8007f7e <USBD_Start>
 80090f2:	4603      	mov	r3, r0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d001      	beq.n	80090fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090f8:	f7f7 fb26 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090fc:	bf00      	nop
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20000130 	.word	0x20000130
 8009104:	200006b0 	.word	0x200006b0
 8009108:	20000018 	.word	0x20000018
 800910c:	2000011c 	.word	0x2000011c

08009110 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009114:	2200      	movs	r2, #0
 8009116:	4905      	ldr	r1, [pc, #20]	; (800912c <CDC_Init_FS+0x1c>)
 8009118:	4805      	ldr	r0, [pc, #20]	; (8009130 <CDC_Init_FS+0x20>)
 800911a:	f7fe fe82 	bl	8007e22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800911e:	4905      	ldr	r1, [pc, #20]	; (8009134 <CDC_Init_FS+0x24>)
 8009120:	4803      	ldr	r0, [pc, #12]	; (8009130 <CDC_Init_FS+0x20>)
 8009122:	f7fe fe97 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009126:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009128:	4618      	mov	r0, r3
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000d68 	.word	0x20000d68
 8009130:	200006b0 	.word	0x200006b0
 8009134:	20000980 	.word	0x20000980

08009138 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009138:	b480      	push	{r7}
 800913a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800913c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800913e:	4618      	mov	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
 8009154:	4613      	mov	r3, r2
 8009156:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	2b23      	cmp	r3, #35	; 0x23
 800915c:	d84a      	bhi.n	80091f4 <CDC_Control_FS+0xac>
 800915e:	a201      	add	r2, pc, #4	; (adr r2, 8009164 <CDC_Control_FS+0x1c>)
 8009160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009164:	080091f5 	.word	0x080091f5
 8009168:	080091f5 	.word	0x080091f5
 800916c:	080091f5 	.word	0x080091f5
 8009170:	080091f5 	.word	0x080091f5
 8009174:	080091f5 	.word	0x080091f5
 8009178:	080091f5 	.word	0x080091f5
 800917c:	080091f5 	.word	0x080091f5
 8009180:	080091f5 	.word	0x080091f5
 8009184:	080091f5 	.word	0x080091f5
 8009188:	080091f5 	.word	0x080091f5
 800918c:	080091f5 	.word	0x080091f5
 8009190:	080091f5 	.word	0x080091f5
 8009194:	080091f5 	.word	0x080091f5
 8009198:	080091f5 	.word	0x080091f5
 800919c:	080091f5 	.word	0x080091f5
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091f5 	.word	0x080091f5
 80091ac:	080091f5 	.word	0x080091f5
 80091b0:	080091f5 	.word	0x080091f5
 80091b4:	080091f5 	.word	0x080091f5
 80091b8:	080091f5 	.word	0x080091f5
 80091bc:	080091f5 	.word	0x080091f5
 80091c0:	080091f5 	.word	0x080091f5
 80091c4:	080091f5 	.word	0x080091f5
 80091c8:	080091f5 	.word	0x080091f5
 80091cc:	080091f5 	.word	0x080091f5
 80091d0:	080091f5 	.word	0x080091f5
 80091d4:	080091f5 	.word	0x080091f5
 80091d8:	080091f5 	.word	0x080091f5
 80091dc:	080091f5 	.word	0x080091f5
 80091e0:	080091f5 	.word	0x080091f5
 80091e4:	080091f5 	.word	0x080091f5
 80091e8:	080091f5 	.word	0x080091f5
 80091ec:	080091f5 	.word	0x080091f5
 80091f0:	080091f5 	.word	0x080091f5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80091f4:	bf00      	nop
  }

  return (USBD_OK);
 80091f6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	4805      	ldr	r0, [pc, #20]	; (8009228 <CDC_Receive_FS+0x24>)
 8009212:	f7fe fe1f 	bl	8007e54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009216:	4804      	ldr	r0, [pc, #16]	; (8009228 <CDC_Receive_FS+0x24>)
 8009218:	f7fe fe30 	bl	8007e7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800921c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200006b0 	.word	0x200006b0

0800922c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4613      	mov	r3, r2
 8009238:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800923e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009242:	4618      	mov	r0, r3
 8009244:	371c      	adds	r7, #28
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	6039      	str	r1, [r7, #0]
 800925a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2212      	movs	r2, #18
 8009260:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009262:	4b03      	ldr	r3, [pc, #12]	; (8009270 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	20000150 	.word	0x20000150

08009274 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	4603      	mov	r3, r0
 800927c:	6039      	str	r1, [r7, #0]
 800927e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	2204      	movs	r2, #4
 8009284:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009286:	4b03      	ldr	r3, [pc, #12]	; (8009294 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	20000170 	.word	0x20000170

08009298 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	6039      	str	r1, [r7, #0]
 80092a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d105      	bne.n	80092b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4907      	ldr	r1, [pc, #28]	; (80092cc <USBD_FS_ProductStrDescriptor+0x34>)
 80092ae:	4808      	ldr	r0, [pc, #32]	; (80092d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092b0:	f7ff fe1d 	bl	8008eee <USBD_GetString>
 80092b4:	e004      	b.n	80092c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092b6:	683a      	ldr	r2, [r7, #0]
 80092b8:	4904      	ldr	r1, [pc, #16]	; (80092cc <USBD_FS_ProductStrDescriptor+0x34>)
 80092ba:	4805      	ldr	r0, [pc, #20]	; (80092d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80092bc:	f7ff fe17 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 80092c0:	4b02      	ldr	r3, [pc, #8]	; (80092cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20001150 	.word	0x20001150
 80092d0:	08009dd8 	.word	0x08009dd8

080092d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	4904      	ldr	r1, [pc, #16]	; (80092f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092e4:	4804      	ldr	r0, [pc, #16]	; (80092f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092e6:	f7ff fe02 	bl	8008eee <USBD_GetString>
  return USBD_StrDesc;
 80092ea:	4b02      	ldr	r3, [pc, #8]	; (80092f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	20001150 	.word	0x20001150
 80092f8:	08009df0 	.word	0x08009df0

080092fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	221a      	movs	r2, #26
 800930c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800930e:	f000 f855 	bl	80093bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009312:	4b02      	ldr	r3, [pc, #8]	; (800931c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20000174 	.word	0x20000174

08009320 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	6039      	str	r1, [r7, #0]
 800932a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d105      	bne.n	800933e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	4907      	ldr	r1, [pc, #28]	; (8009354 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009336:	4808      	ldr	r0, [pc, #32]	; (8009358 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009338:	f7ff fdd9 	bl	8008eee <USBD_GetString>
 800933c:	e004      	b.n	8009348 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	4904      	ldr	r1, [pc, #16]	; (8009354 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009342:	4805      	ldr	r0, [pc, #20]	; (8009358 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009344:	f7ff fdd3 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 8009348:	4b02      	ldr	r3, [pc, #8]	; (8009354 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	20001150 	.word	0x20001150
 8009358:	08009e04 	.word	0x08009e04

0800935c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	6039      	str	r1, [r7, #0]
 8009366:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800936e:	683a      	ldr	r2, [r7, #0]
 8009370:	4907      	ldr	r1, [pc, #28]	; (8009390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009372:	4808      	ldr	r0, [pc, #32]	; (8009394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009374:	f7ff fdbb 	bl	8008eee <USBD_GetString>
 8009378:	e004      	b.n	8009384 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	4904      	ldr	r1, [pc, #16]	; (8009390 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800937e:	4805      	ldr	r0, [pc, #20]	; (8009394 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009380:	f7ff fdb5 	bl	8008eee <USBD_GetString>
  }
  return USBD_StrDesc;
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20001150 	.word	0x20001150
 8009394:	08009e10 	.word	0x08009e10

08009398 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	4603      	mov	r3, r0
 80093a0:	6039      	str	r1, [r7, #0]
 80093a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	220c      	movs	r2, #12
 80093a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80093aa:	4b03      	ldr	r3, [pc, #12]	; (80093b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr
 80093b8:	20000164 	.word	0x20000164

080093bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093c2:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <Get_SerialNum+0x44>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c8:	4b0e      	ldr	r3, [pc, #56]	; (8009404 <Get_SerialNum+0x48>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093ce:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <Get_SerialNum+0x4c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d009      	beq.n	80093f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093e2:	2208      	movs	r2, #8
 80093e4:	4909      	ldr	r1, [pc, #36]	; (800940c <Get_SerialNum+0x50>)
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f814 	bl	8009414 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093ec:	2204      	movs	r2, #4
 80093ee:	4908      	ldr	r1, [pc, #32]	; (8009410 <Get_SerialNum+0x54>)
 80093f0:	68b8      	ldr	r0, [r7, #8]
 80093f2:	f000 f80f 	bl	8009414 <IntToUnicode>
  }
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	1fff7590 	.word	0x1fff7590
 8009404:	1fff7594 	.word	0x1fff7594
 8009408:	1fff7598 	.word	0x1fff7598
 800940c:	20000176 	.word	0x20000176
 8009410:	20000186 	.word	0x20000186

08009414 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009422:	2300      	movs	r3, #0
 8009424:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
 800942a:	e027      	b.n	800947c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	2b09      	cmp	r3, #9
 8009432:	d80b      	bhi.n	800944c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0f1b      	lsrs	r3, r3, #28
 8009438:	b2da      	uxtb	r2, r3
 800943a:	7dfb      	ldrb	r3, [r7, #23]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	4619      	mov	r1, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	440b      	add	r3, r1
 8009444:	3230      	adds	r2, #48	; 0x30
 8009446:	b2d2      	uxtb	r2, r2
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	e00a      	b.n	8009462 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	0f1b      	lsrs	r3, r3, #28
 8009450:	b2da      	uxtb	r2, r3
 8009452:	7dfb      	ldrb	r3, [r7, #23]
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	4619      	mov	r1, r3
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	440b      	add	r3, r1
 800945c:	3237      	adds	r2, #55	; 0x37
 800945e:	b2d2      	uxtb	r2, r2
 8009460:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	3301      	adds	r3, #1
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	3301      	adds	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
 800947c:	7dfa      	ldrb	r2, [r7, #23]
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	429a      	cmp	r2, r3
 8009482:	d3d3      	bcc.n	800942c <IntToUnicode+0x18>
  }
}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b08a      	sub	sp, #40	; 0x28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009498:	f107 0314 	add.w	r3, r7, #20
 800949c:	2200      	movs	r2, #0
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	605a      	str	r2, [r3, #4]
 80094a2:	609a      	str	r2, [r3, #8]
 80094a4:	60da      	str	r2, [r3, #12]
 80094a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a1c      	ldr	r2, [pc, #112]	; (8009520 <HAL_PCD_MspInit+0x90>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d131      	bne.n	8009516 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094b6:	4a1b      	ldr	r2, [pc, #108]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80094be:	4b19      	ldr	r3, [pc, #100]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d0:	2302      	movs	r3, #2
 80094d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d8:	2303      	movs	r3, #3
 80094da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 80094dc:	230a      	movs	r3, #10
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094ea:	f7f8 f92d 	bl	8001748 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f2:	4a0c      	ldr	r2, [pc, #48]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094f8:	6593      	str	r3, [r2, #88]	; 0x58
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <HAL_PCD_MspInit+0x94>)
 80094fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009506:	2200      	movs	r2, #0
 8009508:	2100      	movs	r1, #0
 800950a:	2043      	movs	r0, #67	; 0x43
 800950c:	f7f8 f8e5 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009510:	2043      	movs	r0, #67	; 0x43
 8009512:	f7f8 f8fe 	bl	8001712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009516:	bf00      	nop
 8009518:	3728      	adds	r7, #40	; 0x28
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	40006800 	.word	0x40006800
 8009524:	40021000 	.word	0x40021000

08009528 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800953c:	4619      	mov	r1, r3
 800953e:	4610      	mov	r0, r2
 8009540:	f7fe fd68 	bl	8008014 <USBD_LL_SetupStage>
}
 8009544:	bf00      	nop
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800955e:	78fa      	ldrb	r2, [r7, #3]
 8009560:	6879      	ldr	r1, [r7, #4]
 8009562:	4613      	mov	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	440b      	add	r3, r1
 800956c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	4619      	mov	r1, r3
 8009576:	f7fe fda0 	bl	80080ba <USBD_LL_DataOutStage>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009594:	78fa      	ldrb	r2, [r7, #3]
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	440b      	add	r3, r1
 80095a2:	333c      	adds	r3, #60	; 0x3c
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	4619      	mov	r1, r3
 80095aa:	f7fe fde9 	bl	8008180 <USBD_LL_DataInStage>
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe feed 	bl	80083a4 <USBD_LL_SOF>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}

080095d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b084      	sub	sp, #16
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095da:	2301      	movs	r3, #1
 80095dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d001      	beq.n	80095ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80095e6:	f7f7 f8af 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	4611      	mov	r1, r2
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fe9a 	bl	800832e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fe53 	bl	80082ac <USBD_LL_Reset>
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
	...

08009610 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800961e:	4618      	mov	r0, r3
 8009620:	f7fe fe95 	bl	800834e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800962c:	4b04      	ldr	r3, [pc, #16]	; (8009640 <HAL_PCD_SuspendCallback+0x30>)
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	4a03      	ldr	r2, [pc, #12]	; (8009640 <HAL_PCD_SuspendCallback+0x30>)
 8009632:	f043 0306 	orr.w	r3, r3, #6
 8009636:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009638:	bf00      	nop
 800963a:	3708      	adds	r7, #8
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	e000ed00 	.word	0xe000ed00

08009644 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d007      	beq.n	8009664 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009654:	4b08      	ldr	r3, [pc, #32]	; (8009678 <HAL_PCD_ResumeCallback+0x34>)
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	4a07      	ldr	r2, [pc, #28]	; (8009678 <HAL_PCD_ResumeCallback+0x34>)
 800965a:	f023 0306 	bic.w	r3, r3, #6
 800965e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009660:	f000 fa9e 	bl	8009ba0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800966a:	4618      	mov	r0, r3
 800966c:	f7fe fe84 	bl	8008378 <USBD_LL_Resume>
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed00 	.word	0xe000ed00

0800967c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009684:	f7f9 ff22 	bl	80034cc <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009688:	4a2b      	ldr	r2, [pc, #172]	; (8009738 <USBD_LL_Init+0xbc>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a29      	ldr	r2, [pc, #164]	; (8009738 <USBD_LL_Init+0xbc>)
 8009694:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009698:	4b27      	ldr	r3, [pc, #156]	; (8009738 <USBD_LL_Init+0xbc>)
 800969a:	4a28      	ldr	r2, [pc, #160]	; (800973c <USBD_LL_Init+0xc0>)
 800969c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800969e:	4b26      	ldr	r3, [pc, #152]	; (8009738 <USBD_LL_Init+0xbc>)
 80096a0:	2208      	movs	r2, #8
 80096a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80096a4:	4b24      	ldr	r3, [pc, #144]	; (8009738 <USBD_LL_Init+0xbc>)
 80096a6:	2202      	movs	r2, #2
 80096a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096aa:	4b23      	ldr	r3, [pc, #140]	; (8009738 <USBD_LL_Init+0xbc>)
 80096ac:	2202      	movs	r2, #2
 80096ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80096b0:	4b21      	ldr	r3, [pc, #132]	; (8009738 <USBD_LL_Init+0xbc>)
 80096b2:	2200      	movs	r2, #0
 80096b4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80096b6:	4b20      	ldr	r3, [pc, #128]	; (8009738 <USBD_LL_Init+0xbc>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80096bc:	4b1e      	ldr	r3, [pc, #120]	; (8009738 <USBD_LL_Init+0xbc>)
 80096be:	2200      	movs	r2, #0
 80096c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80096c2:	4b1d      	ldr	r3, [pc, #116]	; (8009738 <USBD_LL_Init+0xbc>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80096c8:	481b      	ldr	r0, [pc, #108]	; (8009738 <USBD_LL_Init+0xbc>)
 80096ca:	f7f8 fb05 	bl	8001cd8 <HAL_PCD_Init>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80096d4:	f7f7 f838 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096de:	2318      	movs	r3, #24
 80096e0:	2200      	movs	r2, #0
 80096e2:	2100      	movs	r1, #0
 80096e4:	f7f9 fe20 	bl	8003328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ee:	2358      	movs	r3, #88	; 0x58
 80096f0:	2200      	movs	r2, #0
 80096f2:	2180      	movs	r1, #128	; 0x80
 80096f4:	f7f9 fe18 	bl	8003328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096fe:	23c0      	movs	r3, #192	; 0xc0
 8009700:	2200      	movs	r2, #0
 8009702:	2181      	movs	r1, #129	; 0x81
 8009704:	f7f9 fe10 	bl	8003328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800970e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009712:	2200      	movs	r2, #0
 8009714:	2101      	movs	r1, #1
 8009716:	f7f9 fe07 	bl	8003328 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009724:	2200      	movs	r2, #0
 8009726:	2182      	movs	r1, #130	; 0x82
 8009728:	f7f9 fdfe 	bl	8003328 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20001350 	.word	0x20001350
 800973c:	40006800 	.word	0x40006800

08009740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009756:	4618      	mov	r0, r3
 8009758:	f7f8 fbd0 	bl	8001efc <HAL_PCD_Start>
 800975c:	4603      	mov	r3, r0
 800975e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009760:	7bbb      	ldrb	r3, [r7, #14]
 8009762:	2b03      	cmp	r3, #3
 8009764:	d816      	bhi.n	8009794 <USBD_LL_Start+0x54>
 8009766:	a201      	add	r2, pc, #4	; (adr r2, 800976c <USBD_LL_Start+0x2c>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	0800977d 	.word	0x0800977d
 8009770:	08009783 	.word	0x08009783
 8009774:	08009789 	.word	0x08009789
 8009778:	0800978f 	.word	0x0800978f
    case HAL_OK :
      usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73fb      	strb	r3, [r7, #15]
    break;
 8009780:	e00b      	b.n	800979a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009782:	2303      	movs	r3, #3
 8009784:	73fb      	strb	r3, [r7, #15]
    break;
 8009786:	e008      	b.n	800979a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
    break;
 800978c:	e005      	b.n	800979a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800978e:	2303      	movs	r3, #3
 8009790:	73fb      	strb	r3, [r7, #15]
    break;
 8009792:	e002      	b.n	800979a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009794:	2303      	movs	r3, #3
 8009796:	73fb      	strb	r3, [r7, #15]
    break;
 8009798:	bf00      	nop
  }
  return usb_status;
 800979a:	7bfb      	ldrb	r3, [r7, #15]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	4608      	mov	r0, r1
 80097ae:	4611      	mov	r1, r2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4603      	mov	r3, r0
 80097b4:	70fb      	strb	r3, [r7, #3]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70bb      	strb	r3, [r7, #2]
 80097ba:	4613      	mov	r3, r2
 80097bc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80097cc:	78bb      	ldrb	r3, [r7, #2]
 80097ce:	883a      	ldrh	r2, [r7, #0]
 80097d0:	78f9      	ldrb	r1, [r7, #3]
 80097d2:	f7f8 fd28 	bl	8002226 <HAL_PCD_EP_Open>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d817      	bhi.n	8009810 <USBD_LL_OpenEP+0x6c>
 80097e0:	a201      	add	r2, pc, #4	; (adr r2, 80097e8 <USBD_LL_OpenEP+0x44>)
 80097e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e6:	bf00      	nop
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	080097ff 	.word	0x080097ff
 80097f0:	08009805 	.word	0x08009805
 80097f4:	0800980b 	.word	0x0800980b
    case HAL_OK :
      usb_status = USBD_OK;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
    break;
 80097fc:	e00b      	b.n	8009816 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097fe:	2303      	movs	r3, #3
 8009800:	73fb      	strb	r3, [r7, #15]
    break;
 8009802:	e008      	b.n	8009816 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009804:	2301      	movs	r3, #1
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e005      	b.n	8009816 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800980a:	2303      	movs	r3, #3
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e002      	b.n	8009816 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	bf00      	nop
  }
  return usb_status;
 8009816:	7bfb      	ldrb	r3, [r7, #15]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f7f8 fd57 	bl	80022f2 <HAL_PCD_EP_Close>
 8009844:	4603      	mov	r3, r0
 8009846:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	2b03      	cmp	r3, #3
 800984c:	d816      	bhi.n	800987c <USBD_LL_CloseEP+0x5c>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <USBD_LL_CloseEP+0x34>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009865 	.word	0x08009865
 8009858:	0800986b 	.word	0x0800986b
 800985c:	08009871 	.word	0x08009871
 8009860:	08009877 	.word	0x08009877
    case HAL_OK :
      usb_status = USBD_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
    break;
 8009868:	e00b      	b.n	8009882 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800986a:	2303      	movs	r3, #3
 800986c:	73fb      	strb	r3, [r7, #15]
    break;
 800986e:	e008      	b.n	8009882 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
    break;
 8009874:	e005      	b.n	8009882 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009876:	2303      	movs	r3, #3
 8009878:	73fb      	strb	r3, [r7, #15]
    break;
 800987a:	e002      	b.n	8009882 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]
    break;
 8009880:	bf00      	nop
  }
  return usb_status;
 8009882:	7bfb      	ldrb	r3, [r7, #15]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f8 fe01 	bl	80024b2 <HAL_PCD_EP_SetStall>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d816      	bhi.n	80098e8 <USBD_LL_StallEP+0x5c>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <USBD_LL_StallEP+0x34>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d1 	.word	0x080098d1
 80098c4:	080098d7 	.word	0x080098d7
 80098c8:	080098dd 	.word	0x080098dd
 80098cc:	080098e3 	.word	0x080098e3
    case HAL_OK :
      usb_status = USBD_OK;
 80098d0:	2300      	movs	r3, #0
 80098d2:	73fb      	strb	r3, [r7, #15]
    break;
 80098d4:	e00b      	b.n	80098ee <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098d6:	2303      	movs	r3, #3
 80098d8:	73fb      	strb	r3, [r7, #15]
    break;
 80098da:	e008      	b.n	80098ee <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
    break;
 80098e0:	e005      	b.n	80098ee <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098e2:	2303      	movs	r3, #3
 80098e4:	73fb      	strb	r3, [r7, #15]
    break;
 80098e6:	e002      	b.n	80098ee <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80098e8:	2303      	movs	r3, #3
 80098ea:	73fb      	strb	r3, [r7, #15]
    break;
 80098ec:	bf00      	nop
  }
  return usb_status;
 80098ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009912:	78fa      	ldrb	r2, [r7, #3]
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f7f8 fe2b 	bl	8002572 <HAL_PCD_EP_ClrStall>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b03      	cmp	r3, #3
 8009924:	d816      	bhi.n	8009954 <USBD_LL_ClearStallEP+0x5c>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <USBD_LL_ClearStallEP+0x34>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	0800993d 	.word	0x0800993d
 8009930:	08009943 	.word	0x08009943
 8009934:	08009949 	.word	0x08009949
 8009938:	0800994f 	.word	0x0800994f
    case HAL_OK :
      usb_status = USBD_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
    break;
 8009940:	e00b      	b.n	800995a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009942:	2303      	movs	r3, #3
 8009944:	73fb      	strb	r3, [r7, #15]
    break;
 8009946:	e008      	b.n	800995a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009948:	2301      	movs	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]
    break;
 800994c:	e005      	b.n	800995a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
    break;
 8009952:	e002      	b.n	800995a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009954:	2303      	movs	r3, #3
 8009956:	73fb      	strb	r3, [r7, #15]
    break;
 8009958:	bf00      	nop
  }
  return usb_status;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009976:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800997c:	2b00      	cmp	r3, #0
 800997e:	da0c      	bge.n	800999a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009986:	68f9      	ldr	r1, [r7, #12]
 8009988:	1c5a      	adds	r2, r3, #1
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	440b      	add	r3, r1
 8009994:	3302      	adds	r3, #2
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	e00b      	b.n	80099b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800999a:	78fb      	ldrb	r3, [r7, #3]
 800999c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	440b      	add	r3, r1
 80099ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
	...

080099c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099cc:	2300      	movs	r3, #0
 80099ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d0:	2300      	movs	r3, #0
 80099d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099da:	78fa      	ldrb	r2, [r7, #3]
 80099dc:	4611      	mov	r1, r2
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f8 fbfc 	bl	80021dc <HAL_PCD_SetAddress>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d816      	bhi.n	8009a1c <USBD_LL_SetUSBAddress+0x5c>
 80099ee:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <USBD_LL_SetUSBAddress+0x34>)
 80099f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f4:	08009a05 	.word	0x08009a05
 80099f8:	08009a0b 	.word	0x08009a0b
 80099fc:	08009a11 	.word	0x08009a11
 8009a00:	08009a17 	.word	0x08009a17
    case HAL_OK :
      usb_status = USBD_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	73fb      	strb	r3, [r7, #15]
    break;
 8009a08:	e00b      	b.n	8009a22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0e:	e008      	b.n	8009a22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
    break;
 8009a14:	e005      	b.n	8009a22 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a16:	2303      	movs	r3, #3
 8009a18:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1a:	e002      	b.n	8009a22 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a20:	bf00      	nop
  }
  return usb_status;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	460b      	mov	r3, r1
 8009a3a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009a4a:	7af9      	ldrb	r1, [r7, #11]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	f7f8 fcec 	bl	800242c <HAL_PCD_EP_Transmit>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009a58:	7dbb      	ldrb	r3, [r7, #22]
 8009a5a:	2b03      	cmp	r3, #3
 8009a5c:	d816      	bhi.n	8009a8c <USBD_LL_Transmit+0x60>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <USBD_LL_Transmit+0x38>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a7b 	.word	0x08009a7b
 8009a6c:	08009a81 	.word	0x08009a81
 8009a70:	08009a87 	.word	0x08009a87
    case HAL_OK :
      usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]
    break;
 8009a78:	e00b      	b.n	8009a92 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	75fb      	strb	r3, [r7, #23]
    break;
 8009a7e:	e008      	b.n	8009a92 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a80:	2301      	movs	r3, #1
 8009a82:	75fb      	strb	r3, [r7, #23]
    break;
 8009a84:	e005      	b.n	8009a92 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a86:	2303      	movs	r3, #3
 8009a88:	75fb      	strb	r3, [r7, #23]
    break;
 8009a8a:	e002      	b.n	8009a92 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	75fb      	strb	r3, [r7, #23]
    break;
 8009a90:	bf00      	nop
  }
  return usb_status;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b086      	sub	sp, #24
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	607a      	str	r2, [r7, #4]
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009aba:	7af9      	ldrb	r1, [r7, #11]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f7f8 fc5f 	bl	8002382 <HAL_PCD_EP_Receive>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009ac8:	7dbb      	ldrb	r3, [r7, #22]
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	d816      	bhi.n	8009afc <USBD_LL_PrepareReceive+0x60>
 8009ace:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <USBD_LL_PrepareReceive+0x38>)
 8009ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad4:	08009ae5 	.word	0x08009ae5
 8009ad8:	08009aeb 	.word	0x08009aeb
 8009adc:	08009af1 	.word	0x08009af1
 8009ae0:	08009af7 	.word	0x08009af7
    case HAL_OK :
      usb_status = USBD_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
    break;
 8009ae8:	e00b      	b.n	8009b02 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aea:	2303      	movs	r3, #3
 8009aec:	75fb      	strb	r3, [r7, #23]
    break;
 8009aee:	e008      	b.n	8009b02 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009af0:	2301      	movs	r3, #1
 8009af2:	75fb      	strb	r3, [r7, #23]
    break;
 8009af4:	e005      	b.n	8009b02 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009af6:	2303      	movs	r3, #3
 8009af8:	75fb      	strb	r3, [r7, #23]
    break;
 8009afa:	e002      	b.n	8009b02 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8009afc:	2303      	movs	r3, #3
 8009afe:	75fb      	strb	r3, [r7, #23]
    break;
 8009b00:	bf00      	nop
  }
  return usb_status;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b1e:	78fa      	ldrb	r2, [r7, #3]
 8009b20:	4611      	mov	r1, r2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7f8 fc6a 	bl	80023fc <HAL_PCD_EP_GetRxCount>
 8009b28:	4603      	mov	r3, r0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d002      	beq.n	8009b4c <HAL_PCDEx_LPM_Callback+0x18>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d013      	beq.n	8009b72 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009b4a:	e023      	b.n	8009b94 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009b54:	f000 f824 	bl	8009ba0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b58:	4b10      	ldr	r3, [pc, #64]	; (8009b9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	4a0f      	ldr	r2, [pc, #60]	; (8009b9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b5e:	f023 0306 	bic.w	r3, r3, #6
 8009b62:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fc04 	bl	8008378 <USBD_LL_Resume>
    break;
 8009b70:	e010      	b.n	8009b94 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe fbe8 	bl	800834e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	699b      	ldr	r3, [r3, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	4a04      	ldr	r2, [pc, #16]	; (8009b9c <HAL_PCDEx_LPM_Callback+0x68>)
 8009b8c:	f043 0306 	orr.w	r3, r3, #6
 8009b90:	6113      	str	r3, [r2, #16]
    break;
 8009b92:	bf00      	nop
}
 8009b94:	bf00      	nop
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	e000ed00 	.word	0xe000ed00

08009ba0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
	...

08009bb0 <__errno>:
 8009bb0:	4b01      	ldr	r3, [pc, #4]	; (8009bb8 <__errno+0x8>)
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	20000190 	.word	0x20000190

08009bbc <__libc_init_array>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	4e0d      	ldr	r6, [pc, #52]	; (8009bf4 <__libc_init_array+0x38>)
 8009bc0:	4c0d      	ldr	r4, [pc, #52]	; (8009bf8 <__libc_init_array+0x3c>)
 8009bc2:	1ba4      	subs	r4, r4, r6
 8009bc4:	10a4      	asrs	r4, r4, #2
 8009bc6:	2500      	movs	r5, #0
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	d109      	bne.n	8009be0 <__libc_init_array+0x24>
 8009bcc:	4e0b      	ldr	r6, [pc, #44]	; (8009bfc <__libc_init_array+0x40>)
 8009bce:	4c0c      	ldr	r4, [pc, #48]	; (8009c00 <__libc_init_array+0x44>)
 8009bd0:	f000 f8f6 	bl	8009dc0 <_init>
 8009bd4:	1ba4      	subs	r4, r4, r6
 8009bd6:	10a4      	asrs	r4, r4, #2
 8009bd8:	2500      	movs	r5, #0
 8009bda:	42a5      	cmp	r5, r4
 8009bdc:	d105      	bne.n	8009bea <__libc_init_array+0x2e>
 8009bde:	bd70      	pop	{r4, r5, r6, pc}
 8009be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009be4:	4798      	blx	r3
 8009be6:	3501      	adds	r5, #1
 8009be8:	e7ee      	b.n	8009bc8 <__libc_init_array+0xc>
 8009bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bee:	4798      	blx	r3
 8009bf0:	3501      	adds	r5, #1
 8009bf2:	e7f2      	b.n	8009bda <__libc_init_array+0x1e>
 8009bf4:	08009e60 	.word	0x08009e60
 8009bf8:	08009e60 	.word	0x08009e60
 8009bfc:	08009e60 	.word	0x08009e60
 8009c00:	08009e68 	.word	0x08009e68

08009c04 <malloc>:
 8009c04:	4b02      	ldr	r3, [pc, #8]	; (8009c10 <malloc+0xc>)
 8009c06:	4601      	mov	r1, r0
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	f000 b86d 	b.w	8009ce8 <_malloc_r>
 8009c0e:	bf00      	nop
 8009c10:	20000190 	.word	0x20000190

08009c14 <free>:
 8009c14:	4b02      	ldr	r3, [pc, #8]	; (8009c20 <free+0xc>)
 8009c16:	4601      	mov	r1, r0
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	f000 b817 	b.w	8009c4c <_free_r>
 8009c1e:	bf00      	nop
 8009c20:	20000190 	.word	0x20000190

08009c24 <memcpy>:
 8009c24:	b510      	push	{r4, lr}
 8009c26:	1e43      	subs	r3, r0, #1
 8009c28:	440a      	add	r2, r1
 8009c2a:	4291      	cmp	r1, r2
 8009c2c:	d100      	bne.n	8009c30 <memcpy+0xc>
 8009c2e:	bd10      	pop	{r4, pc}
 8009c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c38:	e7f7      	b.n	8009c2a <memcpy+0x6>

08009c3a <memset>:
 8009c3a:	4402      	add	r2, r0
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d100      	bne.n	8009c44 <memset+0xa>
 8009c42:	4770      	bx	lr
 8009c44:	f803 1b01 	strb.w	r1, [r3], #1
 8009c48:	e7f9      	b.n	8009c3e <memset+0x4>
	...

08009c4c <_free_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	4605      	mov	r5, r0
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d045      	beq.n	8009ce0 <_free_r+0x94>
 8009c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c58:	1f0c      	subs	r4, r1, #4
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	bfb8      	it	lt
 8009c5e:	18e4      	addlt	r4, r4, r3
 8009c60:	f000 f8ac 	bl	8009dbc <__malloc_lock>
 8009c64:	4a1f      	ldr	r2, [pc, #124]	; (8009ce4 <_free_r+0x98>)
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	4610      	mov	r0, r2
 8009c6a:	b933      	cbnz	r3, 8009c7a <_free_r+0x2e>
 8009c6c:	6063      	str	r3, [r4, #4]
 8009c6e:	6014      	str	r4, [r2, #0]
 8009c70:	4628      	mov	r0, r5
 8009c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c76:	f000 b8a2 	b.w	8009dbe <__malloc_unlock>
 8009c7a:	42a3      	cmp	r3, r4
 8009c7c:	d90c      	bls.n	8009c98 <_free_r+0x4c>
 8009c7e:	6821      	ldr	r1, [r4, #0]
 8009c80:	1862      	adds	r2, r4, r1
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bf04      	itt	eq
 8009c86:	681a      	ldreq	r2, [r3, #0]
 8009c88:	685b      	ldreq	r3, [r3, #4]
 8009c8a:	6063      	str	r3, [r4, #4]
 8009c8c:	bf04      	itt	eq
 8009c8e:	1852      	addeq	r2, r2, r1
 8009c90:	6022      	streq	r2, [r4, #0]
 8009c92:	6004      	str	r4, [r0, #0]
 8009c94:	e7ec      	b.n	8009c70 <_free_r+0x24>
 8009c96:	4613      	mov	r3, r2
 8009c98:	685a      	ldr	r2, [r3, #4]
 8009c9a:	b10a      	cbz	r2, 8009ca0 <_free_r+0x54>
 8009c9c:	42a2      	cmp	r2, r4
 8009c9e:	d9fa      	bls.n	8009c96 <_free_r+0x4a>
 8009ca0:	6819      	ldr	r1, [r3, #0]
 8009ca2:	1858      	adds	r0, r3, r1
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d10b      	bne.n	8009cc0 <_free_r+0x74>
 8009ca8:	6820      	ldr	r0, [r4, #0]
 8009caa:	4401      	add	r1, r0
 8009cac:	1858      	adds	r0, r3, r1
 8009cae:	4282      	cmp	r2, r0
 8009cb0:	6019      	str	r1, [r3, #0]
 8009cb2:	d1dd      	bne.n	8009c70 <_free_r+0x24>
 8009cb4:	6810      	ldr	r0, [r2, #0]
 8009cb6:	6852      	ldr	r2, [r2, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	4401      	add	r1, r0
 8009cbc:	6019      	str	r1, [r3, #0]
 8009cbe:	e7d7      	b.n	8009c70 <_free_r+0x24>
 8009cc0:	d902      	bls.n	8009cc8 <_free_r+0x7c>
 8009cc2:	230c      	movs	r3, #12
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	e7d3      	b.n	8009c70 <_free_r+0x24>
 8009cc8:	6820      	ldr	r0, [r4, #0]
 8009cca:	1821      	adds	r1, r4, r0
 8009ccc:	428a      	cmp	r2, r1
 8009cce:	bf04      	itt	eq
 8009cd0:	6811      	ldreq	r1, [r2, #0]
 8009cd2:	6852      	ldreq	r2, [r2, #4]
 8009cd4:	6062      	str	r2, [r4, #4]
 8009cd6:	bf04      	itt	eq
 8009cd8:	1809      	addeq	r1, r1, r0
 8009cda:	6021      	streq	r1, [r4, #0]
 8009cdc:	605c      	str	r4, [r3, #4]
 8009cde:	e7c7      	b.n	8009c70 <_free_r+0x24>
 8009ce0:	bd38      	pop	{r3, r4, r5, pc}
 8009ce2:	bf00      	nop
 8009ce4:	200005a8 	.word	0x200005a8

08009ce8 <_malloc_r>:
 8009ce8:	b570      	push	{r4, r5, r6, lr}
 8009cea:	1ccd      	adds	r5, r1, #3
 8009cec:	f025 0503 	bic.w	r5, r5, #3
 8009cf0:	3508      	adds	r5, #8
 8009cf2:	2d0c      	cmp	r5, #12
 8009cf4:	bf38      	it	cc
 8009cf6:	250c      	movcc	r5, #12
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	db01      	blt.n	8009d02 <_malloc_r+0x1a>
 8009cfe:	42a9      	cmp	r1, r5
 8009d00:	d903      	bls.n	8009d0a <_malloc_r+0x22>
 8009d02:	230c      	movs	r3, #12
 8009d04:	6033      	str	r3, [r6, #0]
 8009d06:	2000      	movs	r0, #0
 8009d08:	bd70      	pop	{r4, r5, r6, pc}
 8009d0a:	f000 f857 	bl	8009dbc <__malloc_lock>
 8009d0e:	4a21      	ldr	r2, [pc, #132]	; (8009d94 <_malloc_r+0xac>)
 8009d10:	6814      	ldr	r4, [r2, #0]
 8009d12:	4621      	mov	r1, r4
 8009d14:	b991      	cbnz	r1, 8009d3c <_malloc_r+0x54>
 8009d16:	4c20      	ldr	r4, [pc, #128]	; (8009d98 <_malloc_r+0xb0>)
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	b91b      	cbnz	r3, 8009d24 <_malloc_r+0x3c>
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f000 f83d 	bl	8009d9c <_sbrk_r>
 8009d22:	6020      	str	r0, [r4, #0]
 8009d24:	4629      	mov	r1, r5
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 f838 	bl	8009d9c <_sbrk_r>
 8009d2c:	1c43      	adds	r3, r0, #1
 8009d2e:	d124      	bne.n	8009d7a <_malloc_r+0x92>
 8009d30:	230c      	movs	r3, #12
 8009d32:	6033      	str	r3, [r6, #0]
 8009d34:	4630      	mov	r0, r6
 8009d36:	f000 f842 	bl	8009dbe <__malloc_unlock>
 8009d3a:	e7e4      	b.n	8009d06 <_malloc_r+0x1e>
 8009d3c:	680b      	ldr	r3, [r1, #0]
 8009d3e:	1b5b      	subs	r3, r3, r5
 8009d40:	d418      	bmi.n	8009d74 <_malloc_r+0x8c>
 8009d42:	2b0b      	cmp	r3, #11
 8009d44:	d90f      	bls.n	8009d66 <_malloc_r+0x7e>
 8009d46:	600b      	str	r3, [r1, #0]
 8009d48:	50cd      	str	r5, [r1, r3]
 8009d4a:	18cc      	adds	r4, r1, r3
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 f836 	bl	8009dbe <__malloc_unlock>
 8009d52:	f104 000b 	add.w	r0, r4, #11
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	f020 0007 	bic.w	r0, r0, #7
 8009d5c:	1ac3      	subs	r3, r0, r3
 8009d5e:	d0d3      	beq.n	8009d08 <_malloc_r+0x20>
 8009d60:	425a      	negs	r2, r3
 8009d62:	50e2      	str	r2, [r4, r3]
 8009d64:	e7d0      	b.n	8009d08 <_malloc_r+0x20>
 8009d66:	428c      	cmp	r4, r1
 8009d68:	684b      	ldr	r3, [r1, #4]
 8009d6a:	bf16      	itet	ne
 8009d6c:	6063      	strne	r3, [r4, #4]
 8009d6e:	6013      	streq	r3, [r2, #0]
 8009d70:	460c      	movne	r4, r1
 8009d72:	e7eb      	b.n	8009d4c <_malloc_r+0x64>
 8009d74:	460c      	mov	r4, r1
 8009d76:	6849      	ldr	r1, [r1, #4]
 8009d78:	e7cc      	b.n	8009d14 <_malloc_r+0x2c>
 8009d7a:	1cc4      	adds	r4, r0, #3
 8009d7c:	f024 0403 	bic.w	r4, r4, #3
 8009d80:	42a0      	cmp	r0, r4
 8009d82:	d005      	beq.n	8009d90 <_malloc_r+0xa8>
 8009d84:	1a21      	subs	r1, r4, r0
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 f808 	bl	8009d9c <_sbrk_r>
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d0cf      	beq.n	8009d30 <_malloc_r+0x48>
 8009d90:	6025      	str	r5, [r4, #0]
 8009d92:	e7db      	b.n	8009d4c <_malloc_r+0x64>
 8009d94:	200005a8 	.word	0x200005a8
 8009d98:	200005ac 	.word	0x200005ac

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4c06      	ldr	r4, [pc, #24]	; (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4605      	mov	r5, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	f7f6 fdd2 	bl	8000950 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20001644 	.word	0x20001644

08009dbc <__malloc_lock>:
 8009dbc:	4770      	bx	lr

08009dbe <__malloc_unlock>:
 8009dbe:	4770      	bx	lr

08009dc0 <_init>:
 8009dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc2:	bf00      	nop
 8009dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dc6:	bc08      	pop	{r3}
 8009dc8:	469e      	mov	lr, r3
 8009dca:	4770      	bx	lr

08009dcc <_fini>:
 8009dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dce:	bf00      	nop
 8009dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dd2:	bc08      	pop	{r3}
 8009dd4:	469e      	mov	lr, r3
 8009dd6:	4770      	bx	lr
