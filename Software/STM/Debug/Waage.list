
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ceb0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800d03c  0800d03c  0001d03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d170  0800d170  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800d170  0800d170  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d170  0800d170  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001180  200001f4  0800d370  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001374  0800d370  00021374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00071110  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000aaee  00000000  00000000  00091334  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c10  00000000  00000000  0009be28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001918  00000000  00000000  0009da38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028f9c  00000000  00000000  0009f350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a2be  00000000  00000000  000c82ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8d5b  00000000  00000000  000f25aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ab305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087c0  00000000  00000000  001ab380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800d024 	.word	0x0800d024

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	0800d024 	.word	0x0800d024

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2200      	movs	r2, #0
 80001e8:	701a      	strb	r2, [r3, #0]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	3324      	adds	r3, #36	; 0x24
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fbfc 	bl	80019ec <_ZN5ModelC1Ev>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	335c      	adds	r3, #92	; 0x5c
 80001f8:	4618      	mov	r0, r3
 80001fa:	f001 fb19 	bl	8001830 <_ZN8LoadCellC1Ev>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	3370      	adds	r3, #112	; 0x70
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fb14 	bl	8001830 <_ZN8LoadCellC1Ev>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3384      	adds	r3, #132	; 0x84
 800020c:	4618      	mov	r0, r3
 800020e:	f000 ffab 	bl	8001168 <_ZN8KontrastC1Ev>
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3384      	adds	r3, #132	; 0x84
 8000222:	461a      	mov	r2, r3
 8000224:	f002 ff52 	bl	80030cc <_ZN13ScreenControlC1EP5ModelP8Kontrast>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3324      	adds	r3, #36	; 0x24
 8000232:	4619      	mov	r1, r3
 8000234:	4610      	mov	r0, r2
 8000236:	f000 fdb7 	bl	8000da8 <_ZN13ButtonControlC1EP5Model>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	3324      	adds	r3, #36	; 0x24
 8000244:	4a13      	ldr	r2, [pc, #76]	; (8000294 <_ZN7AppMainC1Ev+0xb8>)
 8000246:	4619      	mov	r1, r3
 8000248:	f004 fb74 	bl	8004934 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	4a12      	ldr	r2, [pc, #72]	; (8000298 <_ZN7AppMainC1Ev+0xbc>)
 8000250:	605a      	str	r2, [r3, #4]
	lcSettings1.clkPin = CLK_L1_Pin;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2220      	movs	r2, #32
 8000256:	811a      	strh	r2, [r3, #8]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a0f      	ldr	r2, [pc, #60]	; (8000298 <_ZN7AppMainC1Ev+0xbc>)
 800025c:	60da      	str	r2, [r3, #12]
	lcSettings1.dataPin = DATA_L1_Pin;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2210      	movs	r2, #16
 8000262:	821a      	strh	r2, [r3, #16]
	lcSettings1.loadCellNr = 1;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2201      	movs	r2, #1
 8000268:	749a      	strb	r2, [r3, #18]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <_ZN7AppMainC1Ev+0xbc>)
 800026e:	615a      	str	r2, [r3, #20]
	lcSettings2.clkPin = CLK_L2_Pin;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	831a      	strh	r2, [r3, #24]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <_ZN7AppMainC1Ev+0xbc>)
 800027a:	61da      	str	r2, [r3, #28]
	lcSettings2.dataPin = DATA_L2_Pin;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2240      	movs	r2, #64	; 0x40
 8000280:	841a      	strh	r2, [r3, #32]
	lcSettings2.loadCellNr = 2;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	2202      	movs	r2, #2
 8000286:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22


}
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000340 	.word	0x20000340
 8000298:	48000400 	.word	0x48000400

0800029c <_ZN7AppMain4InitEv>:



void AppMain::Init(){
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af02      	add	r7, sp, #8
 80002a2:	6078      	str	r0, [r7, #4]
	loadCell1.InitLoadCell(&model, lcSettings1);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	466e      	mov	r6, sp
 80002b4:	f103 020c 	add.w	r2, r3, #12
 80002b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002bc:	e886 0003 	stmia.w	r6, {r0, r1}
 80002c0:	3304      	adds	r3, #4
 80002c2:	cb0c      	ldmia	r3, {r2, r3}
 80002c4:	4629      	mov	r1, r5
 80002c6:	4620      	mov	r0, r4
 80002c8:	f001 fac2 	bl	8001850 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f103 0470 	add.w	r4, r3, #112	; 0x70
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f103 0524 	add.w	r5, r3, #36	; 0x24
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	466e      	mov	r6, sp
 80002dc:	f103 021c 	add.w	r2, r3, #28
 80002e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002e4:	e886 0003 	stmia.w	r6, {r0, r1}
 80002e8:	3314      	adds	r3, #20
 80002ea:	cb0c      	ldmia	r3, {r2, r3}
 80002ec:	4629      	mov	r1, r5
 80002ee:	4620      	mov	r0, r4
 80002f0:	f001 faae 	bl	8001850 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002fc:	f004 fe94 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2110      	movs	r1, #16
 8000304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000308:	f004 fe8e 	bl	8005028 <HAL_GPIO_WritePin>
	screenControl.InitScreen();
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	3388      	adds	r3, #136	; 0x88
 8000310:	4618      	mov	r0, r3
 8000312:	f002 ff59 	bl	80031c8 <_ZN13ScreenControl10InitScreenEv>
	timeSynchroCounter = 0;
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	2200      	movs	r2, #0
 800031a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2108      	movs	r1, #8
 8000322:	4811      	ldr	r0, [pc, #68]	; (8000368 <_ZN7AppMain4InitEv+0xcc>)
 8000324:	f004 fe80 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000328:	20c8      	movs	r0, #200	; 0xc8
 800032a:	f004 fbbf 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2108      	movs	r1, #8
 8000332:	480d      	ldr	r0, [pc, #52]	; (8000368 <_ZN7AppMain4InitEv+0xcc>)
 8000334:	f004 fe78 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000338:	20c8      	movs	r0, #200	; 0xc8
 800033a:	f004 fbb7 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_LIGHT_GPIO_Port, LCD_LIGHT_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2108      	movs	r1, #8
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <_ZN7AppMain4InitEv+0xcc>)
 8000344:	f004 fe70 	bl	8005028 <HAL_GPIO_WritePin>
	contrast.setContrast(0x09);
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	3384      	adds	r3, #132	; 0x84
 800034c:	2109      	movs	r1, #9
 800034e:	4618      	mov	r0, r3
 8000350:	f000 ff16 	bl	8001180 <_ZN8Kontrast11setContrastEh>
	time.UpdateTime();
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	33c4      	adds	r3, #196	; 0xc4
 8000358:	4618      	mov	r0, r3
 800035a:	f004 fafe 	bl	800495a <_ZN4Time10UpdateTimeEv>
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000366:	bf00      	nop
 8000368:	48000400 	.word	0x48000400

0800036c <_ZN7AppMain5mainFEv>:


void AppMain::mainF(){
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	ed2d 8b02 	vpush	{d8}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
while(true){
	if(updateEnable)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d002      	beq.n	8000386 <_ZN7AppMain5mainFEv+0x1a>
	updateEnable = false;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
	//loadCell2.Update();
	loadCell1.Update(); //ToDo
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	335c      	adds	r3, #92	; 0x5c
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fa7a 	bl	8001884 <_ZN8LoadCell6UpdateEv>
	int32_t weight1 = (model.getLoadCell1()-model.getLoadCellOffset1()) /model.getLoadCellGradient1();
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3324      	adds	r3, #36	; 0x24
 8000394:	4618      	mov	r0, r3
 8000396:	f001 fbdb 	bl	8001b50 <_ZNK5Model12getLoadCell1Ev>
 800039a:	4604      	mov	r4, r0
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3324      	adds	r3, #36	; 0x24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fdef 	bl	8001f84 <_ZNK5Model18getLoadCellOffset1Ev>
 80003a6:	4603      	mov	r3, r0
 80003a8:	1ae3      	subs	r3, r4, r3
 80003aa:	ee07 3a90 	vmov	s15, r3
 80003ae:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	3324      	adds	r3, #36	; 0x24
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fdb0 	bl	8001f1c <_ZNK5Model20getLoadCellGradient1Ev>
 80003bc:	eeb0 7a40 	vmov.f32	s14, s0
 80003c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80003c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80003c8:	ee17 3a90 	vmov	r3, s15
 80003cc:	60fb      	str	r3, [r7, #12]
	int32_t weight2 = (model.getLoadCell2()-model.getLoadCellOffset2()) /model.getLoadCellGradient2();
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3324      	adds	r3, #36	; 0x24
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 fbd6 	bl	8001b84 <_ZNK5Model12getLoadCell2Ev>
 80003d8:	4604      	mov	r4, r0
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	3324      	adds	r3, #36	; 0x24
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fdea 	bl	8001fb8 <_ZNK5Model18getLoadCellOffset2Ev>
 80003e4:	4603      	mov	r3, r0
 80003e6:	1ae3      	subs	r3, r4, r3
 80003e8:	ee07 3a90 	vmov	s15, r3
 80003ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	3324      	adds	r3, #36	; 0x24
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fdab 	bl	8001f50 <_ZNK5Model20getLoadCellGradient2Ev>
 80003fa:	eeb0 7a40 	vmov.f32	s14, s0
 80003fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000406:	ee17 3a90 	vmov	r3, s15
 800040a:	60bb      	str	r3, [r7, #8]
	model.setWeight(weight1);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3324      	adds	r3, #36	; 0x24
 8000410:	68fa      	ldr	r2, [r7, #12]
 8000412:	b212      	sxth	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f001 fc32 	bl	8001c80 <_ZN5Model9setWeightEs>
	model.setWeight(weight1 + weight2);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	b29a      	uxth	r2, r3
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	b29b      	uxth	r3, r3
 800042a:	4413      	add	r3, r2
 800042c:	b29b      	uxth	r3, r3
 800042e:	b21b      	sxth	r3, r3
 8000430:	4619      	mov	r1, r3
 8000432:	f001 fc25 	bl	8001c80 <_ZN5Model9setWeightEs>
	screenControl.Update();
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3388      	adds	r3, #136	; 0x88
 800043a:	4618      	mov	r0, r3
 800043c:	f002 ff2e 	bl	800329c <_ZN13ScreenControl6UpdateEv>

}
 8000440:	e79a      	b.n	8000378 <_ZN7AppMain5mainFEv+0xc>

08000442 <_ZN7AppMain12ButtonUpdateEv>:


}

void AppMain::ButtonUpdate(){
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
	buttonControl.UpdateButton();
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	33b4      	adds	r3, #180	; 0xb4
 800044e:	4618      	mov	r0, r3
 8000450:	f000 fcc8 	bl	8000de4 <_ZN13ButtonControl12UpdateButtonEv>
}
 8000454:	bf00      	nop
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZN7AppMain3ClkEv>:


void AppMain::Clk(){
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]



		if(timeSynchroCounter == 1800){
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800046a:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800046e:	d107      	bne.n	8000480 <_ZN7AppMain3ClkEv+0x24>
			timeSynchroCounter++;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8000476:	1c5a      	adds	r2, r3, #1
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 800047e:	e003      	b.n	8000488 <_ZN7AppMain3ClkEv+0x2c>
		}else{
			//ToDo Time Synchro
			timeSynchroCounter = 0;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		}


		uint8_t seconds = model.getSeconds();
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3324      	adds	r3, #36	; 0x24
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fbcd 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 8000492:	4603      	mov	r3, r0
 8000494:	73fb      	strb	r3, [r7, #15]
			uint8_t minute = model.getMinute();
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3324      	adds	r3, #36	; 0x24
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fb8c 	bl	8001bb8 <_ZNK5Model9getMinuteEv>
 80004a0:	4603      	mov	r3, r0
 80004a2:	73bb      	strb	r3, [r7, #14]
			uint8_t hours = model.getHour();
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3324      	adds	r3, #36	; 0x24
 80004a8:	4618      	mov	r0, r3
 80004aa:	f001 fb34 	bl	8001b16 <_ZNK5Model7getHourEv>
 80004ae:	4603      	mov	r3, r0
 80004b0:	737b      	strb	r3, [r7, #13]
			uint8_t day = model.getDay();
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3324      	adds	r3, #36	; 0x24
 80004b6:	4618      	mov	r0, r3
 80004b8:	f001 fb10 	bl	8001adc <_ZNK5Model6getDayEv>
 80004bc:	4603      	mov	r3, r0
 80004be:	733b      	strb	r3, [r7, #12]
			uint8_t month = model.getMonth();
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3324      	adds	r3, #36	; 0x24
 80004c4:	4618      	mov	r0, r3
 80004c6:	f001 fb94 	bl	8001bf2 <_ZNK5Model8getMonthEv>
 80004ca:	4603      	mov	r3, r0
 80004cc:	72fb      	strb	r3, [r7, #11]
			uint8_t year = model.getYear();
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	3324      	adds	r3, #36	; 0x24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fbe3 	bl	8001c9e <_ZNK5Model7getYearEv>
 80004d8:	4603      	mov	r3, r0
 80004da:	72bb      	strb	r3, [r7, #10]
			if(model.getSeconds() < 59){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3324      	adds	r3, #36	; 0x24
 80004e0:	4618      	mov	r0, r3
 80004e2:	f001 fba3 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b3a      	cmp	r3, #58	; 0x3a
 80004ea:	bf94      	ite	ls
 80004ec:	2301      	movls	r3, #1
 80004ee:	2300      	movhi	r3, #0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d003      	beq.n	80004fe <_ZN7AppMain3ClkEv+0xa2>
				seconds++;
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	3301      	adds	r3, #1
 80004fa:	73fb      	strb	r3, [r7, #15]
 80004fc:	e068      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
			}else{
				seconds = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	73fb      	strb	r3, [r7, #15]
				if(minute == 59){
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	2b3b      	cmp	r3, #59	; 0x3b
 8000506:	d160      	bne.n	80005ca <_ZN7AppMain3ClkEv+0x16e>
					minute = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	73bb      	strb	r3, [r7, #14]
					if(hours == 23){
 800050c:	7b7b      	ldrb	r3, [r7, #13]
 800050e:	2b17      	cmp	r3, #23
 8000510:	d157      	bne.n	80005c2 <_ZN7AppMain3ClkEv+0x166>
						hours = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	737b      	strb	r3, [r7, #13]
						switch(month){
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	3b01      	subs	r3, #1
 800051a:	2b0b      	cmp	r3, #11
 800051c:	d858      	bhi.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <_ZN7AppMain3ClkEv+0xc8>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	08000555 	.word	0x08000555
 8000528:	080005a7 	.word	0x080005a7
 800052c:	08000555 	.word	0x08000555
 8000530:	0800058d 	.word	0x0800058d
 8000534:	08000555 	.word	0x08000555
 8000538:	0800058d 	.word	0x0800058d
 800053c:	08000555 	.word	0x08000555
 8000540:	08000555 	.word	0x08000555
 8000544:	0800058d 	.word	0x0800058d
 8000548:	08000555 	.word	0x08000555
 800054c:	0800058d 	.word	0x0800058d
 8000550:	0800056f 	.word	0x0800056f
								case 3:
								case 5:
								case 7:
								case 8:
								case 10:
									if(day == 31 ){
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	2b1f      	cmp	r3, #31
 8000558:	d105      	bne.n	8000566 <_ZN7AppMain3ClkEv+0x10a>
										day = 1;
 800055a:	2301      	movs	r3, #1
 800055c:	733b      	strb	r3, [r7, #12]
										month++;
 800055e:	7afb      	ldrb	r3, [r7, #11]
 8000560:	3301      	adds	r3, #1
 8000562:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 8000564:	e034      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
										day++;
 8000566:	7b3b      	ldrb	r3, [r7, #12]
 8000568:	3301      	adds	r3, #1
 800056a:	733b      	strb	r3, [r7, #12]
									break;
 800056c:	e030      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
								case 12:
									if(day == 31 ){
 800056e:	7b3b      	ldrb	r3, [r7, #12]
 8000570:	2b1f      	cmp	r3, #31
 8000572:	d107      	bne.n	8000584 <_ZN7AppMain3ClkEv+0x128>
										day = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	733b      	strb	r3, [r7, #12]
										month = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	72fb      	strb	r3, [r7, #11]
										year++;
 800057c:	7abb      	ldrb	r3, [r7, #10]
 800057e:	3301      	adds	r3, #1
 8000580:	72bb      	strb	r3, [r7, #10]
									}else{
										day++;
									}
									break;
 8000582:	e025      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
										day++;
 8000584:	7b3b      	ldrb	r3, [r7, #12]
 8000586:	3301      	adds	r3, #1
 8000588:	733b      	strb	r3, [r7, #12]
									break;
 800058a:	e021      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
								case 4:
								case 6:
								case 9:
								case 11:
									if(day == 30 ){
 800058c:	7b3b      	ldrb	r3, [r7, #12]
 800058e:	2b1e      	cmp	r3, #30
 8000590:	d105      	bne.n	800059e <_ZN7AppMain3ClkEv+0x142>
										day = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	733b      	strb	r3, [r7, #12]
										month++;
 8000596:	7afb      	ldrb	r3, [r7, #11]
 8000598:	3301      	adds	r3, #1
 800059a:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 800059c:	e018      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
										day++;
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	3301      	adds	r3, #1
 80005a2:	733b      	strb	r3, [r7, #12]
									break;
 80005a4:	e014      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
								case 2:
									if(day == 28 ){
 80005a6:	7b3b      	ldrb	r3, [r7, #12]
 80005a8:	2b1c      	cmp	r3, #28
 80005aa:	d105      	bne.n	80005b8 <_ZN7AppMain3ClkEv+0x15c>
										day= 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	733b      	strb	r3, [r7, #12]
										month++;
 80005b0:	7afb      	ldrb	r3, [r7, #11]
 80005b2:	3301      	adds	r3, #1
 80005b4:	72fb      	strb	r3, [r7, #11]
									}else{
										day++;
									}
									break;
 80005b6:	e00b      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
										day++;
 80005b8:	7b3b      	ldrb	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	733b      	strb	r3, [r7, #12]
									break;
 80005be:	bf00      	nop
 80005c0:	e006      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
								}
					}else{
						hours++;
 80005c2:	7b7b      	ldrb	r3, [r7, #13]
 80005c4:	3301      	adds	r3, #1
 80005c6:	737b      	strb	r3, [r7, #13]
 80005c8:	e002      	b.n	80005d0 <_ZN7AppMain3ClkEv+0x174>
					}
				}else{
					minute++;
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	3301      	adds	r3, #1
 80005ce:	73bb      	strb	r3, [r7, #14]
				}
			}

		if(screenControl.getCurrentScreen() != Model::E_TIME_SETTINGS && screenControl.getCurrentScreen() != Model::E_DATE_SETTINGS){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3388      	adds	r3, #136	; 0x88
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fecd 	bl	8003374 <_ZN13ScreenControl16getCurrentScreenEv>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d009      	beq.n	80005f4 <_ZN7AppMain3ClkEv+0x198>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	3388      	adds	r3, #136	; 0x88
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fec5 	bl	8003374 <_ZN13ScreenControl16getCurrentScreenEv>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d001      	beq.n	80005f4 <_ZN7AppMain3ClkEv+0x198>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e000      	b.n	80005f6 <_ZN7AppMain3ClkEv+0x19a>
 80005f4:	2300      	movs	r3, #0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d029      	beq.n	800064e <_ZN7AppMain3ClkEv+0x1f2>
			model.setSeconds(seconds);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3324      	adds	r3, #36	; 0x24
 80005fe:	7bfa      	ldrb	r2, [r7, #15]
 8000600:	4611      	mov	r1, r2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fb1f 	bl	8001c46 <_ZN5Model10setSecondsEh>
			model.setMinute(minute);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3324      	adds	r3, #36	; 0x24
 800060c:	7bba      	ldrb	r2, [r7, #14]
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fade 	bl	8001bd2 <_ZN5Model9setMinuteEh>
			model.setHour(hours);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3324      	adds	r3, #36	; 0x24
 800061a:	7b7a      	ldrb	r2, [r7, #13]
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fa86 	bl	8001b30 <_ZN5Model7setHourEh>
			model.setDay(day);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3324      	adds	r3, #36	; 0x24
 8000628:	7b3a      	ldrb	r2, [r7, #12]
 800062a:	4611      	mov	r1, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa62 	bl	8001af6 <_ZN5Model6setDayEh>
			model.setMonth(month);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	3324      	adds	r3, #36	; 0x24
 8000636:	7afa      	ldrb	r2, [r7, #11]
 8000638:	4611      	mov	r1, r2
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fae6 	bl	8001c0c <_ZN5Model8setMonthEh>
			model.setYear(year);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3324      	adds	r3, #36	; 0x24
 8000644:	7aba      	ldrb	r2, [r7, #10]
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fb35 	bl	8001cb8 <_ZN5Model7setYearEh>
		}
}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop

08000658 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b56      	ldr	r3, [pc, #344]	; (80007c8 <MX_GPIO_Init+0x170>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	4a55      	ldr	r2, [pc, #340]	; (80007c8 <MX_GPIO_Init+0x170>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800067a:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <MX_GPIO_Init+0x170>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <MX_GPIO_Init+0x170>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	4a4f      	ldr	r2, [pc, #316]	; (80007c8 <MX_GPIO_Init+0x170>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000692:	4b4d      	ldr	r3, [pc, #308]	; (80007c8 <MX_GPIO_Init+0x170>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069e:	4b4a      	ldr	r3, [pc, #296]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a49      	ldr	r2, [pc, #292]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b44      	ldr	r3, [pc, #272]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	4a43      	ldr	r2, [pc, #268]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c2:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <MX_GPIO_Init+0x170>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80006d4:	483d      	ldr	r0, [pc, #244]	; (80007cc <MX_GPIO_Init+0x174>)
 80006d6:	f004 fca7 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 80006da:	2200      	movs	r2, #0
 80006dc:	f248 0157 	movw	r1, #32855	; 0x8057
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f004 fca0 	bl	8005028 <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	21a9      	movs	r1, #169	; 0xa9
 80006ec:	4838      	ldr	r0, [pc, #224]	; (80007d0 <MX_GPIO_Init+0x178>)
 80006ee:	f004 fc9b 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4837      	ldr	r0, [pc, #220]	; (80007d4 <MX_GPIO_Init+0x17c>)
 80006f8:	f004 fc96 	bl	8005028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 80006fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	482d      	ldr	r0, [pc, #180]	; (80007cc <MX_GPIO_Init+0x174>)
 8000716:	f004 fafd 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 800071a:	f248 0357 	movw	r3, #32855	; 0x8057
 800071e:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f004 faed 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 800073a:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000744:	2302      	movs	r3, #2
 8000746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f004 fadf 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 8000756:	23a9      	movs	r3, #169	; 0xa9
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x178>)
 800076e:	f004 fad1 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 8000772:	2302      	movs	r3, #2
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077a:	2302      	movs	r3, #2
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x178>)
 8000786:	f004 fac5 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 800078a:	2350      	movs	r3, #80	; 0x50
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x178>)
 800079e:	f004 fab9 	bl	8004d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 80007a2:	2308      	movs	r3, #8
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x17c>)
 80007ba:	f004 faab 	bl	8004d14 <HAL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	48000800 	.word	0x48000800
 80007d0:	48000400 	.word	0x48000400
 80007d4:	48001c00 	.word	0x48001c00

080007d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80007dc:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_I2C1_Init+0x74>)
 80007de:	4a1c      	ldr	r2, [pc, #112]	; (8000850 <MX_I2C1_Init+0x78>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909EEE;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_I2C1_Init+0x74>)
 80007e4:	4a1b      	ldr	r2, [pc, #108]	; (8000854 <MX_I2C1_Init+0x7c>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_I2C1_Init+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ee:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_I2C1_Init+0x74>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_I2C1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fa:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_I2C1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_I2C1_Init+0x74>)
 8000814:	f004 fc20 	bl	8005058 <HAL_I2C_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800081e:	f000 f937 	bl	8000a90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLED) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MX_I2C1_Init+0x74>)
 8000826:	f004 ff0f 	bl	8005648 <HAL_I2CEx_ConfigAnalogFilter>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000830:	f000 f92e 	bl	8000a90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000834:	2100      	movs	r1, #0
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_I2C1_Init+0x74>)
 8000838:	f004 ff51 	bl	80056de <HAL_I2CEx_ConfigDigitalFilter>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000842:	f000 f925 	bl	8000a90 <Error_Handler>
  }

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000340 	.word	0x20000340
 8000850:	40005400 	.word	0x40005400
 8000854:	10909eee 	.word	0x10909eee

08000858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <HAL_I2C_MspInit+0x80>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d129      	bne.n	80008ce <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <HAL_I2C_MspInit+0x84>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_I2C_MspInit+0x84>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000898:	2312      	movs	r3, #18
 800089a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a0:	2303      	movs	r3, #3
 80008a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a4:	2304      	movs	r3, #4
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f004 fa2f 	bl	8004d14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_I2C_MspInit+0x84>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	; (80008dc <HAL_I2C_MspInit+0x84>)
 80008bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008c0:	6593      	str	r3, [r2, #88]	; 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <HAL_I2C_MspInit+0x84>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40005400 	.word	0x40005400
 80008dc:	40021000 	.word	0x40021000

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e6:	f004 f86c 	bl	80049c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ea:	f000 f823 	bl	8000934 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ee:	f7ff feb3 	bl	8000658 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008f2:	f7ff ff71 	bl	80007d8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80008f6:	f00b fbe7 	bl	800c0c8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80008fa:	f000 f9e3 	bl	8000cc4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <main+0x48>)
 8000900:	f7ff ffaa 	bl	8000858 <HAL_I2C_MspInit>
  HAL_TIM_Base_MspInit(&htim2);
 8000904:	4809      	ldr	r0, [pc, #36]	; (800092c <main+0x4c>)
 8000906:	f000 fa2b 	bl	8000d60 <HAL_TIM_Base_MspInit>
  appMain.Init();
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <main+0x50>)
 800090c:	f7ff fcc6 	bl	800029c <_ZN7AppMain4InitEv>
  HAL_TIM_Base_Start_IT(&htim2);
 8000910:	4806      	ldr	r0, [pc, #24]	; (800092c <main+0x4c>)
 8000912:	f007 fb55 	bl	8007fc0 <HAL_TIM_Base_Start_IT>

	appMain.mainF();
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <main+0x50>)
 8000918:	f7ff fd28 	bl	800036c <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */
uint8_t addr = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	71fb      	strb	r3, [r7, #7]
HAL_StatusTypeDef test;
uint8_t txData[1];
txData[0] = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	713b      	strb	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000924:	e7fe      	b.n	8000924 <main+0x44>
 8000926:	bf00      	nop
 8000928:	20000340 	.word	0x20000340
 800092c:	2000038c 	.word	0x2000038c
 8000930:	20000210 	.word	0x20000210

08000934 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b0a4      	sub	sp, #144	; 0x90
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800093e:	2244      	movs	r2, #68	; 0x44
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f00c fa67 	bl	800ce16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2234      	movs	r2, #52	; 0x34
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00c fa59 	bl	800ce16 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000968:	f006 faa8 	bl	8006ebc <HAL_PWREx_ControlVoltageScaling>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf14      	ite	ne
 8000972:	2301      	movne	r3, #1
 8000974:	2300      	moveq	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 800097c:	f000 f888 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000980:	2312      	movs	r3, #18
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000988:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098a:	2340      	movs	r3, #64	; 0x40
 800098c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800098e:	2301      	movs	r3, #1
 8000990:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000996:	23b0      	movs	r3, #176	; 0xb0
 8000998:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800099e:	2302      	movs	r3, #2
 80009a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009a8:	230a      	movs	r3, #10
 80009aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ae:	2302      	movs	r3, #2
 80009b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fae2 	bl	8006f88 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf14      	ite	ne
 80009ca:	2301      	movne	r3, #1
 80009cc:	2300      	moveq	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 80009d4:	f000 f85c 	bl	8000a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	230f      	movs	r3, #15
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f0:	2104      	movs	r1, #4
 80009f2:	4618      	mov	r0, r3
 80009f4:	f006 ff2e 	bl	8007854 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bf14      	ite	ne
 80009fe:	2301      	movne	r3, #1
 8000a00:	2300      	moveq	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000a08:	f000 f842 	bl	8000a90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000a0c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000a10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000a16:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f007 f8f0 	bl	8007c04 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000a34:	f000 f82c 	bl	8000a90 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3790      	adds	r7, #144	; 0x90
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

uint8_t timeCounter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	/*IO_COM Synchronisationstimer*/
	if(htim->Instance == TIM2){
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a50:	d116      	bne.n	8000a80 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timeCounter == 99){
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b63      	cmp	r3, #99	; 0x63
 8000a58:	d106      	bne.n	8000a68 <HAL_TIM_PeriodElapsedCallback+0x28>
			appMain.Clk();
 8000a5a:	480c      	ldr	r0, [pc, #48]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a5c:	f7ff fcfe 	bl	800045c <_ZN7AppMain3ClkEv>
			timeCounter = 0;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	e005      	b.n	8000a74 <HAL_TIM_PeriodElapsedCallback+0x34>
		}else{
			timeCounter++;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000a72:	701a      	strb	r2, [r3, #0]
		}
		appMain.ButtonUpdate();
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a76:	f7ff fce4 	bl	8000442 <_ZN7AppMain12ButtonUpdateEv>
		appMain.updateEnable = true;
 8000a7a:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]

	}
}
 8000a80:	bf00      	nop
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200002e0 	.word	0x200002e0
 8000a8c:	20000210 	.word	0x20000210

08000a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <_Z41__static_initialization_and_destruction_0ii>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d107      	bne.n	8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d102      	bne.n	8000ac0 <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000abc:	f7ff fb8e 	bl	80001dc <_ZN7AppMainC1Ev>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000210 	.word	0x20000210

08000acc <_GLOBAL__sub_I_appMain>:
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f7ff ffe3 	bl	8000aa0 <_Z41__static_initialization_and_destruction_0ii>
 8000ada:	bd80      	pop	{r7, pc}

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_MspInit+0x44>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6613      	str	r3, [r2, #96]	; 0x60
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f003 ff78 	bl	8004a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM2_IRQHandler+0x10>)
 8000b86:	f007 fa6f 	bl	8008068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000038c 	.word	0x2000038c

08000b94 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <USB_IRQHandler+0x10>)
 8000b9a:	f004 ff20 	bl	80059de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000107c 	.word	0x2000107c

08000ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	return 1;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_kill>:

int _kill(int pid, int sig)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bc2:	f00c f8e3 	bl	800cd8c <__errno>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	2316      	movs	r3, #22
 8000bca:	6013      	str	r3, [r2, #0]
	return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <_exit>:

void _exit (int status)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe7 	bl	8000bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bea:	e7fe      	b.n	8000bea <_exit+0x12>

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f00c f8b6 	bl	800cd8c <__errno>
 8000c20:	4602      	mov	r2, r0
 8000c22:	230c      	movs	r3, #12
 8000c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000a000 	.word	0x2000a000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	200002e4 	.word	0x200002e4
 8000c54:	20001378 	.word	0x20001378

08000c58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <SystemInit+0x64>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c62:	4a16      	ldr	r2, [pc, #88]	; (8000cbc <SystemInit+0x64>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <SystemInit+0x68>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a13      	ldr	r2, [pc, #76]	; (8000cc0 <SystemInit+0x68>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <SystemInit+0x68>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <SystemInit+0x68>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <SystemInit+0x68>)
 8000c84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <SystemInit+0x68>)
 8000c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <SystemInit+0x68>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <SystemInit+0x68>)
 8000c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <SystemInit+0x68>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x64>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cca:	f107 0310 	add.w	r3, r7, #16
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ce8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000cf8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000cfc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0a:	4814      	ldr	r0, [pc, #80]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000d0c:	f007 f900 	bl	8007f10 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d16:	f7ff febb 	bl	8000a90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000d28:	f007 fabd 	bl	80082a6 <HAL_TIM_ConfigClockSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d32:	f7ff fead 	bl	8000a90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d36:	2320      	movs	r3, #32
 8000d38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_TIM2_Init+0x98>)
 8000d44:	f007 fc8e 	bl	8008664 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d4e:	f7ff fe9f 	bl	8000a90 <Error_Handler>
  }

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000038c 	.word	0x2000038c

08000d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f003 ff89 	bl	8004ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	201c      	movs	r0, #28
 8000d96:	f003 ffa2 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	60da      	str	r2, [r3, #12]
}
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000dec:	2108      	movs	r1, #8
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f004 f901 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	2301      	movne	r3, #1
 8000dfe:	2300      	moveq	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d005      	beq.n	8000e12 <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d90d      	bls.n	8000e36 <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	2b63      	cmp	r3, #99	; 0x63
 8000e20:	d809      	bhi.n	8000e36 <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8000e22:	2108      	movs	r1, #8
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f004 f8e6 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d101      	bne.n	8000e36 <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8000e36:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2101      	movs	r1, #1
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 ff72 	bl	8001d2c <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	795b      	ldrb	r3, [r3, #5]
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d90f      	bls.n	8000e76 <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	f083 0301 	eor.w	r3, r3, #1
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 ff41 	bl	8001cf2 <_ZN5Model9setT1LongEb>
		T1last = true;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8000e76:	2108      	movs	r1, #8
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f004 f8bc 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf0c      	ite	eq
 8000e86:	2301      	moveq	r3, #1
 8000e88:	2300      	movne	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 8000e9c:	2120      	movs	r1, #32
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f004 f8a9 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf14      	ite	ne
 8000eac:	2301      	movne	r3, #1
 8000eae:	2300      	moveq	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d005      	beq.n	8000ec2 <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	799b      	ldrb	r3, [r3, #6]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d90d      	bls.n	8000ee6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	799b      	ldrb	r3, [r3, #6]
 8000ece:	2b63      	cmp	r3, #99	; 0x63
 8000ed0:	d809      	bhi.n	8000ee6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 8000ed2:	2120      	movs	r1, #32
 8000ed4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed8:	f004 f88e 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <_ZN13ButtonControl12UpdateButtonEv+0x102>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 8000ee6:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 ff54 	bl	8001da0 <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	799b      	ldrb	r3, [r3, #6]
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d90f      	bls.n	8000f26 <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	785b      	ldrb	r3, [r3, #1]
 8000f0a:	f083 0301 	eor.w	r3, r3, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d008      	beq.n	8000f26 <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 ff23 	bl	8001d66 <_ZN5Model9setT2LongEb>
		T2last = true;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8000f26:	2120      	movs	r1, #32
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f004 f864 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf0c      	ite	eq
 8000f36:	2301      	moveq	r3, #1
 8000f38:	2300      	movne	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f004 f851 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf14      	ite	ne
 8000f5c:	2301      	movne	r3, #1
 8000f5e:	2300      	moveq	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	79db      	ldrb	r3, [r3, #7]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d90d      	bls.n	8000f96 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	79db      	ldrb	r3, [r3, #7]
 8000f7e:	2b63      	cmp	r3, #99	; 0x63
 8000f80:	d809      	bhi.n	8000f96 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f004 f836 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8000f96:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d008      	beq.n	8000fae <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff36 	bl	8001e14 <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	79db      	ldrb	r3, [r3, #7]
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d90f      	bls.n	8000fd6 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	789b      	ldrb	r3, [r3, #2]
 8000fba:	f083 0301 	eor.w	r3, r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d008      	beq.n	8000fd6 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 ff05 	bl	8001dda <_ZN5Model9setT3LongEb>
		T3last = true;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f004 f80c 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	bf0c      	ite	eq
 8000fe6:	2301      	moveq	r3, #1
 8000fe8:	2300      	movne	r3, #0
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4859      	ldr	r0, [pc, #356]	; (8001164 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001000:	f003 fffa 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf14      	ite	ne
 800100a:	2301      	movne	r3, #1
 800100c:	2300      	moveq	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7a1b      	ldrb	r3, [r3, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	b2da      	uxtb	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 8001024:	2b02      	cmp	r3, #2
 8001026:	d90c      	bls.n	8001042 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7a1b      	ldrb	r3, [r3, #8]
 800102c:	2b63      	cmp	r3, #99	; 0x63
 800102e:	d808      	bhi.n	8001042 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 8001030:	2102      	movs	r1, #2
 8001032:	484c      	ldr	r0, [pc, #304]	; (8001164 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001034:	f003 ffe0 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <_ZN13ButtonControl12UpdateButtonEv+0x260>
 8001042:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2101      	movs	r1, #1
 800104e:	4618      	mov	r0, r3
 8001050:	f000 ff1a 	bl	8001e88 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a1b      	ldrb	r3, [r3, #8]
 800105e:	2b64      	cmp	r3, #100	; 0x64
 8001060:	d90f      	bls.n	8001082 <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	78db      	ldrb	r3, [r3, #3]
 8001066:	f083 0301 	eor.w	r3, r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2101      	movs	r1, #1
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fee9 	bl	8001e4e <_ZN5Model9setT4LongEb>
		T4last = true;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2201      	movs	r2, #1
 8001080:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 8001082:	2102      	movs	r1, #2
 8001084:	4837      	ldr	r0, [pc, #220]	; (8001164 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8001086:	f003 ffb7 	bl	8004ff8 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 80010a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ae:	f003 ffa3 	bl	8004ff8 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bf14      	ite	ne
 80010b8:	2301      	movne	r3, #1
 80010ba:	2300      	moveq	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7a5b      	ldrb	r3, [r3, #9]
 80010c6:	3301      	adds	r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d90e      	bls.n	80010f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7a5b      	ldrb	r3, [r3, #9]
 80010da:	2b63      	cmp	r3, #99	; 0x63
 80010dc:	d80a      	bhi.n	80010f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e6:	f003 ff87 	bl	8004ff8 <HAL_GPIO_ReadPin>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <_ZN13ButtonControl12UpdateButtonEv+0x310>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <_ZN13ButtonControl12UpdateButtonEv+0x312>
 80010f4:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d008      	beq.n	800110c <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f000 fefb 	bl	8001efc <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7a5b      	ldrb	r3, [r3, #9]
 8001110:	2b64      	cmp	r3, #100	; 0x64
 8001112:	d90f      	bls.n	8001134 <_ZN13ButtonControl12UpdateButtonEv+0x350>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	791b      	ldrb	r3, [r3, #4]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f000 feca 	bl	8001ec2 <_ZN5Model9setT5LongEb>
		T5last = true;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 8001134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113c:	f003 ff5c 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	bf0c      	ite	eq
 8001146:	2301      	moveq	r3, #1
 8001148:	2300      	movne	r3, #0
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	725a      	strb	r2, [r3, #9]
	}



}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	48000400 	.word	0x48000400

08001168 <_ZN8KontrastC1Ev>:
#include "Kontrast.h"
#include "i2c.h"



Kontrast::Kontrast() {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub

}
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_ZN8Kontrast11setContrastEh>:

void Kontrast::setContrast(uint8_t data) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
	uint8_t txData[2];
	txData[0] = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	733b      	strb	r3, [r7, #12]
	txData[1] = data;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	737b      	strb	r3, [r7, #13]

 HAL_I2C_Master_Transmit(&hi2c1,0x2E<<1, (uint8_t*)txData,2,1000);
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2302      	movs	r3, #2
 80011a0:	215c      	movs	r1, #92	; 0x5c
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <_ZN8Kontrast11setContrastEh+0x30>)
 80011a4:	f003 ffe8 	bl	8005178 <HAL_I2C_Master_Transmit>

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000340 	.word	0x20000340

080011b4 <_ZN3LCDC1Ev>:
#include "main.h"
using namespace std;



LCD::LCD() {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

}
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

	string s;
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4618      	mov	r0, r3
 80011da:	f00b fd48 	bl	800cc6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2102      	movs	r1, #2
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f003 ff1f 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2104      	movs	r1, #4
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 ff19 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2108      	movs	r1, #8
 80011fa:	4824      	ldr	r0, [pc, #144]	; (800128c <_ZN3LCD7InitLCDEv+0xc0>)
 80011fc:	f003 ff14 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120a:	f003 ff0d 	bl	8005028 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001214:	481e      	ldr	r0, [pc, #120]	; (8001290 <_ZN3LCD7InitLCDEv+0xc4>)
 8001216:	f003 ff07 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001220:	481b      	ldr	r0, [pc, #108]	; (8001290 <_ZN3LCD7InitLCDEv+0xc4>)
 8001222:	f003 ff01 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2101      	movs	r1, #1
 800122a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122e:	f003 fefb 	bl	8005028 <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 8001232:	2130      	movs	r1, #48	; 0x30
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f995 	bl	8001564 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 800123a:	2130      	movs	r1, #48	; 0x30
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f991 	bl	8001564 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 8001242:	2130      	movs	r1, #48	; 0x30
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f98d 	bl	8001564 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x20);
 800124a:	2120      	movs	r1, #32
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f989 	bl	8001564 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommand(0x28);
 8001252:	2128      	movs	r1, #40	; 0x28
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f9cf 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x10); //Set cursor
 800125a:	2110      	movs	r1, #16
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f9cb 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 8001262:	210f      	movs	r1, #15
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f9c7 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x06);
 800126a:	2106      	movs	r1, #6
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f9c3 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x01);
 8001272:	2101      	movs	r1, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 f9bf 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	string s;
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f00b fcfc 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8001284:	bf00      	nop
 8001286:	3720      	adds	r7, #32
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	48001c00 	.word	0x48001c00
 8001290:	48000800 	.word	0x48000800

08001294 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:

void LCD::Write(string line1, string line2){
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]

	WriteCommand(0x80);
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f000 f9a8 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b0b      	cmp	r3, #11
 80012b0:	d81f      	bhi.n	80012f2 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e>
		if(line1.length() > i){
 80012b2:	68b8      	ldr	r0, [r7, #8]
 80012b4:	f00b fce8 	bl	800cc88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	429a      	cmp	r2, r3
 80012be:	bf8c      	ite	hi
 80012c0:	2301      	movhi	r3, #1
 80012c2:	2300      	movls	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e>
			WriteData(line1[i]);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	4619      	mov	r1, r3
 80012ce:	68b8      	ldr	r0, [r7, #8]
 80012d0:	f00b fcdc 	bl	800cc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80012d4:	4603      	mov	r3, r0
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fa1a 	bl	8001714 <_ZN3LCD9WriteDataEh>
 80012e0:	e003      	b.n	80012ea <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x56>
		}else{
			WriteData(0x10);
 80012e2:	2110      	movs	r1, #16
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f000 fa15 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	3301      	adds	r3, #1
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	e7dc      	b.n	80012ac <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x18>
		}
	}
	WriteCommand(0x80+0x40);
 80012f2:	21c0      	movs	r1, #192	; 0xc0
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f000 f97f 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 80012fa:	2300      	movs	r3, #0
 80012fc:	75bb      	strb	r3, [r7, #22]
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	2b0b      	cmp	r3, #11
 8001302:	d81f      	bhi.n	8001344 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xb0>
		if(line2.length() > i){
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f00b fcbf 	bl	800cc88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800130a:	4602      	mov	r2, r0
 800130c:	7dbb      	ldrb	r3, [r7, #22]
 800130e:	429a      	cmp	r2, r3
 8001310:	bf8c      	ite	hi
 8001312:	2301      	movhi	r3, #1
 8001314:	2300      	movls	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d00b      	beq.n	8001334 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa0>
			WriteData(line2[i]);
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	4619      	mov	r1, r3
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f00b fcb3 	bl	800cc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001326:	4603      	mov	r3, r0
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f9f1 	bl	8001714 <_ZN3LCD9WriteDataEh>
 8001332:	e003      	b.n	800133c <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa8>
		}else{
			WriteData(0x10);
 8001334:	2110      	movs	r1, #16
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 f9ec 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 800133c:	7dbb      	ldrb	r3, [r7, #22]
 800133e:	3301      	adds	r3, #1
 8001340:	75bb      	strb	r3, [r7, #22]
 8001342:	e7dc      	b.n	80012fe <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6a>
		}
	}
}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_ZN3LCD5WriteEPchhS0_hh>:

void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	4611      	mov	r1, r2
 8001358:	461a      	mov	r2, r3
 800135a:	460b      	mov	r3, r1
 800135c:	71fb      	strb	r3, [r7, #7]
 800135e:	4613      	mov	r3, r2
 8001360:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f947 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
 800136e:	7dfa      	ldrb	r2, [r7, #23]
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	429a      	cmp	r2, r3
 8001374:	d207      	bcs.n	8001386 <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 8001376:	2110      	movs	r1, #16
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f000 f9cb 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	3301      	adds	r3, #1
 8001382:	75fb      	strb	r3, [r7, #23]
 8001384:	e7f3      	b.n	800136e <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 8001386:	2300      	movs	r3, #0
 8001388:	75bb      	strb	r3, [r7, #22]
 800138a:	7dbb      	ldrb	r3, [r7, #22]
 800138c:	2b0b      	cmp	r3, #11
 800138e:	d814      	bhi.n	80013ba <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 8001390:	79fa      	ldrb	r2, [r7, #7]
 8001392:	7dbb      	ldrb	r3, [r7, #22]
 8001394:	429a      	cmp	r2, r3
 8001396:	d908      	bls.n	80013aa <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 8001398:	7dbb      	ldrb	r3, [r7, #22]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f9b6 	bl	8001714 <_ZN3LCD9WriteDataEh>
 80013a8:	e003      	b.n	80013b2 <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 80013aa:	2110      	movs	r1, #16
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 f9b1 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 80013b2:	7dbb      	ldrb	r3, [r7, #22]
 80013b4:	3301      	adds	r3, #1
 80013b6:	75bb      	strb	r3, [r7, #22]
 80013b8:	e7e7      	b.n	800138a <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 80013ba:	21c0      	movs	r1, #192	; 0xc0
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f000 f91b 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 80013c2:	2300      	movs	r3, #0
 80013c4:	757b      	strb	r3, [r7, #21]
 80013c6:	7d7a      	ldrb	r2, [r7, #21]
 80013c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 80013d0:	2110      	movs	r1, #16
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f99e 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 80013d8:	7d7b      	ldrb	r3, [r7, #21]
 80013da:	3301      	adds	r3, #1
 80013dc:	757b      	strb	r3, [r7, #21]
 80013de:	e7f2      	b.n	80013c6 <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 80013e0:	2300      	movs	r3, #0
 80013e2:	753b      	strb	r3, [r7, #20]
 80013e4:	7d3a      	ldrb	r2, [r7, #20]
 80013e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013ea:	f1c3 030c 	rsb	r3, r3, #12
 80013ee:	429a      	cmp	r2, r3
 80013f0:	da15      	bge.n	800141e <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 80013f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013f6:	7d3b      	ldrb	r3, [r7, #20]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d908      	bls.n	800140e <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	6a3a      	ldr	r2, [r7, #32]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f984 	bl	8001714 <_ZN3LCD9WriteDataEh>
 800140c:	e003      	b.n	8001416 <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 800140e:	2110      	movs	r1, #16
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f000 f97f 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 8001416:	7d3b      	ldrb	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	753b      	strb	r3, [r7, #20]
 800141c:	e7e2      	b.n	80013e4 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>:


void LCD::Write(string line1, uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4613      	mov	r3, r2
 8001434:	71fb      	strb	r3, [r7, #7]
	WriteCommand(0x80+startl1);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	3b80      	subs	r3, #128	; 0x80
 800143a:	b2db      	uxtb	r3, r3
 800143c:	4619      	mov	r1, r3
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f8da 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]
 8001448:	7dfa      	ldrb	r2, [r7, #23]
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f1c3 030c 	rsb	r3, r3, #12
 8001450:	429a      	cmp	r2, r3
 8001452:	da1f      	bge.n	8001494 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x6e>
		if(line1.length() > i){
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f00b fc17 	bl	800cc88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800145a:	4602      	mov	r2, r0
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	429a      	cmp	r2, r3
 8001460:	bf8c      	ite	hi
 8001462:	2301      	movhi	r3, #1
 8001464:	2300      	movls	r3, #0
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x5e>
			WriteData(line1[i]);
 800146c:	7dfb      	ldrb	r3, [r7, #23]
 800146e:	4619      	mov	r1, r3
 8001470:	68b8      	ldr	r0, [r7, #8]
 8001472:	f00b fc0b 	bl	800cc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001476:	4603      	mov	r3, r0
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f000 f949 	bl	8001714 <_ZN3LCD9WriteDataEh>
 8001482:	e003      	b.n	800148c <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x66>
		}else{
			WriteData(0x10);
 8001484:	2110      	movs	r1, #16
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f944 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	3301      	adds	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
 8001492:	e7d9      	b.n	8001448 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x22>
		}
	}


	WriteCommand(0x80+0x40);
 8001494:	21c0      	movs	r1, #192	; 0xc0
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 f8ae 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 800149c:	2300      	movs	r3, #0
 800149e:	75bb      	strb	r3, [r7, #22]
 80014a0:	7dba      	ldrb	r2, [r7, #22]
 80014a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d207      	bcs.n	80014ba <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x94>
		WriteData(0x10);
 80014aa:	2110      	movs	r1, #16
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 f931 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 80014b2:	7dbb      	ldrb	r3, [r7, #22]
 80014b4:	3301      	adds	r3, #1
 80014b6:	75bb      	strb	r3, [r7, #22]
 80014b8:	e7f2      	b.n	80014a0 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 80014ba:	2300      	movs	r3, #0
 80014bc:	757b      	strb	r3, [r7, #21]
 80014be:	7d7a      	ldrb	r2, [r7, #21]
 80014c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014c4:	f1c3 030c 	rsb	r3, r3, #12
 80014c8:	429a      	cmp	r2, r3
 80014ca:	da15      	bge.n	80014f8 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xd2>
		if(lengthL2 > i){
 80014cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014d0:	7d7b      	ldrb	r3, [r7, #21]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d908      	bls.n	80014e8 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xc2>
			WriteData(line2[i]);
 80014d6:	7d7b      	ldrb	r3, [r7, #21]
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4619      	mov	r1, r3
 80014e0:	68f8      	ldr	r0, [r7, #12]
 80014e2:	f000 f917 	bl	8001714 <_ZN3LCD9WriteDataEh>
 80014e6:	e003      	b.n	80014f0 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xca>
		}else{
			WriteData(0x10);
 80014e8:	2110      	movs	r1, #16
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f912 	bl	8001714 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80014f0:	7d7b      	ldrb	r3, [r7, #21]
 80014f2:	3301      	adds	r3, #1
 80014f4:	757b      	strb	r3, [r7, #21]
 80014f6:	e7e2      	b.n	80014be <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x98>
		}
	}


}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4603      	mov	r3, r0
 8001510:	70fb      	strb	r3, [r7, #3]
 8001512:	460b      	mov	r3, r1
 8001514:	70bb      	strb	r3, [r7, #2]
 8001516:	4613      	mov	r3, r2
 8001518:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 800151a:	78bb      	ldrb	r3, [r7, #2]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d107      	bne.n	8001530 <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	3b80      	subs	r3, #128	; 0x80
 8001524:	b2db      	uxtb	r3, r3
 8001526:	4619      	mov	r1, r3
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f865 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
 800152e:	e009      	b.n	8001544 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 8001530:	78bb      	ldrb	r3, [r7, #2]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d106      	bne.n	8001544 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 8001536:	78fb      	ldrb	r3, [r7, #3]
 8001538:	3b40      	subs	r3, #64	; 0x40
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f85a 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d004      	beq.n	8001554 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 800154a:	210f      	movs	r1, #15
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f853 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
	}




}
 8001552:	e003      	b.n	800155c <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001554:	210f      	movs	r1, #15
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f84e 	bl	80015f8 <_ZN3LCD12WriteCommandEh>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	111b      	asrs	r3, r3, #4
 8001574:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	2102      	movs	r1, #2
 8001582:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001586:	f003 fd4f 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	2104      	movs	r1, #4
 8001596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159a:	f003 fd45 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	2108      	movs	r1, #8
 80015aa:	4812      	ldr	r0, [pc, #72]	; (80015f4 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 80015ac:	f003 fd3c 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f003 fd31 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015c6:	2001      	movs	r0, #1
 80015c8:	f003 fa70 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2101      	movs	r1, #1
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d4:	f003 fd28 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f003 fa67 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f003 fd1f 	bl	8005028 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	48001c00 	.word	0x48001c00

080015f8 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160a:	4840      	ldr	r0, [pc, #256]	; (800170c <_ZN3LCD12WriteCommandEh+0x114>)
 800160c:	f003 fd0c 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001616:	483d      	ldr	r0, [pc, #244]	; (800170c <_ZN3LCD12WriteCommandEh+0x114>)
 8001618:	f003 fd06 	bl	8005028 <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	111b      	asrs	r3, r3, #4
 8001620:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	2102      	movs	r1, #2
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f003 fcf9 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	2104      	movs	r1, #4
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f003 fcef 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	b2db      	uxtb	r3, r3
 8001652:	461a      	mov	r2, r3
 8001654:	2108      	movs	r1, #8
 8001656:	482e      	ldr	r0, [pc, #184]	; (8001710 <_ZN3LCD12WriteCommandEh+0x118>)
 8001658:	f003 fce6 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f003 fcdb 	bl	8005028 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2101      	movs	r1, #1
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f003 fcd5 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f003 fa14 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2101      	movs	r1, #1
 8001688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168c:	f003 fccc 	bl	8005028 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001690:	78fb      	ldrb	r3, [r7, #3]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	2102      	movs	r1, #2
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f003 fcc2 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	2104      	movs	r1, #4
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f003 fcb8 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	2108      	movs	r1, #8
 80016c4:	4812      	ldr	r0, [pc, #72]	; (8001710 <_ZN3LCD12WriteCommandEh+0x118>)
 80016c6:	f003 fcaf 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016dc:	f003 fca4 	bl	8005028 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2101      	movs	r1, #1
 80016e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e8:	f003 fc9e 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f003 f9dd 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2101      	movs	r1, #1
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f003 fc95 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80016fe:	2001      	movs	r0, #1
 8001700:	f003 f9d4 	bl	8004aac <HAL_Delay>
}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	48000800 	.word	0x48000800
 8001710:	48001c00 	.word	0x48001c00

08001714 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	4840      	ldr	r0, [pc, #256]	; (8001828 <_ZN3LCD9WriteDataEh+0x114>)
 8001728:	f003 fc7e 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001732:	483d      	ldr	r0, [pc, #244]	; (8001828 <_ZN3LCD9WriteDataEh+0x114>)
 8001734:	f003 fc78 	bl	8005028 <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	111b      	asrs	r3, r3, #4
 800173c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2102      	movs	r1, #2
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f003 fc6b 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	461a      	mov	r2, r3
 800175c:	2104      	movs	r1, #4
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f003 fc61 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	b2db      	uxtb	r3, r3
 800176e:	461a      	mov	r2, r3
 8001770:	2108      	movs	r1, #8
 8001772:	482e      	ldr	r0, [pc, #184]	; (800182c <_ZN3LCD9WriteDataEh+0x118>)
 8001774:	f003 fc58 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f003 fc4d 	bl	8005028 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	2101      	movs	r1, #1
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f003 fc47 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f003 f986 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2101      	movs	r1, #1
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f003 fc3e 	bl	8005028 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	2102      	movs	r1, #2
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f003 fc34 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	2104      	movs	r1, #4
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f003 fc2a 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	2108      	movs	r1, #8
 80017e0:	4812      	ldr	r0, [pc, #72]	; (800182c <_ZN3LCD9WriteDataEh+0x118>)
 80017e2:	f003 fc21 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f8:	f003 fc16 	bl	8005028 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80017fc:	2201      	movs	r2, #1
 80017fe:	2101      	movs	r1, #1
 8001800:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001804:	f003 fc10 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001808:	2001      	movs	r0, #1
 800180a:	f003 f94f 	bl	8004aac <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	2101      	movs	r1, #1
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f003 fc07 	bl	8005028 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800181a:	2001      	movs	r0, #1
 800181c:	f003 f946 	bl	8004aac <HAL_Delay>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	48000800 	.word	0x48000800
 800182c:	48001c00 	.word	0x48001c00

08001830 <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	this->model = model;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
	DWT_Init();
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f000 f88d 	bl	8001960 <_ZN8LoadCell8DWT_InitEv>
}
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 8001850:	b082      	sub	sp, #8
 8001852:	b490      	push	{r4, r7}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
 800185c:	f107 0110 	add.w	r1, r7, #16
 8001860:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	1d1c      	adds	r4, r3, #4
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001874:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bc90      	pop	{r4, r7}
 8001880:	b002      	add	sp, #8
 8001882:	4770      	bx	lr

08001884 <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6858      	ldr	r0, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	891b      	ldrh	r3, [r3, #8]
 8001898:	2200      	movs	r2, #0
 800189a:	4619      	mov	r1, r3
 800189c:	f003 fbc4 	bl	8005028 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8a1b      	ldrh	r3, [r3, #16]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f003 fba4 	bl	8004ff8 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d04a      	beq.n	8001956 <_ZN8LoadCell6UpdateEv+0xd2>
		for(int i = 0; i<25; i++){
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b18      	cmp	r3, #24
 80018c8:	dc2b      	bgt.n	8001922 <_ZN8LoadCell6UpdateEv+0x9e>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6858      	ldr	r0, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	891b      	ldrh	r3, [r3, #8]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4619      	mov	r1, r3
 80018d6:	f003 fba7 	bl	8005028 <HAL_GPIO_WritePin>
			DWT_Delay_us(10);
 80018da:	210a      	movs	r1, #10
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f85d 	bl	800199c <_ZN8LoadCell12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6858      	ldr	r0, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	891b      	ldrh	r3, [r3, #8]
 80018ea:	2200      	movs	r2, #0
 80018ec:	4619      	mov	r1, r3
 80018ee:	f003 fb9b 	bl	8005028 <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	8a1b      	ldrh	r3, [r3, #16]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f003 fb7b 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
			DWT_Delay_us(10);
 8001912:	210a      	movs	r1, #10
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f841 	bl	800199c <_ZN8LoadCell12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	3301      	adds	r3, #1
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	e7d0      	b.n	80018c4 <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7c9b      	ldrb	r3, [r3, #18]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d002      	beq.n	8001936 <_ZN8LoadCell6UpdateEv+0xb2>
 8001930:	2b02      	cmp	r3, #2
 8001932:	d008      	beq.n	8001946 <_ZN8LoadCell6UpdateEv+0xc2>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 8001934:	e00f      	b.n	8001956 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell1(data);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4611      	mov	r1, r2
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f912 	bl	8001b68 <_ZN5Model12setLoadCell1El>
			break;
 8001944:	e007      	b.n	8001956 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell2(data);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f924 	bl	8001b9c <_ZN5Model12setLoadCell2El>
			break;
 8001954:	bf00      	nop
		}
	}

}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <_ZN8LoadCell8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void LoadCell::DWT_Init(void) {
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <_ZN8LoadCell8DWT_InitEv+0x34>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <_ZN8LoadCell8DWT_InitEv+0x34>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_ZN8LoadCell8DWT_InitEv+0x38>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_ZN8LoadCell8DWT_InitEv+0x38>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a06      	ldr	r2, [pc, #24]	; (8001998 <_ZN8LoadCell8DWT_InitEv+0x38>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6013      	str	r3, [r2, #0]
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	e000edf0 	.word	0xe000edf0
 8001998:	e0001000 	.word	0xe0001000

0800199c <_ZN8LoadCell12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void LoadCell::DWT_Delay_us(volatile uint32_t microseconds) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80019ac:	f006 f8be 	bl	8007b2c <HAL_RCC_GetHCLKFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <_ZN8LoadCell12DWT_Delay_usEm+0x4c>)
 80019b4:	fba3 2302 	umull	r2, r3, r3, r2
 80019b8:	0c9b      	lsrs	r3, r3, #18
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	603b      	str	r3, [r7, #0]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad2      	subs	r2, r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	bf34      	ite	cc
 80019d0:	2301      	movcc	r3, #1
 80019d2:	2300      	movcs	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d000      	beq.n	80019dc <_ZN8LoadCell12DWT_Delay_usEm+0x40>
 80019da:	e7f2      	b.n	80019c2 <_ZN8LoadCell12DWT_Delay_usEm+0x26>
		;
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	e0001000 	.word	0xe0001000
 80019e8:	431bde83 	.word	0x431bde83

080019ec <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001a06:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f240 32ca 	movw	r2, #970	; 0x3ca
 8001a0e:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a31      	ldr	r2, [pc, #196]	; (8001ad8 <_ZN5ModelC1Ev+0xec>)
 8001a14:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <_ZN5ModelC1Ev+0xec>)
 8001a1a:	615a      	str	r2, [r3, #20]

	 weight = 0;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	831a      	strh	r2, [r3, #24]
	 kontrast = 100;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2264      	movs	r2, #100	; 0x64
 8001a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 400; //Preis in Rr/100g
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001a30:	61da      	str	r2, [r3, #28]
	 Parafinwachs_Preis = 350;	//Preis in Rr/100g
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001a38:	621a      	str	r2, [r3, #32]


	 wachstyp = E_UNDEF;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 00;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	 month = 01;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	 day = 01;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 dayOfWeek = 0;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	 hour = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 minute = 0;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	 seconds = 0;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	//---------------Taster Status---------------
	 T1Short = false;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	 T1Long = false;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	 T2Short = false;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	 T2Long = false;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	 T3Short = false;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	 T3Long = false;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	 T4Short = false;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	 T4Long = false;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	 T5Short = false;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	 T5Long = false;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

}
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40566666 	.word	0x40566666

08001adc <_ZNK5Model6getDayEv>:

uint8_t Model::getDay() const {
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	return day;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_ZN5Model6setDayEh>:

void Model::setDay(uint8_t day) {
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	460b      	mov	r3, r1
 8001b00:	70fb      	strb	r3, [r7, #3]
	this->day = day;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZNK5Model7getHourEv>:

void Model::setDayOfWeek(uint8_t dayOfWeek) {
	this->dayOfWeek = dayOfWeek;
}

uint8_t Model::getHour() const {
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	return hour;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZN5Model7setHourEh>:

void Model::setHour(uint8_t hour) {
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	460b      	mov	r3, r1
 8001b3a:	70fb      	strb	r3, [r7, #3]
	this->hour = hour;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	78fa      	ldrb	r2, [r7, #3]
 8001b40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <_ZNK5Model12getLoadCell1Ev>:

int32_t Model::getLoadCell1() const {
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	return loadCell1;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	return loadCell2;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_ZNK5Model9getMinuteEv>:

uint8_t Model::getMinute() const {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	return minute;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <_ZN5Model9setMinuteEh>:

void Model::setMinute(uint8_t minute) {
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
 8001bda:	460b      	mov	r3, r1
 8001bdc:	70fb      	strb	r3, [r7, #3]
	this->minute = minute;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	78fa      	ldrb	r2, [r7, #3]
 8001be2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_ZNK5Model8getMonthEv>:

uint8_t Model::getMonth() const {
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	return month;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_ZN5Model8setMonthEh>:

void Model::setMonth(uint8_t month) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
	this->month = month;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	78fa      	ldrb	r2, [r7, #3]
 8001c1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_ZNK5Model10getSecondsEv>:

uint8_t Model::getSeconds() const {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	return seconds;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_ZN5Model10setSecondsEh>:

void Model::setSeconds(uint8_t seconds) {
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	70fb      	strb	r3, [r7, #3]
	this->seconds = seconds;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	78fa      	ldrb	r2, [r7, #3]
 8001c56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <_ZNK5Model9getWeightEv>:

int16_t Model::getWeight() const {
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
	return weight;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	831a      	strh	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_ZNK5Model7getYearEv>:

uint8_t Model::getYear() const {
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
	return year;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_ZN5Model7setYearEh>:

void Model::setYear(uint8_t year) {
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	70fb      	strb	r3, [r7, #3]
	this->year = year;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_ZNK5Model8isT1LongEv>:

bool Model::isT1Long() const {
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	return T1Long;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	return T1Short;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	78fa      	ldrb	r2, [r7, #3]
 8001d3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	return T2Long;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	return T2Short;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	return T3Long;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	78fa      	ldrb	r2, [r7, #3]
 8001dea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return T3Short;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	78fa      	ldrb	r2, [r7, #3]
 8001e24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	return T4Long;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return T4Short;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	78fa      	ldrb	r2, [r7, #3]
 8001e98:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	return T5Long;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
	return T5Short;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f32:	d802      	bhi.n	8001f3a <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 8001f34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f38:	e001      	b.n	8001f3e <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	ee07 3a90 	vmov	s15, r3
}
 8001f42:	eeb0 0a67 	vmov.f32	s0, s15
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	d802      	bhi.n	8001f6e <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 8001f68:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f6c:	e001      	b.n	8001f72 <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	ee07 3a90 	vmov	s15, r3
}
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	609a      	str	r2, [r3, #8]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002006:	ee17 2a90 	vmov	r2, s15
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	61da      	str	r2, [r3, #28]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <_ZN5Model20setParafinwachsPreisEf>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	ed87 0a00 	vstr	s0, [r7]
	Parafinwachs_Preis = parafinwachsPreis;
 8002048:	edd7 7a00 	vldr	s15, [r7]
 800204c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002050:	ee17 2a90 	vmov	r2, s15
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	621a      	str	r2, [r3, #32]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_ZNK5Model11getWachstypEv>:

Model::EWACHS Model::getWachstyp() const {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	return wachstyp;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8002072:	4618      	mov	r0, r3
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	switch(this->wachstyp){
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002098:	2b01      	cmp	r3, #1
 800209a:	d011      	beq.n	80020c0 <_ZN5Model11setWachstypENS_6EWACHSE+0x42>
 800209c:	2b02      	cmp	r3, #2
 800209e:	d01c      	beq.n	80020da <_ZN5Model11setWachstypENS_6EWACHSE+0x5c>
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d000      	beq.n	80020a6 <_ZN5Model11setWachstypENS_6EWACHSE+0x28>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 80020a4:	e026      	b.n	80020f4 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	2110      	movs	r1, #16
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f002 ffbb 	bl	8005028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2140      	movs	r1, #64	; 0x40
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f002 ffb5 	bl	8005028 <HAL_GPIO_WritePin>
		break;
 80020be:	e019      	b.n	80020f4 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	2110      	movs	r1, #16
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f002 ffae 	bl	8005028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80020cc:	2201      	movs	r2, #1
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d4:	f002 ffa8 	bl	8005028 <HAL_GPIO_WritePin>
		break;
 80020d8:	e00c      	b.n	80020f4 <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80020da:	2201      	movs	r2, #1
 80020dc:	2110      	movs	r1, #16
 80020de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e2:	f002 ffa1 	bl	8005028 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2140      	movs	r1, #64	; 0x40
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f002 ff9b 	bl	8005028 <HAL_GPIO_WritePin>
		break;
 80020f2:	bf00      	nop
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	60da      	str	r2, [r3, #12]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <_ZNK5Model11getKontrastEv>:

uint8_t Model::getKontrast() const {
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	return kontrast;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
}
 8002126:	4618      	mov	r0, r3
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <_ZN5Model11setKontrastEh>:

void Model::setKontrast(uint8_t kontrast) {
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
	this->kontrast = kontrast;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	bfb8      	it	lt
 8002160:	425b      	neglt	r3, r3
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "math.h"
using namespace std;

char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ffe8 	bl	8002152 <_ZSt3absl>
 8002182:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <_ZN5Tools14intToAsciiCharElh+0x140>)
 8002188:	fb82 1203 	smull	r1, r2, r2, r3
 800218c:	1312      	asrs	r2, r2, #12
 800218e:	17db      	asrs	r3, r3, #31
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	b2db      	uxtb	r3, r3
 8002194:	3330      	adds	r3, #48	; 0x30
 8002196:	b2da      	uxtb	r2, r3
 8002198:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800219a:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a46      	ldr	r2, [pc, #280]	; (80022b8 <_ZN5Tools14intToAsciiCharElh+0x148>)
 80021a0:	fb82 1203 	smull	r1, r2, r2, r3
 80021a4:	1192      	asrs	r2, r2, #6
 80021a6:	17db      	asrs	r3, r3, #31
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4940      	ldr	r1, [pc, #256]	; (80022b0 <_ZN5Tools14intToAsciiCharElh+0x140>)
 80021b0:	fb81 0103 	smull	r0, r1, r1, r3
 80021b4:	1309      	asrs	r1, r1, #12
 80021b6:	17db      	asrs	r3, r3, #31
 80021b8:	1a5b      	subs	r3, r3, r1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	0089      	lsls	r1, r1, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3330      	adds	r3, #48	; 0x30
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 80021d0:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <_ZN5Tools14intToAsciiCharElh+0x14c>)
 80021d6:	fb82 1203 	smull	r1, r2, r2, r3
 80021da:	1152      	asrs	r2, r2, #5
 80021dc:	17db      	asrs	r3, r3, #31
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4934      	ldr	r1, [pc, #208]	; (80022b8 <_ZN5Tools14intToAsciiCharElh+0x148>)
 80021e6:	fb81 0103 	smull	r0, r1, r1, r3
 80021ea:	1189      	asrs	r1, r1, #6
 80021ec:	17db      	asrs	r3, r3, #31
 80021ee:	1a5b      	subs	r3, r3, r1
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	4619      	mov	r1, r3
 80021f4:	0089      	lsls	r1, r1, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	3330      	adds	r3, #48	; 0x30
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b2b      	ldr	r3, [pc, #172]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002206:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <_ZN5Tools14intToAsciiCharElh+0x150>)
 800220c:	fb82 1203 	smull	r1, r2, r2, r3
 8002210:	1092      	asrs	r2, r2, #2
 8002212:	17db      	asrs	r3, r3, #31
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4928      	ldr	r1, [pc, #160]	; (80022bc <_ZN5Tools14intToAsciiCharElh+0x14c>)
 800221c:	fb81 0103 	smull	r0, r1, r1, r3
 8002220:	1149      	asrs	r1, r1, #5
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1a5b      	subs	r3, r3, r1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	4619      	mov	r1, r3
 800222a:	0089      	lsls	r1, r1, #2
 800222c:	440b      	add	r3, r1
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4413      	add	r3, r2
 8002234:	b2db      	uxtb	r3, r3
 8002236:	3330      	adds	r3, #48	; 0x30
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4b1e      	ldr	r3, [pc, #120]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800223c:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <_ZN5Tools14intToAsciiCharElh+0x150>)
 8002242:	fb83 1302 	smull	r1, r3, r3, r2
 8002246:	1099      	asrs	r1, r3, #2
 8002248:	17d3      	asrs	r3, r2, #31
 800224a:	1ac9      	subs	r1, r1, r3
 800224c:	460b      	mov	r3, r1
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	1ad1      	subs	r1, r2, r3
 8002256:	b2cb      	uxtb	r3, r1
 8002258:	3330      	adds	r3, #48	; 0x30
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 800225e:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	2300      	movs	r3, #0
 8002266:	73bb      	strb	r3, [r7, #14]
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d81a      	bhi.n	80022a4 <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	f1c3 0205 	rsb	r2, r3, #5
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	429a      	cmp	r2, r3
 8002278:	d107      	bne.n	800228a <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <_ZN5Tools14intToAsciiCharElh+0x154>)
 800227e:	212e      	movs	r1, #46	; 0x2e
 8002280:	54d1      	strb	r1, [r2, r3]
        		j--;
 8002282:	7bbb      	ldrb	r3, [r7, #14]
 8002284:	3b01      	subs	r3, #1
 8002286:	73bb      	strb	r3, [r7, #14]
 8002288:	e005      	b.n	8002296 <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 800228a:	7bba      	ldrb	r2, [r7, #14]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	4909      	ldr	r1, [pc, #36]	; (80022b4 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8002290:	5c89      	ldrb	r1, [r1, r2]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <_ZN5Tools14intToAsciiCharElh+0x154>)
 8002294:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	3301      	adds	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
 800229c:	7bbb      	ldrb	r3, [r7, #14]
 800229e:	3301      	adds	r3, #1
 80022a0:	73bb      	strb	r3, [r7, #14]
 80022a2:	e7e1      	b.n	8002268 <_ZN5Tools14intToAsciiCharElh+0xf8>
        	}
        }
	return result;
 80022a4:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	68db8bad 	.word	0x68db8bad
 80022b4:	200002e8 	.word	0x200002e8
 80022b8:	10624dd3 	.word	0x10624dd3
 80022bc:	51eb851f 	.word	0x51eb851f
 80022c0:	66666667 	.word	0x66666667
 80022c4:	200002f0 	.word	0x200002f0

080022c8 <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	int result = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <_ZN5Tools8Round5RpEl+0x60>)
 80022d8:	fb83 1302 	smull	r1, r3, r3, r2
 80022dc:	1099      	asrs	r1, r3, #2
 80022de:	17d3      	asrs	r3, r2, #31
 80022e0:	1ac9      	subs	r1, r1, r3
 80022e2:	460b      	mov	r3, r1
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <_ZN5Tools8Round5RpEl+0x60>)
 80022f2:	fb82 1203 	smull	r1, r2, r2, r3
 80022f6:	1052      	asrs	r2, r2, #1
 80022f8:	17db      	asrs	r3, r3, #31
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d105      	bne.n	8002310 <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	1d5a      	adds	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e003      	b.n	8002318 <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
    }
    return result;
 8002318:	697b      	ldr	r3, [r7, #20]
}
 800231a:	4618      	mov	r0, r3
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	66666667 	.word	0x66666667

0800232c <_ZN5Tools11byteToAsciiEh>:

char* Tools::byteToAscii(uint8_t data) {;
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
	static char result[3];
	result[0] = data/100 + 0x30;
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <_ZN5Tools11byteToAsciiEh+0x88>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3330      	adds	r3, #48	; 0x30
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <_ZN5Tools11byteToAsciiEh+0x8c>)
 8002348:	701a      	strb	r2, [r3, #0]
	result[1] = data/10 - (data/100)*10 + 0x30;
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	4a1b      	ldr	r2, [pc, #108]	; (80023bc <_ZN5Tools11byteToAsciiEh+0x90>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	08db      	lsrs	r3, r3, #3
 8002354:	b2da      	uxtb	r2, r3
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <_ZN5Tools11byteToAsciiEh+0x88>)
 800235a:	fba1 1303 	umull	r1, r3, r1, r3
 800235e:	095b      	lsrs	r3, r3, #5
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	0149      	lsls	r1, r1, #5
 8002366:	1ac9      	subs	r1, r1, r3
 8002368:	0089      	lsls	r1, r1, #2
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4413      	add	r3, r2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3330      	adds	r3, #48	; 0x30
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <_ZN5Tools11byteToAsciiEh+0x8c>)
 800237a:	705a      	strb	r2, [r3, #1]
	result[2] = data - (data/10)*10 + 0x30;
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <_ZN5Tools11byteToAsciiEh+0x90>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	0152      	lsls	r2, r2, #5
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	4413      	add	r3, r2
 800239a:	b2db      	uxtb	r3, r3
 800239c:	3330      	adds	r3, #48	; 0x30
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <_ZN5Tools11byteToAsciiEh+0x8c>)
 80023a2:	709a      	strb	r2, [r3, #2]
    return result;
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <_ZN5Tools11byteToAsciiEh+0x8c>)
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	51eb851f 	.word	0x51eb851f
 80023b8:	200002f8 	.word	0x200002f8
 80023bc:	cccccccd 	.word	0xcccccccd

080023c0 <_ZN10BWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd) {
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fa0c 	bl	80027ec <_ZN10BaseScreenC1Ev>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f103 0410 	add.w	r4, r3, #16
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4618      	mov	r0, r3
 80023e0:	f00a fc0a 	bl	800cbf8 <_ZNSaIcEC1Ev>
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	461a      	mov	r2, r3
 80023ea:	490b      	ldr	r1, [pc, #44]	; (8002418 <_ZN10BWSettingsC1EP5ModelP3LCD+0x58>)
 80023ec:	4620      	mov	r0, r4
 80023ee:	f00a fca7 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00a fbff 	bl	800cbfa <_ZNSaIcED1Ev>
	this->model = model;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	605a      	str	r2, [r3, #4]
	position = 0;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	735a      	strb	r2, [r3, #13]
	init = false;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	739a      	strb	r2, [r3, #14]
}
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	0800d03c 	.word	0x0800d03c

0800241c <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b093      	sub	sp, #76	; 0x4c
 8002420:	af02      	add	r7, sp, #8
 8002422:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	731a      	strb	r2, [r3, #12]

	int preis = model->getBienenwachsPreis();
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fdce 	bl	8001fd0 <_ZNK5Model19getBienenwachsPreisEv>
 8002434:	eef0 7a40 	vmov.f32	s15, s0
 8002438:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800243c:	ee17 3a90 	vmov	r3, s15
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(!init){
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7b9b      	ldrb	r3, [r3, #14]
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d02e      	beq.n	80024ae <_ZN10BWSettings6UpdateEv+0x92>
		position = 0;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689c      	ldr	r4, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0210 	add.w	r2, r3, #16
 8002460:	f107 030c 	add.w	r3, r7, #12
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f00a fc38 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f97f 	bl	8002774 <_ZN10BWSettings16prizeToCharArrayEm>
 8002476:	4602      	mov	r2, r0
 8002478:	f107 010c 	add.w	r1, r7, #12
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	230c      	movs	r3, #12
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	2200      	movs	r2, #0
 8002488:	4620      	mov	r0, r4
 800248a:	f7fe ffcc 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	4618      	mov	r0, r3
 8002494:	f00a fbf2 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6898      	ldr	r0, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	7b59      	ldrb	r1, [r3, #13]
 80024a0:	2301      	movs	r3, #1
 80024a2:	2202      	movs	r2, #2
 80024a4:	f7ff f82c 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fc2d 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d025      	beq.n	800250a <_ZN10BWSettings6UpdateEv+0xee>
		//Change position
		if(position >= 4){
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7b5b      	ldrb	r3, [r3, #13]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d903      	bls.n	80024ce <_ZN10BWSettings6UpdateEv+0xb2>
			position = 0;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	735a      	strb	r2, [r3, #13]
 80024cc:	e00f      	b.n	80024ee <_ZN10BWSettings6UpdateEv+0xd2>
		}else{
			position++;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	7b5b      	ldrb	r3, [r3, #13]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7b5b      	ldrb	r3, [r3, #13]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d105      	bne.n	80024ee <_ZN10BWSettings6UpdateEv+0xd2>
				position++;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7b5b      	ldrb	r3, [r3, #13]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	735a      	strb	r2, [r3, #13]
			}
		}

		lcd->SetCursorPosition(position, 2,true);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6898      	ldr	r0, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7b59      	ldrb	r1, [r3, #13]
 80024f6:	2301      	movs	r3, #1
 80024f8:	2202      	movs	r2, #2
 80024fa:	f7ff f801 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff fc11 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbe2 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <_ZN10BWSettings6UpdateEv+0x10a>
		model->setT1Long(false);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fbe6 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fc2b 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80aa 	beq.w	800268c <_ZN10BWSettings6UpdateEv+0x270>

		if(position == 0){
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7b5b      	ldrb	r3, [r3, #13]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d110      	bne.n	8002562 <_ZN10BWSettings6UpdateEv+0x146>
			if(preis/1000 == 9){
 8002540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002542:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002546:	3b28      	subs	r3, #40	; 0x28
 8002548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800254c:	d205      	bcs.n	800255a <_ZN10BWSettings6UpdateEv+0x13e>
				preis -= 9000;
 800254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002550:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002554:	3b28      	subs	r3, #40	; 0x28
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	e003      	b.n	8002562 <_ZN10BWSettings6UpdateEv+0x146>
			}else{
				preis += 1000;
 800255a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800255c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 1){
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7b5b      	ldrb	r3, [r3, #13]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d11c      	bne.n	80025a4 <_ZN10BWSettings6UpdateEv+0x188>
			if((preis/100 - (preis/1000)*10) == 9){
 800256a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256c:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <_ZN10BWSettings6UpdateEv+0x34c>)
 800256e:	fb82 1203 	smull	r1, r2, r2, r3
 8002572:	1152      	asrs	r2, r2, #5
 8002574:	17db      	asrs	r3, r3, #31
 8002576:	1ad1      	subs	r1, r2, r3
 8002578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257a:	4a7c      	ldr	r2, [pc, #496]	; (800276c <_ZN10BWSettings6UpdateEv+0x350>)
 800257c:	fb82 0203 	smull	r0, r2, r2, r3
 8002580:	1192      	asrs	r2, r2, #6
 8002582:	17db      	asrs	r3, r3, #31
 8002584:	1a9a      	subs	r2, r3, r2
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	440b      	add	r3, r1
 8002590:	2b09      	cmp	r3, #9
 8002592:	d104      	bne.n	800259e <_ZN10BWSettings6UpdateEv+0x182>
				preis -= 900;
 8002594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002596:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800259c:	e002      	b.n	80025a4 <_ZN10BWSettings6UpdateEv+0x188>
			}else{
				preis += 100;
 800259e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a0:	3364      	adds	r3, #100	; 0x64
 80025a2:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 3){
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7b5b      	ldrb	r3, [r3, #13]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d11b      	bne.n	80025e4 <_ZN10BWSettings6UpdateEv+0x1c8>
			if((preis/10 - (preis/100)*10) == 9){
 80025ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ae:	4a70      	ldr	r2, [pc, #448]	; (8002770 <_ZN10BWSettings6UpdateEv+0x354>)
 80025b0:	fb82 1203 	smull	r1, r2, r2, r3
 80025b4:	1092      	asrs	r2, r2, #2
 80025b6:	17db      	asrs	r3, r3, #31
 80025b8:	1ad1      	subs	r1, r2, r3
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	4a6a      	ldr	r2, [pc, #424]	; (8002768 <_ZN10BWSettings6UpdateEv+0x34c>)
 80025be:	fb82 0203 	smull	r0, r2, r2, r3
 80025c2:	1152      	asrs	r2, r2, #5
 80025c4:	17db      	asrs	r3, r3, #31
 80025c6:	1a9a      	subs	r2, r3, r2
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	2b09      	cmp	r3, #9
 80025d4:	d103      	bne.n	80025de <_ZN10BWSettings6UpdateEv+0x1c2>
				preis -= 90;
 80025d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d8:	3b5a      	subs	r3, #90	; 0x5a
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025dc:	e002      	b.n	80025e4 <_ZN10BWSettings6UpdateEv+0x1c8>
			}else{
				preis += 10;
 80025de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e0:	330a      	adds	r3, #10
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}


		if(position == 4){
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7b5b      	ldrb	r3, [r3, #13]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d114      	bne.n	8002616 <_ZN10BWSettings6UpdateEv+0x1fa>
			if((preis - (preis/10)*10 ) == 0){
 80025ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <_ZN10BWSettings6UpdateEv+0x354>)
 80025f0:	fb83 2301 	smull	r2, r3, r3, r1
 80025f4:	109a      	asrs	r2, r3, #2
 80025f6:	17cb      	asrs	r3, r1, #31
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	1aca      	subs	r2, r1, r3
 8002604:	2a00      	cmp	r2, #0
 8002606:	d103      	bne.n	8002610 <_ZN10BWSettings6UpdateEv+0x1f4>
				preis += 5;
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	3305      	adds	r3, #5
 800260c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260e:	e002      	b.n	8002616 <_ZN10BWSettings6UpdateEv+0x1fa>
			}else{
				preis -= 5;
 8002610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002612:	3b05      	subs	r3, #5
 8002614:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
		model->setBienenwachsPreis(preis);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800261c:	ee07 2a90 	vmov	s15, r2
 8002620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fce2 	bl	8001ff2 <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689c      	ldr	r4, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f103 0210 	add.w	r2, r3, #16
 8002638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f00a fb4c 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f893 	bl	8002774 <_ZN10BWSettings16prizeToCharArrayEm>
 800264e:	4602      	mov	r2, r0
 8002650:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002654:	2300      	movs	r3, #0
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	230c      	movs	r3, #12
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	4620      	mov	r0, r4
 8002662:	f7fe fee0 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4618      	mov	r0, r3
 800266c:	f00a fb06 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6898      	ldr	r0, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b59      	ldrb	r1, [r3, #13]
 8002678:	2301      	movs	r3, #1
 800267a:	2202      	movs	r2, #2
 800267c:	f7fe ff40 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2100      	movs	r1, #0
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fb8a 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fb5b 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <_ZN10BWSettings6UpdateEv+0x28c>
		model->setT2Long(false);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fb5f 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fba4 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d005      	beq.n	80026c4 <_ZN10BWSettings6UpdateEv+0x2a8>
		//-

		model->setT3Short(false);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fba8 	bl	8001e14 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fb79 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <_ZN10BWSettings6UpdateEv+0x2c4>
		model->setT3Long(false);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fb7d 	bl	8001dda <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fba5 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <_ZN10BWSettings6UpdateEv+0x2e0>
		model->setT4Long(false);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fba9 	bl	8001e4e <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fbb4 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <_ZN10BWSettings6UpdateEv+0x2fc>
		model->setT4Short(false);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2100      	movs	r1, #0
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fbb8 	bl	8001e88 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fbc3 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <_ZN10BWSettings6UpdateEv+0x324>
		//Neuer Wert speichern
		init = false;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff fbc1 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fbcc 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <_ZN10BWSettings6UpdateEv+0x340>
		model->setT5Short(false);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fbd0 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}

	return screen;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	7b1b      	ldrb	r3, [r3, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3744      	adds	r7, #68	; 0x44
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	51eb851f 	.word	0x51eb851f
 800276c:	10624dd3 	.word	0x10624dd3
 8002770:	66666667 	.word	0x66666667

08002774 <_ZN10BWSettings16prizeToCharArrayEm>:


char* BWSettings::prizeToCharArray(uint32_t prize){
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fcf4 	bl	8002170 <_ZN5Tools14intToAsciiCharElh>
 8002788:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d80b      	bhi.n	80027ac <_ZN10BWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	3301      	adds	r3, #1
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	441a      	add	r2, r3
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	7811      	ldrb	r1, [r2, #0]
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027a2:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e7f0      	b.n	800278e <_ZN10BWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027ae:	2220      	movs	r2, #32
 80027b0:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 80027b2:	4b0d      	ldr	r3, [pc, #52]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027b4:	2246      	movs	r2, #70	; 0x46
 80027b6:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027ba:	2272      	movs	r2, #114	; 0x72
 80027bc:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027c0:	222f      	movs	r2, #47	; 0x2f
 80027c2:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027c6:	2231      	movs	r2, #49	; 0x31
 80027c8:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 80027ca:	4b07      	ldr	r3, [pc, #28]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027cc:	2230      	movs	r2, #48	; 0x30
 80027ce:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027d2:	2230      	movs	r2, #48	; 0x30
 80027d4:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
 80027d8:	2267      	movs	r2, #103	; 0x67
 80027da:	731a      	strb	r2, [r3, #12]
	return result;
 80027dc:	4b02      	ldr	r3, [pc, #8]	; (80027e8 <_ZN10BWSettings16prizeToCharArrayEm+0x74>)
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200002fc 	.word	0x200002fc

080027ec <_ZN10BaseScreenC1Ev>:
 *      Author: marcel
 */
#include "BaseScreen.h"
#include "main.h"

BaseScreen::BaseScreen(){
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2110      	movs	r1, #16
 80027f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027fc:	f002 fc14 	bl	8005028 <HAL_GPIO_WritePin>
}
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <_ZN10MainScreenC1EP5ModelP3LCD>:
#include "MainScreen.h"

using namespace std;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 800280a:	b580      	push	{r7, lr}
 800280c:	b084      	sub	sp, #16
 800280e:	af00      	add	r7, sp, #0
 8002810:	60f8      	str	r0, [r7, #12]
 8002812:	60b9      	str	r1, [r7, #8]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ffe7 	bl	80027ec <_ZN10BaseScreenC1Ev>
	this->model = model;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	609a      	str	r2, [r3, #8]
	this->screen = Model::E_MAIN_SCRREN;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2203      	movs	r2, #3
 800282e:	731a      	strb	r2, [r3, #12]
}
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <_ZN10MainScreen6UpdateEv>:
void MainScreen::Init(){
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());
}

Model::ESCREEN MainScreen::Update(){
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	ed2d 8b02 	vpush	{d8}
 8002842:	b0ad      	sub	sp, #180	; 0xb4
 8002844:	af04      	add	r7, sp, #16
 8002846:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	731a      	strb	r2, [r3, #12]

	//------------------Screen Update------------------
	int prize = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fc03 	bl	8002064 <_ZNK5Model11getWachstypEv>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <_ZN10MainScreen6UpdateEv+0x72>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis()/100);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff f9f7 	bl	8001c66 <_ZNK5Model9getWeightEv>
 8002878:	4603      	mov	r3, r0
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fba2 	bl	8001fd0 <_ZNK5Model19getBienenwachsPreisEv>
 800288c:	eef0 7a40 	vmov.f32	s15, s0
 8002890:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002894:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8002b3c <_ZN10MainScreen6UpdateEv+0x300>
 8002898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800289c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a0:	ee17 0a90 	vmov	r0, s15
 80028a4:	f7ff fd10 	bl	80022c8 <_ZN5Tools8Round5RpEl>
 80028a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 80028ac:	e02b      	b.n	8002906 <_ZN10MainScreen6UpdateEv+0xca>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fbd6 	bl	8002064 <_ZNK5Model11getWachstypEv>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	bf0c      	ite	eq
 80028be:	2301      	moveq	r3, #1
 80028c0:	2300      	movne	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d01e      	beq.n	8002906 <_ZN10MainScreen6UpdateEv+0xca>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis()/100);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff f9ca 	bl	8001c66 <_ZNK5Model9getWeightEv>
 80028d2:	4603      	mov	r3, r0
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fb9a 	bl	800201a <_ZNK5Model20getParafinwachsPreisEv>
 80028e6:	eef0 7a40 	vmov.f32	s15, s0
 80028ea:	ee28 7a27 	vmul.f32	s14, s16, s15
 80028ee:	eddf 6a93 	vldr	s13, [pc, #588]	; 8002b3c <_ZN10MainScreen6UpdateEv+0x300>
 80028f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fa:	ee17 0a90 	vmov	r0, s15
 80028fe:	f7ff fce3 	bl	80022c8 <_ZN5Tools8Round5RpEl>
 8002902:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	}


	char *asciiWeight = {Tools::intToAsciiChar(model->getWeight(),3)};
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f9ab 	bl	8001c66 <_ZNK5Model9getWeightEv>
 8002910:	4603      	mov	r3, r0
 8002912:	2103      	movs	r1, #3
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fc2b 	bl	8002170 <_ZN5Tools14intToAsciiCharElh>
 800291a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f99f 	bl	8001c66 <_ZNK5Model9getWeightEv>
 8002928:	4603      	mov	r3, r0
 800292a:	b29b      	uxth	r3, r3
 800292c:	0bdb      	lsrs	r3, r3, #15
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <_ZN10MainScreen6UpdateEv+0xfe>
		w[0] = '-';
 8002934:	232d      	movs	r3, #45	; 0x2d
 8002936:	763b      	strb	r3, [r7, #24]
 8002938:	e001      	b.n	800293e <_ZN10MainScreen6UpdateEv+0x102>
	}else{
		w[0] = ' ';
 800293a:	2320      	movs	r3, #32
 800293c:	763b      	strb	r3, [r7, #24]
	}

	w[1] = asciiWeight[0];
 800293e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	767b      	strb	r3, [r7, #25]
	w[2] = asciiWeight[1];
 8002946:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	76bb      	strb	r3, [r7, #26]
	w[3] = asciiWeight[2];
 800294e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	76fb      	strb	r3, [r7, #27]
	w[4] = asciiWeight[3];
 8002956:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	773b      	strb	r3, [r7, #28]
	w[5] = asciiWeight[4];
 800295e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002962:	791b      	ldrb	r3, [r3, #4]
 8002964:	777b      	strb	r3, [r7, #29]
	w[6] = asciiWeight[5];
 8002966:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800296a:	795b      	ldrb	r3, [r3, #5]
 800296c:	77bb      	strb	r3, [r7, #30]
	w[7] = ' ';
 800296e:	2320      	movs	r3, #32
 8002970:	77fb      	strb	r3, [r7, #31]
	w[8] = 'k';
 8002972:	236b      	movs	r3, #107	; 0x6b
 8002974:	f887 3020 	strb.w	r3, [r7, #32]
	w[9] = 'g';
 8002978:	2367      	movs	r3, #103	; 0x67
 800297a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	char* asciiPrize = {Tools::intToAsciiChar(prize, 2)};
 800297e:	2102      	movs	r1, #2
 8002980:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002984:	f7ff fbf4 	bl	8002170 <_ZN5Tools14intToAsciiCharElh>
 8002988:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	p[0] = asciiPrize[0];
 800298c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	733b      	strb	r3, [r7, #12]
	p[1] = asciiPrize[1];
 8002994:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	737b      	strb	r3, [r7, #13]
	p[2] = asciiPrize[2];
 800299c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a0:	789b      	ldrb	r3, [r3, #2]
 80029a2:	73bb      	strb	r3, [r7, #14]
	p[3] = asciiPrize[3];
 80029a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a8:	78db      	ldrb	r3, [r3, #3]
 80029aa:	73fb      	strb	r3, [r7, #15]
	p[4] = asciiPrize[4];
 80029ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b0:	791b      	ldrb	r3, [r3, #4]
 80029b2:	743b      	strb	r3, [r7, #16]
	p[5] = asciiPrize[5];
 80029b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b8:	795b      	ldrb	r3, [r3, #5]
 80029ba:	747b      	strb	r3, [r7, #17]
	p[6] = ' ';
 80029bc:	2320      	movs	r3, #32
 80029be:	74bb      	strb	r3, [r7, #18]
	p[7] = 'F';
 80029c0:	2346      	movs	r3, #70	; 0x46
 80029c2:	74fb      	strb	r3, [r7, #19]
	p[8] = 'r';
 80029c4:	2372      	movs	r3, #114	; 0x72
 80029c6:	753b      	strb	r3, [r7, #20]



	lcd->Write(w,10,2,p,9,3);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6898      	ldr	r0, [r3, #8]
 80029cc:	f107 0118 	add.w	r1, r7, #24
 80029d0:	2303      	movs	r3, #3
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2309      	movs	r3, #9
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	f107 030c 	add.w	r3, r7, #12
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2302      	movs	r3, #2
 80029e0:	220a      	movs	r2, #10
 80029e2:	f7fe fcb3 	bl	800134c <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f991 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00b      	beq.n	8002a0e <_ZN10MainScreen6UpdateEv+0x1d2>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fb3e 	bl	800207e <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f98f 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff f960 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d008      	beq.n	8002a30 <_ZN10MainScreen6UpdateEv+0x1f4>
		screen = Model::E_BW_SETTINGS;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	731a      	strb	r2, [r3, #12]
		model->setT1Long(false);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f961 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f9a6 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00b      	beq.n	8002a58 <_ZN10MainScreen6UpdateEv+0x21c>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2102      	movs	r1, #2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fb19 	bl	800207e <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff f9a4 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff f975 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d008      	beq.n	8002a7a <_ZN10MainScreen6UpdateEv+0x23e>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	731a      	strb	r2, [r3, #12]
		model->setT2Long(false);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f976 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff f99e 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <_ZN10MainScreen6UpdateEv+0x25a>

		model->setT3Long(false);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f9a2 	bl	8001dda <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f9ad 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8091 	beq.w	8002bca <_ZN10MainScreen6UpdateEv+0x38e>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f9b0 	bl	8001e14 <_ZN5Model10setT3ShortEb>
		if(summeActive){
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7b9b      	ldrb	r3, [r3, #14]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d043      	beq.n	8002b44 <_ZN10MainScreen6UpdateEv+0x308>
			lcd->Write("            ", "            ");
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689c      	ldr	r4, [r3, #8]
 8002ac0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f00a f897 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8002aca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	491b      	ldr	r1, [pc, #108]	; (8002b40 <_ZN10MainScreen6UpdateEv+0x304>)
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f00a f933 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00a f88a 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8002ae4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002ae8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002aec:	4914      	ldr	r1, [pc, #80]	; (8002b40 <_ZN10MainScreen6UpdateEv+0x304>)
 8002aee:	4618      	mov	r0, r3
 8002af0:	f00a f926 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002af4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afc:	4619      	mov	r1, r3
 8002afe:	4620      	mov	r0, r4
 8002b00:	f7fe fbc8 	bl	8001294 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8002b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a f8b7 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b12:	4618      	mov	r0, r3
 8002b14:	f00a f871 	bl	800cbfa <_ZNSaIcED1Ev>
 8002b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f00a f8ad 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002b22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b26:	4618      	mov	r0, r3
 8002b28:	f00a f867 	bl	800cbfa <_ZNSaIcED1Ev>
			summeCounter++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7b5b      	ldrb	r3, [r3, #13]
 8002b30:	3301      	adds	r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	735a      	strb	r2, [r3, #13]
 8002b38:	e047      	b.n	8002bca <_ZN10MainScreen6UpdateEv+0x38e>
 8002b3a:	bf00      	nop
 8002b3c:	42c80000 	.word	0x42c80000
 8002b40:	0800d048 	.word	0x0800d048
		}else{
			summeActive = true;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	739a      	strb	r2, [r3, #14]
			summeCounter= 1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	735a      	strb	r2, [r3, #13]
			lcd->Write("            ", "            ");
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689c      	ldr	r4, [r3, #8]
 8002b54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00a f84d 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8002b5e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002b62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b66:	494d      	ldr	r1, [pc, #308]	; (8002c9c <_ZN10MainScreen6UpdateEv+0x460>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00a f8e9 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b72:	4618      	mov	r0, r3
 8002b74:	f00a f840 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8002b78:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002b7c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b80:	4946      	ldr	r1, [pc, #280]	; (8002c9c <_ZN10MainScreen6UpdateEv+0x460>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	f00a f8dc 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002b88:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002b8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b90:	4619      	mov	r1, r3
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7fe fb7e 	bl	8001294 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8002b98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f00a f86d 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002ba2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f00a f827 	bl	800cbfa <_ZNSaIcED1Ev>
 8002bac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f00a f863 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002bb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f00a f81d 	bl	800cbfa <_ZNSaIcED1Ev>
			HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4836      	ldr	r0, [pc, #216]	; (8002ca0 <_ZN10MainScreen6UpdateEv+0x464>)
 8002bc6:	f002 fa2f 	bl	8005028 <HAL_GPIO_WritePin>
		}
	}

	//------------------Total------------------
	if(model->isT4Long()){
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f930 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <_ZN10MainScreen6UpdateEv+0x3b0>
		model->setT4Long(false);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f934 	bl	8001e4e <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2204      	movs	r2, #4
 8002bea:	731a      	strb	r2, [r3, #12]
	}
	if(model->isT4Short()){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff f93c 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <_ZN10MainScreen6UpdateEv+0x3e2>
		model->setT4Short(false);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff f940 	bl	8001e88 <_ZN5Model10setT4ShortEb>
		summeActive = false;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	739a      	strb	r2, [r3, #14]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	2101      	movs	r1, #1
 8002c12:	4823      	ldr	r0, [pc, #140]	; (8002ca0 <_ZN10MainScreen6UpdateEv+0x464>)
 8002c14:	f002 fa08 	bl	8005028 <HAL_GPIO_WritePin>
		summeCounter = 0;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	735a      	strb	r2, [r3, #13]
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff f940 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <_ZN10MainScreen6UpdateEv+0x404>
		screen = Model::E_TIME_SETTINGS;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2205      	movs	r2, #5
 8002c32:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f941 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f94c 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01d      	beq.n	8002c8c <_ZN10MainScreen6UpdateEv+0x450>
		model->setLoadCellOffset1(model->getLoadCell1());
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685c      	ldr	r4, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe ff79 	bl	8001b50 <_ZNK5Model12getLoadCell1Ev>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7ff f99a 	bl	8001f9c <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685c      	ldr	r4, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ff87 	bl	8001b84 <_ZNK5Model12getLoadCell2Ev>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff fa3e 	bl	80020fc <_ZN5Model18setLoadCellOffset2El>
		model->setT5Short(false);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff f938 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}

	return screen;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7b1b      	ldrb	r3, [r3, #12]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	37a4      	adds	r7, #164	; 0xa4
 8002c94:	46bd      	mov	sp, r7
 8002c96:	ecbd 8b02 	vpop	{d8}
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	0800d048 	.word	0x0800d048
 8002ca0:	48000400 	.word	0x48000400

08002ca4 <_ZN10PWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd) : BaseScreen() {
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fd9a 	bl	80027ec <_ZN10BaseScreenC1Ev>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f103 0410 	add.w	r4, r3, #16
 8002cbe:	f107 0314 	add.w	r3, r7, #20
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f009 ff98 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	461a      	mov	r2, r3
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <_ZN10PWSettingsC1EP5ModelP3LCD+0x54>)
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f00a f835 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002cd6:	f107 0314 	add.w	r3, r7, #20
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f009 ff8d 	bl	800cbfa <_ZNSaIcED1Ev>
	this->model = model;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
}
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	0800d058 	.word	0x0800d058

08002cfc <_ZN10PWSettings6UpdateEv>:



Model::ESCREEN PWSettings::Update(){
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b093      	sub	sp, #76	; 0x4c
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	6078      	str	r0, [r7, #4]

	screen = Model::E_PW_SETTINGS;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	731a      	strb	r2, [r3, #12]

	int preis = model->getParafinwachsPreis();
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff f983 	bl	800201a <_ZNK5Model20getParafinwachsPreisEv>
 8002d14:	eef0 7a40 	vmov.f32	s15, s0
 8002d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1c:	ee17 3a90 	vmov	r3, s15
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c

	if(!init){
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7b9b      	ldrb	r3, [r3, #14]
 8002d26:	f083 0301 	eor.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02e      	beq.n	8002d8e <_ZN10PWSettings6UpdateEv+0x92>
		position = 0;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	735a      	strb	r2, [r3, #13]
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689c      	ldr	r4, [r3, #8]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f103 0210 	add.w	r2, r3, #16
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f009 ffc8 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	4619      	mov	r1, r3
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f97f 	bl	8003054 <_ZN10PWSettings16prizeToCharArrayEm>
 8002d56:	4602      	mov	r2, r0
 8002d58:	f107 010c 	add.w	r1, r7, #12
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	230c      	movs	r3, #12
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	2200      	movs	r2, #0
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7fe fb5c 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	4618      	mov	r0, r3
 8002d74:	f009 ff82 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6898      	ldr	r0, [r3, #8]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	7b59      	ldrb	r1, [r3, #13]
 8002d80:	2301      	movs	r3, #1
 8002d82:	2202      	movs	r2, #2
 8002d84:	f7fe fbbc 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe ffbd 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d025      	beq.n	8002dea <_ZN10PWSettings6UpdateEv+0xee>
		//Change position
		if(position >= 4){
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	7b5b      	ldrb	r3, [r3, #13]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d903      	bls.n	8002dae <_ZN10PWSettings6UpdateEv+0xb2>
			position = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	735a      	strb	r2, [r3, #13]
 8002dac:	e00f      	b.n	8002dce <_ZN10PWSettings6UpdateEv+0xd2>
		}else{
			position++;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7b5b      	ldrb	r3, [r3, #13]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7b5b      	ldrb	r3, [r3, #13]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d105      	bne.n	8002dce <_ZN10PWSettings6UpdateEv+0xd2>
				position++;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7b5b      	ldrb	r3, [r3, #13]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	735a      	strb	r2, [r3, #13]
			}
		}


		lcd->SetCursorPosition(position, 2,true);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6898      	ldr	r0, [r3, #8]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7b59      	ldrb	r1, [r3, #13]
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f7fe fb91 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe ffa1 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fe ff72 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <_ZN10PWSettings6UpdateEv+0x10a>
		model->setT1Long(false);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fe ff76 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe ffbb 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80aa 	beq.w	8002f6c <_ZN10PWSettings6UpdateEv+0x270>

		if(position == 0){
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7b5b      	ldrb	r3, [r3, #13]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d110      	bne.n	8002e42 <_ZN10PWSettings6UpdateEv+0x146>
			if(preis/1000 == 9){
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002e26:	3b28      	subs	r3, #40	; 0x28
 8002e28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2c:	d205      	bcs.n	8002e3a <_ZN10PWSettings6UpdateEv+0x13e>
				preis -= 9000;
 8002e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e30:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002e34:	3b28      	subs	r3, #40	; 0x28
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e38:	e003      	b.n	8002e42 <_ZN10PWSettings6UpdateEv+0x146>
			}else{
				preis += 1000;
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002e40:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 1){
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	7b5b      	ldrb	r3, [r3, #13]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d11c      	bne.n	8002e84 <_ZN10PWSettings6UpdateEv+0x188>
			if((preis/100 - (preis/1000)*10) == 9){
 8002e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4c:	4a7e      	ldr	r2, [pc, #504]	; (8003048 <_ZN10PWSettings6UpdateEv+0x34c>)
 8002e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002e52:	1152      	asrs	r2, r2, #5
 8002e54:	17db      	asrs	r3, r3, #31
 8002e56:	1ad1      	subs	r1, r2, r3
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	4a7c      	ldr	r2, [pc, #496]	; (800304c <_ZN10PWSettings6UpdateEv+0x350>)
 8002e5c:	fb82 0203 	smull	r0, r2, r2, r3
 8002e60:	1192      	asrs	r2, r2, #6
 8002e62:	17db      	asrs	r3, r3, #31
 8002e64:	1a9a      	subs	r2, r3, r2
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	440b      	add	r3, r1
 8002e70:	2b09      	cmp	r3, #9
 8002e72:	d104      	bne.n	8002e7e <_ZN10PWSettings6UpdateEv+0x182>
				preis -= 900;
 8002e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e76:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e7c:	e002      	b.n	8002e84 <_ZN10PWSettings6UpdateEv+0x188>
			}else{
				preis += 100;
 8002e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e80:	3364      	adds	r3, #100	; 0x64
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}

		if(position == 3){
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	7b5b      	ldrb	r3, [r3, #13]
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d11b      	bne.n	8002ec4 <_ZN10PWSettings6UpdateEv+0x1c8>
			if((preis/10 - (preis/100)*10) == 9){
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	4a70      	ldr	r2, [pc, #448]	; (8003050 <_ZN10PWSettings6UpdateEv+0x354>)
 8002e90:	fb82 1203 	smull	r1, r2, r2, r3
 8002e94:	1092      	asrs	r2, r2, #2
 8002e96:	17db      	asrs	r3, r3, #31
 8002e98:	1ad1      	subs	r1, r2, r3
 8002e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9c:	4a6a      	ldr	r2, [pc, #424]	; (8003048 <_ZN10PWSettings6UpdateEv+0x34c>)
 8002e9e:	fb82 0203 	smull	r0, r2, r2, r3
 8002ea2:	1152      	asrs	r2, r2, #5
 8002ea4:	17db      	asrs	r3, r3, #31
 8002ea6:	1a9a      	subs	r2, r3, r2
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	d103      	bne.n	8002ebe <_ZN10PWSettings6UpdateEv+0x1c2>
				preis -= 90;
 8002eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb8:	3b5a      	subs	r3, #90	; 0x5a
 8002eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebc:	e002      	b.n	8002ec4 <_ZN10PWSettings6UpdateEv+0x1c8>
			}else{
				preis += 10;
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	330a      	adds	r3, #10
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}


		if(position == 4){
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	7b5b      	ldrb	r3, [r3, #13]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d114      	bne.n	8002ef6 <_ZN10PWSettings6UpdateEv+0x1fa>
			if((preis - (preis/10)*10 ) == 0){
 8002ecc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <_ZN10PWSettings6UpdateEv+0x354>)
 8002ed0:	fb83 2301 	smull	r2, r3, r3, r1
 8002ed4:	109a      	asrs	r2, r3, #2
 8002ed6:	17cb      	asrs	r3, r1, #31
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	1aca      	subs	r2, r1, r3
 8002ee4:	2a00      	cmp	r2, #0
 8002ee6:	d103      	bne.n	8002ef0 <_ZN10PWSettings6UpdateEv+0x1f4>
				preis += 5;
 8002ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eea:	3305      	adds	r3, #5
 8002eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eee:	e002      	b.n	8002ef6 <_ZN10PWSettings6UpdateEv+0x1fa>
			}else{
				preis -= 5;
 8002ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef2:	3b05      	subs	r3, #5
 8002ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
		}
		model->setParafinwachsPreis(preis);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002efc:	ee07 2a90 	vmov	s15, r2
 8002f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f897 	bl	800203c <_ZN5Model20setParafinwachsPreisEf>
		lcd->Write(line1,0,prizeToCharArray(preis),12,0);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689c      	ldr	r4, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f103 0210 	add.w	r2, r3, #16
 8002f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f009 fedc 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8002f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f893 	bl	8003054 <_ZN10PWSettings16prizeToCharArrayEm>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002f34:	2300      	movs	r3, #0
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	230c      	movs	r3, #12
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7fe fa70 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f009 fe96 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6898      	ldr	r0, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7b59      	ldrb	r1, [r3, #13]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f7fe fad0 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2100      	movs	r1, #0
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe ff1a 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe feeb 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <_ZN10PWSettings6UpdateEv+0x28c>
		model->setT2Long(false);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe feef 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe ff34 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <_ZN10PWSettings6UpdateEv+0x2a8>
		//-

		model->setT3Short(false);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe ff38 	bl	8001e14 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe ff09 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <_ZN10PWSettings6UpdateEv+0x2c4>
		model->setT3Long(false);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fe ff0d 	bl	8001dda <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe ff35 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <_ZN10PWSettings6UpdateEv+0x2e0>
		model->setT4Long(false);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe ff39 	bl	8001e4e <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe ff44 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <_ZN10PWSettings6UpdateEv+0x2fc>
		model->setT4Short(false);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe ff48 	bl	8001e88 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fe ff53 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <_ZN10PWSettings6UpdateEv+0x324>
		//Neuer Wert speichern
		init = false;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f7fe ff51 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ff5c 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <_ZN10PWSettings6UpdateEv+0x340>
		model->setT5Short(false);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe ff60 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}

	return screen;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7b1b      	ldrb	r3, [r3, #12]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3744      	adds	r7, #68	; 0x44
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	51eb851f 	.word	0x51eb851f
 800304c:	10624dd3 	.word	0x10624dd3
 8003050:	66666667 	.word	0x66666667

08003054 <_ZN10PWSettings16prizeToCharArrayEm>:


char* PWSettings::prizeToCharArray(uint32_t prize){
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
	char *p = Tools::intToAsciiChar(prize, 2);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2102      	movs	r1, #2
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f884 	bl	8002170 <_ZN5Tools14intToAsciiCharElh>
 8003068:	60b8      	str	r0, [r7, #8]
	static char result[12];

	for(uint8_t i = 0; i<5;i++){
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d80b      	bhi.n	800308c <_ZN10PWSettings16prizeToCharArrayEm+0x38>
		result[i] = p[i+1];
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	3301      	adds	r3, #1
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	441a      	add	r2, r3
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	7811      	ldrb	r1, [r2, #0]
 8003080:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003082:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<5;i++){
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	3301      	adds	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e7f0      	b.n	800306e <_ZN10PWSettings16prizeToCharArrayEm+0x1a>
	}

	result[5] = ' ';
 800308c:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800308e:	2220      	movs	r2, #32
 8003090:	715a      	strb	r2, [r3, #5]
	result[6] = 'F';
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 8003094:	2246      	movs	r2, #70	; 0x46
 8003096:	719a      	strb	r2, [r3, #6]
	result[7] = 'r';
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 800309a:	2272      	movs	r2, #114	; 0x72
 800309c:	71da      	strb	r2, [r3, #7]
	result[8] = '/';
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030a0:	222f      	movs	r2, #47	; 0x2f
 80030a2:	721a      	strb	r2, [r3, #8]
	result[9] = '1';
 80030a4:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030a6:	2231      	movs	r2, #49	; 0x31
 80030a8:	725a      	strb	r2, [r3, #9]
	result[10] = '0';
 80030aa:	4b07      	ldr	r3, [pc, #28]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030ac:	2230      	movs	r2, #48	; 0x30
 80030ae:	729a      	strb	r2, [r3, #10]
	result[11] = '0';
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030b2:	2230      	movs	r2, #48	; 0x30
 80030b4:	72da      	strb	r2, [r3, #11]
	result[12] = 'g';
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
 80030b8:	2267      	movs	r2, #103	; 0x67
 80030ba:	731a      	strb	r2, [r3, #12]
	return result;
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <_ZN10PWSettings16prizeToCharArrayEm+0x74>)
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000308 	.word	0x20000308

080030cc <_ZN13ScreenControlC1EP5ModelP8Kontrast>:
#include <string>




ScreenControl::ScreenControl(Model *model, Kontrast *contrast) {
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
	this->model = model;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	605a      	str	r2, [r3, #4]
	this->contrast = contrast;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
	lcd  = new  LCD();
 80030e4:	2001      	movs	r0, #1
 80030e6:	f009 fd6e 	bl	800cbc6 <_Znwj>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461c      	mov	r4, r3
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fe f860 	bl	80011b4 <_ZN3LCDC1Ev>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609c      	str	r4, [r3, #8]
	mainScreen = new MainScreen(model, lcd);
 80030f8:	2010      	movs	r0, #16
 80030fa:	f009 fd64 	bl	800cbc6 <_Znwj>
 80030fe:	4603      	mov	r3, r0
 8003100:	461c      	mov	r4, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	461a      	mov	r2, r3
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff fb7d 	bl	800280a <_ZN10MainScreenC1EP5ModelP3LCD>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	60dc      	str	r4, [r3, #12]
	pwSettings = new PWSettings(model, lcd);
 8003114:	2028      	movs	r0, #40	; 0x28
 8003116:	f009 fd56 	bl	800cbc6 <_Znwj>
 800311a:	4603      	mov	r3, r0
 800311c:	461c      	mov	r4, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	461a      	mov	r2, r3
 8003124:	68b9      	ldr	r1, [r7, #8]
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff fdbc 	bl	8002ca4 <_ZN10PWSettingsC1EP5ModelP3LCD>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	611c      	str	r4, [r3, #16]
	bwSettings = new BWSettings(model, lcd);
 8003130:	2028      	movs	r0, #40	; 0x28
 8003132:	f009 fd48 	bl	800cbc6 <_Znwj>
 8003136:	4603      	mov	r3, r0
 8003138:	461c      	mov	r4, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	461a      	mov	r2, r3
 8003140:	68b9      	ldr	r1, [r7, #8]
 8003142:	4620      	mov	r0, r4
 8003144:	f7ff f93c 	bl	80023c0 <_ZN10BWSettingsC1EP5ModelP3LCD>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	615c      	str	r4, [r3, #20]
	timeSettings = new TimeSettings(model, lcd);
 800314c:	2024      	movs	r0, #36	; 0x24
 800314e:	f009 fd3a 	bl	800cbc6 <_Znwj>
 8003152:	4603      	mov	r3, r0
 8003154:	461c      	mov	r4, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	461a      	mov	r2, r3
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	4620      	mov	r0, r4
 8003160:	f001 f8fa 	bl	8004358 <_ZN12TimeSettingsC1EP5ModelP3LCD>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	619c      	str	r4, [r3, #24]
	dateSettings = new DateSettings(model, lcd);
 8003168:	2028      	movs	r0, #40	; 0x28
 800316a:	f009 fd2c 	bl	800cbc6 <_Znwj>
 800316e:	4603      	mov	r3, r0
 8003170:	461c      	mov	r4, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	461a      	mov	r2, r3
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4620      	mov	r0, r4
 800317c:	f000 fcc8 	bl	8003b10 <_ZN12DateSettingsC1EP5ModelP3LCD>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	61dc      	str	r4, [r3, #28]
	timeScreen = new TimeScreen(model, lcd);
 8003184:	200c      	movs	r0, #12
 8003186:	f009 fd1e 	bl	800cbc6 <_Znwj>
 800318a:	4603      	mov	r3, r0
 800318c:	461c      	mov	r4, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	461a      	mov	r2, r3
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4620      	mov	r0, r4
 8003198:	f000 f8f8 	bl	800338c <_ZN10TimeScreenC1EP5ModelP3LCD>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	621c      	str	r4, [r3, #32]
	kontrastSettings = new Contrast(model, lcd, contrast);
 80031a0:	202c      	movs	r0, #44	; 0x2c
 80031a2:	f009 fd10 	bl	800cbc6 <_Znwj>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461c      	mov	r4, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4620      	mov	r0, r4
 80031b4:	f000 fa52 	bl	800365c <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	625c      	str	r4, [r3, #36]	; 0x24
}
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd90      	pop	{r4, r7, pc}
	...

080031c8 <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b09d      	sub	sp, #116	; 0x74
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	lcd->InitLCD();
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fff9 	bl	80011cc <_ZN3LCD7InitLCDEv>

	string i = "10.000 kg";
 80031da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031de:	4618      	mov	r0, r3
 80031e0:	f009 fd0a 	bl	800cbf8 <_ZNSaIcEC1Ev>
 80031e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031e8:	f107 0320 	add.w	r3, r7, #32
 80031ec:	4929      	ldr	r1, [pc, #164]	; (8003294 <_ZN13ScreenControl10InitScreenEv+0xcc>)
 80031ee:	4618      	mov	r0, r3
 80031f0:	f009 fda6 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80031f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031f8:	4618      	mov	r0, r3
 80031fa:	f009 fcfe 	bl	800cbfa <_ZNSaIcED1Ev>
	string a = "02.25 Fr";
 80031fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003202:	4618      	mov	r0, r3
 8003204:	f009 fcf8 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8003208:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	4921      	ldr	r1, [pc, #132]	; (8003298 <_ZN13ScreenControl10InitScreenEv+0xd0>)
 8003212:	4618      	mov	r0, r3
 8003214:	f009 fd94 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003218:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800321c:	4618      	mov	r0, r3
 800321e:	f009 fcec 	bl	800cbfa <_ZNSaIcED1Ev>
	lcd->Write(i,a);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689c      	ldr	r4, [r3, #8]
 8003226:	f107 0220 	add.w	r2, r7, #32
 800322a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f009 fd53 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003236:	f107 0208 	add.w	r2, r7, #8
 800323a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f009 fd4b 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003246:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800324a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800324e:	4619      	mov	r1, r3
 8003250:	4620      	mov	r0, r4
 8003252:	f7fe f81f 	bl	8001294 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 8003256:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800325a:	4618      	mov	r0, r3
 800325c:	f009 fd0e 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003260:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003264:	4618      	mov	r0, r3
 8003266:	f009 fd09 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	currentScreen = Model::E_MAIN_SCRREN;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2203      	movs	r2, #3
 800326e:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2203      	movs	r2, #3
 8003274:	705a      	strb	r2, [r3, #1]
	string a = "02.25 Fr";
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	4618      	mov	r0, r3
 800327c:	f009 fcfe 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string i = "10.000 kg";
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	4618      	mov	r0, r3
 8003286:	f009 fcf9 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 800328a:	bf00      	nop
 800328c:	3774      	adds	r7, #116	; 0x74
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	0800d068 	.word	0x0800d068
 8003298:	0800d074 	.word	0x0800d074

0800329c <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	785a      	ldrb	r2, [r3, #1]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b07      	cmp	r3, #7
 80032b2:	d85a      	bhi.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
 80032b4:	a201      	add	r2, pc, #4	; (adr r2, 80032bc <_ZN13ScreenControl6UpdateEv+0x20>)
 80032b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ba:	bf00      	nop
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	08003305 	.word	0x08003305
 80032c4:	08003369 	.word	0x08003369
 80032c8:	080032dd 	.word	0x080032dd
 80032cc:	08003341 	.word	0x08003341
 80032d0:	08003319 	.word	0x08003319
 80032d4:	0800332d 	.word	0x0800332d
 80032d8:	08003355 	.word	0x08003355

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff faab 	bl	800283c <_ZN10MainScreen6UpdateEv>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	705a      	strb	r2, [r3, #1]
		break;
 80032ee:	e03c      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff f891 	bl	800241c <_ZN10BWSettings6UpdateEv>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	705a      	strb	r2, [r3, #1]
		break;
 8003302:	e032      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_PW_SETTINGS:
		nextScreen = pwSettings->Update();
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fcf7 	bl	8002cfc <_ZN10PWSettings6UpdateEv>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	705a      	strb	r2, [r3, #1]
		break;
 8003316:	e028      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_TIME_SETTINGS:
		nextScreen = timeSettings->Update();
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	4618      	mov	r0, r3
 800331e:	f001 f843 	bl	80043a8 <_ZN12TimeSettings6UpdateEv>
 8003322:	4603      	mov	r3, r0
 8003324:	461a      	mov	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	705a      	strb	r2, [r3, #1]
		break;
 800332a:	e01e      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_DATE_SETTINGS:
		nextScreen = dateSettings->Update();
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fc19 	bl	8003b68 <_ZN12DateSettings6UpdateEv>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	705a      	strb	r2, [r3, #1]
		break;
 800333e:	e014      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_LOG_BOOK:
		break;
	case Model::E_TIME:
		nextScreen =timeScreen->Update();
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 f835 	bl	80033b4 <_ZN10TimeScreen6UpdateEv>
 800334a:	4603      	mov	r3, r0
 800334c:	461a      	mov	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	705a      	strb	r2, [r3, #1]
	break;
 8003352:	e00a      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
	case Model::E_KONTRAST_SETTINGS:
		nextScreen = kontrastSettings->Update();
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f9b7 	bl	80036cc <_ZN8Contrast6UpdateEv>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	705a      	strb	r2, [r3, #1]
		break;
 8003366:	e000      	b.n	800336a <_ZN13ScreenControl6UpdateEv+0xce>
		break;
 8003368:	bf00      	nop
	}
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop

08003374 <_ZN13ScreenControl16getCurrentScreenEv>:


Model::ESCREEN ScreenControl::getCurrentScreen(){
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	return this->currentScreen;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	781b      	ldrb	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <_ZN10TimeScreenC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "TimeScreen.h"

TimeScreen::TimeScreen(Model *model, LCD *lcd) {
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
	this->model= model;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	605a      	str	r2, [r3, #4]

}
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <_ZN10TimeScreen6UpdateEv>:

Model::ESCREEN TimeScreen::Update(){
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b08d      	sub	sp, #52	; 0x34
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2204      	movs	r2, #4
 80033c0:	721a      	strb	r2, [r3, #8]

	lcd->Write("Zeit",0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685c      	ldr	r4, [r3, #4]
 80033c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ca:	4618      	mov	r0, r3
 80033cc:	f009 fc14 	bl	800cbf8 <_ZNSaIcEC1Ev>
 80033d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	4963      	ldr	r1, [pc, #396]	; (8003568 <_ZN10TimeScreen6UpdateEv+0x1b4>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f009 fcb0 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fb96 	bl	8001b16 <_ZNK5Model7getHourEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461d      	mov	r5, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe fbe0 	bl	8001bb8 <_ZNK5Model9getMinuteEv>
 80033f8:	4603      	mov	r3, r0
 80033fa:	461e      	mov	r6, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe fc13 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 8003406:	4603      	mov	r3, r0
 8003408:	4632      	mov	r2, r6
 800340a:	4629      	mov	r1, r5
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8ad 	bl	800356c <_ZN10TimeScreen15TimeToCharArrayEhhh>
 8003412:	4602      	mov	r2, r0
 8003414:	f107 010c 	add.w	r1, r7, #12
 8003418:	2304      	movs	r3, #4
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	2308      	movs	r3, #8
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	2200      	movs	r2, #0
 8003424:	4620      	mov	r0, r4
 8003426:	f7fd fffe 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 800342a:	f107 030c 	add.w	r3, r7, #12
 800342e:	4618      	mov	r0, r3
 8003430:	f009 fc24 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003438:	4618      	mov	r0, r3
 800343a:	f009 fbde 	bl	800cbfa <_ZNSaIcED1Ev>

	//------------------SW_BW------------------
	if(model->isT1Short()){
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fc65 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <_ZN10TimeScreen6UpdateEv+0xa6>
		model->setT1Short(false);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fc69 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fc3a 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d005      	beq.n	8003476 <_ZN10TimeScreen6UpdateEv+0xc2>
		model->setT1Long(false);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fc3e 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fc83 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <_ZN10TimeScreen6UpdateEv+0xde>
		model->setT2Short(false);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fc87 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe fc58 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <_ZN10TimeScreen6UpdateEv+0xfa>
		model->setT2Long(false);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fc5c 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fca1 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <_ZN10TimeScreen6UpdateEv+0x116>
		//-

		model->setT3Short(false);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7fe fca5 	bl	8001e14 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fc76 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <_ZN10TimeScreen6UpdateEv+0x132>
		model->setT3Long(false);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fc7a 	bl	8001dda <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fca2 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d005      	beq.n	8003502 <_ZN10TimeScreen6UpdateEv+0x14e>
		model->setT4Long(false);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fe fca6 	bl	8001e4e <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fcb1 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <_ZN10TimeScreen6UpdateEv+0x16a>
		model->setT4Short(false);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2100      	movs	r1, #0
 8003518:	4618      	mov	r0, r3
 800351a:	f7fe fcb5 	bl	8001e88 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fe fcc0 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <_ZN10TimeScreen6UpdateEv+0x18c>
		screen = Model::E_MAIN_SCRREN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	721a      	strb	r2, [r3, #8]
		model->setT5Long(false);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fcc1 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe fccc 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <_ZN10TimeScreen6UpdateEv+0x1a8>
		model->setT5Short(false);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fcd0 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}

	return screen;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7a1b      	ldrb	r3, [r3, #8]
}
 8003560:	4618      	mov	r0, r3
 8003562:	372c      	adds	r7, #44	; 0x2c
 8003564:	46bd      	mov	sp, r7
 8003566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003568:	0800d080 	.word	0x0800d080

0800356c <_ZN10TimeScreen15TimeToCharArrayEhhh>:

char* TimeScreen::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	4608      	mov	r0, r1
 8003576:	4611      	mov	r1, r2
 8003578:	461a      	mov	r2, r3
 800357a:	4603      	mov	r3, r0
 800357c:	70fb      	strb	r3, [r7, #3]
 800357e:	460b      	mov	r3, r1
 8003580:	70bb      	strb	r3, [r7, #2]
 8003582:	4613      	mov	r3, r2
 8003584:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	4a32      	ldr	r2, [pc, #200]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	08db      	lsrs	r3, r3, #3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3330      	adds	r3, #48	; 0x30
 8003594:	b2da      	uxtb	r2, r3
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003598:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 800359a:	78fb      	ldrb	r3, [r7, #3]
 800359c:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	461a      	mov	r2, r3
 80035a8:	0152      	lsls	r2, r2, #5
 80035aa:	1ad2      	subs	r2, r2, r3
 80035ac:	0092      	lsls	r2, r2, #2
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	b2da      	uxtb	r2, r3
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	4413      	add	r3, r2
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	3330      	adds	r3, #48	; 0x30
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b26      	ldr	r3, [pc, #152]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035c0:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 80035c2:	4b25      	ldr	r3, [pc, #148]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035c4:	223a      	movs	r2, #58	; 0x3a
 80035c6:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 80035c8:	78bb      	ldrb	r3, [r7, #2]
 80035ca:	4a22      	ldr	r2, [pc, #136]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	08db      	lsrs	r3, r3, #3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3330      	adds	r3, #48	; 0x30
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 80035da:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 80035dc:	78bb      	ldrb	r3, [r7, #2]
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	0152      	lsls	r2, r2, #5
 80035ec:	1ad2      	subs	r2, r2, r3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	78bb      	ldrb	r3, [r7, #2]
 80035f8:	4413      	add	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	3330      	adds	r3, #48	; 0x30
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003602:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003606:	223a      	movs	r2, #58	; 0x3a
 8003608:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 800360a:	787b      	ldrb	r3, [r7, #1]
 800360c:	4a11      	ldr	r2, [pc, #68]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3330      	adds	r3, #48	; 0x30
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 800361c:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 800361e:	787b      	ldrb	r3, [r7, #1]
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xe8>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	0152      	lsls	r2, r2, #5
 800362e:	1ad2      	subs	r2, r2, r3
 8003630:	0092      	lsls	r2, r2, #2
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	b2da      	uxtb	r2, r3
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	4413      	add	r3, r2
 800363c:	b2db      	uxtb	r3, r3
 800363e:	3330      	adds	r3, #48	; 0x30
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
 8003644:	71da      	strb	r2, [r3, #7]
	return result;
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <_ZN10TimeScreen15TimeToCharArrayEhhh+0xec>)
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	cccccccd 	.word	0xcccccccd
 8003658:	20000314 	.word	0x20000314

0800365c <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast>:
 */

#include "Contrast.h"
#include "../../Model/Tools.h"

Contrast::Contrast(Model *model, LCD *lcd, Kontrast *contrast) {
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f103 0410 	add.w	r4, r3, #16
 8003670:	f107 0314 	add.w	r3, r7, #20
 8003674:	4618      	mov	r0, r3
 8003676:	f009 fabf 	bl	800cbf8 <_ZNSaIcEC1Ev>
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	461a      	mov	r2, r3
 8003680:	4911      	ldr	r1, [pc, #68]	; (80036c8 <_ZN8ContrastC1EP5ModelP3LCDP8Kontrast+0x6c>)
 8003682:	4620      	mov	r0, r4
 8003684:	f009 fb5c 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003688:	f107 0314 	add.w	r3, r7, #20
 800368c:	4618      	mov	r0, r3
 800368e:	f009 fab4 	bl	800cbfa <_ZNSaIcED1Ev>
	this->model = model;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	609a      	str	r2, [r3, #8]
	this->init = false;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	this->contrast = contrast;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	60da      	str	r2, [r3, #12]
	kontrast = model->getKontrast();
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f7fe fd33 	bl	8002118 <_ZNK5Model11getKontrastEv>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4618      	mov	r0, r3
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd90      	pop	{r4, r7, pc}
 80036c6:	bf00      	nop
 80036c8:	0800d088 	.word	0x0800d088

080036cc <_ZN8Contrast6UpdateEv>:

Model::ESCREEN Contrast::Update(void) {
 80036cc:	b590      	push	{r4, r7, lr}
 80036ce:	b0a3      	sub	sp, #140	; 0x8c
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
		screen = Model::E_KONTRAST_SETTINGS;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2207      	movs	r2, #7
 80036d8:	701a      	strb	r2, [r3, #0]


		if(!init){
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02f      	beq.n	800374a <_ZN8Contrast6UpdateEv+0x7e>

			lcd->Write(line1,0,Tools::byteToAscii(model->getKontrast()),3,9);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689c      	ldr	r4, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f103 0210 	add.w	r2, r3, #16
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f009 faee 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fe fd07 	bl	8002118 <_ZNK5Model11getKontrastEv>
 800370a:	4603      	mov	r3, r0
 800370c:	4618      	mov	r0, r3
 800370e:	f7fe fe0d 	bl	800232c <_ZN5Tools11byteToAsciiEh>
 8003712:	4602      	mov	r2, r0
 8003714:	f107 0108 	add.w	r1, r7, #8
 8003718:	2309      	movs	r3, #9
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	2303      	movs	r3, #3
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	2200      	movs	r2, #0
 8003724:	4620      	mov	r0, r4
 8003726:	f7fd fe7e 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4618      	mov	r0, r3
 8003730:	f009 faa4 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			lcd->SetCursorPosition(11, 2,true);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6898      	ldr	r0, [r3, #8]
 8003738:	2301      	movs	r3, #1
 800373a:	2202      	movs	r2, #2
 800373c:	210b      	movs	r1, #11
 800373e:	f7fd fedf 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
			init = true;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}



		if(HAL_GPIO_ReadPin(SW_PW_GPIO_Port, SW_PW_Pin) == GPIO_PIN_RESET){
 800374a:	2120      	movs	r1, #32
 800374c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003750:	f001 fc52 	bl	8004ff8 <HAL_GPIO_ReadPin>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	bf0c      	ite	eq
 800375a:	2301      	moveq	r3, #1
 800375c:	2300      	movne	r3, #0
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d005      	beq.n	8003770 <_ZN8Contrast6UpdateEv+0xa4>
			model->setT2Long(false);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fafb 	bl	8001d66 <_ZN5Model9setT2LongEb>
		}
		if(HAL_GPIO_ReadPin(SW_SUM_GPIO_Port, SW_SUM_Pin) == GPIO_PIN_RESET){
 8003770:	2180      	movs	r1, #128	; 0x80
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003776:	f001 fc3f 	bl	8004ff8 <HAL_GPIO_ReadPin>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d005      	beq.n	8003796 <_ZN8Contrast6UpdateEv+0xca>
			model->setT3Long(false);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe fb22 	bl	8001dda <_ZN5Model9setT3LongEb>
		}

		//------------------SW_BW------------------
		if(model->isT1Short()){
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fe fab9 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <_ZN8Contrast6UpdateEv+0xe6>
			model->setT1Short(false);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fe fabd 	bl	8001d2c <_ZN5Model10setT1ShortEb>
		}
		if(model->isT1Long()){
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fa8e 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <_ZN8Contrast6UpdateEv+0x102>
			model->setT1Long(false);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2100      	movs	r1, #0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fa92 	bl	8001cf2 <_ZN5Model9setT1LongEb>
		}

		//------------------SW_PW------------------
		if(model->isT2Short()){
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fe fad7 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04f      	beq.n	800387e <_ZN8Contrast6UpdateEv+0x1b2>
			if(kontrast < 100){
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037e4:	2b63      	cmp	r3, #99	; 0x63
 80037e6:	d844      	bhi.n	8003872 <_ZN8Contrast6UpdateEv+0x1a6>
				model->setKontrast(kontrast++);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6858      	ldr	r0, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	b2d1      	uxtb	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 80037fc:	4619      	mov	r1, r3
 80037fe:	f7fe fc98 	bl	8002132 <_ZN5Model11setKontrastEh>
				lcd->Write(line1,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689c      	ldr	r4, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 0210 	add.w	r2, r3, #16
 800380c:	f107 0320 	add.w	r3, r7, #32
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f009 fa62 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fe fc7b 	bl	8002118 <_ZNK5Model11getKontrastEv>
 8003822:	4603      	mov	r3, r0
 8003824:	4618      	mov	r0, r3
 8003826:	f7fe fd81 	bl	800232c <_ZN5Tools11byteToAsciiEh>
 800382a:	4602      	mov	r2, r0
 800382c:	f107 0120 	add.w	r1, r7, #32
 8003830:	2309      	movs	r3, #9
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	2303      	movs	r3, #3
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	2200      	movs	r2, #0
 800383c:	4620      	mov	r0, r4
 800383e:	f7fd fdf2 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003842:	f107 0320 	add.w	r3, r7, #32
 8003846:	4618      	mov	r0, r3
 8003848:	f009 fa18 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				lcd->SetCursorPosition(11, 2,true);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6898      	ldr	r0, [r3, #8]
 8003850:	2301      	movs	r3, #1
 8003852:	2202      	movs	r2, #2
 8003854:	210b      	movs	r1, #11
 8003856:	f7fd fe53 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003864:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	4610      	mov	r0, r2
 800386e:	f7fd fc87 	bl	8001180 <_ZN8Kontrast11setContrastEh>
			}

			model->setT2Short(false);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fa91 	bl	8001da0 <_ZN5Model10setT2ShortEb>
		}
		if(model->isT2Long()){
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fa62 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d049      	beq.n	8003922 <_ZN8Contrast6UpdateEv+0x256>
			if(kontrast < 100){
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003894:	2b63      	cmp	r3, #99	; 0x63
 8003896:	d844      	bhi.n	8003922 <_ZN8Contrast6UpdateEv+0x256>
				model->setKontrast(kontrast++);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6858      	ldr	r0, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	b2d1      	uxtb	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fe fc40 	bl	8002132 <_ZN5Model11setKontrastEh>
				lcd->Write(line1,0,Tools::byteToAscii(model->getKontrast()),3,9);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689c      	ldr	r4, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f103 0210 	add.w	r2, r3, #16
 80038bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f009 fa0a 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fc23 	bl	8002118 <_ZNK5Model11getKontrastEv>
 80038d2:	4603      	mov	r3, r0
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fd29 	bl	800232c <_ZN5Tools11byteToAsciiEh>
 80038da:	4602      	mov	r2, r0
 80038dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80038e0:	2309      	movs	r3, #9
 80038e2:	9301      	str	r3, [sp, #4]
 80038e4:	2303      	movs	r3, #3
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	4620      	mov	r0, r4
 80038ee:	f7fd fd9a 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 80038f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038f6:	4618      	mov	r0, r3
 80038f8:	f009 f9c0 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				lcd->SetCursorPosition(11, 2,true);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6898      	ldr	r0, [r3, #8]
 8003900:	2301      	movs	r3, #1
 8003902:	2202      	movs	r2, #2
 8003904:	210b      	movs	r1, #11
 8003906:	f7fd fdfb 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
				this->contrast->setContrast(100-kontrast);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003914:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003918:	b2db      	uxtb	r3, r3
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fd fc2f 	bl	8001180 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Summe------------------
		if(model->isT3Short()){
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fe fa67 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d04f      	beq.n	80039d2 <_ZN8Contrast6UpdateEv+0x306>
			if(kontrast > 0){
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003938:	2b00      	cmp	r3, #0
 800393a:	d044      	beq.n	80039c6 <_ZN8Contrast6UpdateEv+0x2fa>
			model->setKontrast(kontrast--);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6858      	ldr	r0, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	b2d1      	uxtb	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8003950:	4619      	mov	r1, r3
 8003952:	f7fe fbee 	bl	8002132 <_ZN5Model11setKontrastEh>
			lcd->Write(line1,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689c      	ldr	r4, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f103 0210 	add.w	r2, r3, #16
 8003960:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f009 f9b8 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fbd1 	bl	8002118 <_ZNK5Model11getKontrastEv>
 8003976:	4603      	mov	r3, r0
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe fcd7 	bl	800232c <_ZN5Tools11byteToAsciiEh>
 800397e:	4602      	mov	r2, r0
 8003980:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8003984:	2309      	movs	r3, #9
 8003986:	9301      	str	r3, [sp, #4]
 8003988:	2303      	movs	r3, #3
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	2200      	movs	r2, #0
 8003990:	4620      	mov	r0, r4
 8003992:	f7fd fd48 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003996:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800399a:	4618      	mov	r0, r3
 800399c:	f009 f96e 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			lcd->SetCursorPosition(11, 2,true);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6898      	ldr	r0, [r3, #8]
 80039a4:	2301      	movs	r3, #1
 80039a6:	2202      	movs	r2, #2
 80039a8:	210b      	movs	r1, #11
 80039aa:	f7fd fda9 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039b8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	f7fd fbdd 	bl	8001180 <_ZN8Kontrast11setContrastEh>
			}
			model->setT3Short(false);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fe fa21 	bl	8001e14 <_ZN5Model10setT3ShortEb>
		}
		if(model->isT3Long()){
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f9f2 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d049      	beq.n	8003a76 <_ZN8Contrast6UpdateEv+0x3aa>
			if(kontrast > 0){
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d044      	beq.n	8003a76 <_ZN8Contrast6UpdateEv+0x3aa>
			model->setKontrast(kontrast--);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6858      	ldr	r0, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80039f6:	1e5a      	subs	r2, r3, #1
 80039f8:	b2d1      	uxtb	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8003a00:	4619      	mov	r1, r3
 8003a02:	f7fe fb96 	bl	8002132 <_ZN5Model11setKontrastEh>
			lcd->Write(line1,0,Tools::byteToAscii(model->getKontrast()),3,9);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689c      	ldr	r4, [r3, #8]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f103 0210 	add.w	r2, r3, #16
 8003a10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a14:	4611      	mov	r1, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f009 f960 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fb79 	bl	8002118 <_ZNK5Model11getKontrastEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fe fc7f 	bl	800232c <_ZN5Tools11byteToAsciiEh>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8003a34:	2309      	movs	r3, #9
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2303      	movs	r3, #3
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4620      	mov	r0, r4
 8003a42:	f7fd fcf0 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003a46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f009 f916 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			lcd->SetCursorPosition(11, 2,true);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6898      	ldr	r0, [r3, #8]
 8003a54:	2301      	movs	r3, #1
 8003a56:	2202      	movs	r2, #2
 8003a58:	210b      	movs	r1, #11
 8003a5a:	f7fd fd51 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
			this->contrast->setContrast(100-kontrast);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a68:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fd fb85 	bl	8001180 <_ZN8Kontrast11setContrastEh>
			}
		}

		//------------------SW_Total------------------
		if(model->isT4Short()){
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe f9f7 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <_ZN8Contrast6UpdateEv+0x3c6>
			model->setT4Short(false);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2100      	movs	r1, #0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7fe f9fb 	bl	8001e88 <_ZN5Model10setT4ShortEb>
		}
		if(model->isT4Long()){
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe f9cc 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <_ZN8Contrast6UpdateEv+0x3e2>
			model->setT4Long(false);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe f9d0 	bl	8001e4e <_ZN5Model9setT4LongEb>
		}

		//------------------SW_Tar------------------
		if(model->isT5Short()){
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe fa15 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <_ZN8Contrast6UpdateEv+0x40c>
			screen = Model::E_TIME_SETTINGS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	701a      	strb	r2, [r3, #0]
			init = false;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			model->setT5Short(false);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fa12 	bl	8001efc <_ZN5Model10setT5ShortEb>
		}
		if(model->isT5Long()){
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe f9e3 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00c      	beq.n	8003b02 <_ZN8Contrast6UpdateEv+0x436>
			//Speichern ToDo
			screen = Model::E_MAIN_SCRREN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	701a      	strb	r2, [r3, #0]
			init = false;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			model->setT5Long(false);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe f9e0 	bl	8001ec2 <_ZN5Model9setT5LongEb>
		}


		return screen;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	781b      	ldrb	r3, [r3, #0]

}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3784      	adds	r7, #132	; 0x84
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}
	...

08003b10 <_ZN12DateSettingsC1EP5ModelP3LCD>:
 *      Author: marce
 */

#include "DateSettings.h"

DateSettings::DateSettings(Model *model, LCD *lcd) {
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f103 040c 	add.w	r4, r3, #12
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4618      	mov	r0, r3
 8003b28:	f009 f866 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	461a      	mov	r2, r3
 8003b32:	490c      	ldr	r1, [pc, #48]	; (8003b64 <_ZN12DateSettingsC1EP5ModelP3LCD+0x54>)
 8003b34:	4620      	mov	r0, r4
 8003b36:	f009 f903 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f009 f85b 	bl	800cbfa <_ZNSaIcED1Ev>
	this->model = model;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]
	this->init = false;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	0800d094 	.word	0x0800d094

08003b68 <_ZN12DateSettings6UpdateEv>:


Model::ESCREEN DateSettings::Update(){
 8003b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6a:	b093      	sub	sp, #76	; 0x4c
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]

	screen = Model::E_DATE_SETTINGS;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2206      	movs	r2, #6
 8003b74:	721a      	strb	r2, [r3, #8]

	if(!init){
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d047      	beq.n	8003c16 <_ZN12DateSettings6UpdateEv+0xae>
		position = 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		lcd->Write(line1,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685c      	ldr	r4, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f103 020c 	add.w	r2, r3, #12
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f009 f89c 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe f878 	bl	8001c9e <_ZNK5Model7getYearEv>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe f81b 	bl	8001bf2 <_ZNK5Model8getMonthEv>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461e      	mov	r6, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fd ff89 	bl	8001adc <_ZNK5Model6getDayEv>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4632      	mov	r2, r6
 8003bce:	4629      	mov	r1, r5
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fb43 	bl	800425c <_ZN12DateSettings15DateToCharArrayEhhh>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	f107 010c 	add.w	r1, r7, #12
 8003bdc:	2302      	movs	r3, #2
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	230c      	movs	r3, #12
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd fc1c 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f009 f842 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+2, 2,true);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6858      	ldr	r0, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c02:	3302      	adds	r3, #2
 8003c04:	b2d9      	uxtb	r1, r3
 8003c06:	2301      	movs	r3, #1
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f7fd fc79 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe f879 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <_ZN12DateSettings6UpdateEv+0x138>
		//Change position
		if(position >= 9){
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d904      	bls.n	8003c3a <_ZN12DateSettings6UpdateEv+0xd2>
			position = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003c38:	e021      	b.n	8003c7e <_ZN12DateSettings6UpdateEv+0x116>
		}else{
			position++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c40:	3301      	adds	r3, #1
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			if(position == 2){
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d107      	bne.n	8003c64 <_ZN12DateSettings6UpdateEv+0xfc>
				position++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
			if(position == 5){
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c6a:	2b05      	cmp	r3, #5
 8003c6c:	d107      	bne.n	8003c7e <_ZN12DateSettings6UpdateEv+0x116>
				position += 3;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c74:	3303      	adds	r3, #3
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
		}
		lcd->SetCursorPosition(position+2, 2, true);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6858      	ldr	r0, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c88:	3302      	adds	r3, #2
 8003c8a:	b2d9      	uxtb	r1, r3
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f7fd fc36 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f846 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f817 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d005      	beq.n	8003cbc <_ZN12DateSettings6UpdateEv+0x154>
		model->setT1Long(false);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fe f81b 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe f860 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 8250 	beq.w	800416e <_ZN12DateSettings6UpdateEv+0x606>
		uint8_t year = model->getYear();
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd ffe3 	bl	8001c9e <_ZNK5Model7getYearEv>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t month = model->getMonth();
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd ff85 	bl	8001bf2 <_ZNK5Model8getMonthEv>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		uint8_t day = model->getDay();
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fef2 	bl	8001adc <_ZNK5Model6getDayEv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		//Tag
		if(position == 0){
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d17d      	bne.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
			switch(month){
 8003d08:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	2b0b      	cmp	r3, #11
 8003d10:	d874      	bhi.n	8003dfc <_ZN12DateSettings6UpdateEv+0x294>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <_ZN12DateSettings6UpdateEv+0x1b0>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d49 	.word	0x08003d49
 8003d1c:	08003dc1 	.word	0x08003dc1
 8003d20:	08003d49 	.word	0x08003d49
 8003d24:	08003d85 	.word	0x08003d85
 8003d28:	08003d49 	.word	0x08003d49
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	08003d49 	.word	0x08003d49
 8003d34:	08003d49 	.word	0x08003d49
 8003d38:	08003d85 	.word	0x08003d85
 8003d3c:	08003d49 	.word	0x08003d49
 8003d40:	08003d85 	.word	0x08003d85
 8003d44:	08003d49 	.word	0x08003d49
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 21 ){
 8003d48:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d4c:	2b15      	cmp	r3, #21
 8003d4e:	d913      	bls.n	8003d78 <_ZN12DateSettings6UpdateEv+0x210>
					day = (day - (day/10)*10);
 8003d50:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d54:	4ad3      	ldr	r2, [pc, #844]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003d56:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5a:	08db      	lsrs	r3, r3, #3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	0152      	lsls	r2, r2, #5
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	0092      	lsls	r2, r2, #2
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d70:	4413      	add	r3, r2
 8003d72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 8003d76:	e045      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 8003d78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d7c:	330a      	adds	r3, #10
 8003d7e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003d82:	e03f      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 ){
 8003d84:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d88:	2b14      	cmp	r3, #20
 8003d8a:	d913      	bls.n	8003db4 <_ZN12DateSettings6UpdateEv+0x24c>
					day = (day - (day/10)*10);
 8003d8c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003d90:	4ac4      	ldr	r2, [pc, #784]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	0152      	lsls	r2, r2, #5
 8003d9e:	1ad2      	subs	r2, r2, r3
 8003da0:	0092      	lsls	r2, r2, #2
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003dac:	4413      	add	r3, r2
 8003dae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 8003db2:	e027      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 8003db4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003db8:	330a      	adds	r3, #10
 8003dba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003dbe:	e021      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
			case 2:
				if(day > 18 ){
 8003dc0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003dc4:	2b12      	cmp	r3, #18
 8003dc6:	d913      	bls.n	8003df0 <_ZN12DateSettings6UpdateEv+0x288>
					day = (day - (day/10)*10);
 8003dc8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003dcc:	4ab5      	ldr	r2, [pc, #724]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	08db      	lsrs	r3, r3, #3
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	0152      	lsls	r2, r2, #5
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	0092      	lsls	r2, r2, #2
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003de8:	4413      	add	r3, r2
 8003dea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
					day+=10;
				}
				break;
 8003dee:	e009      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
					day+=10;
 8003df0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003df4:	330a      	adds	r3, #10
 8003df6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003dfa:	e003      	b.n	8003e04 <_ZN12DateSettings6UpdateEv+0x29c>
			default:
				day = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003e02:	bf00      	nop
			}
		}

		if(position == 1){
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	f040 80a2 	bne.w	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
			switch(month){
 8003e10:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003e14:	3b01      	subs	r3, #1
 8003e16:	2b0b      	cmp	r3, #11
 8003e18:	f200 8098 	bhi.w	8003f4c <_ZN12DateSettings6UpdateEv+0x3e4>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <_ZN12DateSettings6UpdateEv+0x2bc>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e55 	.word	0x08003e55
 8003e28:	08003f13 	.word	0x08003f13
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003ea3 	.word	0x08003ea3
 8003e34:	08003e55 	.word	0x08003e55
 8003e38:	08003ea3 	.word	0x08003ea3
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e55 	.word	0x08003e55
 8003e44:	08003ea3 	.word	0x08003ea3
 8003e48:	08003e55 	.word	0x08003e55
 8003e4c:	08003ea3 	.word	0x08003ea3
 8003e50:	08003e55 	.word	0x08003e55
			case 5:
			case 7:
			case 8:
			case 10:
			case 12:
				if(day > 30 ){
 8003e54:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e58:	2b1e      	cmp	r3, #30
 8003e5a:	d905      	bls.n	8003e68 <_ZN12DateSettings6UpdateEv+0x300>
					day -= 1;
 8003e5c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8003e66:	e075      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
				}else if((day - (day/10)*10) < 9){
 8003e68:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003e6c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e70:	498c      	ldr	r1, [pc, #560]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003e72:	fba1 1303 	umull	r1, r3, r1, r3
 8003e76:	08db      	lsrs	r3, r3, #3
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f06f 0309 	mvn.w	r3, #9
 8003e80:	fb03 f301 	mul.w	r3, r3, r1
 8003e84:	4413      	add	r3, r2
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	dc05      	bgt.n	8003e96 <_ZN12DateSettings6UpdateEv+0x32e>
					day+=1;
 8003e8a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003e94:	e05e      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 8003e96:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003e9a:	3b09      	subs	r3, #9
 8003e9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003ea0:	e058      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
			case 4:
			case 6:
			case 9:
			case 11:
				if(day > 20 && (day - (day/10)*10) > 7 ){
 8003ea2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ea6:	2b14      	cmp	r3, #20
 8003ea8:	d916      	bls.n	8003ed8 <_ZN12DateSettings6UpdateEv+0x370>
 8003eaa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003eae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003eb2:	497c      	ldr	r1, [pc, #496]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003eb4:	fba1 1303 	umull	r1, r3, r1, r3
 8003eb8:	08db      	lsrs	r3, r3, #3
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f06f 0309 	mvn.w	r3, #9
 8003ec2:	fb03 f301 	mul.w	r3, r3, r1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	2b07      	cmp	r3, #7
 8003eca:	dd05      	ble.n	8003ed8 <_ZN12DateSettings6UpdateEv+0x370>
					day -= 8;
 8003ecc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ed0:	3b08      	subs	r3, #8
 8003ed2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else if((day - (day/10)*10) < 9){
					day+=1;
				}else{
						day -=9;
				}
				break;
 8003ed6:	e03d      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
				}else if((day - (day/10)*10) < 9){
 8003ed8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003edc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003ee0:	4970      	ldr	r1, [pc, #448]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003ee2:	fba1 1303 	umull	r1, r3, r1, r3
 8003ee6:	08db      	lsrs	r3, r3, #3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4619      	mov	r1, r3
 8003eec:	f06f 0309 	mvn.w	r3, #9
 8003ef0:	fb03 f301 	mul.w	r3, r3, r1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	dc05      	bgt.n	8003f06 <_ZN12DateSettings6UpdateEv+0x39e>
					day+=1;
 8003efa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003efe:	3301      	adds	r3, #1
 8003f00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003f04:	e026      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 8003f06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f0a:	3b09      	subs	r3, #9
 8003f0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003f10:	e020      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
			case 2:
				if((day - (day/10)*10) < 9){
 8003f12:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003f16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f1a:	4962      	ldr	r1, [pc, #392]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003f1c:	fba1 1303 	umull	r1, r3, r1, r3
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	f06f 0309 	mvn.w	r3, #9
 8003f2a:	fb03 f301 	mul.w	r3, r3, r1
 8003f2e:	4413      	add	r3, r2
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	dc05      	bgt.n	8003f40 <_ZN12DateSettings6UpdateEv+0x3d8>
					day+=1;
 8003f34:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f38:	3301      	adds	r3, #1
 8003f3a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}else{
						day -=9;
				}
				break;
 8003f3e:	e009      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
						day -=9;
 8003f40:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003f44:	3b09      	subs	r3, #9
 8003f46:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003f4a:	e003      	b.n	8003f54 <_ZN12DateSettings6UpdateEv+0x3ec>
			default:
				day = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				break;
 8003f52:	bf00      	nop
			}
		}

		//Monat
		if(position == 3){
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f5a:	2b03      	cmp	r3, #3
 8003f5c:	d112      	bne.n	8003f84 <_ZN12DateSettings6UpdateEv+0x41c>
			if(month < 3){
 8003f5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d805      	bhi.n	8003f72 <_ZN12DateSettings6UpdateEv+0x40a>
				month +=10;
 8003f66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f6a:	330a      	adds	r3, #10
 8003f6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003f70:	e008      	b.n	8003f84 <_ZN12DateSettings6UpdateEv+0x41c>
			}else if(month > 9){
 8003f72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f76:	2b09      	cmp	r3, #9
 8003f78:	d904      	bls.n	8003f84 <_ZN12DateSettings6UpdateEv+0x41c>
				month -= 10;
 8003f7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f7e:	3b0a      	subs	r3, #10
 8003f80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		if(position == 4){
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d129      	bne.n	8003fe2 <_ZN12DateSettings6UpdateEv+0x47a>
			if((month - (month/10)*10) < 9 && month < 12){
 8003f8e:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8003f92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f96:	4943      	ldr	r1, [pc, #268]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 8003f98:	fba1 1303 	umull	r1, r3, r1, r3
 8003f9c:	08db      	lsrs	r3, r3, #3
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f06f 0309 	mvn.w	r3, #9
 8003fa6:	fb03 f301 	mul.w	r3, r3, r1
 8003faa:	4413      	add	r3, r2
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	dc09      	bgt.n	8003fc4 <_ZN12DateSettings6UpdateEv+0x45c>
 8003fb0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fb4:	2b0b      	cmp	r3, #11
 8003fb6:	d805      	bhi.n	8003fc4 <_ZN12DateSettings6UpdateEv+0x45c>
				month +=1;
 8003fb8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003fc2:	e00e      	b.n	8003fe2 <_ZN12DateSettings6UpdateEv+0x47a>
			}else if(month > 11){
 8003fc4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fc8:	2b0b      	cmp	r3, #11
 8003fca:	d905      	bls.n	8003fd8 <_ZN12DateSettings6UpdateEv+0x470>
				month = month - 2;
 8003fcc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fd0:	3b02      	subs	r3, #2
 8003fd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8003fd6:	e004      	b.n	8003fe2 <_ZN12DateSettings6UpdateEv+0x47a>
			}else{
				month -= 9;
 8003fd8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fdc:	3b09      	subs	r3, #9
 8003fde:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		switch(month){
 8003fe2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003fe6:	3b02      	subs	r3, #2
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d82a      	bhi.n	8004042 <_ZN12DateSettings6UpdateEv+0x4da>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <_ZN12DateSettings6UpdateEv+0x48c>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	0800402d 	.word	0x0800402d
 8003ff8:	08004043 	.word	0x08004043
 8003ffc:	0800401d 	.word	0x0800401d
 8004000:	08004043 	.word	0x08004043
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004043 	.word	0x08004043
 800400c:	08004043 	.word	0x08004043
 8004010:	0800401d 	.word	0x0800401d
 8004014:	08004043 	.word	0x08004043
 8004018:	0800401d 	.word	0x0800401d
					case 4:
					case 6:
					case 9:
					case 11:
						if(day > 30){
 800401c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004020:	2b1e      	cmp	r3, #30
 8004022:	d90b      	bls.n	800403c <_ZN12DateSettings6UpdateEv+0x4d4>
							day = 30;
 8004024:	231e      	movs	r3, #30
 8004026:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						}
						break;
 800402a:	e007      	b.n	800403c <_ZN12DateSettings6UpdateEv+0x4d4>
					case 2:
						if(day > 28){
 800402c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004030:	2b1c      	cmp	r3, #28
 8004032:	d905      	bls.n	8004040 <_ZN12DateSettings6UpdateEv+0x4d8>
							day = 28;
 8004034:	231c      	movs	r3, #28
 8004036:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
						}
						break;
 800403a:	e001      	b.n	8004040 <_ZN12DateSettings6UpdateEv+0x4d8>
						break;
 800403c:	bf00      	nop
 800403e:	e000      	b.n	8004042 <_ZN12DateSettings6UpdateEv+0x4da>
						break;
 8004040:	bf00      	nop
					}

		//Jahr
		if(position == 8){
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004048:	2b08      	cmp	r3, #8
 800404a:	d10e      	bne.n	800406a <_ZN12DateSettings6UpdateEv+0x502>
			if((year/10) < 9){
 800404c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004050:	2b59      	cmp	r3, #89	; 0x59
 8004052:	d805      	bhi.n	8004060 <_ZN12DateSettings6UpdateEv+0x4f8>
				year +=10;
 8004054:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004058:	330a      	adds	r3, #10
 800405a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800405e:	e004      	b.n	800406a <_ZN12DateSettings6UpdateEv+0x502>
			}else{
				year -= 90;
 8004060:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004064:	3b5a      	subs	r3, #90	; 0x5a
 8004066:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if(position == 9){
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004070:	2b09      	cmp	r3, #9
 8004072:	d11e      	bne.n	80040b2 <_ZN12DateSettings6UpdateEv+0x54a>
			if((year - (year/10)*10) < 9){
 8004074:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800407c:	4909      	ldr	r1, [pc, #36]	; (80040a4 <_ZN12DateSettings6UpdateEv+0x53c>)
 800407e:	fba1 1303 	umull	r1, r3, r1, r3
 8004082:	08db      	lsrs	r3, r3, #3
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4619      	mov	r1, r3
 8004088:	f06f 0309 	mvn.w	r3, #9
 800408c:	fb03 f301 	mul.w	r3, r3, r1
 8004090:	4413      	add	r3, r2
 8004092:	2b08      	cmp	r3, #8
 8004094:	dc08      	bgt.n	80040a8 <_ZN12DateSettings6UpdateEv+0x540>
				year +=1;
 8004096:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800409a:	3301      	adds	r3, #1
 800409c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80040a0:	e007      	b.n	80040b2 <_ZN12DateSettings6UpdateEv+0x54a>
 80040a2:	bf00      	nop
 80040a4:	cccccccd 	.word	0xcccccccd
			}else{
				year -= 9;
 80040a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040ac:	3b09      	subs	r3, #9
 80040ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}



		model->setYear(year);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fd fdfb 	bl	8001cb8 <_ZN5Model7setYearEh>
		model->setMonth(month);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fd fd9d 	bl	8001c0c <_ZN5Model8setMonthEh>
		model->setDay(day);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fd fd0a 	bl	8001af6 <_ZN5Model6setDayEh>
		lcd->Write(line1,0,DateToCharArray(model->getYear(), model->getMonth(), model->getDay()),12,2);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685c      	ldr	r4, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f103 020c 	add.w	r2, r3, #12
 80040ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f0:	4611      	mov	r1, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 fdf2 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd fdce 	bl	8001c9e <_ZNK5Model7getYearEv>
 8004102:	4603      	mov	r3, r0
 8004104:	461d      	mov	r5, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd fd71 	bl	8001bf2 <_ZNK5Model8getMonthEv>
 8004110:	4603      	mov	r3, r0
 8004112:	461e      	mov	r6, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fd fcdf 	bl	8001adc <_ZNK5Model6getDayEv>
 800411e:	4603      	mov	r3, r0
 8004120:	4632      	mov	r2, r6
 8004122:	4629      	mov	r1, r5
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f899 	bl	800425c <_ZN12DateSettings15DateToCharArrayEhhh>
 800412a:	4602      	mov	r2, r0
 800412c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004130:	2302      	movs	r3, #2
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	230c      	movs	r3, #12
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	4613      	mov	r3, r2
 800413a:	2200      	movs	r2, #0
 800413c:	4620      	mov	r0, r4
 800413e:	f7fd f972 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8004142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004146:	4618      	mov	r0, r3
 8004148:	f008 fd98 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+2, 2,true);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6858      	ldr	r0, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004156:	3302      	adds	r3, #2
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	2301      	movs	r3, #1
 800415c:	2202      	movs	r2, #2
 800415e:	f7fd f9cf 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd fe19 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fd fdea 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <_ZN12DateSettings6UpdateEv+0x622>
		model->setT2Long(false);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f7fd fdee 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd fe33 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <_ZN12DateSettings6UpdateEv+0x63e>
		model->setT3Short(false);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd fe37 	bl	8001e14 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fe08 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <_ZN12DateSettings6UpdateEv+0x65a>
		model->setT3Long(false);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fe0c 	bl	8001dda <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fe51 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <_ZN12DateSettings6UpdateEv+0x676>
		model->setT4Short(false);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fd fe55 	bl	8001e88 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7fd fe26 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d005      	beq.n	80041fa <_ZN12DateSettings6UpdateEv+0x692>
		model->setT4Long(false);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2100      	movs	r1, #0
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fd fe2a 	bl	8001e4e <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fe6f 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00c      	beq.n	8004224 <_ZN12DateSettings6UpdateEv+0x6bc>
		screen = Model::E_KONTRAST_SETTINGS;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2207      	movs	r2, #7
 800420e:	721a      	strb	r2, [r3, #8]
		init = false;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		model->setT5Short(false);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f7fd fe6c 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd fe3d 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00c      	beq.n	800424e <_ZN12DateSettings6UpdateEv+0x6e6>
		//Speichern ToDo
		screen = Model::E_MAIN_SCRREN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2203      	movs	r2, #3
 8004238:	721a      	strb	r2, [r3, #8]
		init = false;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		model->setT5Long(false);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd fe3a 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}


	return screen;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7a1b      	ldrb	r3, [r3, #8]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3744      	adds	r7, #68	; 0x44
 8004256:	46bd      	mov	sp, r7
 8004258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800425a:	bf00      	nop

0800425c <_ZN12DateSettings15DateToCharArrayEhhh>:


char* DateSettings::DateToCharArray(uint8_t year, uint8_t month, uint8_t day){
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	4608      	mov	r0, r1
 8004266:	4611      	mov	r1, r2
 8004268:	461a      	mov	r2, r3
 800426a:	4603      	mov	r3, r0
 800426c:	70fb      	strb	r3, [r7, #3]
 800426e:	460b      	mov	r3, r1
 8004270:	70bb      	strb	r3, [r7, #2]
 8004272:	4613      	mov	r3, r2
 8004274:	707b      	strb	r3, [r7, #1]
	static char result[10];
	result[0] = day/10 + 0x30;
 8004276:	787b      	ldrb	r3, [r7, #1]
 8004278:	4a35      	ldr	r2, [pc, #212]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	08db      	lsrs	r3, r3, #3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	3330      	adds	r3, #48	; 0x30
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4b33      	ldr	r3, [pc, #204]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004288:	701a      	strb	r2, [r3, #0]
	result[1] = day - (day/10)*10 + 0x30;
 800428a:	787b      	ldrb	r3, [r7, #1]
 800428c:	4a30      	ldr	r2, [pc, #192]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	08db      	lsrs	r3, r3, #3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	0152      	lsls	r2, r2, #5
 800429a:	1ad2      	subs	r2, r2, r3
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	787b      	ldrb	r3, [r7, #1]
 80042a6:	4413      	add	r3, r2
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	3330      	adds	r3, #48	; 0x30
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042b0:	705a      	strb	r2, [r3, #1]
	result[2] = '.';
 80042b2:	4b28      	ldr	r3, [pc, #160]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042b4:	222e      	movs	r2, #46	; 0x2e
 80042b6:	709a      	strb	r2, [r3, #2]
	result[3] = month/10 + 0x30;
 80042b8:	78bb      	ldrb	r3, [r7, #2]
 80042ba:	4a25      	ldr	r2, [pc, #148]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	08db      	lsrs	r3, r3, #3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	3330      	adds	r3, #48	; 0x30
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	4b22      	ldr	r3, [pc, #136]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042ca:	70da      	strb	r2, [r3, #3]
	result[4] = month - (month/10)*10 + 0x30;
 80042cc:	78bb      	ldrb	r3, [r7, #2]
 80042ce:	4a20      	ldr	r2, [pc, #128]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	08db      	lsrs	r3, r3, #3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	0152      	lsls	r2, r2, #5
 80042dc:	1ad2      	subs	r2, r2, r3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	78bb      	ldrb	r3, [r7, #2]
 80042e8:	4413      	add	r3, r2
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3330      	adds	r3, #48	; 0x30
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b18      	ldr	r3, [pc, #96]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042f2:	711a      	strb	r2, [r3, #4]
	result[5] = '.';
 80042f4:	4b17      	ldr	r3, [pc, #92]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042f6:	222e      	movs	r2, #46	; 0x2e
 80042f8:	715a      	strb	r2, [r3, #5]
	result[6] = '2';
 80042fa:	4b16      	ldr	r3, [pc, #88]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 80042fc:	2232      	movs	r2, #50	; 0x32
 80042fe:	719a      	strb	r2, [r3, #6]
	result[7] = '0';
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004302:	2230      	movs	r2, #48	; 0x30
 8004304:	71da      	strb	r2, [r3, #7]
	result[8] = year/10 + 0x30;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	4a11      	ldr	r2, [pc, #68]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	08db      	lsrs	r3, r3, #3
 8004310:	b2db      	uxtb	r3, r3
 8004312:	3330      	adds	r3, #48	; 0x30
 8004314:	b2da      	uxtb	r2, r3
 8004316:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004318:	721a      	strb	r2, [r3, #8]
	result[9] = year - (year/10)*10 + 0x30;
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	4a0c      	ldr	r2, [pc, #48]	; (8004350 <_ZN12DateSettings15DateToCharArrayEhhh+0xf4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	08db      	lsrs	r3, r3, #3
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	0152      	lsls	r2, r2, #5
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	b2da      	uxtb	r2, r3
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	4413      	add	r3, r2
 8004338:	b2db      	uxtb	r3, r3
 800433a:	3330      	adds	r3, #48	; 0x30
 800433c:	b2da      	uxtb	r2, r3
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
 8004340:	725a      	strb	r2, [r3, #9]
	return result;
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <_ZN12DateSettings15DateToCharArrayEhhh+0xf8>)
}
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	cccccccd 	.word	0xcccccccd
 8004354:	2000031c 	.word	0x2000031c

08004358 <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) {
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f103 040c 	add.w	r4, r3, #12
 800436a:	f107 0314 	add.w	r3, r7, #20
 800436e:	4618      	mov	r0, r3
 8004370:	f008 fc42 	bl	800cbf8 <_ZNSaIcEC1Ev>
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	461a      	mov	r2, r3
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <_ZN12TimeSettingsC1EP5ModelP3LCD+0x4c>)
 800437c:	4620      	mov	r0, r4
 800437e:	f008 fcdf 	bl	800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8004382:	f107 0314 	add.w	r3, r7, #20
 8004386:	4618      	mov	r0, r3
 8004388:	f008 fc37 	bl	800cbfa <_ZNSaIcED1Ev>
	this->model = model;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	601a      	str	r2, [r3, #0]
	this->lcd = lcd;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]
}
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	0800d09c 	.word	0x0800d09c

080043a8 <_ZN12TimeSettings6UpdateEv>:




Model::ESCREEN TimeSettings::Update(){
 80043a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043aa:	b093      	sub	sp, #76	; 0x4c
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	6078      	str	r0, [r7, #4]

	screen = Model::E_TIME_SETTINGS;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2205      	movs	r2, #5
 80043b4:	721a      	strb	r2, [r3, #8]

	if(!init){
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7a9b      	ldrb	r3, [r3, #10]
 80043ba:	f083 0301 	eor.w	r3, r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d044      	beq.n	800444e <_ZN12TimeSettings6UpdateEv+0xa6>
		position = 0;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	725a      	strb	r2, [r3, #9]
		lcd->Write(line1,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685c      	ldr	r4, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f103 020c 	add.w	r2, r3, #12
 80043d4:	f107 030c 	add.w	r3, r7, #12
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f008 fc7e 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd fb96 	bl	8001b16 <_ZNK5Model7getHourEv>
 80043ea:	4603      	mov	r3, r0
 80043ec:	461d      	mov	r5, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fd fbe0 	bl	8001bb8 <_ZNK5Model9getMinuteEv>
 80043f8:	4603      	mov	r3, r0
 80043fa:	461e      	mov	r6, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7fd fc13 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 8004406:	4603      	mov	r3, r0
 8004408:	4632      	mov	r2, r6
 800440a:	4629      	mov	r1, r5
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fa19 	bl	8004844 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004412:	4602      	mov	r2, r0
 8004414:	f107 010c 	add.w	r1, r7, #12
 8004418:	2304      	movs	r3, #4
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	2308      	movs	r3, #8
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	4613      	mov	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	4620      	mov	r0, r4
 8004426:	f7fc fffe 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	4618      	mov	r0, r3
 8004430:	f008 fc24 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+4, 2,true);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6858      	ldr	r0, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	7a5b      	ldrb	r3, [r3, #9]
 800443c:	3304      	adds	r3, #4
 800443e:	b2d9      	uxtb	r1, r3
 8004440:	2301      	movs	r3, #1
 8004442:	2202      	movs	r2, #2
 8004444:	f7fd f85c 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	729a      	strb	r2, [r3, #10]
	}

	//lcd->Write(w,10,2,p,9,3);

	//------------------SW_BW------------------
	if(model->isT1Short()){
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f7fd fc5d 	bl	8001d12 <_ZNK5Model9isT1ShortEv>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d02b      	beq.n	80044b6 <_ZN12TimeSettings6UpdateEv+0x10e>
		//Change position
		if(position >= 7){
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7a5b      	ldrb	r3, [r3, #9]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d903      	bls.n	800446e <_ZN12TimeSettings6UpdateEv+0xc6>
			position = 0;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	725a      	strb	r2, [r3, #9]
 800446c:	e013      	b.n	8004496 <_ZN12TimeSettings6UpdateEv+0xee>
		}else{
			position++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7a5b      	ldrb	r3, [r3, #9]
 8004472:	3301      	adds	r3, #1
 8004474:	b2da      	uxtb	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	725a      	strb	r2, [r3, #9]
			if(position == 2 || position == 5){
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7a5b      	ldrb	r3, [r3, #9]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d003      	beq.n	800448a <_ZN12TimeSettings6UpdateEv+0xe2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7a5b      	ldrb	r3, [r3, #9]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d105      	bne.n	8004496 <_ZN12TimeSettings6UpdateEv+0xee>
				position++;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	7a5b      	ldrb	r3, [r3, #9]
 800448e:	3301      	adds	r3, #1
 8004490:	b2da      	uxtb	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	725a      	strb	r2, [r3, #9]
			}
		}
		lcd->SetCursorPosition(position+4, 2, true);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6858      	ldr	r0, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	7a5b      	ldrb	r3, [r3, #9]
 800449e:	3304      	adds	r3, #4
 80044a0:	b2d9      	uxtb	r1, r3
 80044a2:	2301      	movs	r3, #1
 80044a4:	2202      	movs	r2, #2
 80044a6:	f7fd f82b 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fc3b 	bl	8001d2c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fd fc0c 	bl	8001cd8 <_ZNK5Model8isT1LongEv>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <_ZN12TimeSettings6UpdateEv+0x12a>
		model->setT1Long(false);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2100      	movs	r1, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fd fc10 	bl	8001cf2 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fc55 	bl	8001d86 <_ZNK5Model9isT2ShortEv>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8139 	beq.w	8004756 <_ZN12TimeSettings6UpdateEv+0x3ae>
		uint8_t hour = model->getHour();
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fb14 	bl	8001b16 <_ZNK5Model7getHourEv>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint8_t minute = model->getMinute();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fd fb5d 	bl	8001bb8 <_ZNK5Model9getMinuteEv>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		uint8_t seconds = model->getSeconds();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7fd fb8f 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		if(position == 0){
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7a5b      	ldrb	r3, [r3, #9]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d118      	bne.n	800454e <_ZN12TimeSettings6UpdateEv+0x1a6>
			if(hour < 13){
 800451c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d805      	bhi.n	8004530 <_ZN12TimeSettings6UpdateEv+0x188>
				hour += 10;
 8004524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004528:	330a      	adds	r3, #10
 800452a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800452e:	e00e      	b.n	800454e <_ZN12TimeSettings6UpdateEv+0x1a6>
			}else if(hour < 19){
 8004530:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004534:	2b12      	cmp	r3, #18
 8004536:	d805      	bhi.n	8004544 <_ZN12TimeSettings6UpdateEv+0x19c>
				hour -= 10;
 8004538:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800453c:	3b0a      	subs	r3, #10
 800453e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004542:	e004      	b.n	800454e <_ZN12TimeSettings6UpdateEv+0x1a6>
			}else{
				hour -= 20;
 8004544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004548:	3b14      	subs	r3, #20
 800454a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if(position == 1){
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	7a5b      	ldrb	r3, [r3, #9]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d13c      	bne.n	80045d0 <_ZN12TimeSettings6UpdateEv+0x228>
			if(hour < 20){
 8004556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800455a:	2b13      	cmp	r3, #19
 800455c:	d81c      	bhi.n	8004598 <_ZN12TimeSettings6UpdateEv+0x1f0>
				if(hour - (hour/10)*10 < 9){
 800455e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004562:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004566:	49b6      	ldr	r1, [pc, #728]	; (8004840 <_ZN12TimeSettings6UpdateEv+0x498>)
 8004568:	fba1 1303 	umull	r1, r3, r1, r3
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	f06f 0309 	mvn.w	r3, #9
 8004576:	fb03 f301 	mul.w	r3, r3, r1
 800457a:	4413      	add	r3, r2
 800457c:	2b08      	cmp	r3, #8
 800457e:	dc05      	bgt.n	800458c <_ZN12TimeSettings6UpdateEv+0x1e4>
					hour+=1;
 8004580:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004584:	3301      	adds	r3, #1
 8004586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800458a:	e021      	b.n	80045d0 <_ZN12TimeSettings6UpdateEv+0x228>
				}else{
					hour-=9;
 800458c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004590:	3b09      	subs	r3, #9
 8004592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004596:	e01b      	b.n	80045d0 <_ZN12TimeSettings6UpdateEv+0x228>
				}
			}else{
				if(hour - (hour/10)*10 < 3){
 8004598:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800459c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045a0:	49a7      	ldr	r1, [pc, #668]	; (8004840 <_ZN12TimeSettings6UpdateEv+0x498>)
 80045a2:	fba1 1303 	umull	r1, r3, r1, r3
 80045a6:	08db      	lsrs	r3, r3, #3
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	4619      	mov	r1, r3
 80045ac:	f06f 0309 	mvn.w	r3, #9
 80045b0:	fb03 f301 	mul.w	r3, r3, r1
 80045b4:	4413      	add	r3, r2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	dc05      	bgt.n	80045c6 <_ZN12TimeSettings6UpdateEv+0x21e>
					hour+=1;
 80045ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045be:	3301      	adds	r3, #1
 80045c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80045c4:	e004      	b.n	80045d0 <_ZN12TimeSettings6UpdateEv+0x228>
				}else{
					hour-=3;
 80045c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ca:	3b03      	subs	r3, #3
 80045cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}



		if(position == 3){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7a5b      	ldrb	r3, [r3, #9]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d10e      	bne.n	80045f6 <_ZN12TimeSettings6UpdateEv+0x24e>
			if(minute < 50){
 80045d8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80045dc:	2b31      	cmp	r3, #49	; 0x31
 80045de:	d805      	bhi.n	80045ec <_ZN12TimeSettings6UpdateEv+0x244>
				minute += 10;
 80045e0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80045e4:	330a      	adds	r3, #10
 80045e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80045ea:	e004      	b.n	80045f6 <_ZN12TimeSettings6UpdateEv+0x24e>
			}else{
				minute -= 50;
 80045ec:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80045f0:	3b32      	subs	r3, #50	; 0x32
 80045f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
			}
		}

		if(position == 4){
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7a5b      	ldrb	r3, [r3, #9]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d11b      	bne.n	8004636 <_ZN12TimeSettings6UpdateEv+0x28e>
				if(minute - (minute/10)*10 < 9){
 80045fe:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004602:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004606:	498e      	ldr	r1, [pc, #568]	; (8004840 <_ZN12TimeSettings6UpdateEv+0x498>)
 8004608:	fba1 1303 	umull	r1, r3, r1, r3
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	f06f 0309 	mvn.w	r3, #9
 8004616:	fb03 f301 	mul.w	r3, r3, r1
 800461a:	4413      	add	r3, r2
 800461c:	2b08      	cmp	r3, #8
 800461e:	dc05      	bgt.n	800462c <_ZN12TimeSettings6UpdateEv+0x284>
					minute+=1;
 8004620:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004624:	3301      	adds	r3, #1
 8004626:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800462a:	e004      	b.n	8004636 <_ZN12TimeSettings6UpdateEv+0x28e>
				}else{
					minute-=9;
 800462c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004630:	3b09      	subs	r3, #9
 8004632:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				}
		}


		if(position == 6){
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7a5b      	ldrb	r3, [r3, #9]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d10e      	bne.n	800465c <_ZN12TimeSettings6UpdateEv+0x2b4>
			if(seconds < 50){
 800463e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004642:	2b31      	cmp	r3, #49	; 0x31
 8004644:	d805      	bhi.n	8004652 <_ZN12TimeSettings6UpdateEv+0x2aa>
				seconds += 10;
 8004646:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800464a:	330a      	adds	r3, #10
 800464c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004650:	e004      	b.n	800465c <_ZN12TimeSettings6UpdateEv+0x2b4>
			}else{
				seconds -= 50;
 8004652:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004656:	3b32      	subs	r3, #50	; 0x32
 8004658:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			}
		}

		if(position == 7){
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	7a5b      	ldrb	r3, [r3, #9]
 8004660:	2b07      	cmp	r3, #7
 8004662:	d11b      	bne.n	800469c <_ZN12TimeSettings6UpdateEv+0x2f4>
				if(seconds - (seconds/10)*10 < 9){
 8004664:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004668:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800466c:	4974      	ldr	r1, [pc, #464]	; (8004840 <_ZN12TimeSettings6UpdateEv+0x498>)
 800466e:	fba1 1303 	umull	r1, r3, r1, r3
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	b2db      	uxtb	r3, r3
 8004676:	4619      	mov	r1, r3
 8004678:	f06f 0309 	mvn.w	r3, #9
 800467c:	fb03 f301 	mul.w	r3, r3, r1
 8004680:	4413      	add	r3, r2
 8004682:	2b08      	cmp	r3, #8
 8004684:	dc05      	bgt.n	8004692 <_ZN12TimeSettings6UpdateEv+0x2ea>
					seconds+=1;
 8004686:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800468a:	3301      	adds	r3, #1
 800468c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004690:	e004      	b.n	800469c <_ZN12TimeSettings6UpdateEv+0x2f4>
				}else{
					seconds-=9;
 8004692:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004696:	3b09      	subs	r3, #9
 8004698:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
				}
		}


		model->setHour(hour);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80046a4:	4611      	mov	r1, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd fa42 	bl	8001b30 <_ZN5Model7setHourEh>
		model->setMinute(minute);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fa8b 	bl	8001bd2 <_ZN5Model9setMinuteEh>
		model->setSeconds(seconds);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fabd 	bl	8001c46 <_ZN5Model10setSecondsEh>
		lcd->Write(line1,0,TimeToCharArray(model->getHour(), model->getMinute(), model->getSeconds()),8,4);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685c      	ldr	r4, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f103 020c 	add.w	r2, r3, #12
 80046d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f008 fafd 	bl	800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fd fa15 	bl	8001b16 <_ZNK5Model7getHourEv>
 80046ec:	4603      	mov	r3, r0
 80046ee:	461d      	mov	r5, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fd fa5f 	bl	8001bb8 <_ZNK5Model9getMinuteEv>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461e      	mov	r6, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fd fa92 	bl	8001c2c <_ZNK5Model10getSecondsEv>
 8004708:	4603      	mov	r3, r0
 800470a:	4632      	mov	r2, r6
 800470c:	4629      	mov	r1, r5
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f898 	bl	8004844 <_ZN12TimeSettings15TimeToCharArrayEhhh>
 8004714:	4602      	mov	r2, r0
 8004716:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800471a:	2304      	movs	r3, #4
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	2308      	movs	r3, #8
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4613      	mov	r3, r2
 8004724:	2200      	movs	r2, #0
 8004726:	4620      	mov	r0, r4
 8004728:	f7fc fe7d 	bl	8001426 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 800472c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f008 faa3 	bl	800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position+4, 2, true);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6858      	ldr	r0, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7a5b      	ldrb	r3, [r3, #9]
 800473e:	3304      	adds	r3, #4
 8004740:	b2d9      	uxtb	r1, r3
 8004742:	2301      	movs	r3, #1
 8004744:	2202      	movs	r2, #2
 8004746:	f7fc fedb 	bl	8001500 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f7fd fb25 	bl	8001da0 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fd faf6 	bl	8001d4c <_ZNK5Model8isT2LongEv>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <_ZN12TimeSettings6UpdateEv+0x3ca>
		model->setT2Long(false);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fafa 	bl	8001d66 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd fb3f 	bl	8001dfa <_ZNK5Model9isT3ShortEv>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <_ZN12TimeSettings6UpdateEv+0x3e6>
		model->setT3Short(false);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fb43 	bl	8001e14 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fd fb14 	bl	8001dc0 <_ZNK5Model8isT3LongEv>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <_ZN12TimeSettings6UpdateEv+0x402>
		model->setT3Long(false);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2100      	movs	r1, #0
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fd fb18 	bl	8001dda <_ZN5Model9setT3LongEb>
	}

	//------------------SW_Total------------------
	if(model->isT4Short()){
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fd fb5d 	bl	8001e6e <_ZNK5Model9isT4ShortEv>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <_ZN12TimeSettings6UpdateEv+0x41e>
		model->setT4Short(false);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd fb61 	bl	8001e88 <_ZN5Model10setT4ShortEb>
	}
	if(model->isT4Long()){
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fd fb32 	bl	8001e34 <_ZNK5Model8isT4LongEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d005      	beq.n	80047e2 <_ZN12TimeSettings6UpdateEv+0x43a>
		model->setT4Long(false);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fd fb36 	bl	8001e4e <_ZN5Model9setT4LongEb>
	}

	//------------------SW_Tar------------------
	if(model->isT5Short()){
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fb7b 	bl	8001ee2 <_ZNK5Model9isT5ShortEv>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <_ZN12TimeSettings6UpdateEv+0x462>
		screen = Model::E_DATE_SETTINGS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2206      	movs	r2, #6
 80047f6:	721a      	strb	r2, [r3, #8]
		init = false;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	729a      	strb	r2, [r3, #10]
		model->setT5Short(false);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2100      	movs	r1, #0
 8004804:	4618      	mov	r0, r3
 8004806:	f7fd fb79 	bl	8001efc <_ZN5Model10setT5ShortEb>
	}
	if(model->isT5Long()){
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fb4a 	bl	8001ea8 <_ZNK5Model8isT5LongEv>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <_ZN12TimeSettings6UpdateEv+0x48a>
		screen = Model::E_MAIN_SCRREN;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2203      	movs	r2, #3
 800481e:	721a      	strb	r2, [r3, #8]
		init = false;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	729a      	strb	r2, [r3, #10]
		//Speichern ToDo
		model->setT5Long(false);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7fd fb48 	bl	8001ec2 <_ZN5Model9setT5LongEb>
	}


	return screen;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7a1b      	ldrb	r3, [r3, #8]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3744      	adds	r7, #68	; 0x44
 800483a:	46bd      	mov	sp, r7
 800483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483e:	bf00      	nop
 8004840:	cccccccd 	.word	0xcccccccd

08004844 <_ZN12TimeSettings15TimeToCharArrayEhhh>:




char* TimeSettings::TimeToCharArray(uint8_t hour, uint8_t minute, uint8_t seconds){
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4603      	mov	r3, r0
 8004854:	70fb      	strb	r3, [r7, #3]
 8004856:	460b      	mov	r3, r1
 8004858:	70bb      	strb	r3, [r7, #2]
 800485a:	4613      	mov	r3, r2
 800485c:	707b      	strb	r3, [r7, #1]
	static char result[8];

	result[0] = hour/10 + 0x30;
 800485e:	78fb      	ldrb	r3, [r7, #3]
 8004860:	4a32      	ldr	r2, [pc, #200]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	08db      	lsrs	r3, r3, #3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	3330      	adds	r3, #48	; 0x30
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b30      	ldr	r3, [pc, #192]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004870:	701a      	strb	r2, [r3, #0]
	result[1] = hour - (hour/10)*10 + 0x30;
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	08db      	lsrs	r3, r3, #3
 800487c:	b2db      	uxtb	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	0152      	lsls	r2, r2, #5
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	4413      	add	r3, r2
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3330      	adds	r3, #48	; 0x30
 8004894:	b2da      	uxtb	r2, r3
 8004896:	4b26      	ldr	r3, [pc, #152]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 8004898:	705a      	strb	r2, [r3, #1]
	result[2] = ':';
 800489a:	4b25      	ldr	r3, [pc, #148]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800489c:	223a      	movs	r2, #58	; 0x3a
 800489e:	709a      	strb	r2, [r3, #2]
	result[3] = minute/10 + 0x30;
 80048a0:	78bb      	ldrb	r3, [r7, #2]
 80048a2:	4a22      	ldr	r2, [pc, #136]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	08db      	lsrs	r3, r3, #3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	3330      	adds	r3, #48	; 0x30
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80048b2:	70da      	strb	r2, [r3, #3]
	result[4] = minute - (minute/10)*10 + 0x30;
 80048b4:	78bb      	ldrb	r3, [r7, #2]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	08db      	lsrs	r3, r3, #3
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	0152      	lsls	r2, r2, #5
 80048c4:	1ad2      	subs	r2, r2, r3
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	78bb      	ldrb	r3, [r7, #2]
 80048d0:	4413      	add	r3, r2
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	3330      	adds	r3, #48	; 0x30
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80048da:	711a      	strb	r2, [r3, #4]
	result[5] = ':';
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80048de:	223a      	movs	r2, #58	; 0x3a
 80048e0:	715a      	strb	r2, [r3, #5]
	result[6] = seconds/10 + 0x30;
 80048e2:	787b      	ldrb	r3, [r7, #1]
 80048e4:	4a11      	ldr	r2, [pc, #68]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80048e6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ea:	08db      	lsrs	r3, r3, #3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	3330      	adds	r3, #48	; 0x30
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 80048f4:	719a      	strb	r2, [r3, #6]
	result[7] = seconds - (seconds/10)*10 + 0x30;
 80048f6:	787b      	ldrb	r3, [r7, #1]
 80048f8:	4a0c      	ldr	r2, [pc, #48]	; (800492c <_ZN12TimeSettings15TimeToCharArrayEhhh+0xe8>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	0152      	lsls	r2, r2, #5
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	0092      	lsls	r2, r2, #2
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	787b      	ldrb	r3, [r7, #1]
 8004912:	4413      	add	r3, r2
 8004914:	b2db      	uxtb	r3, r3
 8004916:	3330      	adds	r3, #48	; 0x30
 8004918:	b2da      	uxtb	r2, r3
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
 800491c:	71da      	strb	r2, [r3, #7]
	return result;
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <_ZN12TimeSettings15TimeToCharArrayEhhh+0xec>)
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	cccccccd 	.word	0xcccccccd
 8004930:	20000328 	.word	0x20000328

08004934 <_ZN4TimeC1EP5ModelP19__I2C_HandleTypeDef>:
 */

#include "Time.h"


Time::Time(Model *model, I2C_HandleTypeDef *hi2c) {
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
	this->model = model;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	601a      	str	r2, [r3, #0]
	this->hi2c = hi2c;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	605a      	str	r2, [r3, #4]

}
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <_ZN4Time10UpdateTimeEv>:
	HAL_I2C_Master_Transmit(hi2c, WRITE_ADDR, txData, sizeof(txData)/sizeof(txData[0]), I2C_TIMEOUT);

}


void Time::UpdateTime(){
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
	model->setHour(rxData[2]);
	model->setDay(rxData[3]);
	model->setDayOfWeek(rxData[4]);
	model->setMonth(rxData[5]);
	model->setYear(rxData[6]);*/
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004974:	f7fc f970 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004978:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800497a:	e003      	b.n	8004984 <LoopCopyDataInit>

0800497c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800497e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004980:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004982:	3104      	adds	r1, #4

08004984 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004984:	480a      	ldr	r0, [pc, #40]	; (80049b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004988:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800498a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800498c:	d3f6      	bcc.n	800497c <CopyDataInit>
	ldr	r2, =_sbss
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004990:	e002      	b.n	8004998 <LoopFillZerobss>

08004992 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004992:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004994:	f842 3b04 	str.w	r3, [r2], #4

08004998 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <LoopForever+0x16>)
	cmp	r2, r3
 800499a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800499c:	d3f9      	bcc.n	8004992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800499e:	f008 f9fb 	bl	800cd98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049a2:	f7fb ff9d 	bl	80008e0 <main>

080049a6 <LoopForever>:

LoopForever:
    b LoopForever
 80049a6:	e7fe      	b.n	80049a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049a8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80049ac:	0800d17c 	.word	0x0800d17c
	ldr	r0, =_sdata
 80049b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049b4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80049b8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80049bc:	20001374 	.word	0x20001374

080049c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049c0:	e7fe      	b.n	80049c0 <ADC1_2_IRQHandler>

080049c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049cc:	2003      	movs	r0, #3
 80049ce:	f000 f95f 	bl	8004c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80049d2:	2000      	movs	r0, #0
 80049d4:	f000 f80e 	bl	80049f4 <HAL_InitTick>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	71fb      	strb	r3, [r7, #7]
 80049e2:	e001      	b.n	80049e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80049e4:	f7fc f87a 	bl	8000adc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80049e8:	79fb      	ldrb	r3, [r7, #7]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
	...

080049f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <HAL_InitTick+0x6c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d023      	beq.n	8004a50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a08:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <HAL_InitTick+0x70>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <HAL_InitTick+0x6c>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 f96b 	bl	8004cfa <HAL_SYSTICK_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d809      	bhi.n	8004a44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a30:	2200      	movs	r2, #0
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	f000 f935 	bl	8004ca6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a3c:	4a0a      	ldr	r2, [pc, #40]	; (8004a68 <HAL_InitTick+0x74>)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e007      	b.n	8004a54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e004      	b.n	8004a54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	73fb      	strb	r3, [r7, #15]
 8004a4e:	e001      	b.n	8004a54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000008 	.word	0x20000008
 8004a64:	20000000 	.word	0x20000000
 8004a68:	20000004 	.word	0x20000004

08004a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_IncTick+0x20>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_IncTick+0x24>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	4a04      	ldr	r2, [pc, #16]	; (8004a90 <HAL_IncTick+0x24>)
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20000008 	.word	0x20000008
 8004a90:	200003d8 	.word	0x200003d8

08004a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return uwTick;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_GetTick+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	200003d8 	.word	0x200003d8

08004aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ab4:	f7ff ffee 	bl	8004a94 <HAL_GetTick>
 8004ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac4:	d005      	beq.n	8004ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_Delay+0x40>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad2:	bf00      	nop
 8004ad4:	f7ff ffde 	bl	8004a94 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d8f7      	bhi.n	8004ad4 <HAL_Delay+0x28>
  {
  }
}
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000008 	.word	0x20000008

08004af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b22:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <__NVIC_SetPriorityGrouping+0x44>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	60d3      	str	r3, [r2, #12]
}
 8004b28:	bf00      	nop
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000ed00 	.word	0xe000ed00

08004b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <__NVIC_GetPriorityGrouping+0x18>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0a1b      	lsrs	r3, r3, #8
 8004b42:	f003 0307 	and.w	r3, r3, #7
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000ed00 	.word	0xe000ed00

08004b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	db0b      	blt.n	8004b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b66:	79fb      	ldrb	r3, [r7, #7]
 8004b68:	f003 021f 	and.w	r2, r3, #31
 8004b6c:	4907      	ldr	r1, [pc, #28]	; (8004b8c <__NVIC_EnableIRQ+0x38>)
 8004b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2001      	movs	r0, #1
 8004b76:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	db0a      	blt.n	8004bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	490c      	ldr	r1, [pc, #48]	; (8004bdc <__NVIC_SetPriority+0x4c>)
 8004baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb8:	e00a      	b.n	8004bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	4908      	ldr	r1, [pc, #32]	; (8004be0 <__NVIC_SetPriority+0x50>)
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	3b04      	subs	r3, #4
 8004bc8:	0112      	lsls	r2, r2, #4
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	440b      	add	r3, r1
 8004bce:	761a      	strb	r2, [r3, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000e100 	.word	0xe000e100
 8004be0:	e000ed00 	.word	0xe000ed00

08004be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f1c3 0307 	rsb	r3, r3, #7
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf28      	it	cs
 8004c02:	2304      	movcs	r3, #4
 8004c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d902      	bls.n	8004c14 <NVIC_EncodePriority+0x30>
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3b03      	subs	r3, #3
 8004c12:	e000      	b.n	8004c16 <NVIC_EncodePriority+0x32>
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c18:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43da      	mvns	r2, r3
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	401a      	ands	r2, r3
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	fa01 f303 	lsl.w	r3, r1, r3
 8004c36:	43d9      	mvns	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c3c:	4313      	orrs	r3, r2
         );
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3724      	adds	r7, #36	; 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c5c:	d301      	bcc.n	8004c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e00f      	b.n	8004c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c62:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <SysTick_Config+0x40>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c6a:	210f      	movs	r1, #15
 8004c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c70:	f7ff ff8e 	bl	8004b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <SysTick_Config+0x40>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <SysTick_Config+0x40>)
 8004c7c:	2207      	movs	r2, #7
 8004c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	e000e010 	.word	0xe000e010

08004c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff29 	bl	8004af0 <__NVIC_SetPriorityGrouping>
}
 8004c9e:	bf00      	nop
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b086      	sub	sp, #24
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	4603      	mov	r3, r0
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb8:	f7ff ff3e 	bl	8004b38 <__NVIC_GetPriorityGrouping>
 8004cbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f7ff ff8e 	bl	8004be4 <NVIC_EncodePriority>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff5d 	bl	8004b90 <__NVIC_SetPriority>
}
 8004cd6:	bf00      	nop
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff ff31 	bl	8004b54 <__NVIC_EnableIRQ>
}
 8004cf2:	bf00      	nop
 8004cf4:	3708      	adds	r7, #8
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b082      	sub	sp, #8
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ffa2 	bl	8004c4c <SysTick_Config>
 8004d08:	4603      	mov	r3, r0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d22:	e14e      	b.n	8004fc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d30:	4013      	ands	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 8140 	beq.w	8004fbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d00b      	beq.n	8004d5c <HAL_GPIO_Init+0x48>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d007      	beq.n	8004d5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d50:	2b11      	cmp	r3, #17
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b12      	cmp	r3, #18
 8004d5a:	d130      	bne.n	8004dbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	2203      	movs	r2, #3
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4013      	ands	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d92:	2201      	movs	r2, #1
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4013      	ands	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0201 	and.w	r2, r3, #1
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d003      	beq.n	8004dfe <HAL_GPIO_Init+0xea>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b12      	cmp	r3, #18
 8004dfc:	d123      	bne.n	8004e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	08da      	lsrs	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3208      	adds	r2, #8
 8004e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	220f      	movs	r2, #15
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4013      	ands	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	08da      	lsrs	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3208      	adds	r2, #8
 8004e40:	6939      	ldr	r1, [r7, #16]
 8004e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	2203      	movs	r2, #3
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	43db      	mvns	r3, r3
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0203 	and.w	r2, r3, #3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 809a 	beq.w	8004fbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e88:	4b55      	ldr	r3, [pc, #340]	; (8004fe0 <HAL_GPIO_Init+0x2cc>)
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8c:	4a54      	ldr	r2, [pc, #336]	; (8004fe0 <HAL_GPIO_Init+0x2cc>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6613      	str	r3, [r2, #96]	; 0x60
 8004e94:	4b52      	ldr	r3, [pc, #328]	; (8004fe0 <HAL_GPIO_Init+0x2cc>)
 8004e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ea0:	4a50      	ldr	r2, [pc, #320]	; (8004fe4 <HAL_GPIO_Init+0x2d0>)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	089b      	lsrs	r3, r3, #2
 8004ea6:	3302      	adds	r3, #2
 8004ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	220f      	movs	r2, #15
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004eca:	d013      	beq.n	8004ef4 <HAL_GPIO_Init+0x1e0>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a46      	ldr	r2, [pc, #280]	; (8004fe8 <HAL_GPIO_Init+0x2d4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00d      	beq.n	8004ef0 <HAL_GPIO_Init+0x1dc>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a45      	ldr	r2, [pc, #276]	; (8004fec <HAL_GPIO_Init+0x2d8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <HAL_GPIO_Init+0x1d8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a44      	ldr	r2, [pc, #272]	; (8004ff0 <HAL_GPIO_Init+0x2dc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d101      	bne.n	8004ee8 <HAL_GPIO_Init+0x1d4>
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e006      	b.n	8004ef6 <HAL_GPIO_Init+0x1e2>
 8004ee8:	2307      	movs	r3, #7
 8004eea:	e004      	b.n	8004ef6 <HAL_GPIO_Init+0x1e2>
 8004eec:	2302      	movs	r3, #2
 8004eee:	e002      	b.n	8004ef6 <HAL_GPIO_Init+0x1e2>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_GPIO_Init+0x1e2>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	f002 0203 	and.w	r2, r2, #3
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	4093      	lsls	r3, r2
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f06:	4937      	ldr	r1, [pc, #220]	; (8004fe4 <HAL_GPIO_Init+0x2d0>)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f14:	4b37      	ldr	r3, [pc, #220]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4013      	ands	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f38:	4a2e      	ldr	r2, [pc, #184]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f3e:	4b2d      	ldr	r3, [pc, #180]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f62:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f68:	4b22      	ldr	r3, [pc, #136]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	43db      	mvns	r3, r3
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f92:	4b18      	ldr	r3, [pc, #96]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d003      	beq.n	8004fb6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <HAL_GPIO_Init+0x2e0>)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f47f aea9 	bne.w	8004d24 <HAL_GPIO_Init+0x10>
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	371c      	adds	r7, #28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	48000400 	.word	0x48000400
 8004fec:	48000800 	.word	0x48000800
 8004ff0:	48000c00 	.word	0x48000c00
 8004ff4:	40010400 	.word	0x40010400

08004ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	887b      	ldrh	r3, [r7, #2]
 800500a:	4013      	ands	r3, r2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
 8005014:	e001      	b.n	800501a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	460b      	mov	r3, r1
 8005032:	807b      	strh	r3, [r7, #2]
 8005034:	4613      	mov	r3, r2
 8005036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005038:	787b      	ldrb	r3, [r7, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005044:	e002      	b.n	800504c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005046:	887a      	ldrh	r2, [r7, #2]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e081      	b.n	800516e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fb fbea 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2224      	movs	r2, #36	; 0x24
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80050a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80050b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	e006      	b.n	80050e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80050de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d104      	bne.n	80050f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005100:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005104:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005114:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691a      	ldr	r2, [r3, #16]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	ea42 0103 	orr.w	r1, r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	021a      	lsls	r2, r3, #8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	69d9      	ldr	r1, [r3, #28]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	607a      	str	r2, [r7, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	460b      	mov	r3, r1
 8005186:	817b      	strh	r3, [r7, #10]
 8005188:	4613      	mov	r3, r2
 800518a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 80da 	bne.w	800534e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_I2C_Master_Transmit+0x30>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e0d3      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051b0:	f7ff fc70 	bl	8004a94 <HAL_GetTick>
 80051b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	2319      	movs	r3, #25
 80051bc:	2201      	movs	r2, #1
 80051be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f8f0 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e0be      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2221      	movs	r2, #33	; 0x21
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2210      	movs	r2, #16
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	893a      	ldrh	r2, [r7, #8]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2bff      	cmp	r3, #255	; 0xff
 8005202:	d90e      	bls.n	8005222 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	22ff      	movs	r2, #255	; 0xff
 8005208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520e:	b2da      	uxtb	r2, r3
 8005210:	8979      	ldrh	r1, [r7, #10]
 8005212:	4b51      	ldr	r3, [pc, #324]	; (8005358 <HAL_I2C_Master_Transmit+0x1e0>)
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 f9e6 	bl	80055ec <I2C_TransferConfig>
 8005220:	e06c      	b.n	80052fc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005230:	b2da      	uxtb	r2, r3
 8005232:	8979      	ldrh	r1, [r7, #10]
 8005234:	4b48      	ldr	r3, [pc, #288]	; (8005358 <HAL_I2C_Master_Transmit+0x1e0>)
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f9d5 	bl	80055ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005242:	e05b      	b.n	80052fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	6a39      	ldr	r1, [r7, #32]
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f8ed 	bl	8005428 <I2C_WaitOnTXISFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e07b      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d034      	beq.n	80052fc <HAL_I2C_Master_Transmit+0x184>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005296:	2b00      	cmp	r3, #0
 8005298:	d130      	bne.n	80052fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f87f 	bl	80053a8 <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e04d      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2bff      	cmp	r3, #255	; 0xff
 80052bc:	d90e      	bls.n	80052dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	2300      	movs	r3, #0
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f989 	bl	80055ec <I2C_TransferConfig>
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	8979      	ldrh	r1, [r7, #10]
 80052ee:	2300      	movs	r3, #0
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f978 	bl	80055ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d19e      	bne.n	8005244 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	6a39      	ldr	r1, [r7, #32]
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f8cc 	bl	80054a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01a      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2220      	movs	r2, #32
 8005320:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	4b0b      	ldr	r3, [pc, #44]	; (800535c <HAL_I2C_Master_Transmit+0x1e4>)
 800532e:	400b      	ands	r3, r1
 8005330:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2220      	movs	r2, #32
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e000      	b.n	8005350 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800534e:	2302      	movs	r3, #2
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	3718      	adds	r7, #24
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	80002000 	.word	0x80002000
 800535c:	fe00e800 	.word	0xfe00e800

08005360 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b02      	cmp	r3, #2
 8005374:	d103      	bne.n	800537e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d007      	beq.n	800539c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	619a      	str	r2, [r3, #24]
  }
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	603b      	str	r3, [r7, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053b8:	e022      	b.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c0:	d01e      	beq.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c2:	f7ff fb67 	bl	8004a94 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d302      	bcc.n	80053d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d113      	bne.n	8005400 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053dc:	f043 0220 	orr.w	r2, r3, #32
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00f      	b.n	8005420 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4013      	ands	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	429a      	cmp	r2, r3
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	429a      	cmp	r2, r3
 800541c:	d0cd      	beq.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005434:	e02c      	b.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f000 f870 	bl	8005520 <I2C_IsAcknowledgeFailed>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e02a      	b.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d01e      	beq.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005452:	f7ff fb1f 	bl	8004a94 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	d302      	bcc.n	8005468 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d113      	bne.n	8005490 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e007      	b.n	80054a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b02      	cmp	r3, #2
 800549c:	d1cb      	bne.n	8005436 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b4:	e028      	b.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f830 	bl	8005520 <I2C_IsAcknowledgeFailed>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e026      	b.n	8005518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7ff fae3 	bl	8004a94 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d302      	bcc.n	80054e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d113      	bne.n	8005508 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f043 0220 	orr.w	r2, r3, #32
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e007      	b.n	8005518 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d1cf      	bne.n	80054b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0310 	and.w	r3, r3, #16
 8005536:	2b10      	cmp	r3, #16
 8005538:	d151      	bne.n	80055de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800553a:	e022      	b.n	8005582 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005542:	d01e      	beq.n	8005582 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005544:	f7ff faa6 	bl	8004a94 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d302      	bcc.n	800555a <I2C_IsAcknowledgeFailed+0x3a>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d113      	bne.n	8005582 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f043 0220 	orr.w	r2, r3, #32
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e02e      	b.n	80055e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b20      	cmp	r3, #32
 800558e:	d1d5      	bne.n	800553c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2210      	movs	r2, #16
 8005596:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2220      	movs	r2, #32
 800559e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f7ff fedd 	bl	8005360 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6859      	ldr	r1, [r3, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b0d      	ldr	r3, [pc, #52]	; (80055e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80055b2:	400b      	ands	r3, r1
 80055b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f043 0204 	orr.w	r2, r3, #4
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	fe00e800 	.word	0xfe00e800

080055ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	817b      	strh	r3, [r7, #10]
 80055fa:	4613      	mov	r3, r2
 80055fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	0d5b      	lsrs	r3, r3, #21
 8005608:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <I2C_TransferConfig+0x58>)
 800560e:	430b      	orrs	r3, r1
 8005610:	43db      	mvns	r3, r3
 8005612:	ea02 0103 	and.w	r1, r2, r3
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800561c:	7a7b      	ldrb	r3, [r7, #9]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	431a      	orrs	r2, r3
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005636:	bf00      	nop
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	03ff63ff 	.word	0x03ff63ff

08005648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	d138      	bne.n	80056d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005668:	2302      	movs	r3, #2
 800566a:	e032      	b.n	80056d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2224      	movs	r2, #36	; 0x24
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f022 0201 	bic.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800569a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6819      	ldr	r1, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0201 	orr.w	r2, r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e000      	b.n	80056d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056d0:	2302      	movs	r3, #2
  }
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d139      	bne.n	8005768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d101      	bne.n	8005702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056fe:	2302      	movs	r3, #2
 8005700:	e033      	b.n	800576a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2224      	movs	r2, #36	; 0x24
 800570e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0201 	bic.w	r2, r2, #1
 8005720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e000      	b.n	800576a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005768:	2302      	movs	r3, #2
  }
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005778:	b08b      	sub	sp, #44	; 0x2c
 800577a:	af06      	add	r7, sp, #24
 800577c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d101      	bne.n	8005788 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e104      	b.n	8005992 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f006 fe83 	bl	800c4a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2203      	movs	r2, #3
 80057a6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4618      	mov	r0, r3
 80057b0:	f003 f804 	bl	80087bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	603b      	str	r3, [r7, #0]
 80057ba:	687e      	ldr	r6, [r7, #4]
 80057bc:	466d      	mov	r5, sp
 80057be:	f106 0410 	add.w	r4, r6, #16
 80057c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	602b      	str	r3, [r5, #0]
 80057ca:	1d33      	adds	r3, r6, #4
 80057cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057ce:	6838      	ldr	r0, [r7, #0]
 80057d0:	f002 ffcc 	bl	800876c <USB_CoreInit>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e0d5      	b.n	8005992 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2100      	movs	r1, #0
 80057ec:	4618      	mov	r0, r3
 80057ee:	f003 f800 	bl	80087f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
 80057f6:	e04c      	b.n	8005892 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	4613      	mov	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4413      	add	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	440b      	add	r3, r1
 8005808:	3301      	adds	r3, #1
 800580a:	2201      	movs	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	440b      	add	r3, r1
 800581e:	7bfa      	ldrb	r2, [r7, #15]
 8005820:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005822:	7bfa      	ldrb	r2, [r7, #15]
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	b298      	uxth	r0, r3
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	440b      	add	r3, r1
 8005834:	3336      	adds	r3, #54	; 0x36
 8005836:	4602      	mov	r2, r0
 8005838:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800583a:	7bfb      	ldrb	r3, [r7, #15]
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	3303      	adds	r3, #3
 800584c:	2200      	movs	r2, #0
 800584e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005850:	7bfa      	ldrb	r2, [r7, #15]
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	3338      	adds	r3, #56	; 0x38
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005864:	7bfa      	ldrb	r2, [r7, #15]
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	333c      	adds	r3, #60	; 0x3c
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	440b      	add	r3, r1
 8005886:	3340      	adds	r3, #64	; 0x40
 8005888:	2200      	movs	r2, #0
 800588a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800588c:	7bfb      	ldrb	r3, [r7, #15]
 800588e:	3301      	adds	r3, #1
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d3ad      	bcc.n	80057f8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800589c:	2300      	movs	r3, #0
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e044      	b.n	800592c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	440b      	add	r3, r1
 80058b0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80058b4:	2200      	movs	r2, #0
 80058b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058b8:	7bfa      	ldrb	r2, [r7, #15]
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	4613      	mov	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	440b      	add	r3, r1
 80058c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	440b      	add	r3, r1
 80058dc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80058e0:	2200      	movs	r2, #0
 80058e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	6879      	ldr	r1, [r7, #4]
 80058e8:	4613      	mov	r3, r2
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	440b      	add	r3, r1
 80058f2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058fa:	7bfa      	ldrb	r2, [r7, #15]
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	440b      	add	r3, r1
 8005908:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005910:	7bfa      	ldrb	r2, [r7, #15]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	3301      	adds	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	7bfa      	ldrb	r2, [r7, #15]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d3b5      	bcc.n	80058a2 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	603b      	str	r3, [r7, #0]
 800593c:	687e      	ldr	r6, [r7, #4]
 800593e:	466d      	mov	r5, sp
 8005940:	f106 0410 	add.w	r4, r6, #16
 8005944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	602b      	str	r3, [r5, #0]
 800594c:	1d33      	adds	r3, r6, #4
 800594e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005950:	6838      	ldr	r0, [r7, #0]
 8005952:	f002 ff5b 	bl	800880c <USB_DevInit>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e014      	b.n	8005992 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 fa63 	bl	8006e4c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f004 ff14 	bl	800a7b8 <USB_DevDisconnect>

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800599a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_PCD_Start+0x16>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e012      	b.n	80059d6 <HAL_PCD_Start+0x3c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 fee6 	bl	800878e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f004 fedf 	bl	800a78a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f004 fef9 	bl	800a7e2 <USB_ReadInterrupts>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059fa:	d102      	bne.n	8005a02 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fb5b 	bl	80060b8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f004 feeb 	bl	800a7e2 <USB_ReadInterrupts>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a16:	d112      	bne.n	8005a3e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f006 fdda 	bl	800c5ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f91e 	bl	8005c7a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f004 fecd 	bl	800a7e2 <USB_ReadInterrupts>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a52:	d10b      	bne.n	8005a6c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a66:	b292      	uxth	r2, r2
 8005a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f004 feb6 	bl	800a7e2 <USB_ReadInterrupts>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a80:	d10b      	bne.n	8005a9a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a94:	b292      	uxth	r2, r2
 8005a96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f004 fe9f 	bl	800a7e2 <USB_ReadInterrupts>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aae:	d133      	bne.n	8005b18 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0204 	bic.w	r2, r2, #4
 8005ac2:	b292      	uxth	r2, r2
 8005ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0208 	bic.w	r2, r2, #8
 8005ada:	b292      	uxth	r2, r2
 8005adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d107      	bne.n	8005afa <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005af2:	2100      	movs	r1, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f007 f829 	bl	800cb4c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f006 fdae 	bl	800c65c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005b12:	b292      	uxth	r2, r2
 8005b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f004 fe60 	bl	800a7e2 <USB_ReadInterrupts>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b2c:	d126      	bne.n	8005b7c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0208 	orr.w	r2, r2, #8
 8005b40:	b292      	uxth	r2, r2
 8005b42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0204 	orr.w	r2, r2, #4
 8005b70:	b292      	uxth	r2, r2
 8005b72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f006 fd56 	bl	800c628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f004 fe2e 	bl	800a7e2 <USB_ReadInterrupts>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8c:	2b80      	cmp	r3, #128	; 0x80
 8005b8e:	d13f      	bne.n	8005c10 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ba2:	b292      	uxth	r2, r2
 8005ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d12b      	bne.n	8005c0a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0204 	orr.w	r2, r2, #4
 8005bc4:	b292      	uxth	r2, r2
 8005bc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0208 	orr.w	r2, r2, #8
 8005bdc:	b292      	uxth	r2, r2
 8005bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c00:	2101      	movs	r1, #1
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f006 ffa2 	bl	800cb4c <HAL_PCDEx_LPM_Callback>
 8005c08:	e002      	b.n	8005c10 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f006 fd0c 	bl	800c628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f004 fde4 	bl	800a7e2 <USB_ReadInterrupts>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c24:	d10e      	bne.n	8005c44 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f006 fcc5 	bl	800c5ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f004 fdca 	bl	800a7e2 <USB_ReadInterrupts>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c58:	d10b      	bne.n	8005c72 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_PCD_SetAddress+0x1a>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e013      	b.n	8005cbc <HAL_PCD_SetAddress+0x42>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	78fa      	ldrb	r2, [r7, #3]
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f004 fd58 	bl	800a762 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	4608      	mov	r0, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	70fb      	strb	r3, [r7, #3]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	803b      	strh	r3, [r7, #0]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	da0e      	bge.n	8005d08 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2201      	movs	r2, #1
 8005d04:	705a      	strb	r2, [r3, #1]
 8005d06:	e00e      	b.n	8005d26 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 0207 	and.w	r2, r3, #7
 8005d0e:	4613      	mov	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	b2da      	uxtb	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d32:	883a      	ldrh	r2, [r7, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	78ba      	ldrb	r2, [r7, #2]
 8005d3c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	785b      	ldrb	r3, [r3, #1]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d50:	78bb      	ldrb	r3, [r7, #2]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d102      	bne.n	8005d5c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_PCD_EP_Open+0xa6>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e00e      	b.n	8005d88 <HAL_PCD_EP_Open+0xc4>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f002 fd69 	bl	8008850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005d86:	7afb      	ldrb	r3, [r7, #11]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	460b      	mov	r3, r1
 8005d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da0e      	bge.n	8005dc2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	705a      	strb	r2, [r3, #1]
 8005dc0:	e00e      	b.n	8005de0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 0207 	and.w	r2, r3, #7
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_PCD_EP_Close+0x6a>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e00e      	b.n	8005e18 <HAL_PCD_EP_Close+0x88>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f003 f88f 	bl	8008f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	607a      	str	r2, [r7, #4]
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	f003 0207 	and.w	r2, r3, #7
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4413      	add	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2200      	movs	r2, #0
 8005e58:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e6c:	7afb      	ldrb	r3, [r7, #11]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d106      	bne.n	8005e84 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6979      	ldr	r1, [r7, #20]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f003 fa42 	bl	8009306 <USB_EPStartXfer>
 8005e82:	e005      	b.n	8005e90 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6979      	ldr	r1, [r7, #20]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f003 fa3b 	bl	8009306 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 0207 	and.w	r2, r3, #7
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	00db      	lsls	r3, r3, #3
 8005eb6:	440b      	add	r3, r1
 8005eb8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005ebc:	681b      	ldr	r3, [r3, #0]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4413      	add	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2201      	movs	r2, #1
 8005f14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f22:	7afb      	ldrb	r3, [r7, #11]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d106      	bne.n	8005f3a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f003 f9e7 	bl	8009306 <USB_EPStartXfer>
 8005f38:	e005      	b.n	8005f46 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6979      	ldr	r1, [r7, #20]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f003 f9e0 	bl	8009306 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	f003 0207 	and.w	r2, r3, #7
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d901      	bls.n	8005f6e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e04c      	b.n	8006008 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	da0e      	bge.n	8005f94 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	705a      	strb	r2, [r3, #1]
 8005f92:	e00c      	b.n	8005fae <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	b2da      	uxtb	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_PCD_EP_SetStall+0x7e>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e01c      	b.n	8006008 <HAL_PCD_EP_SetStall+0xb8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68f9      	ldr	r1, [r7, #12]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f004 fac1 	bl	800a564 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f004 fc02 	bl	800a802 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	429a      	cmp	r2, r3
 8006028:	d901      	bls.n	800602e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e040      	b.n	80060b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800602e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006032:	2b00      	cmp	r3, #0
 8006034:	da0e      	bge.n	8006054 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 0307 	and.w	r3, r3, #7
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	4613      	mov	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4413      	add	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2201      	movs	r2, #1
 8006050:	705a      	strb	r2, [r3, #1]
 8006052:	e00e      	b.n	8006072 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006054:	78fb      	ldrb	r3, [r7, #3]
 8006056:	f003 0207 	and.w	r2, r3, #7
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	4413      	add	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	b2da      	uxtb	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_PCD_EP_ClrStall+0x82>
 800608e:	2302      	movs	r3, #2
 8006090:	e00e      	b.n	80060b0 <HAL_PCD_EP_ClrStall+0xa0>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f004 fab0 	bl	800a606 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	; 0x38
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80060c0:	e2d1      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060ca:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80060cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80060d8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f040 8152 	bne.w	8006386 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80060e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d150      	bne.n	800618e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	881b      	ldrh	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80060f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060fc:	81fb      	strh	r3, [r7, #14]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610c:	b29b      	uxth	r3, r3
 800610e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3328      	adds	r3, #40	; 0x28
 8006114:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800611e:	b29b      	uxth	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6812      	ldr	r2, [r2, #0]
 800612e:	4413      	add	r3, r2
 8006130:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	441a      	add	r2, r3
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800614c:	2100      	movs	r1, #0
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f006 fa23 	bl	800c59a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8282 	beq.w	8006666 <PCD_EP_ISR_Handler+0x5ae>
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 827d 	bne.w	8006666 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006172:	b2db      	uxtb	r3, r3
 8006174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006178:	b2da      	uxtb	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b292      	uxth	r2, r2
 8006180:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800618c:	e26b      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800619e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80061a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d032      	beq.n	800620e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	461a      	mov	r2, r3
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	4413      	add	r3, r2
 80061c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ce:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f004 fb5a 	bl	800a89c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	881b      	ldrh	r3, [r3, #0]
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80061f4:	4013      	ands	r3, r2
 80061f6:	823b      	strh	r3, [r7, #16]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	8a3a      	ldrh	r2, [r7, #16]
 80061fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006202:	b292      	uxth	r2, r2
 8006204:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f006 f99a 	bl	800c540 <HAL_PCD_SetupStageCallback>
 800620c:	e22b      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800620e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006212:	2b00      	cmp	r3, #0
 8006214:	f280 8227 	bge.w	8006666 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	b29a      	uxth	r2, r3
 8006220:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006224:	4013      	ands	r3, r2
 8006226:	83bb      	strh	r3, [r7, #28]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	8bba      	ldrh	r2, [r7, #28]
 800622e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006232:	b292      	uxth	r2, r2
 8006234:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623e:	b29b      	uxth	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	4413      	add	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	4413      	add	r3, r2
 8006250:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006254:	881b      	ldrh	r3, [r3, #0]
 8006256:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d019      	beq.n	800629a <PCD_EP_ISR_Handler+0x1e2>
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	6959      	ldr	r1, [r3, #20]
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800627e:	b29b      	uxth	r3, r3
 8006280:	f004 fb0c 	bl	800a89c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	695a      	ldr	r2, [r3, #20]
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	69db      	ldr	r3, [r3, #28]
 800628c:	441a      	add	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006292:	2100      	movs	r1, #0
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f006 f965 	bl	800c564 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	61bb      	str	r3, [r7, #24]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	461a      	mov	r2, r3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	4413      	add	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d112      	bne.n	80062e8 <PCD_EP_ISR_Handler+0x230>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	e02f      	b.n	8006348 <PCD_EP_ISR_Handler+0x290>
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b3e      	cmp	r3, #62	; 0x3e
 80062ee:	d813      	bhi.n	8006318 <PCD_EP_ISR_Handler+0x260>
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	633b      	str	r3, [r7, #48]	; 0x30
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <PCD_EP_ISR_Handler+0x252>
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	3301      	adds	r3, #1
 8006308:	633b      	str	r3, [r7, #48]	; 0x30
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	b29b      	uxth	r3, r3
 800630e:	029b      	lsls	r3, r3, #10
 8006310:	b29a      	uxth	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e017      	b.n	8006348 <PCD_EP_ISR_Handler+0x290>
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 031f 	and.w	r3, r3, #31
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <PCD_EP_ISR_Handler+0x27a>
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	3b01      	subs	r3, #1
 8006330:	633b      	str	r3, [r7, #48]	; 0x30
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	b29b      	uxth	r3, r3
 8006336:	029b      	lsls	r3, r3, #10
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006342:	b29a      	uxth	r2, r3
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	827b      	strh	r3, [r7, #18]
 800635a:	8a7b      	ldrh	r3, [r7, #18]
 800635c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006360:	827b      	strh	r3, [r7, #18]
 8006362:	8a7b      	ldrh	r3, [r7, #18]
 8006364:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006368:	827b      	strh	r3, [r7, #18]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	8a7b      	ldrh	r3, [r7, #18]
 8006370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800637c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006380:	b29b      	uxth	r3, r3
 8006382:	8013      	strh	r3, [r2, #0]
 8006384:	e16f      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006398:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800639c:	2b00      	cmp	r3, #0
 800639e:	f280 80e4 	bge.w	800656a <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	461a      	mov	r2, r3
 80063a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80063b8:	4013      	ands	r3, r2
 80063ba:	853b      	strh	r3, [r7, #40]	; 0x28
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063d0:	b292      	uxth	r2, r2
 80063d2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80063d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	4413      	add	r3, r2
 80063e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	7b1b      	ldrb	r3, [r3, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d120      	bne.n	8006434 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	6812      	ldr	r2, [r2, #0]
 800640a:	4413      	add	r3, r2
 800640c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006416:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8006418:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800641a:	2b00      	cmp	r3, #0
 800641c:	f000 8083 	beq.w	8006526 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	6959      	ldr	r1, [r3, #20]
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	88da      	ldrh	r2, [r3, #6]
 800642c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800642e:	f004 fa35 	bl	800a89c <USB_ReadPMA>
 8006432:	e078      	b.n	8006526 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	78db      	ldrb	r3, [r3, #3]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d108      	bne.n	800644e <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800643c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800643e:	461a      	mov	r2, r3
 8006440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f91d 	bl	8006682 <HAL_PCD_EP_DB_Receive>
 8006448:	4603      	mov	r3, r0
 800644a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800644c:	e06b      	b.n	8006526 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006468:	847b      	strh	r3, [r7, #34]	; 0x22
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	461a      	mov	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01f      	beq.n	80064e8 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064cc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80064ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d028      	beq.n	8006526 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	6959      	ldr	r1, [r3, #20]
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	891a      	ldrh	r2, [r3, #8]
 80064e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80064e2:	f004 f9db 	bl	800a89c <USB_ReadPMA>
 80064e6:	e01e      	b.n	8006526 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	00db      	lsls	r3, r3, #3
 80064fa:	4413      	add	r3, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	4413      	add	r3, r2
 8006502:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800650c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800650e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006510:	2b00      	cmp	r3, #0
 8006512:	d008      	beq.n	8006526 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	6959      	ldr	r1, [r3, #20]
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	895a      	ldrh	r2, [r3, #10]
 8006520:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006522:	f004 f9bb 	bl	800a89c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	69da      	ldr	r2, [r3, #28]
 800652a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800652c:	441a      	add	r2, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	695a      	ldr	r2, [r3, #20]
 8006536:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006538:	441a      	add	r2, r3
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <PCD_EP_ISR_Handler+0x498>
 8006546:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	429a      	cmp	r2, r3
 800654e:	d206      	bcs.n	800655e <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f006 f804 	bl	800c564 <HAL_PCD_DataOutStageCallback>
 800655c:	e005      	b.n	800656a <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006564:	4618      	mov	r0, r3
 8006566:	f002 fece 	bl	8009306 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800656a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800656c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006570:	2b00      	cmp	r3, #0
 8006572:	d078      	beq.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8006574:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	00db      	lsls	r3, r3, #3
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4413      	add	r3, r2
 8006586:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	461a      	mov	r2, r3
 800658e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800659e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a2:	843b      	strh	r3, [r7, #32]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	461a      	mov	r2, r3
 80065aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	441a      	add	r2, r3
 80065b2:	8c3b      	ldrh	r3, [r7, #32]
 80065b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065bc:	b29b      	uxth	r3, r3
 80065be:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	78db      	ldrb	r3, [r3, #3]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d108      	bne.n	80065da <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d144      	bne.n	800665a <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80065d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13f      	bne.n	800665a <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	4413      	add	r3, r2
 80065f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065f8:	881b      	ldrh	r3, [r3, #0]
 80065fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065fe:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	8bfb      	ldrh	r3, [r7, #30]
 8006606:	429a      	cmp	r2, r3
 8006608:	d906      	bls.n	8006618 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	8bfb      	ldrh	r3, [r7, #30]
 8006610:	1ad2      	subs	r2, r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	619a      	str	r2, [r3, #24]
 8006616:	e002      	b.n	800661e <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	2200      	movs	r2, #0
 800661c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f005 ffb4 	bl	800c59a <HAL_PCD_DataInStageCallback>
 8006632:	e018      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	695a      	ldr	r2, [r3, #20]
 8006638:	8bfb      	ldrh	r3, [r7, #30]
 800663a:	441a      	add	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	69da      	ldr	r2, [r3, #28]
 8006644:	8bfb      	ldrh	r3, [r7, #30]
 8006646:	441a      	add	r2, r3
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006652:	4618      	mov	r0, r3
 8006654:	f002 fe57 	bl	8009306 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006658:	e005      	b.n	8006666 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800665a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800665c:	461a      	mov	r2, r3
 800665e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f917 	bl	8006894 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800666e:	b29b      	uxth	r3, r3
 8006670:	b21b      	sxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	f6ff ad25 	blt.w	80060c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3738      	adds	r7, #56	; 0x38
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b088      	sub	sp, #32
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	4613      	mov	r3, r2
 800668e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d07c      	beq.n	8006794 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	4413      	add	r3, r2
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066be:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	8b7b      	ldrh	r3, [r7, #26]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d306      	bcc.n	80066d8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	8b7b      	ldrh	r3, [r7, #26]
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	619a      	str	r2, [r3, #24]
 80066d6:	e002      	b.n	80066de <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d123      	bne.n	800672e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006700:	833b      	strh	r3, [r7, #24]
 8006702:	8b3b      	ldrh	r3, [r7, #24]
 8006704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006708:	833b      	strh	r3, [r7, #24]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	441a      	add	r2, r3
 8006718:	8b3b      	ldrh	r3, [r7, #24]
 800671a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006722:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01f      	beq.n	8006778 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006752:	82fb      	strh	r3, [r7, #22]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	441a      	add	r2, r3
 8006762:	8afb      	ldrh	r3, [r7, #22]
 8006764:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006768:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800676c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006770:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006774:	b29b      	uxth	r3, r3
 8006776:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006778:	8b7b      	ldrh	r3, [r7, #26]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8085 	beq.w	800688a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6818      	ldr	r0, [r3, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6959      	ldr	r1, [r3, #20]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	891a      	ldrh	r2, [r3, #8]
 800678c:	8b7b      	ldrh	r3, [r7, #26]
 800678e:	f004 f885 	bl	800a89c <USB_ReadPMA>
 8006792:	e07a      	b.n	800688a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4413      	add	r3, r2
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	4413      	add	r3, r2
 80067ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	8b7b      	ldrh	r3, [r7, #26]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d306      	bcc.n	80067d2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	699a      	ldr	r2, [r3, #24]
 80067c8:	8b7b      	ldrh	r3, [r7, #26]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	619a      	str	r2, [r3, #24]
 80067d0:	e002      	b.n	80067d8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d123      	bne.n	8006828 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	4413      	add	r3, r2
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	83fb      	strh	r3, [r7, #30]
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006802:	83fb      	strh	r3, [r7, #30]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	441a      	add	r2, r3
 8006812:	8bfb      	ldrh	r3, [r7, #30]
 8006814:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006818:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006824:	b29b      	uxth	r3, r3
 8006826:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006828:	88fb      	ldrh	r3, [r7, #6]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11f      	bne.n	8006872 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	83bb      	strh	r3, [r7, #28]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	441a      	add	r2, r3
 800685c:	8bbb      	ldrh	r3, [r7, #28]
 800685e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800686e:	b29b      	uxth	r3, r3
 8006870:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006872:	8b7b      	ldrh	r3, [r7, #26]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	6959      	ldr	r1, [r3, #20]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	895a      	ldrh	r2, [r3, #10]
 8006884:	8b7b      	ldrh	r3, [r7, #26]
 8006886:	f004 f809 	bl	800a89c <USB_ReadPMA>
    }
  }

  return count;
 800688a:	8b7b      	ldrh	r3, [r7, #26]
}
 800688c:	4618      	mov	r0, r3
 800688e:	3720      	adds	r7, #32
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	; 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8130 	beq.w	8006b0e <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	4413      	add	r3, r2
 80068c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	699a      	ldr	r2, [r3, #24]
 80068d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068da:	429a      	cmp	r2, r3
 80068dc:	d906      	bls.n	80068ec <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	699a      	ldr	r2, [r3, #24]
 80068e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068e4:	1ad2      	subs	r2, r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	619a      	str	r2, [r3, #24]
 80068ea:	e002      	b.n	80068f2 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d12c      	bne.n	8006954 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	4619      	mov	r1, r3
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f005 fe4a 	bl	800c59a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006906:	88fb      	ldrh	r3, [r7, #6]
 8006908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 822d 	beq.w	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	461a      	mov	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692c:	827b      	strh	r3, [r7, #18]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	441a      	add	r2, r3
 800693c:	8a7b      	ldrh	r3, [r7, #18]
 800693e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006946:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800694a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694e:	b29b      	uxth	r3, r3
 8006950:	8013      	strh	r3, [r2, #0]
 8006952:	e20b      	b.n	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006954:	88fb      	ldrh	r3, [r7, #6]
 8006956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d01f      	beq.n	800699e <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	b29b      	uxth	r3, r3
 8006970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	84bb      	strh	r3, [r7, #36]	; 0x24
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	441a      	add	r2, r3
 8006988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800698a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800698e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699a:	b29b      	uxth	r3, r3
 800699c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	f040 81e1 	bne.w	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069b0:	441a      	add	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	69da      	ldr	r2, [r3, #28]
 80069ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069bc:	441a      	add	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6a1a      	ldr	r2, [r3, #32]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d309      	bcc.n	80069e2 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	1ad2      	subs	r2, r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	621a      	str	r2, [r3, #32]
 80069e0:	e014      	b.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 80069ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80069f6:	e009      	b.n	8006a0c <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d155      	bne.n	8006ac0 <HAL_PCD_EP_DB_Transmit+0x22c>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	61bb      	str	r3, [r7, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	461a      	mov	r2, r3
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	4413      	add	r3, r2
 8006a2a:	61bb      	str	r3, [r7, #24]
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	00da      	lsls	r2, r3, #3
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d112      	bne.n	8006a68 <HAL_PCD_EP_DB_Transmit+0x1d4>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	881b      	ldrh	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	801a      	strh	r2, [r3, #0]
 8006a66:	e047      	b.n	8006af8 <HAL_PCD_EP_DB_Transmit+0x264>
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8006a6c:	d811      	bhi.n	8006a92 <HAL_PCD_EP_DB_Transmit+0x1fe>
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <HAL_PCD_EP_DB_Transmit+0x1f0>
 8006a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a80:	3301      	adds	r3, #1
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e032      	b.n	8006af8 <HAL_PCD_EP_DB_Transmit+0x264>
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <HAL_PCD_EP_DB_Transmit+0x214>
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	029b      	lsls	r3, r3, #10
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e01b      	b.n	8006af8 <HAL_PCD_EP_DB_Transmit+0x264>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d117      	bne.n	8006af8 <HAL_PCD_EP_DB_Transmit+0x264>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	623b      	str	r3, [r7, #32]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	4413      	add	r3, r2
 8006ade:	623b      	str	r3, [r7, #32]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	6959      	ldr	r1, [r3, #20]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	891a      	ldrh	r2, [r3, #8]
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	f003 fe87 	bl	800a81a <USB_WritePMA>
 8006b0c:	e12e      	b.n	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00db      	lsls	r3, r3, #3
 8006b20:	4413      	add	r3, r2
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	6812      	ldr	r2, [r2, #0]
 8006b26:	4413      	add	r3, r2
 8006b28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b32:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d306      	bcc.n	8006b4c <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b44:	1ad2      	subs	r2, r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	619a      	str	r2, [r3, #24]
 8006b4a:	e002      	b.n	8006b52 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d12c      	bne.n	8006bb4 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f005 fd1a 	bl	800c59a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 80fd 	bne.w	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	8013      	strh	r3, [r2, #0]
 8006bb2:	e0db      	b.n	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006bb4:	88fb      	ldrh	r3, [r7, #6]
 8006bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d11f      	bne.n	8006bfe <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	441a      	add	r2, r3
 8006be8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	f040 80b1 	bne.w	8006d6c <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c10:	441a      	add	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6a1a      	ldr	r2, [r3, #32]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d309      	bcc.n	8006c42 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	6a1a      	ldr	r2, [r3, #32]
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	1ad2      	subs	r2, r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	621a      	str	r2, [r3, #32]
 8006c40:	e014      	b.n	8006c6c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 8006c4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006c56:	e009      	b.n	8006c6c <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2200      	movs	r2, #0
 8006c62:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d155      	bne.n	8006d26 <HAL_PCD_EP_DB_Transmit+0x492>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c8e:	4413      	add	r3, r2
 8006c90:	647b      	str	r3, [r7, #68]	; 0x44
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	00da      	lsls	r2, r3, #3
 8006c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d112      	bne.n	8006cce <HAL_PCD_EP_DB_Transmit+0x43a>
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006caa:	881b      	ldrh	r3, [r3, #0]
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cb6:	801a      	strh	r2, [r3, #0]
 8006cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cca:	801a      	strh	r2, [r3, #0]
 8006ccc:	e044      	b.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006cd2:	d811      	bhi.n	8006cf8 <HAL_PCD_EP_DB_Transmit+0x464>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	085b      	lsrs	r3, r3, #1
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_PCD_EP_DB_Transmit+0x456>
 8006ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	029b      	lsls	r3, r3, #10
 8006cf0:	b29a      	uxth	r2, r3
 8006cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf4:	801a      	strh	r2, [r3, #0]
 8006cf6:	e02f      	b.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_PCD_EP_DB_Transmit+0x47a>
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	029b      	lsls	r3, r3, #10
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	e018      	b.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d114      	bne.n	8006d58 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3c:	4413      	add	r3, r2
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	00da      	lsls	r2, r3, #3
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d48:	4413      	add	r3, r2
 8006d4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	6959      	ldr	r1, [r3, #20]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	895a      	ldrh	r2, [r3, #10]
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f003 fd57 	bl	800a81a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d86:	823b      	strh	r3, [r7, #16]
 8006d88:	8a3b      	ldrh	r3, [r7, #16]
 8006d8a:	f083 0310 	eor.w	r3, r3, #16
 8006d8e:	823b      	strh	r3, [r7, #16]
 8006d90:	8a3b      	ldrh	r3, [r7, #16]
 8006d92:	f083 0320 	eor.w	r3, r3, #32
 8006d96:	823b      	strh	r3, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	441a      	add	r2, r3
 8006da6:	8a3b      	ldrh	r3, [r7, #16]
 8006da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3748      	adds	r7, #72	; 0x48
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	817b      	strh	r3, [r7, #10]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006dd8:	897b      	ldrh	r3, [r7, #10]
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de4:	897b      	ldrh	r3, [r7, #10]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	e009      	b.n	8006e10 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006dfc:	897a      	ldrh	r2, [r7, #10]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006e10:	893b      	ldrh	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d107      	bne.n	8006e26 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	80da      	strh	r2, [r3, #6]
 8006e24:	e00b      	b.n	8006e3e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	0c1b      	lsrs	r3, r3, #16
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	f043 0302 	orr.w	r3, r3, #2
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40007000 	.word	0x40007000

08006ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eca:	d130      	bne.n	8006f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ecc:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d038      	beq.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006eda:	4b20      	ldr	r3, [pc, #128]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2232      	movs	r2, #50	; 0x32
 8006ef0:	fb02 f303 	mul.w	r3, r2, r3
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	0c9b      	lsrs	r3, r3, #18
 8006efc:	3301      	adds	r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f00:	e002      	b.n	8006f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f08:	4b14      	ldr	r3, [pc, #80]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f0a:	695b      	ldr	r3, [r3, #20]
 8006f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f14:	d102      	bne.n	8006f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f2      	bne.n	8006f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f28:	d110      	bne.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e00f      	b.n	8006f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3a:	d007      	beq.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f3c:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f44:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40007000 	.word	0x40007000
 8006f60:	20000000 	.word	0x20000000
 8006f64:	431bde83 	.word	0x431bde83

08006f68 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a04      	ldr	r2, [pc, #16]	; (8006f84 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f76:	6053      	str	r3, [r2, #4]
}
 8006f78:	bf00      	nop
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40007000 	.word	0x40007000

08006f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b08a      	sub	sp, #40	; 0x28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	f000 bc56 	b.w	8007848 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f9c:	4ba1      	ldr	r3, [pc, #644]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 030c 	and.w	r3, r3, #12
 8006fa4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fa6:	4b9f      	ldr	r3, [pc, #636]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80e6 	beq.w	800718a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d007      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x4c>
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	2b0c      	cmp	r3, #12
 8006fc8:	f040 808d 	bne.w	80070e6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	f040 8089 	bne.w	80070e6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fd4:	4b93      	ldr	r3, [pc, #588]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <HAL_RCC_OscConfig+0x66>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	f000 bc2d 	b.w	8007848 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff2:	4b8c      	ldr	r3, [pc, #560]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0308 	and.w	r3, r3, #8
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <HAL_RCC_OscConfig+0x80>
 8006ffe:	4b89      	ldr	r3, [pc, #548]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007006:	e005      	b.n	8007014 <HAL_RCC_OscConfig+0x8c>
 8007008:	4b86      	ldr	r3, [pc, #536]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800700a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007014:	4293      	cmp	r3, r2
 8007016:	d224      	bcs.n	8007062 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fd91 	bl	8007b44 <RCC_SetFlashLatencyFromMSIRange>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f000 bc0d 	b.w	8007848 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800702e:	4b7d      	ldr	r3, [pc, #500]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a7c      	ldr	r2, [pc, #496]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007034:	f043 0308 	orr.w	r3, r3, #8
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4b7a      	ldr	r3, [pc, #488]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	4977      	ldr	r1, [pc, #476]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800704c:	4b75      	ldr	r3, [pc, #468]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	4972      	ldr	r1, [pc, #456]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800705c:	4313      	orrs	r3, r2
 800705e:	604b      	str	r3, [r1, #4]
 8007060:	e025      	b.n	80070ae <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007062:	4b70      	ldr	r3, [pc, #448]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a6f      	ldr	r2, [pc, #444]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007068:	f043 0308 	orr.w	r3, r3, #8
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	4b6d      	ldr	r3, [pc, #436]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	496a      	ldr	r1, [pc, #424]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007080:	4b68      	ldr	r3, [pc, #416]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4965      	ldr	r1, [pc, #404]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007090:	4313      	orrs	r3, r2
 8007092:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 fd50 	bl	8007b44 <RCC_SetFlashLatencyFromMSIRange>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e3cc      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ae:	f000 fcb3 	bl	8007a18 <HAL_RCC_GetSysClockFreq>
 80070b2:	4601      	mov	r1, r0
 80070b4:	4b5b      	ldr	r3, [pc, #364]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	091b      	lsrs	r3, r3, #4
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	4a5a      	ldr	r2, [pc, #360]	; (8007228 <HAL_RCC_OscConfig+0x2a0>)
 80070c0:	5cd3      	ldrb	r3, [r2, r3]
 80070c2:	f003 031f 	and.w	r3, r3, #31
 80070c6:	fa21 f303 	lsr.w	r3, r1, r3
 80070ca:	4a58      	ldr	r2, [pc, #352]	; (800722c <HAL_RCC_OscConfig+0x2a4>)
 80070cc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070ce:	4b58      	ldr	r3, [pc, #352]	; (8007230 <HAL_RCC_OscConfig+0x2a8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7fd fc8e 	bl	80049f4 <HAL_InitTick>
 80070d8:	4603      	mov	r3, r0
 80070da:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80070dc:	7dfb      	ldrb	r3, [r7, #23]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d052      	beq.n	8007188 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	e3b0      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d032      	beq.n	8007154 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070ee:	4b4d      	ldr	r3, [pc, #308]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4c      	ldr	r2, [pc, #304]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80070f4:	f043 0301 	orr.w	r3, r3, #1
 80070f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070fa:	f7fd fccb 	bl	8004a94 <HAL_GetTick>
 80070fe:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007100:	e008      	b.n	8007114 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007102:	f7fd fcc7 	bl	8004a94 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e399      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007114:	4b43      	ldr	r3, [pc, #268]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f0      	beq.n	8007102 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007120:	4b40      	ldr	r3, [pc, #256]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a3f      	ldr	r2, [pc, #252]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007126:	f043 0308 	orr.w	r3, r3, #8
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b3d      	ldr	r3, [pc, #244]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	493a      	ldr	r1, [pc, #232]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800713e:	4b39      	ldr	r3, [pc, #228]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	4935      	ldr	r1, [pc, #212]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800714e:	4313      	orrs	r3, r2
 8007150:	604b      	str	r3, [r1, #4]
 8007152:	e01a      	b.n	800718a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007154:	4b33      	ldr	r3, [pc, #204]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a32      	ldr	r2, [pc, #200]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007160:	f7fd fc98 	bl	8004a94 <HAL_GetTick>
 8007164:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007168:	f7fd fc94 	bl	8004a94 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b02      	cmp	r3, #2
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e366      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800717a:	4b2a      	ldr	r3, [pc, #168]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f0      	bne.n	8007168 <HAL_RCC_OscConfig+0x1e0>
 8007186:	e000      	b.n	800718a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007188:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d073      	beq.n	800727e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	2b08      	cmp	r3, #8
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x220>
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d10e      	bne.n	80071c0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d10b      	bne.n	80071c0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a8:	4b1e      	ldr	r3, [pc, #120]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d063      	beq.n	800727c <HAL_RCC_OscConfig+0x2f4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d15f      	bne.n	800727c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e343      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c8:	d106      	bne.n	80071d8 <HAL_RCC_OscConfig+0x250>
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e01d      	b.n	8007214 <HAL_RCC_OscConfig+0x28c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e0:	d10c      	bne.n	80071fc <HAL_RCC_OscConfig+0x274>
 80071e2:	4b10      	ldr	r3, [pc, #64]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a0f      	ldr	r2, [pc, #60]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ec:	6013      	str	r3, [r2, #0]
 80071ee:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0c      	ldr	r2, [pc, #48]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e00b      	b.n	8007214 <HAL_RCC_OscConfig+0x28c>
 80071fc:	4b09      	ldr	r3, [pc, #36]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 8007202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007206:	6013      	str	r3, [r2, #0]
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a05      	ldr	r2, [pc, #20]	; (8007224 <HAL_RCC_OscConfig+0x29c>)
 800720e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01b      	beq.n	8007254 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721c:	f7fd fc3a 	bl	8004a94 <HAL_GetTick>
 8007220:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007222:	e010      	b.n	8007246 <HAL_RCC_OscConfig+0x2be>
 8007224:	40021000 	.word	0x40021000
 8007228:	0800d0ec 	.word	0x0800d0ec
 800722c:	20000000 	.word	0x20000000
 8007230:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007234:	f7fd fc2e 	bl	8004a94 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b64      	cmp	r3, #100	; 0x64
 8007240:	d901      	bls.n	8007246 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e300      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007246:	4ba0      	ldr	r3, [pc, #640]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0f0      	beq.n	8007234 <HAL_RCC_OscConfig+0x2ac>
 8007252:	e014      	b.n	800727e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007254:	f7fd fc1e 	bl	8004a94 <HAL_GetTick>
 8007258:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800725c:	f7fd fc1a 	bl	8004a94 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b64      	cmp	r3, #100	; 0x64
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e2ec      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800726e:	4b96      	ldr	r3, [pc, #600]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1f0      	bne.n	800725c <HAL_RCC_OscConfig+0x2d4>
 800727a:	e000      	b.n	800727e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800727c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d060      	beq.n	800734c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	2b04      	cmp	r3, #4
 800728e:	d005      	beq.n	800729c <HAL_RCC_OscConfig+0x314>
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	2b0c      	cmp	r3, #12
 8007294:	d119      	bne.n	80072ca <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d116      	bne.n	80072ca <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800729c:	4b8a      	ldr	r3, [pc, #552]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_RCC_OscConfig+0x32c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e2c9      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b4:	4b84      	ldr	r3, [pc, #528]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	4981      	ldr	r1, [pc, #516]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072c8:	e040      	b.n	800734c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d023      	beq.n	800731a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d2:	4b7d      	ldr	r3, [pc, #500]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a7c      	ldr	r2, [pc, #496]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80072d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072de:	f7fd fbd9 	bl	8004a94 <HAL_GetTick>
 80072e2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e6:	f7fd fbd5 	bl	8004a94 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e2a7      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072f8:	4b73      	ldr	r3, [pc, #460]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007300:	2b00      	cmp	r3, #0
 8007302:	d0f0      	beq.n	80072e6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007304:	4b70      	ldr	r3, [pc, #448]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	061b      	lsls	r3, r3, #24
 8007312:	496d      	ldr	r1, [pc, #436]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007314:	4313      	orrs	r3, r2
 8007316:	604b      	str	r3, [r1, #4]
 8007318:	e018      	b.n	800734c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731a:	4b6b      	ldr	r3, [pc, #428]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a6a      	ldr	r2, [pc, #424]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007326:	f7fd fbb5 	bl	8004a94 <HAL_GetTick>
 800732a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732e:	f7fd fbb1 	bl	8004a94 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e283      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007340:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1f0      	bne.n	800732e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0308 	and.w	r3, r3, #8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d07f      	beq.n	8007458 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d05f      	beq.n	8007420 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8007360:	4b59      	ldr	r3, [pc, #356]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007366:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	429a      	cmp	r2, r3
 8007374:	d037      	beq.n	80073e6 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e25c      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01b      	beq.n	80073d0 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8007398:	4b4b      	ldr	r3, [pc, #300]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800739a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800739e:	4a4a      	ldr	r2, [pc, #296]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073a0:	f023 0301 	bic.w	r3, r3, #1
 80073a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80073a8:	f7fd fb74 	bl	8004a94 <HAL_GetTick>
 80073ac:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b0:	f7fd fb70 	bl	8004a94 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b11      	cmp	r3, #17
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e242      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073c2:	4b41      	ldr	r3, [pc, #260]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1ef      	bne.n	80073b0 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80073d0:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d6:	f023 0210 	bic.w	r2, r3, #16
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699b      	ldr	r3, [r3, #24]
 80073de:	493a      	ldr	r1, [pc, #232]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e6:	4b38      	ldr	r3, [pc, #224]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ec:	4a36      	ldr	r2, [pc, #216]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 80073ee:	f043 0301 	orr.w	r3, r3, #1
 80073f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fd fb4d 	bl	8004a94 <HAL_GetTick>
 80073fa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073fe:	f7fd fb49 	bl	8004a94 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b11      	cmp	r3, #17
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e21b      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007410:	4b2d      	ldr	r3, [pc, #180]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCC_OscConfig+0x476>
 800741e:	e01b      	b.n	8007458 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007420:	4b29      	ldr	r3, [pc, #164]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007426:	4a28      	ldr	r2, [pc, #160]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007430:	f7fd fb30 	bl	8004a94 <HAL_GetTick>
 8007434:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007438:	f7fd fb2c 	bl	8004a94 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b11      	cmp	r3, #17
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e1fe      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800744a:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800744c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1ef      	bne.n	8007438 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80c1 	beq.w	80075e8 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007466:	2300      	movs	r3, #0
 8007468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800746e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10e      	bne.n	8007496 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007478:	4b13      	ldr	r3, [pc, #76]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800747a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747c:	4a12      	ldr	r2, [pc, #72]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 800747e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007482:	6593      	str	r3, [r2, #88]	; 0x58
 8007484:	4b10      	ldr	r3, [pc, #64]	; (80074c8 <HAL_RCC_OscConfig+0x540>)
 8007486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007490:	2301      	movs	r3, #1
 8007492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_RCC_OscConfig+0x544>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11c      	bne.n	80074dc <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_RCC_OscConfig+0x544>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a09      	ldr	r2, [pc, #36]	; (80074cc <HAL_RCC_OscConfig+0x544>)
 80074a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074ae:	f7fd faf1 	bl	8004a94 <HAL_GetTick>
 80074b2:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074b4:	e00c      	b.n	80074d0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b6:	f7fd faed 	bl	8004a94 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	2b02      	cmp	r3, #2
 80074c2:	d905      	bls.n	80074d0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e1bf      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80074d0:	4bb1      	ldr	r3, [pc, #708]	; (8007798 <HAL_RCC_OscConfig+0x810>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0ec      	beq.n	80074b6 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d02c      	beq.n	8007542 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80074e8:	4bac      	ldr	r3, [pc, #688]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fa:	49a8      	ldr	r1, [pc, #672]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d010      	beq.n	8007530 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800750e:	4ba3      	ldr	r3, [pc, #652]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007514:	4aa1      	ldr	r2, [pc, #644]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007516:	f043 0304 	orr.w	r3, r3, #4
 800751a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800751e:	4b9f      	ldr	r3, [pc, #636]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007524:	4a9d      	ldr	r2, [pc, #628]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800752e:	e018      	b.n	8007562 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007530:	4b9a      	ldr	r3, [pc, #616]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	4a99      	ldr	r2, [pc, #612]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007538:	f043 0301 	orr.w	r3, r3, #1
 800753c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007540:	e00f      	b.n	8007562 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007542:	4b96      	ldr	r3, [pc, #600]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	4a94      	ldr	r2, [pc, #592]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800754a:	f023 0301 	bic.w	r3, r3, #1
 800754e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007552:	4b92      	ldr	r3, [pc, #584]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007558:	4a90      	ldr	r2, [pc, #576]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800755a:	f023 0304 	bic.w	r3, r3, #4
 800755e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800756a:	f7fd fa93 	bl	8004a94 <HAL_GetTick>
 800756e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007570:	e00a      	b.n	8007588 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007572:	f7fd fa8f 	bl	8004a94 <HAL_GetTick>
 8007576:	4602      	mov	r2, r0
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007580:	4293      	cmp	r3, r2
 8007582:	d901      	bls.n	8007588 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8007584:	2303      	movs	r3, #3
 8007586:	e15f      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007588:	4b84      	ldr	r3, [pc, #528]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d0ed      	beq.n	8007572 <HAL_RCC_OscConfig+0x5ea>
 8007596:	e01d      	b.n	80075d4 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007598:	f7fd fa7c 	bl	8004a94 <HAL_GetTick>
 800759c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800759e:	e00a      	b.n	80075b6 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a0:	f7fd fa78 	bl	8004a94 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e148      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80075b6:	4b79      	ldr	r3, [pc, #484]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1ed      	bne.n	80075a0 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80075c4:	4b75      	ldr	r3, [pc, #468]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ca:	4a74      	ldr	r2, [pc, #464]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d105      	bne.n	80075e8 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075dc:	4b6f      	ldr	r3, [pc, #444]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e0:	4a6e      	ldr	r2, [pc, #440]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d03c      	beq.n	800766e <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d01c      	beq.n	8007636 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80075fc:	4b67      	ldr	r3, [pc, #412]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80075fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007602:	4a66      	ldr	r2, [pc, #408]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760c:	f7fd fa42 	bl	8004a94 <HAL_GetTick>
 8007610:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007614:	f7fd fa3e 	bl	8004a94 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e110      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007626:	4b5d      	ldr	r3, [pc, #372]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0ef      	beq.n	8007614 <HAL_RCC_OscConfig+0x68c>
 8007634:	e01b      	b.n	800766e <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007636:	4b59      	ldr	r3, [pc, #356]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800763c:	4a57      	ldr	r2, [pc, #348]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007646:	f7fd fa25 	bl	8004a94 <HAL_GetTick>
 800764a:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800764c:	e008      	b.n	8007660 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800764e:	f7fd fa21 	bl	8004a94 <HAL_GetTick>
 8007652:	4602      	mov	r2, r0
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	2b02      	cmp	r3, #2
 800765a:	d901      	bls.n	8007660 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e0f3      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007660:	4b4e      	ldr	r3, [pc, #312]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ef      	bne.n	800764e <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 80e7 	beq.w	8007846 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	2b02      	cmp	r3, #2
 800767e:	f040 80b7 	bne.w	80077f0 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007682:	4b46      	ldr	r3, [pc, #280]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f003 0203 	and.w	r2, r3, #3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	429a      	cmp	r2, r3
 8007694:	d124      	bne.n	80076e0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	3b01      	subs	r3, #1
 80076a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d11b      	bne.n	80076e0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d113      	bne.n	80076e0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	085b      	lsrs	r3, r3, #1
 80076c4:	3b01      	subs	r3, #1
 80076c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d109      	bne.n	80076e0 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	3b01      	subs	r3, #1
 80076da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80076dc:	429a      	cmp	r2, r3
 80076de:	d061      	beq.n	80077a4 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	2b0c      	cmp	r3, #12
 80076e4:	d056      	beq.n	8007794 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80076e6:	4b2d      	ldr	r3, [pc, #180]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a2c      	ldr	r2, [pc, #176]	; (800779c <HAL_RCC_OscConfig+0x814>)
 80076ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80076f2:	f7fd f9cf 	bl	8004a94 <HAL_GetTick>
 80076f6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076f8:	e008      	b.n	800770c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076fa:	f7fd f9cb 	bl	8004a94 <HAL_GetTick>
 80076fe:	4602      	mov	r2, r0
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	1ad3      	subs	r3, r2, r3
 8007704:	2b02      	cmp	r3, #2
 8007706:	d901      	bls.n	800770c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e09d      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f0      	bne.n	80076fa <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007718:	4b20      	ldr	r3, [pc, #128]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800771a:	68da      	ldr	r2, [r3, #12]
 800771c:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <HAL_RCC_OscConfig+0x818>)
 800771e:	4013      	ands	r3, r2
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007728:	3a01      	subs	r2, #1
 800772a:	0112      	lsls	r2, r2, #4
 800772c:	4311      	orrs	r1, r2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007732:	0212      	lsls	r2, r2, #8
 8007734:	4311      	orrs	r1, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800773a:	0852      	lsrs	r2, r2, #1
 800773c:	3a01      	subs	r2, #1
 800773e:	0552      	lsls	r2, r2, #21
 8007740:	4311      	orrs	r1, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007746:	0852      	lsrs	r2, r2, #1
 8007748:	3a01      	subs	r2, #1
 800774a:	0652      	lsls	r2, r2, #25
 800774c:	430a      	orrs	r2, r1
 800774e:	4913      	ldr	r1, [pc, #76]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007750:	4313      	orrs	r3, r2
 8007752:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007754:	4b11      	ldr	r3, [pc, #68]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a10      	ldr	r2, [pc, #64]	; (800779c <HAL_RCC_OscConfig+0x814>)
 800775a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800775e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007760:	4b0e      	ldr	r3, [pc, #56]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4a0d      	ldr	r2, [pc, #52]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800776a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800776c:	f7fd f992 	bl	8004a94 <HAL_GetTick>
 8007770:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007772:	e008      	b.n	8007786 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007774:	f7fd f98e 	bl	8004a94 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	2b02      	cmp	r3, #2
 8007780:	d901      	bls.n	8007786 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e060      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCC_OscConfig+0x814>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0f0      	beq.n	8007774 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007792:	e058      	b.n	8007846 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e057      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
 8007798:	40007000 	.word	0x40007000
 800779c:	40021000 	.word	0x40021000
 80077a0:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077a4:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d14a      	bne.n	8007846 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80077b0:	4b27      	ldr	r3, [pc, #156]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a26      	ldr	r2, [pc, #152]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077bc:	4b24      	ldr	r3, [pc, #144]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	4a23      	ldr	r2, [pc, #140]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80077c8:	f7fd f964 	bl	8004a94 <HAL_GetTick>
 80077cc:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d0:	f7fd f960 	bl	8004a94 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e032      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	4b1b      	ldr	r3, [pc, #108]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x848>
 80077ee:	e02a      	b.n	8007846 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	2b0c      	cmp	r3, #12
 80077f4:	d025      	beq.n	8007842 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077f6:	4b16      	ldr	r3, [pc, #88]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a15      	ldr	r2, [pc, #84]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 80077fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007800:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	4a12      	ldr	r2, [pc, #72]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 8007808:	f023 0303 	bic.w	r3, r3, #3
 800780c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800780e:	4b10      	ldr	r3, [pc, #64]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	4a0f      	ldr	r2, [pc, #60]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 8007814:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007818:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781a:	f7fd f93b 	bl	8004a94 <HAL_GetTick>
 800781e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007820:	e008      	b.n	8007834 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007822:	f7fd f937 	bl	8004a94 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d901      	bls.n	8007834 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e009      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <HAL_RCC_OscConfig+0x8c8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f0      	bne.n	8007822 <HAL_RCC_OscConfig+0x89a>
 8007840:	e001      	b.n	8007846 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e000      	b.n	8007848 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3728      	adds	r7, #40	; 0x28
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	40021000 	.word	0x40021000

08007854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e0c8      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007868:	4b66      	ldr	r3, [pc, #408]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	683a      	ldr	r2, [r7, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	d910      	bls.n	8007898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007876:	4b63      	ldr	r3, [pc, #396]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f023 0207 	bic.w	r2, r3, #7
 800787e:	4961      	ldr	r1, [pc, #388]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007886:	4b5f      	ldr	r3, [pc, #380]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d001      	beq.n	8007898 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0b0      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d04c      	beq.n	800793e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d107      	bne.n	80078bc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80078ac:	4b56      	ldr	r3, [pc, #344]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d121      	bne.n	80078fc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e09e      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d107      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078c4:	4b50      	ldr	r3, [pc, #320]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e092      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d107      	bne.n	80078ec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80078dc:	4b4a      	ldr	r3, [pc, #296]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0302 	and.w	r3, r3, #2
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d109      	bne.n	80078fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e086      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078ec:	4b46      	ldr	r3, [pc, #280]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e07e      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f023 0203 	bic.w	r2, r3, #3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	493f      	ldr	r1, [pc, #252]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 800790a:	4313      	orrs	r3, r2
 800790c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7fd f8c1 	bl	8004a94 <HAL_GetTick>
 8007912:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007914:	e00a      	b.n	800792c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007916:	f7fd f8bd 	bl	8004a94 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	f241 3288 	movw	r2, #5000	; 0x1388
 8007924:	4293      	cmp	r3, r2
 8007926:	d901      	bls.n	800792c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e066      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800792c:	4b36      	ldr	r3, [pc, #216]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 020c 	and.w	r2, r3, #12
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	429a      	cmp	r2, r3
 800793c:	d1eb      	bne.n	8007916 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800794a:	4b2f      	ldr	r3, [pc, #188]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	492c      	ldr	r1, [pc, #176]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 8007958:	4313      	orrs	r3, r2
 800795a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800795c:	4b29      	ldr	r3, [pc, #164]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	429a      	cmp	r2, r3
 8007968:	d210      	bcs.n	800798c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800796a:	4b26      	ldr	r3, [pc, #152]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f023 0207 	bic.w	r2, r3, #7
 8007972:	4924      	ldr	r1, [pc, #144]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	4313      	orrs	r3, r2
 8007978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800797a:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <HAL_RCC_ClockConfig+0x1b0>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	429a      	cmp	r2, r3
 8007986:	d001      	beq.n	800798c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e036      	b.n	80079fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	4918      	ldr	r1, [pc, #96]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80079b6:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	4910      	ldr	r1, [pc, #64]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079ca:	f000 f825 	bl	8007a18 <HAL_RCC_GetSysClockFreq>
 80079ce:	4601      	mov	r1, r0
 80079d0:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <HAL_RCC_ClockConfig+0x1b4>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <HAL_RCC_ClockConfig+0x1b8>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	fa21 f303 	lsr.w	r3, r1, r3
 80079e6:	4a0a      	ldr	r2, [pc, #40]	; (8007a10 <HAL_RCC_ClockConfig+0x1bc>)
 80079e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <HAL_RCC_ClockConfig+0x1c0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd f800 	bl	80049f4 <HAL_InitTick>
 80079f4:	4603      	mov	r3, r0
 80079f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80079f8:	7afb      	ldrb	r3, [r7, #11]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40022000 	.word	0x40022000
 8007a08:	40021000 	.word	0x40021000
 8007a0c:	0800d0ec 	.word	0x0800d0ec
 8007a10:	20000000 	.word	0x20000000
 8007a14:	20000004 	.word	0x20000004

08007a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b089      	sub	sp, #36	; 0x24
 8007a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a26:	4b3d      	ldr	r3, [pc, #244]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 030c 	and.w	r3, r3, #12
 8007a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a30:	4b3a      	ldr	r3, [pc, #232]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0x34>
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	2b0c      	cmp	r3, #12
 8007a44:	d121      	bne.n	8007a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d11e      	bne.n	8007a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007a4c:	4b33      	ldr	r3, [pc, #204]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d107      	bne.n	8007a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007a58:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	61fb      	str	r3, [r7, #28]
 8007a66:	e005      	b.n	8007a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007a68:	4b2c      	ldr	r3, [pc, #176]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	091b      	lsrs	r3, r3, #4
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007a74:	4a2a      	ldr	r2, [pc, #168]	; (8007b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10d      	bne.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a88:	e00a      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d102      	bne.n	8007a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007a90:	4b24      	ldr	r3, [pc, #144]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	e004      	b.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d101      	bne.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007a9c:	4b22      	ldr	r3, [pc, #136]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8007a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	2b0c      	cmp	r3, #12
 8007aa4:	d133      	bne.n	8007b0e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aa6:	4b1d      	ldr	r3, [pc, #116]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d002      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0xa4>
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCC_GetSysClockFreq+0xaa>
 8007aba:	e005      	b.n	8007ac8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007abc:	4b19      	ldr	r3, [pc, #100]	; (8007b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007abe:	617b      	str	r3, [r7, #20]
      break;
 8007ac0:	e005      	b.n	8007ace <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007ac2:	4b19      	ldr	r3, [pc, #100]	; (8007b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8007ac4:	617b      	str	r3, [r7, #20]
      break;
 8007ac6:	e002      	b.n	8007ace <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	617b      	str	r3, [r7, #20]
      break;
 8007acc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	091b      	lsrs	r3, r3, #4
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	3301      	adds	r3, #1
 8007ada:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007adc:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	fb02 f203 	mul.w	r2, r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007af4:	4b09      	ldr	r3, [pc, #36]	; (8007b1c <HAL_RCC_GetSysClockFreq+0x104>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	0e5b      	lsrs	r3, r3, #25
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3724      	adds	r7, #36	; 0x24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	0800d0fc 	.word	0x0800d0fc
 8007b24:	00f42400 	.word	0x00f42400
 8007b28:	007a1200 	.word	0x007a1200

08007b2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b30:	4b03      	ldr	r3, [pc, #12]	; (8007b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b32:	681b      	ldr	r3, [r3, #0]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	20000000 	.word	0x20000000

08007b44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b50:	4b2a      	ldr	r3, [pc, #168]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d003      	beq.n	8007b64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b5c:	f7ff f9a0 	bl	8006ea0 <HAL_PWREx_GetVoltageRange>
 8007b60:	6178      	str	r0, [r7, #20]
 8007b62:	e014      	b.n	8007b8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b64:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b68:	4a24      	ldr	r2, [pc, #144]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8007b70:	4b22      	ldr	r3, [pc, #136]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b7c:	f7ff f990 	bl	8006ea0 <HAL_PWREx_GetVoltageRange>
 8007b80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b82:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b86:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b94:	d10b      	bne.n	8007bae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b80      	cmp	r3, #128	; 0x80
 8007b9a:	d919      	bls.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2ba0      	cmp	r3, #160	; 0xa0
 8007ba0:	d902      	bls.n	8007ba8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	e013      	b.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007ba8:	2301      	movs	r3, #1
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	e010      	b.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b80      	cmp	r3, #128	; 0x80
 8007bb2:	d902      	bls.n	8007bba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	613b      	str	r3, [r7, #16]
 8007bb8:	e00a      	b.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b80      	cmp	r3, #128	; 0x80
 8007bbe:	d102      	bne.n	8007bc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	e004      	b.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b70      	cmp	r3, #112	; 0x70
 8007bca:	d101      	bne.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007bcc:	2301      	movs	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bd0:	4b0b      	ldr	r3, [pc, #44]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f023 0207 	bic.w	r2, r3, #7
 8007bd8:	4909      	ldr	r1, [pc, #36]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007be0:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d001      	beq.n	8007bf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e000      	b.n	8007bf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	40021000 	.word	0x40021000
 8007c00:	40022000 	.word	0x40022000

08007c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c10:	2300      	movs	r3, #0
 8007c12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 809e 	beq.w	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c22:	2300      	movs	r3, #0
 8007c24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007c26:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007c32:	2301      	movs	r3, #1
 8007c34:	e000      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8007c36:	2300      	movs	r3, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00d      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c3c:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c40:	4a3f      	ldr	r2, [pc, #252]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c46:	6593      	str	r3, [r2, #88]	; 0x58
 8007c48:	4b3d      	ldr	r3, [pc, #244]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c50:	60bb      	str	r3, [r7, #8]
 8007c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c54:	2301      	movs	r3, #1
 8007c56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c58:	4b3a      	ldr	r3, [pc, #232]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a39      	ldr	r2, [pc, #228]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c64:	f7fc ff16 	bl	8004a94 <HAL_GetTick>
 8007c68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c6a:	e009      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c6c:	f7fc ff12 	bl	8004a94 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d902      	bls.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8007c7e:	e005      	b.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007c80:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0ef      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8007c8c:	7cfb      	ldrb	r3, [r7, #19]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d15a      	bne.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007c92:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01e      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d019      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007cae:	4b24      	ldr	r3, [pc, #144]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cba:	4b21      	ldr	r3, [pc, #132]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cca:	4b1d      	ldr	r3, [pc, #116]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd0:	4a1b      	ldr	r2, [pc, #108]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007cda:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f003 0301 	and.w	r3, r3, #1
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d016      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cec:	f7fc fed2 	bl	8004a94 <HAL_GetTick>
 8007cf0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf2:	e00b      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf4:	f7fc fece 	bl	8004a94 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d902      	bls.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	74fb      	strb	r3, [r7, #19]
            break;
 8007d0a:	e006      	b.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d0ec      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8007d1a:	7cfb      	ldrb	r3, [r7, #19]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10b      	bne.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d20:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007d36:	e009      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d38:	7cfb      	ldrb	r3, [r7, #19]
 8007d3a:	74bb      	strb	r3, [r7, #18]
 8007d3c:	e006      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d48:	7cfb      	ldrb	r3, [r7, #19]
 8007d4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d4c:	7c7b      	ldrb	r3, [r7, #17]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d105      	bne.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d52:	4b6e      	ldr	r3, [pc, #440]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	4a6d      	ldr	r2, [pc, #436]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007d6a:	4b68      	ldr	r3, [pc, #416]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	f023 0203 	bic.w	r2, r3, #3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4964      	ldr	r1, [pc, #400]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007d8c:	4b5f      	ldr	r3, [pc, #380]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	f023 020c 	bic.w	r2, r3, #12
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	495c      	ldr	r1, [pc, #368]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00a      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007dae:	4b57      	ldr	r3, [pc, #348]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	4953      	ldr	r1, [pc, #332]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0320 	and.w	r3, r3, #32
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dd0:	4b4e      	ldr	r3, [pc, #312]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	494b      	ldr	r1, [pc, #300]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df2:	4b46      	ldr	r3, [pc, #280]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	4942      	ldr	r1, [pc, #264]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007e14:	4b3d      	ldr	r3, [pc, #244]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e22:	493a      	ldr	r1, [pc, #232]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e24:	4313      	orrs	r3, r2
 8007e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e36:	4b35      	ldr	r3, [pc, #212]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	4931      	ldr	r1, [pc, #196]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e58:	4b2c      	ldr	r3, [pc, #176]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4929      	ldr	r1, [pc, #164]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	4920      	ldr	r1, [pc, #128]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d015      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e9c:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	4918      	ldr	r1, [pc, #96]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eba:	d105      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ebc:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	4a12      	ldr	r2, [pc, #72]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ec6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d015      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee2:	490a      	ldr	r1, [pc, #40]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef2:	d105      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ef4:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	4a04      	ldr	r2, [pc, #16]	; (8007f0c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8007efa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007efe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007f00:	7cbb      	ldrb	r3, [r7, #18]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40021000 	.word	0x40021000

08007f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e049      	b.n	8007fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d106      	bne.n	8007f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7f8 ff12 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2202      	movs	r2, #2
 8007f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f000 fa8a 	bl	8008468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
	...

08007fc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d001      	beq.n	8007fd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e03b      	b.n	8008050 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a19      	ldr	r2, [pc, #100]	; (800805c <HAL_TIM_Base_Start_IT+0x9c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d009      	beq.n	800800e <HAL_TIM_Base_Start_IT+0x4e>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008002:	d004      	beq.n	800800e <HAL_TIM_Base_Start_IT+0x4e>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a15      	ldr	r2, [pc, #84]	; (8008060 <HAL_TIM_Base_Start_IT+0xa0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d115      	bne.n	800803a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689a      	ldr	r2, [r3, #8]
 8008014:	4b13      	ldr	r3, [pc, #76]	; (8008064 <HAL_TIM_Base_Start_IT+0xa4>)
 8008016:	4013      	ands	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2b06      	cmp	r3, #6
 800801e:	d015      	beq.n	800804c <HAL_TIM_Base_Start_IT+0x8c>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008026:	d011      	beq.n	800804c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f042 0201 	orr.w	r2, r2, #1
 8008036:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008038:	e008      	b.n	800804c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0201 	orr.w	r2, r2, #1
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	e000      	b.n	800804e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr
 800805c:	40012c00 	.word	0x40012c00
 8008060:	40014000 	.word	0x40014000
 8008064:	00010007 	.word	0x00010007

08008068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b02      	cmp	r3, #2
 800807c:	d122      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b02      	cmp	r3, #2
 800808a:	d11b      	bne.n	80080c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f06f 0202 	mvn.w	r2, #2
 8008094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d003      	beq.n	80080b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f9be 	bl	800842c <HAL_TIM_IC_CaptureCallback>
 80080b0:	e005      	b.n	80080be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f9b0 	bl	8008418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9c1 	bl	8008440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0304 	and.w	r3, r3, #4
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	d122      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d11b      	bne.n	8008118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f06f 0204 	mvn.w	r2, #4
 80080e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f994 	bl	800842c <HAL_TIM_IC_CaptureCallback>
 8008104:	e005      	b.n	8008112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f986 	bl	8008418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f997 	bl	8008440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b08      	cmp	r3, #8
 8008124:	d122      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b08      	cmp	r3, #8
 8008132:	d11b      	bne.n	800816c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f06f 0208 	mvn.w	r2, #8
 800813c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2204      	movs	r2, #4
 8008142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f96a 	bl	800842c <HAL_TIM_IC_CaptureCallback>
 8008158:	e005      	b.n	8008166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f95c 	bl	8008418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f96d 	bl	8008440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	f003 0310 	and.w	r3, r3, #16
 8008176:	2b10      	cmp	r3, #16
 8008178:	d122      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	f003 0310 	and.w	r3, r3, #16
 8008184:	2b10      	cmp	r3, #16
 8008186:	d11b      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f06f 0210 	mvn.w	r2, #16
 8008190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2208      	movs	r2, #8
 8008196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f940 	bl	800842c <HAL_TIM_IC_CaptureCallback>
 80081ac:	e005      	b.n	80081ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 f932 	bl	8008418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f943 	bl	8008440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0301 	and.w	r3, r3, #1
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0201 	mvn.w	r2, #1
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7f8 fc2a 	bl	8000a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081f6:	2b80      	cmp	r3, #128	; 0x80
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008204:	2b80      	cmp	r3, #128	; 0x80
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 fa96 	bl	8008744 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008226:	d10e      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008232:	2b80      	cmp	r3, #128	; 0x80
 8008234:	d107      	bne.n	8008246 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800823e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fa89 	bl	8008758 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d10e      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d107      	bne.n	8008272 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800826a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f8f1 	bl	8008454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d10e      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f003 0320 	and.w	r3, r3, #32
 800828a:	2b20      	cmp	r3, #32
 800828c:	d107      	bne.n	800829e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f06f 0220 	mvn.w	r2, #32
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 fa49 	bl	8008730 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d101      	bne.n	80082be <HAL_TIM_ConfigClockSource+0x18>
 80082ba:	2302      	movs	r3, #2
 80082bc:	e0a8      	b.n	8008410 <HAL_TIM_ConfigClockSource+0x16a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082dc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082e8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	d067      	beq.n	80083ca <HAL_TIM_ConfigClockSource+0x124>
 80082fa:	2b40      	cmp	r3, #64	; 0x40
 80082fc:	d80b      	bhi.n	8008316 <HAL_TIM_ConfigClockSource+0x70>
 80082fe:	2b10      	cmp	r3, #16
 8008300:	d073      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x144>
 8008302:	2b10      	cmp	r3, #16
 8008304:	d802      	bhi.n	800830c <HAL_TIM_ConfigClockSource+0x66>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d06f      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800830a:	e078      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800830c:	2b20      	cmp	r3, #32
 800830e:	d06c      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x144>
 8008310:	2b30      	cmp	r3, #48	; 0x30
 8008312:	d06a      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0x144>
      break;
 8008314:	e073      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008316:	2b70      	cmp	r3, #112	; 0x70
 8008318:	d00d      	beq.n	8008336 <HAL_TIM_ConfigClockSource+0x90>
 800831a:	2b70      	cmp	r3, #112	; 0x70
 800831c:	d804      	bhi.n	8008328 <HAL_TIM_ConfigClockSource+0x82>
 800831e:	2b50      	cmp	r3, #80	; 0x50
 8008320:	d033      	beq.n	800838a <HAL_TIM_ConfigClockSource+0xe4>
 8008322:	2b60      	cmp	r3, #96	; 0x60
 8008324:	d041      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008326:	e06a      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d066      	beq.n	80083fc <HAL_TIM_ConfigClockSource+0x156>
 800832e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008332:	d017      	beq.n	8008364 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8008334:	e063      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	6899      	ldr	r1, [r3, #8]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f000 f96d 	bl	8008624 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008358:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	609a      	str	r2, [r3, #8]
      break;
 8008362:	e04c      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	6899      	ldr	r1, [r3, #8]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f000 f956 	bl	8008624 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008386:	609a      	str	r2, [r3, #8]
      break;
 8008388:	e039      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6818      	ldr	r0, [r3, #0]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	461a      	mov	r2, r3
 8008398:	f000 f8ca 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2150      	movs	r1, #80	; 0x50
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 f923 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80083a8:	e029      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6859      	ldr	r1, [r3, #4]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	461a      	mov	r2, r3
 80083b8:	f000 f8e9 	bl	800858e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2160      	movs	r1, #96	; 0x60
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f913 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80083c8:	e019      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6818      	ldr	r0, [r3, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	6859      	ldr	r1, [r3, #4]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f000 f8aa 	bl	8008530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2140      	movs	r1, #64	; 0x40
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 f903 	bl	80085ee <TIM_ITRx_SetConfig>
      break;
 80083e8:	e009      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f000 f8fa 	bl	80085ee <TIM_ITRx_SetConfig>
        break;
 80083fa:	e000      	b.n	80083fe <HAL_TIM_ConfigClockSource+0x158>
      break;
 80083fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2201      	movs	r2, #1
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008420:	bf00      	nop
 8008422:	370c      	adds	r7, #12
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a2a      	ldr	r2, [pc, #168]	; (8008524 <TIM_Base_SetConfig+0xbc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <TIM_Base_SetConfig+0x20>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008486:	d108      	bne.n	800849a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800848e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4313      	orrs	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a21      	ldr	r2, [pc, #132]	; (8008524 <TIM_Base_SetConfig+0xbc>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00b      	beq.n	80084ba <TIM_Base_SetConfig+0x52>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a8:	d007      	beq.n	80084ba <TIM_Base_SetConfig+0x52>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1e      	ldr	r2, [pc, #120]	; (8008528 <TIM_Base_SetConfig+0xc0>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d003      	beq.n	80084ba <TIM_Base_SetConfig+0x52>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1d      	ldr	r2, [pc, #116]	; (800852c <TIM_Base_SetConfig+0xc4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d108      	bne.n	80084cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a0c      	ldr	r2, [pc, #48]	; (8008524 <TIM_Base_SetConfig+0xbc>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d007      	beq.n	8008508 <TIM_Base_SetConfig+0xa0>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <TIM_Base_SetConfig+0xc0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d003      	beq.n	8008508 <TIM_Base_SetConfig+0xa0>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a0a      	ldr	r2, [pc, #40]	; (800852c <TIM_Base_SetConfig+0xc4>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d103      	bne.n	8008510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	691a      	ldr	r2, [r3, #16]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	615a      	str	r2, [r3, #20]
}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40012c00 	.word	0x40012c00
 8008528:	40014000 	.word	0x40014000
 800852c:	40014400 	.word	0x40014400

08008530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	f023 0201 	bic.w	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800855a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	011b      	lsls	r3, r3, #4
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4313      	orrs	r3, r2
 8008564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f023 030a 	bic.w	r3, r3, #10
 800856c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858e:	b480      	push	{r7}
 8008590:	b087      	sub	sp, #28
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	60b9      	str	r1, [r7, #8]
 8008598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a1b      	ldr	r3, [r3, #32]
 800859e:	f023 0210 	bic.w	r2, r3, #16
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	031b      	lsls	r3, r3, #12
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	011b      	lsls	r3, r3, #4
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	f043 0307 	orr.w	r3, r3, #7
 8008610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	609a      	str	r2, [r3, #8]
}
 8008618:	bf00      	nop
 800861a:	3714      	adds	r7, #20
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800863e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	021a      	lsls	r2, r3, #8
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	431a      	orrs	r2, r3
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4313      	orrs	r3, r2
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	609a      	str	r2, [r3, #8]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008678:	2302      	movs	r3, #2
 800867a:	e04f      	b.n	800871c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d108      	bne.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a14      	ldr	r2, [pc, #80]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d009      	beq.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086e4:	d004      	beq.n	80086f0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a10      	ldr	r2, [pc, #64]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10c      	bne.n	800870a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	68ba      	ldr	r2, [r7, #8]
 80086fe:	4313      	orrs	r3, r2
 8008700:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	40012c00 	.word	0x40012c00
 800872c:	40014000 	.word	0x40014000

08008730 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800876c:	b084      	sub	sp, #16
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	f107 0014 	add.w	r0, r7, #20
 800877a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	b004      	add	sp, #16
 800878c:	4770      	bx	lr

0800878e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800879e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80087a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3714      	adds	r7, #20
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80087c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	43db      	mvns	r3, r3
 80087d8:	b29b      	uxth	r3, r3
 80087da:	4013      	ands	r3, r2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800880c:	b084      	sub	sp, #16
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	f107 0014 	add.w	r0, r7, #20
 800881a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	b004      	add	sp, #16
 800884c:	4770      	bx	lr
	...

08008850 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008850:	b480      	push	{r7}
 8008852:	b09b      	sub	sp, #108	; 0x6c
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	4413      	add	r3, r2
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	b29b      	uxth	r3, r3
 800886e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008876:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	78db      	ldrb	r3, [r3, #3]
 800887e:	2b03      	cmp	r3, #3
 8008880:	d81f      	bhi.n	80088c2 <USB_ActivateEndpoint+0x72>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USB_ActivateEndpoint+0x38>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	08008899 	.word	0x08008899
 800888c:	080088b5 	.word	0x080088b5
 8008890:	080088cb 	.word	0x080088cb
 8008894:	080088a7 	.word	0x080088a7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008898:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800889c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088a0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80088a4:	e012      	b.n	80088cc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088a6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80088aa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80088ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80088b2:	e00b      	b.n	80088cc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80088b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80088b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80088c0:	e004      	b.n	80088cc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80088c8:	e000      	b.n	80088cc <USB_ActivateEndpoint+0x7c>
      break;
 80088ca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	441a      	add	r2, r3
 80088d6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80088da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	b21b      	sxth	r3, r3
 80088fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008906:	b21a      	sxth	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	b21b      	sxth	r3, r3
 800890e:	4313      	orrs	r3, r2
 8008910:	b21b      	sxth	r3, r3
 8008912:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	441a      	add	r2, r3
 8008920:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8008924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800892c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008934:	b29b      	uxth	r3, r3
 8008936:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 8149 	bne.w	8008bd4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 8084 	beq.w	8008a54 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	617b      	str	r3, [r7, #20]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008956:	b29b      	uxth	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	00da      	lsls	r2, r3, #3
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800896e:	613b      	str	r3, [r7, #16]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	88db      	ldrh	r3, [r3, #6]
 8008974:	085b      	lsrs	r3, r3, #1
 8008976:	b29b      	uxth	r3, r3
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	b29a      	uxth	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	81fb      	strh	r3, [r7, #14]
 800898e:	89fb      	ldrh	r3, [r7, #14]
 8008990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01b      	beq.n	80089d0 <USB_ActivateEndpoint+0x180>
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	881b      	ldrh	r3, [r3, #0]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ae:	81bb      	strh	r3, [r7, #12]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	441a      	add	r2, r3
 80089ba:	89bb      	ldrh	r3, [r7, #12]
 80089bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	78db      	ldrb	r3, [r3, #3]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d020      	beq.n	8008a1a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	881b      	ldrh	r3, [r3, #0]
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089ee:	813b      	strh	r3, [r7, #8]
 80089f0:	893b      	ldrh	r3, [r7, #8]
 80089f2:	f083 0320 	eor.w	r3, r3, #32
 80089f6:	813b      	strh	r3, [r7, #8]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	441a      	add	r2, r3
 8008a02:	893b      	ldrh	r3, [r7, #8]
 8008a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	8013      	strh	r3, [r2, #0]
 8008a18:	e27f      	b.n	8008f1a <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4413      	add	r3, r2
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a30:	817b      	strh	r3, [r7, #10]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	441a      	add	r2, r3
 8008a3c:	897b      	ldrh	r3, [r7, #10]
 8008a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	8013      	strh	r3, [r2, #0]
 8008a52:	e262      	b.n	8008f1a <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	4413      	add	r3, r2
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	00da      	lsls	r2, r3, #3
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	4413      	add	r3, r2
 8008a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	88db      	ldrh	r3, [r3, #6]
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a86:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	461a      	mov	r2, r3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	4413      	add	r3, r2
 8008a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	00da      	lsls	r2, r3, #3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008aaa:	623b      	str	r3, [r7, #32]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d112      	bne.n	8008ada <USB_ActivateEndpoint+0x28a>
 8008ab4:	6a3b      	ldr	r3, [r7, #32]
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	881b      	ldrh	r3, [r3, #0]
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	801a      	strh	r2, [r3, #0]
 8008ad8:	e02f      	b.n	8008b3a <USB_ActivateEndpoint+0x2ea>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	2b3e      	cmp	r3, #62	; 0x3e
 8008ae0:	d813      	bhi.n	8008b0a <USB_ActivateEndpoint+0x2ba>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <USB_ActivateEndpoint+0x2ac>
 8008af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af8:	3301      	adds	r3, #1
 8008afa:	663b      	str	r3, [r7, #96]	; 0x60
 8008afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	029b      	lsls	r3, r3, #10
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	e017      	b.n	8008b3a <USB_ActivateEndpoint+0x2ea>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	095b      	lsrs	r3, r3, #5
 8008b10:	663b      	str	r3, [r7, #96]	; 0x60
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d102      	bne.n	8008b24 <USB_ActivateEndpoint+0x2d4>
 8008b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b20:	3b01      	subs	r3, #1
 8008b22:	663b      	str	r3, [r7, #96]	; 0x60
 8008b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	029b      	lsls	r3, r3, #10
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	881b      	ldrh	r3, [r3, #0]
 8008b46:	83fb      	strh	r3, [r7, #30]
 8008b48:	8bfb      	ldrh	r3, [r7, #30]
 8008b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d01b      	beq.n	8008b8a <USB_ActivateEndpoint+0x33a>
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	881b      	ldrh	r3, [r3, #0]
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b68:	83bb      	strh	r3, [r7, #28]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	441a      	add	r2, r3
 8008b74:	8bbb      	ldrh	r3, [r7, #28]
 8008b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba0:	837b      	strh	r3, [r7, #26]
 8008ba2:	8b7b      	ldrh	r3, [r7, #26]
 8008ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ba8:	837b      	strh	r3, [r7, #26]
 8008baa:	8b7b      	ldrh	r3, [r7, #26]
 8008bac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bb0:	837b      	strh	r3, [r7, #26]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	441a      	add	r2, r3
 8008bbc:	8b7b      	ldrh	r3, [r7, #26]
 8008bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	8013      	strh	r3, [r2, #0]
 8008bd2:	e1a2      	b.n	8008f1a <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	4413      	add	r3, r2
 8008bde:	881b      	ldrh	r3, [r3, #0]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	441a      	add	r2, r3
 8008bf8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8008bfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c20:	4413      	add	r3, r2
 8008c22:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	00da      	lsls	r2, r3, #3
 8008c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c2c:	4413      	add	r3, r2
 8008c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c32:	657b      	str	r3, [r7, #84]	; 0x54
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	891b      	ldrh	r3, [r3, #8]
 8008c38:	085b      	lsrs	r3, r3, #1
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c42:	801a      	strh	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	653b      	str	r3, [r7, #80]	; 0x50
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	461a      	mov	r2, r3
 8008c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c54:	4413      	add	r3, r2
 8008c56:	653b      	str	r3, [r7, #80]	; 0x50
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	00da      	lsls	r2, r3, #3
 8008c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	895b      	ldrh	r3, [r3, #10]
 8008c6c:	085b      	lsrs	r3, r3, #1
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	785b      	ldrb	r3, [r3, #1]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f040 8091 	bne.w	8008da4 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	881b      	ldrh	r3, [r3, #0]
 8008c8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008c90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d01b      	beq.n	8008cd2 <USB_ActivateEndpoint+0x482>
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	441a      	add	r2, r3
 8008cbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	873b      	strh	r3, [r7, #56]	; 0x38
 8008ce0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01b      	beq.n	8008d22 <USB_ActivateEndpoint+0x4d2>
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4413      	add	r3, r2
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	441a      	add	r2, r3
 8008d0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	4413      	add	r3, r2
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008d3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008d3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008d42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008d44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	441a      	add	r2, r3
 8008d54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d80:	867b      	strh	r3, [r7, #50]	; 0x32
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	441a      	add	r2, r3
 8008d8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8008d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	8013      	strh	r3, [r2, #0]
 8008da2:	e0ba      	b.n	8008f1a <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008db4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01d      	beq.n	8008dfc <USB_ActivateEndpoint+0x5ac>
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	009b      	lsls	r3, r3, #2
 8008dc8:	4413      	add	r3, r2
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	441a      	add	r2, r3
 8008de4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008e0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01d      	beq.n	8008e54 <USB_ActivateEndpoint+0x604>
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	441a      	add	r2, r3
 8008e3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	78db      	ldrb	r3, [r3, #3]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d024      	beq.n	8008ea6 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008e76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e7a:	f083 0320 	eor.w	r3, r3, #32
 8008e7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	441a      	add	r2, r3
 8008e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	8013      	strh	r3, [r2, #0]
 8008ea4:	e01d      	b.n	8008ee2 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	441a      	add	r2, r3
 8008eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ee2:	687a      	ldr	r2, [r7, #4]
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	441a      	add	r2, r3
 8008f04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8008f1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	376c      	adds	r7, #108	; 0x6c
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop

08008f2c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b08d      	sub	sp, #52	; 0x34
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	7b1b      	ldrb	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 808e 	bne.w	800905c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d044      	beq.n	8008fd2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	81bb      	strh	r3, [r7, #12]
 8008f56:	89bb      	ldrh	r3, [r7, #12]
 8008f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <USB_DeactivateEndpoint+0x6c>
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f76:	817b      	strh	r3, [r7, #10]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	441a      	add	r2, r3
 8008f82:	897b      	ldrh	r3, [r7, #10]
 8008f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fae:	813b      	strh	r3, [r7, #8]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	8013      	strh	r3, [r2, #0]
 8008fd0:	e192      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	827b      	strh	r3, [r7, #18]
 8008fe0:	8a7b      	ldrh	r3, [r7, #18]
 8008fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01b      	beq.n	8009022 <USB_DeactivateEndpoint+0xf6>
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009000:	823b      	strh	r3, [r7, #16]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	441a      	add	r2, r3
 800900c:	8a3b      	ldrh	r3, [r7, #16]
 800900e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800901a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901e:	b29b      	uxth	r3, r3
 8009020:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009038:	81fb      	strh	r3, [r7, #14]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	89fb      	ldrh	r3, [r7, #14]
 8009046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800904a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800904e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009056:	b29b      	uxth	r3, r3
 8009058:	8013      	strh	r3, [r2, #0]
 800905a:	e14d      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80a5 	bne.w	80091b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	843b      	strh	r3, [r7, #32]
 8009074:	8c3b      	ldrh	r3, [r7, #32]
 8009076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01b      	beq.n	80090b6 <USB_DeactivateEndpoint+0x18a>
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009094:	83fb      	strh	r3, [r7, #30]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	441a      	add	r2, r3
 80090a0:	8bfb      	ldrh	r3, [r7, #30]
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	83bb      	strh	r3, [r7, #28]
 80090c4:	8bbb      	ldrh	r3, [r7, #28]
 80090c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01b      	beq.n	8009106 <USB_DeactivateEndpoint+0x1da>
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090e4:	837b      	strh	r3, [r7, #26]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
 80090f0:	8b7b      	ldrh	r3, [r7, #26]
 80090f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009102:	b29b      	uxth	r3, r3
 8009104:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800911c:	833b      	strh	r3, [r7, #24]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	8b3b      	ldrh	r3, [r7, #24]
 800912a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800912e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009136:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800913a:	b29b      	uxth	r3, r3
 800913c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009154:	82fb      	strh	r3, [r7, #22]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	441a      	add	r2, r3
 8009160:	8afb      	ldrh	r3, [r7, #22]
 8009162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800916a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800916e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009172:	b29b      	uxth	r3, r3
 8009174:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009188:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918c:	82bb      	strh	r3, [r7, #20]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	441a      	add	r2, r3
 8009198:	8abb      	ldrh	r3, [r7, #20]
 800919a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800919e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	8013      	strh	r3, [r2, #0]
 80091ae:	e0a3      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80091be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80091c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01b      	beq.n	8009200 <USB_DeactivateEndpoint+0x2d4>
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091de:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	441a      	add	r2, r3
 80091ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800920e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <USB_DeactivateEndpoint+0x324>
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	441a      	add	r2, r3
 800923a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800923c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800924c:	b29b      	uxth	r3, r3
 800924e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009266:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	441a      	add	r2, r3
 8009272:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009274:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009278:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800927c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009284:	b29b      	uxth	r3, r3
 8009286:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800929a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800929e:	84bb      	strh	r3, [r7, #36]	; 0x24
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80092ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092bc:	b29b      	uxth	r3, r3
 80092be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d6:	847b      	strh	r3, [r7, #34]	; 0x22
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	441a      	add	r2, r3
 80092e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3734      	adds	r7, #52	; 0x34
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b0c4      	sub	sp, #272	; 0x110
 800930a:	af00      	add	r7, sp, #0
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	6018      	str	r0, [r3, #0]
 8009310:	463b      	mov	r3, r7
 8009312:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009314:	463b      	mov	r3, r7
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	785b      	ldrb	r3, [r3, #1]
 800931a:	2b01      	cmp	r3, #1
 800931c:	f040 8566 	bne.w	8009dec <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009320:	463b      	mov	r3, r7
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	463b      	mov	r3, r7
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	429a      	cmp	r2, r3
 800932e:	d905      	bls.n	800933c <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8009330:	463b      	mov	r3, r7
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800933a:	e004      	b.n	8009346 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800933c:	463b      	mov	r3, r7
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009346:	463b      	mov	r3, r7
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	7b1b      	ldrb	r3, [r3, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d12c      	bne.n	80093aa <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009350:	463b      	mov	r3, r7
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6959      	ldr	r1, [r3, #20]
 8009356:	463b      	mov	r3, r7
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	88da      	ldrh	r2, [r3, #6]
 800935c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009360:	b29b      	uxth	r3, r3
 8009362:	1d38      	adds	r0, r7, #4
 8009364:	6800      	ldr	r0, [r0, #0]
 8009366:	f001 fa58 	bl	800a81a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800936a:	1d3b      	adds	r3, r7, #4
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	617b      	str	r3, [r7, #20]
 8009370:	1d3b      	adds	r3, r7, #4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009378:	b29b      	uxth	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	4413      	add	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
 8009382:	463b      	mov	r3, r7
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	00da      	lsls	r2, r3, #3
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8009392:	f107 0310 	add.w	r3, r7, #16
 8009396:	601a      	str	r2, [r3, #0]
 8009398:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800939c:	b29a      	uxth	r2, r3
 800939e:	f107 0310 	add.w	r3, r7, #16
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	801a      	strh	r2, [r3, #0]
 80093a6:	f000 bcec 	b.w	8009d82 <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80093aa:	463b      	mov	r3, r7
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	78db      	ldrb	r3, [r3, #3]
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	f040 8356 	bne.w	8009a62 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80093b6:	463b      	mov	r3, r7
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6a1a      	ldr	r2, [r3, #32]
 80093bc:	463b      	mov	r3, r7
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	f240 82fa 	bls.w	80099bc <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80093c8:	1d3b      	adds	r3, r7, #4
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	463b      	mov	r3, r7
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	b29b      	uxth	r3, r3
 80093da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80093e6:	1d3b      	adds	r3, r7, #4
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	463b      	mov	r3, r7
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	441a      	add	r2, r3
 80093f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80093f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009400:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009408:	b29b      	uxth	r3, r3
 800940a:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 800940c:	463b      	mov	r3, r7
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009416:	463b      	mov	r3, r7
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6a1a      	ldr	r2, [r3, #32]
 800941c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009420:	1ad2      	subs	r2, r2, r3
 8009422:	463b      	mov	r3, r7
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009428:	1d3b      	adds	r3, r7, #4
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	463b      	mov	r3, r7
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 815e 	beq.w	8009700 <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009444:	1d3b      	adds	r3, r7, #4
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	637b      	str	r3, [r7, #52]	; 0x34
 800944a:	463b      	mov	r3, r7
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	785b      	ldrb	r3, [r3, #1]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d164      	bne.n	800951e <USB_EPStartXfer+0x218>
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800945a:	1d3b      	adds	r3, r7, #4
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009462:	b29b      	uxth	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	4413      	add	r3, r2
 800946a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800946c:	463b      	mov	r3, r7
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	00da      	lsls	r2, r3, #3
 8009474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009476:	4413      	add	r3, r2
 8009478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800947c:	62bb      	str	r3, [r7, #40]	; 0x28
 800947e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009482:	2b00      	cmp	r3, #0
 8009484:	d112      	bne.n	80094ac <USB_EPStartXfer+0x1a6>
 8009486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009490:	b29a      	uxth	r2, r3
 8009492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	e054      	b.n	8009556 <USB_EPStartXfer+0x250>
 80094ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094b0:	2b3e      	cmp	r3, #62	; 0x3e
 80094b2:	d817      	bhi.n	80094e4 <USB_EPStartXfer+0x1de>
 80094b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d004      	beq.n	80094d4 <USB_EPStartXfer+0x1ce>
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ce:	3301      	adds	r3, #1
 80094d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094d8:	b29b      	uxth	r3, r3
 80094da:	029b      	lsls	r3, r3, #10
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e0:	801a      	strh	r2, [r3, #0]
 80094e2:	e038      	b.n	8009556 <USB_EPStartXfer+0x250>
 80094e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094e8:	095b      	lsrs	r3, r3, #5
 80094ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80094ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d104      	bne.n	8009504 <USB_EPStartXfer+0x1fe>
 80094fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fe:	3b01      	subs	r3, #1
 8009500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009508:	b29b      	uxth	r3, r3
 800950a:	029b      	lsls	r3, r3, #10
 800950c:	b29b      	uxth	r3, r3
 800950e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009516:	b29a      	uxth	r2, r3
 8009518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	e01b      	b.n	8009556 <USB_EPStartXfer+0x250>
 800951e:	463b      	mov	r3, r7
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d116      	bne.n	8009556 <USB_EPStartXfer+0x250>
 8009528:	1d3b      	adds	r3, r7, #4
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009530:	b29b      	uxth	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	4413      	add	r3, r2
 8009538:	637b      	str	r3, [r7, #52]	; 0x34
 800953a:	463b      	mov	r3, r7
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	00da      	lsls	r2, r3, #3
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	4413      	add	r3, r2
 8009546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800954a:	633b      	str	r3, [r7, #48]	; 0x30
 800954c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009550:	b29a      	uxth	r2, r3
 8009552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009554:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009556:	463b      	mov	r3, r7
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	895b      	ldrh	r3, [r3, #10]
 800955c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009560:	463b      	mov	r3, r7
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6959      	ldr	r1, [r3, #20]
 8009566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800956a:	b29b      	uxth	r3, r3
 800956c:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009570:	1d38      	adds	r0, r7, #4
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	f001 f951 	bl	800a81a <USB_WritePMA>
            ep->xfer_buff += len;
 8009578:	463b      	mov	r3, r7
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009582:	441a      	add	r2, r3
 8009584:	463b      	mov	r3, r7
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800958a:	463b      	mov	r3, r7
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6a1a      	ldr	r2, [r3, #32]
 8009590:	463b      	mov	r3, r7
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	d90e      	bls.n	80095b8 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 800959a:	463b      	mov	r3, r7
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 80095a4:	463b      	mov	r3, r7
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6a1a      	ldr	r2, [r3, #32]
 80095aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80095ae:	1ad2      	subs	r2, r2, r3
 80095b0:	463b      	mov	r3, r7
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	621a      	str	r2, [r3, #32]
 80095b6:	e008      	b.n	80095ca <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80095b8:	463b      	mov	r3, r7
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 80095c2:	463b      	mov	r3, r7
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2200      	movs	r2, #0
 80095c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095ca:	463b      	mov	r3, r7
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d164      	bne.n	800969e <USB_EPStartXfer+0x398>
 80095d4:	1d3b      	adds	r3, r7, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	61fb      	str	r3, [r7, #28]
 80095da:	1d3b      	adds	r3, r7, #4
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	461a      	mov	r2, r3
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	61fb      	str	r3, [r7, #28]
 80095ec:	463b      	mov	r3, r7
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	00da      	lsls	r2, r3, #3
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	4413      	add	r3, r2
 80095f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095fc:	61bb      	str	r3, [r7, #24]
 80095fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009602:	2b00      	cmp	r3, #0
 8009604:	d112      	bne.n	800962c <USB_EPStartXfer+0x326>
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009610:	b29a      	uxth	r2, r3
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009624:	b29a      	uxth	r2, r3
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	801a      	strh	r2, [r3, #0]
 800962a:	e057      	b.n	80096dc <USB_EPStartXfer+0x3d6>
 800962c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009630:	2b3e      	cmp	r3, #62	; 0x3e
 8009632:	d817      	bhi.n	8009664 <USB_EPStartXfer+0x35e>
 8009634:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800963e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <USB_EPStartXfer+0x34e>
 800964a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800964e:	3301      	adds	r3, #1
 8009650:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009654:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009658:	b29b      	uxth	r3, r3
 800965a:	029b      	lsls	r3, r3, #10
 800965c:	b29a      	uxth	r2, r3
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	801a      	strh	r2, [r3, #0]
 8009662:	e03b      	b.n	80096dc <USB_EPStartXfer+0x3d6>
 8009664:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800966e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009672:	f003 031f 	and.w	r3, r3, #31
 8009676:	2b00      	cmp	r3, #0
 8009678:	d104      	bne.n	8009684 <USB_EPStartXfer+0x37e>
 800967a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800967e:	3b01      	subs	r3, #1
 8009680:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009684:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009688:	b29b      	uxth	r3, r3
 800968a:	029b      	lsls	r3, r3, #10
 800968c:	b29b      	uxth	r3, r3
 800968e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009696:	b29a      	uxth	r2, r3
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	801a      	strh	r2, [r3, #0]
 800969c:	e01e      	b.n	80096dc <USB_EPStartXfer+0x3d6>
 800969e:	463b      	mov	r3, r7
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d119      	bne.n	80096dc <USB_EPStartXfer+0x3d6>
 80096a8:	1d3b      	adds	r3, r7, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	627b      	str	r3, [r7, #36]	; 0x24
 80096ae:	1d3b      	adds	r3, r7, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	4413      	add	r3, r2
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
 80096c0:	463b      	mov	r3, r7
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	00da      	lsls	r2, r3, #3
 80096c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ca:	4413      	add	r3, r2
 80096cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096d0:	623b      	str	r3, [r7, #32]
 80096d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096dc:	463b      	mov	r3, r7
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	891b      	ldrh	r3, [r3, #8]
 80096e2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096e6:	463b      	mov	r3, r7
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6959      	ldr	r1, [r3, #20]
 80096ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80096f6:	1d38      	adds	r0, r7, #4
 80096f8:	6800      	ldr	r0, [r0, #0]
 80096fa:	f001 f88e 	bl	800a81a <USB_WritePMA>
 80096fe:	e340      	b.n	8009d82 <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009700:	463b      	mov	r3, r7
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	785b      	ldrb	r3, [r3, #1]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d164      	bne.n	80097d4 <USB_EPStartXfer+0x4ce>
 800970a:	1d3b      	adds	r3, r7, #4
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009710:	1d3b      	adds	r3, r7, #4
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009718:	b29b      	uxth	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800971e:	4413      	add	r3, r2
 8009720:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009722:	463b      	mov	r3, r7
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	00da      	lsls	r2, r3, #3
 800972a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800972c:	4413      	add	r3, r2
 800972e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009732:	64bb      	str	r3, [r7, #72]	; 0x48
 8009734:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009738:	2b00      	cmp	r3, #0
 800973a:	d112      	bne.n	8009762 <USB_EPStartXfer+0x45c>
 800973c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	b29b      	uxth	r3, r3
 8009742:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009746:	b29a      	uxth	r2, r3
 8009748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974a:	801a      	strh	r2, [r3, #0]
 800974c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800975a:	b29a      	uxth	r2, r3
 800975c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e057      	b.n	8009812 <USB_EPStartXfer+0x50c>
 8009762:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009766:	2b3e      	cmp	r3, #62	; 0x3e
 8009768:	d817      	bhi.n	800979a <USB_EPStartXfer+0x494>
 800976a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800976e:	085b      	lsrs	r3, r3, #1
 8009770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009774:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <USB_EPStartXfer+0x484>
 8009780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009784:	3301      	adds	r3, #1
 8009786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800978a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978e:	b29b      	uxth	r3, r3
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	b29a      	uxth	r2, r3
 8009794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009796:	801a      	strh	r2, [r3, #0]
 8009798:	e03b      	b.n	8009812 <USB_EPStartXfer+0x50c>
 800979a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800979e:	095b      	lsrs	r3, r3, #5
 80097a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80097a8:	f003 031f 	and.w	r3, r3, #31
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d104      	bne.n	80097ba <USB_EPStartXfer+0x4b4>
 80097b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b4:	3b01      	subs	r3, #1
 80097b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097be:	b29b      	uxth	r3, r3
 80097c0:	029b      	lsls	r3, r3, #10
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e01e      	b.n	8009812 <USB_EPStartXfer+0x50c>
 80097d4:	463b      	mov	r3, r7
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d119      	bne.n	8009812 <USB_EPStartXfer+0x50c>
 80097de:	1d3b      	adds	r3, r7, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	657b      	str	r3, [r7, #84]	; 0x54
 80097e4:	1d3b      	adds	r3, r7, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	461a      	mov	r2, r3
 80097f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f2:	4413      	add	r3, r2
 80097f4:	657b      	str	r3, [r7, #84]	; 0x54
 80097f6:	463b      	mov	r3, r7
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	00da      	lsls	r2, r3, #3
 80097fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009800:	4413      	add	r3, r2
 8009802:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009806:	653b      	str	r3, [r7, #80]	; 0x50
 8009808:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800980c:	b29a      	uxth	r2, r3
 800980e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009810:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009812:	463b      	mov	r3, r7
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	891b      	ldrh	r3, [r3, #8]
 8009818:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800981c:	463b      	mov	r3, r7
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6959      	ldr	r1, [r3, #20]
 8009822:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009826:	b29b      	uxth	r3, r3
 8009828:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800982c:	1d38      	adds	r0, r7, #4
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	f000 fff3 	bl	800a81a <USB_WritePMA>
            ep->xfer_buff += len;
 8009834:	463b      	mov	r3, r7
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800983e:	441a      	add	r2, r3
 8009840:	463b      	mov	r3, r7
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009846:	463b      	mov	r3, r7
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	6a1a      	ldr	r2, [r3, #32]
 800984c:	463b      	mov	r3, r7
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	429a      	cmp	r2, r3
 8009854:	d90e      	bls.n	8009874 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8009856:	463b      	mov	r3, r7
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8009860:	463b      	mov	r3, r7
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6a1a      	ldr	r2, [r3, #32]
 8009866:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800986a:	1ad2      	subs	r2, r2, r3
 800986c:	463b      	mov	r3, r7
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	621a      	str	r2, [r3, #32]
 8009872:	e008      	b.n	8009886 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8009874:	463b      	mov	r3, r7
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 800987e:	463b      	mov	r3, r7
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2200      	movs	r2, #0
 8009884:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009886:	1d3b      	adds	r3, r7, #4
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	647b      	str	r3, [r7, #68]	; 0x44
 800988c:	463b      	mov	r3, r7
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	785b      	ldrb	r3, [r3, #1]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d164      	bne.n	8009960 <USB_EPStartXfer+0x65a>
 8009896:	1d3b      	adds	r3, r7, #4
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800989c:	1d3b      	adds	r3, r7, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098aa:	4413      	add	r3, r2
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ae:	463b      	mov	r3, r7
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	00da      	lsls	r2, r3, #3
 80098b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098b8:	4413      	add	r3, r2
 80098ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098be:	63bb      	str	r3, [r7, #56]	; 0x38
 80098c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d112      	bne.n	80098ee <USB_EPStartXfer+0x5e8>
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	881b      	ldrh	r3, [r3, #0]
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d6:	801a      	strh	r2, [r3, #0]
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098e6:	b29a      	uxth	r2, r3
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	801a      	strh	r2, [r3, #0]
 80098ec:	e054      	b.n	8009998 <USB_EPStartXfer+0x692>
 80098ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098f2:	2b3e      	cmp	r3, #62	; 0x3e
 80098f4:	d817      	bhi.n	8009926 <USB_EPStartXfer+0x620>
 80098f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80098fa:	085b      	lsrs	r3, r3, #1
 80098fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009900:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d004      	beq.n	8009916 <USB_EPStartXfer+0x610>
 800990c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009910:	3301      	adds	r3, #1
 8009912:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800991a:	b29b      	uxth	r3, r3
 800991c:	029b      	lsls	r3, r3, #10
 800991e:	b29a      	uxth	r2, r3
 8009920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009922:	801a      	strh	r2, [r3, #0]
 8009924:	e038      	b.n	8009998 <USB_EPStartXfer+0x692>
 8009926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009930:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009934:	f003 031f 	and.w	r3, r3, #31
 8009938:	2b00      	cmp	r3, #0
 800993a:	d104      	bne.n	8009946 <USB_EPStartXfer+0x640>
 800993c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009940:	3b01      	subs	r3, #1
 8009942:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800994a:	b29b      	uxth	r3, r3
 800994c:	029b      	lsls	r3, r3, #10
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009958:	b29a      	uxth	r2, r3
 800995a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995c:	801a      	strh	r2, [r3, #0]
 800995e:	e01b      	b.n	8009998 <USB_EPStartXfer+0x692>
 8009960:	463b      	mov	r3, r7
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d116      	bne.n	8009998 <USB_EPStartXfer+0x692>
 800996a:	1d3b      	adds	r3, r7, #4
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009972:	b29b      	uxth	r3, r3
 8009974:	461a      	mov	r2, r3
 8009976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009978:	4413      	add	r3, r2
 800997a:	647b      	str	r3, [r7, #68]	; 0x44
 800997c:	463b      	mov	r3, r7
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	00da      	lsls	r2, r3, #3
 8009984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009986:	4413      	add	r3, r2
 8009988:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800998c:	643b      	str	r3, [r7, #64]	; 0x40
 800998e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009992:	b29a      	uxth	r2, r3
 8009994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009996:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009998:	463b      	mov	r3, r7
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	895b      	ldrh	r3, [r3, #10]
 800999e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099a2:	463b      	mov	r3, r7
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6959      	ldr	r1, [r3, #20]
 80099a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80099b2:	1d38      	adds	r0, r7, #4
 80099b4:	6800      	ldr	r0, [r0, #0]
 80099b6:	f000 ff30 	bl	800a81a <USB_WritePMA>
 80099ba:	e1e2      	b.n	8009d82 <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80099bc:	463b      	mov	r3, r7
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80099c6:	1d3b      	adds	r3, r7, #4
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	463b      	mov	r3, r7
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	881b      	ldrh	r3, [r3, #0]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80099dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	463b      	mov	r3, r7
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	441a      	add	r2, r3
 80099f2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80099f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a0a:	1d3b      	adds	r3, r7, #4
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8009a10:	1d3b      	adds	r3, r7, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a1e:	4413      	add	r3, r2
 8009a20:	663b      	str	r3, [r7, #96]	; 0x60
 8009a22:	463b      	mov	r3, r7
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	00da      	lsls	r2, r3, #3
 8009a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009a3e:	463b      	mov	r3, r7
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	891b      	ldrh	r3, [r3, #8]
 8009a44:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a48:	463b      	mov	r3, r7
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6959      	ldr	r1, [r3, #20]
 8009a4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009a58:	1d38      	adds	r0, r7, #4
 8009a5a:	6800      	ldr	r0, [r0, #0]
 8009a5c:	f000 fedd 	bl	800a81a <USB_WritePMA>
 8009a60:	e18f      	b.n	8009d82 <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009a62:	1d3b      	adds	r3, r7, #4
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	463b      	mov	r3, r7
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 808f 	beq.w	8009b9c <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a7e:	1d3b      	adds	r3, r7, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a84:	463b      	mov	r3, r7
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	785b      	ldrb	r3, [r3, #1]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d164      	bne.n	8009b58 <USB_EPStartXfer+0x852>
 8009a8e:	1d3b      	adds	r3, r7, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	673b      	str	r3, [r7, #112]	; 0x70
 8009a94:	1d3b      	adds	r3, r7, #4
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aa2:	4413      	add	r3, r2
 8009aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	00da      	lsls	r2, r3, #3
 8009aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab0:	4413      	add	r3, r2
 8009ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ab8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d112      	bne.n	8009ae6 <USB_EPStartXfer+0x7e0>
 8009ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac2:	881b      	ldrh	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae2:	801a      	strh	r2, [r3, #0]
 8009ae4:	e054      	b.n	8009b90 <USB_EPStartXfer+0x88a>
 8009ae6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009aea:	2b3e      	cmp	r3, #62	; 0x3e
 8009aec:	d817      	bhi.n	8009b1e <USB_EPStartXfer+0x818>
 8009aee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009af8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <USB_EPStartXfer+0x808>
 8009b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b08:	3301      	adds	r3, #1
 8009b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	029b      	lsls	r3, r3, #10
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	e038      	b.n	8009b90 <USB_EPStartXfer+0x88a>
 8009b1e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b2c:	f003 031f 	and.w	r3, r3, #31
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <USB_EPStartXfer+0x838>
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	029b      	lsls	r3, r3, #10
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	e01b      	b.n	8009b90 <USB_EPStartXfer+0x88a>
 8009b58:	463b      	mov	r3, r7
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	785b      	ldrb	r3, [r3, #1]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d116      	bne.n	8009b90 <USB_EPStartXfer+0x88a>
 8009b62:	1d3b      	adds	r3, r7, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b70:	4413      	add	r3, r2
 8009b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b74:	463b      	mov	r3, r7
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	00da      	lsls	r2, r3, #3
 8009b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b7e:	4413      	add	r3, r2
 8009b80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b84:	677b      	str	r3, [r7, #116]	; 0x74
 8009b86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009b90:	463b      	mov	r3, r7
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	895b      	ldrh	r3, [r3, #10]
 8009b96:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8009b9a:	e097      	b.n	8009ccc <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d168      	bne.n	8009c78 <USB_EPStartXfer+0x972>
 8009ba6:	1d3b      	adds	r3, r7, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bae:	1d3b      	adds	r3, r7, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009bc4:	463b      	mov	r3, r7
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	00da      	lsls	r2, r3, #3
 8009bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009bd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d112      	bne.n	8009c06 <USB_EPStartXfer+0x900>
 8009be0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bea:	b29a      	uxth	r2, r3
 8009bec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bee:	801a      	strh	r2, [r3, #0]
 8009bf0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bfe:	b29a      	uxth	r2, r3
 8009c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c02:	801a      	strh	r2, [r3, #0]
 8009c04:	e05d      	b.n	8009cc2 <USB_EPStartXfer+0x9bc>
 8009c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c0a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c0c:	d817      	bhi.n	8009c3e <USB_EPStartXfer+0x938>
 8009c0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c12:	085b      	lsrs	r3, r3, #1
 8009c14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d004      	beq.n	8009c2e <USB_EPStartXfer+0x928>
 8009c24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c28:	3301      	adds	r3, #1
 8009c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	029b      	lsls	r3, r3, #10
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	e041      	b.n	8009cc2 <USB_EPStartXfer+0x9bc>
 8009c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c42:	095b      	lsrs	r3, r3, #5
 8009c44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009c4c:	f003 031f 	and.w	r3, r3, #31
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d104      	bne.n	8009c5e <USB_EPStartXfer+0x958>
 8009c54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	029b      	lsls	r3, r3, #10
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c74:	801a      	strh	r2, [r3, #0]
 8009c76:	e024      	b.n	8009cc2 <USB_EPStartXfer+0x9bc>
 8009c78:	463b      	mov	r3, r7
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d11f      	bne.n	8009cc2 <USB_EPStartXfer+0x9bc>
 8009c82:	1d3b      	adds	r3, r7, #4
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c8a:	1d3b      	adds	r3, r7, #4
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	461a      	mov	r2, r3
 8009c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009ca0:	463b      	mov	r3, r7
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	00da      	lsls	r2, r3, #3
 8009ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cac:	4413      	add	r3, r2
 8009cae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009cb6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009cc0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	891b      	ldrh	r3, [r3, #8]
 8009cc8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ccc:	463b      	mov	r3, r7
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6959      	ldr	r1, [r3, #20]
 8009cd2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8009cdc:	1d38      	adds	r0, r7, #4
 8009cde:	6800      	ldr	r0, [r0, #0]
 8009ce0:	f000 fd9b 	bl	800a81a <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8009ce4:	463b      	mov	r3, r7
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	785b      	ldrb	r3, [r3, #1]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d122      	bne.n	8009d34 <USB_EPStartXfer+0xa2e>
 8009cee:	1d3b      	adds	r3, r7, #4
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d08:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8009d0c:	1d3b      	adds	r3, r7, #4
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	463b      	mov	r3, r7
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	441a      	add	r2, r3
 8009d1a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8009d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	8013      	strh	r3, [r2, #0]
 8009d32:	e026      	b.n	8009d82 <USB_EPStartXfer+0xa7c>
 8009d34:	463b      	mov	r3, r7
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d121      	bne.n	8009d82 <USB_EPStartXfer+0xa7c>
 8009d3e:	1d3b      	adds	r3, r7, #4
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	463b      	mov	r3, r7
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	b29b      	uxth	r3, r3
 8009d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d58:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8009d5c:	1d3b      	adds	r3, r7, #4
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	463b      	mov	r3, r7
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	441a      	add	r2, r3
 8009d6a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8009d6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009d82:	1d3b      	adds	r3, r7, #4
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	463b      	mov	r3, r7
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	4413      	add	r3, r2
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	f107 020e 	add.w	r2, r7, #14
 8009d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da0:	8013      	strh	r3, [r2, #0]
 8009da2:	f107 030e 	add.w	r3, r7, #14
 8009da6:	f107 020e 	add.w	r2, r7, #14
 8009daa:	8812      	ldrh	r2, [r2, #0]
 8009dac:	f082 0210 	eor.w	r2, r2, #16
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	f107 030e 	add.w	r3, r7, #14
 8009db6:	f107 020e 	add.w	r2, r7, #14
 8009dba:	8812      	ldrh	r2, [r2, #0]
 8009dbc:	f082 0220 	eor.w	r2, r2, #32
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	1d3b      	adds	r3, r7, #4
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	463b      	mov	r3, r7
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	441a      	add	r2, r3
 8009dd0:	f107 030e 	add.w	r3, r7, #14
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	8013      	strh	r3, [r2, #0]
 8009dea:	e3b5      	b.n	800a558 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009dec:	463b      	mov	r3, r7
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	7b1b      	ldrb	r3, [r3, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f040 8090 	bne.w	8009f18 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 8009df8:	463b      	mov	r3, r7
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	463b      	mov	r3, r7
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d90e      	bls.n	8009e26 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 8009e08:	463b      	mov	r3, r7
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 8009e12:	463b      	mov	r3, r7
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e1c:	1ad2      	subs	r2, r2, r3
 8009e1e:	463b      	mov	r3, r7
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	619a      	str	r2, [r3, #24]
 8009e24:	e008      	b.n	8009e38 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8009e26:	463b      	mov	r3, r7
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 8009e30:	463b      	mov	r3, r7
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2200      	movs	r2, #0
 8009e36:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009e38:	1d3b      	adds	r3, r7, #4
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e40:	1d3b      	adds	r3, r7, #4
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e50:	4413      	add	r3, r2
 8009e52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e56:	463b      	mov	r3, r7
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	00da      	lsls	r2, r3, #3
 8009e5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e62:	4413      	add	r3, r2
 8009e64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009e6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d116      	bne.n	8009ea2 <USB_EPStartXfer+0xb9c>
 8009e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e9e:	801a      	strh	r2, [r3, #0]
 8009ea0:	e32c      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
 8009ea2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ea6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ea8:	d818      	bhi.n	8009edc <USB_EPStartXfer+0xbd6>
 8009eaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eae:	085b      	lsrs	r3, r3, #1
 8009eb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009eb4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d004      	beq.n	8009eca <USB_EPStartXfer+0xbc4>
 8009ec0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009eca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	029b      	lsls	r3, r3, #10
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ed8:	801a      	strh	r2, [r3, #0]
 8009eda:	e30f      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
 8009edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ee6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009eea:	f003 031f 	and.w	r3, r3, #31
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d104      	bne.n	8009efc <USB_EPStartXfer+0xbf6>
 8009ef2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f0e:	b29a      	uxth	r2, r3
 8009f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e2f1      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8009f18:	463b      	mov	r3, r7
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	78db      	ldrb	r3, [r3, #3]
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	f040 818f 	bne.w	800a242 <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009f24:	463b      	mov	r3, r7
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	785b      	ldrb	r3, [r3, #1]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d175      	bne.n	800a01a <USB_EPStartXfer+0xd14>
 8009f2e:	1d3b      	adds	r3, r7, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f36:	1d3b      	adds	r3, r7, #4
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f46:	4413      	add	r3, r2
 8009f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f4c:	463b      	mov	r3, r7
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	00da      	lsls	r2, r3, #3
 8009f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009f58:	4413      	add	r3, r2
 8009f5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f62:	463b      	mov	r3, r7
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d116      	bne.n	8009f9a <USB_EPStartXfer+0xc94>
 8009f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f78:	b29a      	uxth	r2, r3
 8009f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f7e:	801a      	strh	r2, [r3, #0]
 8009f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	e065      	b.n	800a066 <USB_EPStartXfer+0xd60>
 8009f9a:	463b      	mov	r3, r7
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	2b3e      	cmp	r3, #62	; 0x3e
 8009fa2:	d81a      	bhi.n	8009fda <USB_EPStartXfer+0xcd4>
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	085b      	lsrs	r3, r3, #1
 8009fac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <USB_EPStartXfer+0xcc2>
 8009fbe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	029b      	lsls	r3, r3, #10
 8009fd0:	b29a      	uxth	r2, r3
 8009fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fd6:	801a      	strh	r2, [r3, #0]
 8009fd8:	e045      	b.n	800a066 <USB_EPStartXfer+0xd60>
 8009fda:	463b      	mov	r3, r7
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009fe6:	463b      	mov	r3, r7
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	f003 031f 	and.w	r3, r3, #31
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d104      	bne.n	8009ffe <USB_EPStartXfer+0xcf8>
 8009ff4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ffe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a002:	b29b      	uxth	r3, r3
 800a004:	029b      	lsls	r3, r3, #10
 800a006:	b29b      	uxth	r3, r3
 800a008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a010:	b29a      	uxth	r2, r3
 800a012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	e025      	b.n	800a066 <USB_EPStartXfer+0xd60>
 800a01a:	463b      	mov	r3, r7
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	785b      	ldrb	r3, [r3, #1]
 800a020:	2b01      	cmp	r3, #1
 800a022:	d120      	bne.n	800a066 <USB_EPStartXfer+0xd60>
 800a024:	1d3b      	adds	r3, r7, #4
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a02c:	1d3b      	adds	r3, r7, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a034:	b29b      	uxth	r3, r3
 800a036:	461a      	mov	r2, r3
 800a038:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a03c:	4413      	add	r3, r2
 800a03e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a042:	463b      	mov	r3, r7
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	00da      	lsls	r2, r3, #3
 800a04a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a04e:	4413      	add	r3, r2
 800a050:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a058:	463b      	mov	r3, r7
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a064:	801a      	strh	r2, [r3, #0]
 800a066:	1d3b      	adds	r3, r7, #4
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a06e:	463b      	mov	r3, r7
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d175      	bne.n	800a164 <USB_EPStartXfer+0xe5e>
 800a078:	1d3b      	adds	r3, r7, #4
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a080:	1d3b      	adds	r3, r7, #4
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a088:	b29b      	uxth	r3, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a090:	4413      	add	r3, r2
 800a092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a096:	463b      	mov	r3, r7
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	00da      	lsls	r2, r3, #3
 800a09e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a0ac:	463b      	mov	r3, r7
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d116      	bne.n	800a0e4 <USB_EPStartXfer+0xdde>
 800a0b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0ba:	881b      	ldrh	r3, [r3, #0]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0c8:	801a      	strh	r2, [r3, #0]
 800a0ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0da:	b29a      	uxth	r2, r3
 800a0dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a0e0:	801a      	strh	r2, [r3, #0]
 800a0e2:	e061      	b.n	800a1a8 <USB_EPStartXfer+0xea2>
 800a0e4:	463b      	mov	r3, r7
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b3e      	cmp	r3, #62	; 0x3e
 800a0ec:	d81a      	bhi.n	800a124 <USB_EPStartXfer+0xe1e>
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f003 0301 	and.w	r3, r3, #1
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <USB_EPStartXfer+0xe0c>
 800a108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a10c:	3301      	adds	r3, #1
 800a10e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a116:	b29b      	uxth	r3, r3
 800a118:	029b      	lsls	r3, r3, #10
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a120:	801a      	strh	r2, [r3, #0]
 800a122:	e041      	b.n	800a1a8 <USB_EPStartXfer+0xea2>
 800a124:	463b      	mov	r3, r7
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	095b      	lsrs	r3, r3, #5
 800a12c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a130:	463b      	mov	r3, r7
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	f003 031f 	and.w	r3, r3, #31
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d104      	bne.n	800a148 <USB_EPStartXfer+0xe42>
 800a13e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a142:	3b01      	subs	r3, #1
 800a144:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	029b      	lsls	r3, r3, #10
 800a150:	b29b      	uxth	r3, r3
 800a152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	e021      	b.n	800a1a8 <USB_EPStartXfer+0xea2>
 800a164:	463b      	mov	r3, r7
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d11c      	bne.n	800a1a8 <USB_EPStartXfer+0xea2>
 800a16e:	1d3b      	adds	r3, r7, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a176:	b29b      	uxth	r3, r3
 800a178:	461a      	mov	r2, r3
 800a17a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a17e:	4413      	add	r3, r2
 800a180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a184:	463b      	mov	r3, r7
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	00da      	lsls	r2, r3, #3
 800a18c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a190:	4413      	add	r3, r2
 800a192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a19a:	463b      	mov	r3, r7
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1a6:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 800a1a8:	463b      	mov	r3, r7
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 81a4 	beq.w	800a4fc <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a1b4:	1d3b      	adds	r3, r7, #4
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	463b      	mov	r3, r7
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a1cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <USB_EPStartXfer+0xeda>
 800a1d4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d10d      	bne.n	800a1fc <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1e0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a1e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f040 8187 	bne.w	800a4fc <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a1ee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f040 8180 	bne.w	800a4fc <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a1fc:	1d3b      	adds	r3, r7, #4
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	463b      	mov	r3, r7
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a216:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800a21a:	1d3b      	adds	r3, r7, #4
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	463b      	mov	r3, r7
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	441a      	add	r2, r3
 800a228:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800a22c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a238:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	8013      	strh	r3, [r2, #0]
 800a240:	e15c      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a242:	463b      	mov	r3, r7
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	f040 8155 	bne.w	800a4f8 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800a24e:	463b      	mov	r3, r7
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	699a      	ldr	r2, [r3, #24]
 800a254:	463b      	mov	r3, r7
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d90e      	bls.n	800a27c <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800a25e:	463b      	mov	r3, r7
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 800a268:	463b      	mov	r3, r7
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	699a      	ldr	r2, [r3, #24]
 800a26e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	463b      	mov	r3, r7
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	619a      	str	r2, [r3, #24]
 800a27a:	e008      	b.n	800a28e <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 800a27c:	463b      	mov	r3, r7
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 800a286:	463b      	mov	r3, r7
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2200      	movs	r2, #0
 800a28c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a28e:	463b      	mov	r3, r7
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d16f      	bne.n	800a378 <USB_EPStartXfer+0x1072>
 800a298:	1d3b      	adds	r3, r7, #4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2a0:	1d3b      	adds	r3, r7, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2b6:	463b      	mov	r3, r7
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	00da      	lsls	r2, r3, #3
 800a2be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a2cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d116      	bne.n	800a302 <USB_EPStartXfer+0xffc>
 800a2d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2e6:	801a      	strh	r2, [r3, #0]
 800a2e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2ec:	881b      	ldrh	r3, [r3, #0]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2f8:	b29a      	uxth	r2, r3
 800a2fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a2fe:	801a      	strh	r2, [r3, #0]
 800a300:	e05f      	b.n	800a3c2 <USB_EPStartXfer+0x10bc>
 800a302:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a306:	2b3e      	cmp	r3, #62	; 0x3e
 800a308:	d818      	bhi.n	800a33c <USB_EPStartXfer+0x1036>
 800a30a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a30e:	085b      	lsrs	r3, r3, #1
 800a310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <USB_EPStartXfer+0x1024>
 800a320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a324:	3301      	adds	r3, #1
 800a326:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a32a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32e:	b29b      	uxth	r3, r3
 800a330:	029b      	lsls	r3, r3, #10
 800a332:	b29a      	uxth	r2, r3
 800a334:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e042      	b.n	800a3c2 <USB_EPStartXfer+0x10bc>
 800a33c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a340:	095b      	lsrs	r3, r3, #5
 800a342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a346:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a34a:	f003 031f 	and.w	r3, r3, #31
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d104      	bne.n	800a35c <USB_EPStartXfer+0x1056>
 800a352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a356:	3b01      	subs	r3, #1
 800a358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a35c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a360:	b29b      	uxth	r3, r3
 800a362:	029b      	lsls	r3, r3, #10
 800a364:	b29b      	uxth	r3, r3
 800a366:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a36a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a36e:	b29a      	uxth	r2, r3
 800a370:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a374:	801a      	strh	r2, [r3, #0]
 800a376:	e024      	b.n	800a3c2 <USB_EPStartXfer+0x10bc>
 800a378:	463b      	mov	r3, r7
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d11f      	bne.n	800a3c2 <USB_EPStartXfer+0x10bc>
 800a382:	1d3b      	adds	r3, r7, #4
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a38a:	1d3b      	adds	r3, r7, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a39a:	4413      	add	r3, r2
 800a39c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	00da      	lsls	r2, r3, #3
 800a3a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a3b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a3b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3c0:	801a      	strh	r2, [r3, #0]
 800a3c2:	1d3b      	adds	r3, r7, #4
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	785b      	ldrb	r3, [r3, #1]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d16f      	bne.n	800a4b4 <USB_EPStartXfer+0x11ae>
 800a3d4:	1d3b      	adds	r3, r7, #4
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3dc:	1d3b      	adds	r3, r7, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	00da      	lsls	r2, r3, #3
 800a3fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3fe:	4413      	add	r3, r2
 800a400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a404:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a408:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d116      	bne.n	800a43e <USB_EPStartXfer+0x1138>
 800a410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a414:	881b      	ldrh	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a422:	801a      	strh	r2, [r3, #0]
 800a424:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a434:	b29a      	uxth	r2, r3
 800a436:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a43a:	801a      	strh	r2, [r3, #0]
 800a43c:	e05e      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
 800a43e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a442:	2b3e      	cmp	r3, #62	; 0x3e
 800a444:	d818      	bhi.n	800a478 <USB_EPStartXfer+0x1172>
 800a446:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a44a:	085b      	lsrs	r3, r3, #1
 800a44c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a450:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a454:	f003 0301 	and.w	r3, r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d004      	beq.n	800a466 <USB_EPStartXfer+0x1160>
 800a45c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a460:	3301      	adds	r3, #1
 800a462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	029b      	lsls	r3, r3, #10
 800a46e:	b29a      	uxth	r2, r3
 800a470:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a474:	801a      	strh	r2, [r3, #0]
 800a476:	e041      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
 800a478:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a482:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a486:	f003 031f 	and.w	r3, r3, #31
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d104      	bne.n	800a498 <USB_EPStartXfer+0x1192>
 800a48e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a492:	3b01      	subs	r3, #1
 800a494:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a49c:	b29b      	uxth	r3, r3
 800a49e:	029b      	lsls	r3, r3, #10
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4b0:	801a      	strh	r2, [r3, #0]
 800a4b2:	e023      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
 800a4b4:	463b      	mov	r3, r7
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d11e      	bne.n	800a4fc <USB_EPStartXfer+0x11f6>
 800a4be:	1d3b      	adds	r3, r7, #4
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4d4:	463b      	mov	r3, r7
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	00da      	lsls	r2, r3, #3
 800a4dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a4ee:	b29a      	uxth	r2, r3
 800a4f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4f4:	801a      	strh	r2, [r3, #0]
 800a4f6:	e001      	b.n	800a4fc <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e02e      	b.n	800a55a <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a4fc:	1d3b      	adds	r3, r7, #4
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	463b      	mov	r3, r7
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a516:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a51a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a51e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a522:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a526:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a52a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a52e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800a532:	1d3b      	adds	r3, r7, #4
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	463b      	mov	r3, r7
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	009b      	lsls	r3, r3, #2
 800a53e:	441a      	add	r2, r3
 800a540:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a54c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a554:	b29b      	uxth	r3, r3
 800a556:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	785b      	ldrb	r3, [r3, #1]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d020      	beq.n	800a5b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	781b      	ldrb	r3, [r3, #0]
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a58c:	81bb      	strh	r3, [r7, #12]
 800a58e:	89bb      	ldrh	r3, [r7, #12]
 800a590:	f083 0310 	eor.w	r3, r3, #16
 800a594:	81bb      	strh	r3, [r7, #12]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	441a      	add	r2, r3
 800a5a0:	89bb      	ldrh	r3, [r7, #12]
 800a5a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	8013      	strh	r3, [r2, #0]
 800a5b6:	e01f      	b.n	800a5f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	4413      	add	r3, r2
 800a5c2:	881b      	ldrh	r3, [r3, #0]
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5ce:	81fb      	strh	r3, [r7, #14]
 800a5d0:	89fb      	ldrh	r3, [r7, #14]
 800a5d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a5d6:	81fb      	strh	r3, [r7, #14]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	89fb      	ldrh	r3, [r7, #14]
 800a5e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a5f8:	2300      	movs	r3, #0
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a606:	b480      	push	{r7}
 800a608:	b087      	sub	sp, #28
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	7b1b      	ldrb	r3, [r3, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 809d 	bne.w	800a754 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d04c      	beq.n	800a6bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	823b      	strh	r3, [r7, #16]
 800a630:	8a3b      	ldrh	r3, [r7, #16]
 800a632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a636:	2b00      	cmp	r3, #0
 800a638:	d01b      	beq.n	800a672 <USB_EPClearStall+0x6c>
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	781b      	ldrb	r3, [r3, #0]
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	4413      	add	r3, r2
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	b29b      	uxth	r3, r3
 800a648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a64c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a650:	81fb      	strh	r3, [r7, #14]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	441a      	add	r2, r3
 800a65c:	89fb      	ldrh	r3, [r7, #14]
 800a65e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a66a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a66e:	b29b      	uxth	r3, r3
 800a670:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	78db      	ldrb	r3, [r3, #3]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d06c      	beq.n	800a754 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	4413      	add	r3, r2
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a68c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a690:	81bb      	strh	r3, [r7, #12]
 800a692:	89bb      	ldrh	r3, [r7, #12]
 800a694:	f083 0320 	eor.w	r3, r3, #32
 800a698:	81bb      	strh	r3, [r7, #12]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	441a      	add	r2, r3
 800a6a4:	89bb      	ldrh	r3, [r7, #12]
 800a6a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	8013      	strh	r3, [r2, #0]
 800a6ba:	e04b      	b.n	800a754 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	82fb      	strh	r3, [r7, #22]
 800a6ca:	8afb      	ldrh	r3, [r7, #22]
 800a6cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d01b      	beq.n	800a70c <USB_EPClearStall+0x106>
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	781b      	ldrb	r3, [r3, #0]
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ea:	82bb      	strh	r3, [r7, #20]
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	441a      	add	r2, r3
 800a6f6:	8abb      	ldrh	r3, [r7, #20]
 800a6f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a708:	b29b      	uxth	r3, r3
 800a70a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4413      	add	r3, r2
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29b      	uxth	r3, r3
 800a71a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a722:	827b      	strh	r3, [r7, #18]
 800a724:	8a7b      	ldrh	r3, [r7, #18]
 800a726:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a72a:	827b      	strh	r3, [r7, #18]
 800a72c:	8a7b      	ldrh	r3, [r7, #18]
 800a72e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a732:	827b      	strh	r3, [r7, #18]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	441a      	add	r2, r3
 800a73e:	8a7b      	ldrh	r3, [r7, #18]
 800a740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	b29b      	uxth	r3, r3
 800a752:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a762:	b480      	push	{r7}
 800a764:	b083      	sub	sp, #12
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	460b      	mov	r3, r1
 800a76c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a76e:	78fb      	ldrb	r3, [r7, #3]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2280      	movs	r2, #128	; 0x80
 800a778:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a798:	b29b      	uxth	r3, r3
 800a79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7a2:	b29a      	uxth	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a7cc:	b29a      	uxth	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a802:	b480      	push	{r7}
 800a804:	b083      	sub	sp, #12
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b08d      	sub	sp, #52	; 0x34
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	4611      	mov	r1, r2
 800a826:	461a      	mov	r2, r3
 800a828:	460b      	mov	r3, r1
 800a82a:	80fb      	strh	r3, [r7, #6]
 800a82c:	4613      	mov	r3, r2
 800a82e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a830:	88bb      	ldrh	r3, [r7, #4]
 800a832:	3301      	adds	r3, #1
 800a834:	085b      	lsrs	r3, r3, #1
 800a836:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a840:	88fa      	ldrh	r2, [r7, #6]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	4413      	add	r3, r2
 800a846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a84a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a850:	e01b      	b.n	800a88a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800a852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	3301      	adds	r3, #1
 800a85c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	b29b      	uxth	r3, r3
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	b29b      	uxth	r3, r3
 800a868:	461a      	mov	r2, r3
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	b29a      	uxth	r2, r3
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	3302      	adds	r3, #2
 800a87c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a880:	3301      	adds	r3, #1
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	3b01      	subs	r3, #1
 800a888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1e0      	bne.n	800a852 <USB_WritePMA+0x38>
  }
}
 800a890:	bf00      	nop
 800a892:	3734      	adds	r7, #52	; 0x34
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b08b      	sub	sp, #44	; 0x2c
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	80fb      	strh	r3, [r7, #6]
 800a8ae:	4613      	mov	r3, r2
 800a8b0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a8b2:	88bb      	ldrh	r3, [r7, #4]
 800a8b4:	085b      	lsrs	r3, r3, #1
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8c2:	88fa      	ldrh	r2, [r7, #6]
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8cc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d2:	e018      	b.n	800a906 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a8d4:	6a3b      	ldr	r3, [r7, #32]
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	3302      	adds	r3, #2
 800a8e0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	69fb      	ldr	r3, [r7, #28]
 800a8f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a902:	3b01      	subs	r3, #1
 800a904:	627b      	str	r3, [r7, #36]	; 0x24
 800a906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1e3      	bne.n	800a8d4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a90c:	88bb      	ldrh	r3, [r7, #4]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	b29b      	uxth	r3, r3
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	b2da      	uxtb	r2, r3
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	701a      	strb	r2, [r3, #0]
  }
}
 800a928:	bf00      	nop
 800a92a:	372c      	adds	r7, #44	; 0x2c
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a940:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a944:	f002 fa4c 	bl	800cde0 <malloc>
 800a948:	4603      	mov	r3, r0
 800a94a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a95a:	2302      	movs	r3, #2
 800a95c:	e066      	b.n	800aa2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	7c1b      	ldrb	r3, [r3, #16]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d119      	bne.n	800a9a2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a96e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a972:	2202      	movs	r2, #2
 800a974:	2181      	movs	r1, #129	; 0x81
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f001 ff20 	bl	800c7bc <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a982:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a986:	2202      	movs	r2, #2
 800a988:	2101      	movs	r1, #1
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 ff16 	bl	800c7bc <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2210      	movs	r2, #16
 800a99c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a9a0:	e016      	b.n	800a9d0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a9a2:	2340      	movs	r3, #64	; 0x40
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	2181      	movs	r1, #129	; 0x81
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 ff07 	bl	800c7bc <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f001 fefe 	bl	800c7bc <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2210      	movs	r2, #16
 800a9cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	2203      	movs	r2, #3
 800a9d4:	2182      	movs	r1, #130	; 0x82
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f001 fef0 	bl	800c7bc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7c1b      	ldrb	r3, [r3, #16]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d109      	bne.n	800aa1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa10:	2101      	movs	r1, #1
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f002 f84e 	bl	800cab4 <USBD_LL_PrepareReceive>
 800aa18:	e007      	b.n	800aa2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	2101      	movs	r1, #1
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f002 f845 	bl	800cab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3710      	adds	r7, #16
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800aa40:	2181      	movs	r1, #129	; 0x81
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 fef8 	bl	800c838 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800aa4e:	2101      	movs	r1, #1
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fef1 	bl	800c838 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aa5e:	2182      	movs	r1, #130	; 0x82
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f001 fee9 	bl	800c838 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00e      	beq.n	800aa9e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa90:	4618      	mov	r0, r3
 800aa92:	f002 f9ad 	bl	800cdf0 <free>
    pdev->pClassData = NULL;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aab8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d03a      	beq.n	800ab48 <USBD_CDC_Setup+0xa0>
 800aad2:	2b20      	cmp	r3, #32
 800aad4:	f040 8097 	bne.w	800ac06 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	88db      	ldrh	r3, [r3, #6]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d029      	beq.n	800ab34 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	b25b      	sxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da11      	bge.n	800ab0e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aaf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	88d2      	ldrh	r2, [r2, #6]
 800aafc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aafe:	6939      	ldr	r1, [r7, #16]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	88db      	ldrh	r3, [r3, #6]
 800ab04:	461a      	mov	r2, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 fa5d 	bl	800bfc6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ab0c:	e082      	b.n	800ac14 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	785a      	ldrb	r2, [r3, #1]
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	88db      	ldrh	r3, [r3, #6]
 800ab1c:	b2da      	uxtb	r2, r3
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ab24:	6939      	ldr	r1, [r7, #16]
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	88db      	ldrh	r3, [r3, #6]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f001 fa76 	bl	800c01e <USBD_CtlPrepareRx>
      break;
 800ab32:	e06f      	b.n	800ac14 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab3a:	689b      	ldr	r3, [r3, #8]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	7850      	ldrb	r0, [r2, #1]
 800ab40:	2200      	movs	r2, #0
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	4798      	blx	r3
      break;
 800ab46:	e065      	b.n	800ac14 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	2b0b      	cmp	r3, #11
 800ab4e:	d84f      	bhi.n	800abf0 <USBD_CDC_Setup+0x148>
 800ab50:	a201      	add	r2, pc, #4	; (adr r2, 800ab58 <USBD_CDC_Setup+0xb0>)
 800ab52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab56:	bf00      	nop
 800ab58:	0800ab89 	.word	0x0800ab89
 800ab5c:	0800abff 	.word	0x0800abff
 800ab60:	0800abf1 	.word	0x0800abf1
 800ab64:	0800abf1 	.word	0x0800abf1
 800ab68:	0800abf1 	.word	0x0800abf1
 800ab6c:	0800abf1 	.word	0x0800abf1
 800ab70:	0800abf1 	.word	0x0800abf1
 800ab74:	0800abf1 	.word	0x0800abf1
 800ab78:	0800abf1 	.word	0x0800abf1
 800ab7c:	0800abf1 	.word	0x0800abf1
 800ab80:	0800abb1 	.word	0x0800abb1
 800ab84:	0800abd9 	.word	0x0800abd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8e:	2b03      	cmp	r3, #3
 800ab90:	d107      	bne.n	800aba2 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab92:	f107 030c 	add.w	r3, r7, #12
 800ab96:	2202      	movs	r2, #2
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f001 fa13 	bl	800bfc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aba0:	e030      	b.n	800ac04 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f99d 	bl	800bee4 <USBD_CtlError>
            ret = USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	75fb      	strb	r3, [r7, #23]
          break;
 800abae:	e029      	b.n	800ac04 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d107      	bne.n	800abca <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800abba:	f107 030f 	add.w	r3, r7, #15
 800abbe:	2201      	movs	r2, #1
 800abc0:	4619      	mov	r1, r3
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f001 f9ff 	bl	800bfc6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abc8:	e01c      	b.n	800ac04 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f001 f989 	bl	800bee4 <USBD_CtlError>
            ret = USBD_FAIL;
 800abd2:	2303      	movs	r3, #3
 800abd4:	75fb      	strb	r3, [r7, #23]
          break;
 800abd6:	e015      	b.n	800ac04 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abde:	2b03      	cmp	r3, #3
 800abe0:	d00f      	beq.n	800ac02 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f001 f97d 	bl	800bee4 <USBD_CtlError>
            ret = USBD_FAIL;
 800abea:	2303      	movs	r3, #3
 800abec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abee:	e008      	b.n	800ac02 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abf0:	6839      	ldr	r1, [r7, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f001 f976 	bl	800bee4 <USBD_CtlError>
          ret = USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	75fb      	strb	r3, [r7, #23]
          break;
 800abfc:	e002      	b.n	800ac04 <USBD_CDC_Setup+0x15c>
          break;
 800abfe:	bf00      	nop
 800ac00:	e008      	b.n	800ac14 <USBD_CDC_Setup+0x16c>
          break;
 800ac02:	bf00      	nop
      }
      break;
 800ac04:	e006      	b.n	800ac14 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f96b 	bl	800bee4 <USBD_CtlError>
      ret = USBD_FAIL;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	75fb      	strb	r3, [r7, #23]
      break;
 800ac12:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop

0800ac20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ac32:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e04f      	b.n	800ace2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	3318      	adds	r3, #24
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d029      	beq.n	800acb4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ac60:	78fa      	ldrb	r2, [r7, #3]
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	4613      	mov	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	4413      	add	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	440b      	add	r3, r1
 800ac6e:	3318      	adds	r3, #24
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	78f9      	ldrb	r1, [r7, #3]
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	460b      	mov	r3, r1
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	440b      	add	r3, r1
 800ac7c:	00db      	lsls	r3, r3, #3
 800ac7e:	4403      	add	r3, r0
 800ac80:	3338      	adds	r3, #56	; 0x38
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac88:	fb03 f301 	mul.w	r3, r3, r1
 800ac8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d110      	bne.n	800acb4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ac92:	78fa      	ldrb	r2, [r7, #3]
 800ac94:	6879      	ldr	r1, [r7, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	440b      	add	r3, r1
 800aca0:	3318      	adds	r3, #24
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aca6:	78f9      	ldrb	r1, [r7, #3]
 800aca8:	2300      	movs	r3, #0
 800acaa:	2200      	movs	r2, #0
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 fec9 	bl	800ca44 <USBD_LL_Transmit>
 800acb2:	e015      	b.n	800ace0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	68ba      	ldr	r2, [r7, #8]
 800acd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800acdc:	78fa      	ldrb	r2, [r7, #3]
 800acde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ace0:	2300      	movs	r3, #0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800acfc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e015      	b.n	800ad38 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	4619      	mov	r1, r3
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 ff07 	bl	800cb24 <USBD_LL_GetRxDataSize>
 800ad16:	4602      	mov	r2, r0
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ad32:	4611      	mov	r1, r2
 800ad34:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad4e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d015      	beq.n	800ad86 <USBD_CDC_EP0_RxReady+0x46>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ad60:	2bff      	cmp	r3, #255	; 0xff
 800ad62:	d010      	beq.n	800ad86 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ad72:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ad74:	68fa      	ldr	r2, [r7, #12]
 800ad76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ad7a:	b292      	uxth	r2, r2
 800ad7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	22ff      	movs	r2, #255	; 0xff
 800ad82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2243      	movs	r2, #67	; 0x43
 800ad9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	20000094 	.word	0x20000094

0800adb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2243      	movs	r2, #67	; 0x43
 800adbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800adbe:	4b03      	ldr	r3, [pc, #12]	; (800adcc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20000050 	.word	0x20000050

0800add0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2243      	movs	r2, #67	; 0x43
 800addc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800adde:	4b03      	ldr	r3, [pc, #12]	; (800adec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr
 800adec:	200000d8 	.word	0x200000d8

0800adf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	220a      	movs	r2, #10
 800adfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800adfe:	4b03      	ldr	r3, [pc, #12]	; (800ae0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000000c 	.word	0x2000000c

0800ae10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d101      	bne.n	800ae24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae20:	2303      	movs	r3, #3
 800ae22:	e004      	b.n	800ae2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	683a      	ldr	r2, [r7, #0]
 800ae28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	b087      	sub	sp, #28
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	60f8      	str	r0, [r7, #12]
 800ae42:	60b9      	str	r1, [r7, #8]
 800ae44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae4c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae7c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	683a      	ldr	r2, [r7, #0]
 800ae82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e016      	b.n	800aee0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	7c1b      	ldrb	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aec4:	2101      	movs	r1, #1
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f001 fdf4 	bl	800cab4 <USBD_LL_PrepareReceive>
 800aecc:	e007      	b.n	800aede <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aed4:	2340      	movs	r3, #64	; 0x40
 800aed6:	2101      	movs	r1, #1
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 fdeb 	bl	800cab4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	4613      	mov	r3, r2
 800aef4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d101      	bne.n	800af00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e01f      	b.n	800af40 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2200      	movs	r2, #0
 800af0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2201      	movs	r2, #1
 800af2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	79fa      	ldrb	r2, [r7, #7]
 800af32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f001 fbad 	bl	800c694 <USBD_LL_Init>
 800af3a:	4603      	mov	r3, r0
 800af3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af52:	2300      	movs	r3, #0
 800af54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d101      	bne.n	800af60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e016      	b.n	800af8e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	f107 020e 	add.w	r2, r7, #14
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	4602      	mov	r2, r0
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f001 fbda 	bl	800c758 <USBD_LL_Start>
 800afa4:	4603      	mov	r3, r0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800afae:	b480      	push	{r7}
 800afb0:	b083      	sub	sp, #12
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	460b      	mov	r3, r1
 800afce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800afd0:	2303      	movs	r3, #3
 800afd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d009      	beq.n	800aff2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	78fa      	ldrb	r2, [r7, #3]
 800afe8:	4611      	mov	r1, r2
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d007      	beq.n	800b022 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	78fa      	ldrb	r2, [r7, #3]
 800b01c:	4611      	mov	r1, r2
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	4798      	blx	r3
  }

  return USBD_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f000 ff16 	bl	800be70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2201      	movs	r2, #1
 800b048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b052:	461a      	mov	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b060:	f003 031f 	and.w	r3, r3, #31
 800b064:	2b01      	cmp	r3, #1
 800b066:	d00e      	beq.n	800b086 <USBD_LL_SetupStage+0x5a>
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d302      	bcc.n	800b072 <USBD_LL_SetupStage+0x46>
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d014      	beq.n	800b09a <USBD_LL_SetupStage+0x6e>
 800b070:	e01d      	b.n	800b0ae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b078:	4619      	mov	r1, r3
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f9d6 	bl	800b42c <USBD_StdDevReq>
 800b080:	4603      	mov	r3, r0
 800b082:	73fb      	strb	r3, [r7, #15]
      break;
 800b084:	e020      	b.n	800b0c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 fa3a 	bl	800b508 <USBD_StdItfReq>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
      break;
 800b098:	e016      	b.n	800b0c8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fa76 	bl	800b594 <USBD_StdEPReq>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ac:	e00c      	b.n	800b0c8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b0b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 fbf1 	bl	800c8a4 <USBD_LL_StallEP>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b0c6:	bf00      	nop
  }

  return ret;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	60f8      	str	r0, [r7, #12]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	607a      	str	r2, [r7, #4]
 800b0de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b0e0:	7afb      	ldrb	r3, [r7, #11]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d137      	bne.n	800b156 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b0ec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b0f4:	2b03      	cmp	r3, #3
 800b0f6:	d14a      	bne.n	800b18e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	689a      	ldr	r2, [r3, #8]
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	429a      	cmp	r2, r3
 800b102:	d913      	bls.n	800b12c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	689a      	ldr	r2, [r3, #8]
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	1ad2      	subs	r2, r2, r3
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	4293      	cmp	r3, r2
 800b11c:	bf28      	it	cs
 800b11e:	4613      	movcs	r3, r2
 800b120:	461a      	mov	r2, r3
 800b122:	6879      	ldr	r1, [r7, #4]
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 ff97 	bl	800c058 <USBD_CtlContinueRx>
 800b12a:	e030      	b.n	800b18e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b132:	691b      	ldr	r3, [r3, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d105      	bne.n	800b14e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f000 ff93 	bl	800c07a <USBD_CtlSendStatus>
 800b154:	e01b      	b.n	800b18e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d013      	beq.n	800b18a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b168:	2b03      	cmp	r3, #3
 800b16a:	d10e      	bne.n	800b18a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	7afa      	ldrb	r2, [r7, #11]
 800b176:	4611      	mov	r1, r2
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	4798      	blx	r3
 800b17c:	4603      	mov	r3, r0
 800b17e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b180:	7dfb      	ldrb	r3, [r7, #23]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d003      	beq.n	800b18e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	e002      	b.n	800b190 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e000      	b.n	800b190 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3718      	adds	r7, #24
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	607a      	str	r2, [r7, #4]
 800b1a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b1a6:	7afb      	ldrb	r3, [r7, #11]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d16a      	bne.n	800b282 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3314      	adds	r3, #20
 800b1b0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d155      	bne.n	800b268 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	689a      	ldr	r2, [r3, #8]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d914      	bls.n	800b1f2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	1ad2      	subs	r2, r2, r3
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6879      	ldr	r1, [r7, #4]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 ff0c 	bl	800bffc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	68f8      	ldr	r0, [r7, #12]
 800b1ec:	f001 fc62 	bl	800cab4 <USBD_LL_PrepareReceive>
 800b1f0:	e03a      	b.n	800b268 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	68da      	ldr	r2, [r3, #12]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d11c      	bne.n	800b238 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b206:	429a      	cmp	r2, r3
 800b208:	d316      	bcc.n	800b238 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b214:	429a      	cmp	r2, r3
 800b216:	d20f      	bcs.n	800b238 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b218:	2200      	movs	r2, #0
 800b21a:	2100      	movs	r1, #0
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 feed 	bl	800bffc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2200      	movs	r2, #0
 800b226:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b22a:	2300      	movs	r3, #0
 800b22c:	2200      	movs	r2, #0
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f001 fc3f 	bl	800cab4 <USBD_LL_PrepareReceive>
 800b236:	e017      	b.n	800b268 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00a      	beq.n	800b25a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b24a:	2b03      	cmp	r3, #3
 800b24c:	d105      	bne.n	800b25a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b25a:	2180      	movs	r1, #128	; 0x80
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f001 fb21 	bl	800c8a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f000 ff1c 	bl	800c0a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d123      	bne.n	800b2ba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f7ff fe9b 	bl	800afae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b280:	e01b      	b.n	800b2ba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d013      	beq.n	800b2b6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b294:	2b03      	cmp	r3, #3
 800b296:	d10e      	bne.n	800b2b6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	7afa      	ldrb	r2, [r7, #11]
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	4798      	blx	r3
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
 800b2b4:	e002      	b.n	800b2bc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b2b6:	2303      	movs	r3, #3
 800b2b8:	e000      	b.n	800b2bc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3718      	adds	r7, #24
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d009      	beq.n	800b308 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	6852      	ldr	r2, [r2, #4]
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	4611      	mov	r1, r2
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b308:	2340      	movs	r3, #64	; 0x40
 800b30a:	2200      	movs	r2, #0
 800b30c:	2100      	movs	r1, #0
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 fa54 	bl	800c7bc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2240      	movs	r2, #64	; 0x40
 800b320:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b324:	2340      	movs	r3, #64	; 0x40
 800b326:	2200      	movs	r2, #0
 800b328:	2180      	movs	r1, #128	; 0x80
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 fa46 	bl	800c7bc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2240      	movs	r2, #64	; 0x40
 800b33a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	78fa      	ldrb	r2, [r7, #3]
 800b356:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr

0800b366 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2204      	movs	r2, #4
 800b37e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d105      	bne.n	800b3ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d10b      	bne.n	800b3e6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d005      	beq.n	800b3e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	3301      	adds	r3, #1
 800b406:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b40e:	8a3b      	ldrh	r3, [r7, #16]
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	b21a      	sxth	r2, r3
 800b414:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b418:	4313      	orrs	r3, r2
 800b41a:	b21b      	sxth	r3, r3
 800b41c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b41e:	89fb      	ldrh	r3, [r7, #14]
}
 800b420:	4618      	mov	r0, r3
 800b422:	371c      	adds	r7, #28
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b436:	2300      	movs	r3, #0
 800b438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b442:	2b20      	cmp	r3, #32
 800b444:	d004      	beq.n	800b450 <USBD_StdDevReq+0x24>
 800b446:	2b40      	cmp	r3, #64	; 0x40
 800b448:	d002      	beq.n	800b450 <USBD_StdDevReq+0x24>
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00a      	beq.n	800b464 <USBD_StdDevReq+0x38>
 800b44e:	e050      	b.n	800b4f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	4798      	blx	r3
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]
    break;
 800b462:	e04b      	b.n	800b4fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	785b      	ldrb	r3, [r3, #1]
 800b468:	2b09      	cmp	r3, #9
 800b46a:	d83c      	bhi.n	800b4e6 <USBD_StdDevReq+0xba>
 800b46c:	a201      	add	r2, pc, #4	; (adr r2, 800b474 <USBD_StdDevReq+0x48>)
 800b46e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b472:	bf00      	nop
 800b474:	0800b4c9 	.word	0x0800b4c9
 800b478:	0800b4dd 	.word	0x0800b4dd
 800b47c:	0800b4e7 	.word	0x0800b4e7
 800b480:	0800b4d3 	.word	0x0800b4d3
 800b484:	0800b4e7 	.word	0x0800b4e7
 800b488:	0800b4a7 	.word	0x0800b4a7
 800b48c:	0800b49d 	.word	0x0800b49d
 800b490:	0800b4e7 	.word	0x0800b4e7
 800b494:	0800b4bf 	.word	0x0800b4bf
 800b498:	0800b4b1 	.word	0x0800b4b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f9d0 	bl	800b844 <USBD_GetDescriptor>
      break;
 800b4a4:	e024      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 fb5f 	bl	800bb6c <USBD_SetAddress>
      break;
 800b4ae:	e01f      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fb9c 	bl	800bbf0 <USBD_SetConfig>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b4bc:	e018      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 fc39 	bl	800bd38 <USBD_GetConfig>
      break;
 800b4c6:	e013      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fc68 	bl	800bda0 <USBD_GetStatus>
      break;
 800b4d0:	e00e      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fc96 	bl	800be06 <USBD_SetFeature>
      break;
 800b4da:	e009      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 fca5 	bl	800be2e <USBD_ClrFeature>
      break;
 800b4e4:	e004      	b.n	800b4f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800b4e6:	6839      	ldr	r1, [r7, #0]
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fcfb 	bl	800bee4 <USBD_CtlError>
      break;
 800b4ee:	bf00      	nop
    }
    break;
 800b4f0:	e004      	b.n	800b4fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 fcf5 	bl	800bee4 <USBD_CtlError>
    break;
 800b4fa:	bf00      	nop
  }

  return ret;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop

0800b508 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b51e:	2b20      	cmp	r3, #32
 800b520:	d003      	beq.n	800b52a <USBD_StdItfReq+0x22>
 800b522:	2b40      	cmp	r3, #64	; 0x40
 800b524:	d001      	beq.n	800b52a <USBD_StdItfReq+0x22>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d12a      	bne.n	800b580 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b530:	3b01      	subs	r3, #1
 800b532:	2b02      	cmp	r3, #2
 800b534:	d81d      	bhi.n	800b572 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	889b      	ldrh	r3, [r3, #4]
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d813      	bhi.n	800b568 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	4798      	blx	r3
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	88db      	ldrh	r3, [r3, #6]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d110      	bne.n	800b57c <USBD_StdItfReq+0x74>
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10d      	bne.n	800b57c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fd8a 	bl	800c07a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800b566:	e009      	b.n	800b57c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fcba 	bl	800bee4 <USBD_CtlError>
      break;
 800b570:	e004      	b.n	800b57c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800b572:	6839      	ldr	r1, [r7, #0]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 fcb5 	bl	800bee4 <USBD_CtlError>
      break;
 800b57a:	e000      	b.n	800b57e <USBD_StdItfReq+0x76>
      break;
 800b57c:	bf00      	nop
    }
    break;
 800b57e:	e004      	b.n	800b58a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800b580:	6839      	ldr	r1, [r7, #0]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 fcae 	bl	800bee4 <USBD_CtlError>
    break;
 800b588:	bf00      	nop
  }

  return ret;
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3710      	adds	r7, #16
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	889b      	ldrh	r3, [r3, #4]
 800b5a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d004      	beq.n	800b5be <USBD_StdEPReq+0x2a>
 800b5b4:	2b40      	cmp	r3, #64	; 0x40
 800b5b6:	d002      	beq.n	800b5be <USBD_StdEPReq+0x2a>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d00a      	beq.n	800b5d2 <USBD_StdEPReq+0x3e>
 800b5bc:	e137      	b.n	800b82e <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	6839      	ldr	r1, [r7, #0]
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	4798      	blx	r3
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	e132      	b.n	800b838 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	785b      	ldrb	r3, [r3, #1]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d03e      	beq.n	800b658 <USBD_StdEPReq+0xc4>
 800b5da:	2b03      	cmp	r3, #3
 800b5dc:	d002      	beq.n	800b5e4 <USBD_StdEPReq+0x50>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d079      	beq.n	800b6d6 <USBD_StdEPReq+0x142>
 800b5e2:	e11e      	b.n	800b822 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d002      	beq.n	800b5f4 <USBD_StdEPReq+0x60>
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	d015      	beq.n	800b61e <USBD_StdEPReq+0x8a>
 800b5f2:	e02b      	b.n	800b64c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5f4:	7bbb      	ldrb	r3, [r7, #14]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00c      	beq.n	800b614 <USBD_StdEPReq+0x80>
 800b5fa:	7bbb      	ldrb	r3, [r7, #14]
 800b5fc:	2b80      	cmp	r3, #128	; 0x80
 800b5fe:	d009      	beq.n	800b614 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b600:	7bbb      	ldrb	r3, [r7, #14]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 f94d 	bl	800c8a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b60a:	2180      	movs	r1, #128	; 0x80
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 f949 	bl	800c8a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b612:	e020      	b.n	800b656 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800b614:	6839      	ldr	r1, [r7, #0]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 fc64 	bl	800bee4 <USBD_CtlError>
        break;
 800b61c:	e01b      	b.n	800b656 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	885b      	ldrh	r3, [r3, #2]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10e      	bne.n	800b644 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00b      	beq.n	800b644 <USBD_StdEPReq+0xb0>
 800b62c:	7bbb      	ldrb	r3, [r7, #14]
 800b62e:	2b80      	cmp	r3, #128	; 0x80
 800b630:	d008      	beq.n	800b644 <USBD_StdEPReq+0xb0>
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	88db      	ldrh	r3, [r3, #6]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d104      	bne.n	800b644 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f001 f930 	bl	800c8a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 fd18 	bl	800c07a <USBD_CtlSendStatus>

        break;
 800b64a:	e004      	b.n	800b656 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fc48 	bl	800bee4 <USBD_CtlError>
        break;
 800b654:	bf00      	nop
      }
      break;
 800b656:	e0e9      	b.n	800b82c <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d002      	beq.n	800b668 <USBD_StdEPReq+0xd4>
 800b662:	2b03      	cmp	r3, #3
 800b664:	d015      	beq.n	800b692 <USBD_StdEPReq+0xfe>
 800b666:	e02f      	b.n	800b6c8 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b668:	7bbb      	ldrb	r3, [r7, #14]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00c      	beq.n	800b688 <USBD_StdEPReq+0xf4>
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b80      	cmp	r3, #128	; 0x80
 800b672:	d009      	beq.n	800b688 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800b674:	7bbb      	ldrb	r3, [r7, #14]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f001 f913 	bl	800c8a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b67e:	2180      	movs	r1, #128	; 0x80
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f001 f90f 	bl	800c8a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800b686:	e025      	b.n	800b6d4 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800b688:	6839      	ldr	r1, [r7, #0]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 fc2a 	bl	800bee4 <USBD_CtlError>
        break;
 800b690:	e020      	b.n	800b6d4 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	885b      	ldrh	r3, [r3, #2]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d11b      	bne.n	800b6d2 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800b69a:	7bbb      	ldrb	r3, [r7, #14]
 800b69c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f931 	bl	800c910 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fce3 	bl	800c07a <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	4798      	blx	r3
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6c6:	e004      	b.n	800b6d2 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800b6c8:	6839      	ldr	r1, [r7, #0]
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 fc0a 	bl	800bee4 <USBD_CtlError>
        break;
 800b6d0:	e000      	b.n	800b6d4 <USBD_StdEPReq+0x140>
        break;
 800b6d2:	bf00      	nop
      }
      break;
 800b6d4:	e0aa      	b.n	800b82c <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d002      	beq.n	800b6e6 <USBD_StdEPReq+0x152>
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d032      	beq.n	800b74a <USBD_StdEPReq+0x1b6>
 800b6e4:	e097      	b.n	800b816 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <USBD_StdEPReq+0x168>
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b80      	cmp	r3, #128	; 0x80
 800b6f0:	d004      	beq.n	800b6fc <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fbf5 	bl	800bee4 <USBD_CtlError>
          break;
 800b6fa:	e091      	b.n	800b820 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b700:	2b00      	cmp	r3, #0
 800b702:	da0b      	bge.n	800b71c <USBD_StdEPReq+0x188>
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	3310      	adds	r3, #16
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	4413      	add	r3, r2
 800b718:	3304      	adds	r3, #4
 800b71a:	e00b      	b.n	800b734 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b71c:	7bbb      	ldrb	r3, [r7, #14]
 800b71e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b722:	4613      	mov	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	4413      	add	r3, r2
 800b732:	3304      	adds	r3, #4
 800b734:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2200      	movs	r2, #0
 800b73a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	2202      	movs	r2, #2
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 fc3f 	bl	800bfc6 <USBD_CtlSendData>
        break;
 800b748:	e06a      	b.n	800b820 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800b74a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da11      	bge.n	800b776 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b752:	7bbb      	ldrb	r3, [r7, #14]
 800b754:	f003 020f 	and.w	r2, r3, #15
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	4613      	mov	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	4413      	add	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	440b      	add	r3, r1
 800b764:	3324      	adds	r3, #36	; 0x24
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d117      	bne.n	800b79c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b76c:	6839      	ldr	r1, [r7, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fbb8 	bl	800bee4 <USBD_CtlError>
            break;
 800b774:	e054      	b.n	800b820 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	f003 020f 	and.w	r2, r3, #15
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	4613      	mov	r3, r2
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	4413      	add	r3, r2
 800b784:	009b      	lsls	r3, r3, #2
 800b786:	440b      	add	r3, r1
 800b788:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d104      	bne.n	800b79c <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fba5 	bl	800bee4 <USBD_CtlError>
            break;
 800b79a:	e041      	b.n	800b820 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b79c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	da0b      	bge.n	800b7bc <USBD_StdEPReq+0x228>
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4413      	add	r3, r2
 800b7b0:	009b      	lsls	r3, r3, #2
 800b7b2:	3310      	adds	r3, #16
 800b7b4:	687a      	ldr	r2, [r7, #4]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	e00b      	b.n	800b7d4 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800b7bc:	7bbb      	ldrb	r3, [r7, #14]
 800b7be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <USBD_StdEPReq+0x24e>
 800b7dc:	7bbb      	ldrb	r3, [r7, #14]
 800b7de:	2b80      	cmp	r3, #128	; 0x80
 800b7e0:	d103      	bne.n	800b7ea <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	e00e      	b.n	800b808 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b7ea:	7bbb      	ldrb	r3, [r7, #14]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f001 f8c4 	bl	800c97c <USBD_LL_IsStallEP>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d003      	beq.n	800b802 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	e002      	b.n	800b808 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2202      	movs	r2, #2
 800b80c:	4619      	mov	r1, r3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fbd9 	bl	800bfc6 <USBD_CtlSendData>
          break;
 800b814:	e004      	b.n	800b820 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fb63 	bl	800bee4 <USBD_CtlError>
        break;
 800b81e:	bf00      	nop
      }
      break;
 800b820:	e004      	b.n	800b82c <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 fb5d 	bl	800bee4 <USBD_CtlError>
      break;
 800b82a:	bf00      	nop
    }
    break;
 800b82c:	e004      	b.n	800b838 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fb57 	bl	800bee4 <USBD_CtlError>
    break;
 800b836:	bf00      	nop
  }

  return ret;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	885b      	ldrh	r3, [r3, #2]
 800b85e:	0a1b      	lsrs	r3, r3, #8
 800b860:	b29b      	uxth	r3, r3
 800b862:	3b01      	subs	r3, #1
 800b864:	2b0e      	cmp	r3, #14
 800b866:	f200 8152 	bhi.w	800bb0e <USBD_GetDescriptor+0x2ca>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <USBD_GetDescriptor+0x2c>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b8e1 	.word	0x0800b8e1
 800b874:	0800b8f9 	.word	0x0800b8f9
 800b878:	0800b939 	.word	0x0800b939
 800b87c:	0800bb0f 	.word	0x0800bb0f
 800b880:	0800bb0f 	.word	0x0800bb0f
 800b884:	0800baaf 	.word	0x0800baaf
 800b888:	0800badb 	.word	0x0800badb
 800b88c:	0800bb0f 	.word	0x0800bb0f
 800b890:	0800bb0f 	.word	0x0800bb0f
 800b894:	0800bb0f 	.word	0x0800bb0f
 800b898:	0800bb0f 	.word	0x0800bb0f
 800b89c:	0800bb0f 	.word	0x0800bb0f
 800b8a0:	0800bb0f 	.word	0x0800bb0f
 800b8a4:	0800bb0f 	.word	0x0800bb0f
 800b8a8:	0800b8ad 	.word	0x0800b8ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d00b      	beq.n	800b8d0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8be:	69db      	ldr	r3, [r3, #28]
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	7c12      	ldrb	r2, [r2, #16]
 800b8c4:	f107 0108 	add.w	r1, r7, #8
 800b8c8:	4610      	mov	r0, r2
 800b8ca:	4798      	blx	r3
 800b8cc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800b8ce:	e126      	b.n	800bb1e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800b8d0:	6839      	ldr	r1, [r7, #0]
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 fb06 	bl	800bee4 <USBD_CtlError>
      err++;
 800b8d8:	7afb      	ldrb	r3, [r7, #11]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	72fb      	strb	r3, [r7, #11]
    break;
 800b8de:	e11e      	b.n	800bb1e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	7c12      	ldrb	r2, [r2, #16]
 800b8ec:	f107 0108 	add.w	r1, r7, #8
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	4798      	blx	r3
 800b8f4:	60f8      	str	r0, [r7, #12]
    break;
 800b8f6:	e112      	b.n	800bb1e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	7c1b      	ldrb	r3, [r3, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10d      	bne.n	800b91c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b908:	f107 0208 	add.w	r2, r7, #8
 800b90c:	4610      	mov	r0, r2
 800b90e:	4798      	blx	r3
 800b910:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	3301      	adds	r3, #1
 800b916:	2202      	movs	r2, #2
 800b918:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800b91a:	e100      	b.n	800bb1e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	f107 0208 	add.w	r2, r7, #8
 800b928:	4610      	mov	r0, r2
 800b92a:	4798      	blx	r3
 800b92c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	3301      	adds	r3, #1
 800b932:	2202      	movs	r2, #2
 800b934:	701a      	strb	r2, [r3, #0]
    break;
 800b936:	e0f2      	b.n	800bb1e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	885b      	ldrh	r3, [r3, #2]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b05      	cmp	r3, #5
 800b940:	f200 80ac 	bhi.w	800ba9c <USBD_GetDescriptor+0x258>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <USBD_GetDescriptor+0x108>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b965 	.word	0x0800b965
 800b950:	0800b999 	.word	0x0800b999
 800b954:	0800b9cd 	.word	0x0800b9cd
 800b958:	0800ba01 	.word	0x0800ba01
 800b95c:	0800ba35 	.word	0x0800ba35
 800b960:	0800ba69 	.word	0x0800ba69
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00b      	beq.n	800b988 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	7c12      	ldrb	r2, [r2, #16]
 800b97c:	f107 0108 	add.w	r1, r7, #8
 800b980:	4610      	mov	r0, r2
 800b982:	4798      	blx	r3
 800b984:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b986:	e091      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b988:	6839      	ldr	r1, [r7, #0]
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f000 faaa 	bl	800bee4 <USBD_CtlError>
        err++;
 800b990:	7afb      	ldrb	r3, [r7, #11]
 800b992:	3301      	adds	r3, #1
 800b994:	72fb      	strb	r3, [r7, #11]
      break;
 800b996:	e089      	b.n	800baac <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00b      	beq.n	800b9bc <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	7c12      	ldrb	r2, [r2, #16]
 800b9b0:	f107 0108 	add.w	r1, r7, #8
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	4798      	blx	r3
 800b9b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9ba:	e077      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b9bc:	6839      	ldr	r1, [r7, #0]
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fa90 	bl	800bee4 <USBD_CtlError>
        err++;
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	72fb      	strb	r3, [r7, #11]
      break;
 800b9ca:	e06f      	b.n	800baac <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00b      	beq.n	800b9f0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	7c12      	ldrb	r2, [r2, #16]
 800b9e4:	f107 0108 	add.w	r1, r7, #8
 800b9e8:	4610      	mov	r0, r2
 800b9ea:	4798      	blx	r3
 800b9ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b9ee:	e05d      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800b9f0:	6839      	ldr	r1, [r7, #0]
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fa76 	bl	800bee4 <USBD_CtlError>
        err++;
 800b9f8:	7afb      	ldrb	r3, [r7, #11]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	72fb      	strb	r3, [r7, #11]
      break;
 800b9fe:	e055      	b.n	800baac <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00b      	beq.n	800ba24 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	7c12      	ldrb	r2, [r2, #16]
 800ba18:	f107 0108 	add.w	r1, r7, #8
 800ba1c:	4610      	mov	r0, r2
 800ba1e:	4798      	blx	r3
 800ba20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba22:	e043      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ba24:	6839      	ldr	r1, [r7, #0]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fa5c 	bl	800bee4 <USBD_CtlError>
        err++;
 800ba2c:	7afb      	ldrb	r3, [r7, #11]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	72fb      	strb	r3, [r7, #11]
      break;
 800ba32:	e03b      	b.n	800baac <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba46:	695b      	ldr	r3, [r3, #20]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	7c12      	ldrb	r2, [r2, #16]
 800ba4c:	f107 0108 	add.w	r1, r7, #8
 800ba50:	4610      	mov	r0, r2
 800ba52:	4798      	blx	r3
 800ba54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba56:	e029      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ba58:	6839      	ldr	r1, [r7, #0]
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fa42 	bl	800bee4 <USBD_CtlError>
        err++;
 800ba60:	7afb      	ldrb	r3, [r7, #11]
 800ba62:	3301      	adds	r3, #1
 800ba64:	72fb      	strb	r3, [r7, #11]
      break;
 800ba66:	e021      	b.n	800baac <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d00b      	beq.n	800ba8c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	7c12      	ldrb	r2, [r2, #16]
 800ba80:	f107 0108 	add.w	r1, r7, #8
 800ba84:	4610      	mov	r0, r2
 800ba86:	4798      	blx	r3
 800ba88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba8a:	e00f      	b.n	800baac <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800ba8c:	6839      	ldr	r1, [r7, #0]
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fa28 	bl	800bee4 <USBD_CtlError>
        err++;
 800ba94:	7afb      	ldrb	r3, [r7, #11]
 800ba96:	3301      	adds	r3, #1
 800ba98:	72fb      	strb	r3, [r7, #11]
      break;
 800ba9a:	e007      	b.n	800baac <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fa20 	bl	800bee4 <USBD_CtlError>
      err++;
 800baa4:	7afb      	ldrb	r3, [r7, #11]
 800baa6:	3301      	adds	r3, #1
 800baa8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800baaa:	bf00      	nop
    }
    break;
 800baac:	e037      	b.n	800bb1e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	7c1b      	ldrb	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d109      	bne.n	800baca <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800babe:	f107 0208 	add.w	r2, r7, #8
 800bac2:	4610      	mov	r0, r2
 800bac4:	4798      	blx	r3
 800bac6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bac8:	e029      	b.n	800bb1e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fa09 	bl	800bee4 <USBD_CtlError>
      err++;
 800bad2:	7afb      	ldrb	r3, [r7, #11]
 800bad4:	3301      	adds	r3, #1
 800bad6:	72fb      	strb	r3, [r7, #11]
    break;
 800bad8:	e021      	b.n	800bb1e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	7c1b      	ldrb	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d10d      	bne.n	800bafe <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baea:	f107 0208 	add.w	r2, r7, #8
 800baee:	4610      	mov	r0, r2
 800baf0:	4798      	blx	r3
 800baf2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	3301      	adds	r3, #1
 800baf8:	2207      	movs	r2, #7
 800bafa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800bafc:	e00f      	b.n	800bb1e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800bafe:	6839      	ldr	r1, [r7, #0]
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f9ef 	bl	800bee4 <USBD_CtlError>
      err++;
 800bb06:	7afb      	ldrb	r3, [r7, #11]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	72fb      	strb	r3, [r7, #11]
    break;
 800bb0c:	e007      	b.n	800bb1e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f9e7 	bl	800bee4 <USBD_CtlError>
    err++;
 800bb16:	7afb      	ldrb	r3, [r7, #11]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	72fb      	strb	r3, [r7, #11]
    break;
 800bb1c:	bf00      	nop
  }

  if (err != 0U)
 800bb1e:	7afb      	ldrb	r3, [r7, #11]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d11e      	bne.n	800bb62 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	88db      	ldrh	r3, [r3, #6]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d016      	beq.n	800bb5a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800bb2c:	893b      	ldrh	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00e      	beq.n	800bb50 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	88da      	ldrh	r2, [r3, #6]
 800bb36:	893b      	ldrh	r3, [r7, #8]
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	bf28      	it	cs
 800bb3c:	4613      	movcs	r3, r2
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800bb42:	893b      	ldrh	r3, [r7, #8]
 800bb44:	461a      	mov	r2, r3
 800bb46:	68f9      	ldr	r1, [r7, #12]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 fa3c 	bl	800bfc6 <USBD_CtlSendData>
 800bb4e:	e009      	b.n	800bb64 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f9c6 	bl	800bee4 <USBD_CtlError>
 800bb58:	e004      	b.n	800bb64 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fa8d 	bl	800c07a <USBD_CtlSendStatus>
 800bb60:	e000      	b.n	800bb64 <USBD_GetDescriptor+0x320>
    return;
 800bb62:	bf00      	nop
    }
  }
}
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
 800bb6a:	bf00      	nop

0800bb6c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b084      	sub	sp, #16
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	889b      	ldrh	r3, [r3, #4]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d130      	bne.n	800bbe0 <USBD_SetAddress+0x74>
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	88db      	ldrh	r3, [r3, #6]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d12c      	bne.n	800bbe0 <USBD_SetAddress+0x74>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	885b      	ldrh	r3, [r3, #2]
 800bb8a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb8c:	d828      	bhi.n	800bbe0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	885b      	ldrh	r3, [r3, #2]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d104      	bne.n	800bbae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f99c 	bl	800bee4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbac:	e01c      	b.n	800bbe8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	7bfa      	ldrb	r2, [r7, #15]
 800bbb2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 ff0c 	bl	800c9d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 fa5a 	bl	800c07a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bbc6:	7bfb      	ldrb	r3, [r7, #15]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d004      	beq.n	800bbd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2202      	movs	r2, #2
 800bbd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbd4:	e008      	b.n	800bbe8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbde:	e003      	b.n	800bbe8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 f97e 	bl	800bee4 <USBD_CtlError>
  }
}
 800bbe8:	bf00      	nop
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b084      	sub	sp, #16
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	885b      	ldrh	r3, [r3, #2]
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	4b4b      	ldr	r3, [pc, #300]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bc08:	4b4a      	ldr	r3, [pc, #296]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d905      	bls.n	800bc1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bc10:	6839      	ldr	r1, [r7, #0]
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f966 	bl	800bee4 <USBD_CtlError>
    return USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e087      	b.n	800bd2c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d002      	beq.n	800bc2c <USBD_SetConfig+0x3c>
 800bc26:	2b03      	cmp	r3, #3
 800bc28:	d025      	beq.n	800bc76 <USBD_SetConfig+0x86>
 800bc2a:	e071      	b.n	800bd10 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800bc2c:	4b41      	ldr	r3, [pc, #260]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01c      	beq.n	800bc6e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800bc34:	4b3f      	ldr	r3, [pc, #252]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc3e:	4b3d      	ldr	r3, [pc, #244]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	4619      	mov	r1, r3
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff f9bd 	bl	800afc4 <USBD_SetClassConfig>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d004      	beq.n	800bc5e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f000 f944 	bl	800bee4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bc5c:	e065      	b.n	800bd2a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fa0b 	bl	800c07a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2203      	movs	r2, #3
 800bc68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bc6c:	e05d      	b.n	800bd2a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa03 	bl	800c07a <USBD_CtlSendStatus>
    break;
 800bc74:	e059      	b.n	800bd2a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800bc76:	4b2f      	ldr	r3, [pc, #188]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d112      	bne.n	800bca4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2202      	movs	r2, #2
 800bc82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800bc86:	4b2b      	ldr	r3, [pc, #172]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc90:	4b28      	ldr	r3, [pc, #160]	; (800bd34 <USBD_SetConfig+0x144>)
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	4619      	mov	r1, r3
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7ff f9b0 	bl	800affc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f9ec 	bl	800c07a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800bca2:	e042      	b.n	800bd2a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800bca4:	4b23      	ldr	r3, [pc, #140]	; (800bd34 <USBD_SetConfig+0x144>)
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d02a      	beq.n	800bd08 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6878      	ldr	r0, [r7, #4]
 800bcbc:	f7ff f99e 	bl	800affc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800bcc0:	4b1c      	ldr	r3, [pc, #112]	; (800bd34 <USBD_SetConfig+0x144>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800bcca:	4b1a      	ldr	r3, [pc, #104]	; (800bd34 <USBD_SetConfig+0x144>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	4619      	mov	r1, r3
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f7ff f977 	bl	800afc4 <USBD_SetClassConfig>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800bcda:	7bfb      	ldrb	r3, [r7, #15]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00f      	beq.n	800bd00 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f8fe 	bl	800bee4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	4619      	mov	r1, r3
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7ff f983 	bl	800affc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2202      	movs	r2, #2
 800bcfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800bcfe:	e014      	b.n	800bd2a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f9ba 	bl	800c07a <USBD_CtlSendStatus>
    break;
 800bd06:	e010      	b.n	800bd2a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 f9b6 	bl	800c07a <USBD_CtlSendStatus>
    break;
 800bd0e:	e00c      	b.n	800bd2a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 f8e6 	bl	800bee4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <USBD_SetConfig+0x144>)
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff f96c 	bl	800affc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800bd24:	2303      	movs	r3, #3
 800bd26:	73fb      	strb	r3, [r7, #15]
    break;
 800bd28:	bf00      	nop
  }

  return ret;
 800bd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	20000330 	.word	0x20000330

0800bd38 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	88db      	ldrh	r3, [r3, #6]
 800bd46:	2b01      	cmp	r3, #1
 800bd48:	d004      	beq.n	800bd54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 f8c9 	bl	800bee4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800bd52:	e021      	b.n	800bd98 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	db17      	blt.n	800bd8e <USBD_GetConfig+0x56>
 800bd5e:	2b02      	cmp	r3, #2
 800bd60:	dd02      	ble.n	800bd68 <USBD_GetConfig+0x30>
 800bd62:	2b03      	cmp	r3, #3
 800bd64:	d00b      	beq.n	800bd7e <USBD_GetConfig+0x46>
 800bd66:	e012      	b.n	800bd8e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3308      	adds	r3, #8
 800bd72:	2201      	movs	r2, #1
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f925 	bl	800bfc6 <USBD_CtlSendData>
      break;
 800bd7c:	e00c      	b.n	800bd98 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3304      	adds	r3, #4
 800bd82:	2201      	movs	r2, #1
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f91d 	bl	800bfc6 <USBD_CtlSendData>
      break;
 800bd8c:	e004      	b.n	800bd98 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 f8a7 	bl	800bee4 <USBD_CtlError>
      break;
 800bd96:	bf00      	nop
}
 800bd98:	bf00      	nop
 800bd9a:	3708      	adds	r7, #8
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	d81e      	bhi.n	800bdf4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	88db      	ldrh	r3, [r3, #6]
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	d004      	beq.n	800bdc8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 f88f 	bl	800bee4 <USBD_CtlError>
      break;
 800bdc6:	e01a      	b.n	800bdfe <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	f043 0202 	orr.w	r2, r3, #2
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	330c      	adds	r3, #12
 800bde8:	2202      	movs	r2, #2
 800bdea:	4619      	mov	r1, r3
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f8ea 	bl	800bfc6 <USBD_CtlSendData>
    break;
 800bdf2:	e004      	b.n	800bdfe <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f874 	bl	800bee4 <USBD_CtlError>
    break;
 800bdfc:	bf00      	nop
  }
}
 800bdfe:	bf00      	nop
 800be00:	3708      	adds	r7, #8
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}

0800be06 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be06:	b580      	push	{r7, lr}
 800be08:	b082      	sub	sp, #8
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	6078      	str	r0, [r7, #4]
 800be0e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	885b      	ldrh	r3, [r3, #2]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d106      	bne.n	800be26 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f92a 	bl	800c07a <USBD_CtlSendStatus>
  }
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
 800be36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3e:	3b01      	subs	r3, #1
 800be40:	2b02      	cmp	r3, #2
 800be42:	d80b      	bhi.n	800be5c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	885b      	ldrh	r3, [r3, #2]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d10c      	bne.n	800be66 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f000 f910 	bl	800c07a <USBD_CtlSendStatus>
      }
      break;
 800be5a:	e004      	b.n	800be66 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 f840 	bl	800bee4 <USBD_CtlError>
      break;
 800be64:	e000      	b.n	800be68 <USBD_ClrFeature+0x3a>
      break;
 800be66:	bf00      	nop
  }
}
 800be68:	bf00      	nop
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	781a      	ldrb	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	781a      	ldrb	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3301      	adds	r3, #1
 800be98:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff faa8 	bl	800b3f0 <SWAPBYTE>
 800bea0:	4603      	mov	r3, r0
 800bea2:	461a      	mov	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3301      	adds	r3, #1
 800beac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3301      	adds	r3, #1
 800beb2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f7ff fa9b 	bl	800b3f0 <SWAPBYTE>
 800beba:	4603      	mov	r3, r0
 800bebc:	461a      	mov	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	3301      	adds	r3, #1
 800bec6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	3301      	adds	r3, #1
 800becc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff fa8e 	bl	800b3f0 <SWAPBYTE>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	80da      	strh	r2, [r3, #6]
}
 800bedc:	bf00      	nop
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800beee:	2180      	movs	r1, #128	; 0x80
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fcd7 	bl	800c8a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bef6:	2100      	movs	r1, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 fcd3 	bl	800c8a4 <USBD_LL_StallEP>
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b086      	sub	sp, #24
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	60f8      	str	r0, [r7, #12]
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d036      	beq.n	800bf8a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bf20:	6938      	ldr	r0, [r7, #16]
 800bf22:	f000 f836 	bl	800bf92 <USBD_GetLen>
 800bf26:	4603      	mov	r3, r0
 800bf28:	3301      	adds	r3, #1
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	005b      	lsls	r3, r3, #1
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bf34:	7dfb      	ldrb	r3, [r7, #23]
 800bf36:	68ba      	ldr	r2, [r7, #8]
 800bf38:	4413      	add	r3, r2
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	7812      	ldrb	r2, [r2, #0]
 800bf3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf40:	7dfb      	ldrb	r3, [r7, #23]
 800bf42:	3301      	adds	r3, #1
 800bf44:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf50:	7dfb      	ldrb	r3, [r7, #23]
 800bf52:	3301      	adds	r3, #1
 800bf54:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf56:	e013      	b.n	800bf80 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
 800bf5a:	68ba      	ldr	r2, [r7, #8]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	7812      	ldrb	r2, [r2, #0]
 800bf62:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	3301      	adds	r3, #1
 800bf68:	613b      	str	r3, [r7, #16]
    idx++;
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf70:	7dfb      	ldrb	r3, [r7, #23]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	4413      	add	r3, r2
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1e7      	bne.n	800bf58 <USBD_GetString+0x52>
 800bf88:	e000      	b.n	800bf8c <USBD_GetString+0x86>
    return;
 800bf8a:	bf00      	nop
  }
}
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b085      	sub	sp, #20
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bfa2:	e005      	b.n	800bfb0 <USBD_GetLen+0x1e>
  {
    len++;
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	3301      	adds	r3, #1
 800bfae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1f5      	bne.n	800bfa4 <USBD_GetLen+0x12>
  }

  return len;
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	2100      	movs	r1, #0
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	f000 fd29 	bl	800ca44 <USBD_LL_Transmit>

  return USBD_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68ba      	ldr	r2, [r7, #8]
 800c00c:	2100      	movs	r1, #0
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 fd18 	bl	800ca44 <USBD_LL_Transmit>

  return USBD_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2203      	movs	r2, #3
 800c02e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	2100      	movs	r1, #0
 800c048:	68f8      	ldr	r0, [r7, #12]
 800c04a:	f000 fd33 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	2100      	movs	r1, #0
 800c06a:	68f8      	ldr	r0, [r7, #12]
 800c06c:	f000 fd22 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2204      	movs	r2, #4
 800c086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c08a:	2300      	movs	r3, #0
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fcd7 	bl	800ca44 <USBD_LL_Transmit>

  return USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2205      	movs	r2, #5
 800c0ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	2100      	movs	r1, #0
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fcfc 	bl	800cab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
	...

0800c0c8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	4912      	ldr	r1, [pc, #72]	; (800c118 <MX_USB_DEVICE_Init+0x50>)
 800c0d0:	4812      	ldr	r0, [pc, #72]	; (800c11c <MX_USB_DEVICE_Init+0x54>)
 800c0d2:	f7fe ff09 	bl	800aee8 <USBD_Init>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d001      	beq.n	800c0e0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c0dc:	f7f4 fcd8 	bl	8000a90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0e0:	490f      	ldr	r1, [pc, #60]	; (800c120 <MX_USB_DEVICE_Init+0x58>)
 800c0e2:	480e      	ldr	r0, [pc, #56]	; (800c11c <MX_USB_DEVICE_Init+0x54>)
 800c0e4:	f7fe ff30 	bl	800af48 <USBD_RegisterClass>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d001      	beq.n	800c0f2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c0ee:	f7f4 fccf 	bl	8000a90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0f2:	490c      	ldr	r1, [pc, #48]	; (800c124 <MX_USB_DEVICE_Init+0x5c>)
 800c0f4:	4809      	ldr	r0, [pc, #36]	; (800c11c <MX_USB_DEVICE_Init+0x54>)
 800c0f6:	f7fe fe8b 	bl	800ae10 <USBD_CDC_RegisterInterface>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c100:	f7f4 fcc6 	bl	8000a90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c104:	4805      	ldr	r0, [pc, #20]	; (800c11c <MX_USB_DEVICE_Init+0x54>)
 800c106:	f7fe ff46 	bl	800af96 <USBD_Start>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c110:	f7f4 fcbe 	bl	8000a90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c114:	bf00      	nop
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20000130 	.word	0x20000130
 800c11c:	200003dc 	.word	0x200003dc
 800c120:	20000018 	.word	0x20000018
 800c124:	2000011c 	.word	0x2000011c

0800c128 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c12c:	2200      	movs	r2, #0
 800c12e:	4905      	ldr	r1, [pc, #20]	; (800c144 <CDC_Init_FS+0x1c>)
 800c130:	4805      	ldr	r0, [pc, #20]	; (800c148 <CDC_Init_FS+0x20>)
 800c132:	f7fe fe82 	bl	800ae3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c136:	4905      	ldr	r1, [pc, #20]	; (800c14c <CDC_Init_FS+0x24>)
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <CDC_Init_FS+0x20>)
 800c13a:	f7fe fe97 	bl	800ae6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c13e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c140:	4618      	mov	r0, r3
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000a94 	.word	0x20000a94
 800c148:	200003dc 	.word	0x200003dc
 800c14c:	200006ac 	.word	0x200006ac

0800c150 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c154:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c156:	4618      	mov	r0, r3
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	6039      	str	r1, [r7, #0]
 800c16a:	71fb      	strb	r3, [r7, #7]
 800c16c:	4613      	mov	r3, r2
 800c16e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	2b23      	cmp	r3, #35	; 0x23
 800c174:	d84a      	bhi.n	800c20c <CDC_Control_FS+0xac>
 800c176:	a201      	add	r2, pc, #4	; (adr r2, 800c17c <CDC_Control_FS+0x1c>)
 800c178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c17c:	0800c20d 	.word	0x0800c20d
 800c180:	0800c20d 	.word	0x0800c20d
 800c184:	0800c20d 	.word	0x0800c20d
 800c188:	0800c20d 	.word	0x0800c20d
 800c18c:	0800c20d 	.word	0x0800c20d
 800c190:	0800c20d 	.word	0x0800c20d
 800c194:	0800c20d 	.word	0x0800c20d
 800c198:	0800c20d 	.word	0x0800c20d
 800c19c:	0800c20d 	.word	0x0800c20d
 800c1a0:	0800c20d 	.word	0x0800c20d
 800c1a4:	0800c20d 	.word	0x0800c20d
 800c1a8:	0800c20d 	.word	0x0800c20d
 800c1ac:	0800c20d 	.word	0x0800c20d
 800c1b0:	0800c20d 	.word	0x0800c20d
 800c1b4:	0800c20d 	.word	0x0800c20d
 800c1b8:	0800c20d 	.word	0x0800c20d
 800c1bc:	0800c20d 	.word	0x0800c20d
 800c1c0:	0800c20d 	.word	0x0800c20d
 800c1c4:	0800c20d 	.word	0x0800c20d
 800c1c8:	0800c20d 	.word	0x0800c20d
 800c1cc:	0800c20d 	.word	0x0800c20d
 800c1d0:	0800c20d 	.word	0x0800c20d
 800c1d4:	0800c20d 	.word	0x0800c20d
 800c1d8:	0800c20d 	.word	0x0800c20d
 800c1dc:	0800c20d 	.word	0x0800c20d
 800c1e0:	0800c20d 	.word	0x0800c20d
 800c1e4:	0800c20d 	.word	0x0800c20d
 800c1e8:	0800c20d 	.word	0x0800c20d
 800c1ec:	0800c20d 	.word	0x0800c20d
 800c1f0:	0800c20d 	.word	0x0800c20d
 800c1f4:	0800c20d 	.word	0x0800c20d
 800c1f8:	0800c20d 	.word	0x0800c20d
 800c1fc:	0800c20d 	.word	0x0800c20d
 800c200:	0800c20d 	.word	0x0800c20d
 800c204:	0800c20d 	.word	0x0800c20d
 800c208:	0800c20d 	.word	0x0800c20d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c20c:	bf00      	nop
  }

  return (USBD_OK);
 800c20e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c210:	4618      	mov	r0, r3
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c226:	6879      	ldr	r1, [r7, #4]
 800c228:	4805      	ldr	r0, [pc, #20]	; (800c240 <CDC_Receive_FS+0x24>)
 800c22a:	f7fe fe1f 	bl	800ae6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c22e:	4804      	ldr	r0, [pc, #16]	; (800c240 <CDC_Receive_FS+0x24>)
 800c230:	f7fe fe30 	bl	800ae94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c234:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	200003dc 	.word	0x200003dc

0800c244 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c244:	b480      	push	{r7}
 800c246:	b087      	sub	sp, #28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	4613      	mov	r3, r2
 800c250:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
	...

0800c268 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	6039      	str	r1, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2212      	movs	r2, #18
 800c278:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c27a:	4b03      	ldr	r3, [pc, #12]	; (800c288 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	20000150 	.word	0x20000150

0800c28c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	2204      	movs	r2, #4
 800c29c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c29e:	4b03      	ldr	r3, [pc, #12]	; (800c2ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20000170 	.word	0x20000170

0800c2b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d105      	bne.n	800c2ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4907      	ldr	r1, [pc, #28]	; (800c2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2c6:	4808      	ldr	r0, [pc, #32]	; (800c2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2c8:	f7ff fe1d 	bl	800bf06 <USBD_GetString>
 800c2cc:	e004      	b.n	800c2d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	4904      	ldr	r1, [pc, #16]	; (800c2e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2d2:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2d4:	f7ff fe17 	bl	800bf06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3708      	adds	r7, #8
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000e7c 	.word	0x20000e7c
 800c2e8:	0800d0a4 	.word	0x0800d0a4

0800c2ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	6039      	str	r1, [r7, #0]
 800c2f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c2f8:	683a      	ldr	r2, [r7, #0]
 800c2fa:	4904      	ldr	r1, [pc, #16]	; (800c30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c2fc:	4804      	ldr	r0, [pc, #16]	; (800c310 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c2fe:	f7ff fe02 	bl	800bf06 <USBD_GetString>
  return USBD_StrDesc;
 800c302:	4b02      	ldr	r3, [pc, #8]	; (800c30c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	20000e7c 	.word	0x20000e7c
 800c310:	0800d0bc 	.word	0x0800d0bc

0800c314 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	6039      	str	r1, [r7, #0]
 800c31e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	221a      	movs	r2, #26
 800c324:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c326:	f000 f855 	bl	800c3d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c32a:	4b02      	ldr	r3, [pc, #8]	; (800c334 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	20000174 	.word	0x20000174

0800c338 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	6039      	str	r1, [r7, #0]
 800c342:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d105      	bne.n	800c356 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	4907      	ldr	r1, [pc, #28]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c34e:	4808      	ldr	r0, [pc, #32]	; (800c370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c350:	f7ff fdd9 	bl	800bf06 <USBD_GetString>
 800c354:	e004      	b.n	800c360 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	4904      	ldr	r1, [pc, #16]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c35a:	4805      	ldr	r0, [pc, #20]	; (800c370 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c35c:	f7ff fdd3 	bl	800bf06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c362:	4618      	mov	r0, r3
 800c364:	3708      	adds	r7, #8
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}
 800c36a:	bf00      	nop
 800c36c:	20000e7c 	.word	0x20000e7c
 800c370:	0800d0d0 	.word	0x0800d0d0

0800c374 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	4603      	mov	r3, r0
 800c37c:	6039      	str	r1, [r7, #0]
 800c37e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c380:	79fb      	ldrb	r3, [r7, #7]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d105      	bne.n	800c392 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	4907      	ldr	r1, [pc, #28]	; (800c3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c38a:	4808      	ldr	r0, [pc, #32]	; (800c3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c38c:	f7ff fdbb 	bl	800bf06 <USBD_GetString>
 800c390:	e004      	b.n	800c39c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	4904      	ldr	r1, [pc, #16]	; (800c3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c396:	4805      	ldr	r0, [pc, #20]	; (800c3ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c398:	f7ff fdb5 	bl	800bf06 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c39c:	4b02      	ldr	r3, [pc, #8]	; (800c3a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20000e7c 	.word	0x20000e7c
 800c3ac:	0800d0dc 	.word	0x0800d0dc

0800c3b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	6039      	str	r1, [r7, #0]
 800c3ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	220c      	movs	r2, #12
 800c3c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c3c2:	4b03      	ldr	r3, [pc, #12]	; (800c3d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	20000164 	.word	0x20000164

0800c3d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3da:	4b0f      	ldr	r3, [pc, #60]	; (800c418 <Get_SerialNum+0x44>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3e0:	4b0e      	ldr	r3, [pc, #56]	; (800c41c <Get_SerialNum+0x48>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3e6:	4b0e      	ldr	r3, [pc, #56]	; (800c420 <Get_SerialNum+0x4c>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3fa:	2208      	movs	r2, #8
 800c3fc:	4909      	ldr	r1, [pc, #36]	; (800c424 <Get_SerialNum+0x50>)
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 f814 	bl	800c42c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c404:	2204      	movs	r2, #4
 800c406:	4908      	ldr	r1, [pc, #32]	; (800c428 <Get_SerialNum+0x54>)
 800c408:	68b8      	ldr	r0, [r7, #8]
 800c40a:	f000 f80f 	bl	800c42c <IntToUnicode>
  }
}
 800c40e:	bf00      	nop
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	1fff7590 	.word	0x1fff7590
 800c41c:	1fff7594 	.word	0x1fff7594
 800c420:	1fff7598 	.word	0x1fff7598
 800c424:	20000176 	.word	0x20000176
 800c428:	20000186 	.word	0x20000186

0800c42c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	4613      	mov	r3, r2
 800c438:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c43e:	2300      	movs	r3, #0
 800c440:	75fb      	strb	r3, [r7, #23]
 800c442:	e027      	b.n	800c494 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	0f1b      	lsrs	r3, r3, #28
 800c448:	2b09      	cmp	r3, #9
 800c44a:	d80b      	bhi.n	800c464 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	0f1b      	lsrs	r3, r3, #28
 800c450:	b2da      	uxtb	r2, r3
 800c452:	7dfb      	ldrb	r3, [r7, #23]
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4619      	mov	r1, r3
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	440b      	add	r3, r1
 800c45c:	3230      	adds	r2, #48	; 0x30
 800c45e:	b2d2      	uxtb	r2, r2
 800c460:	701a      	strb	r2, [r3, #0]
 800c462:	e00a      	b.n	800c47a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	0f1b      	lsrs	r3, r3, #28
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	005b      	lsls	r3, r3, #1
 800c46e:	4619      	mov	r1, r3
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	440b      	add	r3, r1
 800c474:	3237      	adds	r2, #55	; 0x37
 800c476:	b2d2      	uxtb	r2, r2
 800c478:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	011b      	lsls	r3, r3, #4
 800c47e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	3301      	adds	r3, #1
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	4413      	add	r3, r2
 800c48a:	2200      	movs	r2, #0
 800c48c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c48e:	7dfb      	ldrb	r3, [r7, #23]
 800c490:	3301      	adds	r3, #1
 800c492:	75fb      	strb	r3, [r7, #23]
 800c494:	7dfa      	ldrb	r2, [r7, #23]
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d3d3      	bcc.n	800c444 <IntToUnicode+0x18>
  }
}
 800c49c:	bf00      	nop
 800c49e:	371c      	adds	r7, #28
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08a      	sub	sp, #40	; 0x28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4b0:	f107 0314 	add.w	r3, r7, #20
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	605a      	str	r2, [r3, #4]
 800c4ba:	609a      	str	r2, [r3, #8]
 800c4bc:	60da      	str	r2, [r3, #12]
 800c4be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a1c      	ldr	r2, [pc, #112]	; (800c538 <HAL_PCD_MspInit+0x90>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d131      	bne.n	800c52e <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4ca:	4b1c      	ldr	r3, [pc, #112]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4ce:	4a1b      	ldr	r2, [pc, #108]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c4d0:	f043 0301 	orr.w	r3, r3, #1
 800c4d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c4d6:	4b19      	ldr	r3, [pc, #100]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	613b      	str	r3, [r7, #16]
 800c4e0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c4e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c4e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 800c4f4:	230a      	movs	r3, #10
 800c4f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4f8:	f107 0314 	add.w	r3, r7, #20
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800c502:	f7f8 fc07 	bl	8004d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c506:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c50a:	4a0c      	ldr	r2, [pc, #48]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c50c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c510:	6593      	str	r3, [r2, #88]	; 0x58
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <HAL_PCD_MspInit+0x94>)
 800c514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c51e:	2200      	movs	r2, #0
 800c520:	2100      	movs	r1, #0
 800c522:	2043      	movs	r0, #67	; 0x43
 800c524:	f7f8 fbbf 	bl	8004ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c528:	2043      	movs	r0, #67	; 0x43
 800c52a:	f7f8 fbd8 	bl	8004cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c52e:	bf00      	nop
 800c530:	3728      	adds	r7, #40	; 0x28
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	40006800 	.word	0x40006800
 800c53c:	40021000 	.word	0x40021000

0800c540 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7fe fd68 	bl	800b02c <USBD_LL_SetupStage>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c576:	78fa      	ldrb	r2, [r7, #3]
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4613      	mov	r3, r2
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	440b      	add	r3, r1
 800c584:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	4619      	mov	r1, r3
 800c58e:	f7fe fda0 	bl	800b0d2 <USBD_LL_DataOutStage>
}
 800c592:	bf00      	nop
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c5ac:	78fa      	ldrb	r2, [r7, #3]
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	00db      	lsls	r3, r3, #3
 800c5b8:	440b      	add	r3, r1
 800c5ba:	333c      	adds	r3, #60	; 0x3c
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7fe fde9 	bl	800b198 <USBD_LL_DataInStage>
}
 800c5c6:	bf00      	nop
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe feed 	bl	800b3bc <USBD_LL_SOF>
}
 800c5e2:	bf00      	nop
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d001      	beq.n	800c602 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5fe:	f7f4 fa47 	bl	8000a90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c608:	7bfa      	ldrb	r2, [r7, #15]
 800c60a:	4611      	mov	r1, r2
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fe9a 	bl	800b346 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fe53 	bl	800b2c4 <USBD_LL_Reset>
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
	...

0800c628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fe95 	bl	800b366 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	699b      	ldr	r3, [r3, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d005      	beq.n	800c650 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c644:	4b04      	ldr	r3, [pc, #16]	; (800c658 <HAL_PCD_SuspendCallback+0x30>)
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	4a03      	ldr	r2, [pc, #12]	; (800c658 <HAL_PCD_SuspendCallback+0x30>)
 800c64a:	f043 0306 	orr.w	r3, r3, #6
 800c64e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	e000ed00 	.word	0xe000ed00

0800c65c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d007      	beq.n	800c67c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c66c:	4b08      	ldr	r3, [pc, #32]	; (800c690 <HAL_PCD_ResumeCallback+0x34>)
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	4a07      	ldr	r2, [pc, #28]	; (800c690 <HAL_PCD_ResumeCallback+0x34>)
 800c672:	f023 0306 	bic.w	r3, r3, #6
 800c676:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c678:	f000 fa9e 	bl	800cbb8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fe84 	bl	800b390 <USBD_LL_Resume>
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	e000ed00 	.word	0xe000ed00

0800c694 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800c69c:	f7fa fc64 	bl	8006f68 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c6a0:	4a2b      	ldr	r2, [pc, #172]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a29      	ldr	r2, [pc, #164]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c6b0:	4b27      	ldr	r3, [pc, #156]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6b2:	4a28      	ldr	r2, [pc, #160]	; (800c754 <USBD_LL_Init+0xc0>)
 800c6b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c6b6:	4b26      	ldr	r3, [pc, #152]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6b8:	2208      	movs	r2, #8
 800c6ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c6bc:	4b24      	ldr	r3, [pc, #144]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6be:	2202      	movs	r2, #2
 800c6c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c6c2:	4b23      	ldr	r3, [pc, #140]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c6c8:	4b21      	ldr	r3, [pc, #132]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c6ce:	4b20      	ldr	r3, [pc, #128]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c6d4:	4b1e      	ldr	r3, [pc, #120]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c6da:	4b1d      	ldr	r3, [pc, #116]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c6e0:	481b      	ldr	r0, [pc, #108]	; (800c750 <USBD_LL_Init+0xbc>)
 800c6e2:	f7f9 f848 	bl	8005776 <HAL_PCD_Init>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d001      	beq.n	800c6f0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800c6ec:	f7f4 f9d0 	bl	8000a90 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c6f6:	2318      	movs	r3, #24
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	f7fa fb63 	bl	8006dc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c706:	2358      	movs	r3, #88	; 0x58
 800c708:	2200      	movs	r2, #0
 800c70a:	2180      	movs	r1, #128	; 0x80
 800c70c:	f7fa fb5b 	bl	8006dc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c716:	23c0      	movs	r3, #192	; 0xc0
 800c718:	2200      	movs	r2, #0
 800c71a:	2181      	movs	r1, #129	; 0x81
 800c71c:	f7fa fb53 	bl	8006dc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c726:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c72a:	2200      	movs	r2, #0
 800c72c:	2101      	movs	r1, #1
 800c72e:	f7fa fb4a 	bl	8006dc6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c73c:	2200      	movs	r2, #0
 800c73e:	2182      	movs	r1, #130	; 0x82
 800c740:	f7fa fb41 	bl	8006dc6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	2000107c 	.word	0x2000107c
 800c754:	40006800 	.word	0x40006800

0800c758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c76e:	4618      	mov	r0, r3
 800c770:	f7f9 f913 	bl	800599a <HAL_PCD_Start>
 800c774:	4603      	mov	r3, r0
 800c776:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c778:	7bbb      	ldrb	r3, [r7, #14]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d816      	bhi.n	800c7ac <USBD_LL_Start+0x54>
 800c77e:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <USBD_LL_Start+0x2c>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c79b 	.word	0x0800c79b
 800c78c:	0800c7a1 	.word	0x0800c7a1
 800c790:	0800c7a7 	.word	0x0800c7a7
    case HAL_OK :
      usb_status = USBD_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
    break;
 800c798:	e00b      	b.n	800c7b2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c79a:	2303      	movs	r3, #3
 800c79c:	73fb      	strb	r3, [r7, #15]
    break;
 800c79e:	e008      	b.n	800c7b2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a4:	e005      	b.n	800c7b2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c7aa:	e002      	b.n	800c7b2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c7ac:	2303      	movs	r3, #3
 800c7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c7b0:	bf00      	nop
  }
  return usb_status;
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	4608      	mov	r0, r1
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	70fb      	strb	r3, [r7, #3]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70bb      	strb	r3, [r7, #2]
 800c7d2:	4613      	mov	r3, r2
 800c7d4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c7e4:	78bb      	ldrb	r3, [r7, #2]
 800c7e6:	883a      	ldrh	r2, [r7, #0]
 800c7e8:	78f9      	ldrb	r1, [r7, #3]
 800c7ea:	f7f9 fa6b 	bl	8005cc4 <HAL_PCD_EP_Open>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d817      	bhi.n	800c828 <USBD_LL_OpenEP+0x6c>
 800c7f8:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <USBD_LL_OpenEP+0x44>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c811 	.word	0x0800c811
 800c804:	0800c817 	.word	0x0800c817
 800c808:	0800c81d 	.word	0x0800c81d
 800c80c:	0800c823 	.word	0x0800c823
    case HAL_OK :
      usb_status = USBD_OK;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
    break;
 800c814:	e00b      	b.n	800c82e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c816:	2303      	movs	r3, #3
 800c818:	73fb      	strb	r3, [r7, #15]
    break;
 800c81a:	e008      	b.n	800c82e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c81c:	2301      	movs	r3, #1
 800c81e:	73fb      	strb	r3, [r7, #15]
    break;
 800c820:	e005      	b.n	800c82e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c822:	2303      	movs	r3, #3
 800c824:	73fb      	strb	r3, [r7, #15]
    break;
 800c826:	e002      	b.n	800c82e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c828:	2303      	movs	r3, #3
 800c82a:	73fb      	strb	r3, [r7, #15]
    break;
 800c82c:	bf00      	nop
  }
  return usb_status;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c852:	78fa      	ldrb	r2, [r7, #3]
 800c854:	4611      	mov	r1, r2
 800c856:	4618      	mov	r0, r3
 800c858:	f7f9 fa9a 	bl	8005d90 <HAL_PCD_EP_Close>
 800c85c:	4603      	mov	r3, r0
 800c85e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c860:	7bbb      	ldrb	r3, [r7, #14]
 800c862:	2b03      	cmp	r3, #3
 800c864:	d816      	bhi.n	800c894 <USBD_LL_CloseEP+0x5c>
 800c866:	a201      	add	r2, pc, #4	; (adr r2, 800c86c <USBD_LL_CloseEP+0x34>)
 800c868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c86c:	0800c87d 	.word	0x0800c87d
 800c870:	0800c883 	.word	0x0800c883
 800c874:	0800c889 	.word	0x0800c889
 800c878:	0800c88f 	.word	0x0800c88f
    case HAL_OK :
      usb_status = USBD_OK;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73fb      	strb	r3, [r7, #15]
    break;
 800c880:	e00b      	b.n	800c89a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c882:	2303      	movs	r3, #3
 800c884:	73fb      	strb	r3, [r7, #15]
    break;
 800c886:	e008      	b.n	800c89a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c888:	2301      	movs	r3, #1
 800c88a:	73fb      	strb	r3, [r7, #15]
    break;
 800c88c:	e005      	b.n	800c89a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c88e:	2303      	movs	r3, #3
 800c890:	73fb      	strb	r3, [r7, #15]
    break;
 800c892:	e002      	b.n	800c89a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c894:	2303      	movs	r3, #3
 800c896:	73fb      	strb	r3, [r7, #15]
    break;
 800c898:	bf00      	nop
  }
  return usb_status;
 800c89a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c8be:	78fa      	ldrb	r2, [r7, #3]
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f9 fb44 	bl	8005f50 <HAL_PCD_EP_SetStall>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d816      	bhi.n	800c900 <USBD_LL_StallEP+0x5c>
 800c8d2:	a201      	add	r2, pc, #4	; (adr r2, 800c8d8 <USBD_LL_StallEP+0x34>)
 800c8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d8:	0800c8e9 	.word	0x0800c8e9
 800c8dc:	0800c8ef 	.word	0x0800c8ef
 800c8e0:	0800c8f5 	.word	0x0800c8f5
 800c8e4:	0800c8fb 	.word	0x0800c8fb
    case HAL_OK :
      usb_status = USBD_OK;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c8ec:	e00b      	b.n	800c906 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c8f2:	e008      	b.n	800c906 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8f8:	e005      	b.n	800c906 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c8fa:	2303      	movs	r3, #3
 800c8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c8fe:	e002      	b.n	800c906 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c900:	2303      	movs	r3, #3
 800c902:	73fb      	strb	r3, [r7, #15]
    break;
 800c904:	bf00      	nop
  }
  return usb_status;
 800c906:	7bfb      	ldrb	r3, [r7, #15]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	460b      	mov	r3, r1
 800c91a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c91c:	2300      	movs	r3, #0
 800c91e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c92a:	78fa      	ldrb	r2, [r7, #3]
 800c92c:	4611      	mov	r1, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f9 fb6e 	bl	8006010 <HAL_PCD_EP_ClrStall>
 800c934:	4603      	mov	r3, r0
 800c936:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c938:	7bbb      	ldrb	r3, [r7, #14]
 800c93a:	2b03      	cmp	r3, #3
 800c93c:	d816      	bhi.n	800c96c <USBD_LL_ClearStallEP+0x5c>
 800c93e:	a201      	add	r2, pc, #4	; (adr r2, 800c944 <USBD_LL_ClearStallEP+0x34>)
 800c940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c944:	0800c955 	.word	0x0800c955
 800c948:	0800c95b 	.word	0x0800c95b
 800c94c:	0800c961 	.word	0x0800c961
 800c950:	0800c967 	.word	0x0800c967
    case HAL_OK :
      usb_status = USBD_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	73fb      	strb	r3, [r7, #15]
    break;
 800c958:	e00b      	b.n	800c972 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c95a:	2303      	movs	r3, #3
 800c95c:	73fb      	strb	r3, [r7, #15]
    break;
 800c95e:	e008      	b.n	800c972 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c960:	2301      	movs	r3, #1
 800c962:	73fb      	strb	r3, [r7, #15]
    break;
 800c964:	e005      	b.n	800c972 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c966:	2303      	movs	r3, #3
 800c968:	73fb      	strb	r3, [r7, #15]
    break;
 800c96a:	e002      	b.n	800c972 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c96c:	2303      	movs	r3, #3
 800c96e:	73fb      	strb	r3, [r7, #15]
    break;
 800c970:	bf00      	nop
  }
  return usb_status;
 800c972:	7bfb      	ldrb	r3, [r7, #15]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c98e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c994:	2b00      	cmp	r3, #0
 800c996:	da0c      	bge.n	800c9b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c998:	78fb      	ldrb	r3, [r7, #3]
 800c99a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c99e:	68f9      	ldr	r1, [r7, #12]
 800c9a0:	1c5a      	adds	r2, r3, #1
 800c9a2:	4613      	mov	r3, r2
 800c9a4:	009b      	lsls	r3, r3, #2
 800c9a6:	4413      	add	r3, r2
 800c9a8:	00db      	lsls	r3, r3, #3
 800c9aa:	440b      	add	r3, r1
 800c9ac:	3302      	adds	r3, #2
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	e00b      	b.n	800c9ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c9b8:	68f9      	ldr	r1, [r7, #12]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	00db      	lsls	r3, r3, #3
 800c9c2:	440b      	add	r3, r1
 800c9c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c9c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr
	...

0800c9d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9f2:	78fa      	ldrb	r2, [r7, #3]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f9 f93f 	bl	8005c7a <HAL_PCD_SetAddress>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d816      	bhi.n	800ca34 <USBD_LL_SetUSBAddress+0x5c>
 800ca06:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <USBD_LL_SetUSBAddress+0x34>)
 800ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0c:	0800ca1d 	.word	0x0800ca1d
 800ca10:	0800ca23 	.word	0x0800ca23
 800ca14:	0800ca29 	.word	0x0800ca29
 800ca18:	0800ca2f 	.word	0x0800ca2f
    case HAL_OK :
      usb_status = USBD_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca20:	e00b      	b.n	800ca3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca22:	2303      	movs	r3, #3
 800ca24:	73fb      	strb	r3, [r7, #15]
    break;
 800ca26:	e008      	b.n	800ca3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca2c:	e005      	b.n	800ca3a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca2e:	2303      	movs	r3, #3
 800ca30:	73fb      	strb	r3, [r7, #15]
    break;
 800ca32:	e002      	b.n	800ca3a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800ca34:	2303      	movs	r3, #3
 800ca36:	73fb      	strb	r3, [r7, #15]
    break;
 800ca38:	bf00      	nop
  }
  return usb_status;
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	607a      	str	r2, [r7, #4]
 800ca4e:	603b      	str	r3, [r7, #0]
 800ca50:	460b      	mov	r3, r1
 800ca52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca62:	7af9      	ldrb	r1, [r7, #11]
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	f7f9 fa2f 	bl	8005eca <HAL_PCD_EP_Transmit>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ca70:	7dbb      	ldrb	r3, [r7, #22]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d816      	bhi.n	800caa4 <USBD_LL_Transmit+0x60>
 800ca76:	a201      	add	r2, pc, #4	; (adr r2, 800ca7c <USBD_LL_Transmit+0x38>)
 800ca78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca7c:	0800ca8d 	.word	0x0800ca8d
 800ca80:	0800ca93 	.word	0x0800ca93
 800ca84:	0800ca99 	.word	0x0800ca99
 800ca88:	0800ca9f 	.word	0x0800ca9f
    case HAL_OK :
      usb_status = USBD_OK;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	75fb      	strb	r3, [r7, #23]
    break;
 800ca90:	e00b      	b.n	800caaa <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca92:	2303      	movs	r3, #3
 800ca94:	75fb      	strb	r3, [r7, #23]
    break;
 800ca96:	e008      	b.n	800caaa <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	75fb      	strb	r3, [r7, #23]
    break;
 800ca9c:	e005      	b.n	800caaa <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca9e:	2303      	movs	r3, #3
 800caa0:	75fb      	strb	r3, [r7, #23]
    break;
 800caa2:	e002      	b.n	800caaa <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800caa4:	2303      	movs	r3, #3
 800caa6:	75fb      	strb	r3, [r7, #23]
    break;
 800caa8:	bf00      	nop
  }
  return usb_status;
 800caaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3718      	adds	r7, #24
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b086      	sub	sp, #24
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	607a      	str	r2, [r7, #4]
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	460b      	mov	r3, r1
 800cac2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cac4:	2300      	movs	r3, #0
 800cac6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cad2:	7af9      	ldrb	r1, [r7, #11]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	f7f9 f9a2 	bl	8005e20 <HAL_PCD_EP_Receive>
 800cadc:	4603      	mov	r3, r0
 800cade:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800cae0:	7dbb      	ldrb	r3, [r7, #22]
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d816      	bhi.n	800cb14 <USBD_LL_PrepareReceive+0x60>
 800cae6:	a201      	add	r2, pc, #4	; (adr r2, 800caec <USBD_LL_PrepareReceive+0x38>)
 800cae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caec:	0800cafd 	.word	0x0800cafd
 800caf0:	0800cb03 	.word	0x0800cb03
 800caf4:	0800cb09 	.word	0x0800cb09
 800caf8:	0800cb0f 	.word	0x0800cb0f
    case HAL_OK :
      usb_status = USBD_OK;
 800cafc:	2300      	movs	r3, #0
 800cafe:	75fb      	strb	r3, [r7, #23]
    break;
 800cb00:	e00b      	b.n	800cb1a <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cb02:	2303      	movs	r3, #3
 800cb04:	75fb      	strb	r3, [r7, #23]
    break;
 800cb06:	e008      	b.n	800cb1a <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	75fb      	strb	r3, [r7, #23]
    break;
 800cb0c:	e005      	b.n	800cb1a <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	75fb      	strb	r3, [r7, #23]
    break;
 800cb12:	e002      	b.n	800cb1a <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800cb14:	2303      	movs	r3, #3
 800cb16:	75fb      	strb	r3, [r7, #23]
    break;
 800cb18:	bf00      	nop
  }
  return usb_status;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3718      	adds	r7, #24
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f9 f9ad 	bl	8005e9a <HAL_PCD_EP_GetRxCount>
 800cb40:	4603      	mov	r3, r0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3708      	adds	r7, #8
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}
	...

0800cb4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cb58:	78fb      	ldrb	r3, [r7, #3]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <HAL_PCDEx_LPM_Callback+0x18>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d013      	beq.n	800cb8a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cb62:	e023      	b.n	800cbac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	699b      	ldr	r3, [r3, #24]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cb6c:	f000 f824 	bl	800cbb8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb70:	4b10      	ldr	r3, [pc, #64]	; (800cbb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	4a0f      	ldr	r2, [pc, #60]	; (800cbb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cb76:	f023 0306 	bic.w	r3, r3, #6
 800cb7a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fc04 	bl	800b390 <USBD_LL_Resume>
    break;
 800cb88:	e010      	b.n	800cbac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fe fbe8 	bl	800b366 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cba0:	691b      	ldr	r3, [r3, #16]
 800cba2:	4a04      	ldr	r2, [pc, #16]	; (800cbb4 <HAL_PCDEx_LPM_Callback+0x68>)
 800cba4:	f043 0306 	orr.w	r3, r3, #6
 800cba8:	6113      	str	r3, [r2, #16]
    break;
 800cbaa:	bf00      	nop
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	e000ed00 	.word	0xe000ed00

0800cbb8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800cbbc:	bf00      	nop
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <_Znwj>:
 800cbc6:	b510      	push	{r4, lr}
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	bf14      	ite	ne
 800cbcc:	4604      	movne	r4, r0
 800cbce:	2401      	moveq	r4, #1
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f000 f905 	bl	800cde0 <malloc>
 800cbd6:	b930      	cbnz	r0, 800cbe6 <_Znwj+0x20>
 800cbd8:	f000 f806 	bl	800cbe8 <_ZSt15get_new_handlerv>
 800cbdc:	b908      	cbnz	r0, 800cbe2 <_Znwj+0x1c>
 800cbde:	f000 f8cd 	bl	800cd7c <abort>
 800cbe2:	4780      	blx	r0
 800cbe4:	e7f4      	b.n	800cbd0 <_Znwj+0xa>
 800cbe6:	bd10      	pop	{r4, pc}

0800cbe8 <_ZSt15get_new_handlerv>:
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <_ZSt15get_new_handlerv+0xc>)
 800cbea:	6818      	ldr	r0, [r3, #0]
 800cbec:	f3bf 8f5b 	dmb	ish
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20000334 	.word	0x20000334

0800cbf8 <_ZNSaIcEC1Ev>:
 800cbf8:	4770      	bx	lr

0800cbfa <_ZNSaIcED1Ev>:
 800cbfa:	4770      	bx	lr

0800cbfc <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800cbfc:	b10a      	cbz	r2, 800cc02 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800cbfe:	f000 b8ff 	b.w	800ce00 <memcpy>
 800cc02:	4770      	bx	lr

0800cc04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800cc04:	b508      	push	{r3, lr}
 800cc06:	680b      	ldr	r3, [r1, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	da02      	bge.n	800cc12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800cc0c:	4809      	ldr	r0, [pc, #36]	; (800cc34 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800cc0e:	f000 f8b2 	bl	800cd76 <_ZSt20__throw_length_errorPKc>
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d908      	bls.n	800cc28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800cc16:	0052      	lsls	r2, r2, #1
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d205      	bcs.n	800cc28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	bfb6      	itet	lt
 800cc20:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800cc24:	600a      	strge	r2, [r1, #0]
 800cc26:	600b      	strlt	r3, [r1, #0]
 800cc28:	6808      	ldr	r0, [r1, #0]
 800cc2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800cc2e:	3001      	adds	r0, #1
 800cc30:	f7ff bfc9 	b.w	800cbc6 <_Znwj>
 800cc34:	0800d156 	.word	0x0800d156

0800cc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800cc38:	4603      	mov	r3, r0
 800cc3a:	f853 0b08 	ldr.w	r0, [r3], #8
 800cc3e:	4298      	cmp	r0, r3
 800cc40:	d001      	beq.n	800cc46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800cc42:	f000 b893 	b.w	800cd6c <_ZdlPv>
 800cc46:	4770      	bx	lr

0800cc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800cc48:	2a01      	cmp	r2, #1
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	d102      	bne.n	800cc54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800cc4e:	780a      	ldrb	r2, [r1, #0]
 800cc50:	7002      	strb	r2, [r0, #0]
 800cc52:	bd10      	pop	{r4, pc}
 800cc54:	f7ff ffd2 	bl	800cbfc <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800cc58:	e7fb      	b.n	800cc52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800cc5a:	b508      	push	{r3, lr}
 800cc5c:	1a52      	subs	r2, r2, r1
 800cc5e:	f7ff fff3 	bl	800cc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800cc62:	bd08      	pop	{r3, pc}

0800cc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800cc64:	b508      	push	{r3, lr}
 800cc66:	1a52      	subs	r2, r2, r1
 800cc68:	f7ff ffee 	bl	800cc48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800cc6c:	bd08      	pop	{r3, pc}

0800cc6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800cc6e:	f100 0208 	add.w	r2, r0, #8
 800cc72:	6002      	str	r2, [r0, #0]
 800cc74:	2200      	movs	r2, #0
 800cc76:	6042      	str	r2, [r0, #4]
 800cc78:	7202      	strb	r2, [r0, #8]
 800cc7a:	4770      	bx	lr

0800cc7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	4604      	mov	r4, r0
 800cc80:	f7ff ffda 	bl	800cc38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800cc84:	4620      	mov	r0, r4
 800cc86:	bd10      	pop	{r4, pc}

0800cc88 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800cc88:	6840      	ldr	r0, [r0, #4]
 800cc8a:	4770      	bx	lr

0800cc8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800cc8c:	6800      	ldr	r0, [r0, #0]
 800cc8e:	4408      	add	r0, r1
 800cc90:	4770      	bx	lr
	...

0800cc94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800cc94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc96:	4604      	mov	r4, r0
 800cc98:	4616      	mov	r6, r2
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	b919      	cbnz	r1, 800cca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800cc9e:	b112      	cbz	r2, 800cca6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800cca0:	480d      	ldr	r0, [pc, #52]	; (800ccd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800cca2:	f000 f865 	bl	800cd70 <_ZSt19__throw_logic_errorPKc>
 800cca6:	1b73      	subs	r3, r6, r5
 800cca8:	2b0f      	cmp	r3, #15
 800ccaa:	9301      	str	r3, [sp, #4]
 800ccac:	d907      	bls.n	800ccbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800ccae:	2200      	movs	r2, #0
 800ccb0:	a901      	add	r1, sp, #4
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f7ff ffa6 	bl	800cc04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ccb8:	9b01      	ldr	r3, [sp, #4]
 800ccba:	6020      	str	r0, [r4, #0]
 800ccbc:	60a3      	str	r3, [r4, #8]
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	6820      	ldr	r0, [r4, #0]
 800ccc4:	f7ff ffc9 	bl	800cc5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800ccc8:	9b01      	ldr	r3, [sp, #4]
 800ccca:	6822      	ldr	r2, [r4, #0]
 800cccc:	6063      	str	r3, [r4, #4]
 800ccce:	2100      	movs	r1, #0
 800ccd0:	54d1      	strb	r1, [r2, r3]
 800ccd2:	b002      	add	sp, #8
 800ccd4:	bd70      	pop	{r4, r5, r6, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0800d12c 	.word	0x0800d12c

0800ccdc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800ccdc:	b510      	push	{r4, lr}
 800ccde:	f100 0208 	add.w	r2, r0, #8
 800cce2:	6002      	str	r2, [r0, #0]
 800cce4:	e9d1 1200 	ldrd	r1, r2, [r1]
 800cce8:	4604      	mov	r4, r0
 800ccea:	f04f 0300 	mov.w	r3, #0
 800ccee:	440a      	add	r2, r1
 800ccf0:	f7ff ffd0 	bl	800cc94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	bd10      	pop	{r4, pc}

0800ccf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ccf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	4616      	mov	r6, r2
 800ccfe:	460d      	mov	r5, r1
 800cd00:	b919      	cbnz	r1, 800cd0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800cd02:	b112      	cbz	r2, 800cd0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800cd04:	480d      	ldr	r0, [pc, #52]	; (800cd3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800cd06:	f000 f833 	bl	800cd70 <_ZSt19__throw_logic_errorPKc>
 800cd0a:	1b73      	subs	r3, r6, r5
 800cd0c:	2b0f      	cmp	r3, #15
 800cd0e:	9301      	str	r3, [sp, #4]
 800cd10:	d907      	bls.n	800cd22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800cd12:	2200      	movs	r2, #0
 800cd14:	a901      	add	r1, sp, #4
 800cd16:	4620      	mov	r0, r4
 800cd18:	f7ff ff74 	bl	800cc04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800cd1c:	9b01      	ldr	r3, [sp, #4]
 800cd1e:	6020      	str	r0, [r4, #0]
 800cd20:	60a3      	str	r3, [r4, #8]
 800cd22:	4632      	mov	r2, r6
 800cd24:	4629      	mov	r1, r5
 800cd26:	6820      	ldr	r0, [r4, #0]
 800cd28:	f7ff ff9c 	bl	800cc64 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800cd2c:	9b01      	ldr	r3, [sp, #4]
 800cd2e:	6822      	ldr	r2, [r4, #0]
 800cd30:	6063      	str	r3, [r4, #4]
 800cd32:	2100      	movs	r1, #0
 800cd34:	54d1      	strb	r1, [r2, r3]
 800cd36:	b002      	add	sp, #8
 800cd38:	bd70      	pop	{r4, r5, r6, pc}
 800cd3a:	bf00      	nop
 800cd3c:	0800d12c 	.word	0x0800d12c

0800cd40 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800cd40:	b538      	push	{r3, r4, r5, lr}
 800cd42:	f100 0308 	add.w	r3, r0, #8
 800cd46:	4604      	mov	r4, r0
 800cd48:	6003      	str	r3, [r0, #0]
 800cd4a:	460d      	mov	r5, r1
 800cd4c:	b159      	cbz	r1, 800cd66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800cd4e:	4608      	mov	r0, r1
 800cd50:	f7f3 fa3c 	bl	80001cc <strlen>
 800cd54:	182a      	adds	r2, r5, r0
 800cd56:	4620      	mov	r0, r4
 800cd58:	f04f 0300 	mov.w	r3, #0
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7ff ffcb 	bl	800ccf8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800cd62:	4620      	mov	r0, r4
 800cd64:	bd38      	pop	{r3, r4, r5, pc}
 800cd66:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6a:	e7f4      	b.n	800cd56 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800cd6c <_ZdlPv>:
 800cd6c:	f000 b840 	b.w	800cdf0 <free>

0800cd70 <_ZSt19__throw_logic_errorPKc>:
 800cd70:	b508      	push	{r3, lr}
 800cd72:	f000 f803 	bl	800cd7c <abort>

0800cd76 <_ZSt20__throw_length_errorPKc>:
 800cd76:	b508      	push	{r3, lr}
 800cd78:	f000 f800 	bl	800cd7c <abort>

0800cd7c <abort>:
 800cd7c:	b508      	push	{r3, lr}
 800cd7e:	2006      	movs	r0, #6
 800cd80:	f000 f932 	bl	800cfe8 <raise>
 800cd84:	2001      	movs	r0, #1
 800cd86:	f7f3 ff27 	bl	8000bd8 <_exit>
	...

0800cd8c <__errno>:
 800cd8c:	4b01      	ldr	r3, [pc, #4]	; (800cd94 <__errno+0x8>)
 800cd8e:	6818      	ldr	r0, [r3, #0]
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	20000190 	.word	0x20000190

0800cd98 <__libc_init_array>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4e0d      	ldr	r6, [pc, #52]	; (800cdd0 <__libc_init_array+0x38>)
 800cd9c:	4c0d      	ldr	r4, [pc, #52]	; (800cdd4 <__libc_init_array+0x3c>)
 800cd9e:	1ba4      	subs	r4, r4, r6
 800cda0:	10a4      	asrs	r4, r4, #2
 800cda2:	2500      	movs	r5, #0
 800cda4:	42a5      	cmp	r5, r4
 800cda6:	d109      	bne.n	800cdbc <__libc_init_array+0x24>
 800cda8:	4e0b      	ldr	r6, [pc, #44]	; (800cdd8 <__libc_init_array+0x40>)
 800cdaa:	4c0c      	ldr	r4, [pc, #48]	; (800cddc <__libc_init_array+0x44>)
 800cdac:	f000 f93a 	bl	800d024 <_init>
 800cdb0:	1ba4      	subs	r4, r4, r6
 800cdb2:	10a4      	asrs	r4, r4, #2
 800cdb4:	2500      	movs	r5, #0
 800cdb6:	42a5      	cmp	r5, r4
 800cdb8:	d105      	bne.n	800cdc6 <__libc_init_array+0x2e>
 800cdba:	bd70      	pop	{r4, r5, r6, pc}
 800cdbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cdc0:	4798      	blx	r3
 800cdc2:	3501      	adds	r5, #1
 800cdc4:	e7ee      	b.n	800cda4 <__libc_init_array+0xc>
 800cdc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cdca:	4798      	blx	r3
 800cdcc:	3501      	adds	r5, #1
 800cdce:	e7f2      	b.n	800cdb6 <__libc_init_array+0x1e>
 800cdd0:	0800d170 	.word	0x0800d170
 800cdd4:	0800d170 	.word	0x0800d170
 800cdd8:	0800d170 	.word	0x0800d170
 800cddc:	0800d178 	.word	0x0800d178

0800cde0 <malloc>:
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <malloc+0xc>)
 800cde2:	4601      	mov	r1, r0
 800cde4:	6818      	ldr	r0, [r3, #0]
 800cde6:	f000 b86d 	b.w	800cec4 <_malloc_r>
 800cdea:	bf00      	nop
 800cdec:	20000190 	.word	0x20000190

0800cdf0 <free>:
 800cdf0:	4b02      	ldr	r3, [pc, #8]	; (800cdfc <free+0xc>)
 800cdf2:	4601      	mov	r1, r0
 800cdf4:	6818      	ldr	r0, [r3, #0]
 800cdf6:	f000 b817 	b.w	800ce28 <_free_r>
 800cdfa:	bf00      	nop
 800cdfc:	20000190 	.word	0x20000190

0800ce00 <memcpy>:
 800ce00:	b510      	push	{r4, lr}
 800ce02:	1e43      	subs	r3, r0, #1
 800ce04:	440a      	add	r2, r1
 800ce06:	4291      	cmp	r1, r2
 800ce08:	d100      	bne.n	800ce0c <memcpy+0xc>
 800ce0a:	bd10      	pop	{r4, pc}
 800ce0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce14:	e7f7      	b.n	800ce06 <memcpy+0x6>

0800ce16 <memset>:
 800ce16:	4402      	add	r2, r0
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d100      	bne.n	800ce20 <memset+0xa>
 800ce1e:	4770      	bx	lr
 800ce20:	f803 1b01 	strb.w	r1, [r3], #1
 800ce24:	e7f9      	b.n	800ce1a <memset+0x4>
	...

0800ce28 <_free_r>:
 800ce28:	b538      	push	{r3, r4, r5, lr}
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	2900      	cmp	r1, #0
 800ce2e:	d045      	beq.n	800cebc <_free_r+0x94>
 800ce30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce34:	1f0c      	subs	r4, r1, #4
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	bfb8      	it	lt
 800ce3a:	18e4      	addlt	r4, r4, r3
 800ce3c:	f000 f8f0 	bl	800d020 <__malloc_lock>
 800ce40:	4a1f      	ldr	r2, [pc, #124]	; (800cec0 <_free_r+0x98>)
 800ce42:	6813      	ldr	r3, [r2, #0]
 800ce44:	4610      	mov	r0, r2
 800ce46:	b933      	cbnz	r3, 800ce56 <_free_r+0x2e>
 800ce48:	6063      	str	r3, [r4, #4]
 800ce4a:	6014      	str	r4, [r2, #0]
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce52:	f000 b8e6 	b.w	800d022 <__malloc_unlock>
 800ce56:	42a3      	cmp	r3, r4
 800ce58:	d90c      	bls.n	800ce74 <_free_r+0x4c>
 800ce5a:	6821      	ldr	r1, [r4, #0]
 800ce5c:	1862      	adds	r2, r4, r1
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	bf04      	itt	eq
 800ce62:	681a      	ldreq	r2, [r3, #0]
 800ce64:	685b      	ldreq	r3, [r3, #4]
 800ce66:	6063      	str	r3, [r4, #4]
 800ce68:	bf04      	itt	eq
 800ce6a:	1852      	addeq	r2, r2, r1
 800ce6c:	6022      	streq	r2, [r4, #0]
 800ce6e:	6004      	str	r4, [r0, #0]
 800ce70:	e7ec      	b.n	800ce4c <_free_r+0x24>
 800ce72:	4613      	mov	r3, r2
 800ce74:	685a      	ldr	r2, [r3, #4]
 800ce76:	b10a      	cbz	r2, 800ce7c <_free_r+0x54>
 800ce78:	42a2      	cmp	r2, r4
 800ce7a:	d9fa      	bls.n	800ce72 <_free_r+0x4a>
 800ce7c:	6819      	ldr	r1, [r3, #0]
 800ce7e:	1858      	adds	r0, r3, r1
 800ce80:	42a0      	cmp	r0, r4
 800ce82:	d10b      	bne.n	800ce9c <_free_r+0x74>
 800ce84:	6820      	ldr	r0, [r4, #0]
 800ce86:	4401      	add	r1, r0
 800ce88:	1858      	adds	r0, r3, r1
 800ce8a:	4282      	cmp	r2, r0
 800ce8c:	6019      	str	r1, [r3, #0]
 800ce8e:	d1dd      	bne.n	800ce4c <_free_r+0x24>
 800ce90:	6810      	ldr	r0, [r2, #0]
 800ce92:	6852      	ldr	r2, [r2, #4]
 800ce94:	605a      	str	r2, [r3, #4]
 800ce96:	4401      	add	r1, r0
 800ce98:	6019      	str	r1, [r3, #0]
 800ce9a:	e7d7      	b.n	800ce4c <_free_r+0x24>
 800ce9c:	d902      	bls.n	800cea4 <_free_r+0x7c>
 800ce9e:	230c      	movs	r3, #12
 800cea0:	602b      	str	r3, [r5, #0]
 800cea2:	e7d3      	b.n	800ce4c <_free_r+0x24>
 800cea4:	6820      	ldr	r0, [r4, #0]
 800cea6:	1821      	adds	r1, r4, r0
 800cea8:	428a      	cmp	r2, r1
 800ceaa:	bf04      	itt	eq
 800ceac:	6811      	ldreq	r1, [r2, #0]
 800ceae:	6852      	ldreq	r2, [r2, #4]
 800ceb0:	6062      	str	r2, [r4, #4]
 800ceb2:	bf04      	itt	eq
 800ceb4:	1809      	addeq	r1, r1, r0
 800ceb6:	6021      	streq	r1, [r4, #0]
 800ceb8:	605c      	str	r4, [r3, #4]
 800ceba:	e7c7      	b.n	800ce4c <_free_r+0x24>
 800cebc:	bd38      	pop	{r3, r4, r5, pc}
 800cebe:	bf00      	nop
 800cec0:	20000338 	.word	0x20000338

0800cec4 <_malloc_r>:
 800cec4:	b570      	push	{r4, r5, r6, lr}
 800cec6:	1ccd      	adds	r5, r1, #3
 800cec8:	f025 0503 	bic.w	r5, r5, #3
 800cecc:	3508      	adds	r5, #8
 800cece:	2d0c      	cmp	r5, #12
 800ced0:	bf38      	it	cc
 800ced2:	250c      	movcc	r5, #12
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	4606      	mov	r6, r0
 800ced8:	db01      	blt.n	800cede <_malloc_r+0x1a>
 800ceda:	42a9      	cmp	r1, r5
 800cedc:	d903      	bls.n	800cee6 <_malloc_r+0x22>
 800cede:	230c      	movs	r3, #12
 800cee0:	6033      	str	r3, [r6, #0]
 800cee2:	2000      	movs	r0, #0
 800cee4:	bd70      	pop	{r4, r5, r6, pc}
 800cee6:	f000 f89b 	bl	800d020 <__malloc_lock>
 800ceea:	4a21      	ldr	r2, [pc, #132]	; (800cf70 <_malloc_r+0xac>)
 800ceec:	6814      	ldr	r4, [r2, #0]
 800ceee:	4621      	mov	r1, r4
 800cef0:	b991      	cbnz	r1, 800cf18 <_malloc_r+0x54>
 800cef2:	4c20      	ldr	r4, [pc, #128]	; (800cf74 <_malloc_r+0xb0>)
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	b91b      	cbnz	r3, 800cf00 <_malloc_r+0x3c>
 800cef8:	4630      	mov	r0, r6
 800cefa:	f000 f83d 	bl	800cf78 <_sbrk_r>
 800cefe:	6020      	str	r0, [r4, #0]
 800cf00:	4629      	mov	r1, r5
 800cf02:	4630      	mov	r0, r6
 800cf04:	f000 f838 	bl	800cf78 <_sbrk_r>
 800cf08:	1c43      	adds	r3, r0, #1
 800cf0a:	d124      	bne.n	800cf56 <_malloc_r+0x92>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	6033      	str	r3, [r6, #0]
 800cf10:	4630      	mov	r0, r6
 800cf12:	f000 f886 	bl	800d022 <__malloc_unlock>
 800cf16:	e7e4      	b.n	800cee2 <_malloc_r+0x1e>
 800cf18:	680b      	ldr	r3, [r1, #0]
 800cf1a:	1b5b      	subs	r3, r3, r5
 800cf1c:	d418      	bmi.n	800cf50 <_malloc_r+0x8c>
 800cf1e:	2b0b      	cmp	r3, #11
 800cf20:	d90f      	bls.n	800cf42 <_malloc_r+0x7e>
 800cf22:	600b      	str	r3, [r1, #0]
 800cf24:	50cd      	str	r5, [r1, r3]
 800cf26:	18cc      	adds	r4, r1, r3
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f000 f87a 	bl	800d022 <__malloc_unlock>
 800cf2e:	f104 000b 	add.w	r0, r4, #11
 800cf32:	1d23      	adds	r3, r4, #4
 800cf34:	f020 0007 	bic.w	r0, r0, #7
 800cf38:	1ac3      	subs	r3, r0, r3
 800cf3a:	d0d3      	beq.n	800cee4 <_malloc_r+0x20>
 800cf3c:	425a      	negs	r2, r3
 800cf3e:	50e2      	str	r2, [r4, r3]
 800cf40:	e7d0      	b.n	800cee4 <_malloc_r+0x20>
 800cf42:	428c      	cmp	r4, r1
 800cf44:	684b      	ldr	r3, [r1, #4]
 800cf46:	bf16      	itet	ne
 800cf48:	6063      	strne	r3, [r4, #4]
 800cf4a:	6013      	streq	r3, [r2, #0]
 800cf4c:	460c      	movne	r4, r1
 800cf4e:	e7eb      	b.n	800cf28 <_malloc_r+0x64>
 800cf50:	460c      	mov	r4, r1
 800cf52:	6849      	ldr	r1, [r1, #4]
 800cf54:	e7cc      	b.n	800cef0 <_malloc_r+0x2c>
 800cf56:	1cc4      	adds	r4, r0, #3
 800cf58:	f024 0403 	bic.w	r4, r4, #3
 800cf5c:	42a0      	cmp	r0, r4
 800cf5e:	d005      	beq.n	800cf6c <_malloc_r+0xa8>
 800cf60:	1a21      	subs	r1, r4, r0
 800cf62:	4630      	mov	r0, r6
 800cf64:	f000 f808 	bl	800cf78 <_sbrk_r>
 800cf68:	3001      	adds	r0, #1
 800cf6a:	d0cf      	beq.n	800cf0c <_malloc_r+0x48>
 800cf6c:	6025      	str	r5, [r4, #0]
 800cf6e:	e7db      	b.n	800cf28 <_malloc_r+0x64>
 800cf70:	20000338 	.word	0x20000338
 800cf74:	2000033c 	.word	0x2000033c

0800cf78 <_sbrk_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4c06      	ldr	r4, [pc, #24]	; (800cf94 <_sbrk_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4605      	mov	r5, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	6023      	str	r3, [r4, #0]
 800cf84:	f7f3 fe32 	bl	8000bec <_sbrk>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_sbrk_r+0x1a>
 800cf8c:	6823      	ldr	r3, [r4, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_sbrk_r+0x1a>
 800cf90:	602b      	str	r3, [r5, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20001370 	.word	0x20001370

0800cf98 <_raise_r>:
 800cf98:	291f      	cmp	r1, #31
 800cf9a:	b538      	push	{r3, r4, r5, lr}
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	460d      	mov	r5, r1
 800cfa0:	d904      	bls.n	800cfac <_raise_r+0x14>
 800cfa2:	2316      	movs	r3, #22
 800cfa4:	6003      	str	r3, [r0, #0]
 800cfa6:	f04f 30ff 	mov.w	r0, #4294967295
 800cfaa:	bd38      	pop	{r3, r4, r5, pc}
 800cfac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cfae:	b112      	cbz	r2, 800cfb6 <_raise_r+0x1e>
 800cfb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfb4:	b94b      	cbnz	r3, 800cfca <_raise_r+0x32>
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f000 f830 	bl	800d01c <_getpid_r>
 800cfbc:	462a      	mov	r2, r5
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfc6:	f000 b817 	b.w	800cff8 <_kill_r>
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d00a      	beq.n	800cfe4 <_raise_r+0x4c>
 800cfce:	1c59      	adds	r1, r3, #1
 800cfd0:	d103      	bne.n	800cfda <_raise_r+0x42>
 800cfd2:	2316      	movs	r3, #22
 800cfd4:	6003      	str	r3, [r0, #0]
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7e7      	b.n	800cfaa <_raise_r+0x12>
 800cfda:	2400      	movs	r4, #0
 800cfdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	4798      	blx	r3
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e7e0      	b.n	800cfaa <_raise_r+0x12>

0800cfe8 <raise>:
 800cfe8:	4b02      	ldr	r3, [pc, #8]	; (800cff4 <raise+0xc>)
 800cfea:	4601      	mov	r1, r0
 800cfec:	6818      	ldr	r0, [r3, #0]
 800cfee:	f7ff bfd3 	b.w	800cf98 <_raise_r>
 800cff2:	bf00      	nop
 800cff4:	20000190 	.word	0x20000190

0800cff8 <_kill_r>:
 800cff8:	b538      	push	{r3, r4, r5, lr}
 800cffa:	4c07      	ldr	r4, [pc, #28]	; (800d018 <_kill_r+0x20>)
 800cffc:	2300      	movs	r3, #0
 800cffe:	4605      	mov	r5, r0
 800d000:	4608      	mov	r0, r1
 800d002:	4611      	mov	r1, r2
 800d004:	6023      	str	r3, [r4, #0]
 800d006:	f7f3 fdd7 	bl	8000bb8 <_kill>
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	d102      	bne.n	800d014 <_kill_r+0x1c>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	b103      	cbz	r3, 800d014 <_kill_r+0x1c>
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	bd38      	pop	{r3, r4, r5, pc}
 800d016:	bf00      	nop
 800d018:	20001370 	.word	0x20001370

0800d01c <_getpid_r>:
 800d01c:	f7f3 bdc4 	b.w	8000ba8 <_getpid>

0800d020 <__malloc_lock>:
 800d020:	4770      	bx	lr

0800d022 <__malloc_unlock>:
 800d022:	4770      	bx	lr

0800d024 <_init>:
 800d024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d026:	bf00      	nop
 800d028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d02a:	bc08      	pop	{r3}
 800d02c:	469e      	mov	lr, r3
 800d02e:	4770      	bx	lr

0800d030 <_fini>:
 800d030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d032:	bf00      	nop
 800d034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d036:	bc08      	pop	{r3}
 800d038:	469e      	mov	lr, r3
 800d03a:	4770      	bx	lr
