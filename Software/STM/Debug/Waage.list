
Waage.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a59c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a818  0800a818  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a818  0800a818  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a818  0800a818  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a818  0800a818  0001a818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a820  0800a820  0001a820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800a824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001120  200001f4  0800aa18  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  0800aa18  00021314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000577e2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000896d  00000000  00000000  00077a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001aa8  00000000  00000000  00080378  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001800  00000000  00000000  00081e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027030  00000000  00000000  00083620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000245a1  00000000  00000000  000aa650  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b8618  00000000  00000000  000cebf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00187209  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c8  00000000  00000000  00187284  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001f4 	.word	0x200001f4
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800a710 	.word	0x0800a710

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f8 	.word	0x200001f8
 80001c8:	0800a710 	.word	0x0800a710

080001cc <strlen>:
 80001cc:	4603      	mov	r3, r0
 80001ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d2:	2a00      	cmp	r2, #0
 80001d4:	d1fb      	bne.n	80001ce <strlen+0x2>
 80001d6:	1a18      	subs	r0, r3, r0
 80001d8:	3801      	subs	r0, #1
 80001da:	4770      	bx	lr

080001dc <_ZN7AppMainC1Ev>:





AppMain::AppMain() {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3320      	adds	r3, #32
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fa5f 	bl	80016ac <_ZN5ModelC1Ev>
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3358      	adds	r3, #88	; 0x58
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 f97c 	bl	80014f0 <_ZN8LoadCellC1Ev>
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	336c      	adds	r3, #108	; 0x6c
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 f977 	bl	80014f0 <_ZN8LoadCellC1Ev>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3320      	adds	r3, #32
 800020c:	4619      	mov	r1, r3
 800020e:	4610      	mov	r0, r2
 8000210:	f002 fa42 	bl	8002698 <_ZN13ScreenControlC1EP5Model>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3320      	adds	r3, #32
 800021e:	4619      	mov	r1, r3
 8000220:	4610      	mov	r0, r2
 8000222:	f000 fc47 	bl	8000ab4 <_ZN13ButtonControlC1EP5Model>
	// TODO Auto-generated constructor stub
	lcSettings1.clkPort = CLK_L1_GPIO_Port;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a10      	ldr	r2, [pc, #64]	; (800026c <_ZN7AppMainC1Ev+0x90>)
 800022a:	601a      	str	r2, [r3, #0]
	lcSettings1.clkPin = CLK_L1_Pin;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2220      	movs	r2, #32
 8000230:	809a      	strh	r2, [r3, #4]
	lcSettings1.dataPort = DATA_L1_GPIO_Port;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <_ZN7AppMainC1Ev+0x90>)
 8000236:	609a      	str	r2, [r3, #8]
	lcSettings1.dataPin = DATA_L1_Pin;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2210      	movs	r2, #16
 800023c:	819a      	strh	r2, [r3, #12]
	lcSettings1.loadCellNr = 1;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2201      	movs	r2, #1
 8000242:	739a      	strb	r2, [r3, #14]

	lcSettings2.clkPort = CLK_L2_GPIO_Port;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a09      	ldr	r2, [pc, #36]	; (800026c <_ZN7AppMainC1Ev+0x90>)
 8000248:	611a      	str	r2, [r3, #16]
	lcSettings2.clkPin = CLK_L2_Pin;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	2280      	movs	r2, #128	; 0x80
 800024e:	829a      	strh	r2, [r3, #20]
	lcSettings2.dataPort = DATA_L2_GPIO_Port;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <_ZN7AppMainC1Ev+0x90>)
 8000254:	619a      	str	r2, [r3, #24]
	lcSettings2.dataPin = DATA_L2_Pin;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	2240      	movs	r2, #64	; 0x40
 800025a:	839a      	strh	r2, [r3, #28]
	lcSettings2.loadCellNr = 2;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2202      	movs	r2, #2
 8000260:	779a      	strb	r2, [r3, #30]


}
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	48000400 	.word	0x48000400

08000270 <_ZN7AppMain5mainFEv>:



uint32_t testCounter = 0;

void AppMain::mainF(){
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	ed2d 8b02 	vpush	{d8}
 8000276:	b087      	sub	sp, #28
 8000278:	af02      	add	r7, sp, #8
 800027a:	6078      	str	r0, [r7, #4]

	loadCell1.InitLoadCell(&model, lcSettings1);
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f103 0520 	add.w	r5, r3, #32
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	466e      	mov	r6, sp
 800028c:	f103 0208 	add.w	r2, r3, #8
 8000290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000294:	e886 0003 	stmia.w	r6, {r0, r1}
 8000298:	cb0c      	ldmia	r3, {r2, r3}
 800029a:	4629      	mov	r1, r5
 800029c:	4620      	mov	r0, r4
 800029e:	f001 f937 	bl	8001510 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	loadCell2.InitLoadCell(&model, lcSettings2);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f103 0520 	add.w	r5, r3, #32
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	466e      	mov	r6, sp
 80002b2:	f103 0218 	add.w	r2, r3, #24
 80002b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80002be:	3310      	adds	r3, #16
 80002c0:	cb0c      	ldmia	r3, {r2, r3}
 80002c2:	4629      	mov	r1, r5
 80002c4:	4620      	mov	r0, r4
 80002c6:	f001 f923 	bl	8001510 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>
	HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2140      	movs	r1, #64	; 0x40
 80002ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d2:	f002 fe41 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	2110      	movs	r1, #16
 80002da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002de:	f002 fe3b 	bl	8002f58 <HAL_GPIO_WritePin>
	screenControl.InitScreen();
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3380      	adds	r3, #128	; 0x80
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 fa26 	bl	8002738 <_ZN13ScreenControl10InitScreenEv>


	while(true){

		if(testCounter > 99999){
 80002ec:	4b3a      	ldr	r3, [pc, #232]	; (80003d8 <_ZN7AppMain5mainFEv+0x168>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <_ZN7AppMain5mainFEv+0x16c>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d958      	bls.n	80003a8 <_ZN7AppMain5mainFEv+0x138>
			testCounter = 0;
 80002f6:	4b38      	ldr	r3, [pc, #224]	; (80003d8 <_ZN7AppMain5mainFEv+0x168>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]

			loadCell2.Update();
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	336c      	adds	r3, #108	; 0x6c
 8000300:	4618      	mov	r0, r3
 8000302:	f001 f91f 	bl	8001544 <_ZN8LoadCell6UpdateEv>

			int32_t weight1 = (model.getLoadCell1()-model.getLoadCellOffset1()) /model.getLoadCellGradient1();
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3320      	adds	r3, #32
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fa44 	bl	8001798 <_ZNK5Model12getLoadCell1Ev>
 8000310:	4604      	mov	r4, r0
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3320      	adds	r3, #32
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fbe4 	bl	8001ae4 <_ZNK5Model18getLoadCellOffset1Ev>
 800031c:	4603      	mov	r3, r0
 800031e:	1ae3      	subs	r3, r4, r3
 8000320:	ee07 3a90 	vmov	s15, r3
 8000324:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	3320      	adds	r3, #32
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fba5 	bl	8001a7c <_ZNK5Model20getLoadCellGradient1Ev>
 8000332:	eeb0 7a40 	vmov.f32	s14, s0
 8000336:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800033a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800033e:	ee17 3a90 	vmov	r3, s15
 8000342:	60fb      	str	r3, [r7, #12]
			int32_t weight2 = (model.getLoadCell2()-model.getLoadCellOffset2()) /model.getLoadCellGradient2();
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	3320      	adds	r3, #32
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fa3f 	bl	80017cc <_ZNK5Model12getLoadCell2Ev>
 800034e:	4604      	mov	r4, r0
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3320      	adds	r3, #32
 8000354:	4618      	mov	r0, r3
 8000356:	f001 fbdf 	bl	8001b18 <_ZNK5Model18getLoadCellOffset2Ev>
 800035a:	4603      	mov	r3, r0
 800035c:	1ae3      	subs	r3, r4, r3
 800035e:	ee07 3a90 	vmov	s15, r3
 8000362:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3320      	adds	r3, #32
 800036a:	4618      	mov	r0, r3
 800036c:	f001 fba0 	bl	8001ab0 <_ZNK5Model20getLoadCellGradient2Ev>
 8000370:	eeb0 7a40 	vmov.f32	s14, s0
 8000374:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800037c:	ee17 3a90 	vmov	r3, s15
 8000380:	60bb      	str	r3, [r7, #8]

			model.setWeight(weight2);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	3320      	adds	r3, #32
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	b212      	sxth	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4618      	mov	r0, r3
 800038e:	f001 fa44 	bl	800181a <_ZN5Model9setWeightEs>

			buttonControl.UpdateButton();
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	339c      	adds	r3, #156	; 0x9c
 8000396:	4618      	mov	r0, r3
 8000398:	f000 fbaa 	bl	8000af0 <_ZN13ButtonControl12UpdateButtonEv>
			screenControl.Update();
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3380      	adds	r3, #128	; 0x80
 80003a0:	4618      	mov	r0, r3
 80003a2:	f002 fa33 	bl	800280c <_ZN13ScreenControl6UpdateEv>
 80003a6:	e004      	b.n	80003b2 <_ZN7AppMain5mainFEv+0x142>

		}else{
			testCounter++;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <_ZN7AppMain5mainFEv+0x168>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <_ZN7AppMain5mainFEv+0x168>)
 80003b0:	6013      	str	r3, [r2, #0]
		}


		if(testCounter%5000 == 0){
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <_ZN7AppMain5mainFEv+0x168>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <_ZN7AppMain5mainFEv+0x170>)
 80003b8:	fba3 1302 	umull	r1, r3, r3, r2
 80003bc:	0b1b      	lsrs	r3, r3, #12
 80003be:	f241 3188 	movw	r1, #5000	; 0x1388
 80003c2:	fb01 f303 	mul.w	r3, r1, r3
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d18f      	bne.n	80002ec <_ZN7AppMain5mainFEv+0x7c>
			buttonControl.UpdateButton();
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	339c      	adds	r3, #156	; 0x9c
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 fb8d 	bl	8000af0 <_ZN13ButtonControl12UpdateButtonEv>
		}


	}
 80003d6:	e789      	b.n	80002ec <_ZN7AppMain5mainFEv+0x7c>
 80003d8:	20000210 	.word	0x20000210
 80003dc:	0001869f 	.word	0x0001869f
 80003e0:	d1b71759 	.word	0xd1b71759

080003e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08a      	sub	sp, #40	; 0x28
 80003e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 0314 	add.w	r3, r7, #20
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b56      	ldr	r3, [pc, #344]	; (8000554 <MX_GPIO_Init+0x170>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	4a55      	ldr	r2, [pc, #340]	; (8000554 <MX_GPIO_Init+0x170>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000406:	4b53      	ldr	r3, [pc, #332]	; (8000554 <MX_GPIO_Init+0x170>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	f003 0304 	and.w	r3, r3, #4
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000412:	4b50      	ldr	r3, [pc, #320]	; (8000554 <MX_GPIO_Init+0x170>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	4a4f      	ldr	r2, [pc, #316]	; (8000554 <MX_GPIO_Init+0x170>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041e:	4b4d      	ldr	r3, [pc, #308]	; (8000554 <MX_GPIO_Init+0x170>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f003 0301 	and.w	r3, r3, #1
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b4a      	ldr	r3, [pc, #296]	; (8000554 <MX_GPIO_Init+0x170>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	4a49      	ldr	r2, [pc, #292]	; (8000554 <MX_GPIO_Init+0x170>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000436:	4b47      	ldr	r3, [pc, #284]	; (8000554 <MX_GPIO_Init+0x170>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000442:	4b44      	ldr	r3, [pc, #272]	; (8000554 <MX_GPIO_Init+0x170>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a43      	ldr	r2, [pc, #268]	; (8000554 <MX_GPIO_Init+0x170>)
 8000448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b41      	ldr	r3, [pc, #260]	; (8000554 <MX_GPIO_Init+0x170>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000460:	483d      	ldr	r0, [pc, #244]	; (8000558 <MX_GPIO_Init+0x174>)
 8000462:	f002 fd79 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 8000466:	2200      	movs	r2, #0
 8000468:	f248 0157 	movw	r1, #32855	; 0x8057
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f002 fd72 	bl	8002f58 <HAL_GPIO_WritePin>
                          |LED_PW_Pin|DB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	21a9      	movs	r1, #169	; 0xa9
 8000478:	4838      	ldr	r0, [pc, #224]	; (800055c <MX_GPIO_Init+0x178>)
 800047a:	f002 fd6d 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2108      	movs	r1, #8
 8000482:	4837      	ldr	r0, [pc, #220]	; (8000560 <MX_GPIO_Init+0x17c>)
 8000484:	f002 fd68 	bl	8002f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000488:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800048c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048e:	2301      	movs	r3, #1
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	482d      	ldr	r0, [pc, #180]	; (8000558 <MX_GPIO_Init+0x174>)
 80004a2:	f002 fbcf 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|DB0_Pin|DB1_Pin|LED_BW_Pin
 80004a6:	f248 0357 	movw	r3, #32855	; 0x8057
 80004aa:	617b      	str	r3, [r7, #20]
                          |LED_PW_Pin|DB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ac:	2301      	movs	r3, #1
 80004ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b4:	2300      	movs	r3, #0
 80004b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	f107 0314 	add.w	r3, r7, #20
 80004bc:	4619      	mov	r1, r3
 80004be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c2:	f002 fbbf 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW_BW_Pin|SW_PW_Pin|SW_SUM_Pin|SW_TAR_Pin;
 80004c6:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0314 	add.w	r3, r7, #20
 80004d8:	4619      	mov	r1, r3
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f002 fbb1 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_SUM_Pin|LCD_LIGHT_Pin|CLK_L1_Pin|CLK_L2_Pin;
 80004e2:	23a9      	movs	r3, #169	; 0xa9
 80004e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e6:	2301      	movs	r3, #1
 80004e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ee:	2300      	movs	r3, #0
 80004f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	4619      	mov	r1, r3
 80004f8:	4818      	ldr	r0, [pc, #96]	; (800055c <MX_GPIO_Init+0x178>)
 80004fa:	f002 fba3 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_TOTAL_Pin;
 80004fe:	2302      	movs	r3, #2
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_TOTAL_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	4619      	mov	r1, r3
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <MX_GPIO_Init+0x178>)
 8000512:	f002 fb97 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DATA_L1_Pin|DATA_L2_Pin;
 8000516:	2350      	movs	r3, #80	; 0x50
 8000518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051a:	2300      	movs	r3, #0
 800051c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000522:	f107 0314 	add.w	r3, r7, #20
 8000526:	4619      	mov	r1, r3
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <MX_GPIO_Init+0x178>)
 800052a:	f002 fb8b 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DB2_Pin;
 800052e:	2308      	movs	r3, #8
 8000530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2300      	movs	r3, #0
 800053c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DB2_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	4806      	ldr	r0, [pc, #24]	; (8000560 <MX_GPIO_Init+0x17c>)
 8000546:	f002 fb7d 	bl	8002c44 <HAL_GPIO_Init>

}
 800054a:	bf00      	nop
 800054c:	3728      	adds	r7, #40	; 0x28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000
 8000558:	48000800 	.word	0x48000800
 800055c:	48000400 	.word	0x48000400
 8000560:	48001c00 	.word	0x48001c00

08000564 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_I2C1_Init+0x74>)
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <MX_I2C1_Init+0x78>)
 800056c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800056e:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <MX_I2C1_Init+0x74>)
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <MX_I2C1_Init+0x7c>)
 8000572:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <MX_I2C1_Init+0x74>)
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_I2C1_Init+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_I2C1_Init+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <MX_I2C1_Init+0x74>)
 80005a0:	f002 fcf2 	bl	8002f88 <HAL_I2C_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005aa:	f000 f8ff 	bl	80007ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <MX_I2C1_Init+0x74>)
 80005b2:	f002 fd78 	bl	80030a6 <HAL_I2CEx_ConfigAnalogFilter>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005bc:	f000 f8f6 	bl	80007ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_I2C1_Init+0x74>)
 80005c4:	f002 fdba 	bl	800313c <HAL_I2CEx_ConfigDigitalFilter>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005ce:	f000 f8ed 	bl	80007ac <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002e0 	.word	0x200002e0
 80005dc:	40005400 	.word	0x40005400
 80005e0:	10909cec 	.word	0x10909cec

080005e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a18      	ldr	r2, [pc, #96]	; (8000664 <HAL_I2C_MspInit+0x80>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d129      	bne.n	800065a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b18      	ldr	r3, [pc, #96]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <HAL_I2C_MspInit+0x84>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800061e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000624:	2312      	movs	r3, #18
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000630:	2304      	movs	r3, #4
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063e:	f002 fb01 	bl	8002c44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800064c:	6593      	str	r3, [r2, #88]	; 0x58
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800065a:	bf00      	nop
 800065c:	3728      	adds	r7, #40	; 0x28
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40005400 	.word	0x40005400
 8000668:	40021000 	.word	0x40021000

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f002 f93f 	bl	80028f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f814 	bl	80006a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f7ff feb4 	bl	80003e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800067c:	f7ff ff72 	bl	8000564 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000680:	f009 f898 	bl	80097b4 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000684:	f000 f9a2 	bl	80009cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_MspInit(&hi2c1);
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <main+0x2c>)
 800068a:	f7ff ffab 	bl	80005e4 <HAL_I2C_MspInit>

  appMain.mainF();
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <main+0x30>)
 8000690:	f7ff fdee 	bl	8000270 <_ZN7AppMain5mainFEv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x28>
 8000696:	bf00      	nop
 8000698:	200002e0 	.word	0x200002e0
 800069c:	20000214 	.word	0x20000214

080006a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0a4      	sub	sp, #144	; 0x90
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006aa:	2244      	movs	r2, #68	; 0x44
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f009 ff27 	bl	800a502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 ff19 	bl	800a502 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d4:	f004 f922 	bl	800491c <HAL_PWREx_ControlVoltageScaling>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bf14      	ite	ne
 80006de:	2301      	movne	r3, #1
 80006e0:	2300      	moveq	r3, #0
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <_Z18SystemClock_Configv+0x4c>
  {
    Error_Handler();
 80006e8:	f000 f860 	bl	80007ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80006ec:	2312      	movs	r3, #18
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f6:	2340      	movs	r3, #64	; 0x40
 80006f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000702:	23b0      	movs	r3, #176	; 0xb0
 8000704:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070e:	2301      	movs	r3, #1
 8000710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000714:	230a      	movs	r3, #10
 8000716:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f95c 	bl	80049e8 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000740:	f000 f834 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2303      	movs	r3, #3
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fda8 	bl	80052b4 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	bf14      	ite	ne
 800076a:	2301      	movne	r3, #1
 800076c:	2300      	moveq	r3, #0
 800076e:	b2db      	uxtb	r3, r3
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000774:	f000 f81a 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
 8000778:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8000782:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	4618      	mov	r0, r3
 800078c:	f004 ff6a 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf14      	ite	ne
 8000796:	2301      	movne	r3, #1
 8000798:	2300      	moveq	r3, #0
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80007a0:	f000 f804 	bl	80007ac <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3790      	adds	r7, #144	; 0x90
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <_Z41__static_initialization_and_destruction_0ii>:
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d107      	bne.n	80007dc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d102      	bne.n	80007dc <_Z41__static_initialization_and_destruction_0ii+0x20>
AppMain appMain = AppMain();
 80007d6:	4803      	ldr	r0, [pc, #12]	; (80007e4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80007d8:	f7ff fd00 	bl	80001dc <_ZN7AppMainC1Ev>
}
 80007dc:	bf00      	nop
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000214 	.word	0x20000214

080007e8 <_GLOBAL__sub_I_appMain>:
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80007f0:	2001      	movs	r0, #1
 80007f2:	f7ff ffe3 	bl	80007bc <_Z41__static_initialization_and_destruction_0ii>
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_MspInit+0x44>)
 8000800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_MspInit+0x44>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6613      	str	r3, [r2, #96]	; 0x60
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_MspInit+0x44>)
 800080c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x44>)
 8000818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x44>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6593      	str	r3, [r2, #88]	; 0x58
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x44>)
 8000824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40021000 	.word	0x40021000

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <HardFault_Handler+0x4>

08000854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <MemManage_Handler+0x4>

0800085a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <BusFault_Handler+0x4>

08000860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <UsageFault_Handler+0x4>

08000866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f002 f882 	bl	800299c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <USB_IRQHandler+0x10>)
 80008a2:	f002 fdcb 	bl	800343c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000101c 	.word	0x2000101c

080008b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
	return 1;
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <_kill>:

int _kill(int pid, int sig)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80008ca:	f009 fdd5 	bl	800a478 <__errno>
 80008ce:	4602      	mov	r2, r0
 80008d0:	2316      	movs	r3, #22
 80008d2:	6013      	str	r3, [r2, #0]
	return -1;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_exit>:

void _exit (int status)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80008e8:	f04f 31ff 	mov.w	r1, #4294967295
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ffe7 	bl	80008c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80008f2:	e7fe      	b.n	80008f2 <_exit+0x12>

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f009 fda8 	bl	800a478 <__errno>
 8000928:	4602      	mov	r2, r0
 800092a:	230c      	movs	r3, #12
 800092c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000a000 	.word	0x2000a000
 8000954:	00000400 	.word	0x00000400
 8000958:	200002c0 	.word	0x200002c0
 800095c:	20001318 	.word	0x20001318

08000960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <SystemInit+0x64>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <SystemInit+0x64>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <SystemInit+0x68>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <SystemInit+0x68>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <SystemInit+0x68>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <SystemInit+0x68>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <SystemInit+0x68>)
 800098c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000990:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000994:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <SystemInit+0x68>)
 8000998:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800099c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <SystemInit+0x68>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a09      	ldr	r2, [pc, #36]	; (80009c8 <SystemInit+0x68>)
 80009a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <SystemInit+0x68>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b0:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SystemInit+0x64>)
 80009b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009b6:	609a      	str	r2, [r3, #8]
#endif
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00
 80009c8:	40021000 	.word	0x40021000

080009cc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_TIM1_Init+0xa0>)
 80009ec:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <MX_TIM1_Init+0xa4>)
 80009ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <MX_TIM1_Init+0xa0>)
 80009f2:	2210      	movs	r2, #16
 80009f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <MX_TIM1_Init+0xa0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_TIM1_Init+0xa0>)
 80009fe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a18:	f004 ffaa 	bl	8005970 <HAL_TIM_Base_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a22:	f7ff fec3 	bl	80007ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4619      	mov	r1, r3
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a34:	f004 fff3 	bl	8005a1e <HAL_TIM_ConfigClockSource>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a3e:	f7ff feb5 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_TIM1_Init+0xa0>)
 8000a54:	f005 f99a 	bl	8005d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a5e:	f7ff fea5 	bl	80007ac <Error_Handler>
  }

}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000032c 	.word	0x2000032c
 8000a70:	40012c00 	.word	0x40012c00

08000a74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <HAL_TIM_Base_MspInit+0x38>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d10b      	bne.n	8000a9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a90:	6613      	str	r3, [r2, #96]	; 0x60
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_TIM_Base_MspInit+0x3c>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <_ZN13ButtonControlC1EP5Model>:
 */

#include "ButtonControl.h"
#include "main.h"

ButtonControl::ButtonControl(Model *model) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	// TODO Auto-generated constructor stub
	T1last = false;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
	T2last = false;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	705a      	strb	r2, [r3, #1]
	T3last = false;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	709a      	strb	r2, [r3, #2]
	T4last = false;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	70da      	strb	r2, [r3, #3]
	T5last = false;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	711a      	strb	r2, [r3, #4]
	this->model = model;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	683a      	ldr	r2, [r7, #0]
 8000ae0:	60da      	str	r2, [r3, #12]
}
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_ZN13ButtonControl12UpdateButtonEv>:
 * Udate Butteon control
 * call every 10ms
 *
 *
 */
void ButtonControl::UpdateButton() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

//---------------------SW1---------------------
	if (READ_SW_BW) {
 8000af8:	2108      	movs	r1, #8
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afe:	f002 fa13 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d005      	beq.n	8000b1e <_ZN13ButtonControl12UpdateButtonEv+0x2e>
		T1Counter++;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	795b      	ldrb	r3, [r3, #5]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	795b      	ldrb	r3, [r3, #5]
			&& !READ_SW_BW) {
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d90d      	bls.n	8000b42 <_ZN13ButtonControl12UpdateButtonEv+0x52>
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	795b      	ldrb	r3, [r3, #5]
 8000b2a:	2b63      	cmp	r3, #99	; 0x63
 8000b2c:	d809      	bhi.n	8000b42 <_ZN13ButtonControl12UpdateButtonEv+0x52>
			&& !READ_SW_BW) {
 8000b2e:	2108      	movs	r1, #8
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f002 f9f8 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <_ZN13ButtonControl12UpdateButtonEv+0x52>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <_ZN13ButtonControl12UpdateButtonEv+0x54>
 8000b42:	2300      	movs	r3, #0
	if (T1Counter > SHORT_BUTTON_TIME && T1Counter < LONG_BUTTON_TIME
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <_ZN13ButtonControl12UpdateButtonEv+0x6a>
		model->setT1Short(true);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fe9c 	bl	800188c <_ZN5Model10setT1ShortEb>
		T1Counter = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	715a      	strb	r2, [r3, #5]
	}

	if (T1Counter > LONG_BUTTON_TIME && !T1last) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	795b      	ldrb	r3, [r3, #5]
 8000b5e:	2b64      	cmp	r3, #100	; 0x64
 8000b60:	d90f      	bls.n	8000b82 <_ZN13ButtonControl12UpdateButtonEv+0x92>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d008      	beq.n	8000b82 <_ZN13ButtonControl12UpdateButtonEv+0x92>
		model->setT1Long(true);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 fe6b 	bl	8001852 <_ZN5Model9setT1LongEb>
		T1last = true;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
	}

	if (!READ_SW_BW) {
 8000b82:	2108      	movs	r1, #8
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f002 f9ce 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf0c      	ite	eq
 8000b92:	2301      	moveq	r3, #1
 8000b94:	2300      	movne	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d005      	beq.n	8000ba8 <_ZN13ButtonControl12UpdateButtonEv+0xb8>
		T1last = false;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
		T1Counter = 0;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	715a      	strb	r2, [r3, #5]
	}

	//---------------------SW2---------------------
	if (READ_SW_PW) {
 8000ba8:	2120      	movs	r1, #32
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f002 f9bb 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d005      	beq.n	8000bce <_ZN13ButtonControl12UpdateButtonEv+0xde>
		T2Counter++;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	799b      	ldrb	r3, [r3, #6]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	799b      	ldrb	r3, [r3, #6]
			&& !READ_SW_PW) {
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d90d      	bls.n	8000bf2 <_ZN13ButtonControl12UpdateButtonEv+0x102>
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	799b      	ldrb	r3, [r3, #6]
 8000bda:	2b63      	cmp	r3, #99	; 0x63
 8000bdc:	d809      	bhi.n	8000bf2 <_ZN13ButtonControl12UpdateButtonEv+0x102>
			&& !READ_SW_PW) {
 8000bde:	2120      	movs	r1, #32
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f002 f9a0 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <_ZN13ButtonControl12UpdateButtonEv+0x102>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <_ZN13ButtonControl12UpdateButtonEv+0x104>
 8000bf2:	2300      	movs	r3, #0
	if (T2Counter > SHORT_BUTTON_TIME && T2Counter < LONG_BUTTON_TIME
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d008      	beq.n	8000c0a <_ZN13ButtonControl12UpdateButtonEv+0x11a>
		model->setT2Short(true);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fe7e 	bl	8001900 <_ZN5Model10setT2ShortEb>
		T2Counter = 0;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	719a      	strb	r2, [r3, #6]
	}

	if (T2Counter > LONG_BUTTON_TIME && !T2last) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	799b      	ldrb	r3, [r3, #6]
 8000c0e:	2b64      	cmp	r3, #100	; 0x64
 8000c10:	d90f      	bls.n	8000c32 <_ZN13ButtonControl12UpdateButtonEv+0x142>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	f083 0301 	eor.w	r3, r3, #1
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d008      	beq.n	8000c32 <_ZN13ButtonControl12UpdateButtonEv+0x142>
		model->setT2Long(true);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	2101      	movs	r1, #1
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fe4d 	bl	80018c6 <_ZN5Model9setT2LongEb>
		T2last = true;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	705a      	strb	r2, [r3, #1]
	}

	if (!READ_SW_PW) {
 8000c32:	2120      	movs	r1, #32
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f002 f976 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	bf0c      	ite	eq
 8000c42:	2301      	moveq	r3, #1
 8000c44:	2300      	movne	r3, #0
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <_ZN13ButtonControl12UpdateButtonEv+0x168>
		T2last = false;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	705a      	strb	r2, [r3, #1]
		T2Counter = 0;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	719a      	strb	r2, [r3, #6]
	}

	//---------------------SW3---------------------
	if (READ_SW_SUM) {
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f002 f963 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bf14      	ite	ne
 8000c68:	2301      	movne	r3, #1
 8000c6a:	2300      	moveq	r3, #0
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <_ZN13ButtonControl12UpdateButtonEv+0x18e>
		T3Counter++;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	79db      	ldrb	r3, [r3, #7]
 8000c76:	3301      	adds	r3, #1
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	79db      	ldrb	r3, [r3, #7]
			&& !READ_SW_SUM) {
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d90d      	bls.n	8000ca2 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	79db      	ldrb	r3, [r3, #7]
 8000c8a:	2b63      	cmp	r3, #99	; 0x63
 8000c8c:	d809      	bhi.n	8000ca2 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
			&& !READ_SW_SUM) {
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f002 f948 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <_ZN13ButtonControl12UpdateButtonEv+0x1b2>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e000      	b.n	8000ca4 <_ZN13ButtonControl12UpdateButtonEv+0x1b4>
 8000ca2:	2300      	movs	r3, #0
	if (T3Counter > SHORT_BUTTON_TIME && T3Counter < LONG_BUTTON_TIME
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d008      	beq.n	8000cba <_ZN13ButtonControl12UpdateButtonEv+0x1ca>
		model->setT3Short(true);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	2101      	movs	r1, #1
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fe60 	bl	8001974 <_ZN5Model10setT3ShortEb>
		T3Counter = 0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	71da      	strb	r2, [r3, #7]
	}

	if (T3Counter > LONG_BUTTON_TIME && !T3last) {
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	79db      	ldrb	r3, [r3, #7]
 8000cbe:	2b64      	cmp	r3, #100	; 0x64
 8000cc0:	d90f      	bls.n	8000ce2 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	789b      	ldrb	r3, [r3, #2]
 8000cc6:	f083 0301 	eor.w	r3, r3, #1
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d008      	beq.n	8000ce2 <_ZN13ButtonControl12UpdateButtonEv+0x1f2>
		model->setT3Long(true);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fe2f 	bl	800193a <_ZN5Model9setT3LongEb>
		T3last = true;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	709a      	strb	r2, [r3, #2]
	}

	if (!READ_SW_SUM) {
 8000ce2:	2180      	movs	r1, #128	; 0x80
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f002 f91e 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	bf0c      	ite	eq
 8000cf2:	2301      	moveq	r3, #1
 8000cf4:	2300      	movne	r3, #0
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <_ZN13ButtonControl12UpdateButtonEv+0x218>
		T3last = false;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	709a      	strb	r2, [r3, #2]
		T3Counter = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	71da      	strb	r2, [r3, #7]
	}

	//---------------------SW4---------------------
	if (READ_SW_TOTAL) {
 8000d08:	2102      	movs	r1, #2
 8000d0a:	4859      	ldr	r0, [pc, #356]	; (8000e70 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8000d0c:	f002 f90c 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2301      	movne	r3, #1
 8000d18:	2300      	moveq	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <_ZN13ButtonControl12UpdateButtonEv+0x23c>
		T4Counter++;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	7a1b      	ldrb	r3, [r3, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7a1b      	ldrb	r3, [r3, #8]
			&& !READ_SW_TOTAL) {
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d90c      	bls.n	8000d4e <_ZN13ButtonControl12UpdateButtonEv+0x25e>
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a1b      	ldrb	r3, [r3, #8]
 8000d38:	2b63      	cmp	r3, #99	; 0x63
 8000d3a:	d808      	bhi.n	8000d4e <_ZN13ButtonControl12UpdateButtonEv+0x25e>
			&& !READ_SW_TOTAL) {
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	484c      	ldr	r0, [pc, #304]	; (8000e70 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8000d40:	f002 f8f2 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <_ZN13ButtonControl12UpdateButtonEv+0x25e>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <_ZN13ButtonControl12UpdateButtonEv+0x260>
 8000d4e:	2300      	movs	r3, #0
	if (T4Counter > SHORT_BUTTON_TIME && T4Counter < LONG_BUTTON_TIME
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d008      	beq.n	8000d66 <_ZN13ButtonControl12UpdateButtonEv+0x276>
		model->setT4Short(true);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 fe44 	bl	80019e8 <_ZN5Model10setT4ShortEb>
		T4Counter = 0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	721a      	strb	r2, [r3, #8]
	}

	if (T4Counter > LONG_BUTTON_TIME && !T4last) {
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7a1b      	ldrb	r3, [r3, #8]
 8000d6a:	2b64      	cmp	r3, #100	; 0x64
 8000d6c:	d90f      	bls.n	8000d8e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	78db      	ldrb	r3, [r3, #3]
 8000d72:	f083 0301 	eor.w	r3, r3, #1
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d008      	beq.n	8000d8e <_ZN13ButtonControl12UpdateButtonEv+0x29e>
		model->setT4Long(true);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fe13 	bl	80019ae <_ZN5Model9setT4LongEb>
		T4last = true;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	70da      	strb	r2, [r3, #3]
	}

	if (!READ_SW_TOTAL) {
 8000d8e:	2102      	movs	r1, #2
 8000d90:	4837      	ldr	r0, [pc, #220]	; (8000e70 <_ZN13ButtonControl12UpdateButtonEv+0x380>)
 8000d92:	f002 f8c9 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	bf0c      	ite	eq
 8000d9c:	2301      	moveq	r3, #1
 8000d9e:	2300      	movne	r3, #0
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <_ZN13ButtonControl12UpdateButtonEv+0x2c2>
		T4last = false;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	70da      	strb	r2, [r3, #3]
		T4Counter = 0;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	721a      	strb	r2, [r3, #8]
	}

	//---------------------SW5---------------------
	if (READ_SW_TAR) {
 8000db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f002 f8b5 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <_ZN13ButtonControl12UpdateButtonEv+0x2ea>
		T5Counter++;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	7a5b      	ldrb	r3, [r3, #9]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7a5b      	ldrb	r3, [r3, #9]
			&& !READ_SW_TAR) {
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d90e      	bls.n	8000e00 <_ZN13ButtonControl12UpdateButtonEv+0x310>
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	7a5b      	ldrb	r3, [r3, #9]
 8000de6:	2b63      	cmp	r3, #99	; 0x63
 8000de8:	d80a      	bhi.n	8000e00 <_ZN13ButtonControl12UpdateButtonEv+0x310>
			&& !READ_SW_TAR) {
 8000dea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df2:	f002 f899 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <_ZN13ButtonControl12UpdateButtonEv+0x310>
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <_ZN13ButtonControl12UpdateButtonEv+0x312>
 8000e00:	2300      	movs	r3, #0
	if (T5Counter > SHORT_BUTTON_TIME && T5Counter < LONG_BUTTON_TIME
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <_ZN13ButtonControl12UpdateButtonEv+0x328>
		model->setT5Short(true);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 fe25 	bl	8001a5c <_ZN5Model10setT5ShortEb>
		T5Counter = 0;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	725a      	strb	r2, [r3, #9]
	}

	if (T5Counter > LONG_BUTTON_TIME && !T5last) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7a5b      	ldrb	r3, [r3, #9]
 8000e1c:	2b64      	cmp	r3, #100	; 0x64
 8000e1e:	d90f      	bls.n	8000e40 <_ZN13ButtonControl12UpdateButtonEv+0x350>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	791b      	ldrb	r3, [r3, #4]
 8000e24:	f083 0301 	eor.w	r3, r3, #1
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d008      	beq.n	8000e40 <_ZN13ButtonControl12UpdateButtonEv+0x350>
		model->setT5Long(true);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2101      	movs	r1, #1
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 fdf4 	bl	8001a22 <_ZN5Model9setT5LongEb>
		T5last = true;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	711a      	strb	r2, [r3, #4]
	}

	if (!READ_SW_TAR) {
 8000e40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f002 f86e 	bl	8002f28 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <_ZN13ButtonControl12UpdateButtonEv+0x378>
		T5last = false;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	711a      	strb	r2, [r3, #4]
		T5Counter = 0;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	725a      	strb	r2, [r3, #9]
	}



}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	48000400 	.word	0x48000400

08000e74 <_ZN3LCDC1Ev>:
#include "main.h"
using namespace std;



LCD::LCD() {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

}
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_ZN3LCD7InitLCDEv>:


void LCD::InitLCD(){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	string s;
 8000e94:	f107 0308 	add.w	r3, r7, #8
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f009 fa5e 	bl	800a35a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f002 f857 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2104      	movs	r1, #4
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f002 f851 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2108      	movs	r1, #8
 8000eba:	4824      	ldr	r0, [pc, #144]	; (8000f4c <_ZN3LCD7InitLCDEv+0xc0>)
 8000ebc:	f002 f84c 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f002 f845 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed4:	481e      	ldr	r0, [pc, #120]	; (8000f50 <_ZN3LCD7InitLCDEv+0xc4>)
 8000ed6:	f002 f83f 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee0:	481b      	ldr	r0, [pc, #108]	; (8000f50 <_ZN3LCD7InitLCDEv+0xc4>)
 8000ee2:	f002 f839 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2101      	movs	r1, #1
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f002 f833 	bl	8002f58 <HAL_GPIO_WritePin>

	WriteCommaandWwakeUp(0x30);
 8000ef2:	2130      	movs	r1, #48	; 0x30
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f000 f995 	bl	8001224 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 8000efa:	2130      	movs	r1, #48	; 0x30
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f991 	bl	8001224 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x30);
 8000f02:	2130      	movs	r1, #48	; 0x30
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f98d 	bl	8001224 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommaandWwakeUp(0x20);
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f989 	bl	8001224 <_ZN3LCD20WriteCommaandWwakeUpEh>
	WriteCommand(0x28);
 8000f12:	2128      	movs	r1, #40	; 0x28
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f9cf 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x10); //Set cursor
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f9cb 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x0F); //Display ON; Blinking cursor
 8000f22:	210f      	movs	r1, #15
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f9c7 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x06);
 8000f2a:	2106      	movs	r1, #6
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f9c3 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	WriteCommand(0x01);
 8000f32:	2101      	movs	r1, #1
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f9bf 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	string s;
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fa12 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	48001c00 	.word	0x48001c00
 8000f50:	48000800 	.word	0x48000800

08000f54 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>:

void LCD::Write(string line1, string line2){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]

	WriteCommand(0x80);
 8000f60:	2180      	movs	r1, #128	; 0x80
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f9a8 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 8000f68:	2300      	movs	r3, #0
 8000f6a:	75fb      	strb	r3, [r7, #23]
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b0b      	cmp	r3, #11
 8000f70:	d81f      	bhi.n	8000fb2 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x5e>
		if(line1.length() > i){
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f009 f9fe 	bl	800a374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	7dfb      	ldrb	r3, [r7, #23]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	bf8c      	ite	hi
 8000f80:	2301      	movhi	r3, #1
 8000f82:	2300      	movls	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00b      	beq.n	8000fa2 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x4e>
			WriteData(line1[i]);
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	68b8      	ldr	r0, [r7, #8]
 8000f90:	f009 f9f2 	bl	800a378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000f94:	4603      	mov	r3, r0
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f000 fa1a 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 8000fa0:	e003      	b.n	8000faa <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x56>
		}else{
			WriteData(0x10);
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 fa15 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	3301      	adds	r3, #1
 8000fae:	75fb      	strb	r3, [r7, #23]
 8000fb0:	e7dc      	b.n	8000f6c <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x18>
		}
	}
	WriteCommand(0x80+0x40);
 8000fb2:	21c0      	movs	r1, #192	; 0xc0
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f97f 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12; i++){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75bb      	strb	r3, [r7, #22]
 8000fbe:	7dbb      	ldrb	r3, [r7, #22]
 8000fc0:	2b0b      	cmp	r3, #11
 8000fc2:	d81f      	bhi.n	8001004 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xb0>
		if(line2.length() > i){
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f009 f9d5 	bl	800a374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	7dbb      	ldrb	r3, [r7, #22]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	bf8c      	ite	hi
 8000fd2:	2301      	movhi	r3, #1
 8000fd4:	2300      	movls	r3, #0
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa0>
			WriteData(line2[i]);
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f009 f9c9 	bl	800a378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f000 f9f1 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 8000ff2:	e003      	b.n	8000ffc <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0xa8>
		}else{
			WriteData(0x10);
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 f9ec 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 8000ffc:	7dbb      	ldrb	r3, [r7, #22]
 8000ffe:	3301      	adds	r3, #1
 8001000:	75bb      	strb	r3, [r7, #22]
 8001002:	e7dc      	b.n	8000fbe <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_+0x6a>
		}
	}
}
 8001004:	bf00      	nop
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZN3LCD5WriteEPchhS0_hh>:

void LCD::Write(char* line1, uint8_t lengthL1,uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	460b      	mov	r3, r1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	4613      	mov	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]

	WriteCommand(0x80);
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f000 f947 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl1; a++){
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
 800102e:	7dfa      	ldrb	r2, [r7, #23]
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	429a      	cmp	r2, r3
 8001034:	d207      	bcs.n	8001046 <_ZN3LCD5WriteEPchhS0_hh+0x3a>
		WriteData(0x10);
 8001036:	2110      	movs	r1, #16
 8001038:	68f8      	ldr	r0, [r7, #12]
 800103a:	f000 f9cb 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl1; a++){
 800103e:	7dfb      	ldrb	r3, [r7, #23]
 8001040:	3301      	adds	r3, #1
 8001042:	75fb      	strb	r3, [r7, #23]
 8001044:	e7f3      	b.n	800102e <_ZN3LCD5WriteEPchhS0_hh+0x22>
	}
	for(uint8_t i = 0; i<12; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	75bb      	strb	r3, [r7, #22]
 800104a:	7dbb      	ldrb	r3, [r7, #22]
 800104c:	2b0b      	cmp	r3, #11
 800104e:	d814      	bhi.n	800107a <_ZN3LCD5WriteEPchhS0_hh+0x6e>
		if(lengthL1 > i){
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	7dbb      	ldrb	r3, [r7, #22]
 8001054:	429a      	cmp	r2, r3
 8001056:	d908      	bls.n	800106a <_ZN3LCD5WriteEPchhS0_hh+0x5e>
			WriteData(line1[i]);
 8001058:	7dbb      	ldrb	r3, [r7, #22]
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f000 f9b6 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 8001068:	e003      	b.n	8001072 <_ZN3LCD5WriteEPchhS0_hh+0x66>
		}else{
			WriteData(0x10);
 800106a:	2110      	movs	r1, #16
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 f9b1 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12; i++){
 8001072:	7dbb      	ldrb	r3, [r7, #22]
 8001074:	3301      	adds	r3, #1
 8001076:	75bb      	strb	r3, [r7, #22]
 8001078:	e7e7      	b.n	800104a <_ZN3LCD5WriteEPchhS0_hh+0x3e>
		}
	}
	WriteCommand(0x80+0x40);
 800107a:	21c0      	movs	r1, #192	; 0xc0
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f000 f91b 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001082:	2300      	movs	r3, #0
 8001084:	757b      	strb	r3, [r7, #21]
 8001086:	7d7a      	ldrb	r2, [r7, #21]
 8001088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_ZN3LCD5WriteEPchhS0_hh+0x94>
		WriteData(0x10);
 8001090:	2110      	movs	r1, #16
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f99e 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001098:	7d7b      	ldrb	r3, [r7, #21]
 800109a:	3301      	adds	r3, #1
 800109c:	757b      	strb	r3, [r7, #21]
 800109e:	e7f2      	b.n	8001086 <_ZN3LCD5WriteEPchhS0_hh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	753b      	strb	r3, [r7, #20]
 80010a4:	7d3a      	ldrb	r2, [r7, #20]
 80010a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010aa:	f1c3 030c 	rsb	r3, r3, #12
 80010ae:	429a      	cmp	r2, r3
 80010b0:	da15      	bge.n	80010de <_ZN3LCD5WriteEPchhS0_hh+0xd2>
		if(lengthL2 > i){
 80010b2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80010b6:	7d3b      	ldrb	r3, [r7, #20]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d908      	bls.n	80010ce <_ZN3LCD5WriteEPchhS0_hh+0xc2>
			WriteData(line2[i]);
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
 80010be:	6a3a      	ldr	r2, [r7, #32]
 80010c0:	4413      	add	r3, r2
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4619      	mov	r1, r3
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f000 f984 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 80010cc:	e003      	b.n	80010d6 <_ZN3LCD5WriteEPchhS0_hh+0xca>
		}else{
			WriteData(0x10);
 80010ce:	2110      	movs	r1, #16
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f000 f97f 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80010d6:	7d3b      	ldrb	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	753b      	strb	r3, [r7, #20]
 80010dc:	e7e2      	b.n	80010a4 <_ZN3LCD5WriteEPchhS0_hh+0x98>
		}
	}
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>:


void LCD::Write(string line1, uint8_t startl1, char* line2, uint8_t lengthL2, uint8_t startl2){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4613      	mov	r3, r2
 80010f4:	71fb      	strb	r3, [r7, #7]
	WriteCommand(0x80+startl1);
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	3b80      	subs	r3, #128	; 0x80
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	f000 f8da 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 8001104:	2300      	movs	r3, #0
 8001106:	75fb      	strb	r3, [r7, #23]
 8001108:	7dfa      	ldrb	r2, [r7, #23]
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f1c3 030c 	rsb	r3, r3, #12
 8001110:	429a      	cmp	r2, r3
 8001112:	da1f      	bge.n	8001154 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x6e>
		if(line1.length() > i){
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f009 f92d 	bl	800a374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800111a:	4602      	mov	r2, r0
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	429a      	cmp	r2, r3
 8001120:	bf8c      	ite	hi
 8001122:	2301      	movhi	r3, #1
 8001124:	2300      	movls	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00b      	beq.n	8001144 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x5e>
			WriteData(line1[i]);
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	4619      	mov	r1, r3
 8001130:	68b8      	ldr	r0, [r7, #8]
 8001132:	f009 f921 	bl	800a378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001136:	4603      	mov	r3, r0
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f000 f949 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 8001142:	e003      	b.n	800114c <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x66>
		}else{
			WriteData(0x10);
 8001144:	2110      	movs	r1, #16
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 f944 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl1; i++){
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	3301      	adds	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e7d9      	b.n	8001108 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x22>
		}
	}


	WriteCommand(0x80+0x40);
 8001154:	21c0      	movs	r1, #192	; 0xc0
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f000 f8ae 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	for(uint8_t a = 0; a<startl2; a++){
 800115c:	2300      	movs	r3, #0
 800115e:	75bb      	strb	r3, [r7, #22]
 8001160:	7dba      	ldrb	r2, [r7, #22]
 8001162:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001166:	429a      	cmp	r2, r3
 8001168:	d207      	bcs.n	800117a <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x94>
		WriteData(0x10);
 800116a:	2110      	movs	r1, #16
 800116c:	68f8      	ldr	r0, [r7, #12]
 800116e:	f000 f931 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t a = 0; a<startl2; a++){
 8001172:	7dbb      	ldrb	r3, [r7, #22]
 8001174:	3301      	adds	r3, #1
 8001176:	75bb      	strb	r3, [r7, #22]
 8001178:	e7f2      	b.n	8001160 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x7a>
	}

	for(uint8_t i = 0; i<12-startl2; i++){
 800117a:	2300      	movs	r3, #0
 800117c:	757b      	strb	r3, [r7, #21]
 800117e:	7d7a      	ldrb	r2, [r7, #21]
 8001180:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001184:	f1c3 030c 	rsb	r3, r3, #12
 8001188:	429a      	cmp	r2, r3
 800118a:	da15      	bge.n	80011b8 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xd2>
		if(lengthL2 > i){
 800118c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001190:	7d7b      	ldrb	r3, [r7, #21]
 8001192:	429a      	cmp	r2, r3
 8001194:	d908      	bls.n	80011a8 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xc2>
			WriteData(line2[i]);
 8001196:	7d7b      	ldrb	r3, [r7, #21]
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f917 	bl	80013d4 <_ZN3LCD9WriteDataEh>
 80011a6:	e003      	b.n	80011b0 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0xca>
		}else{
			WriteData(0x10);
 80011a8:	2110      	movs	r1, #16
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f912 	bl	80013d4 <_ZN3LCD9WriteDataEh>
	for(uint8_t i = 0; i<12-startl2; i++){
 80011b0:	7d7b      	ldrb	r3, [r7, #21]
 80011b2:	3301      	adds	r3, #1
 80011b4:	757b      	strb	r3, [r7, #21]
 80011b6:	e7e2      	b.n	800117e <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh+0x98>
		}
	}


}
 80011b8:	bf00      	nop
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_ZN3LCD17SetCursorPositionEhhb>:
	}

}


void LCD::SetCursorPosition(uint8_t position, uint8_t line, bool cursorBlink){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	4608      	mov	r0, r1
 80011ca:	4611      	mov	r1, r2
 80011cc:	461a      	mov	r2, r3
 80011ce:	4603      	mov	r3, r0
 80011d0:	70fb      	strb	r3, [r7, #3]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70bb      	strb	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	707b      	strb	r3, [r7, #1]

	if(line == 1){
 80011da:	78bb      	ldrb	r3, [r7, #2]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d107      	bne.n	80011f0 <_ZN3LCD17SetCursorPositionEhhb+0x30>
		WriteCommand(0x80 + position);
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	3b80      	subs	r3, #128	; 0x80
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f865 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
 80011ee:	e009      	b.n	8001204 <_ZN3LCD17SetCursorPositionEhhb+0x44>
	}else if(line == 2){
 80011f0:	78bb      	ldrb	r3, [r7, #2]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d106      	bne.n	8001204 <_ZN3LCD17SetCursorPositionEhhb+0x44>
		WriteCommand(0x80+0x40+position);
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	3b40      	subs	r3, #64	; 0x40
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 f85a 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	}

	if(cursorBlink){
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <_ZN3LCD17SetCursorPositionEhhb+0x54>
		WriteCommand(0x0F);
 800120a:	210f      	movs	r1, #15
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f000 f853 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
	}




}
 8001212:	e003      	b.n	800121c <_ZN3LCD17SetCursorPositionEhhb+0x5c>
		WriteCommand(0x0F);
 8001214:	210f      	movs	r1, #15
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f84e 	bl	80012b8 <_ZN3LCD12WriteCommandEh>
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZN3LCD20WriteCommaandWwakeUpEh>:


void LCD::WriteCommaandWwakeUp(uint8_t data){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	70fb      	strb	r3, [r7, #3]

	uint8_t data1 = data>>4;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	111b      	asrs	r3, r3, #4
 8001234:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 8001236:	7bfb      	ldrb	r3, [r7, #15]
 8001238:	f003 0301 	and.w	r3, r3, #1
 800123c:	b2db      	uxtb	r3, r3
 800123e:	461a      	mov	r2, r3
 8001240:	2102      	movs	r1, #2
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f001 fe87 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	2104      	movs	r1, #4
 8001256:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125a:	f001 fe7d 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	2108      	movs	r1, #8
 800126a:	4812      	ldr	r0, [pc, #72]	; (80012b4 <_ZN3LCD20WriteCommaandWwakeUpEh+0x90>)
 800126c:	f001 fe74 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001270:	7bfb      	ldrb	r3, [r7, #15]
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	b2db      	uxtb	r3, r3
 8001278:	461a      	mov	r2, r3
 800127a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 fe69 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001286:	2001      	movs	r0, #1
 8001288:	f001 fba8 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2101      	movs	r1, #1
 8001290:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001294:	f001 fe60 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f001 fb9f 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2101      	movs	r1, #1
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f001 fe57 	bl	8002f58 <HAL_GPIO_WritePin>
}
 80012aa:	bf00      	nop
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	48001c00 	.word	0x48001c00

080012b8 <_ZN3LCD12WriteCommandEh>:

void LCD::WriteCommand(uint8_t data){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ca:	4840      	ldr	r0, [pc, #256]	; (80013cc <_ZN3LCD12WriteCommandEh+0x114>)
 80012cc:	f001 fe44 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	483d      	ldr	r0, [pc, #244]	; (80013cc <_ZN3LCD12WriteCommandEh+0x114>)
 80012d8:	f001 fe3e 	bl	8002f58 <HAL_GPIO_WritePin>

	uint8_t data1 = data>>4;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	111b      	asrs	r3, r3, #4
 80012e0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	461a      	mov	r2, r3
 80012ec:	2102      	movs	r1, #2
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f001 fe31 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	461a      	mov	r2, r3
 8001300:	2104      	movs	r1, #4
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f001 fe27 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	2108      	movs	r1, #8
 8001316:	482e      	ldr	r0, [pc, #184]	; (80013d0 <_ZN3LCD12WriteCommandEh+0x118>)
 8001318:	f001 fe1e 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	b2db      	uxtb	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132e:	f001 fe13 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	2101      	movs	r1, #1
 8001336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133a:	f001 fe0d 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f001 fb4c 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2101      	movs	r1, #1
 8001348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134c:	f001 fe04 	bl	8002f58 <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	2102      	movs	r1, #2
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 fdfa 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	2104      	movs	r1, #4
 8001370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001374:	f001 fdf0 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	b2db      	uxtb	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	2108      	movs	r1, #8
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <_ZN3LCD12WriteCommandEh+0x118>)
 8001386:	f001 fde7 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	b2db      	uxtb	r3, r3
 8001392:	461a      	mov	r2, r3
 8001394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f001 fddc 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	2101      	movs	r1, #1
 80013a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a8:	f001 fdd6 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013ac:	2001      	movs	r0, #1
 80013ae:	f001 fb15 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2101      	movs	r1, #1
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 fdcd 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80013be:	2001      	movs	r0, #1
 80013c0:	f001 fb0c 	bl	80029dc <HAL_Delay>
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	48000800 	.word	0x48000800
 80013d0:	48001c00 	.word	0x48001c00

080013d4 <_ZN3LCD9WriteDataEh>:

void LCD::WriteData(uint8_t data){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013e6:	4840      	ldr	r0, [pc, #256]	; (80014e8 <_ZN3LCD9WriteDataEh+0x114>)
 80013e8:	f001 fdb6 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f2:	483d      	ldr	r0, [pc, #244]	; (80014e8 <_ZN3LCD9WriteDataEh+0x114>)
 80013f4:	f001 fdb0 	bl	8002f58 <HAL_GPIO_WritePin>


	uint8_t data1 = data>>4;
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	111b      	asrs	r3, r3, #4
 80013fc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data1 & 0x01));
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	2102      	movs	r1, #2
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f001 fda3 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data1 & 0x02));
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	b2db      	uxtb	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	2104      	movs	r1, #4
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f001 fd99 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data1 & 0x04));
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	2108      	movs	r1, #8
 8001432:	482e      	ldr	r0, [pc, #184]	; (80014ec <_ZN3LCD9WriteDataEh+0x118>)
 8001434:	f001 fd90 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data1 & 0x08));
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f001 fd85 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2101      	movs	r1, #1
 8001452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001456:	f001 fd7f 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fabe 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2101      	movs	r1, #1
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f001 fd76 	bl	8002f58 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, (GPIO_PinState)(data & 0x01));
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	2102      	movs	r1, #2
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f001 fd6c 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, (GPIO_PinState)(data & 0x02));
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	461a      	mov	r2, r3
 800148a:	2104      	movs	r1, #4
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f001 fd62 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, (GPIO_PinState)(data & 0x04));
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	b2db      	uxtb	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	2108      	movs	r1, #8
 80014a0:	4812      	ldr	r0, [pc, #72]	; (80014ec <_ZN3LCD9WriteDataEh+0x118>)
 80014a2:	f001 fd59 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DB3_GPIO_Port, DB3_Pin, (GPIO_PinState)(data & 0x08));
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b8:	f001 fd4e 	bl	8002f58 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2101      	movs	r1, #1
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f001 fd48 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f001 fa87 	bl	80029dc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2101      	movs	r1, #1
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 fd3f 	bl	8002f58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80014da:	2001      	movs	r0, #1
 80014dc:	f001 fa7e 	bl	80029dc <HAL_Delay>
}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48001c00 	.word	0x48001c00

080014f0 <_ZN8LoadCellC1Ev>:
 */

#include "LoadCell.h"


LoadCell::LoadCell( ) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	this->model = model;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	601a      	str	r2, [r3, #0]
	DWT_Init();
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f88d 	bl	8001620 <_ZN8LoadCell8DWT_InitEv>
}
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_ZN8LoadCell12InitLoadCellEP5Model16LoadCellSettings>:

void LoadCell::InitLoadCell(Model *model, LoadCellSettings loadCellSettings){
 8001510:	b082      	sub	sp, #8
 8001512:	b490      	push	{r4, r7}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]
 800151c:	f107 0110 	add.w	r1, r7, #16
 8001520:	e881 000c 	stmia.w	r1, {r2, r3}
	this->model = model;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	601a      	str	r2, [r3, #0]
	this->lcSettings = loadCellSettings;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	1d1c      	adds	r4, r3, #4
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bc90      	pop	{r4, r7}
 8001540:	b002      	add	sp, #8
 8001542:	4770      	bx	lr

08001544 <_ZN8LoadCell6UpdateEv>:


void LoadCell::Update(){
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6858      	ldr	r0, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	891b      	ldrh	r3, [r3, #8]
 8001558:	2200      	movs	r2, #0
 800155a:	4619      	mov	r1, r3
 800155c:	f001 fcfc 	bl	8002f58 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin) == GPIO_PIN_RESET){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	8a1b      	ldrh	r3, [r3, #16]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f001 fcdc 	bl	8002f28 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf0c      	ite	eq
 8001576:	2301      	moveq	r3, #1
 8001578:	2300      	movne	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d04a      	beq.n	8001616 <_ZN8LoadCell6UpdateEv+0xd2>
		for(int i = 0; i<25; i++){
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	2b18      	cmp	r3, #24
 8001588:	dc2b      	bgt.n	80015e2 <_ZN8LoadCell6UpdateEv+0x9e>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_SET);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6858      	ldr	r0, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	891b      	ldrh	r3, [r3, #8]
 8001592:	2201      	movs	r2, #1
 8001594:	4619      	mov	r1, r3
 8001596:	f001 fcdf 	bl	8002f58 <HAL_GPIO_WritePin>
			DWT_Delay_us(10);
 800159a:	210a      	movs	r1, #10
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f85d 	bl	800165c <_ZN8LoadCell12DWT_Delay_usEm>
			HAL_GPIO_WritePin(lcSettings.clkPort, lcSettings.clkPin, GPIO_PIN_RESET);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6858      	ldr	r0, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	891b      	ldrh	r3, [r3, #8]
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	f001 fcd3 	bl	8002f58 <HAL_GPIO_WritePin>
			data = data + HAL_GPIO_ReadPin(lcSettings.dataPort, lcSettings.dataPin);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	8a1b      	ldrh	r3, [r3, #16]
 80015ba:	4619      	mov	r1, r3
 80015bc:	4610      	mov	r0, r2
 80015be:	f001 fcb3 	bl	8002f28 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	461a      	mov	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4413      	add	r3, r2
 80015ca:	60fb      	str	r3, [r7, #12]
			data = data << 1;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
			DWT_Delay_us(10);
 80015d2:	210a      	movs	r1, #10
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f841 	bl	800165c <_ZN8LoadCell12DWT_Delay_usEm>
		for(int i = 0; i<25; i++){
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	3301      	adds	r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	e7d0      	b.n	8001584 <_ZN8LoadCell6UpdateEv+0x40>
		}
		data = data>>8;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	60fb      	str	r3, [r7, #12]

		switch(this->lcSettings.loadCellNr){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7c9b      	ldrb	r3, [r3, #18]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d002      	beq.n	80015f6 <_ZN8LoadCell6UpdateEv+0xb2>
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d008      	beq.n	8001606 <_ZN8LoadCell6UpdateEv+0xc2>
		case 2:
			model->setLoadCell2(data);
			break;
		default:
			//Error not suportet nr
			break;
 80015f4:	e00f      	b.n	8001616 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell1(data);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f8d6 	bl	80017b0 <_ZN5Model12setLoadCell1El>
			break;
 8001604:	e007      	b.n	8001616 <_ZN8LoadCell6UpdateEv+0xd2>
			model->setLoadCell2(data);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f000 f8e8 	bl	80017e4 <_ZN5Model12setLoadCell2El>
			break;
 8001614:	bf00      	nop
		}
	}

}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <_ZN8LoadCell8DWT_InitEv>:


/*
 * Mikrosenkunden delay Initialisieren
 */
void LoadCell::DWT_Init(void) {
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <_ZN8LoadCell8DWT_InitEv+0x34>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	4a09      	ldr	r2, [pc, #36]	; (8001654 <_ZN8LoadCell8DWT_InitEv+0x34>)
 800162e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001632:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <_ZN8LoadCell8DWT_InitEv+0x38>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800163a:	4b07      	ldr	r3, [pc, #28]	; (8001658 <_ZN8LoadCell8DWT_InitEv+0x38>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <_ZN8LoadCell8DWT_InitEv+0x38>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000edf0 	.word	0xe000edf0
 8001658:	e0001000 	.word	0xe0001000

0800165c <_ZN8LoadCell12DWT_Delay_usEm>:

/*
 * Mikrosenkunden delay für Push-Pull ansteuerung
 */
void LoadCell::DWT_Delay_us(volatile uint32_t microseconds) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800166c:	f003 ff8e 	bl	800558c <HAL_RCC_GetHCLKFreq>
 8001670:	4602      	mov	r2, r0
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <_ZN8LoadCell12DWT_Delay_usEm+0x4c>)
 8001674:	fba3 2302 	umull	r2, r3, r3, r2
 8001678:	0c9b      	lsrs	r3, r3, #18
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	fb02 f303 	mul.w	r3, r2, r3
 8001680:	603b      	str	r3, [r7, #0]
	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <_ZN8LoadCell12DWT_Delay_usEm+0x48>)
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	bf34      	ite	cc
 8001690:	2301      	movcc	r3, #1
 8001692:	2300      	movcs	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d000      	beq.n	800169c <_ZN8LoadCell12DWT_Delay_usEm+0x40>
 800169a:	e7f2      	b.n	8001682 <_ZN8LoadCell12DWT_Delay_usEm+0x26>
		;
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	e0001000 	.word	0xe0001000
 80016a8:	431bde83 	.word	0x431bde83

080016ac <_ZN5ModelC1Ev>:
 *      Author: marcel
 */

#include "Model.h"

Model::Model() {
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	//---------------LoadCell Settings---------------
	 loadCell1 = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
	 loadCell2 = 0;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	605a      	str	r2, [r3, #4]

	 loadCellOffset_1 = 970;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f240 32ca 	movw	r2, #970	; 0x3ca
 80016c6:	609a      	str	r2, [r3, #8]
	 loadCellOffset_2 = 970;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f240 32ca 	movw	r2, #970	; 0x3ca
 80016ce:	60da      	str	r2, [r3, #12]

	 loadCellGradient_1 = 3.35;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a2e      	ldr	r2, [pc, #184]	; (800178c <_ZN5ModelC1Ev+0xe0>)
 80016d4:	611a      	str	r2, [r3, #16]
	 loadCellGradient_2 = 3.35;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a2c      	ldr	r2, [pc, #176]	; (800178c <_ZN5ModelC1Ev+0xe0>)
 80016da:	615a      	str	r2, [r3, #20]

	 weight = 0;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	831a      	strh	r2, [r3, #24]

	//---------------Wachs settings---------------

	 Bienenwachs_Preis = 2.4; //Preis in Rr/10g
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <_ZN5ModelC1Ev+0xe4>)
 80016e6:	61da      	str	r2, [r3, #28]
	 Parafinwachs_Preis = 1.4;	//Preis in Rr/10g
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a2a      	ldr	r2, [pc, #168]	; (8001794 <_ZN5ModelC1Ev+0xe8>)
 80016ec:	621a      	str	r2, [r3, #32]


	 wachstyp = E_UNDEF;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	//---------------Screen activation---------------


	//---------------Zeit speicherung---------------
	 year = 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	 month = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	 day = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	 dayOfWeek = 0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 hour = 0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	 minute = 0;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 seconds = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	//---------------Taster Status---------------
	 T1Short = false;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 T1Long = false;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	 T2Short = false;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 T2Long = false;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	 T3Short = false;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	 T3Long = false;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	 T4Short = false;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 T4Long = false;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

	 T5Short = false;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 T5Long = false;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

}
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40566666 	.word	0x40566666
 8001790:	4019999a 	.word	0x4019999a
 8001794:	3fb33333 	.word	0x3fb33333

08001798 <_ZNK5Model12getLoadCell1Ev>:

void Model::setHour(uint8_t hour) {
	this->hour = hour;
}

int32_t Model::getLoadCell1() const {
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	return loadCell1;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_ZN5Model12setLoadCell1El>:

void Model::setLoadCell1(int32_t loadCell1) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	this->loadCell1 = loadCell1;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <_ZNK5Model12getLoadCell2Ev>:

int32_t Model::getLoadCell2() const {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	return loadCell2;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <_ZN5Model12setLoadCell2El>:

void Model::setLoadCell2(int32_t loadCell2) {
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	this->loadCell2 = loadCell2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	605a      	str	r2, [r3, #4]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <_ZNK5Model9getWeightEv>:

void Model::setSeconds(uint8_t seconds) {
	this->seconds = seconds;
}

int16_t Model::getWeight() const {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	return weight;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_ZN5Model9setWeightEs>:

void Model::setWeight(int16_t weight) {
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	460b      	mov	r3, r1
 8001824:	807b      	strh	r3, [r7, #2]
	this->weight = weight;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	831a      	strh	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <_ZNK5Model8isT1LongEv>:

void Model::setYear(uint8_t year) {
	this->year = year;
}

bool Model::isT1Long() const {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	return T1Long;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <_ZN5Model9setT1LongEb>:

void Model::setT1Long(bool t1Long) {
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	460b      	mov	r3, r1
 800185c:	70fb      	strb	r3, [r7, #3]
	T1Long = t1Long;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <_ZNK5Model9isT1ShortEv>:

bool Model::isT1Short() const {
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	return T1Short;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN5Model10setT1ShortEb>:

void Model::setT1Short(bool t1Short) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
	T1Short = t1Short;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_ZNK5Model8isT2LongEv>:

bool Model::isT2Long() const {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	return T2Long;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_ZN5Model9setT2LongEb>:

void Model::setT2Long(bool t2Long) {
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	460b      	mov	r3, r1
 80018d0:	70fb      	strb	r3, [r7, #3]
	T2Long = t2Long;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_ZNK5Model9isT2ShortEv>:

bool Model::isT2Short() const {
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return T2Short;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_ZN5Model10setT2ShortEb>:

void Model::setT2Short(bool t2Short) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
	T2Short = t2Short;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_ZNK5Model8isT3LongEv>:

bool Model::isT3Long() const {
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	return T3Long;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <_ZN5Model9setT3LongEb>:

void Model::setT3Long(bool t3Long) {
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	70fb      	strb	r3, [r7, #3]
	T3Long = t3Long;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	78fa      	ldrb	r2, [r7, #3]
 800194a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_ZNK5Model9isT3ShortEv>:

bool Model::isT3Short() const {
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	return T3Short;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_ZN5Model10setT3ShortEb>:

void Model::setT3Short(bool t3Short) {
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
	T3Short = t3Short;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_ZNK5Model8isT4LongEv>:

bool Model::isT4Long() const {
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	return T4Long;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_ZN5Model9setT4LongEb>:

void Model::setT4Long(bool t4Long) {
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	70fb      	strb	r3, [r7, #3]
	T4Long = t4Long;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_ZNK5Model9isT4ShortEv>:

bool Model::isT4Short() const {
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return T4Short;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_ZN5Model10setT4ShortEb>:

void Model::setT4Short(bool t4Short) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
	T4Short = t4Short;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZNK5Model8isT5LongEv>:

bool Model::isT5Long() const {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return T5Long;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <_ZN5Model9setT5LongEb>:

void Model::setT5Long(bool t5Long) {
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	70fb      	strb	r3, [r7, #3]
	T5Long = t5Long;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_ZNK5Model9isT5ShortEv>:

bool Model::isT5Short() const {
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	return T5Short;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_ZN5Model10setT5ShortEb>:

void Model::setT5Short(bool t5Short) {
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
	T5Short = t5Short;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	78fa      	ldrb	r2, [r7, #3]
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_ZNK5Model20getLoadCellGradient1Ev>:

float Model::getLoadCellGradient1() const {
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_1 <= 0){
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	d802      	bhi.n	8001a9a <_ZNK5Model20getLoadCellGradient1Ev+0x1e>
		return 1;
 8001a94:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a98:	e001      	b.n	8001a9e <_ZNK5Model20getLoadCellGradient1Ev+0x22>
	}
	return loadCellGradient_1;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	ee07 3a90 	vmov	s15, r3
}
 8001aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_ZNK5Model20getLoadCellGradient2Ev>:

void Model::setLoadCellGradient1(float loadCellGradient1) {
	loadCellGradient_1 = loadCellGradient1;
}

float Model::getLoadCellGradient2() const {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(loadCellGradient_2 <= 0){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	edd3 7a05 	vldr	s15, [r3, #20]
 8001abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	d802      	bhi.n	8001ace <_ZNK5Model20getLoadCellGradient2Ev+0x1e>
		return 1;
 8001ac8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001acc:	e001      	b.n	8001ad2 <_ZNK5Model20getLoadCellGradient2Ev+0x22>
	}
	return loadCellGradient_2;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	ee07 3a90 	vmov	s15, r3
}
 8001ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_ZNK5Model18getLoadCellOffset1Ev>:

void Model::setLoadCellGradient2(float loadCellGradient2) {
	loadCellGradient_2 = loadCellGradient2;
}

int32_t Model::getLoadCellOffset1() const {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	return loadCellOffset_1;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_ZN5Model18setLoadCellOffset1El>:

void Model::setLoadCellOffset1(int32_t loadCellOffset1) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	loadCellOffset_1 = loadCellOffset1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	609a      	str	r2, [r3, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_ZNK5Model18getLoadCellOffset2Ev>:

int32_t Model::getLoadCellOffset2() const {
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	return loadCellOffset_2;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_ZNK5Model19getBienenwachsPreisEv>:

float Model::getBienenwachsPreis() const {
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	return Bienenwachs_Preis;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	ee07 3a90 	vmov	s15, r3
}
 8001b40:	eeb0 0a67 	vmov.f32	s0, s15
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_ZN5Model19setBienenwachsPreisEf>:

void Model::setBienenwachsPreis(float bienenwachsPreis) {
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	ed87 0a00 	vstr	s0, [r7]
	Bienenwachs_Preis = bienenwachsPreis;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	61da      	str	r2, [r3, #28]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZNK5Model20getParafinwachsPreisEv>:

float Model::getParafinwachsPreis() const {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	return Parafinwachs_Preis;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	ee07 3a90 	vmov	s15, r3
}
 8001b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_ZNK5Model11getWachstypEv>:

void Model::setParafinwachsPreis(float parafinwachsPreis) {
	Parafinwachs_Preis = parafinwachsPreis;
}

Model::EWACHS Model::getWachstyp() const {
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return wachstyp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <_ZN5Model11setWachstypENS_6EWACHSE>:

void Model::setWachstyp(EWACHS wachstyp) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
	this->wachstyp = wachstyp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	78fa      	ldrb	r2, [r7, #3]
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	switch(this->wachstyp){
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d011      	beq.n	8001be6 <_ZN5Model11setWachstypENS_6EWACHSE+0x42>
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d01c      	beq.n	8001c00 <_ZN5Model11setWachstypENS_6EWACHSE+0x5c>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d000      	beq.n	8001bcc <_ZN5Model11setWachstypENS_6EWACHSE+0x28>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
		break;
	}

}
 8001bca:	e026      	b.n	8001c1a <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2110      	movs	r1, #16
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f001 f9c0 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2140      	movs	r1, #64	; 0x40
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be0:	f001 f9ba 	bl	8002f58 <HAL_GPIO_WritePin>
		break;
 8001be4:	e019      	b.n	8001c1a <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2110      	movs	r1, #16
 8001bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bee:	f001 f9b3 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 f9ad 	bl	8002f58 <HAL_GPIO_WritePin>
		break;
 8001bfe:	e00c      	b.n	8001c1a <_ZN5Model11setWachstypENS_6EWACHSE+0x76>
		HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2110      	movs	r1, #16
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f001 f9a6 	bl	8002f58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_PW_GPIO_Port, LED_PW_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c14:	f001 f9a0 	bl	8002f58 <HAL_GPIO_WritePin>
		break;
 8001c18:	bf00      	nop
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZN5Model18setLoadCellOffset2El>:

void Model::setLoadCellOffset2(int32_t loadCellOffset2) {
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
	loadCellOffset_2 = loadCellOffset2;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	60da      	str	r2, [r3, #12]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bfb8      	it	lt
 8001c4c:	425b      	neglt	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <_ZN5Tools14intToAsciiCharElh>:

#include "Tools.h"
#include "math.h"
using namespace std;

char* Tools::intToAsciiChar(int32_t data,uint8_t nachkommastellen) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
		data = abs(data);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe8 	bl	8001c3e <_ZSt3absl>
 8001c6e:	6078      	str	r0, [r7, #4]
		static char d[5];
		static char result[6];
		d[0] = data/10000 + 0x30;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <_ZN5Tools14intToAsciiCharElh+0x140>)
 8001c74:	fb82 1203 	smull	r1, r2, r2, r3
 8001c78:	1312      	asrs	r2, r2, #12
 8001c7a:	17db      	asrs	r3, r3, #31
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	3330      	adds	r3, #48	; 0x30
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001c86:	701a      	strb	r2, [r3, #0]
        d[1] = data/1000 - (data/10000)*10 + 0x30;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a46      	ldr	r2, [pc, #280]	; (8001da4 <_ZN5Tools14intToAsciiCharElh+0x148>)
 8001c8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c90:	1192      	asrs	r2, r2, #6
 8001c92:	17db      	asrs	r3, r3, #31
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4940      	ldr	r1, [pc, #256]	; (8001d9c <_ZN5Tools14intToAsciiCharElh+0x140>)
 8001c9c:	fb81 0103 	smull	r0, r1, r1, r3
 8001ca0:	1309      	asrs	r1, r1, #12
 8001ca2:	17db      	asrs	r3, r3, #31
 8001ca4:	1a5b      	subs	r3, r3, r1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	0089      	lsls	r1, r1, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3330      	adds	r3, #48	; 0x30
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001cbc:	705a      	strb	r2, [r3, #1]
        d[2] = data/100 - (data/1000)*10 + 0x30;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 8001cc2:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc6:	1152      	asrs	r2, r2, #5
 8001cc8:	17db      	asrs	r3, r3, #31
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4934      	ldr	r1, [pc, #208]	; (8001da4 <_ZN5Tools14intToAsciiCharElh+0x148>)
 8001cd2:	fb81 0103 	smull	r0, r1, r1, r3
 8001cd6:	1189      	asrs	r1, r1, #6
 8001cd8:	17db      	asrs	r3, r3, #31
 8001cda:	1a5b      	subs	r3, r3, r1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4619      	mov	r1, r3
 8001ce0:	0089      	lsls	r1, r1, #2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	3330      	adds	r3, #48	; 0x30
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001cf2:	709a      	strb	r2, [r3, #2]
        d[3] = data/10 - (data/100)*10 + 0x30;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <_ZN5Tools14intToAsciiCharElh+0x150>)
 8001cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfc:	1092      	asrs	r2, r2, #2
 8001cfe:	17db      	asrs	r3, r3, #31
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4928      	ldr	r1, [pc, #160]	; (8001da8 <_ZN5Tools14intToAsciiCharElh+0x14c>)
 8001d08:	fb81 0103 	smull	r0, r1, r1, r3
 8001d0c:	1149      	asrs	r1, r1, #5
 8001d0e:	17db      	asrs	r3, r3, #31
 8001d10:	1a5b      	subs	r3, r3, r1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	0089      	lsls	r1, r1, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4413      	add	r3, r2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	3330      	adds	r3, #48	; 0x30
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001d28:	70da      	strb	r2, [r3, #3]
        d[4] = data - (data/10)*10 + 0x30;
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <_ZN5Tools14intToAsciiCharElh+0x150>)
 8001d2e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d32:	1099      	asrs	r1, r3, #2
 8001d34:	17d3      	asrs	r3, r2, #31
 8001d36:	1ac9      	subs	r1, r1, r3
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	1ad1      	subs	r1, r2, r3
 8001d42:	b2cb      	uxtb	r3, r1
 8001d44:	3330      	adds	r3, #48	; 0x30
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001d4a:	711a      	strb	r2, [r3, #4]

        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	2300      	movs	r3, #0
 8001d52:	73bb      	strb	r3, [r7, #14]
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d81a      	bhi.n	8001d90 <_ZN5Tools14intToAsciiCharElh+0x134>

        	if(5-i == nachkommastellen){
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f1c3 0205 	rsb	r2, r3, #5
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d107      	bne.n	8001d76 <_ZN5Tools14intToAsciiCharElh+0x11a>
        		result[i] = '.';
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4a11      	ldr	r2, [pc, #68]	; (8001db0 <_ZN5Tools14intToAsciiCharElh+0x154>)
 8001d6a:	212e      	movs	r1, #46	; 0x2e
 8001d6c:	54d1      	strb	r1, [r2, r3]
        		j--;
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	73bb      	strb	r3, [r7, #14]
 8001d74:	e005      	b.n	8001d82 <_ZN5Tools14intToAsciiCharElh+0x126>
        	}else{
        		result[i] = d[j];
 8001d76:	7bba      	ldrb	r2, [r7, #14]
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	4909      	ldr	r1, [pc, #36]	; (8001da0 <_ZN5Tools14intToAsciiCharElh+0x144>)
 8001d7c:	5c89      	ldrb	r1, [r1, r2]
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <_ZN5Tools14intToAsciiCharElh+0x154>)
 8001d80:	54d1      	strb	r1, [r2, r3]
        for(uint8_t i=0,j = 0; i<6;i++,j++){
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	3301      	adds	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73bb      	strb	r3, [r7, #14]
 8001d8e:	e7e1      	b.n	8001d54 <_ZN5Tools14intToAsciiCharElh+0xf8>



        }

	return result;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_ZN5Tools14intToAsciiCharElh+0x154>)
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	68db8bad 	.word	0x68db8bad
 8001da0:	200002c4 	.word	0x200002c4
 8001da4:	10624dd3 	.word	0x10624dd3
 8001da8:	51eb851f 	.word	0x51eb851f
 8001dac:	66666667 	.word	0x66666667
 8001db0:	200002cc 	.word	0x200002cc

08001db4 <_ZN5Tools8Round5RpEl>:


int32_t Tools::Round5Rp(int32_t prize){
 8001db4:	b480      	push	{r7}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
    int rp = prize % 10;
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <_ZN5Tools8Round5RpEl+0x60>)
 8001dc4:	fb83 1302 	smull	r1, r3, r3, r2
 8001dc8:	1099      	asrs	r1, r3, #2
 8001dca:	17d3      	asrs	r3, r2, #31
 8001dcc:	1ac9      	subs	r1, r1, r3
 8001dce:	460b      	mov	r3, r1
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	613b      	str	r3, [r7, #16]
    int fr = rp/5;
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <_ZN5Tools8Round5RpEl+0x60>)
 8001dde:	fb82 1203 	smull	r1, r2, r2, r3
 8001de2:	1052      	asrs	r2, r2, #1
 8001de4:	17db      	asrs	r3, r3, #31
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	60fb      	str	r3, [r7, #12]
    if(fr == 1){
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <_ZN5Tools8Round5RpEl+0x48>
    	result = prize + 5-rp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	1d5a      	adds	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e003      	b.n	8001e04 <_ZN5Tools8Round5RpEl+0x50>
    }else{
    	result = prize - rp;
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
    }
    return result;
 8001e04:	697b      	ldr	r3, [r7, #20]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	66666667 	.word	0x66666667

08001e18 <_ZN10BWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "BWSettings.h"

BWSettings::BWSettings(Model *model, LCD *lcd) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fa5c 	bl	80022e4 <_ZN10BaseScreenC1Ev>
	this->model = model;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	605a      	str	r2, [r3, #4]
	position = 0;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	735a      	strb	r2, [r3, #13]
	init = false;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	739a      	strb	r2, [r3, #14]
}
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_ZN10BWSettings6UpdateEv>:



Model::ESCREEN BWSettings::Update(){
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b0a5      	sub	sp, #148	; 0x94
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]

	screen = Model::E_BW_SETTINGS;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	731a      	strb	r2, [r3, #12]

	int preis = model->getBienenwachsPreis()*100;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fe68 	bl	8001b30 <_ZNK5Model19getBienenwachsPreisEv>
 8001e60:	eeb0 7a40 	vmov.f32	s14, s0
 8001e64:	eddf 7abd 	vldr	s15, [pc, #756]	; 800215c <_ZN10BWSettings6UpdateEv+0x314>
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e70:	ee17 3a90 	vmov	r3, s15
 8001e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	char *p = Tools::intToAsciiChar(preis, 2);
 8001e78:	2102      	movs	r1, #2
 8001e7a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e7e:	f7ff feed 	bl	8001c5c <_ZN5Tools14intToAsciiCharElh>
 8001e82:	67f8      	str	r0, [r7, #124]	; 0x7c
	char result[12];
	string line1 = "Bienenwachs";
 8001e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 fa2b 	bl	800a2e4 <_ZNSaIcEC1Ev>
 8001e8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	49b2      	ldr	r1, [pc, #712]	; (8002160 <_ZN10BWSettings6UpdateEv+0x318>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f008 fac7 	bl	800a42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 fa1f 	bl	800a2e6 <_ZNSaIcED1Ev>

	for(uint8_t i = 0; i<5;i++){
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001eae:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d812      	bhi.n	8001edc <_ZN10BWSettings6UpdateEv+0x94>
		result[i] = p[i+1];
 8001eb6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001eba:	3301      	adds	r3, #1
 8001ebc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ebe:	441a      	add	r2, r3
 8001ec0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001ec4:	7812      	ldrb	r2, [r2, #0]
 8001ec6:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001eca:	440b      	add	r3, r1
 8001ecc:	f803 2c64 	strb.w	r2, [r3, #-100]
	for(uint8_t i = 0; i<5;i++){
 8001ed0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001eda:	e7e8      	b.n	8001eae <_ZN10BWSettings6UpdateEv+0x66>
	}

	result[5] = ' ';
 8001edc:	2320      	movs	r3, #32
 8001ede:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	result[6] = 'F';
 8001ee2:	2346      	movs	r3, #70	; 0x46
 8001ee4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	result[7] = 'r';
 8001ee8:	2372      	movs	r3, #114	; 0x72
 8001eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	result[8] = '/';
 8001eee:	232f      	movs	r3, #47	; 0x2f
 8001ef0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	result[9] = '1';
 8001ef4:	2331      	movs	r3, #49	; 0x31
 8001ef6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	result[10] = '0';
 8001efa:	2330      	movs	r3, #48	; 0x30
 8001efc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	result[11] = '0';
 8001f00:	2330      	movs	r3, #48	; 0x30
 8001f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	result[12] = 'g';
 8001f06:	2367      	movs	r3, #103	; 0x67
 8001f08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	if(!init){
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7b9b      	ldrb	r3, [r3, #14]
 8001f10:	f083 0301 	eor.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d026      	beq.n	8001f68 <_ZN10BWSettings6UpdateEv+0x120>
		lcd->Write(line1,0,result,12,0);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689c      	ldr	r4, [r3, #8]
 8001f1e:	f107 020c 	add.w	r2, r7, #12
 8001f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fa4d 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001f2e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f32:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001f36:	2300      	movs	r3, #0
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	2200      	movs	r2, #0
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff f8cf 	bl	80010e6 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8001f48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f008 fa0b 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6898      	ldr	r0, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7b59      	ldrb	r1, [r3, #13]
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	f7ff f92f 	bl	80011c0 <_ZN3LCD17SetCursorPositionEhhb>
		init = true;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	739a      	strb	r2, [r3, #14]
	}


	//------------------SW_BW------------------
	if(model->isT1Short()){
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc80 	bl	8001872 <_ZNK5Model9isT1ShortEv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <_ZN10BWSettings6UpdateEv+0x1b4>
		//Change position
		if(position >= 4){
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7b5b      	ldrb	r3, [r3, #13]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d903      	bls.n	8001f88 <_ZN10BWSettings6UpdateEv+0x140>
			position = 0;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	735a      	strb	r2, [r3, #13]
 8001f86:	e00f      	b.n	8001fa8 <_ZN10BWSettings6UpdateEv+0x160>
		}else{
			position++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b5b      	ldrb	r3, [r3, #13]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	735a      	strb	r2, [r3, #13]
			if(position == 2){
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7b5b      	ldrb	r3, [r3, #13]
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d105      	bne.n	8001fa8 <_ZN10BWSettings6UpdateEv+0x160>
				position++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7b5b      	ldrb	r3, [r3, #13]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	735a      	strb	r2, [r3, #13]
			}
		}

		lcd->Write(line1,0,result,12,0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689c      	ldr	r4, [r3, #8]
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f008 fa06 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001fbc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001fc0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9301      	str	r3, [sp, #4]
 8001fc8:	230c      	movs	r3, #12
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff f888 	bl	80010e6 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 8001fd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f008 f9c4 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6898      	ldr	r0, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b59      	ldrb	r1, [r3, #13]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	2202      	movs	r2, #2
 8001fec:	f7ff f8e8 	bl	80011c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT1Short(false);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff fc48 	bl	800188c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fc19 	bl	8001838 <_ZNK5Model8isT1LongEv>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <_ZN10BWSettings6UpdateEv+0x1d0>
		model->setT1Long(false);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2100      	movs	r1, #0
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fc1d 	bl	8001852 <_ZN5Model9setT1LongEb>
	}

	//------------------SW_PW------------------
	if(model->isT2Short()){
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fc62 	bl	80018e6 <_ZNK5Model9isT2ShortEv>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80e7 	beq.w	80021f8 <_ZN10BWSettings6UpdateEv+0x3b0>

		if(position == 0){
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7b5b      	ldrb	r3, [r3, #13]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d124      	bne.n	800207c <_ZN10BWSettings6UpdateEv+0x234>
			if((preis/1000 - (preis/10000)*10) == 9){
 8002032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002036:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <_ZN10BWSettings6UpdateEv+0x31c>)
 8002038:	fb82 1203 	smull	r1, r2, r2, r3
 800203c:	1192      	asrs	r2, r2, #6
 800203e:	17db      	asrs	r3, r3, #31
 8002040:	1ad1      	subs	r1, r2, r3
 8002042:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002046:	4a48      	ldr	r2, [pc, #288]	; (8002168 <_ZN10BWSettings6UpdateEv+0x320>)
 8002048:	fb82 0203 	smull	r0, r2, r2, r3
 800204c:	1312      	asrs	r2, r2, #12
 800204e:	17db      	asrs	r3, r3, #31
 8002050:	1a9a      	subs	r2, r3, r2
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	440b      	add	r3, r1
 800205c:	2b09      	cmp	r3, #9
 800205e:	d107      	bne.n	8002070 <_ZN10BWSettings6UpdateEv+0x228>
				preis -= 9000;
 8002060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002064:	f5a3 530c 	sub.w	r3, r3, #8960	; 0x2300
 8002068:	3b28      	subs	r3, #40	; 0x28
 800206a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800206e:	e005      	b.n	800207c <_ZN10BWSettings6UpdateEv+0x234>
			}else{
				preis += 1000;
 8002070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002074:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002078:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
		}

		if(position == 1){
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7b5b      	ldrb	r3, [r3, #13]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d12c      	bne.n	80020de <_ZN10BWSettings6UpdateEv+0x296>
			if((preis/100 - (preis/1000)*10) % 100 == 9){
 8002084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <_ZN10BWSettings6UpdateEv+0x324>)
 800208a:	fb82 1203 	smull	r1, r2, r2, r3
 800208e:	1152      	asrs	r2, r2, #5
 8002090:	17db      	asrs	r3, r3, #31
 8002092:	1ad1      	subs	r1, r2, r3
 8002094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002098:	4a32      	ldr	r2, [pc, #200]	; (8002164 <_ZN10BWSettings6UpdateEv+0x31c>)
 800209a:	fb82 0203 	smull	r0, r2, r2, r3
 800209e:	1192      	asrs	r2, r2, #6
 80020a0:	17db      	asrs	r3, r3, #31
 80020a2:	1a9a      	subs	r2, r3, r2
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	18ca      	adds	r2, r1, r3
 80020ae:	4b2f      	ldr	r3, [pc, #188]	; (800216c <_ZN10BWSettings6UpdateEv+0x324>)
 80020b0:	fb83 1302 	smull	r1, r3, r3, r2
 80020b4:	1159      	asrs	r1, r3, #5
 80020b6:	17d3      	asrs	r3, r2, #31
 80020b8:	1acb      	subs	r3, r1, r3
 80020ba:	2164      	movs	r1, #100	; 0x64
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b09      	cmp	r3, #9
 80020c4:	d106      	bne.n	80020d4 <_ZN10BWSettings6UpdateEv+0x28c>
				preis -= 900;
 80020c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ca:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 80020ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020d2:	e004      	b.n	80020de <_ZN10BWSettings6UpdateEv+0x296>
			}else{
				preis += 100;
 80020d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020d8:	3364      	adds	r3, #100	; 0x64
 80020da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
		}

		if(position == 2){
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7b5b      	ldrb	r3, [r3, #13]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d121      	bne.n	800212a <_ZN10BWSettings6UpdateEv+0x2e2>
			if((preis/10 - (preis/100)*10) == 9){
 80020e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ea:	4a21      	ldr	r2, [pc, #132]	; (8002170 <_ZN10BWSettings6UpdateEv+0x328>)
 80020ec:	fb82 1203 	smull	r1, r2, r2, r3
 80020f0:	1092      	asrs	r2, r2, #2
 80020f2:	17db      	asrs	r3, r3, #31
 80020f4:	1ad1      	subs	r1, r2, r3
 80020f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <_ZN10BWSettings6UpdateEv+0x324>)
 80020fc:	fb82 0203 	smull	r0, r2, r2, r3
 8002100:	1152      	asrs	r2, r2, #5
 8002102:	17db      	asrs	r3, r3, #31
 8002104:	1a9a      	subs	r2, r3, r2
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	2b09      	cmp	r3, #9
 8002112:	d105      	bne.n	8002120 <_ZN10BWSettings6UpdateEv+0x2d8>
				preis -= 90;
 8002114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002118:	3b5a      	subs	r3, #90	; 0x5a
 800211a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800211e:	e004      	b.n	800212a <_ZN10BWSettings6UpdateEv+0x2e2>
			}else{
				preis += 10;
 8002120:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002124:	330a      	adds	r3, #10
 8002126:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
		}


		if(position == 3){
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	7b5b      	ldrb	r3, [r3, #13]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d125      	bne.n	800217e <_ZN10BWSettings6UpdateEv+0x336>
			if((preis - (preis/10)*10 ) == 9){
 8002132:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <_ZN10BWSettings6UpdateEv+0x328>)
 8002138:	fb83 2301 	smull	r2, r3, r3, r1
 800213c:	109a      	asrs	r2, r3, #2
 800213e:	17cb      	asrs	r3, r1, #31
 8002140:	1ad2      	subs	r2, r2, r3
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	1aca      	subs	r2, r1, r3
 800214c:	2a09      	cmp	r2, #9
 800214e:	d111      	bne.n	8002174 <_ZN10BWSettings6UpdateEv+0x32c>
				preis -= 9;
 8002150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002154:	3b09      	subs	r3, #9
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800215a:	e010      	b.n	800217e <_ZN10BWSettings6UpdateEv+0x336>
 800215c:	42c80000 	.word	0x42c80000
 8002160:	0800a728 	.word	0x0800a728
 8002164:	10624dd3 	.word	0x10624dd3
 8002168:	68db8bad 	.word	0x68db8bad
 800216c:	51eb851f 	.word	0x51eb851f
 8002170:	66666667 	.word	0x66666667
			}else{
				preis += 1;
 8002174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002178:	3301      	adds	r3, #1
 800217a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			}
		}
		model->setBienenwachsPreis(preis/100);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	4a56      	ldr	r2, [pc, #344]	; (80022e0 <_ZN10BWSettings6UpdateEv+0x498>)
 8002188:	fb82 0203 	smull	r0, r2, r2, r3
 800218c:	1152      	asrs	r2, r2, #5
 800218e:	17db      	asrs	r3, r3, #31
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	ee07 3a90 	vmov	s15, r3
 8002196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800219a:	eeb0 0a67 	vmov.f32	s0, s15
 800219e:	4608      	mov	r0, r1
 80021a0:	f7ff fcd5 	bl	8001b4e <_ZN5Model19setBienenwachsPreisEf>
		lcd->Write(line1,0,result,12,0);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689c      	ldr	r4, [r3, #8]
 80021a8:	f107 020c 	add.w	r2, r7, #12
 80021ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f008 f908 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80021b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80021bc:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	230c      	movs	r3, #12
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	2200      	movs	r2, #0
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe ff8a 	bl	80010e6 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEhPchh>
 80021d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80021d6:	4618      	mov	r0, r3
 80021d8:	f008 f8c6 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		lcd->SetCursorPosition(position, 2,true);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6898      	ldr	r0, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b59      	ldrb	r1, [r3, #13]
 80021e4:	2301      	movs	r3, #1
 80021e6:	2202      	movs	r2, #2
 80021e8:	f7fe ffea 	bl	80011c0 <_ZN3LCD17SetCursorPositionEhhb>
		model->setT2Short(false);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fb84 	bl	8001900 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fb55 	bl	80018ac <_ZNK5Model8isT2LongEv>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <_ZN10BWSettings6UpdateEv+0x3cc>
		model->setT2Long(false);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fb59 	bl	80018c6 <_ZN5Model9setT2LongEb>
	}

	//------------------SW_Summe------------------
	if(model->isT3Short()){
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fb9e 	bl	800195a <_ZNK5Model9isT3ShortEv>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <_ZN10BWSettings6UpdateEv+0x3e8>
		//-

		model->setT3Short(false);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fba2 	bl	8001974 <_ZN5Model10setT3ShortEb>
	}
	if(model->isT3Long()){
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb73 	bl	8001920 <_ZNK5Model8isT3LongEv>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <_ZN10BWSettings6UpdateEv+0x404>
		model->setT3Long(false);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fb77 	bl	800193a <_ZN5Model9setT3LongEb>
	}


	//------------------SW_Total------------------
	if(model->isT4Long()){
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fb9f 	bl	8001994 <_ZNK5Model8isT4LongEv>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <_ZN10BWSettings6UpdateEv+0x420>
		model->setT4Long(false);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fba3 	bl	80019ae <_ZN5Model9setT4LongEb>
	}
	if(model->isT4Short()){
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbae 	bl	80019ce <_ZNK5Model9isT4ShortEv>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <_ZN10BWSettings6UpdateEv+0x43c>
		model->setT4Short(false);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fbb2 	bl	80019e8 <_ZN5Model10setT4ShortEb>
	}


	//------------------SW_Tar------------------
	if(model->isT5Long()){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fbbd 	bl	8001a08 <_ZNK5Model8isT5LongEv>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <_ZN10BWSettings6UpdateEv+0x464>
		//Neuer Wert speichern
		init = false;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	739a      	strb	r2, [r3, #14]
		screen = Model::E_MAIN_SCRREN;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2203      	movs	r2, #3
 800229e:	731a      	strb	r2, [r3, #12]
		model->setT5Long(false);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fbbb 	bl	8001a22 <_ZN5Model9setT5LongEb>
	}
	if(model->isT5Short()){
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbc6 	bl	8001a42 <_ZNK5Model9isT5ShortEv>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <_ZN10BWSettings6UpdateEv+0x480>
		model->setT5Short(false);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fbca 	bl	8001a5c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7b1c      	ldrb	r4, [r3, #12]
	string line1 = "Bienenwachs";
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	4618      	mov	r0, r3
 80022d2:	f008 f849 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return screen;
 80022d6:	4623      	mov	r3, r4
}
 80022d8:	4618      	mov	r0, r3
 80022da:	378c      	adds	r7, #140	; 0x8c
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	51eb851f 	.word	0x51eb851f

080022e4 <_ZN10BaseScreenC1Ev>:
 *      Author: marcel
 */
#include "BaseScreen.h"
#include "main.h"

BaseScreen::BaseScreen(){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_BW_GPIO_Port, LED_BW_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2110      	movs	r1, #16
 80022f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f4:	f000 fe30 	bl	8002f58 <HAL_GPIO_WritePin>
}
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZN10MainScreenC1EP5ModelP3LCD>:
#include "MainScreen.h"

using namespace std;


MainScreen::MainScreen(Model *model, LCD *lcd) {
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ffe7 	bl	80022e4 <_ZN10BaseScreenC1Ev>
	this->model = model;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	609a      	str	r2, [r3, #8]
	this->screen = Model::E_MAIN_SCRREN;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2203      	movs	r2, #3
 8002326:	731a      	strb	r2, [r3, #12]
}
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <_ZN10MainScreen6UpdateEv>:
void MainScreen::Init(){
	model->setLoadCellOffset1(model->getLoadCell1());
	model->setLoadCellOffset2(model->getLoadCell2());
}

Model::ESCREEN MainScreen::Update(){
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	ed2d 8b02 	vpush	{d8}
 800233a:	b091      	sub	sp, #68	; 0x44
 800233c:	af04      	add	r7, sp, #16
 800233e:	6078      	str	r0, [r7, #4]

	screen = Model::E_MAIN_SCRREN;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	731a      	strb	r2, [r3, #12]

	//------------------Screen Update------------------
	int prize = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(model->getWachstyp() == Model::E_BIENENWACHS){
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc1b 	bl	8001b8a <_ZNK5Model11getWachstypEv>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01a      	beq.n	800239a <_ZN10MainScreen6UpdateEv+0x66>
		prize = Tools::Round5Rp((model->getWeight())*model->getBienenwachsPreis());
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fa49 	bl	8001800 <_ZNK5Model9getWeightEv>
 800236e:	4603      	mov	r3, r0
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fbd7 	bl	8001b30 <_ZNK5Model19getBienenwachsPreisEv>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	ee68 7a27 	vmul.f32	s15, s16, s15
 800238a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238e:	ee17 0a90 	vmov	r0, s15
 8002392:	f7ff fd0f 	bl	8001db4 <_ZN5Tools8Round5RpEl>
 8002396:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002398:	e026      	b.n	80023e8 <_ZN10MainScreen6UpdateEv+0xb4>
	}else if(model->getWachstyp() == Model::E_PARAFINWACHS){
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fbf3 	bl	8001b8a <_ZNK5Model11getWachstypEv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d019      	beq.n	80023e8 <_ZN10MainScreen6UpdateEv+0xb4>
		prize = Tools::Round5Rp((model->getWeight())*model->getParafinwachsPreis());
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fa21 	bl	8001800 <_ZNK5Model9getWeightEv>
 80023be:	4603      	mov	r3, r0
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fbcd 	bl	8001b6c <_ZNK5Model20getParafinwachsPreisEv>
 80023d2:	eef0 7a40 	vmov.f32	s15, s0
 80023d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 0a90 	vmov	r0, s15
 80023e2:	f7ff fce7 	bl	8001db4 <_ZN5Tools8Round5RpEl>
 80023e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	}


	char *asciiWeight = {Tools::intToAsciiChar(model->getWeight(),3)};
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fa07 	bl	8001800 <_ZNK5Model9getWeightEv>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2103      	movs	r1, #3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fc30 	bl	8001c5c <_ZN5Tools14intToAsciiCharElh>
 80023fc:	62b8      	str	r0, [r7, #40]	; 0x28

	char w[9];
	char p[9];
	if(model->getWeight() < 0){
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f9fc 	bl	8001800 <_ZNK5Model9getWeightEv>
 8002408:	4603      	mov	r3, r0
 800240a:	b29b      	uxth	r3, r3
 800240c:	0bdb      	lsrs	r3, r3, #15
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <_ZN10MainScreen6UpdateEv+0xe6>
		w[0] = '-';
 8002414:	232d      	movs	r3, #45	; 0x2d
 8002416:	763b      	strb	r3, [r7, #24]
 8002418:	e001      	b.n	800241e <_ZN10MainScreen6UpdateEv+0xea>
	}else{
		w[0] = ' ';
 800241a:	2320      	movs	r3, #32
 800241c:	763b      	strb	r3, [r7, #24]
	}

	w[1] = asciiWeight[0];
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	767b      	strb	r3, [r7, #25]
	w[2] = asciiWeight[1];
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	76bb      	strb	r3, [r7, #26]
	w[3] = asciiWeight[2];
 800242a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	76fb      	strb	r3, [r7, #27]
	w[4] = asciiWeight[3];
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	78db      	ldrb	r3, [r3, #3]
 8002434:	773b      	strb	r3, [r7, #28]
	w[5] = asciiWeight[4];
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	777b      	strb	r3, [r7, #29]
	w[6] = asciiWeight[5];
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	795b      	ldrb	r3, [r3, #5]
 8002440:	77bb      	strb	r3, [r7, #30]
	w[7] = ' ';
 8002442:	2320      	movs	r3, #32
 8002444:	77fb      	strb	r3, [r7, #31]
	w[8] = 'k';
 8002446:	236b      	movs	r3, #107	; 0x6b
 8002448:	f887 3020 	strb.w	r3, [r7, #32]
	w[9] = 'g';
 800244c:	2367      	movs	r3, #103	; 0x67
 800244e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	char* asciiPrize = {Tools::intToAsciiChar(prize, 2)};
 8002452:	2102      	movs	r1, #2
 8002454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002456:	f7ff fc01 	bl	8001c5c <_ZN5Tools14intToAsciiCharElh>
 800245a:	6278      	str	r0, [r7, #36]	; 0x24
	p[0] = asciiPrize[0];
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	733b      	strb	r3, [r7, #12]
	p[1] = asciiPrize[1];
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	785b      	ldrb	r3, [r3, #1]
 8002466:	737b      	strb	r3, [r7, #13]
	p[2] = asciiPrize[2];
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	789b      	ldrb	r3, [r3, #2]
 800246c:	73bb      	strb	r3, [r7, #14]
	p[3] = asciiPrize[3];
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	73fb      	strb	r3, [r7, #15]
	p[4] = asciiPrize[4];
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	743b      	strb	r3, [r7, #16]
	p[5] = asciiPrize[5];
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	795b      	ldrb	r3, [r3, #5]
 800247e:	747b      	strb	r3, [r7, #17]
	p[6] = ' ';
 8002480:	2320      	movs	r3, #32
 8002482:	74bb      	strb	r3, [r7, #18]
	p[7] = 'F';
 8002484:	2346      	movs	r3, #70	; 0x46
 8002486:	74fb      	strb	r3, [r7, #19]
	p[8] = 'r';
 8002488:	2372      	movs	r3, #114	; 0x72
 800248a:	753b      	strb	r3, [r7, #20]



	lcd->Write(w,10,2,p,9,3);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	f107 0118 	add.w	r1, r7, #24
 8002494:	2303      	movs	r3, #3
 8002496:	9302      	str	r3, [sp, #8]
 8002498:	2309      	movs	r3, #9
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2302      	movs	r3, #2
 80024a4:	220a      	movs	r2, #10
 80024a6:	f7fe fdb1 	bl	800100c <_ZN3LCD5WriteEPchhS0_hh>

	//------------------Bienenwachs------------------
	if(model->isT1Short()){
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f9df 	bl	8001872 <_ZNK5Model9isT1ShortEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00b      	beq.n	80024d2 <_ZN10MainScreen6UpdateEv+0x19e>
		//Binenwach select
		model->setWachstyp(Model::E_BIENENWACHS);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2101      	movs	r1, #1
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fb6f 	bl	8001ba4 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT1Short(false);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff f9dd 	bl	800188c <_ZN5Model10setT1ShortEb>
	}
	if(model->isT1Long()){
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff f9ae 	bl	8001838 <_ZNK5Model8isT1LongEv>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <_ZN10MainScreen6UpdateEv+0x1c0>
		screen = Model::E_BW_SETTINGS;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	731a      	strb	r2, [r3, #12]
		model->setT1Long(false);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f9af 	bl	8001852 <_ZN5Model9setT1LongEb>
	}


	//------------------Parafinwachs------------------
	if(model->isT2Short()){
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff f9f4 	bl	80018e6 <_ZNK5Model9isT2ShortEv>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <_ZN10MainScreen6UpdateEv+0x1e8>
		//Parafin wachs select
		model->setWachstyp(Model::E_PARAFINWACHS);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2102      	movs	r1, #2
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb4a 	bl	8001ba4 <_ZN5Model11setWachstypENS_6EWACHSE>
		model->setT2Short(false);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f9f2 	bl	8001900 <_ZN5Model10setT2ShortEb>
	}
	if(model->isT2Long()){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff f9c3 	bl	80018ac <_ZNK5Model8isT2LongEv>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <_ZN10MainScreen6UpdateEv+0x20a>
		//Parafinwachs settings
		screen = Model::E_PW_SETTINGS;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	731a      	strb	r2, [r3, #12]
		model->setT2Long(false);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff f9c4 	bl	80018c6 <_ZN5Model9setT2LongEb>
	}

	//------------------Summe------------------
	if(model->isT3Long()){
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f9ec 	bl	8001920 <_ZNK5Model8isT3LongEv>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <_ZN10MainScreen6UpdateEv+0x226>
		model->setT3Long(false);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff f9f0 	bl	800193a <_ZN5Model9setT3LongEb>
	}

	if(model->isT3Short()){
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f9fb 	bl	800195a <_ZNK5Model9isT3ShortEv>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d01b      	beq.n	80025a2 <_ZN10MainScreen6UpdateEv+0x26e>
		//Summe Aktivierten oder summieren
		model->setT3Short(false);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff f9ff 	bl	8001974 <_ZN5Model10setT3ShortEb>
		if(summeActive){
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7b9b      	ldrb	r3, [r3, #14]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d006      	beq.n	800258c <_ZN10MainScreen6UpdateEv+0x258>
			summeCounter++;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7b5b      	ldrb	r3, [r3, #13]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	735a      	strb	r2, [r3, #13]
 800258a:	e00a      	b.n	80025a2 <_ZN10MainScreen6UpdateEv+0x26e>
		}else{
			summeActive = true;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	739a      	strb	r2, [r3, #14]
			summeCounter= 1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	735a      	strb	r2, [r3, #13]
			HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_RESET);
 8002598:	2200      	movs	r2, #0
 800259a:	2101      	movs	r1, #1
 800259c:	4834      	ldr	r0, [pc, #208]	; (8002670 <_ZN10MainScreen6UpdateEv+0x33c>)
 800259e:	f000 fcdb 	bl	8002f58 <HAL_GPIO_WritePin>
		}
	}

	//------------------Total------------------
	if(model->isT4Long()){
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f9f4 	bl	8001994 <_ZNK5Model8isT4LongEv>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <_ZN10MainScreen6UpdateEv+0x290>
		model->setT4Long(false);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff f9f8 	bl	80019ae <_ZN5Model9setT4LongEb>
		screen = Model::E_TIME_SETTINGS;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2204      	movs	r2, #4
 80025c2:	731a      	strb	r2, [r3, #12]
	}
	if(model->isT4Short()){
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fa00 	bl	80019ce <_ZNK5Model9isT4ShortEv>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <_ZN10MainScreen6UpdateEv+0x2c2>
		model->setT4Short(false);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fa04 	bl	80019e8 <_ZN5Model10setT4ShortEb>
		summeActive = false;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	739a      	strb	r2, [r3, #14]
		HAL_GPIO_WritePin(LED_SUM_GPIO_Port, LED_SUM_Pin, GPIO_PIN_SET);
 80025e6:	2201      	movs	r2, #1
 80025e8:	2101      	movs	r1, #1
 80025ea:	4821      	ldr	r0, [pc, #132]	; (8002670 <_ZN10MainScreen6UpdateEv+0x33c>)
 80025ec:	f000 fcb4 	bl	8002f58 <HAL_GPIO_WritePin>
		summeCounter = 0;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	735a      	strb	r2, [r3, #13]
	}


	//------------------Tar------------------
	if(model->isT5Long()){
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fa04 	bl	8001a08 <_ZNK5Model8isT5LongEv>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01d      	beq.n	8002642 <_ZN10MainScreen6UpdateEv+0x30e>
		model->setT5Long(false);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fa08 	bl	8001a22 <_ZN5Model9setT5LongEb>
		model->setLoadCellOffset1(model->getLoadCell1());
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685c      	ldr	r4, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f8bc 	bl	8001798 <_ZNK5Model12getLoadCell1Ev>
 8002620:	4603      	mov	r3, r0
 8002622:	4619      	mov	r1, r3
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff fa69 	bl	8001afc <_ZN5Model18setLoadCellOffset1El>
		model->setLoadCellOffset2(model->getLoadCell2());
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685c      	ldr	r4, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f8ca 	bl	80017cc <_ZNK5Model12getLoadCell2Ev>
 8002638:	4603      	mov	r3, r0
 800263a:	4619      	mov	r1, r3
 800263c:	4620      	mov	r0, r4
 800263e:	f7ff faf0 	bl	8001c22 <_ZN5Model18setLoadCellOffset2El>
	}
	if(model->isT5Short()){
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f9fb 	bl	8001a42 <_ZNK5Model9isT5ShortEv>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <_ZN10MainScreen6UpdateEv+0x32a>
		model->setT5Short(false);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff f9ff 	bl	8001a5c <_ZN5Model10setT5ShortEb>
	}

	return screen;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7b1b      	ldrb	r3, [r3, #12]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3734      	adds	r7, #52	; 0x34
 8002666:	46bd      	mov	sp, r7
 8002668:	ecbd 8b02 	vpop	{d8}
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	48000400 	.word	0x48000400

08002674 <_ZN10PWSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "PWSettings.h"

PWSettings::PWSettings(Model *model, LCD *lcd) : BaseScreen() {
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fe2e 	bl	80022e4 <_ZN10BaseScreenC1Ev>
	this->model = model;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	605a      	str	r2, [r3, #4]

}
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4618      	mov	r0, r3
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <_ZN13ScreenControlC1EP5Model>:
#include <string>




ScreenControl::ScreenControl(Model *model) {
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
	this->model = model;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	605a      	str	r2, [r3, #4]
	lcd  = new  LCD();
 80026a8:	2001      	movs	r0, #1
 80026aa:	f007 fe02 	bl	800a2b2 <_Znwj>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461c      	mov	r4, r3
 80026b2:	4620      	mov	r0, r4
 80026b4:	f7fe fbde 	bl	8000e74 <_ZN3LCDC1Ev>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	609c      	str	r4, [r3, #8]
	mainScreen = new MainScreen(this->model, lcd);
 80026bc:	2010      	movs	r0, #16
 80026be:	f007 fdf8 	bl	800a2b2 <_Znwj>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461c      	mov	r4, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6859      	ldr	r1, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	461a      	mov	r2, r3
 80026d0:	4620      	mov	r0, r4
 80026d2:	f7ff fe16 	bl	8002302 <_ZN10MainScreenC1EP5ModelP3LCD>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60dc      	str	r4, [r3, #12]
	pwSettings = new PWSettings(model, lcd);
 80026da:	2010      	movs	r0, #16
 80026dc:	f007 fde9 	bl	800a2b2 <_Znwj>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461c      	mov	r4, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	461a      	mov	r2, r3
 80026ea:	6839      	ldr	r1, [r7, #0]
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ffc1 	bl	8002674 <_ZN10PWSettingsC1EP5ModelP3LCD>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	611c      	str	r4, [r3, #16]
	bwSettings = new BWSettings(model, lcd);
 80026f6:	2010      	movs	r0, #16
 80026f8:	f007 fddb 	bl	800a2b2 <_Znwj>
 80026fc:	4603      	mov	r3, r0
 80026fe:	461c      	mov	r4, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	461a      	mov	r2, r3
 8002706:	6839      	ldr	r1, [r7, #0]
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fb85 	bl	8001e18 <_ZN10BWSettingsC1EP5ModelP3LCD>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	615c      	str	r4, [r3, #20]
	timeSettings = new TimeSettings(model, lcd);
 8002712:	2010      	movs	r0, #16
 8002714:	f007 fdcd 	bl	800a2b2 <_Znwj>
 8002718:	4603      	mov	r3, r0
 800271a:	461c      	mov	r4, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	461a      	mov	r2, r3
 8002722:	6839      	ldr	r1, [r7, #0]
 8002724:	4620      	mov	r0, r4
 8002726:	f000 f8a5 	bl	8002874 <_ZN12TimeSettingsC1EP5ModelP3LCD>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	619c      	str	r4, [r3, #24]
}
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <_ZN13ScreenControl10InitScreenEv>:

void ScreenControl::InitScreen(){
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b09d      	sub	sp, #116	; 0x74
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
	lcd->InitLCD();
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe fba1 	bl	8000e8c <_ZN3LCD7InitLCDEv>





	string i = "10.000 kg";
 800274a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800274e:	4618      	mov	r0, r3
 8002750:	f007 fdc8 	bl	800a2e4 <_ZNSaIcEC1Ev>
 8002754:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	4929      	ldr	r1, [pc, #164]	; (8002804 <_ZN13ScreenControl10InitScreenEv+0xcc>)
 800275e:	4618      	mov	r0, r3
 8002760:	f007 fe64 	bl	800a42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002768:	4618      	mov	r0, r3
 800276a:	f007 fdbc 	bl	800a2e6 <_ZNSaIcED1Ev>
	string a = "02.25 Fr";
 800276e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002772:	4618      	mov	r0, r3
 8002774:	f007 fdb6 	bl	800a2e4 <_ZNSaIcEC1Ev>
 8002778:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	4921      	ldr	r1, [pc, #132]	; (8002808 <_ZN13ScreenControl10InitScreenEv+0xd0>)
 8002782:	4618      	mov	r0, r3
 8002784:	f007 fe52 	bl	800a42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8002788:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278c:	4618      	mov	r0, r3
 800278e:	f007 fdaa 	bl	800a2e6 <_ZNSaIcED1Ev>
	lcd->Write(i,a);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689c      	ldr	r4, [r3, #8]
 8002796:	f107 0220 	add.w	r2, r7, #32
 800279a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f007 fe11 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80027a6:	f107 0208 	add.w	r2, r7, #8
 80027aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f007 fe09 	bl	800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 80027b6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80027ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027be:	4619      	mov	r1, r3
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7fe fbc7 	bl	8000f54 <_ZN3LCD5WriteENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_>
 80027c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027ca:	4618      	mov	r0, r3
 80027cc:	f007 fdcc 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80027d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027d4:	4618      	mov	r0, r3
 80027d6:	f007 fdc7 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	currentScreen = Model::E_MAIN_SCRREN;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	701a      	strb	r2, [r3, #0]
	nextScreen = Model::E_MAIN_SCRREN;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2203      	movs	r2, #3
 80027e4:	705a      	strb	r2, [r3, #1]
	string a = "02.25 Fr";
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	4618      	mov	r0, r3
 80027ec:	f007 fdbc 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	string i = "10.000 kg";
 80027f0:	f107 0320 	add.w	r3, r7, #32
 80027f4:	4618      	mov	r0, r3
 80027f6:	f007 fdb7 	bl	800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

}
 80027fa:	bf00      	nop
 80027fc:	3774      	adds	r7, #116	; 0x74
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}
 8002802:	bf00      	nop
 8002804:	0800a734 	.word	0x0800a734
 8002808:	0800a740 	.word	0x0800a740

0800280c <_ZN13ScreenControl6UpdateEv>:


void ScreenControl::Update(){
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

	this->currentScreen = this->nextScreen;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	785a      	ldrb	r2, [r3, #1]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	701a      	strb	r2, [r3, #0]


	switch(currentScreen){
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b04      	cmp	r3, #4
 8002822:	d822      	bhi.n	800286a <_ZN13ScreenControl6UpdateEv+0x5e>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <_ZN13ScreenControl6UpdateEv+0x20>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002855 	.word	0x08002855
 8002830:	08002869 	.word	0x08002869
 8002834:	08002869 	.word	0x08002869
 8002838:	08002841 	.word	0x08002841
 800283c:	08002869 	.word	0x08002869

	case Model::E_MAIN_SCRREN:
		nextScreen = mainScreen->Update();
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fd75 	bl	8002334 <_ZN10MainScreen6UpdateEv>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	705a      	strb	r2, [r3, #1]
		break;
 8002852:	e00a      	b.n	800286a <_ZN13ScreenControl6UpdateEv+0x5e>
	case Model::E_BW_SETTINGS:
		nextScreen = bwSettings->Update();
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff faf5 	bl	8001e48 <_ZN10BWSettings6UpdateEv>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	705a      	strb	r2, [r3, #1]
		break;
 8002866:	e000      	b.n	800286a <_ZN13ScreenControl6UpdateEv+0x5e>
	case Model::E_PW_SETTINGS:

		break;
 8002868:	bf00      	nop
	case Model::E_LOG_BOOK:
		break;
	}


}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop

08002874 <_ZN12TimeSettingsC1EP5ModelP3LCD>:
 *      Author: marcel
 */

#include "TimeSettings.h"

TimeSettings::TimeSettings(Model *model, LCD *lcd) :BaseScreen() {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fd2e 	bl	80022e4 <_ZN10BaseScreenC1Ev>
	this->model = model;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	605a      	str	r2, [r3, #4]
	this->lcd = lcd;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	609a      	str	r2, [r3, #8]

}
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028a4:	f7fe f85c 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80028a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80028aa:	e003      	b.n	80028b4 <LoopCopyDataInit>

080028ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80028ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80028b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80028b2:	3104      	adds	r1, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80028b4:	480a      	ldr	r0, [pc, #40]	; (80028e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80028b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80028ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80028bc:	d3f6      	bcc.n	80028ac <CopyDataInit>
	ldr	r2, =_sbss
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80028c0:	e002      	b.n	80028c8 <LoopFillZerobss>

080028c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80028c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80028c4:	f842 3b04 	str.w	r3, [r2], #4

080028c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <LoopForever+0x16>)
	cmp	r2, r3
 80028ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80028cc:	d3f9      	bcc.n	80028c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ce:	f007 fdd9 	bl	800a484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80028d2:	f7fd fecb 	bl	800066c <main>

080028d6 <LoopForever>:

LoopForever:
    b LoopForever
 80028d6:	e7fe      	b.n	80028d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80028d8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80028dc:	0800a824 	.word	0x0800a824
	ldr	r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80028e4:	200001f4 	.word	0x200001f4
	ldr	r2, =_sbss
 80028e8:	200001f4 	.word	0x200001f4
	ldr	r3, = _ebss
 80028ec:	20001314 	.word	0x20001314

080028f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80028f0:	e7fe      	b.n	80028f0 <ADC1_2_IRQHandler>

080028f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 f95f 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002902:	2000      	movs	r0, #0
 8002904:	f000 f80e 	bl	8002924 <HAL_InitTick>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	71fb      	strb	r3, [r7, #7]
 8002912:	e001      	b.n	8002918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002914:	f7fd ff70 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002918:	79fb      	ldrb	r3, [r7, #7]
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_InitTick+0x6c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d023      	beq.n	8002980 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_InitTick+0x70>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b14      	ldr	r3, [pc, #80]	; (8002990 <HAL_InitTick+0x6c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f96b 	bl	8002c2a <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d809      	bhi.n	8002974 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 f935 	bl	8002bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_InitTick+0x74>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	e007      	b.n	8002984 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e004      	b.n	8002984 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e001      	b.n	8002984 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000008 	.word	0x20000008
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_IncTick+0x20>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x24>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <HAL_IncTick+0x24>)
 80029ae:	6013      	str	r3, [r2, #0]
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000008 	.word	0x20000008
 80029c0:	20000378 	.word	0x20000378

080029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return uwTick;
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <HAL_GetTick+0x14>)
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000378 	.word	0x20000378

080029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff ffee 	bl	80029c4 <HAL_GetTick>
 80029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d005      	beq.n	8002a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_Delay+0x40>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4413      	add	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a02:	bf00      	nop
 8002a04:	f7ff ffde 	bl	80029c4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d8f7      	bhi.n	8002a04 <HAL_Delay+0x28>
  {
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000008 	.word	0x20000008

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	; (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff3e 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff8e 	bl	8002b14 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5d 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff31 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa2 	bl	8002b7c <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e14e      	b.n	8002ef2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8140 	beq.w	8002eec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d00b      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d007      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c80:	2b11      	cmp	r3, #17
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d130      	bne.n	8002cee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0201 	and.w	r2, r3, #1
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0xea>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d123      	bne.n	8002d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 809a 	beq.w	8002eec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	4b55      	ldr	r3, [pc, #340]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	4a54      	ldr	r2, [pc, #336]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc4:	4b52      	ldr	r3, [pc, #328]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd0:	4a50      	ldr	r2, [pc, #320]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dfa:	d013      	beq.n	8002e24 <HAL_GPIO_Init+0x1e0>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <HAL_GPIO_Init+0x2d4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <HAL_GPIO_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a45      	ldr	r2, [pc, #276]	; (8002f1c <HAL_GPIO_Init+0x2d8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <HAL_GPIO_Init+0x1d8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a44      	ldr	r2, [pc, #272]	; (8002f20 <HAL_GPIO_Init+0x2dc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_GPIO_Init+0x1d4>
 8002e14:	2303      	movs	r3, #3
 8002e16:	e006      	b.n	8002e26 <HAL_GPIO_Init+0x1e2>
 8002e18:	2307      	movs	r3, #7
 8002e1a:	e004      	b.n	8002e26 <HAL_GPIO_Init+0x1e2>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e002      	b.n	8002e26 <HAL_GPIO_Init+0x1e2>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_GPIO_Init+0x1e2>
 8002e24:	2300      	movs	r3, #0
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	f002 0203 	and.w	r2, r2, #3
 8002e2c:	0092      	lsls	r2, r2, #2
 8002e2e:	4093      	lsls	r3, r2
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e36:	4937      	ldr	r1, [pc, #220]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e44:	4b37      	ldr	r3, [pc, #220]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e68:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e92:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e98:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <HAL_GPIO_Init+0x2e0>)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f aea9 	bne.w	8002c54 <HAL_GPIO_Init+0x10>
  }
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000
 8002f18:	48000400 	.word	0x48000400
 8002f1c:	48000800 	.word	0x48000800
 8002f20:	48000c00 	.word	0x48000c00
 8002f24:	40010400 	.word	0x40010400

08002f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
 8002f44:	e001      	b.n	8002f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f46:	2300      	movs	r3, #0
 8002f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	807b      	strh	r3, [r7, #2]
 8002f64:	4613      	mov	r3, r2
 8002f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f68:	787b      	ldrb	r3, [r7, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f74:	e002      	b.n	8002f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e081      	b.n	800309e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d106      	bne.n	8002fb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7fd fb18 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2224      	movs	r2, #36	; 0x24
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fe8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d107      	bne.n	8003002 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e006      	b.n	8003010 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800300e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d104      	bne.n	8003022 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003020:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	ea42 0103 	orr.w	r1, r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	021a      	lsls	r2, r3, #8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b20      	cmp	r3, #32
 80030ba:	d138      	bne.n	800312e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e032      	b.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2224      	movs	r2, #36	; 0x24
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030f8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0201 	orr.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	d139      	bne.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800315c:	2302      	movs	r3, #2
 800315e:	e033      	b.n	80031c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	; 0x24
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800318e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	e000      	b.n	80031c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2302      	movs	r3, #2
  }
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031d6:	b08b      	sub	sp, #44	; 0x2c
 80031d8:	af06      	add	r7, sp, #24
 80031da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e104      	b.n	80033f0 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f006 fcca 	bl	8009b94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f002 fe4b 	bl	8005ea8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	687e      	ldr	r6, [r7, #4]
 800321a:	466d      	mov	r5, sp
 800321c:	f106 0410 	add.w	r4, r6, #16
 8003220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003224:	6823      	ldr	r3, [r4, #0]
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	1d33      	adds	r3, r6, #4
 800322a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800322c:	6838      	ldr	r0, [r7, #0]
 800322e:	f002 fe13 	bl	8005e58 <USB_CoreInit>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0d5      	b.n	80033f0 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f002 fe47 	bl	8005ede <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e04c      	b.n	80032f0 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003256:	7bfb      	ldrb	r3, [r7, #15]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	440b      	add	r3, r1
 8003266:	3301      	adds	r3, #1
 8003268:	2201      	movs	r2, #1
 800326a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003280:	7bfa      	ldrb	r2, [r7, #15]
 8003282:	7bfb      	ldrb	r3, [r7, #15]
 8003284:	b298      	uxth	r0, r3
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3336      	adds	r3, #54	; 0x36
 8003294:	4602      	mov	r2, r0
 8003296:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	1c5a      	adds	r2, r3, #1
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3303      	adds	r3, #3
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3338      	adds	r3, #56	; 0x38
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	333c      	adds	r3, #60	; 0x3c
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d6:	7bfa      	ldrb	r2, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3340      	adds	r3, #64	; 0x40
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d3ad      	bcc.n	8003256 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e044      	b.n	800338a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	3301      	adds	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3b5      	bcc.n	8003300 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	687e      	ldr	r6, [r7, #4]
 800339c:	466d      	mov	r5, sp
 800339e:	f106 0410 	add.w	r4, r6, #16
 80033a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a6:	6823      	ldr	r3, [r4, #0]
 80033a8:	602b      	str	r3, [r5, #0]
 80033aa:	1d33      	adds	r3, r6, #4
 80033ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033ae:	6838      	ldr	r0, [r7, #0]
 80033b0:	f002 fda2 	bl	8005ef8 <USB_DevInit>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2202      	movs	r2, #2
 80033be:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e014      	b.n	80033f0 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d102      	bne.n	80033e4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 fa63 	bl	80048aa <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 fd5b 	bl	8007ea4 <USB_DevDisconnect>

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_PCD_Start+0x16>
 800340a:	2302      	movs	r3, #2
 800340c:	e012      	b.n	8003434 <HAL_PCD_Start+0x3c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f002 fd2d 	bl	8005e7a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f004 fd26 	bl	8007e76 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 fd40 	bl	8007ece <USB_ReadInterrupts>
 800344e:	4603      	mov	r3, r0
 8003450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003458:	d102      	bne.n	8003460 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb5b 	bl	8003b16 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fd32 	bl	8007ece <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d112      	bne.n	800349c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003488:	b292      	uxth	r2, r2
 800348a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f006 fc21 	bl	8009cd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f91e 	bl	80036d8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 fd14 	bl	8007ece <USB_ReadInterrupts>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d10b      	bne.n	80034ca <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034c4:	b292      	uxth	r2, r2
 80034c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fcfd 	bl	8007ece <USB_ReadInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034de:	d10b      	bne.n	80034f8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	b292      	uxth	r2, r2
 80034f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f004 fce6 	bl	8007ece <USB_ReadInterrupts>
 8003502:	4603      	mov	r3, r0
 8003504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	d133      	bne.n	8003576 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003516:	b29a      	uxth	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0204 	bic.w	r2, r2, #4
 8003520:	b292      	uxth	r2, r2
 8003522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800352e:	b29a      	uxth	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0208 	bic.w	r2, r2, #8
 8003538:	b292      	uxth	r2, r2
 800353a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003550:	2100      	movs	r1, #0
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f006 fe70 	bl	800a238 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f006 fbf5 	bl	8009d48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003570:	b292      	uxth	r2, r2
 8003572:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f004 fca7 	bl	8007ece <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003594:	b29a      	uxth	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	b292      	uxth	r2, r2
 80035a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b6:	b292      	uxth	r2, r2
 80035b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0204 	orr.w	r2, r2, #4
 80035ce:	b292      	uxth	r2, r2
 80035d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f006 fb9d 	bl	8009d14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fc75 	bl	8007ece <USB_ReadInterrupts>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b80      	cmp	r3, #128	; 0x80
 80035ec:	d13f      	bne.n	800366e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003600:	b292      	uxth	r2, r2
 8003602:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d12b      	bne.n	8003668 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0204 	orr.w	r2, r2, #4
 8003622:	b292      	uxth	r2, r2
 8003624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0208 	orr.w	r2, r2, #8
 800363a:	b292      	uxth	r2, r2
 800363c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003650:	b29b      	uxth	r3, r3
 8003652:	089b      	lsrs	r3, r3, #2
 8003654:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800365e:	2101      	movs	r1, #1
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f006 fde9 	bl	800a238 <HAL_PCDEx_LPM_Callback>
 8003666:	e002      	b.n	800366e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f006 fb53 	bl	8009d14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f004 fc2b 	bl	8007ece <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003682:	d10e      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800368c:	b29a      	uxth	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003696:	b292      	uxth	r2, r2
 8003698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f006 fb0c 	bl	8009cba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fc11 	bl	8007ece <USB_ReadInterrupts>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d10b      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ca:	b292      	uxth	r2, r2
 80036cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_PCD_SetAddress+0x1a>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e013      	b.n	800371a <HAL_PCD_SetAddress+0x42>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	78fa      	ldrb	r2, [r7, #3]
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	4611      	mov	r1, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fb9f 	bl	8007e4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	4608      	mov	r0, r1
 800372c:	4611      	mov	r1, r2
 800372e:	461a      	mov	r2, r3
 8003730:	4603      	mov	r3, r0
 8003732:	70fb      	strb	r3, [r7, #3]
 8003734:	460b      	mov	r3, r1
 8003736:	803b      	strh	r3, [r7, #0]
 8003738:	4613      	mov	r3, r2
 800373a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003740:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da0e      	bge.n	8003766 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	4613      	mov	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	705a      	strb	r2, [r3, #1]
 8003764:	e00e      	b.n	8003784 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	f003 0207 	and.w	r2, r3, #7
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	4413      	add	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003790:	883a      	ldrh	r2, [r7, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	78ba      	ldrb	r2, [r7, #2]
 800379a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037ae:	78bb      	ldrb	r3, [r7, #2]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d102      	bne.n	80037ba <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_PCD_EP_Open+0xa6>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e00e      	b.n	80037e6 <HAL_PCD_EP_Open+0xc4>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68f9      	ldr	r1, [r7, #12]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f002 fbb0 	bl	8005f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80037e4:	7afb      	ldrb	r3, [r7, #11]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da0e      	bge.n	8003820 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	705a      	strb	r2, [r3, #1]
 800381e:	e00e      	b.n	800383e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 0207 	and.w	r2, r3, #7
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	f003 0307 	and.w	r3, r3, #7
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_PCD_EP_Close+0x6a>
 8003854:	2302      	movs	r3, #2
 8003856:	e00e      	b.n	8003876 <HAL_PCD_EP_Close+0x88>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fed6 	bl	8006618 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	460b      	mov	r3, r1
 800388c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	f003 0207 	and.w	r2, r3, #7
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2200      	movs	r2, #0
 80038bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038be:	7afb      	ldrb	r3, [r7, #11]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ca:	7afb      	ldrb	r3, [r7, #11]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	4618      	mov	r0, r3
 80038dc:	f003 f889 	bl	80069f2 <USB_EPStartXfer>
 80038e0:	e005      	b.n	80038ee <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6979      	ldr	r1, [r7, #20]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 f882 	bl	80069f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	f003 0207 	and.w	r2, r3, #7
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800391a:	681b      	ldr	r3, [r3, #0]
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	460b      	mov	r3, r1
 8003936:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003938:	7afb      	ldrb	r3, [r7, #11]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2200      	movs	r2, #0
 800396c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	2201      	movs	r2, #1
 8003972:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003974:	7afb      	ldrb	r3, [r7, #11]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	b2da      	uxtb	r2, r3
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003980:	7afb      	ldrb	r3, [r7, #11]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	4618      	mov	r0, r3
 8003992:	f003 f82e 	bl	80069f2 <USB_EPStartXfer>
 8003996:	e005      	b.n	80039a4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6979      	ldr	r1, [r7, #20]
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 f827 	bl	80069f2 <USB_EPStartXfer>
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3718      	adds	r7, #24
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 0207 	and.w	r2, r3, #7
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d901      	bls.n	80039cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e04c      	b.n	8003a66 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0e      	bge.n	80039f2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	705a      	strb	r2, [r3, #1]
 80039f0:	e00c      	b.n	8003a0c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_PCD_EP_SetStall+0x7e>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e01c      	b.n	8003a66 <HAL_PCD_EP_SetStall+0xb8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f004 f908 	bl	8007c50 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f004 fa49 	bl	8007eee <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b084      	sub	sp, #16
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	460b      	mov	r3, r1
 8003a78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	f003 020f 	and.w	r2, r3, #15
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d901      	bls.n	8003a8c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e040      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	da0e      	bge.n	8003ab2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	705a      	strb	r2, [r3, #1]
 8003ab0:	e00e      	b.n	8003ad0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 0207 	and.w	r2, r3, #7
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_EP_ClrStall+0x82>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e00e      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa0>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 f8f7 	bl	8007cf2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b08e      	sub	sp, #56	; 0x38
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b1e:	e2d1      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b28:	85fb      	strh	r3, [r7, #46]	; 0x2e
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003b36:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f040 8152 	bne.w	8003de4 <PCD_EP_ISR_Handler+0x2ce>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d150      	bne.n	8003bec <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	81fb      	strh	r3, [r7, #14]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	89fb      	ldrh	r3, [r7, #14]
 8003b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	3328      	adds	r3, #40	; 0x28
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003baa:	2100      	movs	r1, #0
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f006 f86a 	bl	8009c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8282 	beq.w	80040c4 <PCD_EP_ISR_Handler+0x5ae>
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f040 827d 	bne.w	80040c4 <PCD_EP_ISR_Handler+0x5ae>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	b292      	uxth	r2, r2
 8003bde:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003bea:	e26b      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bfc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d032      	beq.n	8003c6c <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	461a      	mov	r2, r3
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f004 f9a1 	bl	8007f88 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	881b      	ldrh	r3, [r3, #0]
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c52:	4013      	ands	r3, r2
 8003c54:	823b      	strh	r3, [r7, #16]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	8a3a      	ldrh	r2, [r7, #16]
 8003c5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c60:	b292      	uxth	r2, r2
 8003c62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f005 ffe1 	bl	8009c2c <HAL_PCD_SetupStageCallback>
 8003c6a:	e22b      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f280 8227 	bge.w	80040c4 <PCD_EP_ISR_Handler+0x5ae>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c82:	4013      	ands	r3, r2
 8003c84:	83bb      	strh	r3, [r7, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	8bba      	ldrh	r2, [r7, #28]
 8003c8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c90:	b292      	uxth	r2, r2
 8003c92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4413      	add	r3, r2
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	4413      	add	r3, r2
 8003cae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d019      	beq.n	8003cf8 <PCD_EP_ISR_Handler+0x1e2>
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d015      	beq.n	8003cf8 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	6959      	ldr	r1, [r3, #20]
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f004 f953 	bl	8007f88 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	441a      	add	r2, r3
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f005 ffac 	bl	8009c50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d112      	bne.n	8003d46 <PCD_EP_ISR_Handler+0x230>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	801a      	strh	r2, [r3, #0]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	e02f      	b.n	8003da6 <PCD_EP_ISR_Handler+0x290>
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d4c:	d813      	bhi.n	8003d76 <PCD_EP_ISR_Handler+0x260>
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	085b      	lsrs	r3, r3, #1
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <PCD_EP_ISR_Handler+0x252>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	3301      	adds	r3, #1
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	029b      	lsls	r3, r3, #10
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	801a      	strh	r2, [r3, #0]
 8003d74:	e017      	b.n	8003da6 <PCD_EP_ISR_Handler+0x290>
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <PCD_EP_ISR_Handler+0x27a>
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	029b      	lsls	r3, r3, #10
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db6:	827b      	strh	r3, [r7, #18]
 8003db8:	8a7b      	ldrh	r3, [r7, #18]
 8003dba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dbe:	827b      	strh	r3, [r7, #18]
 8003dc0:	8a7b      	ldrh	r3, [r7, #18]
 8003dc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003dc6:	827b      	strh	r3, [r7, #18]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	8a7b      	ldrh	r3, [r7, #18]
 8003dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8013      	strh	r3, [r2, #0]
 8003de2:	e16f      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	881b      	ldrh	r3, [r3, #0]
 8003df4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003df6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f280 80e4 	bge.w	8003fc8 <PCD_EP_ISR_Handler+0x4b2>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003e16:	4013      	ands	r3, r2
 8003e18:	853b      	strh	r3, [r7, #40]	; 0x28
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003e2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e2e:	b292      	uxth	r2, r2
 8003e30:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e32:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4a:	7b1b      	ldrb	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d120      	bne.n	8003e92 <PCD_EP_ISR_Handler+0x37c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e74:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003e76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8083 	beq.w	8003f84 <PCD_EP_ISR_Handler+0x46e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	6959      	ldr	r1, [r3, #20]
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	88da      	ldrh	r2, [r3, #6]
 8003e8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e8c:	f004 f87c 	bl	8007f88 <USB_ReadPMA>
 8003e90:	e078      	b.n	8003f84 <PCD_EP_ISR_Handler+0x46e>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	78db      	ldrb	r3, [r3, #3]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d108      	bne.n	8003eac <PCD_EP_ISR_Handler+0x396>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f91d 	bl	80040e0 <HAL_PCD_EP_DB_Receive>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003eaa:	e06b      	b.n	8003f84 <PCD_EP_ISR_Handler+0x46e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec6:	847b      	strh	r3, [r7, #34]	; 0x22
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01f      	beq.n	8003f46 <PCD_EP_ISR_Handler+0x430>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f2a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d028      	beq.n	8003f84 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	6959      	ldr	r1, [r3, #20]
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	891a      	ldrh	r2, [r3, #8]
 8003f3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f40:	f004 f822 	bl	8007f88 <USB_ReadPMA>
 8003f44:	e01e      	b.n	8003f84 <PCD_EP_ISR_Handler+0x46e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	4413      	add	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f6a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <PCD_EP_ISR_Handler+0x46e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	6959      	ldr	r1, [r3, #20]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	895a      	ldrh	r2, [r3, #10]
 8003f7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f80:	f004 f802 	bl	8007f88 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f8a:	441a      	add	r2, r3
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f96:	441a      	add	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d004      	beq.n	8003fae <PCD_EP_ISR_Handler+0x498>
 8003fa4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d206      	bcs.n	8003fbc <PCD_EP_ISR_Handler+0x4a6>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f005 fe4b 	bl	8009c50 <HAL_PCD_DataOutStageCallback>
 8003fba:	e005      	b.n	8003fc8 <PCD_EP_ISR_Handler+0x4b2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fd15 	bl	80069f2 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fc8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d078      	beq.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fd2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004000:	843b      	strh	r3, [r7, #32]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	441a      	add	r2, r3
 8004010:	8c3b      	ldrh	r3, [r7, #32]
 8004012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401a:	b29b      	uxth	r3, r3
 800401c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	78db      	ldrb	r3, [r3, #3]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d108      	bne.n	8004038 <PCD_EP_ISR_Handler+0x522>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 800402a:	2b02      	cmp	r3, #2
 800402c:	d144      	bne.n	80040b8 <PCD_EP_ISR_Handler+0x5a2>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800402e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13f      	bne.n	80040b8 <PCD_EP_ISR_Handler+0x5a2>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	4413      	add	r3, r2
 8004052:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800405c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	8bfb      	ldrh	r3, [r7, #30]
 8004064:	429a      	cmp	r2, r3
 8004066:	d906      	bls.n	8004076 <PCD_EP_ISR_Handler+0x560>
          {
            ep->xfer_len -= TxByteNbre;
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	8bfb      	ldrh	r3, [r7, #30]
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	e002      	b.n	800407c <PCD_EP_ISR_Handler+0x566>
          }
          else
          {
            ep->xfer_len = 0U;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <PCD_EP_ISR_Handler+0x57c>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f005 fdfb 	bl	8009c86 <HAL_PCD_DataInStageCallback>
 8004090:	e018      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	695a      	ldr	r2, [r3, #20]
 8004096:	8bfb      	ldrh	r3, [r7, #30]
 8004098:	441a      	add	r2, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	8bfb      	ldrh	r3, [r7, #30]
 80040a4:	441a      	add	r2, r3
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b0:	4618      	mov	r0, r3
 80040b2:	f002 fc9e 	bl	80069f2 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80040b6:	e005      	b.n	80040c4 <PCD_EP_ISR_Handler+0x5ae>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80040b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80040ba:	461a      	mov	r2, r3
 80040bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f917 	bl	80042f2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b21b      	sxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f6ff ad25 	blt.w	8003b20 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3738      	adds	r7, #56	; 0x38
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d07c      	beq.n	80041f2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004100:	b29b      	uxth	r3, r3
 8004102:	461a      	mov	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4413      	add	r3, r2
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4413      	add	r3, r2
 8004112:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800411c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	8b7b      	ldrh	r3, [r7, #26]
 8004124:	429a      	cmp	r2, r3
 8004126:	d306      	bcc.n	8004136 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	8b7b      	ldrh	r3, [r7, #26]
 800412e:	1ad2      	subs	r2, r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	619a      	str	r2, [r3, #24]
 8004134:	e002      	b.n	800413c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d123      	bne.n	800418c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	833b      	strh	r3, [r7, #24]
 8004160:	8b3b      	ldrh	r3, [r7, #24]
 8004162:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004166:	833b      	strh	r3, [r7, #24]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	8b3b      	ldrh	r3, [r7, #24]
 8004178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	b29b      	uxth	r3, r3
 800418a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01f      	beq.n	80041d6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	82fb      	strh	r3, [r7, #22]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	441a      	add	r2, r3
 80041c0:	8afb      	ldrh	r3, [r7, #22]
 80041c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80041d6:	8b7b      	ldrh	r3, [r7, #26]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8085 	beq.w	80042e8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	6959      	ldr	r1, [r3, #20]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	891a      	ldrh	r2, [r3, #8]
 80041ea:	8b7b      	ldrh	r3, [r7, #26]
 80041ec:	f003 fecc 	bl	8007f88 <USB_ReadPMA>
 80041f0:	e07a      	b.n	80042e8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	461a      	mov	r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	4413      	add	r3, r2
 800420c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004216:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	8b7b      	ldrh	r3, [r7, #26]
 800421e:	429a      	cmp	r2, r3
 8004220:	d306      	bcc.n	8004230 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	8b7b      	ldrh	r3, [r7, #26]
 8004228:	1ad2      	subs	r2, r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	619a      	str	r2, [r3, #24]
 800422e:	e002      	b.n	8004236 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d123      	bne.n	8004286 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	b29b      	uxth	r3, r3
 8004250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004254:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004258:	83fb      	strh	r3, [r7, #30]
 800425a:	8bfb      	ldrh	r3, [r7, #30]
 800425c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004260:	83fb      	strh	r3, [r7, #30]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	8bfb      	ldrh	r3, [r7, #30]
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b00      	cmp	r3, #0
 800428e:	d11f      	bne.n	80042d0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042aa:	83bb      	strh	r3, [r7, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	441a      	add	r2, r3
 80042ba:	8bbb      	ldrh	r3, [r7, #28]
 80042bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80042d0:	8b7b      	ldrh	r3, [r7, #26]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d008      	beq.n	80042e8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6959      	ldr	r1, [r3, #20]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	895a      	ldrh	r2, [r3, #10]
 80042e2:	8b7b      	ldrh	r3, [r7, #26]
 80042e4:	f003 fe50 	bl	8007f88 <USB_ReadPMA>
    }
  }

  return count;
 80042e8:	8b7b      	ldrh	r3, [r7, #26]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b092      	sub	sp, #72	; 0x48
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004300:	88fb      	ldrh	r3, [r7, #6]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8130 	beq.w	800456c <HAL_PCD_EP_DB_Transmit+0x27a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004314:	b29b      	uxth	r3, r3
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	4413      	add	r3, r2
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	4413      	add	r3, r2
 8004326:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004330:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004338:	429a      	cmp	r2, r3
 800433a:	d906      	bls.n	800434a <HAL_PCD_EP_DB_Transmit+0x58>
    {
      ep->xfer_len -= TxByteNbre;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	699a      	ldr	r2, [r3, #24]
 8004340:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004342:	1ad2      	subs	r2, r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	619a      	str	r2, [r3, #24]
 8004348:	e002      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x5e>
    }
    else
    {
      ep->xfer_len = 0U;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d12c      	bne.n	80043b2 <HAL_PCD_EP_DB_Transmit+0xc0>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f005 fc91 	bl	8009c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 822d 	beq.w	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	827b      	strh	r3, [r7, #18]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	441a      	add	r2, r3
 800439a:	8a7b      	ldrh	r3, [r7, #18]
 800439c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8013      	strh	r3, [r2, #0]
 80043b0:	e20b      	b.n	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01f      	beq.n	80043fc <HAL_PCD_EP_DB_Transmit+0x10a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 81e1 	bne.w	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800440e:	441a      	add	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800441a:	441a      	add	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d309      	bcc.n	8004440 <HAL_PCD_EP_DB_Transmit+0x14e>
        {
          len = ep->maxpacket;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	1ad2      	subs	r2, r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	621a      	str	r2, [r3, #32]
 800443e:	e014      	b.n	800446a <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else if (ep->xfer_len_db == 0U)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_PCD_EP_DB_Transmit+0x164>
        {
          len = TxByteNbre;
 8004448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004454:	e009      	b.n	800446a <HAL_PCD_EP_DB_Transmit+0x178>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d155      	bne.n	800451e <HAL_PCD_EP_DB_Transmit+0x22c>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	4413      	add	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	00da      	lsls	r2, r3, #3
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	4413      	add	r3, r2
 8004494:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d112      	bne.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x1d4>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	801a      	strh	r2, [r3, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	b29a      	uxth	r2, r3
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e047      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x264>
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b3e      	cmp	r3, #62	; 0x3e
 80044ca:	d811      	bhi.n	80044f0 <HAL_PCD_EP_DB_Transmit+0x1fe>
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_PCD_EP_DB_Transmit+0x1f0>
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	3301      	adds	r3, #1
 80044e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	029b      	lsls	r3, r3, #10
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e032      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x264>
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <HAL_PCD_EP_DB_Transmit+0x214>
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	3b01      	subs	r3, #1
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	b29b      	uxth	r3, r3
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	b29b      	uxth	r3, r3
 800450e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004512:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004516:	b29a      	uxth	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	e01b      	b.n	8004556 <HAL_PCD_EP_DB_Transmit+0x264>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d117      	bne.n	8004556 <HAL_PCD_EP_DB_Transmit+0x264>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	623b      	str	r3, [r7, #32]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004534:	b29b      	uxth	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	4413      	add	r3, r2
 800453c:	623b      	str	r3, [r7, #32]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	00da      	lsls	r2, r3, #3
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	4413      	add	r3, r2
 8004548:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800454c:	61fb      	str	r3, [r7, #28]
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	b29a      	uxth	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	6959      	ldr	r1, [r3, #20]
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	891a      	ldrh	r2, [r3, #8]
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	b29b      	uxth	r3, r3
 8004566:	f003 fcce 	bl	8007f06 <USB_WritePMA>
 800456a:	e12e      	b.n	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004574:	b29b      	uxth	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	4413      	add	r3, r2
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	6812      	ldr	r2, [r2, #0]
 8004584:	4413      	add	r3, r2
 8004586:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004590:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	699a      	ldr	r2, [r3, #24]
 8004596:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004598:	429a      	cmp	r2, r3
 800459a:	d306      	bcc.n	80045aa <HAL_PCD_EP_DB_Transmit+0x2b8>
    {
      ep->xfer_len -= TxByteNbre;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	619a      	str	r2, [r3, #24]
 80045a8:	e002      	b.n	80045b0 <HAL_PCD_EP_DB_Transmit+0x2be>
    }
    else
    {
      ep->xfer_len = 0U;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2200      	movs	r2, #0
 80045ae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d12c      	bne.n	8004612 <HAL_PCD_EP_DB_Transmit+0x320>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	4619      	mov	r1, r3
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f005 fb61 	bl	8009c86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80fd 	bne.w	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	441a      	add	r2, r3
 80045fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004600:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	b29b      	uxth	r3, r3
 800460e:	8013      	strh	r3, [r2, #0]
 8004610:	e0db      	b.n	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11f      	bne.n	800465c <HAL_PCD_EP_DB_Transmit+0x36a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004662:	2b01      	cmp	r3, #1
 8004664:	f040 80b1 	bne.w	80047ca <HAL_PCD_EP_DB_Transmit+0x4d8>
      {
        ep->xfer_buff += TxByteNbre;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800466e:	441a      	add	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800467a:	441a      	add	r2, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a1a      	ldr	r2, [r3, #32]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	429a      	cmp	r2, r3
 800468a:	d309      	bcc.n	80046a0 <HAL_PCD_EP_DB_Transmit+0x3ae>
        {
          len = ep->maxpacket;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	1ad2      	subs	r2, r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	621a      	str	r2, [r3, #32]
 800469e:	e014      	b.n	80046ca <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else if (ep->xfer_len_db == 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <HAL_PCD_EP_DB_Transmit+0x3c4>
        {
          len = TxByteNbre;
 80046a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046b4:	e009      	b.n	80046ca <HAL_PCD_EP_DB_Transmit+0x3d8>
        }
        else
        {
          len = ep->xfer_len_db;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	637b      	str	r3, [r7, #52]	; 0x34
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d155      	bne.n	8004784 <HAL_PCD_EP_DB_Transmit+0x492>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	647b      	str	r3, [r7, #68]	; 0x44
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ec:	4413      	add	r3, r2
 80046ee:	647b      	str	r3, [r7, #68]	; 0x44
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	00da      	lsls	r2, r3, #3
 80046f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046f8:	4413      	add	r3, r2
 80046fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004702:	2b00      	cmp	r3, #0
 8004704:	d112      	bne.n	800472c <HAL_PCD_EP_DB_Transmit+0x43a>
 8004706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004710:	b29a      	uxth	r2, r3
 8004712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	b29b      	uxth	r3, r3
 800471c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004724:	b29a      	uxth	r2, r3
 8004726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004728:	801a      	strh	r2, [r3, #0]
 800472a:	e044      	b.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800472c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800472e:	2b3e      	cmp	r3, #62	; 0x3e
 8004730:	d811      	bhi.n	8004756 <HAL_PCD_EP_DB_Transmit+0x464>
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_PCD_EP_DB_Transmit+0x456>
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	3301      	adds	r3, #1
 8004746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29a      	uxth	r2, r3
 8004750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004752:	801a      	strh	r2, [r3, #0]
 8004754:	e02f      	b.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8004756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2b00      	cmp	r3, #0
 8004764:	d102      	bne.n	800476c <HAL_PCD_EP_DB_Transmit+0x47a>
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	3b01      	subs	r3, #1
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476e:	b29b      	uxth	r3, r3
 8004770:	029b      	lsls	r3, r3, #10
 8004772:	b29b      	uxth	r3, r3
 8004774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477c:	b29a      	uxth	r2, r3
 800477e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e018      	b.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4c4>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	785b      	ldrb	r3, [r3, #1]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d114      	bne.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x4c4>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004794:	b29b      	uxth	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	4413      	add	r3, r2
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	00da      	lsls	r2, r3, #3
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	4413      	add	r3, r2
 80047a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6818      	ldr	r0, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	6959      	ldr	r1, [r3, #20]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	895a      	ldrh	r2, [r3, #10]
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f003 fb9e 	bl	8007f06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e4:	823b      	strh	r3, [r7, #16]
 80047e6:	8a3b      	ldrh	r3, [r7, #16]
 80047e8:	f083 0310 	eor.w	r3, r3, #16
 80047ec:	823b      	strh	r3, [r7, #16]
 80047ee:	8a3b      	ldrh	r3, [r7, #16]
 80047f0:	f083 0320 	eor.w	r3, r3, #32
 80047f4:	823b      	strh	r3, [r7, #16]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	441a      	add	r2, r3
 8004804:	8a3b      	ldrh	r3, [r7, #16]
 8004806:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800480a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800480e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	b29b      	uxth	r3, r3
 8004818:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3748      	adds	r7, #72	; 0x48
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	607b      	str	r3, [r7, #4]
 800482e:	460b      	mov	r3, r1
 8004830:	817b      	strh	r3, [r7, #10]
 8004832:	4613      	mov	r3, r2
 8004834:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004842:	897b      	ldrh	r3, [r7, #10]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e009      	b.n	800486e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800485a:	897a      	ldrh	r2, [r7, #10]
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4413      	add	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800486e:	893b      	ldrh	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d107      	bne.n	8004884 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	b29a      	uxth	r2, r3
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	80da      	strh	r2, [r3, #6]
 8004882:	e00b      	b.n	800489c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2201      	movs	r2, #1
 8004888:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	b29a      	uxth	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	b29a      	uxth	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	f043 0302 	orr.w	r3, r3, #2
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
	...

08004900 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <HAL_PWREx_GetVoltageRange+0x18>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40007000 	.word	0x40007000

0800491c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800492a:	d130      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800492c:	4b23      	ldr	r3, [pc, #140]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d038      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004948:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2232      	movs	r2, #50	; 0x32
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	4a1b      	ldr	r2, [pc, #108]	; (80049c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0c9b      	lsrs	r3, r3, #18
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004960:	e002      	b.n	8004968 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3b01      	subs	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004974:	d102      	bne.n	800497c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1f2      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004988:	d110      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e00f      	b.n	80049ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d007      	beq.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049a4:	4a05      	ldr	r2, [pc, #20]	; (80049bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000
 80049c0:	20000000 	.word	0x20000000
 80049c4:	431bde83 	.word	0x431bde83

080049c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80049d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049d6:	6053      	str	r3, [r2, #4]
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40007000 	.word	0x40007000

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	; 0x28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f000 bc56 	b.w	80052a8 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049fc:	4ba1      	ldr	r3, [pc, #644]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 030c 	and.w	r3, r3, #12
 8004a04:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a06:	4b9f      	ldr	r3, [pc, #636]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0310 	and.w	r3, r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80e6 	beq.w	8004bea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4c>
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b0c      	cmp	r3, #12
 8004a28:	f040 808d 	bne.w	8004b46 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	f040 8089 	bne.w	8004b46 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a34:	4b93      	ldr	r3, [pc, #588]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <HAL_RCC_OscConfig+0x66>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d102      	bne.n	8004a4e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f000 bc2d 	b.w	80052a8 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a52:	4b8c      	ldr	r3, [pc, #560]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <HAL_RCC_OscConfig+0x80>
 8004a5e:	4b89      	ldr	r3, [pc, #548]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a66:	e005      	b.n	8004a74 <HAL_RCC_OscConfig+0x8c>
 8004a68:	4b86      	ldr	r3, [pc, #536]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d224      	bcs.n	8004ac2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fd91 	bl	80055a4 <RCC_SetFlashLatencyFromMSIRange>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f000 bc0d 	b.w	80052a8 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a8e:	4b7d      	ldr	r3, [pc, #500]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7c      	ldr	r2, [pc, #496]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a94:	f043 0308 	orr.w	r3, r3, #8
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b7a      	ldr	r3, [pc, #488]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	4977      	ldr	r1, [pc, #476]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	4972      	ldr	r1, [pc, #456]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
 8004ac0:	e025      	b.n	8004b0e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac2:	4b70      	ldr	r3, [pc, #448]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6f      	ldr	r2, [pc, #444]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b6d      	ldr	r3, [pc, #436]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	496a      	ldr	r1, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae0:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	4965      	ldr	r1, [pc, #404]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fd50 	bl	80055a4 <RCC_SetFlashLatencyFromMSIRange>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e3cc      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b0e:	f000 fcb3 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8004b12:	4601      	mov	r1, r0
 8004b14:	4b5b      	ldr	r3, [pc, #364]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_RCC_OscConfig+0x2a0>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	fa21 f303 	lsr.w	r3, r1, r3
 8004b2a:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_RCC_OscConfig+0x2a4>)
 8004b2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b2e:	4b58      	ldr	r3, [pc, #352]	; (8004c90 <HAL_RCC_OscConfig+0x2a8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd fef6 	bl	8002924 <HAL_InitTick>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d052      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
 8004b44:	e3b0      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d032      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b4e:	4b4d      	ldr	r3, [pc, #308]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a4c      	ldr	r2, [pc, #304]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b5a:	f7fd ff33 	bl	80029c4 <HAL_GetTick>
 8004b5e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b60:	e008      	b.n	8004b74 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b62:	f7fd ff2f 	bl	80029c4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e399      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b74:	4b43      	ldr	r3, [pc, #268]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0f0      	beq.n	8004b62 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b80:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b86:	f043 0308 	orr.w	r3, r3, #8
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	493a      	ldr	r1, [pc, #232]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b9e:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	021b      	lsls	r3, r3, #8
 8004bac:	4935      	ldr	r1, [pc, #212]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	604b      	str	r3, [r1, #4]
 8004bb2:	e01a      	b.n	8004bea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bb4:	4b33      	ldr	r3, [pc, #204]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a32      	ldr	r2, [pc, #200]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bc0:	f7fd ff00 	bl	80029c4 <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004bc8:	f7fd fefc 	bl	80029c4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e366      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bda:	4b2a      	ldr	r3, [pc, #168]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1e0>
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004be8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d073      	beq.n	8004cde <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d005      	beq.n	8004c08 <HAL_RCC_OscConfig+0x220>
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	2b0c      	cmp	r3, #12
 8004c00:	d10e      	bne.n	8004c20 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d10b      	bne.n	8004c20 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c08:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d063      	beq.n	8004cdc <HAL_RCC_OscConfig+0x2f4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d15f      	bne.n	8004cdc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e343      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c28:	d106      	bne.n	8004c38 <HAL_RCC_OscConfig+0x250>
 8004c2a:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a15      	ldr	r2, [pc, #84]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e01d      	b.n	8004c74 <HAL_RCC_OscConfig+0x28c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCC_OscConfig+0x274>
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a0c      	ldr	r2, [pc, #48]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e00b      	b.n	8004c74 <HAL_RCC_OscConfig+0x28c>
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a05      	ldr	r2, [pc, #20]	; (8004c84 <HAL_RCC_OscConfig+0x29c>)
 8004c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fd fea2 	bl	80029c4 <HAL_GetTick>
 8004c80:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c82:	e010      	b.n	8004ca6 <HAL_RCC_OscConfig+0x2be>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	0800a794 	.word	0x0800a794
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c94:	f7fd fe96 	bl	80029c4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b64      	cmp	r3, #100	; 0x64
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e300      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ca6:	4ba0      	ldr	r3, [pc, #640]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x2ac>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fe86 	bl	80029c4 <HAL_GetTick>
 8004cb8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cbc:	f7fd fe82 	bl	80029c4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e2ec      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cce:	4b96      	ldr	r3, [pc, #600]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2d4>
 8004cda:	e000      	b.n	8004cde <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d060      	beq.n	8004dac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d005      	beq.n	8004cfc <HAL_RCC_OscConfig+0x314>
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	2b0c      	cmp	r3, #12
 8004cf4:	d119      	bne.n	8004d2a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d116      	bne.n	8004d2a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cfc:	4b8a      	ldr	r3, [pc, #552]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d005      	beq.n	8004d14 <HAL_RCC_OscConfig+0x32c>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e2c9      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d14:	4b84      	ldr	r3, [pc, #528]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	061b      	lsls	r3, r3, #24
 8004d22:	4981      	ldr	r1, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d28:	e040      	b.n	8004dac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d023      	beq.n	8004d7a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fd fe41 	bl	80029c4 <HAL_GetTick>
 8004d42:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d46:	f7fd fe3d 	bl	80029c4 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e2a7      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d58:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f0      	beq.n	8004d46 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b70      	ldr	r3, [pc, #448]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	061b      	lsls	r3, r3, #24
 8004d72:	496d      	ldr	r1, [pc, #436]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
 8004d78:	e018      	b.n	8004dac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d7a:	4b6b      	ldr	r3, [pc, #428]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a6a      	ldr	r2, [pc, #424]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004d80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d86:	f7fd fe1d 	bl	80029c4 <HAL_GetTick>
 8004d8a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d8e:	f7fd fe19 	bl	80029c4 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e283      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d07f      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d05f      	beq.n	8004e80 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dc6:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699a      	ldr	r2, [r3, #24]
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d037      	beq.n	8004e46 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e25c      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01b      	beq.n	8004e30 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e08:	f7fd fddc 	bl	80029c4 <HAL_GetTick>
 8004e0c:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fd fdd8 	bl	80029c4 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b11      	cmp	r3, #17
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e242      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ef      	bne.n	8004e10 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8004e30:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e36:	f023 0210 	bic.w	r2, r3, #16
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	493a      	ldr	r1, [pc, #232]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4c:	4a36      	ldr	r2, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e4e:	f043 0301 	orr.w	r3, r3, #1
 8004e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fd fdb5 	bl	80029c4 <HAL_GetTick>
 8004e5a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e5e:	f7fd fdb1 	bl	80029c4 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b11      	cmp	r3, #17
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e21b      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e70:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ef      	beq.n	8004e5e <HAL_RCC_OscConfig+0x476>
 8004e7e:	e01b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e80:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e86:	4a28      	ldr	r2, [pc, #160]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e90:	f7fd fd98 	bl	80029c4 <HAL_GetTick>
 8004e94:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e98:	f7fd fd94 	bl	80029c4 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b11      	cmp	r3, #17
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e1fe      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eaa:	4b1f      	ldr	r3, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ef      	bne.n	8004e98 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 80c1 	beq.w	8005048 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004ecc:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10e      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b13      	ldr	r3, [pc, #76]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	4a12      	ldr	r2, [pc, #72]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <HAL_RCC_OscConfig+0x540>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_RCC_OscConfig+0x544>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_RCC_OscConfig+0x544>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <HAL_RCC_OscConfig+0x544>)
 8004f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0e:	f7fd fd59 	bl	80029c4 <HAL_GetTick>
 8004f12:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f14:	e00c      	b.n	8004f30 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fd fd55 	bl	80029c4 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d905      	bls.n	8004f30 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e1bf      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f30:	4bb1      	ldr	r3, [pc, #708]	; (80051f8 <HAL_RCC_OscConfig+0x810>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ec      	beq.n	8004f16 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02c      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8004f48:	4bac      	ldr	r3, [pc, #688]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f5a:	49a8      	ldr	r1, [pc, #672]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d010      	beq.n	8004f90 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004f6e:	4ba3      	ldr	r3, [pc, #652]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	4aa1      	ldr	r2, [pc, #644]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f7e:	4b9f      	ldr	r3, [pc, #636]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	4a9d      	ldr	r2, [pc, #628]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f8e:	e018      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f90:	4b9a      	ldr	r3, [pc, #616]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	4a99      	ldr	r2, [pc, #612]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004f98:	f043 0301 	orr.w	r3, r3, #1
 8004f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fa0:	e00f      	b.n	8004fc2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fa2:	4b96      	ldr	r3, [pc, #600]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa8:	4a94      	ldr	r2, [pc, #592]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004faa:	f023 0301 	bic.w	r3, r3, #1
 8004fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fb2:	4b92      	ldr	r3, [pc, #584]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb8:	4a90      	ldr	r2, [pc, #576]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004fba:	f023 0304 	bic.w	r3, r3, #4
 8004fbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fca:	f7fd fcfb 	bl	80029c4 <HAL_GetTick>
 8004fce:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fd fcf7 	bl	80029c4 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e15f      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fe8:	4b84      	ldr	r3, [pc, #528]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d0ed      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x5ea>
 8004ff6:	e01d      	b.n	8005034 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fd fce4 	bl	80029c4 <HAL_GetTick>
 8004ffc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005000:	f7fd fce0 	bl	80029c4 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f241 3288 	movw	r2, #5000	; 0x1388
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e148      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005016:	4b79      	ldr	r3, [pc, #484]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ed      	bne.n	8005000 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8005024:	4b75      	ldr	r3, [pc, #468]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	4a74      	ldr	r2, [pc, #464]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800502c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005038:	2b01      	cmp	r3, #1
 800503a:	d105      	bne.n	8005048 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503c:	4b6f      	ldr	r3, [pc, #444]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800503e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005040:	4a6e      	ldr	r2, [pc, #440]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005046:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0320 	and.w	r3, r3, #32
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03c      	beq.n	80050ce <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01c      	beq.n	8005096 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800505c:	4b67      	ldr	r3, [pc, #412]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800505e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005062:	4a66      	ldr	r2, [pc, #408]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd fcaa 	bl	80029c4 <HAL_GetTick>
 8005070:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005074:	f7fd fca6 	bl	80029c4 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e110      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005086:	4b5d      	ldr	r3, [pc, #372]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ef      	beq.n	8005074 <HAL_RCC_OscConfig+0x68c>
 8005094:	e01b      	b.n	80050ce <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005096:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005098:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800509c:	4a57      	ldr	r2, [pc, #348]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a6:	f7fd fc8d 	bl	80029c4 <HAL_GetTick>
 80050aa:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ae:	f7fd fc89 	bl	80029c4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e0f3      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050c0:	4b4e      	ldr	r3, [pc, #312]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80050c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80e7 	beq.w	80052a6 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	2b02      	cmp	r3, #2
 80050de:	f040 80b7 	bne.w	8005250 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050e2:	4b46      	ldr	r3, [pc, #280]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0203 	and.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d124      	bne.n	8005140 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005100:	3b01      	subs	r3, #1
 8005102:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d11b      	bne.n	8005140 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d113      	bne.n	8005140 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	3b01      	subs	r3, #1
 8005126:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d109      	bne.n	8005140 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	3b01      	subs	r3, #1
 800513a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d061      	beq.n	8005204 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d056      	beq.n	80051f4 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005146:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2c      	ldr	r2, [pc, #176]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800514c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005150:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005152:	f7fd fc37 	bl	80029c4 <HAL_GetTick>
 8005156:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800515a:	f7fd fc33 	bl	80029c4 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e09d      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1f0      	bne.n	800515a <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005178:	4b20      	ldr	r3, [pc, #128]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_RCC_OscConfig+0x818>)
 800517e:	4013      	ands	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005188:	3a01      	subs	r2, #1
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	4311      	orrs	r1, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005192:	0212      	lsls	r2, r2, #8
 8005194:	4311      	orrs	r1, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800519a:	0852      	lsrs	r2, r2, #1
 800519c:	3a01      	subs	r2, #1
 800519e:	0552      	lsls	r2, r2, #21
 80051a0:	4311      	orrs	r1, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0652      	lsls	r2, r2, #25
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4913      	ldr	r1, [pc, #76]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051b4:	4b11      	ldr	r3, [pc, #68]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a10      	ldr	r2, [pc, #64]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a0d      	ldr	r2, [pc, #52]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051cc:	f7fd fbfa 	bl	80029c4 <HAL_GetTick>
 80051d0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d4:	f7fd fbf6 	bl	80029c4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e060      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e6:	4b05      	ldr	r3, [pc, #20]	; (80051fc <HAL_RCC_OscConfig+0x814>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f2:	e058      	b.n	80052a6 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e057      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
 80051f8:	40007000 	.word	0x40007000
 80051fc:	40021000 	.word	0x40021000
 8005200:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d14a      	bne.n	80052a6 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a26      	ldr	r2, [pc, #152]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800521c:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a23      	ldr	r2, [pc, #140]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005226:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005228:	f7fd fbcc 	bl	80029c4 <HAL_GetTick>
 800522c:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005230:	f7fd fbc8 	bl	80029c4 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e032      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x848>
 800524e:	e02a      	b.n	80052a6 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d025      	beq.n	80052a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 800525c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005260:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005262:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	4a12      	ldr	r2, [pc, #72]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005268:	f023 0303 	bic.w	r3, r3, #3
 800526c:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800526e:	4b10      	ldr	r3, [pc, #64]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	4a0f      	ldr	r2, [pc, #60]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005274:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005278:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527a:	f7fd fba3 	bl	80029c4 <HAL_GetTick>
 800527e:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005280:	e008      	b.n	8005294 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005282:	f7fd fb9f 	bl	80029c4 <HAL_GetTick>
 8005286:	4602      	mov	r2, r0
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	2b02      	cmp	r3, #2
 800528e:	d901      	bls.n	8005294 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e009      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_RCC_OscConfig+0x8c8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f0      	bne.n	8005282 <HAL_RCC_OscConfig+0x89a>
 80052a0:	e001      	b.n	80052a6 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3728      	adds	r7, #40	; 0x28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40021000 	.word	0x40021000

080052b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0c8      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052c8:	4b66      	ldr	r3, [pc, #408]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d910      	bls.n	80052f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d6:	4b63      	ldr	r3, [pc, #396]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 0207 	bic.w	r2, r3, #7
 80052de:	4961      	ldr	r1, [pc, #388]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e6:	4b5f      	ldr	r3, [pc, #380]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0b0      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d04c      	beq.n	800539e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d107      	bne.n	800531c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800530c:	4b56      	ldr	r3, [pc, #344]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d121      	bne.n	800535c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e09e      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d107      	bne.n	8005334 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005324:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d115      	bne.n	800535c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e092      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800533c:	4b4a      	ldr	r3, [pc, #296]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e086      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800534c:	4b46      	ldr	r3, [pc, #280]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e07e      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800535c:	4b42      	ldr	r3, [pc, #264]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f023 0203 	bic.w	r2, r3, #3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	493f      	ldr	r1, [pc, #252]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800536a:	4313      	orrs	r3, r2
 800536c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536e:	f7fd fb29 	bl	80029c4 <HAL_GetTick>
 8005372:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005374:	e00a      	b.n	800538c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005376:	f7fd fb25 	bl	80029c4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e066      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f003 020c 	and.w	r2, r3, #12
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	429a      	cmp	r2, r3
 800539c:	d1eb      	bne.n	8005376 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d008      	beq.n	80053bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053aa:	4b2f      	ldr	r3, [pc, #188]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	492c      	ldr	r1, [pc, #176]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b29      	ldr	r3, [pc, #164]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0307 	and.w	r3, r3, #7
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d210      	bcs.n	80053ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b26      	ldr	r3, [pc, #152]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f023 0207 	bic.w	r2, r3, #7
 80053d2:	4924      	ldr	r1, [pc, #144]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053da:	4b22      	ldr	r3, [pc, #136]	; (8005464 <HAL_RCC_ClockConfig+0x1b0>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0307 	and.w	r3, r3, #7
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d001      	beq.n	80053ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e036      	b.n	800545a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f8:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4918      	ldr	r1, [pc, #96]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4910      	ldr	r1, [pc, #64]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800542a:	f000 f825 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 800542e:	4601      	mov	r1, r0
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <HAL_RCC_ClockConfig+0x1b4>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	091b      	lsrs	r3, r3, #4
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <HAL_RCC_ClockConfig+0x1b8>)
 800543c:	5cd3      	ldrb	r3, [r2, r3]
 800543e:	f003 031f 	and.w	r3, r3, #31
 8005442:	fa21 f303 	lsr.w	r3, r1, r3
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_RCC_ClockConfig+0x1c0>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fa68 	bl	8002924 <HAL_InitTick>
 8005454:	4603      	mov	r3, r0
 8005456:	72fb      	strb	r3, [r7, #11]

  return status;
 8005458:	7afb      	ldrb	r3, [r7, #11]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40022000 	.word	0x40022000
 8005468:	40021000 	.word	0x40021000
 800546c:	0800a794 	.word	0x0800a794
 8005470:	20000000 	.word	0x20000000
 8005474:	20000004 	.word	0x20000004

08005478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
 8005482:	2300      	movs	r3, #0
 8005484:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 030c 	and.w	r3, r3, #12
 800548e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005490:	4b3a      	ldr	r3, [pc, #232]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0x34>
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	2b0c      	cmp	r3, #12
 80054a4:	d121      	bne.n	80054ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d11e      	bne.n	80054ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054ac:	4b33      	ldr	r3, [pc, #204]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0308 	and.w	r3, r3, #8
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054b8:	4b30      	ldr	r3, [pc, #192]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054be:	0a1b      	lsrs	r3, r3, #8
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	61fb      	str	r3, [r7, #28]
 80054c6:	e005      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054c8:	4b2c      	ldr	r3, [pc, #176]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054d4:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10d      	bne.n	8005500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054e8:	e00a      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d102      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054f0:	4b24      	ldr	r3, [pc, #144]	; (8005584 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	e004      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054fc:	4b22      	ldr	r3, [pc, #136]	; (8005588 <HAL_RCC_GetSysClockFreq+0x110>)
 80054fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b0c      	cmp	r3, #12
 8005504:	d133      	bne.n	800556e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0303 	and.w	r3, r3, #3
 800550e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d002      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0xa4>
 8005516:	2b03      	cmp	r3, #3
 8005518:	d003      	beq.n	8005522 <HAL_RCC_GetSysClockFreq+0xaa>
 800551a:	e005      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_GetSysClockFreq+0x10c>)
 800551e:	617b      	str	r3, [r7, #20]
      break;
 8005520:	e005      	b.n	800552e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <HAL_RCC_GetSysClockFreq+0x110>)
 8005524:	617b      	str	r3, [r7, #20]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	617b      	str	r3, [r7, #20]
      break;
 800552c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	3301      	adds	r3, #1
 800553a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800553c:	4b0f      	ldr	r3, [pc, #60]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	0a1b      	lsrs	r3, r3, #8
 8005542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	fb02 f203 	mul.w	r2, r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_RCC_GetSysClockFreq+0x104>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0e5b      	lsrs	r3, r3, #25
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800556e:	69bb      	ldr	r3, [r7, #24]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3724      	adds	r7, #36	; 0x24
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40021000 	.word	0x40021000
 8005580:	0800a7a4 	.word	0x0800a7a4
 8005584:	00f42400 	.word	0x00f42400
 8005588:	007a1200 	.word	0x007a1200

0800558c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055ac:	2300      	movs	r3, #0
 80055ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055b0:	4b2a      	ldr	r3, [pc, #168]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055bc:	f7ff f9a0 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 80055c0:	6178      	str	r0, [r7, #20]
 80055c2:	e014      	b.n	80055ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055c4:	4b25      	ldr	r3, [pc, #148]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	4a24      	ldr	r2, [pc, #144]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ce:	6593      	str	r3, [r2, #88]	; 0x58
 80055d0:	4b22      	ldr	r3, [pc, #136]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80055dc:	f7ff f990 	bl	8004900 <HAL_PWREx_GetVoltageRange>
 80055e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80055e2:	4b1e      	ldr	r3, [pc, #120]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e6:	4a1d      	ldr	r2, [pc, #116]	; (800565c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f4:	d10b      	bne.n	800560e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b80      	cmp	r3, #128	; 0x80
 80055fa:	d919      	bls.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2ba0      	cmp	r3, #160	; 0xa0
 8005600:	d902      	bls.n	8005608 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005602:	2302      	movs	r3, #2
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e013      	b.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005608:	2301      	movs	r3, #1
 800560a:	613b      	str	r3, [r7, #16]
 800560c:	e010      	b.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b80      	cmp	r3, #128	; 0x80
 8005612:	d902      	bls.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005614:	2303      	movs	r3, #3
 8005616:	613b      	str	r3, [r7, #16]
 8005618:	e00a      	b.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b80      	cmp	r3, #128	; 0x80
 800561e:	d102      	bne.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005620:	2302      	movs	r3, #2
 8005622:	613b      	str	r3, [r7, #16]
 8005624:	e004      	b.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b70      	cmp	r3, #112	; 0x70
 800562a:	d101      	bne.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800562c:	2301      	movs	r3, #1
 800562e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 0207 	bic.w	r2, r3, #7
 8005638:	4909      	ldr	r1, [pc, #36]	; (8005660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e000      	b.n	8005654 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	40021000 	.word	0x40021000
 8005660:	40022000 	.word	0x40022000

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800566c:	2300      	movs	r3, #0
 800566e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005670:	2300      	movs	r3, #0
 8005672:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567c:	2b00      	cmp	r3, #0
 800567e:	f000 809e 	beq.w	80057be <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005682:	2300      	movs	r3, #0
 8005684:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005696:	2300      	movs	r3, #0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800569c:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	4a3f      	ldr	r2, [pc, #252]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a6:	6593      	str	r3, [r2, #88]	; 0x58
 80056a8:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056b4:	2301      	movs	r3, #1
 80056b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056b8:	4b3a      	ldr	r3, [pc, #232]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a39      	ldr	r2, [pc, #228]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80056be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056c4:	f7fd f97e 	bl	80029c4 <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ca:	e009      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fd f97a 	bl	80029c4 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d902      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	74fb      	strb	r3, [r7, #19]
        break;
 80056de:	e005      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056e0:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ef      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80056ec:	7cfb      	ldrb	r3, [r7, #19]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d15a      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056f2:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80056f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d01e      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	429a      	cmp	r2, r3
 800570c:	d019      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800570e:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005718:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800571c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005720:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800573a:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574c:	f7fd f93a 	bl	80029c4 <HAL_GetTick>
 8005750:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005752:	e00b      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fd f936 	bl	80029c4 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d902      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	74fb      	strb	r3, [r7, #19]
            break;
 800576a:	e006      	b.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576c:	4b0c      	ldr	r3, [pc, #48]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800576e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ec      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005786:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	4904      	ldr	r1, [pc, #16]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005796:	e009      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	74bb      	strb	r3, [r7, #18]
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x148>
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7cfb      	ldrb	r3, [r7, #19]
 80057aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ac:	7c7b      	ldrb	r3, [r7, #17]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d105      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057b2:	4b6e      	ldr	r3, [pc, #440]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	4a6d      	ldr	r2, [pc, #436]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057ca:	4b68      	ldr	r3, [pc, #416]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d0:	f023 0203 	bic.w	r2, r3, #3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4964      	ldr	r1, [pc, #400]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057ec:	4b5f      	ldr	r3, [pc, #380]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f2:	f023 020c 	bic.w	r2, r3, #12
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	495c      	ldr	r1, [pc, #368]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800580e:	4b57      	ldr	r3, [pc, #348]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005814:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4953      	ldr	r1, [pc, #332]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005830:	4b4e      	ldr	r3, [pc, #312]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005836:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	494b      	ldr	r1, [pc, #300]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005840:	4313      	orrs	r3, r2
 8005842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00a      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005852:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	4942      	ldr	r1, [pc, #264]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	493a      	ldr	r1, [pc, #232]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00a      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005896:	4b35      	ldr	r3, [pc, #212]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	4931      	ldr	r1, [pc, #196]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058b8:	4b2c      	ldr	r3, [pc, #176]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	4929      	ldr	r1, [pc, #164]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4920      	ldr	r1, [pc, #128]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	4918      	ldr	r1, [pc, #96]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a12      	ldr	r2, [pc, #72]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005926:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a04      	ldr	r2, [pc, #16]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005960:	7cbb      	ldrb	r3, [r7, #18]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e049      	b.n	8005a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fb f86c 	bl	8000a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 f8ee 	bl	8005b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
 8005a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_ConfigClockSource+0x18>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0a8      	b.n	8005b88 <HAL_TIM_ConfigClockSource+0x16a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a58:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a60:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d067      	beq.n	8005b42 <HAL_TIM_ConfigClockSource+0x124>
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d80b      	bhi.n	8005a8e <HAL_TIM_ConfigClockSource+0x70>
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d073      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x144>
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d802      	bhi.n	8005a84 <HAL_TIM_ConfigClockSource+0x66>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d06f      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a82:	e078      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d06c      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x144>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d06a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005a8c:	e073      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005a8e:	2b70      	cmp	r3, #112	; 0x70
 8005a90:	d00d      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x90>
 8005a92:	2b70      	cmp	r3, #112	; 0x70
 8005a94:	d804      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x82>
 8005a96:	2b50      	cmp	r3, #80	; 0x50
 8005a98:	d033      	beq.n	8005b02 <HAL_TIM_ConfigClockSource+0xe4>
 8005a9a:	2b60      	cmp	r3, #96	; 0x60
 8005a9c:	d041      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005a9e:	e06a      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa4:	d066      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0x156>
 8005aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aaa:	d017      	beq.n	8005adc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005aac:	e063      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6899      	ldr	r1, [r3, #8]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f000 f945 	bl	8005d4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ad0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	609a      	str	r2, [r3, #8]
      break;
 8005ada:	e04c      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6899      	ldr	r1, [r3, #8]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f000 f92e 	bl	8005d4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005afe:	609a      	str	r2, [r3, #8]
      break;
 8005b00:	e039      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	6859      	ldr	r1, [r3, #4]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f000 f8a2 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2150      	movs	r1, #80	; 0x50
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f8fb 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005b20:	e029      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f000 f8c1 	bl	8005cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2160      	movs	r1, #96	; 0x60
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f8eb 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005b40:	e019      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f000 f882 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2140      	movs	r1, #64	; 0x40
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f8db 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 8005b60:	e009      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	4610      	mov	r0, r2
 8005b6e:	f000 f8d2 	bl	8005d16 <TIM_ITRx_SetConfig>
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005b74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a2a      	ldr	r2, [pc, #168]	; (8005c4c <TIM_Base_SetConfig+0xbc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x20>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a21      	ldr	r2, [pc, #132]	; (8005c4c <TIM_Base_SetConfig+0xbc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_Base_SetConfig+0x52>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d007      	beq.n	8005be2 <TIM_Base_SetConfig+0x52>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <TIM_Base_SetConfig+0xc0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_Base_SetConfig+0x52>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <TIM_Base_SetConfig+0xc4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <TIM_Base_SetConfig+0xbc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d007      	beq.n	8005c30 <TIM_Base_SetConfig+0xa0>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a0b      	ldr	r2, [pc, #44]	; (8005c50 <TIM_Base_SetConfig+0xc0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d003      	beq.n	8005c30 <TIM_Base_SetConfig+0xa0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <TIM_Base_SetConfig+0xc4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d103      	bne.n	8005c38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	615a      	str	r2, [r3, #20]
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400

08005c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f023 030a 	bic.w	r3, r3, #10
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b087      	sub	sp, #28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0210 	bic.w	r2, r3, #16
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f043 0307 	orr.w	r3, r3, #7
 8005d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e04f      	b.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d108      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005dd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a14      	ldr	r2, [pc, #80]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e0c:	d004      	beq.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a10      	ldr	r2, [pc, #64]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d10c      	bne.n	8005e32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40014000 	.word	0x40014000

08005e58 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005e58:	b084      	sub	sp, #16
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	f107 0014 	add.w	r0, r7, #20
 8005e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	b004      	add	sp, #16
 8005e78:	4770      	bx	lr

08005e7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005e8a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005e8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005eb0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005eb4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	43db      	mvns	r3, r3
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ef8:	b084      	sub	sp, #16
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	f107 0014 	add.w	r0, r7, #20
 8005f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	b004      	add	sp, #16
 8005f38:	4770      	bx	lr
	...

08005f3c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b09b      	sub	sp, #108	; 0x6c
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f62:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	78db      	ldrb	r3, [r3, #3]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d81f      	bhi.n	8005fae <USB_ActivateEndpoint+0x72>
 8005f6e:	a201      	add	r2, pc, #4	; (adr r2, 8005f74 <USB_ActivateEndpoint+0x38>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f85 	.word	0x08005f85
 8005f78:	08005fa1 	.word	0x08005fa1
 8005f7c:	08005fb7 	.word	0x08005fb7
 8005f80:	08005f93 	.word	0x08005f93
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005f84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f90:	e012      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005f92:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f96:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005f9a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005f9e:	e00b      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005fa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fa8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005fac:	e004      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005fb4:	e000      	b.n	8005fb8 <USB_ActivateEndpoint+0x7c>
      break;
 8005fb6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	b21b      	sxth	r3, r3
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	b21a      	sxth	r2, r3
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006010:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006014:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006018:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006020:	b29b      	uxth	r3, r3
 8006022:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	7b1b      	ldrb	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 8149 	bne.w	80062c0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8084 	beq.w	8006140 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006042:	b29b      	uxth	r3, r3
 8006044:	461a      	mov	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	00da      	lsls	r2, r3, #3
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800605a:	613b      	str	r3, [r7, #16]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	88db      	ldrh	r3, [r3, #6]
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	b29b      	uxth	r3, r3
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	81fb      	strh	r3, [r7, #14]
 800607a:	89fb      	ldrh	r3, [r7, #14]
 800607c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <USB_ActivateEndpoint+0x180>
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	b29b      	uxth	r3, r3
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	81bb      	strh	r3, [r7, #12]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	441a      	add	r2, r3
 80060a6:	89bb      	ldrh	r3, [r7, #12]
 80060a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	78db      	ldrb	r3, [r3, #3]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d020      	beq.n	8006106 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060da:	813b      	strh	r3, [r7, #8]
 80060dc:	893b      	ldrh	r3, [r7, #8]
 80060de:	f083 0320 	eor.w	r3, r3, #32
 80060e2:	813b      	strh	r3, [r7, #8]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	441a      	add	r2, r3
 80060ee:	893b      	ldrh	r3, [r7, #8]
 80060f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006100:	b29b      	uxth	r3, r3
 8006102:	8013      	strh	r3, [r2, #0]
 8006104:	e27f      	b.n	8006606 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611c:	817b      	strh	r3, [r7, #10]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	897b      	ldrh	r3, [r7, #10]
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]
 800613e:	e262      	b.n	8006606 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614a:	b29b      	uxth	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006150:	4413      	add	r3, r2
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	00da      	lsls	r2, r3, #3
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	4413      	add	r3, r2
 800615e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006162:	62bb      	str	r3, [r7, #40]	; 0x28
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	88db      	ldrh	r3, [r3, #6]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	b29b      	uxth	r3, r3
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	801a      	strh	r2, [r3, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	627b      	str	r3, [r7, #36]	; 0x24
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617e:	b29b      	uxth	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	4413      	add	r3, r2
 8006186:	627b      	str	r3, [r7, #36]	; 0x24
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	00da      	lsls	r2, r3, #3
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	4413      	add	r3, r2
 8006192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006196:	623b      	str	r3, [r7, #32]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d112      	bne.n	80061c6 <USB_ActivateEndpoint+0x28a>
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	801a      	strh	r2, [r3, #0]
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	801a      	strh	r2, [r3, #0]
 80061c4:	e02f      	b.n	8006226 <USB_ActivateEndpoint+0x2ea>
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b3e      	cmp	r3, #62	; 0x3e
 80061cc:	d813      	bhi.n	80061f6 <USB_ActivateEndpoint+0x2ba>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	085b      	lsrs	r3, r3, #1
 80061d4:	663b      	str	r3, [r7, #96]	; 0x60
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <USB_ActivateEndpoint+0x2ac>
 80061e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e4:	3301      	adds	r3, #1
 80061e6:	663b      	str	r3, [r7, #96]	; 0x60
 80061e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	e017      	b.n	8006226 <USB_ActivateEndpoint+0x2ea>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	663b      	str	r3, [r7, #96]	; 0x60
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <USB_ActivateEndpoint+0x2d4>
 800620a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620c:	3b01      	subs	r3, #1
 800620e:	663b      	str	r3, [r7, #96]	; 0x60
 8006210:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006212:	b29b      	uxth	r3, r3
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	b29b      	uxth	r3, r3
 8006218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800621c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006220:	b29a      	uxth	r2, r3
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	83fb      	strh	r3, [r7, #30]
 8006234:	8bfb      	ldrh	r3, [r7, #30]
 8006236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d01b      	beq.n	8006276 <USB_ActivateEndpoint+0x33a>
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	b29b      	uxth	r3, r3
 800624c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006254:	83bb      	strh	r3, [r7, #28]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	441a      	add	r2, r3
 8006260:	8bbb      	ldrh	r3, [r7, #28]
 8006262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800626a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800626e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006272:	b29b      	uxth	r3, r3
 8006274:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	b29b      	uxth	r3, r3
 8006284:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628c:	837b      	strh	r3, [r7, #26]
 800628e:	8b7b      	ldrh	r3, [r7, #26]
 8006290:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006294:	837b      	strh	r3, [r7, #26]
 8006296:	8b7b      	ldrh	r3, [r7, #26]
 8006298:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800629c:	837b      	strh	r3, [r7, #26]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	441a      	add	r2, r3
 80062a8:	8b7b      	ldrh	r3, [r7, #26]
 80062aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	8013      	strh	r3, [r2, #0]
 80062be:	e1a2      	b.n	8006606 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	441a      	add	r2, r3
 80062e4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006306:	b29b      	uxth	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800630c:	4413      	add	r3, r2
 800630e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	00da      	lsls	r2, r3, #3
 8006316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006318:	4413      	add	r3, r2
 800631a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800631e:	657b      	str	r3, [r7, #84]	; 0x54
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	891b      	ldrh	r3, [r3, #8]
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	b29b      	uxth	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800633a:	b29b      	uxth	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006340:	4413      	add	r3, r2
 8006342:	653b      	str	r3, [r7, #80]	; 0x50
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	00da      	lsls	r2, r3, #3
 800634a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800634c:	4413      	add	r3, r2
 800634e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	895b      	ldrh	r3, [r3, #10]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	b29b      	uxth	r3, r3
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	785b      	ldrb	r3, [r3, #1]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 8091 	bne.w	8006490 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800637c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800637e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01b      	beq.n	80063be <USB_ActivateEndpoint+0x482>
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	881b      	ldrh	r3, [r3, #0]
 8006392:	b29b      	uxth	r3, r3
 8006394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800639c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	441a      	add	r2, r3
 80063a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80063aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80063b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80063cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80063ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <USB_ActivateEndpoint+0x4d2>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006406:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006424:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006426:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006428:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800642c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800642e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006430:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006434:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800646c:	867b      	strh	r3, [r7, #50]	; 0x32
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]
 800648e:	e0ba      	b.n	8006606 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80064a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80064a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01d      	beq.n	80064e8 <USB_ActivateEndpoint+0x5ac>
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	441a      	add	r2, r3
 80064d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80064f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80064fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01d      	beq.n	8006540 <USB_ActivateEndpoint+0x604>
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006538:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]


      if (ep->type != EP_TYPE_ISOC)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	78db      	ldrb	r3, [r3, #3]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d024      	beq.n	8006592 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	4413      	add	r3, r2
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	b29b      	uxth	r3, r3
 8006556:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800655e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006562:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006566:	f083 0320 	eor.w	r3, r3, #32
 800656a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	441a      	add	r2, r3
 8006578:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
 8006590:	e01d      	b.n	80065ce <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	441a      	add	r2, r3
 80065b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	441a      	add	r2, r3
 80065f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800660a:	4618      	mov	r0, r3
 800660c:	376c      	adds	r7, #108	; 0x6c
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop

08006618 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006618:	b480      	push	{r7}
 800661a:	b08d      	sub	sp, #52	; 0x34
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	7b1b      	ldrb	r3, [r3, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	f040 808e 	bne.w	8006748 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d044      	beq.n	80066be <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	81bb      	strh	r3, [r7, #12]
 8006642:	89bb      	ldrh	r3, [r7, #12]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d01b      	beq.n	8006684 <USB_DeactivateEndpoint+0x6c>
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	817b      	strh	r3, [r7, #10]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	441a      	add	r2, r3
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006678:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800667c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006680:	b29b      	uxth	r3, r3
 8006682:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	813b      	strh	r3, [r7, #8]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	441a      	add	r2, r3
 80066a6:	893b      	ldrh	r3, [r7, #8]
 80066a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	8013      	strh	r3, [r2, #0]
 80066bc:	e192      	b.n	80069e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	881b      	ldrh	r3, [r3, #0]
 80066ca:	827b      	strh	r3, [r7, #18]
 80066cc:	8a7b      	ldrh	r3, [r7, #18]
 80066ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01b      	beq.n	800670e <USB_DeactivateEndpoint+0xf6>
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	823b      	strh	r3, [r7, #16]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	441a      	add	r2, r3
 80066f8:	8a3b      	ldrh	r3, [r7, #16]
 80066fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670a:	b29b      	uxth	r3, r3
 800670c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006724:	81fb      	strh	r3, [r7, #14]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	441a      	add	r2, r3
 8006730:	89fb      	ldrh	r3, [r7, #14]
 8006732:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006736:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006742:	b29b      	uxth	r3, r3
 8006744:	8013      	strh	r3, [r2, #0]
 8006746:	e14d      	b.n	80069e4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	785b      	ldrb	r3, [r3, #1]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f040 80a5 	bne.w	800689c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	843b      	strh	r3, [r7, #32]
 8006760:	8c3b      	ldrh	r3, [r7, #32]
 8006762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d01b      	beq.n	80067a2 <USB_DeactivateEndpoint+0x18a>
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	b29b      	uxth	r3, r3
 8006778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006780:	83fb      	strh	r3, [r7, #30]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	8bfb      	ldrh	r3, [r7, #30]
 800678e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800679e:	b29b      	uxth	r3, r3
 80067a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	83bb      	strh	r3, [r7, #28]
 80067b0:	8bbb      	ldrh	r3, [r7, #28]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01b      	beq.n	80067f2 <USB_DeactivateEndpoint+0x1da>
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d0:	837b      	strh	r3, [r7, #26]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	8b7b      	ldrh	r3, [r7, #26]
 80067de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4413      	add	r3, r2
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006808:	833b      	strh	r3, [r7, #24]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	441a      	add	r2, r3
 8006814:	8b3b      	ldrh	r3, [r7, #24]
 8006816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800681a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006822:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006826:	b29b      	uxth	r3, r3
 8006828:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006840:	82fb      	strh	r3, [r7, #22]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	441a      	add	r2, r3
 800684c:	8afb      	ldrh	r3, [r7, #22]
 800684e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685e:	b29b      	uxth	r3, r3
 8006860:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	4413      	add	r3, r2
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006878:	82bb      	strh	r3, [r7, #20]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	441a      	add	r2, r3
 8006884:	8abb      	ldrh	r3, [r7, #20]
 8006886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	b29b      	uxth	r3, r3
 8006898:	8013      	strh	r3, [r2, #0]
 800689a:	e0a3      	b.n	80069e4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80068aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <USB_DeactivateEndpoint+0x2d4>
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	441a      	add	r2, r3
 80068d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80068d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80068fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <USB_DeactivateEndpoint+0x324>
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	853b      	strh	r3, [r7, #40]	; 0x28
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006986:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800698a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	441a      	add	r2, r3
 8006996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	441a      	add	r2, r3
 80069ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3734      	adds	r7, #52	; 0x34
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b0c4      	sub	sp, #272	; 0x110
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	1d3b      	adds	r3, r7, #4
 80069fa:	6018      	str	r0, [r3, #0]
 80069fc:	463b      	mov	r3, r7
 80069fe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint32_t len;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a00:	463b      	mov	r3, r7
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	f040 8566 	bne.w	80074d8 <USB_EPStartXfer+0xae6>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699a      	ldr	r2, [r3, #24]
 8006a12:	463b      	mov	r3, r7
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d905      	bls.n	8006a28 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a26:	e004      	b.n	8006a32 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006a28:	463b      	mov	r3, r7
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006a32:	463b      	mov	r3, r7
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d12c      	bne.n	8006a96 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006a3c:	463b      	mov	r3, r7
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6959      	ldr	r1, [r3, #20]
 8006a42:	463b      	mov	r3, r7
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	88da      	ldrh	r2, [r3, #6]
 8006a48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	1d38      	adds	r0, r7, #4
 8006a50:	6800      	ldr	r0, [r0, #0]
 8006a52:	f001 fa58 	bl	8007f06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006a56:	1d3b      	adds	r3, r7, #4
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	1d3b      	adds	r3, r7, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	463b      	mov	r3, r7
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	00da      	lsls	r2, r3, #3
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	f000 bcec 	b.w	800746e <USB_EPStartXfer+0xa7c>
    }
    else
    {
      /*double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006a96:	463b      	mov	r3, r7
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	78db      	ldrb	r3, [r3, #3]
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	f040 8356 	bne.w	800714e <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006aa2:	463b      	mov	r3, r7
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	f240 82fa 	bls.w	80070a8 <USB_EPStartXfer+0x6b6>
        {
          /*enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ab4:	1d3b      	adds	r3, r7, #4
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	463b      	mov	r3, r7
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8006ad2:	1d3b      	adds	r3, r7, #4
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	441a      	add	r2, r3
 8006ae0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]
          len = ep->maxpacket;
 8006af8:	463b      	mov	r3, r7
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006b02:	463b      	mov	r3, r7
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	463b      	mov	r3, r7
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1*/
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006b14:	1d3b      	adds	r3, r7, #4
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	463b      	mov	r3, r7
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	881b      	ldrh	r3, [r3, #0]
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 815e 	beq.w	8006dec <USB_EPStartXfer+0x3fa>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b30:	1d3b      	adds	r3, r7, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	463b      	mov	r3, r7
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	785b      	ldrb	r3, [r3, #1]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d164      	bne.n	8006c0a <USB_EPStartXfer+0x218>
 8006b40:	1d3b      	adds	r3, r7, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	4413      	add	r3, r2
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b58:	463b      	mov	r3, r7
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	00da      	lsls	r2, r3, #3
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	4413      	add	r3, r2
 8006b64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d112      	bne.n	8006b98 <USB_EPStartXfer+0x1a6>
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	801a      	strh	r2, [r3, #0]
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	881b      	ldrh	r3, [r3, #0]
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	801a      	strh	r2, [r3, #0]
 8006b96:	e054      	b.n	8006c42 <USB_EPStartXfer+0x250>
 8006b98:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b9e:	d817      	bhi.n	8006bd0 <USB_EPStartXfer+0x1de>
 8006ba0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ba4:	085b      	lsrs	r3, r3, #1
 8006ba6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006baa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <USB_EPStartXfer+0x1ce>
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	3301      	adds	r3, #1
 8006bbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	e038      	b.n	8006c42 <USB_EPStartXfer+0x250>
 8006bd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d104      	bne.n	8006bf0 <USB_EPStartXfer+0x1fe>
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bea:	3b01      	subs	r3, #1
 8006bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	029b      	lsls	r3, r3, #10
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	801a      	strh	r2, [r3, #0]
 8006c08:	e01b      	b.n	8006c42 <USB_EPStartXfer+0x250>
 8006c0a:	463b      	mov	r3, r7
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	785b      	ldrb	r3, [r3, #1]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d116      	bne.n	8006c42 <USB_EPStartXfer+0x250>
 8006c14:	1d3b      	adds	r3, r7, #4
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c22:	4413      	add	r3, r2
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	463b      	mov	r3, r7
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	00da      	lsls	r2, r3, #3
 8006c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c30:	4413      	add	r3, r2
 8006c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c36:	633b      	str	r3, [r7, #48]	; 0x30
 8006c38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c42:	463b      	mov	r3, r7
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	895b      	ldrh	r3, [r3, #10]
 8006c48:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6959      	ldr	r1, [r3, #20]
 8006c52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006c5c:	1d38      	adds	r0, r7, #4
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	f001 f951 	bl	8007f06 <USB_WritePMA>
            ep->xfer_buff += len;
 8006c64:	463b      	mov	r3, r7
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c6e:	441a      	add	r2, r3
 8006c70:	463b      	mov	r3, r7
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c76:	463b      	mov	r3, r7
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	463b      	mov	r3, r7
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d90e      	bls.n	8006ca4 <USB_EPStartXfer+0x2b2>
            {
              len = ep->maxpacket;
 8006c86:	463b      	mov	r3, r7
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006c90:	463b      	mov	r3, r7
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	463b      	mov	r3, r7
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	621a      	str	r2, [r3, #32]
 8006ca2:	e008      	b.n	8006cb6 <USB_EPStartXfer+0x2c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ca4:	463b      	mov	r3, r7
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006cae:	463b      	mov	r3, r7
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006cb6:	463b      	mov	r3, r7
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d164      	bne.n	8006d8a <USB_EPStartXfer+0x398>
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	1d3b      	adds	r3, r7, #4
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	463b      	mov	r3, r7
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	00da      	lsls	r2, r3, #3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d112      	bne.n	8006d18 <USB_EPStartXfer+0x326>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	e057      	b.n	8006dc8 <USB_EPStartXfer+0x3d6>
 8006d18:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1e:	d817      	bhi.n	8006d50 <USB_EPStartXfer+0x35e>
 8006d20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d2e:	f003 0301 	and.w	r3, r3, #1
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d004      	beq.n	8006d40 <USB_EPStartXfer+0x34e>
 8006d36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	801a      	strh	r2, [r3, #0]
 8006d4e:	e03b      	b.n	8006dc8 <USB_EPStartXfer+0x3d6>
 8006d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d54:	095b      	lsrs	r3, r3, #5
 8006d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006d5e:	f003 031f 	and.w	r3, r3, #31
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d104      	bne.n	8006d70 <USB_EPStartXfer+0x37e>
 8006d66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	029b      	lsls	r3, r3, #10
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	801a      	strh	r2, [r3, #0]
 8006d88:	e01e      	b.n	8006dc8 <USB_EPStartXfer+0x3d6>
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d119      	bne.n	8006dc8 <USB_EPStartXfer+0x3d6>
 8006d94:	1d3b      	adds	r3, r7, #4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9a:	1d3b      	adds	r3, r7, #4
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	4413      	add	r3, r2
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	463b      	mov	r3, r7
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	00da      	lsls	r2, r3, #3
 8006db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006dc8:	463b      	mov	r3, r7
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	891b      	ldrh	r3, [r3, #8]
 8006dce:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dd2:	463b      	mov	r3, r7
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6959      	ldr	r1, [r3, #20]
 8006dd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006de2:	1d38      	adds	r0, r7, #4
 8006de4:	6800      	ldr	r0, [r0, #0]
 8006de6:	f001 f88e 	bl	8007f06 <USB_WritePMA>
 8006dea:	e340      	b.n	800746e <USB_EPStartXfer+0xa7c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dec:	463b      	mov	r3, r7
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d164      	bne.n	8006ec0 <USB_EPStartXfer+0x4ce>
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	461a      	mov	r2, r3
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	4413      	add	r3, r2
 8006e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0e:	463b      	mov	r3, r7
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	00da      	lsls	r2, r3, #3
 8006e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e18:	4413      	add	r3, r2
 8006e1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d112      	bne.n	8006e4e <USB_EPStartXfer+0x45c>
 8006e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e36:	801a      	strh	r2, [r3, #0]
 8006e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e4a:	801a      	strh	r2, [r3, #0]
 8006e4c:	e057      	b.n	8006efe <USB_EPStartXfer+0x50c>
 8006e4e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e52:	2b3e      	cmp	r3, #62	; 0x3e
 8006e54:	d817      	bhi.n	8006e86 <USB_EPStartXfer+0x494>
 8006e56:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e5a:	085b      	lsrs	r3, r3, #1
 8006e5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <USB_EPStartXfer+0x484>
 8006e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e70:	3301      	adds	r3, #1
 8006e72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	029b      	lsls	r3, r3, #10
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	e03b      	b.n	8006efe <USB_EPStartXfer+0x50c>
 8006e86:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e90:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006e94:	f003 031f 	and.w	r3, r3, #31
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d104      	bne.n	8006ea6 <USB_EPStartXfer+0x4b4>
 8006e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	029b      	lsls	r3, r3, #10
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ebc:	801a      	strh	r2, [r3, #0]
 8006ebe:	e01e      	b.n	8006efe <USB_EPStartXfer+0x50c>
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	785b      	ldrb	r3, [r3, #1]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d119      	bne.n	8006efe <USB_EPStartXfer+0x50c>
 8006eca:	1d3b      	adds	r3, r7, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	657b      	str	r3, [r7, #84]	; 0x54
 8006ed0:	1d3b      	adds	r3, r7, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ede:	4413      	add	r3, r2
 8006ee0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	00da      	lsls	r2, r3, #3
 8006eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ef4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006efe:	463b      	mov	r3, r7
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	891b      	ldrh	r3, [r3, #8]
 8006f04:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f08:	463b      	mov	r3, r7
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6959      	ldr	r1, [r3, #20]
 8006f0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8006f18:	1d38      	adds	r0, r7, #4
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	f000 fff3 	bl	8007f06 <USB_WritePMA>
            ep->xfer_buff += len;
 8006f20:	463b      	mov	r3, r7
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695a      	ldr	r2, [r3, #20]
 8006f26:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f2a:	441a      	add	r2, r3
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006f32:	463b      	mov	r3, r7
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6a1a      	ldr	r2, [r3, #32]
 8006f38:	463b      	mov	r3, r7
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d90e      	bls.n	8006f60 <USB_EPStartXfer+0x56e>
            {
              len = ep->maxpacket;
 8006f42:	463b      	mov	r3, r7
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db -= len;
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006f56:	1ad2      	subs	r2, r2, r3
 8006f58:	463b      	mov	r3, r7
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	621a      	str	r2, [r3, #32]
 8006f5e:	e008      	b.n	8006f72 <USB_EPStartXfer+0x580>
            }
            else
            {
              len = ep->xfer_len_db;
 8006f60:	463b      	mov	r3, r7
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
              ep->xfer_len_db = 0;
 8006f6a:	463b      	mov	r3, r7
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f72:	1d3b      	adds	r3, r7, #4
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
 8006f78:	463b      	mov	r3, r7
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d164      	bne.n	800704c <USB_EPStartXfer+0x65a>
 8006f82:	1d3b      	adds	r3, r7, #4
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f88:	1d3b      	adds	r3, r7, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f96:	4413      	add	r3, r2
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	00da      	lsls	r2, r3, #3
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d112      	bne.n	8006fda <USB_EPStartXfer+0x5e8>
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	881b      	ldrh	r3, [r3, #0]
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e054      	b.n	8007084 <USB_EPStartXfer+0x692>
 8006fda:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fde:	2b3e      	cmp	r3, #62	; 0x3e
 8006fe0:	d817      	bhi.n	8007012 <USB_EPStartXfer+0x620>
 8006fe2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006fec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <USB_EPStartXfer+0x610>
 8006ff8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007002:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007006:	b29b      	uxth	r3, r3
 8007008:	029b      	lsls	r3, r3, #10
 800700a:	b29a      	uxth	r2, r3
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e038      	b.n	8007084 <USB_EPStartXfer+0x692>
 8007012:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800701c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007020:	f003 031f 	and.w	r3, r3, #31
 8007024:	2b00      	cmp	r3, #0
 8007026:	d104      	bne.n	8007032 <USB_EPStartXfer+0x640>
 8007028:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800702c:	3b01      	subs	r3, #1
 800702e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007036:	b29b      	uxth	r3, r3
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	b29b      	uxth	r3, r3
 800703c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007040:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007044:	b29a      	uxth	r2, r3
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e01b      	b.n	8007084 <USB_EPStartXfer+0x692>
 800704c:	463b      	mov	r3, r7
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	785b      	ldrb	r3, [r3, #1]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d116      	bne.n	8007084 <USB_EPStartXfer+0x692>
 8007056:	1d3b      	adds	r3, r7, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007064:	4413      	add	r3, r2
 8007066:	647b      	str	r3, [r7, #68]	; 0x44
 8007068:	463b      	mov	r3, r7
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	00da      	lsls	r2, r3, #3
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	4413      	add	r3, r2
 8007074:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007078:	643b      	str	r3, [r7, #64]	; 0x40
 800707a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800707e:	b29a      	uxth	r2, r3
 8007080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007082:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007084:	463b      	mov	r3, r7
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	895b      	ldrh	r3, [r3, #10]
 800708a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
            /*Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800708e:	463b      	mov	r3, r7
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6959      	ldr	r1, [r3, #20]
 8007094:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007098:	b29b      	uxth	r3, r3
 800709a:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800709e:	1d38      	adds	r0, r7, #4
 80070a0:	6800      	ldr	r0, [r0, #0]
 80070a2:	f000 ff30 	bl	8007f06 <USB_WritePMA>
 80070a6:	e1e2      	b.n	800746e <USB_EPStartXfer+0xa7c>
          }
        }
        /*auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer*/
        else
        {
          len = ep->xfer_len_db;
 80070a8:	463b      	mov	r3, r7
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          /*disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80070b2:	1d3b      	adds	r3, r7, #4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	463b      	mov	r3, r7
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80070c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070cc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80070d0:	1d3b      	adds	r3, r7, #4
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	463b      	mov	r3, r7
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	441a      	add	r2, r3
 80070de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80070e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	8013      	strh	r3, [r2, #0]
          /*Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	663b      	str	r3, [r7, #96]	; 0x60
 80070fc:	1d3b      	adds	r3, r7, #4
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007104:	b29b      	uxth	r3, r3
 8007106:	461a      	mov	r2, r3
 8007108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800710a:	4413      	add	r3, r2
 800710c:	663b      	str	r3, [r7, #96]	; 0x60
 800710e:	463b      	mov	r3, r7
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	00da      	lsls	r2, r3, #3
 8007116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007118:	4413      	add	r3, r2
 800711a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800711e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007124:	b29a      	uxth	r2, r3
 8007126:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007128:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800712a:	463b      	mov	r3, r7
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	891b      	ldrh	r3, [r3, #8]
 8007130:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
          /*Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007134:	463b      	mov	r3, r7
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6959      	ldr	r1, [r3, #20]
 800713a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800713e:	b29b      	uxth	r3, r3
 8007140:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8007144:	1d38      	adds	r0, r7, #4
 8007146:	6800      	ldr	r0, [r0, #0]
 8007148:	f000 fedd 	bl	8007f06 <USB_WritePMA>
 800714c:	e18f      	b.n	800746e <USB_EPStartXfer+0xa7c>

      /*mange isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800714e:	1d3b      	adds	r3, r7, #4
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	463b      	mov	r3, r7
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	b29b      	uxth	r3, r3
 8007160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 808f 	beq.w	8007288 <USB_EPStartXfer+0x896>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800716a:	1d3b      	adds	r3, r7, #4
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007170:	463b      	mov	r3, r7
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	785b      	ldrb	r3, [r3, #1]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d164      	bne.n	8007244 <USB_EPStartXfer+0x852>
 800717a:	1d3b      	adds	r3, r7, #4
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	673b      	str	r3, [r7, #112]	; 0x70
 8007180:	1d3b      	adds	r3, r7, #4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007188:	b29b      	uxth	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800718e:	4413      	add	r3, r2
 8007190:	673b      	str	r3, [r7, #112]	; 0x70
 8007192:	463b      	mov	r3, r7
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	00da      	lsls	r2, r3, #3
 800719a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800719c:	4413      	add	r3, r2
 800719e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d112      	bne.n	80071d2 <USB_EPStartXfer+0x7e0>
 80071ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ae:	881b      	ldrh	r3, [r3, #0]
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071be:	881b      	ldrh	r3, [r3, #0]
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e054      	b.n	800727c <USB_EPStartXfer+0x88a>
 80071d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071d6:	2b3e      	cmp	r3, #62	; 0x3e
 80071d8:	d817      	bhi.n	800720a <USB_EPStartXfer+0x818>
 80071da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0x808>
 80071f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	b29b      	uxth	r3, r3
 8007200:	029b      	lsls	r3, r3, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e038      	b.n	800727c <USB_EPStartXfer+0x88a>
 800720a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800720e:	095b      	lsrs	r3, r3, #5
 8007210:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007214:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007218:	f003 031f 	and.w	r3, r3, #31
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <USB_EPStartXfer+0x838>
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007224:	3b01      	subs	r3, #1
 8007226:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800722a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29b      	uxth	r3, r3
 8007234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800723c:	b29a      	uxth	r2, r3
 800723e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007240:	801a      	strh	r2, [r3, #0]
 8007242:	e01b      	b.n	800727c <USB_EPStartXfer+0x88a>
 8007244:	463b      	mov	r3, r7
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d116      	bne.n	800727c <USB_EPStartXfer+0x88a>
 800724e:	1d3b      	adds	r3, r7, #4
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007256:	b29b      	uxth	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800725c:	4413      	add	r3, r2
 800725e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007260:	463b      	mov	r3, r7
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	00da      	lsls	r2, r3, #3
 8007268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800726a:	4413      	add	r3, r2
 800726c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007270:	677b      	str	r3, [r7, #116]	; 0x74
 8007272:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007276:	b29a      	uxth	r2, r3
 8007278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800727c:	463b      	mov	r3, r7
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	895b      	ldrh	r3, [r3, #10]
 8007282:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
 8007286:	e097      	b.n	80073b8 <USB_EPStartXfer+0x9c6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007288:	463b      	mov	r3, r7
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	785b      	ldrb	r3, [r3, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d168      	bne.n	8007364 <USB_EPStartXfer+0x972>
 8007292:	1d3b      	adds	r3, r7, #4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800729a:	1d3b      	adds	r3, r7, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072aa:	4413      	add	r3, r2
 80072ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072b0:	463b      	mov	r3, r7
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	00da      	lsls	r2, r3, #3
 80072b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d112      	bne.n	80072f2 <USB_EPStartXfer+0x900>
 80072cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072de:	881b      	ldrh	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80072ee:	801a      	strh	r2, [r3, #0]
 80072f0:	e05d      	b.n	80073ae <USB_EPStartXfer+0x9bc>
 80072f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072f6:	2b3e      	cmp	r3, #62	; 0x3e
 80072f8:	d817      	bhi.n	800732a <USB_EPStartXfer+0x938>
 80072fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007304:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <USB_EPStartXfer+0x928>
 8007310:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007314:	3301      	adds	r3, #1
 8007316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800731a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800731e:	b29b      	uxth	r3, r3
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	b29a      	uxth	r2, r3
 8007324:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e041      	b.n	80073ae <USB_EPStartXfer+0x9bc>
 800732a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800732e:	095b      	lsrs	r3, r3, #5
 8007330:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007334:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007338:	f003 031f 	and.w	r3, r3, #31
 800733c:	2b00      	cmp	r3, #0
 800733e:	d104      	bne.n	800734a <USB_EPStartXfer+0x958>
 8007340:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007344:	3b01      	subs	r3, #1
 8007346:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800734a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800734e:	b29b      	uxth	r3, r3
 8007350:	029b      	lsls	r3, r3, #10
 8007352:	b29b      	uxth	r3, r3
 8007354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800735c:	b29a      	uxth	r2, r3
 800735e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	e024      	b.n	80073ae <USB_EPStartXfer+0x9bc>
 8007364:	463b      	mov	r3, r7
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d11f      	bne.n	80073ae <USB_EPStartXfer+0x9bc>
 800736e:	1d3b      	adds	r3, r7, #4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007376:	1d3b      	adds	r3, r7, #4
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007386:	4413      	add	r3, r2
 8007388:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800738c:	463b      	mov	r3, r7
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	00da      	lsls	r2, r3, #3
 8007394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007398:	4413      	add	r3, r2
 800739a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800739e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80073ae:	463b      	mov	r3, r7
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	891b      	ldrh	r3, [r3, #8]
 80073b4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        }
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80073b8:	463b      	mov	r3, r7
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6959      	ldr	r1, [r3, #20]
 80073be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80073c8:	1d38      	adds	r0, r7, #4
 80073ca:	6800      	ldr	r0, [r0, #0]
 80073cc:	f000 fd9b 	bl	8007f06 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80073d0:	463b      	mov	r3, r7
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	785b      	ldrb	r3, [r3, #1]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d122      	bne.n	8007420 <USB_EPStartXfer+0xa2e>
 80073da:	1d3b      	adds	r3, r7, #4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	463b      	mov	r3, r7
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	881b      	ldrh	r3, [r3, #0]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80073f8:	1d3b      	adds	r3, r7, #4
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	463b      	mov	r3, r7
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	441a      	add	r2, r3
 8007406:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800740a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800740e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007416:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800741a:	b29b      	uxth	r3, r3
 800741c:	8013      	strh	r3, [r2, #0]
 800741e:	e026      	b.n	800746e <USB_EPStartXfer+0xa7c>
 8007420:	463b      	mov	r3, r7
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d121      	bne.n	800746e <USB_EPStartXfer+0xa7c>
 800742a:	1d3b      	adds	r3, r7, #4
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	463b      	mov	r3, r7
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	b29b      	uxth	r3, r3
 800743c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8007448:	1d3b      	adds	r3, r7, #4
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	463b      	mov	r3, r7
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	463b      	mov	r3, r7
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f107 020e 	add.w	r2, r7, #14
 8007484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800748c:	8013      	strh	r3, [r2, #0]
 800748e:	f107 030e 	add.w	r3, r7, #14
 8007492:	f107 020e 	add.w	r2, r7, #14
 8007496:	8812      	ldrh	r2, [r2, #0]
 8007498:	f082 0210 	eor.w	r2, r2, #16
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	f107 030e 	add.w	r3, r7, #14
 80074a2:	f107 020e 	add.w	r2, r7, #14
 80074a6:	8812      	ldrh	r2, [r2, #0]
 80074a8:	f082 0220 	eor.w	r2, r2, #32
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	681a      	ldr	r2, [r3, #0]
 80074b2:	463b      	mov	r3, r7
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	441a      	add	r2, r3
 80074bc:	f107 030e 	add.w	r3, r7, #14
 80074c0:	881b      	ldrh	r3, [r3, #0]
 80074c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	8013      	strh	r3, [r2, #0]
 80074d6:	e3b5      	b.n	8007c44 <USB_EPStartXfer+0x1252>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80074d8:	463b      	mov	r3, r7
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	7b1b      	ldrb	r3, [r3, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f040 8090 	bne.w	8007604 <USB_EPStartXfer+0xc12>
    {
      /* Multi packet transfer*/
      if (ep->xfer_len > ep->maxpacket)
 80074e4:	463b      	mov	r3, r7
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	463b      	mov	r3, r7
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d90e      	bls.n	8007512 <USB_EPStartXfer+0xb20>
      {
        len = ep->maxpacket;
 80074f4:	463b      	mov	r3, r7
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len -= len;
 80074fe:	463b      	mov	r3, r7
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007508:	1ad2      	subs	r2, r2, r3
 800750a:	463b      	mov	r3, r7
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	619a      	str	r2, [r3, #24]
 8007510:	e008      	b.n	8007524 <USB_EPStartXfer+0xb32>
      }
      else
      {
        len = ep->xfer_len;
 8007512:	463b      	mov	r3, r7
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	699b      	ldr	r3, [r3, #24]
 8007518:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ep->xfer_len = 0U;
 800751c:	463b      	mov	r3, r7
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2200      	movs	r2, #0
 8007522:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800753c:	4413      	add	r3, r2
 800753e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007542:	463b      	mov	r3, r7
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	00da      	lsls	r2, r3, #3
 800754a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800754e:	4413      	add	r3, r2
 8007550:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007554:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007558:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800755c:	2b00      	cmp	r3, #0
 800755e:	d116      	bne.n	800758e <USB_EPStartXfer+0xb9c>
 8007560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007564:	881b      	ldrh	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007584:	b29a      	uxth	r2, r3
 8007586:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800758a:	801a      	strh	r2, [r3, #0]
 800758c:	e32c      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
 800758e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007592:	2b3e      	cmp	r3, #62	; 0x3e
 8007594:	d818      	bhi.n	80075c8 <USB_EPStartXfer+0xbd6>
 8007596:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800759a:	085b      	lsrs	r3, r3, #1
 800759c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d004      	beq.n	80075b6 <USB_EPStartXfer+0xbc4>
 80075ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075b0:	3301      	adds	r3, #1
 80075b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	029b      	lsls	r3, r3, #10
 80075be:	b29a      	uxth	r2, r3
 80075c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075c4:	801a      	strh	r2, [r3, #0]
 80075c6:	e30f      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
 80075c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075cc:	095b      	lsrs	r3, r3, #5
 80075ce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80075d6:	f003 031f 	and.w	r3, r3, #31
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <USB_EPStartXfer+0xbf6>
 80075de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075e2:	3b01      	subs	r3, #1
 80075e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80075e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007600:	801a      	strh	r2, [r3, #0]
 8007602:	e2f1      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
    }
    else
    {
      /*First Transfer Coming From HAL_PCD_EP_Receive & From ISR*/
      /*Set the Double buffer counter*/
      if (ep->type == EP_TYPE_BULK)
 8007604:	463b      	mov	r3, r7
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	78db      	ldrb	r3, [r3, #3]
 800760a:	2b02      	cmp	r3, #2
 800760c:	f040 818f 	bne.w	800792e <USB_EPStartXfer+0xf3c>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007610:	463b      	mov	r3, r7
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	785b      	ldrb	r3, [r3, #1]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d175      	bne.n	8007706 <USB_EPStartXfer+0xd14>
 800761a:	1d3b      	adds	r3, r7, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007632:	4413      	add	r3, r2
 8007634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007638:	463b      	mov	r3, r7
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	00da      	lsls	r2, r3, #3
 8007640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007644:	4413      	add	r3, r2
 8007646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800764a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800764e:	463b      	mov	r3, r7
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d116      	bne.n	8007686 <USB_EPStartXfer+0xc94>
 8007658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007664:	b29a      	uxth	r2, r3
 8007666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800766a:	801a      	strh	r2, [r3, #0]
 800766c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	b29b      	uxth	r3, r3
 8007674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800767c:	b29a      	uxth	r2, r3
 800767e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007682:	801a      	strh	r2, [r3, #0]
 8007684:	e065      	b.n	8007752 <USB_EPStartXfer+0xd60>
 8007686:	463b      	mov	r3, r7
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b3e      	cmp	r3, #62	; 0x3e
 800768e:	d81a      	bhi.n	80076c6 <USB_EPStartXfer+0xcd4>
 8007690:	463b      	mov	r3, r7
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	085b      	lsrs	r3, r3, #1
 8007698:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800769c:	463b      	mov	r3, r7
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f003 0301 	and.w	r3, r3, #1
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <USB_EPStartXfer+0xcc2>
 80076aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ae:	3301      	adds	r3, #1
 80076b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	029b      	lsls	r3, r3, #10
 80076bc:	b29a      	uxth	r2, r3
 80076be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	e045      	b.n	8007752 <USB_EPStartXfer+0xd60>
 80076c6:	463b      	mov	r3, r7
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076d2:	463b      	mov	r3, r7
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <USB_EPStartXfer+0xcf8>
 80076e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076e4:	3b01      	subs	r3, #1
 80076e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80076ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	029b      	lsls	r3, r3, #10
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	e025      	b.n	8007752 <USB_EPStartXfer+0xd60>
 8007706:	463b      	mov	r3, r7
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	785b      	ldrb	r3, [r3, #1]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d120      	bne.n	8007752 <USB_EPStartXfer+0xd60>
 8007710:	1d3b      	adds	r3, r7, #4
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007720:	b29b      	uxth	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007728:	4413      	add	r3, r2
 800772a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800772e:	463b      	mov	r3, r7
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	00da      	lsls	r2, r3, #3
 8007736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800773a:	4413      	add	r3, r2
 800773c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007740:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007744:	463b      	mov	r3, r7
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	b29a      	uxth	r2, r3
 800774c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007750:	801a      	strh	r2, [r3, #0]
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800775a:	463b      	mov	r3, r7
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d175      	bne.n	8007850 <USB_EPStartXfer+0xe5e>
 8007764:	1d3b      	adds	r3, r7, #4
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007774:	b29b      	uxth	r3, r3
 8007776:	461a      	mov	r2, r3
 8007778:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800777c:	4413      	add	r3, r2
 800777e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007782:	463b      	mov	r3, r7
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00da      	lsls	r2, r3, #3
 800778a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800778e:	4413      	add	r3, r2
 8007790:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007798:	463b      	mov	r3, r7
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d116      	bne.n	80077d0 <USB_EPStartXfer+0xdde>
 80077a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	b29b      	uxth	r3, r3
 80077be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e061      	b.n	8007894 <USB_EPStartXfer+0xea2>
 80077d0:	463b      	mov	r3, r7
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	2b3e      	cmp	r3, #62	; 0x3e
 80077d8:	d81a      	bhi.n	8007810 <USB_EPStartXfer+0xe1e>
 80077da:	463b      	mov	r3, r7
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e6:	463b      	mov	r3, r7
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <USB_EPStartXfer+0xe0c>
 80077f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800780c:	801a      	strh	r2, [r3, #0]
 800780e:	e041      	b.n	8007894 <USB_EPStartXfer+0xea2>
 8007810:	463b      	mov	r3, r7
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800781c:	463b      	mov	r3, r7
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2b00      	cmp	r3, #0
 8007828:	d104      	bne.n	8007834 <USB_EPStartXfer+0xe42>
 800782a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782e:	3b01      	subs	r3, #1
 8007830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007838:	b29b      	uxth	r3, r3
 800783a:	029b      	lsls	r3, r3, #10
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e021      	b.n	8007894 <USB_EPStartXfer+0xea2>
 8007850:	463b      	mov	r3, r7
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d11c      	bne.n	8007894 <USB_EPStartXfer+0xea2>
 800785a:	1d3b      	adds	r3, r7, #4
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007862:	b29b      	uxth	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800786a:	4413      	add	r3, r2
 800786c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007870:	463b      	mov	r3, r7
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	00da      	lsls	r2, r3, #3
 8007878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800787c:	4413      	add	r3, r2
 800787e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007886:	463b      	mov	r3, r7
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	b29a      	uxth	r2, r3
 800788e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007892:	801a      	strh	r2, [r3, #0]
        /*Coming from ISR*/
        if (ep->xfer_count != 0U)
 8007894:	463b      	mov	r3, r7
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 81a4 	beq.w	8007be8 <USB_EPStartXfer+0x11f6>
        {
          /* update last value to check if there is blocking state*/
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80078a0:	1d3b      	adds	r3, r7, #4
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	463b      	mov	r3, r7
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	4413      	add	r3, r2
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078b4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80078b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d005      	beq.n	80078cc <USB_EPStartXfer+0xeda>
 80078c0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10d      	bne.n	80078e8 <USB_EPStartXfer+0xef6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078cc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80078d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f040 8187 	bne.w	8007be8 <USB_EPStartXfer+0x11f6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80078de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f040 8180 	bne.w	8007be8 <USB_EPStartXfer+0x11f6>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80078e8:	1d3b      	adds	r3, r7, #4
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	463b      	mov	r3, r7
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007902:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8007906:	1d3b      	adds	r3, r7, #4
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	463b      	mov	r3, r7
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	441a      	add	r2, r3
 8007914:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8007918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800791c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007920:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007924:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007928:	b29b      	uxth	r3, r3
 800792a:	8013      	strh	r3, [r2, #0]
 800792c:	e15c      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
          }
        }
      }
      /*iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800792e:	463b      	mov	r3, r7
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	78db      	ldrb	r3, [r3, #3]
 8007934:	2b01      	cmp	r3, #1
 8007936:	f040 8155 	bne.w	8007be4 <USB_EPStartXfer+0x11f2>
      {
        /* Multi packet transfer*/
        if (ep->xfer_len > ep->maxpacket)
 800793a:	463b      	mov	r3, r7
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	463b      	mov	r3, r7
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	429a      	cmp	r2, r3
 8007948:	d90e      	bls.n	8007968 <USB_EPStartXfer+0xf76>
        {
          len = ep->maxpacket;
 800794a:	463b      	mov	r3, r7
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len -= len;
 8007954:	463b      	mov	r3, r7
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	463b      	mov	r3, r7
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	619a      	str	r2, [r3, #24]
 8007966:	e008      	b.n	800797a <USB_EPStartXfer+0xf88>
        }
        else
        {
          len = ep->xfer_len;
 8007968:	463b      	mov	r3, r7
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
          ep->xfer_len = 0U;
 8007972:	463b      	mov	r3, r7
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2200      	movs	r2, #0
 8007978:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800797a:	463b      	mov	r3, r7
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	785b      	ldrb	r3, [r3, #1]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d16f      	bne.n	8007a64 <USB_EPStartXfer+0x1072>
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800798c:	1d3b      	adds	r3, r7, #4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007994:	b29b      	uxth	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800799c:	4413      	add	r3, r2
 800799e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079a2:	463b      	mov	r3, r7
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	00da      	lsls	r2, r3, #3
 80079aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80079ae:	4413      	add	r3, r2
 80079b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d116      	bne.n	80079ee <USB_EPStartXfer+0xffc>
 80079c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079ea:	801a      	strh	r2, [r3, #0]
 80079ec:	e05f      	b.n	8007aae <USB_EPStartXfer+0x10bc>
 80079ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079f2:	2b3e      	cmp	r3, #62	; 0x3e
 80079f4:	d818      	bhi.n	8007a28 <USB_EPStartXfer+0x1036>
 80079f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80079fa:	085b      	lsrs	r3, r3, #1
 80079fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a00:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <USB_EPStartXfer+0x1024>
 8007a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a10:	3301      	adds	r3, #1
 8007a12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	029b      	lsls	r3, r3, #10
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	e042      	b.n	8007aae <USB_EPStartXfer+0x10bc>
 8007a28:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a2c:	095b      	lsrs	r3, r3, #5
 8007a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d104      	bne.n	8007a48 <USB_EPStartXfer+0x1056>
 8007a3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a42:	3b01      	subs	r3, #1
 8007a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	029b      	lsls	r3, r3, #10
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	e024      	b.n	8007aae <USB_EPStartXfer+0x10bc>
 8007a64:	463b      	mov	r3, r7
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	785b      	ldrb	r3, [r3, #1]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d11f      	bne.n	8007aae <USB_EPStartXfer+0x10bc>
 8007a6e:	1d3b      	adds	r3, r7, #4
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a76:	1d3b      	adds	r3, r7, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a86:	4413      	add	r3, r2
 8007a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a8c:	463b      	mov	r3, r7
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	00da      	lsls	r2, r3, #3
 8007a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a98:	4413      	add	r3, r2
 8007a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007aa2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	1d3b      	adds	r3, r7, #4
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	785b      	ldrb	r3, [r3, #1]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d16f      	bne.n	8007ba0 <USB_EPStartXfer+0x11ae>
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ad8:	4413      	add	r3, r2
 8007ada:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ade:	463b      	mov	r3, r7
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	00da      	lsls	r2, r3, #3
 8007ae6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007af0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007af4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d116      	bne.n	8007b2a <USB_EPStartXfer+0x1138>
 8007afc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b0e:	801a      	strh	r2, [r3, #0]
 8007b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	e05e      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
 8007b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007b30:	d818      	bhi.n	8007b64 <USB_EPStartXfer+0x1172>
 8007b32:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d004      	beq.n	8007b52 <USB_EPStartXfer+0x1160>
 8007b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	029b      	lsls	r3, r3, #10
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	e041      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
 8007b64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d104      	bne.n	8007b84 <USB_EPStartXfer+0x1192>
 8007b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	029b      	lsls	r3, r3, #10
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b9c:	801a      	strh	r2, [r3, #0]
 8007b9e:	e023      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d11e      	bne.n	8007be8 <USB_EPStartXfer+0x11f6>
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bba:	4413      	add	r3, r2
 8007bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	00da      	lsls	r2, r3, #3
 8007bc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007bcc:	4413      	add	r3, r2
 8007bce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007bd6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007be0:	801a      	strh	r2, [r3, #0]
 8007be2:	e001      	b.n	8007be8 <USB_EPStartXfer+0x11f6>
      }
      else
      {
        return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e02e      	b.n	8007c46 <USB_EPStartXfer+0x1254>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007be8:	1d3b      	adds	r3, r7, #4
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	463b      	mov	r3, r7
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c02:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007c06:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c0e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007c12:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c1a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	463b      	mov	r3, r7
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	441a      	add	r2, r3
 8007c2c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	785b      	ldrb	r3, [r3, #1]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d020      	beq.n	8007ca4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c78:	81bb      	strh	r3, [r7, #12]
 8007c7a:	89bb      	ldrh	r3, [r7, #12]
 8007c7c:	f083 0310 	eor.w	r3, r3, #16
 8007c80:	81bb      	strh	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	441a      	add	r2, r3
 8007c8c:	89bb      	ldrh	r3, [r7, #12]
 8007c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	8013      	strh	r3, [r2, #0]
 8007ca2:	e01f      	b.n	8007ce4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	81fb      	strh	r3, [r7, #14]
 8007cbc:	89fb      	ldrh	r3, [r7, #14]
 8007cbe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cc2:	81fb      	strh	r3, [r7, #14]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	441a      	add	r2, r3
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b087      	sub	sp, #28
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	7b1b      	ldrb	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f040 809d 	bne.w	8007e40 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d04c      	beq.n	8007da8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	823b      	strh	r3, [r7, #16]
 8007d1c:	8a3b      	ldrh	r3, [r7, #16]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01b      	beq.n	8007d5e <USB_EPClearStall+0x6c>
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	881b      	ldrh	r3, [r3, #0]
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d3c:	81fb      	strh	r3, [r7, #14]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	78db      	ldrb	r3, [r3, #3]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d06c      	beq.n	8007e40 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4413      	add	r3, r2
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d7c:	81bb      	strh	r3, [r7, #12]
 8007d7e:	89bb      	ldrh	r3, [r7, #12]
 8007d80:	f083 0320 	eor.w	r3, r3, #32
 8007d84:	81bb      	strh	r3, [r7, #12]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	441a      	add	r2, r3
 8007d90:	89bb      	ldrh	r3, [r7, #12]
 8007d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	8013      	strh	r3, [r2, #0]
 8007da6:	e04b      	b.n	8007e40 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	82fb      	strh	r3, [r7, #22]
 8007db6:	8afb      	ldrh	r3, [r7, #22]
 8007db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01b      	beq.n	8007df8 <USB_EPClearStall+0x106>
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd6:	82bb      	strh	r3, [r7, #20]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	441a      	add	r2, r3
 8007de2:	8abb      	ldrh	r3, [r7, #20]
 8007de4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	827b      	strh	r3, [r7, #18]
 8007e10:	8a7b      	ldrh	r3, [r7, #18]
 8007e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e16:	827b      	strh	r3, [r7, #18]
 8007e18:	8a7b      	ldrh	r3, [r7, #18]
 8007e1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e1e:	827b      	strh	r3, [r7, #18]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	441a      	add	r2, r3
 8007e2a:	8a7b      	ldrh	r3, [r7, #18]
 8007e2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	371c      	adds	r7, #28
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e5a:	78fb      	ldrb	r3, [r7, #3]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d103      	bne.n	8007e68 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2280      	movs	r2, #128	; 0x80
 8007e64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	370c      	adds	r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b083      	sub	sp, #12
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b08d      	sub	sp, #52	; 0x34
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	4611      	mov	r1, r2
 8007f12:	461a      	mov	r2, r3
 8007f14:	460b      	mov	r3, r1
 8007f16:	80fb      	strh	r3, [r7, #6]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f1c:	88bb      	ldrh	r3, [r7, #4]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	085b      	lsrs	r3, r3, #1
 8007f22:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f36:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f3c:	e01b      	b.n	8007f76 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b29b      	uxth	r3, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	3302      	adds	r3, #2
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	3b01      	subs	r3, #1
 8007f74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1e0      	bne.n	8007f3e <USB_WritePMA+0x38>
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3734      	adds	r7, #52	; 0x34
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4611      	mov	r1, r2
 8007f94:	461a      	mov	r2, r3
 8007f96:	460b      	mov	r3, r1
 8007f98:	80fb      	strh	r3, [r7, #6]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f9e:	88bb      	ldrh	r3, [r7, #4]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fae:	88fa      	ldrh	r2, [r7, #6]
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbe:	e018      	b.n	8007ff2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	3302      	adds	r3, #2
 8007fcc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e3      	bne.n	8007fc0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007ff8:	88bb      	ldrh	r3, [r7, #4]
 8007ffa:	f003 0301 	and.w	r3, r3, #1
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d007      	beq.n	8008014 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8008004:	6a3b      	ldr	r3, [r7, #32]
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	b2da      	uxtb	r2, r3
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	701a      	strb	r2, [r3, #0]
  }
}
 8008014:	bf00      	nop
 8008016:	372c      	adds	r7, #44	; 0x2c
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800802c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008030:	f002 fa4c 	bl	800a4cc <malloc>
 8008034:	4603      	mov	r3, r0
 8008036:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008046:	2302      	movs	r3, #2
 8008048:	e066      	b.n	8008118 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	7c1b      	ldrb	r3, [r3, #16]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d119      	bne.n	800808e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805e:	2202      	movs	r2, #2
 8008060:	2181      	movs	r1, #129	; 0x81
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 ff20 	bl	8009ea8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800806e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008072:	2202      	movs	r2, #2
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 ff16 	bl	8009ea8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2210      	movs	r2, #16
 8008088:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800808c:	e016      	b.n	80080bc <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800808e:	2340      	movs	r3, #64	; 0x40
 8008090:	2202      	movs	r2, #2
 8008092:	2181      	movs	r1, #129	; 0x81
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 ff07 	bl	8009ea8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080a0:	2340      	movs	r3, #64	; 0x40
 80080a2:	2202      	movs	r2, #2
 80080a4:	2101      	movs	r1, #1
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f001 fefe 	bl	8009ea8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2210      	movs	r2, #16
 80080b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080bc:	2308      	movs	r3, #8
 80080be:	2203      	movs	r2, #3
 80080c0:	2182      	movs	r1, #130	; 0x82
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 fef0 	bl	8009ea8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	7c1b      	ldrb	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d109      	bne.n	8008106 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fc:	2101      	movs	r1, #1
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f002 f84e 	bl	800a1a0 <USBD_LL_PrepareReceive>
 8008104:	e007      	b.n	8008116 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	2101      	movs	r1, #1
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f002 f845 	bl	800a1a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800812c:	2181      	movs	r1, #129	; 0x81
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fef8 	bl	8009f24 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800813a:	2101      	movs	r1, #1
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fef1 	bl	8009f24 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800814a:	2182      	movs	r1, #130	; 0x82
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f001 fee9 	bl	8009f24 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00e      	beq.n	800818a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817c:	4618      	mov	r0, r3
 800817e:	f002 f9ad 	bl	800a4dc <free>
    pdev->pClassData = NULL;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d03a      	beq.n	8008234 <USBD_CDC_Setup+0xa0>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	f040 8097 	bne.w	80082f2 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	88db      	ldrh	r3, [r3, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d029      	beq.n	8008220 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	b25b      	sxtb	r3, r3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	da11      	bge.n	80081fa <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80081e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	88d2      	ldrh	r2, [r2, #6]
 80081e8:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80081ea:	6939      	ldr	r1, [r7, #16]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	88db      	ldrh	r3, [r3, #6]
 80081f0:	461a      	mov	r2, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 fa5d 	bl	80096b2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80081f8:	e082      	b.n	8008300 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	785a      	ldrb	r2, [r3, #1]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	88db      	ldrh	r3, [r3, #6]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008210:	6939      	ldr	r1, [r7, #16]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	88db      	ldrh	r3, [r3, #6]
 8008216:	461a      	mov	r2, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fa76 	bl	800970a <USBD_CtlPrepareRx>
      break;
 800821e:	e06f      	b.n	8008300 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	7850      	ldrb	r0, [r2, #1]
 800822c:	2200      	movs	r2, #0
 800822e:	6839      	ldr	r1, [r7, #0]
 8008230:	4798      	blx	r3
      break;
 8008232:	e065      	b.n	8008300 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785b      	ldrb	r3, [r3, #1]
 8008238:	2b0b      	cmp	r3, #11
 800823a:	d84f      	bhi.n	80082dc <USBD_CDC_Setup+0x148>
 800823c:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <USBD_CDC_Setup+0xb0>)
 800823e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008242:	bf00      	nop
 8008244:	08008275 	.word	0x08008275
 8008248:	080082eb 	.word	0x080082eb
 800824c:	080082dd 	.word	0x080082dd
 8008250:	080082dd 	.word	0x080082dd
 8008254:	080082dd 	.word	0x080082dd
 8008258:	080082dd 	.word	0x080082dd
 800825c:	080082dd 	.word	0x080082dd
 8008260:	080082dd 	.word	0x080082dd
 8008264:	080082dd 	.word	0x080082dd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	0800829d 	.word	0x0800829d
 8008270:	080082c5 	.word	0x080082c5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827a:	2b03      	cmp	r3, #3
 800827c:	d107      	bne.n	800828e <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800827e:	f107 030c 	add.w	r3, r7, #12
 8008282:	2202      	movs	r2, #2
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 fa13 	bl	80096b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800828c:	e030      	b.n	80082f0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 f99d 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	75fb      	strb	r3, [r7, #23]
          break;
 800829a:	e029      	b.n	80082f0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d107      	bne.n	80082b6 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082a6:	f107 030f 	add.w	r3, r7, #15
 80082aa:	2201      	movs	r2, #1
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 f9ff 	bl	80096b2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082b4:	e01c      	b.n	80082f0 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f989 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80082be:	2303      	movs	r3, #3
 80082c0:	75fb      	strb	r3, [r7, #23]
          break;
 80082c2:	e015      	b.n	80082f0 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d00f      	beq.n	80082ee <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 f97d 	bl	80095d0 <USBD_CtlError>
            ret = USBD_FAIL;
 80082d6:	2303      	movs	r3, #3
 80082d8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082da:	e008      	b.n	80082ee <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f976 	bl	80095d0 <USBD_CtlError>
          ret = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	75fb      	strb	r3, [r7, #23]
          break;
 80082e8:	e002      	b.n	80082f0 <USBD_CDC_Setup+0x15c>
          break;
 80082ea:	bf00      	nop
 80082ec:	e008      	b.n	8008300 <USBD_CDC_Setup+0x16c>
          break;
 80082ee:	bf00      	nop
      }
      break;
 80082f0:	e006      	b.n	8008300 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f96b 	bl	80095d0 <USBD_CtlError>
      ret = USBD_FAIL;
 80082fa:	2303      	movs	r3, #3
 80082fc:	75fb      	strb	r3, [r7, #23]
      break;
 80082fe:	bf00      	nop
  }

  return (uint8_t)ret;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800831e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	e04f      	b.n	80083ce <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008334:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008336:	78fa      	ldrb	r2, [r7, #3]
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	3318      	adds	r3, #24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d029      	beq.n	80083a0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3318      	adds	r3, #24
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	78f9      	ldrb	r1, [r7, #3]
 8008360:	68f8      	ldr	r0, [r7, #12]
 8008362:	460b      	mov	r3, r1
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	4403      	add	r3, r0
 800836c:	3338      	adds	r3, #56	; 0x38
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	fbb2 f1f3 	udiv	r1, r2, r3
 8008374:	fb03 f301 	mul.w	r3, r3, r1
 8008378:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800837a:	2b00      	cmp	r3, #0
 800837c:	d110      	bne.n	80083a0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800837e:	78fa      	ldrb	r2, [r7, #3]
 8008380:	6879      	ldr	r1, [r7, #4]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	3318      	adds	r3, #24
 800838e:	2200      	movs	r2, #0
 8008390:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008392:	78f9      	ldrb	r1, [r7, #3]
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 fec9 	bl	800a130 <USBD_LL_Transmit>
 800839e:	e015      	b.n	80083cc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083c8:	78fa      	ldrb	r2, [r7, #3]
 80083ca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e015      	b.n	8008424 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f001 ff07 	bl	800a210 <USBD_LL_GetRxDataSize>
 8008402:	4602      	mov	r2, r0
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800841e:	4611      	mov	r1, r2
 8008420:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800843a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d015      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x46>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800844c:	2bff      	cmp	r3, #255	; 0xff
 800844e:	d010      	beq.n	8008472 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800845e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008466:	b292      	uxth	r2, r2
 8008468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	22ff      	movs	r2, #255	; 0xff
 800846e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2243      	movs	r2, #67	; 0x43
 8008488:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800848a:	4b03      	ldr	r3, [pc, #12]	; (8008498 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800848c:	4618      	mov	r0, r3
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	20000094 	.word	0x20000094

0800849c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2243      	movs	r2, #67	; 0x43
 80084a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80084aa:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	20000050 	.word	0x20000050

080084bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2243      	movs	r2, #67	; 0x43
 80084c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	200000d8 	.word	0x200000d8

080084dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	220a      	movs	r2, #10
 80084e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084ea:	4b03      	ldr	r3, [pc, #12]	; (80084f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	2000000c 	.word	0x2000000c

080084fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800850c:	2303      	movs	r3, #3
 800850e:	e004      	b.n	800851a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008526:	b480      	push	{r7}
 8008528:	b087      	sub	sp, #28
 800852a:	af00      	add	r7, sp, #0
 800852c:	60f8      	str	r0, [r7, #12]
 800852e:	60b9      	str	r1, [r7, #8]
 8008530:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008538:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008568:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800858e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800859a:	2303      	movs	r3, #3
 800859c:	e016      	b.n	80085cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	7c1b      	ldrb	r3, [r3, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d109      	bne.n	80085ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085b0:	2101      	movs	r1, #1
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fdf4 	bl	800a1a0 <USBD_LL_PrepareReceive>
 80085b8:	e007      	b.n	80085ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	2101      	movs	r1, #1
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fdeb 	bl	800a1a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	4613      	mov	r3, r2
 80085e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e01f      	b.n	800862c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	79fa      	ldrb	r2, [r7, #7]
 800861e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f001 fbad 	bl	8009d80 <USBD_LL_Init>
 8008626:	4603      	mov	r3, r0
 8008628:	75fb      	strb	r3, [r7, #23]

  return ret;
 800862a:	7dfb      	ldrb	r3, [r7, #23]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008648:	2303      	movs	r3, #3
 800864a:	e016      	b.n	800867a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	f107 020e 	add.w	r2, r7, #14
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	4602      	mov	r2, r0
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f001 fbda 	bl	8009e44 <USBD_LL_Start>
 8008690:	4603      	mov	r3, r0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	4611      	mov	r1, r2
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	4611      	mov	r1, r2
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
  }

  return USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 ff16 	bl	800955c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800873e:	461a      	mov	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800874c:	f003 031f 	and.w	r3, r3, #31
 8008750:	2b01      	cmp	r3, #1
 8008752:	d00e      	beq.n	8008772 <USBD_LL_SetupStage+0x5a>
 8008754:	2b01      	cmp	r3, #1
 8008756:	d302      	bcc.n	800875e <USBD_LL_SetupStage+0x46>
 8008758:	2b02      	cmp	r3, #2
 800875a:	d014      	beq.n	8008786 <USBD_LL_SetupStage+0x6e>
 800875c:	e01d      	b.n	800879a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f9d6 	bl	8008b18 <USBD_StdDevReq>
 800876c:	4603      	mov	r3, r0
 800876e:	73fb      	strb	r3, [r7, #15]
      break;
 8008770:	e020      	b.n	80087b4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fa3a 	bl	8008bf4 <USBD_StdItfReq>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e016      	b.n	80087b4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa76 	bl	8008c80 <USBD_StdEPReq>
 8008794:	4603      	mov	r3, r0
 8008796:	73fb      	strb	r3, [r7, #15]
      break;
 8008798:	e00c      	b.n	80087b4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fbf1 	bl	8009f90 <USBD_LL_StallEP>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
      break;
 80087b2:	bf00      	nop
  }

  return ret;
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	460b      	mov	r3, r1
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d137      	bne.n	8008842 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087e0:	2b03      	cmp	r3, #3
 80087e2:	d14a      	bne.n	800887a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	689a      	ldr	r2, [r3, #8]
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d913      	bls.n	8008818 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	68da      	ldr	r2, [r3, #12]
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	4293      	cmp	r3, r2
 8008808:	bf28      	it	cs
 800880a:	4613      	movcs	r3, r2
 800880c:	461a      	mov	r2, r3
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 ff97 	bl	8009744 <USBD_CtlContinueRx>
 8008816:	e030      	b.n	800887a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00a      	beq.n	800883a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800882a:	2b03      	cmp	r3, #3
 800882c:	d105      	bne.n	800883a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 ff93 	bl	8009766 <USBD_CtlSendStatus>
 8008840:	e01b      	b.n	800887a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d013      	beq.n	8008876 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008854:	2b03      	cmp	r3, #3
 8008856:	d10e      	bne.n	8008876 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	7afa      	ldrb	r2, [r7, #11]
 8008862:	4611      	mov	r1, r2
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	4798      	blx	r3
 8008868:	4603      	mov	r3, r0
 800886a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
 8008874:	e002      	b.n	800887c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008876:	2303      	movs	r3, #3
 8008878:	e000      	b.n	800887c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b086      	sub	sp, #24
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	460b      	mov	r3, r1
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008892:	7afb      	ldrb	r3, [r7, #11]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d16a      	bne.n	800896e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3314      	adds	r3, #20
 800889c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d155      	bne.n	8008954 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	689a      	ldr	r2, [r3, #8]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d914      	bls.n	80088de <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	1ad2      	subs	r2, r2, r3
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	461a      	mov	r2, r3
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 ff0c 	bl	80096e8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088d0:	2300      	movs	r3, #0
 80088d2:	2200      	movs	r2, #0
 80088d4:	2100      	movs	r1, #0
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f001 fc62 	bl	800a1a0 <USBD_LL_PrepareReceive>
 80088dc:	e03a      	b.n	8008954 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	68da      	ldr	r2, [r3, #12]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d11c      	bne.n	8008924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d316      	bcc.n	8008924 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	685a      	ldr	r2, [r3, #4]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008900:	429a      	cmp	r2, r3
 8008902:	d20f      	bcs.n	8008924 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008904:	2200      	movs	r2, #0
 8008906:	2100      	movs	r1, #0
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 feed 	bl	80096e8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f001 fc3f 	bl	800a1a0 <USBD_LL_PrepareReceive>
 8008922:	e017      	b.n	8008954 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008936:	2b03      	cmp	r3, #3
 8008938:	d105      	bne.n	8008946 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008946:	2180      	movs	r1, #128	; 0x80
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f001 fb21 	bl	8009f90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 ff1c 	bl	800978c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800895a:	2b01      	cmp	r3, #1
 800895c:	d123      	bne.n	80089a6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff fe9b 	bl	800869a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800896c:	e01b      	b.n	80089a6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d013      	beq.n	80089a2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008980:	2b03      	cmp	r3, #3
 8008982:	d10e      	bne.n	80089a2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	7afa      	ldrb	r2, [r7, #11]
 800898e:	4611      	mov	r1, r2
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	4798      	blx	r3
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800899e:	7dfb      	ldrb	r3, [r7, #23]
 80089a0:	e002      	b.n	80089a8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e000      	b.n	80089a8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3718      	adds	r7, #24
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b082      	sub	sp, #8
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d009      	beq.n	80089f4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6852      	ldr	r2, [r2, #4]
 80089ec:	b2d2      	uxtb	r2, r2
 80089ee:	4611      	mov	r1, r2
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089f4:	2340      	movs	r3, #64	; 0x40
 80089f6:	2200      	movs	r2, #0
 80089f8:	2100      	movs	r1, #0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f001 fa54 	bl	8009ea8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2240      	movs	r2, #64	; 0x40
 8008a0c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	2200      	movs	r2, #0
 8008a14:	2180      	movs	r1, #128	; 0x80
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fa46 	bl	8009ea8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2204      	movs	r2, #4
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d105      	bne.n	8008a9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d10b      	bne.n	8008ad2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b087      	sub	sp, #28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	3301      	adds	r3, #1
 8008af2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008afa:	8a3b      	ldrh	r3, [r7, #16]
 8008afc:	021b      	lsls	r3, r3, #8
 8008afe:	b21a      	sxth	r2, r3
 8008b00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	b21b      	sxth	r3, r3
 8008b08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b2e:	2b20      	cmp	r3, #32
 8008b30:	d004      	beq.n	8008b3c <USBD_StdDevReq+0x24>
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d002      	beq.n	8008b3c <USBD_StdDevReq+0x24>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <USBD_StdDevReq+0x38>
 8008b3a:	e050      	b.n	8008bde <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	4798      	blx	r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4e:	e04b      	b.n	8008be8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b09      	cmp	r3, #9
 8008b56:	d83c      	bhi.n	8008bd2 <USBD_StdDevReq+0xba>
 8008b58:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <USBD_StdDevReq+0x48>)
 8008b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bc9 	.word	0x08008bc9
 8008b68:	08008bd3 	.word	0x08008bd3
 8008b6c:	08008bbf 	.word	0x08008bbf
 8008b70:	08008bd3 	.word	0x08008bd3
 8008b74:	08008b93 	.word	0x08008b93
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008bd3 	.word	0x08008bd3
 8008b80:	08008bab 	.word	0x08008bab
 8008b84:	08008b9d 	.word	0x08008b9d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9d0 	bl	8008f30 <USBD_GetDescriptor>
      break;
 8008b90:	e024      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fb5f 	bl	8009258 <USBD_SetAddress>
      break;
 8008b9a:	e01f      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fb9c 	bl	80092dc <USBD_SetConfig>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba8:	e018      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fc39 	bl	8009424 <USBD_GetConfig>
      break;
 8008bb2:	e013      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fc68 	bl	800948c <USBD_GetStatus>
      break;
 8008bbc:	e00e      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fc96 	bl	80094f2 <USBD_SetFeature>
      break;
 8008bc6:	e009      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fca5 	bl	800951a <USBD_ClrFeature>
      break;
 8008bd0:	e004      	b.n	8008bdc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fcfb 	bl	80095d0 <USBD_CtlError>
      break;
 8008bda:	bf00      	nop
    }
    break;
 8008bdc:	e004      	b.n	8008be8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fcf5 	bl	80095d0 <USBD_CtlError>
    break;
 8008be6:	bf00      	nop
  }

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0a:	2b20      	cmp	r3, #32
 8008c0c:	d003      	beq.n	8008c16 <USBD_StdItfReq+0x22>
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d001      	beq.n	8008c16 <USBD_StdItfReq+0x22>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d12a      	bne.n	8008c6c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d81d      	bhi.n	8008c5e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	889b      	ldrh	r3, [r3, #4]
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d813      	bhi.n	8008c54 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d110      	bne.n	8008c68 <USBD_StdItfReq+0x74>
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10d      	bne.n	8008c68 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fd8a 	bl	8009766 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008c52:	e009      	b.n	8008c68 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fcba 	bl	80095d0 <USBD_CtlError>
      break;
 8008c5c:	e004      	b.n	8008c68 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fcb5 	bl	80095d0 <USBD_CtlError>
      break;
 8008c66:	e000      	b.n	8008c6a <USBD_StdItfReq+0x76>
      break;
 8008c68:	bf00      	nop
    }
    break;
 8008c6a:	e004      	b.n	8008c76 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fcae 	bl	80095d0 <USBD_CtlError>
    break;
 8008c74:	bf00      	nop
  }

  return ret;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	889b      	ldrh	r3, [r3, #4]
 8008c92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c9c:	2b20      	cmp	r3, #32
 8008c9e:	d004      	beq.n	8008caa <USBD_StdEPReq+0x2a>
 8008ca0:	2b40      	cmp	r3, #64	; 0x40
 8008ca2:	d002      	beq.n	8008caa <USBD_StdEPReq+0x2a>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00a      	beq.n	8008cbe <USBD_StdEPReq+0x3e>
 8008ca8:	e137      	b.n	8008f1a <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4798      	blx	r3
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	e132      	b.n	8008f24 <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	785b      	ldrb	r3, [r3, #1]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d03e      	beq.n	8008d44 <USBD_StdEPReq+0xc4>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d002      	beq.n	8008cd0 <USBD_StdEPReq+0x50>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d079      	beq.n	8008dc2 <USBD_StdEPReq+0x142>
 8008cce:	e11e      	b.n	8008f0e <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d002      	beq.n	8008ce0 <USBD_StdEPReq+0x60>
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d015      	beq.n	8008d0a <USBD_StdEPReq+0x8a>
 8008cde:	e02b      	b.n	8008d38 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00c      	beq.n	8008d00 <USBD_StdEPReq+0x80>
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	2b80      	cmp	r3, #128	; 0x80
 8008cea:	d009      	beq.n	8008d00 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cec:	7bbb      	ldrb	r3, [r7, #14]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 f94d 	bl	8009f90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cf6:	2180      	movs	r1, #128	; 0x80
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 f949 	bl	8009f90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008cfe:	e020      	b.n	8008d42 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fc64 	bl	80095d0 <USBD_CtlError>
        break;
 8008d08:	e01b      	b.n	8008d42 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10e      	bne.n	8008d30 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_StdEPReq+0xb0>
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
 8008d1a:	2b80      	cmp	r3, #128	; 0x80
 8008d1c:	d008      	beq.n	8008d30 <USBD_StdEPReq+0xb0>
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	88db      	ldrh	r3, [r3, #6]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d104      	bne.n	8008d30 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 f930 	bl	8009f90 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fd18 	bl	8009766 <USBD_CtlSendStatus>

        break;
 8008d36:	e004      	b.n	8008d42 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008d38:	6839      	ldr	r1, [r7, #0]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fc48 	bl	80095d0 <USBD_CtlError>
        break;
 8008d40:	bf00      	nop
      }
      break;
 8008d42:	e0e9      	b.n	8008f18 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d002      	beq.n	8008d54 <USBD_StdEPReq+0xd4>
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d015      	beq.n	8008d7e <USBD_StdEPReq+0xfe>
 8008d52:	e02f      	b.n	8008db4 <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <USBD_StdEPReq+0xf4>
 8008d5a:	7bbb      	ldrb	r3, [r7, #14]
 8008d5c:	2b80      	cmp	r3, #128	; 0x80
 8008d5e:	d009      	beq.n	8008d74 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f913 	bl	8009f90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d6a:	2180      	movs	r1, #128	; 0x80
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f001 f90f 	bl	8009f90 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008d72:	e025      	b.n	8008dc0 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 8008d74:	6839      	ldr	r1, [r7, #0]
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fc2a 	bl	80095d0 <USBD_CtlError>
        break;
 8008d7c:	e020      	b.n	8008dc0 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	885b      	ldrh	r3, [r3, #2]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d11b      	bne.n	8008dbe <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
 8008d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d004      	beq.n	8008d9a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d90:	7bbb      	ldrb	r3, [r7, #14]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 f931 	bl	8009ffc <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fce3 	bl	8009766 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
 8008dae:	4603      	mov	r3, r0
 8008db0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008db2:	e004      	b.n	8008dbe <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fc0a 	bl	80095d0 <USBD_CtlError>
        break;
 8008dbc:	e000      	b.n	8008dc0 <USBD_StdEPReq+0x140>
        break;
 8008dbe:	bf00      	nop
      }
      break;
 8008dc0:	e0aa      	b.n	8008f18 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d002      	beq.n	8008dd2 <USBD_StdEPReq+0x152>
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d032      	beq.n	8008e36 <USBD_StdEPReq+0x1b6>
 8008dd0:	e097      	b.n	8008f02 <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <USBD_StdEPReq+0x168>
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b80      	cmp	r3, #128	; 0x80
 8008ddc:	d004      	beq.n	8008de8 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fbf5 	bl	80095d0 <USBD_CtlError>
          break;
 8008de6:	e091      	b.n	8008f0c <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da0b      	bge.n	8008e08 <USBD_StdEPReq+0x188>
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	3310      	adds	r3, #16
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	e00b      	b.n	8008e20 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3304      	adds	r3, #4
 8008e20:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc3f 	bl	80096b2 <USBD_CtlSendData>
        break;
 8008e34:	e06a      	b.n	8008f0c <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da11      	bge.n	8008e62 <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	3324      	adds	r3, #36	; 0x24
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d117      	bne.n	8008e88 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fbb8 	bl	80095d0 <USBD_CtlError>
            break;
 8008e60:	e054      	b.n	8008f0c <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d104      	bne.n	8008e88 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fba5 	bl	80095d0 <USBD_CtlError>
            break;
 8008e86:	e041      	b.n	8008f0c <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da0b      	bge.n	8008ea8 <USBD_StdEPReq+0x228>
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	3310      	adds	r3, #16
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	e00b      	b.n	8008ec0 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <USBD_StdEPReq+0x24e>
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d103      	bne.n	8008ed6 <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e00e      	b.n	8008ef4 <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 f8c4 	bl	800a068 <USBD_LL_IsStallEP>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e002      	b.n	8008ef4 <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fbd9 	bl	80096b2 <USBD_CtlSendData>
          break;
 8008f00:	e004      	b.n	8008f0c <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fb63 	bl	80095d0 <USBD_CtlError>
        break;
 8008f0a:	bf00      	nop
      }
      break;
 8008f0c:	e004      	b.n	8008f18 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb5d 	bl	80095d0 <USBD_CtlError>
      break;
 8008f16:	bf00      	nop
    }
    break;
 8008f18:	e004      	b.n	8008f24 <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb57 	bl	80095d0 <USBD_CtlError>
    break;
 8008f22:	bf00      	nop
  }

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b0e      	cmp	r3, #14
 8008f52:	f200 8152 	bhi.w	80091fa <USBD_GetDescriptor+0x2ca>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_GetDescriptor+0x2c>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008fe5 	.word	0x08008fe5
 8008f64:	08009025 	.word	0x08009025
 8008f68:	080091fb 	.word	0x080091fb
 8008f6c:	080091fb 	.word	0x080091fb
 8008f70:	0800919b 	.word	0x0800919b
 8008f74:	080091c7 	.word	0x080091c7
 8008f78:	080091fb 	.word	0x080091fb
 8008f7c:	080091fb 	.word	0x080091fb
 8008f80:	080091fb 	.word	0x080091fb
 8008f84:	080091fb 	.word	0x080091fb
 8008f88:	080091fb 	.word	0x080091fb
 8008f8c:	080091fb 	.word	0x080091fb
 8008f90:	080091fb 	.word	0x080091fb
 8008f94:	08008f99 	.word	0x08008f99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008fba:	e126      	b.n	800920a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fb06 	bl	80095d0 <USBD_CtlError>
      err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
    break;
 8008fca:	e11e      	b.n	800920a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
    break;
 8008fe2:	e112      	b.n	800920a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7c1b      	ldrb	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10d      	bne.n	8009008 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f107 0208 	add.w	r2, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009006:	e100      	b.n	800920a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f107 0208 	add.w	r2, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	2202      	movs	r2, #2
 8009020:	701a      	strb	r2, [r3, #0]
    break;
 8009022:	e0f2      	b.n	800920a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	885b      	ldrh	r3, [r3, #2]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b05      	cmp	r3, #5
 800902c:	f200 80ac 	bhi.w	8009188 <USBD_GetDescriptor+0x258>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBD_GetDescriptor+0x108>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009051 	.word	0x08009051
 800903c:	08009085 	.word	0x08009085
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090ed 	.word	0x080090ed
 8009048:	08009121 	.word	0x08009121
 800904c:	08009155 	.word	0x08009155
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009072:	e091      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 faaa 	bl	80095d0 <USBD_CtlError>
        err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
      break;
 8009082:	e089      	b.n	8009198 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090a6:	e077      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa90 	bl	80095d0 <USBD_CtlError>
        err++;
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	3301      	adds	r3, #1
 80090b4:	72fb      	strb	r3, [r7, #11]
      break;
 80090b6:	e06f      	b.n	8009198 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090da:	e05d      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa76 	bl	80095d0 <USBD_CtlError>
        err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
      break;
 80090ea:	e055      	b.n	8009198 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800910e:	e043      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa5c 	bl	80095d0 <USBD_CtlError>
        err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
      break;
 800911e:	e03b      	b.n	8009198 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009142:	e029      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa42 	bl	80095d0 <USBD_CtlError>
        err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
      break;
 8009152:	e021      	b.n	8009198 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009176:	e00f      	b.n	8009198 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa28 	bl	80095d0 <USBD_CtlError>
        err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
      break;
 8009186:	e007      	b.n	8009198 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa20 	bl	80095d0 <USBD_CtlError>
      err++;
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	3301      	adds	r3, #1
 8009194:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009196:	bf00      	nop
    }
    break;
 8009198:	e037      	b.n	800920a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7c1b      	ldrb	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	4610      	mov	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80091b4:	e029      	b.n	800920a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa09 	bl	80095d0 <USBD_CtlError>
      err++;
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3301      	adds	r3, #1
 80091c2:	72fb      	strb	r3, [r7, #11]
    break;
 80091c4:	e021      	b.n	800920a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10d      	bne.n	80091ea <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	4610      	mov	r0, r2
 80091dc:	4798      	blx	r3
 80091de:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	2207      	movs	r2, #7
 80091e6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80091e8:	e00f      	b.n	800920a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f9ef 	bl	80095d0 <USBD_CtlError>
      err++;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	3301      	adds	r3, #1
 80091f6:	72fb      	strb	r3, [r7, #11]
    break;
 80091f8:	e007      	b.n	800920a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9e7 	bl	80095d0 <USBD_CtlError>
    err++;
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	3301      	adds	r3, #1
 8009206:	72fb      	strb	r3, [r7, #11]
    break;
 8009208:	bf00      	nop
  }

  if (err != 0U)
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11e      	bne.n	800924e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	88da      	ldrh	r2, [r3, #6]
 8009222:	893b      	ldrh	r3, [r7, #8]
 8009224:	4293      	cmp	r3, r2
 8009226:	bf28      	it	cs
 8009228:	4613      	movcs	r3, r2
 800922a:	b29b      	uxth	r3, r3
 800922c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800922e:	893b      	ldrh	r3, [r7, #8]
 8009230:	461a      	mov	r2, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa3c 	bl	80096b2 <USBD_CtlSendData>
 800923a:	e009      	b.n	8009250 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9c6 	bl	80095d0 <USBD_CtlError>
 8009244:	e004      	b.n	8009250 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa8d 	bl	8009766 <USBD_CtlSendStatus>
 800924c:	e000      	b.n	8009250 <USBD_GetDescriptor+0x320>
    return;
 800924e:	bf00      	nop
    }
  }
}
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	889b      	ldrh	r3, [r3, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d130      	bne.n	80092cc <USBD_SetAddress+0x74>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d12c      	bne.n	80092cc <USBD_SetAddress+0x74>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	885b      	ldrh	r3, [r3, #2]
 8009276:	2b7f      	cmp	r3, #127	; 0x7f
 8009278:	d828      	bhi.n	80092cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009284:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928c:	2b03      	cmp	r3, #3
 800928e:	d104      	bne.n	800929a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009290:	6839      	ldr	r1, [r7, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 f99c 	bl	80095d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009298:	e01c      	b.n	80092d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7bfa      	ldrb	r2, [r7, #15]
 800929e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
 80092a4:	4619      	mov	r1, r3
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 ff0c 	bl	800a0c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 fa5a 	bl	8009766 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d004      	beq.n	80092c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c0:	e008      	b.n	80092d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ca:	e003      	b.n	80092d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092cc:	6839      	ldr	r1, [r7, #0]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f97e 	bl	80095d0 <USBD_CtlError>
  }
}
 80092d4:	bf00      	nop
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	4b4b      	ldr	r3, [pc, #300]	; (8009420 <USBD_SetConfig+0x144>)
 80092f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092f4:	4b4a      	ldr	r3, [pc, #296]	; (8009420 <USBD_SetConfig+0x144>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d905      	bls.n	8009308 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f966 	bl	80095d0 <USBD_CtlError>
    return USBD_FAIL;
 8009304:	2303      	movs	r3, #3
 8009306:	e087      	b.n	8009418 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800930e:	2b02      	cmp	r3, #2
 8009310:	d002      	beq.n	8009318 <USBD_SetConfig+0x3c>
 8009312:	2b03      	cmp	r3, #3
 8009314:	d025      	beq.n	8009362 <USBD_SetConfig+0x86>
 8009316:	e071      	b.n	80093fc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <USBD_SetConfig+0x144>)
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d01c      	beq.n	800935a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009320:	4b3f      	ldr	r3, [pc, #252]	; (8009420 <USBD_SetConfig+0x144>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800932a:	4b3d      	ldr	r3, [pc, #244]	; (8009420 <USBD_SetConfig+0x144>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	4619      	mov	r1, r3
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff f9bd 	bl	80086b0 <USBD_SetClassConfig>
 8009336:	4603      	mov	r3, r0
 8009338:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009340:	6839      	ldr	r1, [r7, #0]
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f944 	bl	80095d0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009348:	e065      	b.n	8009416 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa0b 	bl	8009766 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2203      	movs	r2, #3
 8009354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009358:	e05d      	b.n	8009416 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 fa03 	bl	8009766 <USBD_CtlSendStatus>
    break;
 8009360:	e059      	b.n	8009416 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009362:	4b2f      	ldr	r3, [pc, #188]	; (8009420 <USBD_SetConfig+0x144>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d112      	bne.n	8009390 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009372:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <USBD_SetConfig+0x144>)
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800937c:	4b28      	ldr	r3, [pc, #160]	; (8009420 <USBD_SetConfig+0x144>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f9b0 	bl	80086e8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f9ec 	bl	8009766 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800938e:	e042      	b.n	8009416 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009390:	4b23      	ldr	r3, [pc, #140]	; (8009420 <USBD_SetConfig+0x144>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	429a      	cmp	r2, r3
 800939c:	d02a      	beq.n	80093f4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff f99e 	bl	80086e8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80093ac:	4b1c      	ldr	r3, [pc, #112]	; (8009420 <USBD_SetConfig+0x144>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80093b6:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <USBD_SetConfig+0x144>)
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff f977 	bl	80086b0 <USBD_SetClassConfig>
 80093c2:	4603      	mov	r3, r0
 80093c4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00f      	beq.n	80093ec <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8fe 	bl	80095d0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff f983 	bl	80086e8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2202      	movs	r2, #2
 80093e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80093ea:	e014      	b.n	8009416 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9ba 	bl	8009766 <USBD_CtlSendStatus>
    break;
 80093f2:	e010      	b.n	8009416 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f9b6 	bl	8009766 <USBD_CtlSendStatus>
    break;
 80093fa:	e00c      	b.n	8009416 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f8e6 	bl	80095d0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009404:	4b06      	ldr	r3, [pc, #24]	; (8009420 <USBD_SetConfig+0x144>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff f96c 	bl	80086e8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009410:	2303      	movs	r3, #3
 8009412:	73fb      	strb	r3, [r7, #15]
    break;
 8009414:	bf00      	nop
  }

  return ret;
 8009416:	7bfb      	ldrb	r3, [r7, #15]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200002d2 	.word	0x200002d2

08009424 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	88db      	ldrh	r3, [r3, #6]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d004      	beq.n	8009440 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f8c9 	bl	80095d0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800943e:	e021      	b.n	8009484 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009446:	2b01      	cmp	r3, #1
 8009448:	db17      	blt.n	800947a <USBD_GetConfig+0x56>
 800944a:	2b02      	cmp	r3, #2
 800944c:	dd02      	ble.n	8009454 <USBD_GetConfig+0x30>
 800944e:	2b03      	cmp	r3, #3
 8009450:	d00b      	beq.n	800946a <USBD_GetConfig+0x46>
 8009452:	e012      	b.n	800947a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3308      	adds	r3, #8
 800945e:	2201      	movs	r2, #1
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f925 	bl	80096b2 <USBD_CtlSendData>
      break;
 8009468:	e00c      	b.n	8009484 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3304      	adds	r3, #4
 800946e:	2201      	movs	r2, #1
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f91d 	bl	80096b2 <USBD_CtlSendData>
      break;
 8009478:	e004      	b.n	8009484 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f8a7 	bl	80095d0 <USBD_CtlError>
      break;
 8009482:	bf00      	nop
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800949c:	3b01      	subs	r3, #1
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d81e      	bhi.n	80094e0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	88db      	ldrh	r3, [r3, #6]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d004      	beq.n	80094b4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f88f 	bl	80095d0 <USBD_CtlError>
      break;
 80094b2:	e01a      	b.n	80094ea <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f043 0202 	orr.w	r2, r3, #2
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	330c      	adds	r3, #12
 80094d4:	2202      	movs	r2, #2
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f8ea 	bl	80096b2 <USBD_CtlSendData>
    break;
 80094de:	e004      	b.n	80094ea <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f874 	bl	80095d0 <USBD_CtlError>
    break;
 80094e8:	bf00      	nop
  }
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
 80094fa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	885b      	ldrh	r3, [r3, #2]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d106      	bne.n	8009512 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2201      	movs	r2, #1
 8009508:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f92a 	bl	8009766 <USBD_CtlSendStatus>
  }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b082      	sub	sp, #8
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
 8009522:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800952a:	3b01      	subs	r3, #1
 800952c:	2b02      	cmp	r3, #2
 800952e:	d80b      	bhi.n	8009548 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	885b      	ldrh	r3, [r3, #2]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d10c      	bne.n	8009552 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f910 	bl	8009766 <USBD_CtlSendStatus>
      }
      break;
 8009546:	e004      	b.n	8009552 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f840 	bl	80095d0 <USBD_CtlError>
      break;
 8009550:	e000      	b.n	8009554 <USBD_ClrFeature+0x3a>
      break;
 8009552:	bf00      	nop
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	781a      	ldrb	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3301      	adds	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	781a      	ldrb	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f7ff faa8 	bl	8008adc <SWAPBYTE>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3301      	adds	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fa9b 	bl	8008adc <SWAPBYTE>
 80095a6:	4603      	mov	r3, r0
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3301      	adds	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fa8e 	bl	8008adc <SWAPBYTE>
 80095c0:	4603      	mov	r3, r0
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	80da      	strh	r2, [r3, #6]
}
 80095c8:	bf00      	nop
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095da:	2180      	movs	r1, #128	; 0x80
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fcd7 	bl	8009f90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095e2:	2100      	movs	r1, #0
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fcd3 	bl	8009f90 <USBD_LL_StallEP>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b086      	sub	sp, #24
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80095fe:	2300      	movs	r3, #0
 8009600:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d036      	beq.n	8009676 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800960c:	6938      	ldr	r0, [r7, #16]
 800960e:	f000 f836 	bl	800967e <USBD_GetLen>
 8009612:	4603      	mov	r3, r0
 8009614:	3301      	adds	r3, #1
 8009616:	b29b      	uxth	r3, r3
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	b29a      	uxth	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	4413      	add	r3, r2
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	7812      	ldrb	r2, [r2, #0]
 800962a:	701a      	strb	r2, [r3, #0]
  idx++;
 800962c:	7dfb      	ldrb	r3, [r7, #23]
 800962e:	3301      	adds	r3, #1
 8009630:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	68ba      	ldr	r2, [r7, #8]
 8009636:	4413      	add	r3, r2
 8009638:	2203      	movs	r2, #3
 800963a:	701a      	strb	r2, [r3, #0]
  idx++;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	3301      	adds	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009642:	e013      	b.n	800966c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4413      	add	r3, r2
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	7812      	ldrb	r2, [r2, #0]
 800964e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3301      	adds	r3, #1
 8009654:	613b      	str	r3, [r7, #16]
    idx++;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	3301      	adds	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800965c:	7dfb      	ldrb	r3, [r7, #23]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	4413      	add	r3, r2
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]
    idx++;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	3301      	adds	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e7      	bne.n	8009644 <USBD_GetString+0x52>
 8009674:	e000      	b.n	8009678 <USBD_GetString+0x86>
    return;
 8009676:	bf00      	nop
  }
}
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800967e:	b480      	push	{r7}
 8009680:	b085      	sub	sp, #20
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800968e:	e005      	b.n	800969c <USBD_GetLen+0x1e>
  {
    len++;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	3301      	adds	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	3301      	adds	r3, #1
 800969a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f5      	bne.n	8009690 <USBD_GetLen+0x12>
  }

  return len;
 80096a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2202      	movs	r2, #2
 80096c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	687a      	ldr	r2, [r7, #4]
 80096ca:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	2100      	movs	r1, #0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fd29 	bl	800a130 <USBD_LL_Transmit>

  return USBD_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	2100      	movs	r1, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 fd18 	bl	800a130 <USBD_LL_Transmit>

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2203      	movs	r2, #3
 800971a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	2100      	movs	r1, #0
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f000 fd33 	bl	800a1a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3710      	adds	r7, #16
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	2100      	movs	r1, #0
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 fd22 	bl	800a1a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2204      	movs	r2, #4
 8009772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009776:	2300      	movs	r3, #0
 8009778:	2200      	movs	r2, #0
 800977a:	2100      	movs	r1, #0
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fcd7 	bl	800a130 <USBD_LL_Transmit>

  return USBD_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2205      	movs	r2, #5
 8009798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800979c:	2300      	movs	r3, #0
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fcfc 	bl	800a1a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80097b8:	2200      	movs	r2, #0
 80097ba:	4912      	ldr	r1, [pc, #72]	; (8009804 <MX_USB_DEVICE_Init+0x50>)
 80097bc:	4812      	ldr	r0, [pc, #72]	; (8009808 <MX_USB_DEVICE_Init+0x54>)
 80097be:	f7fe ff09 	bl	80085d4 <USBD_Init>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80097c8:	f7f6 fff0 	bl	80007ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80097cc:	490f      	ldr	r1, [pc, #60]	; (800980c <MX_USB_DEVICE_Init+0x58>)
 80097ce:	480e      	ldr	r0, [pc, #56]	; (8009808 <MX_USB_DEVICE_Init+0x54>)
 80097d0:	f7fe ff30 	bl	8008634 <USBD_RegisterClass>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80097da:	f7f6 ffe7 	bl	80007ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80097de:	490c      	ldr	r1, [pc, #48]	; (8009810 <MX_USB_DEVICE_Init+0x5c>)
 80097e0:	4809      	ldr	r0, [pc, #36]	; (8009808 <MX_USB_DEVICE_Init+0x54>)
 80097e2:	f7fe fe8b 	bl	80084fc <USBD_CDC_RegisterInterface>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80097ec:	f7f6 ffde 	bl	80007ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80097f0:	4805      	ldr	r0, [pc, #20]	; (8009808 <MX_USB_DEVICE_Init+0x54>)
 80097f2:	f7fe ff46 	bl	8008682 <USBD_Start>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80097fc:	f7f6 ffd6 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009800:	bf00      	nop
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20000130 	.word	0x20000130
 8009808:	2000037c 	.word	0x2000037c
 800980c:	20000018 	.word	0x20000018
 8009810:	2000011c 	.word	0x2000011c

08009814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009818:	2200      	movs	r2, #0
 800981a:	4905      	ldr	r1, [pc, #20]	; (8009830 <CDC_Init_FS+0x1c>)
 800981c:	4805      	ldr	r0, [pc, #20]	; (8009834 <CDC_Init_FS+0x20>)
 800981e:	f7fe fe82 	bl	8008526 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009822:	4905      	ldr	r1, [pc, #20]	; (8009838 <CDC_Init_FS+0x24>)
 8009824:	4803      	ldr	r0, [pc, #12]	; (8009834 <CDC_Init_FS+0x20>)
 8009826:	f7fe fe97 	bl	8008558 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800982a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800982c:	4618      	mov	r0, r3
 800982e:	bd80      	pop	{r7, pc}
 8009830:	20000a34 	.word	0x20000a34
 8009834:	2000037c 	.word	0x2000037c
 8009838:	2000064c 	.word	0x2000064c

0800983c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009842:	4618      	mov	r0, r3
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
 8009858:	4613      	mov	r3, r2
 800985a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	2b23      	cmp	r3, #35	; 0x23
 8009860:	d84a      	bhi.n	80098f8 <CDC_Control_FS+0xac>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <CDC_Control_FS+0x1c>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	080098f9 	.word	0x080098f9
 800986c:	080098f9 	.word	0x080098f9
 8009870:	080098f9 	.word	0x080098f9
 8009874:	080098f9 	.word	0x080098f9
 8009878:	080098f9 	.word	0x080098f9
 800987c:	080098f9 	.word	0x080098f9
 8009880:	080098f9 	.word	0x080098f9
 8009884:	080098f9 	.word	0x080098f9
 8009888:	080098f9 	.word	0x080098f9
 800988c:	080098f9 	.word	0x080098f9
 8009890:	080098f9 	.word	0x080098f9
 8009894:	080098f9 	.word	0x080098f9
 8009898:	080098f9 	.word	0x080098f9
 800989c:	080098f9 	.word	0x080098f9
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	080098f9 	.word	0x080098f9
 80098a8:	080098f9 	.word	0x080098f9
 80098ac:	080098f9 	.word	0x080098f9
 80098b0:	080098f9 	.word	0x080098f9
 80098b4:	080098f9 	.word	0x080098f9
 80098b8:	080098f9 	.word	0x080098f9
 80098bc:	080098f9 	.word	0x080098f9
 80098c0:	080098f9 	.word	0x080098f9
 80098c4:	080098f9 	.word	0x080098f9
 80098c8:	080098f9 	.word	0x080098f9
 80098cc:	080098f9 	.word	0x080098f9
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	080098f9 	.word	0x080098f9
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	080098f9 	.word	0x080098f9
 80098e0:	080098f9 	.word	0x080098f9
 80098e4:	080098f9 	.word	0x080098f9
 80098e8:	080098f9 	.word	0x080098f9
 80098ec:	080098f9 	.word	0x080098f9
 80098f0:	080098f9 	.word	0x080098f9
 80098f4:	080098f9 	.word	0x080098f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80098f8:	bf00      	nop
  }

  return (USBD_OK);
 80098fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	4805      	ldr	r0, [pc, #20]	; (800992c <CDC_Receive_FS+0x24>)
 8009916:	f7fe fe1f 	bl	8008558 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800991a:	4804      	ldr	r0, [pc, #16]	; (800992c <CDC_Receive_FS+0x24>)
 800991c:	f7fe fe30 	bl	8008580 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009920:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009922:	4618      	mov	r0, r3
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	2000037c 	.word	0x2000037c

08009930 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	4613      	mov	r3, r2
 800993c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009946:	4618      	mov	r0, r3
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	4603      	mov	r3, r0
 800995c:	6039      	str	r1, [r7, #0]
 800995e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	2212      	movs	r2, #18
 8009964:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009966:	4b03      	ldr	r3, [pc, #12]	; (8009974 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	20000150 	.word	0x20000150

08009978 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2204      	movs	r2, #4
 8009988:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800998a:	4b03      	ldr	r3, [pc, #12]	; (8009998 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr
 8009998:	20000170 	.word	0x20000170

0800999c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d105      	bne.n	80099ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	4907      	ldr	r1, [pc, #28]	; (80099d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099b2:	4808      	ldr	r0, [pc, #32]	; (80099d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099b4:	f7ff fe1d 	bl	80095f2 <USBD_GetString>
 80099b8:	e004      	b.n	80099c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	4904      	ldr	r1, [pc, #16]	; (80099d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80099be:	4805      	ldr	r0, [pc, #20]	; (80099d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80099c0:	f7ff fe17 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3708      	adds	r7, #8
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	20000e1c 	.word	0x20000e1c
 80099d4:	0800a74c 	.word	0x0800a74c

080099d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099e4:	683a      	ldr	r2, [r7, #0]
 80099e6:	4904      	ldr	r1, [pc, #16]	; (80099f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80099e8:	4804      	ldr	r0, [pc, #16]	; (80099fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80099ea:	f7ff fe02 	bl	80095f2 <USBD_GetString>
  return USBD_StrDesc;
 80099ee:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000e1c 	.word	0x20000e1c
 80099fc:	0800a764 	.word	0x0800a764

08009a00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	4603      	mov	r3, r0
 8009a08:	6039      	str	r1, [r7, #0]
 8009a0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	221a      	movs	r2, #26
 8009a10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009a12:	f000 f855 	bl	8009ac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009a16:	4b02      	ldr	r3, [pc, #8]	; (8009a20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}
 8009a20:	20000174 	.word	0x20000174

08009a24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	6039      	str	r1, [r7, #0]
 8009a2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a30:	79fb      	ldrb	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	4907      	ldr	r1, [pc, #28]	; (8009a58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a3a:	4808      	ldr	r0, [pc, #32]	; (8009a5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a3c:	f7ff fdd9 	bl	80095f2 <USBD_GetString>
 8009a40:	e004      	b.n	8009a4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	4904      	ldr	r1, [pc, #16]	; (8009a58 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009a46:	4805      	ldr	r0, [pc, #20]	; (8009a5c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009a48:	f7ff fdd3 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20000e1c 	.word	0x20000e1c
 8009a5c:	0800a778 	.word	0x0800a778

08009a60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	6039      	str	r1, [r7, #0]
 8009a6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d105      	bne.n	8009a7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	4907      	ldr	r1, [pc, #28]	; (8009a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a76:	4808      	ldr	r0, [pc, #32]	; (8009a98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a78:	f7ff fdbb 	bl	80095f2 <USBD_GetString>
 8009a7c:	e004      	b.n	8009a88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	4904      	ldr	r1, [pc, #16]	; (8009a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a82:	4805      	ldr	r0, [pc, #20]	; (8009a98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a84:	f7ff fdb5 	bl	80095f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a88:	4b02      	ldr	r3, [pc, #8]	; (8009a94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000e1c 	.word	0x20000e1c
 8009a98:	0800a784 	.word	0x0800a784

08009a9c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	220c      	movs	r2, #12
 8009aac:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009aae:	4b03      	ldr	r3, [pc, #12]	; (8009abc <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	20000164 	.word	0x20000164

08009ac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009ac6:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <Get_SerialNum+0x44>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009acc:	4b0e      	ldr	r3, [pc, #56]	; (8009b08 <Get_SerialNum+0x48>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	; (8009b0c <Get_SerialNum+0x4c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d009      	beq.n	8009afa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009ae6:	2208      	movs	r2, #8
 8009ae8:	4909      	ldr	r1, [pc, #36]	; (8009b10 <Get_SerialNum+0x50>)
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 f814 	bl	8009b18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009af0:	2204      	movs	r2, #4
 8009af2:	4908      	ldr	r1, [pc, #32]	; (8009b14 <Get_SerialNum+0x54>)
 8009af4:	68b8      	ldr	r0, [r7, #8]
 8009af6:	f000 f80f 	bl	8009b18 <IntToUnicode>
  }
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	1fff7590 	.word	0x1fff7590
 8009b08:	1fff7594 	.word	0x1fff7594
 8009b0c:	1fff7598 	.word	0x1fff7598
 8009b10:	20000176 	.word	0x20000176
 8009b14:	20000186 	.word	0x20000186

08009b18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	4613      	mov	r3, r2
 8009b24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75fb      	strb	r3, [r7, #23]
 8009b2e:	e027      	b.n	8009b80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	0f1b      	lsrs	r3, r3, #28
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d80b      	bhi.n	8009b50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	0f1b      	lsrs	r3, r3, #28
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	4619      	mov	r1, r3
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	440b      	add	r3, r1
 8009b48:	3230      	adds	r2, #48	; 0x30
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	e00a      	b.n	8009b66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	0f1b      	lsrs	r3, r3, #28
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	7dfb      	ldrb	r3, [r7, #23]
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	440b      	add	r3, r1
 8009b60:	3237      	adds	r2, #55	; 0x37
 8009b62:	b2d2      	uxtb	r2, r2
 8009b64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	011b      	lsls	r3, r3, #4
 8009b6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	005b      	lsls	r3, r3, #1
 8009b70:	3301      	adds	r3, #1
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	4413      	add	r3, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	75fb      	strb	r3, [r7, #23]
 8009b80:	7dfa      	ldrb	r2, [r7, #23]
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d3d3      	bcc.n	8009b30 <IntToUnicode+0x18>
  }
}
 8009b88:	bf00      	nop
 8009b8a:	371c      	adds	r7, #28
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9c:	f107 0314 	add.w	r3, r7, #20
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	609a      	str	r2, [r3, #8]
 8009ba8:	60da      	str	r2, [r3, #12]
 8009baa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1c      	ldr	r2, [pc, #112]	; (8009c24 <HAL_PCD_MspInit+0x90>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d131      	bne.n	8009c1a <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bb6:	4b1c      	ldr	r3, [pc, #112]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	4a1b      	ldr	r2, [pc, #108]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009bbc:	f043 0301 	orr.w	r3, r3, #1
 8009bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bc2:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	613b      	str	r3, [r7, #16]
 8009bcc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB_FS;
 8009be0:	230a      	movs	r3, #10
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009be4:	f107 0314 	add.w	r3, r7, #20
 8009be8:	4619      	mov	r1, r3
 8009bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bee:	f7f9 f829 	bl	8002c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009bf2:	4b0d      	ldr	r3, [pc, #52]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf6:	4a0c      	ldr	r2, [pc, #48]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8009bfe:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <HAL_PCD_MspInit+0x94>)
 8009c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	2043      	movs	r0, #67	; 0x43
 8009c10:	f7f8 ffe1 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8009c14:	2043      	movs	r0, #67	; 0x43
 8009c16:	f7f8 fffa 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	3728      	adds	r7, #40	; 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	40006800 	.word	0x40006800
 8009c28:	40021000 	.word	0x40021000

08009c2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009c40:	4619      	mov	r1, r3
 8009c42:	4610      	mov	r0, r2
 8009c44:	f7fe fd68 	bl	8008718 <USBD_LL_SetupStage>
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	440b      	add	r3, r1
 8009c70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	78fb      	ldrb	r3, [r7, #3]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f7fe fda0 	bl	80087be <USBD_LL_DataOutStage>
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009c98:	78fa      	ldrb	r2, [r7, #3]
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	00db      	lsls	r3, r3, #3
 8009ca4:	440b      	add	r3, r1
 8009ca6:	333c      	adds	r3, #60	; 0x3c
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	78fb      	ldrb	r3, [r7, #3]
 8009cac:	4619      	mov	r1, r3
 8009cae:	f7fe fde9 	bl	8008884 <USBD_LL_DataInStage>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}

08009cba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cba:	b580      	push	{r7, lr}
 8009cbc:	b082      	sub	sp, #8
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fe feed 	bl	8008aa8 <USBD_LL_SOF>
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b084      	sub	sp, #16
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d001      	beq.n	8009cee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009cea:	f7f6 fd5f 	bl	80007ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009cf4:	7bfa      	ldrb	r2, [r7, #15]
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7fe fe9a 	bl	8008a32 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7fe fe53 	bl	80089b0 <USBD_LL_Reset>
}
 8009d0a:	bf00      	nop
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
	...

08009d14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7fe fe95 	bl	8008a52 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	699b      	ldr	r3, [r3, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d30:	4b04      	ldr	r3, [pc, #16]	; (8009d44 <HAL_PCD_SuspendCallback+0x30>)
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	4a03      	ldr	r2, [pc, #12]	; (8009d44 <HAL_PCD_SuspendCallback+0x30>)
 8009d36:	f043 0306 	orr.w	r3, r3, #6
 8009d3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009d3c:	bf00      	nop
 8009d3e:	3708      	adds	r7, #8
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	e000ed00 	.word	0xe000ed00

08009d48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009d58:	4b08      	ldr	r3, [pc, #32]	; (8009d7c <HAL_PCD_ResumeCallback+0x34>)
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	4a07      	ldr	r2, [pc, #28]	; (8009d7c <HAL_PCD_ResumeCallback+0x34>)
 8009d5e:	f023 0306 	bic.w	r3, r3, #6
 8009d62:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009d64:	f000 fa9e 	bl	800a2a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fe84 	bl	8008a7c <USBD_LL_Resume>
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	e000ed00 	.word	0xe000ed00

08009d80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8009d88:	f7fa fe1e 	bl	80049c8 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009d8c:	4a2b      	ldr	r2, [pc, #172]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a29      	ldr	r2, [pc, #164]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009d98:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009d9c:	4b27      	ldr	r3, [pc, #156]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009d9e:	4a28      	ldr	r2, [pc, #160]	; (8009e40 <USBD_LL_Init+0xc0>)
 8009da0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009da2:	4b26      	ldr	r3, [pc, #152]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009da4:	2208      	movs	r2, #8
 8009da6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009da8:	4b24      	ldr	r3, [pc, #144]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009daa:	2202      	movs	r2, #2
 8009dac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009dae:	4b23      	ldr	r3, [pc, #140]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009db0:	2202      	movs	r2, #2
 8009db2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009db4:	4b21      	ldr	r3, [pc, #132]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009db6:	2200      	movs	r2, #0
 8009db8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009dba:	4b20      	ldr	r3, [pc, #128]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009dcc:	481b      	ldr	r0, [pc, #108]	; (8009e3c <USBD_LL_Init+0xbc>)
 8009dce:	f7f9 fa01 	bl	80031d4 <HAL_PCD_Init>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8009dd8:	f7f6 fce8 	bl	80007ac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009de2:	2318      	movs	r3, #24
 8009de4:	2200      	movs	r2, #0
 8009de6:	2100      	movs	r1, #0
 8009de8:	f7fa fd1c 	bl	8004824 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009df2:	2358      	movs	r3, #88	; 0x58
 8009df4:	2200      	movs	r2, #0
 8009df6:	2180      	movs	r1, #128	; 0x80
 8009df8:	f7fa fd14 	bl	8004824 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e02:	23c0      	movs	r3, #192	; 0xc0
 8009e04:	2200      	movs	r2, #0
 8009e06:	2181      	movs	r1, #129	; 0x81
 8009e08:	f7fa fd0c 	bl	8004824 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e12:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009e16:	2200      	movs	r2, #0
 8009e18:	2101      	movs	r1, #1
 8009e1a:	f7fa fd03 	bl	8004824 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e28:	2200      	movs	r2, #0
 8009e2a:	2182      	movs	r1, #130	; 0x82
 8009e2c:	f7fa fcfa 	bl	8004824 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	2000101c 	.word	0x2000101c
 8009e40:	40006800 	.word	0x40006800

08009e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7f9 facc 	bl	80033f8 <HAL_PCD_Start>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b03      	cmp	r3, #3
 8009e68:	d816      	bhi.n	8009e98 <USBD_LL_Start+0x54>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <USBD_LL_Start+0x2c>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e81 	.word	0x08009e81
 8009e74:	08009e87 	.word	0x08009e87
 8009e78:	08009e8d 	.word	0x08009e8d
 8009e7c:	08009e93 	.word	0x08009e93
    case HAL_OK :
      usb_status = USBD_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73fb      	strb	r3, [r7, #15]
    break;
 8009e84:	e00b      	b.n	8009e9e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e86:	2303      	movs	r3, #3
 8009e88:	73fb      	strb	r3, [r7, #15]
    break;
 8009e8a:	e008      	b.n	8009e9e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e90:	e005      	b.n	8009e9e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e92:	2303      	movs	r3, #3
 8009e94:	73fb      	strb	r3, [r7, #15]
    break;
 8009e96:	e002      	b.n	8009e9e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9c:	bf00      	nop
  }
  return usb_status;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	70fb      	strb	r3, [r7, #3]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	70bb      	strb	r3, [r7, #2]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ed0:	78bb      	ldrb	r3, [r7, #2]
 8009ed2:	883a      	ldrh	r2, [r7, #0]
 8009ed4:	78f9      	ldrb	r1, [r7, #3]
 8009ed6:	f7f9 fc24 	bl	8003722 <HAL_PCD_EP_Open>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d817      	bhi.n	8009f14 <USBD_LL_OpenEP+0x6c>
 8009ee4:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <USBD_LL_OpenEP+0x44>)
 8009ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eea:	bf00      	nop
 8009eec:	08009efd 	.word	0x08009efd
 8009ef0:	08009f03 	.word	0x08009f03
 8009ef4:	08009f09 	.word	0x08009f09
 8009ef8:	08009f0f 	.word	0x08009f0f
    case HAL_OK :
      usb_status = USBD_OK;
 8009efc:	2300      	movs	r3, #0
 8009efe:	73fb      	strb	r3, [r7, #15]
    break;
 8009f00:	e00b      	b.n	8009f1a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f02:	2303      	movs	r3, #3
 8009f04:	73fb      	strb	r3, [r7, #15]
    break;
 8009f06:	e008      	b.n	8009f1a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f0c:	e005      	b.n	8009f1a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f0e:	2303      	movs	r3, #3
 8009f10:	73fb      	strb	r3, [r7, #15]
    break;
 8009f12:	e002      	b.n	8009f1a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8009f14:	2303      	movs	r3, #3
 8009f16:	73fb      	strb	r3, [r7, #15]
    break;
 8009f18:	bf00      	nop
  }
  return usb_status;
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3710      	adds	r7, #16
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f3e:	78fa      	ldrb	r2, [r7, #3]
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7f9 fc53 	bl	80037ee <HAL_PCD_EP_Close>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d816      	bhi.n	8009f80 <USBD_LL_CloseEP+0x5c>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <USBD_LL_CloseEP+0x34>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009f69 	.word	0x08009f69
 8009f5c:	08009f6f 	.word	0x08009f6f
 8009f60:	08009f75 	.word	0x08009f75
 8009f64:	08009f7b 	.word	0x08009f7b
    case HAL_OK :
      usb_status = USBD_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f6c:	e00b      	b.n	8009f86 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	73fb      	strb	r3, [r7, #15]
    break;
 8009f72:	e008      	b.n	8009f86 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f74:	2301      	movs	r3, #1
 8009f76:	73fb      	strb	r3, [r7, #15]
    break;
 8009f78:	e005      	b.n	8009f86 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f7e:	e002      	b.n	8009f86 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]
    break;
 8009f84:	bf00      	nop
  }
  return usb_status;
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009faa:	78fa      	ldrb	r2, [r7, #3]
 8009fac:	4611      	mov	r1, r2
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7f9 fcfd 	bl	80039ae <HAL_PCD_EP_SetStall>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b03      	cmp	r3, #3
 8009fbc:	d816      	bhi.n	8009fec <USBD_LL_StallEP+0x5c>
 8009fbe:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <USBD_LL_StallEP+0x34>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009fd5 	.word	0x08009fd5
 8009fc8:	08009fdb 	.word	0x08009fdb
 8009fcc:	08009fe1 	.word	0x08009fe1
 8009fd0:	08009fe7 	.word	0x08009fe7
    case HAL_OK :
      usb_status = USBD_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd8:	e00b      	b.n	8009ff2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8009fde:	e008      	b.n	8009ff2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe4:	e005      	b.n	8009ff2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fe6:	2303      	movs	r3, #3
 8009fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fea:	e002      	b.n	8009ff2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8009fec:	2303      	movs	r3, #3
 8009fee:	73fb      	strb	r3, [r7, #15]
    break;
 8009ff0:	bf00      	nop
  }
  return usb_status;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7f9 fd27 	bl	8003a6e <HAL_PCD_EP_ClrStall>
 800a020:	4603      	mov	r3, r0
 800a022:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a024:	7bbb      	ldrb	r3, [r7, #14]
 800a026:	2b03      	cmp	r3, #3
 800a028:	d816      	bhi.n	800a058 <USBD_LL_ClearStallEP+0x5c>
 800a02a:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBD_LL_ClearStallEP+0x34>)
 800a02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a047 	.word	0x0800a047
 800a038:	0800a04d 	.word	0x0800a04d
 800a03c:	0800a053 	.word	0x0800a053
    case HAL_OK :
      usb_status = USBD_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
    break;
 800a044:	e00b      	b.n	800a05e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a046:	2303      	movs	r3, #3
 800a048:	73fb      	strb	r3, [r7, #15]
    break;
 800a04a:	e008      	b.n	800a05e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
    break;
 800a050:	e005      	b.n	800a05e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	73fb      	strb	r3, [r7, #15]
    break;
 800a056:	e002      	b.n	800a05e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a058:	2303      	movs	r3, #3
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	bf00      	nop
  }
  return usb_status;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a07a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a07c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a080:	2b00      	cmp	r3, #0
 800a082:	da0c      	bge.n	800a09e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	4613      	mov	r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4413      	add	r3, r2
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	440b      	add	r3, r1
 800a098:	3302      	adds	r3, #2
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	e00b      	b.n	800a0b6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0a4:	68f9      	ldr	r1, [r7, #12]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	440b      	add	r3, r1
 800a0b0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a0b4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3714      	adds	r7, #20
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr
	...

0800a0c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f9 faf8 	bl	80036d8 <HAL_PCD_SetAddress>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d816      	bhi.n	800a120 <USBD_LL_SetUSBAddress+0x5c>
 800a0f2:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_LL_SetUSBAddress+0x34>)
 800a0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a10f 	.word	0x0800a10f
 800a100:	0800a115 	.word	0x0800a115
 800a104:	0800a11b 	.word	0x0800a11b
    case HAL_OK :
      usb_status = USBD_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
    break;
 800a10c:	e00b      	b.n	800a126 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a10e:	2303      	movs	r3, #3
 800a110:	73fb      	strb	r3, [r7, #15]
    break;
 800a112:	e008      	b.n	800a126 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a114:	2301      	movs	r3, #1
 800a116:	73fb      	strb	r3, [r7, #15]
    break;
 800a118:	e005      	b.n	800a126 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a11a:	2303      	movs	r3, #3
 800a11c:	73fb      	strb	r3, [r7, #15]
    break;
 800a11e:	e002      	b.n	800a126 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a120:	2303      	movs	r3, #3
 800a122:	73fb      	strb	r3, [r7, #15]
    break;
 800a124:	bf00      	nop
  }
  return usb_status;
 800a126:	7bfb      	ldrb	r3, [r7, #15]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	607a      	str	r2, [r7, #4]
 800a13a:	603b      	str	r3, [r7, #0]
 800a13c:	460b      	mov	r3, r1
 800a13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a14e:	7af9      	ldrb	r1, [r7, #11]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	f7f9 fbe8 	bl	8003928 <HAL_PCD_EP_Transmit>
 800a158:	4603      	mov	r3, r0
 800a15a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a15c:	7dbb      	ldrb	r3, [r7, #22]
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d816      	bhi.n	800a190 <USBD_LL_Transmit+0x60>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBD_LL_Transmit+0x38>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a17f 	.word	0x0800a17f
 800a170:	0800a185 	.word	0x0800a185
 800a174:	0800a18b 	.word	0x0800a18b
    case HAL_OK :
      usb_status = USBD_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	75fb      	strb	r3, [r7, #23]
    break;
 800a17c:	e00b      	b.n	800a196 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a17e:	2303      	movs	r3, #3
 800a180:	75fb      	strb	r3, [r7, #23]
    break;
 800a182:	e008      	b.n	800a196 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a184:	2301      	movs	r3, #1
 800a186:	75fb      	strb	r3, [r7, #23]
    break;
 800a188:	e005      	b.n	800a196 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a18a:	2303      	movs	r3, #3
 800a18c:	75fb      	strb	r3, [r7, #23]
    break;
 800a18e:	e002      	b.n	800a196 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	75fb      	strb	r3, [r7, #23]
    break;
 800a194:	bf00      	nop
  }
  return usb_status;
 800a196:	7dfb      	ldrb	r3, [r7, #23]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3718      	adds	r7, #24
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}

0800a1a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	607a      	str	r2, [r7, #4]
 800a1aa:	603b      	str	r3, [r7, #0]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1be:	7af9      	ldrb	r1, [r7, #11]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	f7f9 fb5b 	bl	800387e <HAL_PCD_EP_Receive>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800a1cc:	7dbb      	ldrb	r3, [r7, #22]
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d816      	bhi.n	800a200 <USBD_LL_PrepareReceive+0x60>
 800a1d2:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <USBD_LL_PrepareReceive+0x38>)
 800a1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d8:	0800a1e9 	.word	0x0800a1e9
 800a1dc:	0800a1ef 	.word	0x0800a1ef
 800a1e0:	0800a1f5 	.word	0x0800a1f5
 800a1e4:	0800a1fb 	.word	0x0800a1fb
    case HAL_OK :
      usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	75fb      	strb	r3, [r7, #23]
    break;
 800a1ec:	e00b      	b.n	800a206 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	75fb      	strb	r3, [r7, #23]
    break;
 800a1f2:	e008      	b.n	800a206 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	75fb      	strb	r3, [r7, #23]
    break;
 800a1f8:	e005      	b.n	800a206 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	75fb      	strb	r3, [r7, #23]
    break;
 800a1fe:	e002      	b.n	800a206 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800a200:	2303      	movs	r3, #3
 800a202:	75fb      	strb	r3, [r7, #23]
    break;
 800a204:	bf00      	nop
  }
  return usb_status;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7f9 fb66 	bl	80038f8 <HAL_PCD_EP_GetRxCount>
 800a22c:	4603      	mov	r3, r0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d002      	beq.n	800a250 <HAL_PCDEx_LPM_Callback+0x18>
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d013      	beq.n	800a276 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a24e:	e023      	b.n	800a298 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	699b      	ldr	r3, [r3, #24]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d007      	beq.n	800a268 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a258:	f000 f824 	bl	800a2a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a262:	f023 0306 	bic.w	r3, r3, #6
 800a266:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a26e:	4618      	mov	r0, r3
 800a270:	f7fe fc04 	bl	8008a7c <USBD_LL_Resume>
    break;
 800a274:	e010      	b.n	800a298 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7fe fbe8 	bl	8008a52 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	699b      	ldr	r3, [r3, #24]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d005      	beq.n	800a296 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a28a:	4b05      	ldr	r3, [pc, #20]	; (800a2a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	4a04      	ldr	r2, [pc, #16]	; (800a2a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a290:	f043 0306 	orr.w	r3, r3, #6
 800a294:	6113      	str	r3, [r2, #16]
    break;
 800a296:	bf00      	nop
}
 800a298:	bf00      	nop
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	e000ed00 	.word	0xe000ed00

0800a2a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
 // SystemClock_Config();
}
 800a2a8:	bf00      	nop
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <_Znwj>:
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	bf14      	ite	ne
 800a2b8:	4604      	movne	r4, r0
 800a2ba:	2401      	moveq	r4, #1
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 f905 	bl	800a4cc <malloc>
 800a2c2:	b930      	cbnz	r0, 800a2d2 <_Znwj+0x20>
 800a2c4:	f000 f806 	bl	800a2d4 <_ZSt15get_new_handlerv>
 800a2c8:	b908      	cbnz	r0, 800a2ce <_Znwj+0x1c>
 800a2ca:	f000 f8cd 	bl	800a468 <abort>
 800a2ce:	4780      	blx	r0
 800a2d0:	e7f4      	b.n	800a2bc <_Znwj+0xa>
 800a2d2:	bd10      	pop	{r4, pc}

0800a2d4 <_ZSt15get_new_handlerv>:
 800a2d4:	4b02      	ldr	r3, [pc, #8]	; (800a2e0 <_ZSt15get_new_handlerv+0xc>)
 800a2d6:	6818      	ldr	r0, [r3, #0]
 800a2d8:	f3bf 8f5b 	dmb	ish
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	200002d4 	.word	0x200002d4

0800a2e4 <_ZNSaIcEC1Ev>:
 800a2e4:	4770      	bx	lr

0800a2e6 <_ZNSaIcED1Ev>:
 800a2e6:	4770      	bx	lr

0800a2e8 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800a2e8:	b10a      	cbz	r2, 800a2ee <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800a2ea:	f000 b8ff 	b.w	800a4ec <memcpy>
 800a2ee:	4770      	bx	lr

0800a2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a2f0:	b508      	push	{r3, lr}
 800a2f2:	680b      	ldr	r3, [r1, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da02      	bge.n	800a2fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800a2f8:	4809      	ldr	r0, [pc, #36]	; (800a320 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800a2fa:	f000 f8b2 	bl	800a462 <_ZSt20__throw_length_errorPKc>
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d908      	bls.n	800a314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800a302:	0052      	lsls	r2, r2, #1
 800a304:	4293      	cmp	r3, r2
 800a306:	d205      	bcs.n	800a314 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800a308:	2a00      	cmp	r2, #0
 800a30a:	bfb6      	itet	lt
 800a30c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800a310:	600a      	strge	r2, [r1, #0]
 800a312:	600b      	strlt	r3, [r1, #0]
 800a314:	6808      	ldr	r0, [r1, #0]
 800a316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a31a:	3001      	adds	r0, #1
 800a31c:	f7ff bfc9 	b.w	800a2b2 <_Znwj>
 800a320:	0800a7fe 	.word	0x0800a7fe

0800a324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a324:	4603      	mov	r3, r0
 800a326:	f853 0b08 	ldr.w	r0, [r3], #8
 800a32a:	4298      	cmp	r0, r3
 800a32c:	d001      	beq.n	800a332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a32e:	f000 b893 	b.w	800a458 <_ZdlPv>
 800a332:	4770      	bx	lr

0800a334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a334:	2a01      	cmp	r2, #1
 800a336:	b510      	push	{r4, lr}
 800a338:	d102      	bne.n	800a340 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800a33a:	780a      	ldrb	r2, [r1, #0]
 800a33c:	7002      	strb	r2, [r0, #0]
 800a33e:	bd10      	pop	{r4, pc}
 800a340:	f7ff ffd2 	bl	800a2e8 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800a344:	e7fb      	b.n	800a33e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800a346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800a346:	b508      	push	{r3, lr}
 800a348:	1a52      	subs	r2, r2, r1
 800a34a:	f7ff fff3 	bl	800a334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a34e:	bd08      	pop	{r3, pc}

0800a350 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a350:	b508      	push	{r3, lr}
 800a352:	1a52      	subs	r2, r2, r1
 800a354:	f7ff ffee 	bl	800a334 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a358:	bd08      	pop	{r3, pc}

0800a35a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a35a:	f100 0208 	add.w	r2, r0, #8
 800a35e:	6002      	str	r2, [r0, #0]
 800a360:	2200      	movs	r2, #0
 800a362:	6042      	str	r2, [r0, #4]
 800a364:	7202      	strb	r2, [r0, #8]
 800a366:	4770      	bx	lr

0800a368 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	f7ff ffda 	bl	800a324 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a370:	4620      	mov	r0, r4
 800a372:	bd10      	pop	{r4, pc}

0800a374 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800a374:	6840      	ldr	r0, [r0, #4]
 800a376:	4770      	bx	lr

0800a378 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800a378:	6800      	ldr	r0, [r0, #0]
 800a37a:	4408      	add	r0, r1
 800a37c:	4770      	bx	lr
	...

0800a380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800a380:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a382:	4604      	mov	r4, r0
 800a384:	4616      	mov	r6, r2
 800a386:	460d      	mov	r5, r1
 800a388:	b919      	cbnz	r1, 800a392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a38a:	b112      	cbz	r2, 800a392 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a38c:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800a38e:	f000 f865 	bl	800a45c <_ZSt19__throw_logic_errorPKc>
 800a392:	1b73      	subs	r3, r6, r5
 800a394:	2b0f      	cmp	r3, #15
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	d907      	bls.n	800a3aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800a39a:	2200      	movs	r2, #0
 800a39c:	a901      	add	r1, sp, #4
 800a39e:	4620      	mov	r0, r4
 800a3a0:	f7ff ffa6 	bl	800a2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	6020      	str	r0, [r4, #0]
 800a3a8:	60a3      	str	r3, [r4, #8]
 800a3aa:	4632      	mov	r2, r6
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	6820      	ldr	r0, [r4, #0]
 800a3b0:	f7ff ffc9 	bl	800a346 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800a3b4:	9b01      	ldr	r3, [sp, #4]
 800a3b6:	6822      	ldr	r2, [r4, #0]
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	54d1      	strb	r1, [r2, r3]
 800a3be:	b002      	add	sp, #8
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a7d4 	.word	0x0800a7d4

0800a3c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	f100 0208 	add.w	r2, r0, #8
 800a3ce:	6002      	str	r2, [r0, #0]
 800a3d0:	e9d1 1200 	ldrd	r1, r2, [r1]
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	440a      	add	r2, r1
 800a3dc:	f7ff ffd0 	bl	800a380 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800a3e0:	4620      	mov	r0, r4
 800a3e2:	bd10      	pop	{r4, pc}

0800a3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4616      	mov	r6, r2
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	b919      	cbnz	r1, 800a3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a3ee:	b112      	cbz	r2, 800a3f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a3f0:	480d      	ldr	r0, [pc, #52]	; (800a428 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a3f2:	f000 f833 	bl	800a45c <_ZSt19__throw_logic_errorPKc>
 800a3f6:	1b73      	subs	r3, r6, r5
 800a3f8:	2b0f      	cmp	r3, #15
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	d907      	bls.n	800a40e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a3fe:	2200      	movs	r2, #0
 800a400:	a901      	add	r1, sp, #4
 800a402:	4620      	mov	r0, r4
 800a404:	f7ff ff74 	bl	800a2f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a408:	9b01      	ldr	r3, [sp, #4]
 800a40a:	6020      	str	r0, [r4, #0]
 800a40c:	60a3      	str	r3, [r4, #8]
 800a40e:	4632      	mov	r2, r6
 800a410:	4629      	mov	r1, r5
 800a412:	6820      	ldr	r0, [r4, #0]
 800a414:	f7ff ff9c 	bl	800a350 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a418:	9b01      	ldr	r3, [sp, #4]
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	6063      	str	r3, [r4, #4]
 800a41e:	2100      	movs	r1, #0
 800a420:	54d1      	strb	r1, [r2, r3]
 800a422:	b002      	add	sp, #8
 800a424:	bd70      	pop	{r4, r5, r6, pc}
 800a426:	bf00      	nop
 800a428:	0800a7d4 	.word	0x0800a7d4

0800a42c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	f100 0308 	add.w	r3, r0, #8
 800a432:	4604      	mov	r4, r0
 800a434:	6003      	str	r3, [r0, #0]
 800a436:	460d      	mov	r5, r1
 800a438:	b159      	cbz	r1, 800a452 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800a43a:	4608      	mov	r0, r1
 800a43c:	f7f5 fec6 	bl	80001cc <strlen>
 800a440:	182a      	adds	r2, r5, r0
 800a442:	4620      	mov	r0, r4
 800a444:	f04f 0300 	mov.w	r3, #0
 800a448:	4629      	mov	r1, r5
 800a44a:	f7ff ffcb 	bl	800a3e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a44e:	4620      	mov	r0, r4
 800a450:	bd38      	pop	{r3, r4, r5, pc}
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	e7f4      	b.n	800a442 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800a458 <_ZdlPv>:
 800a458:	f000 b840 	b.w	800a4dc <free>

0800a45c <_ZSt19__throw_logic_errorPKc>:
 800a45c:	b508      	push	{r3, lr}
 800a45e:	f000 f803 	bl	800a468 <abort>

0800a462 <_ZSt20__throw_length_errorPKc>:
 800a462:	b508      	push	{r3, lr}
 800a464:	f000 f800 	bl	800a468 <abort>

0800a468 <abort>:
 800a468:	b508      	push	{r3, lr}
 800a46a:	2006      	movs	r0, #6
 800a46c:	f000 f932 	bl	800a6d4 <raise>
 800a470:	2001      	movs	r0, #1
 800a472:	f7f6 fa35 	bl	80008e0 <_exit>
	...

0800a478 <__errno>:
 800a478:	4b01      	ldr	r3, [pc, #4]	; (800a480 <__errno+0x8>)
 800a47a:	6818      	ldr	r0, [r3, #0]
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop
 800a480:	20000190 	.word	0x20000190

0800a484 <__libc_init_array>:
 800a484:	b570      	push	{r4, r5, r6, lr}
 800a486:	4e0d      	ldr	r6, [pc, #52]	; (800a4bc <__libc_init_array+0x38>)
 800a488:	4c0d      	ldr	r4, [pc, #52]	; (800a4c0 <__libc_init_array+0x3c>)
 800a48a:	1ba4      	subs	r4, r4, r6
 800a48c:	10a4      	asrs	r4, r4, #2
 800a48e:	2500      	movs	r5, #0
 800a490:	42a5      	cmp	r5, r4
 800a492:	d109      	bne.n	800a4a8 <__libc_init_array+0x24>
 800a494:	4e0b      	ldr	r6, [pc, #44]	; (800a4c4 <__libc_init_array+0x40>)
 800a496:	4c0c      	ldr	r4, [pc, #48]	; (800a4c8 <__libc_init_array+0x44>)
 800a498:	f000 f93a 	bl	800a710 <_init>
 800a49c:	1ba4      	subs	r4, r4, r6
 800a49e:	10a4      	asrs	r4, r4, #2
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	42a5      	cmp	r5, r4
 800a4a4:	d105      	bne.n	800a4b2 <__libc_init_array+0x2e>
 800a4a6:	bd70      	pop	{r4, r5, r6, pc}
 800a4a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4ac:	4798      	blx	r3
 800a4ae:	3501      	adds	r5, #1
 800a4b0:	e7ee      	b.n	800a490 <__libc_init_array+0xc>
 800a4b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a4b6:	4798      	blx	r3
 800a4b8:	3501      	adds	r5, #1
 800a4ba:	e7f2      	b.n	800a4a2 <__libc_init_array+0x1e>
 800a4bc:	0800a818 	.word	0x0800a818
 800a4c0:	0800a818 	.word	0x0800a818
 800a4c4:	0800a818 	.word	0x0800a818
 800a4c8:	0800a820 	.word	0x0800a820

0800a4cc <malloc>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <malloc+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f000 b86d 	b.w	800a5b0 <_malloc_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000190 	.word	0x20000190

0800a4dc <free>:
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <free+0xc>)
 800a4de:	4601      	mov	r1, r0
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	f000 b817 	b.w	800a514 <_free_r>
 800a4e6:	bf00      	nop
 800a4e8:	20000190 	.word	0x20000190

0800a4ec <memcpy>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	1e43      	subs	r3, r0, #1
 800a4f0:	440a      	add	r2, r1
 800a4f2:	4291      	cmp	r1, r2
 800a4f4:	d100      	bne.n	800a4f8 <memcpy+0xc>
 800a4f6:	bd10      	pop	{r4, pc}
 800a4f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a500:	e7f7      	b.n	800a4f2 <memcpy+0x6>

0800a502 <memset>:
 800a502:	4402      	add	r2, r0
 800a504:	4603      	mov	r3, r0
 800a506:	4293      	cmp	r3, r2
 800a508:	d100      	bne.n	800a50c <memset+0xa>
 800a50a:	4770      	bx	lr
 800a50c:	f803 1b01 	strb.w	r1, [r3], #1
 800a510:	e7f9      	b.n	800a506 <memset+0x4>
	...

0800a514 <_free_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4605      	mov	r5, r0
 800a518:	2900      	cmp	r1, #0
 800a51a:	d045      	beq.n	800a5a8 <_free_r+0x94>
 800a51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a520:	1f0c      	subs	r4, r1, #4
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfb8      	it	lt
 800a526:	18e4      	addlt	r4, r4, r3
 800a528:	f000 f8f0 	bl	800a70c <__malloc_lock>
 800a52c:	4a1f      	ldr	r2, [pc, #124]	; (800a5ac <_free_r+0x98>)
 800a52e:	6813      	ldr	r3, [r2, #0]
 800a530:	4610      	mov	r0, r2
 800a532:	b933      	cbnz	r3, 800a542 <_free_r+0x2e>
 800a534:	6063      	str	r3, [r4, #4]
 800a536:	6014      	str	r4, [r2, #0]
 800a538:	4628      	mov	r0, r5
 800a53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a53e:	f000 b8e6 	b.w	800a70e <__malloc_unlock>
 800a542:	42a3      	cmp	r3, r4
 800a544:	d90c      	bls.n	800a560 <_free_r+0x4c>
 800a546:	6821      	ldr	r1, [r4, #0]
 800a548:	1862      	adds	r2, r4, r1
 800a54a:	4293      	cmp	r3, r2
 800a54c:	bf04      	itt	eq
 800a54e:	681a      	ldreq	r2, [r3, #0]
 800a550:	685b      	ldreq	r3, [r3, #4]
 800a552:	6063      	str	r3, [r4, #4]
 800a554:	bf04      	itt	eq
 800a556:	1852      	addeq	r2, r2, r1
 800a558:	6022      	streq	r2, [r4, #0]
 800a55a:	6004      	str	r4, [r0, #0]
 800a55c:	e7ec      	b.n	800a538 <_free_r+0x24>
 800a55e:	4613      	mov	r3, r2
 800a560:	685a      	ldr	r2, [r3, #4]
 800a562:	b10a      	cbz	r2, 800a568 <_free_r+0x54>
 800a564:	42a2      	cmp	r2, r4
 800a566:	d9fa      	bls.n	800a55e <_free_r+0x4a>
 800a568:	6819      	ldr	r1, [r3, #0]
 800a56a:	1858      	adds	r0, r3, r1
 800a56c:	42a0      	cmp	r0, r4
 800a56e:	d10b      	bne.n	800a588 <_free_r+0x74>
 800a570:	6820      	ldr	r0, [r4, #0]
 800a572:	4401      	add	r1, r0
 800a574:	1858      	adds	r0, r3, r1
 800a576:	4282      	cmp	r2, r0
 800a578:	6019      	str	r1, [r3, #0]
 800a57a:	d1dd      	bne.n	800a538 <_free_r+0x24>
 800a57c:	6810      	ldr	r0, [r2, #0]
 800a57e:	6852      	ldr	r2, [r2, #4]
 800a580:	605a      	str	r2, [r3, #4]
 800a582:	4401      	add	r1, r0
 800a584:	6019      	str	r1, [r3, #0]
 800a586:	e7d7      	b.n	800a538 <_free_r+0x24>
 800a588:	d902      	bls.n	800a590 <_free_r+0x7c>
 800a58a:	230c      	movs	r3, #12
 800a58c:	602b      	str	r3, [r5, #0]
 800a58e:	e7d3      	b.n	800a538 <_free_r+0x24>
 800a590:	6820      	ldr	r0, [r4, #0]
 800a592:	1821      	adds	r1, r4, r0
 800a594:	428a      	cmp	r2, r1
 800a596:	bf04      	itt	eq
 800a598:	6811      	ldreq	r1, [r2, #0]
 800a59a:	6852      	ldreq	r2, [r2, #4]
 800a59c:	6062      	str	r2, [r4, #4]
 800a59e:	bf04      	itt	eq
 800a5a0:	1809      	addeq	r1, r1, r0
 800a5a2:	6021      	streq	r1, [r4, #0]
 800a5a4:	605c      	str	r4, [r3, #4]
 800a5a6:	e7c7      	b.n	800a538 <_free_r+0x24>
 800a5a8:	bd38      	pop	{r3, r4, r5, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200002d8 	.word	0x200002d8

0800a5b0 <_malloc_r>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	1ccd      	adds	r5, r1, #3
 800a5b4:	f025 0503 	bic.w	r5, r5, #3
 800a5b8:	3508      	adds	r5, #8
 800a5ba:	2d0c      	cmp	r5, #12
 800a5bc:	bf38      	it	cc
 800a5be:	250c      	movcc	r5, #12
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	db01      	blt.n	800a5ca <_malloc_r+0x1a>
 800a5c6:	42a9      	cmp	r1, r5
 800a5c8:	d903      	bls.n	800a5d2 <_malloc_r+0x22>
 800a5ca:	230c      	movs	r3, #12
 800a5cc:	6033      	str	r3, [r6, #0]
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}
 800a5d2:	f000 f89b 	bl	800a70c <__malloc_lock>
 800a5d6:	4a21      	ldr	r2, [pc, #132]	; (800a65c <_malloc_r+0xac>)
 800a5d8:	6814      	ldr	r4, [r2, #0]
 800a5da:	4621      	mov	r1, r4
 800a5dc:	b991      	cbnz	r1, 800a604 <_malloc_r+0x54>
 800a5de:	4c20      	ldr	r4, [pc, #128]	; (800a660 <_malloc_r+0xb0>)
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	b91b      	cbnz	r3, 800a5ec <_malloc_r+0x3c>
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	f000 f83d 	bl	800a664 <_sbrk_r>
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f000 f838 	bl	800a664 <_sbrk_r>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d124      	bne.n	800a642 <_malloc_r+0x92>
 800a5f8:	230c      	movs	r3, #12
 800a5fa:	6033      	str	r3, [r6, #0]
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	f000 f886 	bl	800a70e <__malloc_unlock>
 800a602:	e7e4      	b.n	800a5ce <_malloc_r+0x1e>
 800a604:	680b      	ldr	r3, [r1, #0]
 800a606:	1b5b      	subs	r3, r3, r5
 800a608:	d418      	bmi.n	800a63c <_malloc_r+0x8c>
 800a60a:	2b0b      	cmp	r3, #11
 800a60c:	d90f      	bls.n	800a62e <_malloc_r+0x7e>
 800a60e:	600b      	str	r3, [r1, #0]
 800a610:	50cd      	str	r5, [r1, r3]
 800a612:	18cc      	adds	r4, r1, r3
 800a614:	4630      	mov	r0, r6
 800a616:	f000 f87a 	bl	800a70e <__malloc_unlock>
 800a61a:	f104 000b 	add.w	r0, r4, #11
 800a61e:	1d23      	adds	r3, r4, #4
 800a620:	f020 0007 	bic.w	r0, r0, #7
 800a624:	1ac3      	subs	r3, r0, r3
 800a626:	d0d3      	beq.n	800a5d0 <_malloc_r+0x20>
 800a628:	425a      	negs	r2, r3
 800a62a:	50e2      	str	r2, [r4, r3]
 800a62c:	e7d0      	b.n	800a5d0 <_malloc_r+0x20>
 800a62e:	428c      	cmp	r4, r1
 800a630:	684b      	ldr	r3, [r1, #4]
 800a632:	bf16      	itet	ne
 800a634:	6063      	strne	r3, [r4, #4]
 800a636:	6013      	streq	r3, [r2, #0]
 800a638:	460c      	movne	r4, r1
 800a63a:	e7eb      	b.n	800a614 <_malloc_r+0x64>
 800a63c:	460c      	mov	r4, r1
 800a63e:	6849      	ldr	r1, [r1, #4]
 800a640:	e7cc      	b.n	800a5dc <_malloc_r+0x2c>
 800a642:	1cc4      	adds	r4, r0, #3
 800a644:	f024 0403 	bic.w	r4, r4, #3
 800a648:	42a0      	cmp	r0, r4
 800a64a:	d005      	beq.n	800a658 <_malloc_r+0xa8>
 800a64c:	1a21      	subs	r1, r4, r0
 800a64e:	4630      	mov	r0, r6
 800a650:	f000 f808 	bl	800a664 <_sbrk_r>
 800a654:	3001      	adds	r0, #1
 800a656:	d0cf      	beq.n	800a5f8 <_malloc_r+0x48>
 800a658:	6025      	str	r5, [r4, #0]
 800a65a:	e7db      	b.n	800a614 <_malloc_r+0x64>
 800a65c:	200002d8 	.word	0x200002d8
 800a660:	200002dc 	.word	0x200002dc

0800a664 <_sbrk_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4c06      	ldr	r4, [pc, #24]	; (800a680 <_sbrk_r+0x1c>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4605      	mov	r5, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	f7f6 f940 	bl	80008f4 <_sbrk>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_sbrk_r+0x1a>
 800a678:	6823      	ldr	r3, [r4, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_sbrk_r+0x1a>
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20001310 	.word	0x20001310

0800a684 <_raise_r>:
 800a684:	291f      	cmp	r1, #31
 800a686:	b538      	push	{r3, r4, r5, lr}
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	d904      	bls.n	800a698 <_raise_r+0x14>
 800a68e:	2316      	movs	r3, #22
 800a690:	6003      	str	r3, [r0, #0]
 800a692:	f04f 30ff 	mov.w	r0, #4294967295
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a69a:	b112      	cbz	r2, 800a6a2 <_raise_r+0x1e>
 800a69c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a0:	b94b      	cbnz	r3, 800a6b6 <_raise_r+0x32>
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f000 f830 	bl	800a708 <_getpid_r>
 800a6a8:	462a      	mov	r2, r5
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b2:	f000 b817 	b.w	800a6e4 <_kill_r>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d00a      	beq.n	800a6d0 <_raise_r+0x4c>
 800a6ba:	1c59      	adds	r1, r3, #1
 800a6bc:	d103      	bne.n	800a6c6 <_raise_r+0x42>
 800a6be:	2316      	movs	r3, #22
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	e7e7      	b.n	800a696 <_raise_r+0x12>
 800a6c6:	2400      	movs	r4, #0
 800a6c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	4798      	blx	r3
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7e0      	b.n	800a696 <_raise_r+0x12>

0800a6d4 <raise>:
 800a6d4:	4b02      	ldr	r3, [pc, #8]	; (800a6e0 <raise+0xc>)
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	f7ff bfd3 	b.w	800a684 <_raise_r>
 800a6de:	bf00      	nop
 800a6e0:	20000190 	.word	0x20000190

0800a6e4 <_kill_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4c07      	ldr	r4, [pc, #28]	; (800a704 <_kill_r+0x20>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	f7f6 f8e5 	bl	80008c0 <_kill>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d102      	bne.n	800a700 <_kill_r+0x1c>
 800a6fa:	6823      	ldr	r3, [r4, #0]
 800a6fc:	b103      	cbz	r3, 800a700 <_kill_r+0x1c>
 800a6fe:	602b      	str	r3, [r5, #0]
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	bf00      	nop
 800a704:	20001310 	.word	0x20001310

0800a708 <_getpid_r>:
 800a708:	f7f6 b8d2 	b.w	80008b0 <_getpid>

0800a70c <__malloc_lock>:
 800a70c:	4770      	bx	lr

0800a70e <__malloc_unlock>:
 800a70e:	4770      	bx	lr

0800a710 <_init>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr

0800a71c <_fini>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr
